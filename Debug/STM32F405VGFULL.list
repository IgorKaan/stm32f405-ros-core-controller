
STM32F405VGFULL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c0  0800a090  0800a090  0001a090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000018  0800a750  0800a750  0001a750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000110  0800a768  0800a768  0001a768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  0800a878  0800a878  0001a878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800a880  0800a880  0001a880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         000001e4  20000000  0800a884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
  9 .bss          000059ec  200001e4  200001e4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005bd0  20005bd0  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036483  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006ba0  00000000  00000000  00056697  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001d112  00000000  00000000  0005d237  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000017f8  00000000  00000000  0007a350  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000042d8  00000000  00000000  0007bb48  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ff05  00000000  00000000  0007fe20  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000af9d  00000000  00000000  0008fd25  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  0009acc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005658  00000000  00000000  0009ad40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a078 	.word	0x0800a078

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800a078 	.word	0x0800a078

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000204:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000208:	f001 b8f6 	b.w	80013f8 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	468c      	mov	ip, r1
 800022a:	460d      	mov	r5, r1
 800022c:	4604      	mov	r4, r0
 800022e:	9e08      	ldr	r6, [sp, #32]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d151      	bne.n	80002d8 <__udivmoddi4+0xb4>
 8000234:	428a      	cmp	r2, r1
 8000236:	4617      	mov	r7, r2
 8000238:	d96d      	bls.n	8000316 <__udivmoddi4+0xf2>
 800023a:	fab2 fe82 	clz	lr, r2
 800023e:	f1be 0f00 	cmp.w	lr, #0
 8000242:	d00b      	beq.n	800025c <__udivmoddi4+0x38>
 8000244:	f1ce 0c20 	rsb	ip, lr, #32
 8000248:	fa01 f50e 	lsl.w	r5, r1, lr
 800024c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000250:	fa02 f70e 	lsl.w	r7, r2, lr
 8000254:	ea4c 0c05 	orr.w	ip, ip, r5
 8000258:	fa00 f40e 	lsl.w	r4, r0, lr
 800025c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000260:	0c25      	lsrs	r5, r4, #16
 8000262:	fbbc f8fa 	udiv	r8, ip, sl
 8000266:	fa1f f987 	uxth.w	r9, r7
 800026a:	fb0a cc18 	mls	ip, sl, r8, ip
 800026e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000272:	fb08 f309 	mul.w	r3, r8, r9
 8000276:	42ab      	cmp	r3, r5
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x6c>
 800027a:	19ed      	adds	r5, r5, r7
 800027c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000280:	f080 8123 	bcs.w	80004ca <__udivmoddi4+0x2a6>
 8000284:	42ab      	cmp	r3, r5
 8000286:	f240 8120 	bls.w	80004ca <__udivmoddi4+0x2a6>
 800028a:	f1a8 0802 	sub.w	r8, r8, #2
 800028e:	443d      	add	r5, r7
 8000290:	1aed      	subs	r5, r5, r3
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb5 f0fa 	udiv	r0, r5, sl
 8000298:	fb0a 5510 	mls	r5, sl, r0, r5
 800029c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a0:	fb00 f909 	mul.w	r9, r0, r9
 80002a4:	45a1      	cmp	r9, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x98>
 80002a8:	19e4      	adds	r4, r4, r7
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ae:	f080 810a 	bcs.w	80004c6 <__udivmoddi4+0x2a2>
 80002b2:	45a1      	cmp	r9, r4
 80002b4:	f240 8107 	bls.w	80004c6 <__udivmoddi4+0x2a2>
 80002b8:	3802      	subs	r0, #2
 80002ba:	443c      	add	r4, r7
 80002bc:	eba4 0409 	sub.w	r4, r4, r9
 80002c0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c4:	2100      	movs	r1, #0
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d061      	beq.n	800038e <__udivmoddi4+0x16a>
 80002ca:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ce:	2300      	movs	r3, #0
 80002d0:	6034      	str	r4, [r6, #0]
 80002d2:	6073      	str	r3, [r6, #4]
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xc8>
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d054      	beq.n	800038a <__udivmoddi4+0x166>
 80002e0:	2100      	movs	r1, #0
 80002e2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e6:	4608      	mov	r0, r1
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	fab3 f183 	clz	r1, r3
 80002f0:	2900      	cmp	r1, #0
 80002f2:	f040 808e 	bne.w	8000412 <__udivmoddi4+0x1ee>
 80002f6:	42ab      	cmp	r3, r5
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xdc>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80fa 	bhi.w	80004f4 <__udivmoddi4+0x2d0>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb65 0503 	sbc.w	r5, r5, r3
 8000306:	2001      	movs	r0, #1
 8000308:	46ac      	mov	ip, r5
 800030a:	2e00      	cmp	r6, #0
 800030c:	d03f      	beq.n	800038e <__udivmoddi4+0x16a>
 800030e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	b912      	cbnz	r2, 800031e <__udivmoddi4+0xfa>
 8000318:	2701      	movs	r7, #1
 800031a:	fbb7 f7f2 	udiv	r7, r7, r2
 800031e:	fab7 fe87 	clz	lr, r7
 8000322:	f1be 0f00 	cmp.w	lr, #0
 8000326:	d134      	bne.n	8000392 <__udivmoddi4+0x16e>
 8000328:	1beb      	subs	r3, r5, r7
 800032a:	0c3a      	lsrs	r2, r7, #16
 800032c:	fa1f fc87 	uxth.w	ip, r7
 8000330:	2101      	movs	r1, #1
 8000332:	fbb3 f8f2 	udiv	r8, r3, r2
 8000336:	0c25      	lsrs	r5, r4, #16
 8000338:	fb02 3318 	mls	r3, r2, r8, r3
 800033c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000340:	fb0c f308 	mul.w	r3, ip, r8
 8000344:	42ab      	cmp	r3, r5
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x134>
 8000348:	19ed      	adds	r5, r5, r7
 800034a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x132>
 8000350:	42ab      	cmp	r3, r5
 8000352:	f200 80d1 	bhi.w	80004f8 <__udivmoddi4+0x2d4>
 8000356:	4680      	mov	r8, r0
 8000358:	1aed      	subs	r5, r5, r3
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000360:	fb02 5510 	mls	r5, r2, r0, r5
 8000364:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000368:	fb0c fc00 	mul.w	ip, ip, r0
 800036c:	45a4      	cmp	ip, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x15c>
 8000370:	19e4      	adds	r4, r4, r7
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x15a>
 8000378:	45a4      	cmp	ip, r4
 800037a:	f200 80b8 	bhi.w	80004ee <__udivmoddi4+0x2ca>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000388:	e79d      	b.n	80002c6 <__udivmoddi4+0xa2>
 800038a:	4631      	mov	r1, r6
 800038c:	4630      	mov	r0, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	f1ce 0420 	rsb	r4, lr, #32
 8000396:	fa05 f30e 	lsl.w	r3, r5, lr
 800039a:	fa07 f70e 	lsl.w	r7, r7, lr
 800039e:	fa20 f804 	lsr.w	r8, r0, r4
 80003a2:	0c3a      	lsrs	r2, r7, #16
 80003a4:	fa25 f404 	lsr.w	r4, r5, r4
 80003a8:	ea48 0803 	orr.w	r8, r8, r3
 80003ac:	fbb4 f1f2 	udiv	r1, r4, r2
 80003b0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b4:	fb02 4411 	mls	r4, r2, r1, r4
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003c0:	fb01 f30c 	mul.w	r3, r1, ip
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1bc>
 80003cc:	19ed      	adds	r5, r5, r7
 80003ce:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003d2:	f080 808a 	bcs.w	80004ea <__udivmoddi4+0x2c6>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	f240 8087 	bls.w	80004ea <__udivmoddi4+0x2c6>
 80003dc:	3902      	subs	r1, #2
 80003de:	443d      	add	r5, r7
 80003e0:	1aeb      	subs	r3, r5, r3
 80003e2:	fa1f f588 	uxth.w	r5, r8
 80003e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ea:	fb02 3310 	mls	r3, r2, r0, r3
 80003ee:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003f2:	fb00 f30c 	mul.w	r3, r0, ip
 80003f6:	42ab      	cmp	r3, r5
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1e6>
 80003fa:	19ed      	adds	r5, r5, r7
 80003fc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000400:	d26f      	bcs.n	80004e2 <__udivmoddi4+0x2be>
 8000402:	42ab      	cmp	r3, r5
 8000404:	d96d      	bls.n	80004e2 <__udivmoddi4+0x2be>
 8000406:	3802      	subs	r0, #2
 8000408:	443d      	add	r5, r7
 800040a:	1aeb      	subs	r3, r5, r3
 800040c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000410:	e78f      	b.n	8000332 <__udivmoddi4+0x10e>
 8000412:	f1c1 0720 	rsb	r7, r1, #32
 8000416:	fa22 f807 	lsr.w	r8, r2, r7
 800041a:	408b      	lsls	r3, r1
 800041c:	fa05 f401 	lsl.w	r4, r5, r1
 8000420:	ea48 0303 	orr.w	r3, r8, r3
 8000424:	fa20 fe07 	lsr.w	lr, r0, r7
 8000428:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800042c:	40fd      	lsrs	r5, r7
 800042e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000432:	fbb5 f9fc 	udiv	r9, r5, ip
 8000436:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800043a:	fb0c 5519 	mls	r5, ip, r9, r5
 800043e:	fa1f f883 	uxth.w	r8, r3
 8000442:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000446:	fb09 f408 	mul.w	r4, r9, r8
 800044a:	42ac      	cmp	r4, r5
 800044c:	fa02 f201 	lsl.w	r2, r2, r1
 8000450:	fa00 fa01 	lsl.w	sl, r0, r1
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x244>
 8000456:	18ed      	adds	r5, r5, r3
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800045c:	d243      	bcs.n	80004e6 <__udivmoddi4+0x2c2>
 800045e:	42ac      	cmp	r4, r5
 8000460:	d941      	bls.n	80004e6 <__udivmoddi4+0x2c2>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	441d      	add	r5, r3
 8000468:	1b2d      	subs	r5, r5, r4
 800046a:	fa1f fe8e 	uxth.w	lr, lr
 800046e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000472:	fb0c 5510 	mls	r5, ip, r0, r5
 8000476:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45a0      	cmp	r8, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x26e>
 8000482:	18e4      	adds	r4, r4, r3
 8000484:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000488:	d229      	bcs.n	80004de <__udivmoddi4+0x2ba>
 800048a:	45a0      	cmp	r8, r4
 800048c:	d927      	bls.n	80004de <__udivmoddi4+0x2ba>
 800048e:	3802      	subs	r0, #2
 8000490:	441c      	add	r4, r3
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba4 0408 	sub.w	r4, r4, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454c      	cmp	r4, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	464d      	mov	r5, r9
 80004a4:	d315      	bcc.n	80004d2 <__udivmoddi4+0x2ae>
 80004a6:	d012      	beq.n	80004ce <__udivmoddi4+0x2aa>
 80004a8:	b156      	cbz	r6, 80004c0 <__udivmoddi4+0x29c>
 80004aa:	ebba 030e 	subs.w	r3, sl, lr
 80004ae:	eb64 0405 	sbc.w	r4, r4, r5
 80004b2:	fa04 f707 	lsl.w	r7, r4, r7
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431f      	orrs	r7, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	6037      	str	r7, [r6, #0]
 80004be:	6074      	str	r4, [r6, #4]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c6:	4618      	mov	r0, r3
 80004c8:	e6f8      	b.n	80002bc <__udivmoddi4+0x98>
 80004ca:	4690      	mov	r8, r2
 80004cc:	e6e0      	b.n	8000290 <__udivmoddi4+0x6c>
 80004ce:	45c2      	cmp	sl, r8
 80004d0:	d2ea      	bcs.n	80004a8 <__udivmoddi4+0x284>
 80004d2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d6:	eb69 0503 	sbc.w	r5, r9, r3
 80004da:	3801      	subs	r0, #1
 80004dc:	e7e4      	b.n	80004a8 <__udivmoddi4+0x284>
 80004de:	4628      	mov	r0, r5
 80004e0:	e7d7      	b.n	8000492 <__udivmoddi4+0x26e>
 80004e2:	4640      	mov	r0, r8
 80004e4:	e791      	b.n	800040a <__udivmoddi4+0x1e6>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e7be      	b.n	8000468 <__udivmoddi4+0x244>
 80004ea:	4601      	mov	r1, r0
 80004ec:	e778      	b.n	80003e0 <__udivmoddi4+0x1bc>
 80004ee:	3802      	subs	r0, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	e745      	b.n	8000380 <__udivmoddi4+0x15c>
 80004f4:	4608      	mov	r0, r1
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xe6>
 80004f8:	f1a8 0802 	sub.w	r8, r8, #2
 80004fc:	443d      	add	r5, r7
 80004fe:	e72b      	b.n	8000358 <__udivmoddi4+0x134>

08000500 <selfrel_offset31>:
 8000500:	6803      	ldr	r3, [r0, #0]
 8000502:	005a      	lsls	r2, r3, #1
 8000504:	bf4c      	ite	mi
 8000506:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800050a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800050e:	4418      	add	r0, r3
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <search_EIT_table>:
 8000514:	b361      	cbz	r1, 8000570 <search_EIT_table+0x5c>
 8000516:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800051a:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 800051e:	4690      	mov	r8, r2
 8000520:	4606      	mov	r6, r0
 8000522:	46d1      	mov	r9, sl
 8000524:	2700      	movs	r7, #0
 8000526:	eb07 0409 	add.w	r4, r7, r9
 800052a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800052e:	1064      	asrs	r4, r4, #1
 8000530:	00e5      	lsls	r5, r4, #3
 8000532:	1971      	adds	r1, r6, r5
 8000534:	4608      	mov	r0, r1
 8000536:	f7ff ffe3 	bl	8000500 <selfrel_offset31>
 800053a:	45a2      	cmp	sl, r4
 800053c:	4683      	mov	fp, r0
 800053e:	f105 0008 	add.w	r0, r5, #8
 8000542:	4430      	add	r0, r6
 8000544:	d009      	beq.n	800055a <search_EIT_table+0x46>
 8000546:	f7ff ffdb 	bl	8000500 <selfrel_offset31>
 800054a:	45c3      	cmp	fp, r8
 800054c:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8000550:	d805      	bhi.n	800055e <search_EIT_table+0x4a>
 8000552:	4540      	cmp	r0, r8
 8000554:	d209      	bcs.n	800056a <search_EIT_table+0x56>
 8000556:	1c67      	adds	r7, r4, #1
 8000558:	e7e5      	b.n	8000526 <search_EIT_table+0x12>
 800055a:	45c3      	cmp	fp, r8
 800055c:	d905      	bls.n	800056a <search_EIT_table+0x56>
 800055e:	42a7      	cmp	r7, r4
 8000560:	d002      	beq.n	8000568 <search_EIT_table+0x54>
 8000562:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8000566:	e7de      	b.n	8000526 <search_EIT_table+0x12>
 8000568:	2100      	movs	r1, #0
 800056a:	4608      	mov	r0, r1
 800056c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000570:	4608      	mov	r0, r1
 8000572:	4770      	bx	lr

08000574 <__gnu_unwind_get_pr_addr>:
 8000574:	2801      	cmp	r0, #1
 8000576:	d007      	beq.n	8000588 <__gnu_unwind_get_pr_addr+0x14>
 8000578:	2802      	cmp	r0, #2
 800057a:	d007      	beq.n	800058c <__gnu_unwind_get_pr_addr+0x18>
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <__gnu_unwind_get_pr_addr+0x1c>)
 800057e:	2800      	cmp	r0, #0
 8000580:	bf0c      	ite	eq
 8000582:	4618      	moveq	r0, r3
 8000584:	2000      	movne	r0, #0
 8000586:	4770      	bx	lr
 8000588:	4802      	ldr	r0, [pc, #8]	; (8000594 <__gnu_unwind_get_pr_addr+0x20>)
 800058a:	4770      	bx	lr
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <__gnu_unwind_get_pr_addr+0x24>)
 800058e:	4770      	bx	lr
 8000590:	08000c79 	.word	0x08000c79
 8000594:	08000c7d 	.word	0x08000c7d
 8000598:	08000c81 	.word	0x08000c81

0800059c <get_eit_entry>:
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	4b24      	ldr	r3, [pc, #144]	; (8000630 <get_eit_entry+0x94>)
 80005a0:	b083      	sub	sp, #12
 80005a2:	4604      	mov	r4, r0
 80005a4:	1e8d      	subs	r5, r1, #2
 80005a6:	b37b      	cbz	r3, 8000608 <get_eit_entry+0x6c>
 80005a8:	a901      	add	r1, sp, #4
 80005aa:	4628      	mov	r0, r5
 80005ac:	f3af 8000 	nop.w
 80005b0:	b320      	cbz	r0, 80005fc <get_eit_entry+0x60>
 80005b2:	9901      	ldr	r1, [sp, #4]
 80005b4:	462a      	mov	r2, r5
 80005b6:	f7ff ffad 	bl	8000514 <search_EIT_table>
 80005ba:	4601      	mov	r1, r0
 80005bc:	b1f0      	cbz	r0, 80005fc <get_eit_entry+0x60>
 80005be:	f7ff ff9f 	bl	8000500 <selfrel_offset31>
 80005c2:	684b      	ldr	r3, [r1, #4]
 80005c4:	64a0      	str	r0, [r4, #72]	; 0x48
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d012      	beq.n	80005f0 <get_eit_entry+0x54>
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	f101 0004 	add.w	r0, r1, #4
 80005d0:	db20      	blt.n	8000614 <get_eit_entry+0x78>
 80005d2:	f7ff ff95 	bl	8000500 <selfrel_offset31>
 80005d6:	2300      	movs	r3, #0
 80005d8:	64e0      	str	r0, [r4, #76]	; 0x4c
 80005da:	6523      	str	r3, [r4, #80]	; 0x50
 80005dc:	6803      	ldr	r3, [r0, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	db1c      	blt.n	800061c <get_eit_entry+0x80>
 80005e2:	f7ff ff8d 	bl	8000500 <selfrel_offset31>
 80005e6:	2300      	movs	r3, #0
 80005e8:	6120      	str	r0, [r4, #16]
 80005ea:	4618      	mov	r0, r3
 80005ec:	b003      	add	sp, #12
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	2300      	movs	r3, #0
 80005f2:	6123      	str	r3, [r4, #16]
 80005f4:	2305      	movs	r3, #5
 80005f6:	4618      	mov	r0, r3
 80005f8:	b003      	add	sp, #12
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	2300      	movs	r3, #0
 80005fe:	6123      	str	r3, [r4, #16]
 8000600:	2309      	movs	r3, #9
 8000602:	4618      	mov	r0, r3
 8000604:	b003      	add	sp, #12
 8000606:	bd30      	pop	{r4, r5, pc}
 8000608:	490a      	ldr	r1, [pc, #40]	; (8000634 <get_eit_entry+0x98>)
 800060a:	480b      	ldr	r0, [pc, #44]	; (8000638 <get_eit_entry+0x9c>)
 800060c:	1a09      	subs	r1, r1, r0
 800060e:	10c9      	asrs	r1, r1, #3
 8000610:	9101      	str	r1, [sp, #4]
 8000612:	e7cf      	b.n	80005b4 <get_eit_entry+0x18>
 8000614:	2301      	movs	r3, #1
 8000616:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000618:	6523      	str	r3, [r4, #80]	; 0x50
 800061a:	e7df      	b.n	80005dc <get_eit_entry+0x40>
 800061c:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000620:	f7ff ffa8 	bl	8000574 <__gnu_unwind_get_pr_addr>
 8000624:	2800      	cmp	r0, #0
 8000626:	6120      	str	r0, [r4, #16]
 8000628:	bf14      	ite	ne
 800062a:	2300      	movne	r3, #0
 800062c:	2309      	moveq	r3, #9
 800062e:	e7dc      	b.n	80005ea <get_eit_entry+0x4e>
 8000630:	00000000 	.word	0x00000000
 8000634:	0800a878 	.word	0x0800a878
 8000638:	0800a768 	.word	0x0800a768

0800063c <restore_non_core_regs>:
 800063c:	6803      	ldr	r3, [r0, #0]
 800063e:	07da      	lsls	r2, r3, #31
 8000640:	b510      	push	{r4, lr}
 8000642:	4604      	mov	r4, r0
 8000644:	d406      	bmi.n	8000654 <restore_non_core_regs+0x18>
 8000646:	079b      	lsls	r3, r3, #30
 8000648:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800064c:	d509      	bpl.n	8000662 <restore_non_core_regs+0x26>
 800064e:	f000 fc51 	bl	8000ef4 <__gnu_Unwind_Restore_VFP_D>
 8000652:	6823      	ldr	r3, [r4, #0]
 8000654:	0759      	lsls	r1, r3, #29
 8000656:	d509      	bpl.n	800066c <restore_non_core_regs+0x30>
 8000658:	071a      	lsls	r2, r3, #28
 800065a:	d50e      	bpl.n	800067a <restore_non_core_regs+0x3e>
 800065c:	06db      	lsls	r3, r3, #27
 800065e:	d513      	bpl.n	8000688 <restore_non_core_regs+0x4c>
 8000660:	bd10      	pop	{r4, pc}
 8000662:	f000 fc3f 	bl	8000ee4 <__gnu_Unwind_Restore_VFP>
 8000666:	6823      	ldr	r3, [r4, #0]
 8000668:	0759      	lsls	r1, r3, #29
 800066a:	d4f5      	bmi.n	8000658 <restore_non_core_regs+0x1c>
 800066c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000670:	f000 fc48 	bl	8000f04 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000674:	6823      	ldr	r3, [r4, #0]
 8000676:	071a      	lsls	r2, r3, #28
 8000678:	d4f0      	bmi.n	800065c <restore_non_core_regs+0x20>
 800067a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800067e:	f000 fc49 	bl	8000f14 <__gnu_Unwind_Restore_WMMXD>
 8000682:	6823      	ldr	r3, [r4, #0]
 8000684:	06db      	lsls	r3, r3, #27
 8000686:	d4eb      	bmi.n	8000660 <restore_non_core_regs+0x24>
 8000688:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800068c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000690:	f000 bc84 	b.w	8000f9c <__gnu_Unwind_Restore_WMMXC>

08000694 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000694:	6803      	ldr	r3, [r0, #0]
 8000696:	b103      	cbz	r3, 800069a <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000698:	4403      	add	r3, r0
 800069a:	4618      	mov	r0, r3
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <__gnu_unwind_24bit.isra.1>:
 80006a0:	2009      	movs	r0, #9
 80006a2:	4770      	bx	lr

080006a4 <_Unwind_DebugHook>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <unwind_phase2>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	4604      	mov	r4, r0
 80006ac:	460d      	mov	r5, r1
 80006ae:	e008      	b.n	80006c2 <unwind_phase2+0x1a>
 80006b0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80006b2:	6163      	str	r3, [r4, #20]
 80006b4:	462a      	mov	r2, r5
 80006b6:	6923      	ldr	r3, [r4, #16]
 80006b8:	4621      	mov	r1, r4
 80006ba:	2001      	movs	r0, #1
 80006bc:	4798      	blx	r3
 80006be:	2808      	cmp	r0, #8
 80006c0:	d108      	bne.n	80006d4 <unwind_phase2+0x2c>
 80006c2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80006c4:	4620      	mov	r0, r4
 80006c6:	f7ff ff69 	bl	800059c <get_eit_entry>
 80006ca:	4606      	mov	r6, r0
 80006cc:	2800      	cmp	r0, #0
 80006ce:	d0ef      	beq.n	80006b0 <unwind_phase2+0x8>
 80006d0:	f009 fc87 	bl	8009fe2 <abort>
 80006d4:	2807      	cmp	r0, #7
 80006d6:	d1fb      	bne.n	80006d0 <unwind_phase2+0x28>
 80006d8:	4630      	mov	r0, r6
 80006da:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80006dc:	f7ff ffe2 	bl	80006a4 <_Unwind_DebugHook>
 80006e0:	1d28      	adds	r0, r5, #4
 80006e2:	f000 fbf3 	bl	8000ecc <__restore_core_regs>
 80006e6:	bf00      	nop

080006e8 <unwind_phase2_forced>:
 80006e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006ec:	1d0c      	adds	r4, r1, #4
 80006ee:	4605      	mov	r5, r0
 80006f0:	4692      	mov	sl, r2
 80006f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006f4:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80006f8:	ae03      	add	r6, sp, #12
 80006fa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80006fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000702:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000704:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000708:	ac02      	add	r4, sp, #8
 800070a:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800070e:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8000712:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000716:	2300      	movs	r3, #0
 8000718:	4628      	mov	r0, r5
 800071a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800071c:	6023      	str	r3, [r4, #0]
 800071e:	f7ff ff3d 	bl	800059c <get_eit_entry>
 8000722:	f1ba 0f00 	cmp.w	sl, #0
 8000726:	4607      	mov	r7, r0
 8000728:	bf14      	ite	ne
 800072a:	260a      	movne	r6, #10
 800072c:	2609      	moveq	r6, #9
 800072e:	b17f      	cbz	r7, 8000750 <unwind_phase2_forced+0x68>
 8000730:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000732:	f046 0110 	orr.w	r1, r6, #16
 8000736:	e88d 0210 	stmia.w	sp, {r4, r9}
 800073a:	462a      	mov	r2, r5
 800073c:	6463      	str	r3, [r4, #68]	; 0x44
 800073e:	2001      	movs	r0, #1
 8000740:	462b      	mov	r3, r5
 8000742:	47c0      	blx	r8
 8000744:	bb78      	cbnz	r0, 80007a6 <unwind_phase2_forced+0xbe>
 8000746:	4638      	mov	r0, r7
 8000748:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800074c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000750:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000752:	616b      	str	r3, [r5, #20]
 8000754:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000758:	4621      	mov	r1, r4
 800075a:	a87a      	add	r0, sp, #488	; 0x1e8
 800075c:	f009 fb1e 	bl	8009d9c <memcpy>
 8000760:	692b      	ldr	r3, [r5, #16]
 8000762:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000764:	4629      	mov	r1, r5
 8000766:	4630      	mov	r0, r6
 8000768:	4798      	blx	r3
 800076a:	9b88      	ldr	r3, [sp, #544]	; 0x220
 800076c:	4682      	mov	sl, r0
 800076e:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000772:	4631      	mov	r1, r6
 8000774:	6463      	str	r3, [r4, #68]	; 0x44
 8000776:	462a      	mov	r2, r5
 8000778:	462b      	mov	r3, r5
 800077a:	2001      	movs	r0, #1
 800077c:	47c0      	blx	r8
 800077e:	b990      	cbnz	r0, 80007a6 <unwind_phase2_forced+0xbe>
 8000780:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000784:	a97a      	add	r1, sp, #488	; 0x1e8
 8000786:	4620      	mov	r0, r4
 8000788:	f009 fb08 	bl	8009d9c <memcpy>
 800078c:	f1ba 0f08 	cmp.w	sl, #8
 8000790:	d106      	bne.n	80007a0 <unwind_phase2_forced+0xb8>
 8000792:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000794:	4628      	mov	r0, r5
 8000796:	f7ff ff01 	bl	800059c <get_eit_entry>
 800079a:	2609      	movs	r6, #9
 800079c:	4607      	mov	r7, r0
 800079e:	e7c6      	b.n	800072e <unwind_phase2_forced+0x46>
 80007a0:	f1ba 0f07 	cmp.w	sl, #7
 80007a4:	d005      	beq.n	80007b2 <unwind_phase2_forced+0xca>
 80007a6:	2709      	movs	r7, #9
 80007a8:	4638      	mov	r0, r7
 80007aa:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	4638      	mov	r0, r7
 80007b4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007b6:	f7ff ff75 	bl	80006a4 <_Unwind_DebugHook>
 80007ba:	a803      	add	r0, sp, #12
 80007bc:	f000 fb86 	bl	8000ecc <__restore_core_regs>

080007c0 <_Unwind_GetCFA>:
 80007c0:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80007c2:	4770      	bx	lr

080007c4 <__gnu_Unwind_RaiseException>:
 80007c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007c6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80007c8:	640b      	str	r3, [r1, #64]	; 0x40
 80007ca:	1d0e      	adds	r6, r1, #4
 80007cc:	460f      	mov	r7, r1
 80007ce:	4604      	mov	r4, r0
 80007d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007d2:	b0f9      	sub	sp, #484	; 0x1e4
 80007d4:	ad01      	add	r5, sp, #4
 80007d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007e0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007e4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80007e8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80007ec:	9600      	str	r6, [sp, #0]
 80007ee:	e006      	b.n	80007fe <__gnu_Unwind_RaiseException+0x3a>
 80007f0:	6923      	ldr	r3, [r4, #16]
 80007f2:	466a      	mov	r2, sp
 80007f4:	4621      	mov	r1, r4
 80007f6:	4798      	blx	r3
 80007f8:	2808      	cmp	r0, #8
 80007fa:	4605      	mov	r5, r0
 80007fc:	d108      	bne.n	8000810 <__gnu_Unwind_RaiseException+0x4c>
 80007fe:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000800:	4620      	mov	r0, r4
 8000802:	f7ff fecb 	bl	800059c <get_eit_entry>
 8000806:	2800      	cmp	r0, #0
 8000808:	d0f2      	beq.n	80007f0 <__gnu_Unwind_RaiseException+0x2c>
 800080a:	2009      	movs	r0, #9
 800080c:	b079      	add	sp, #484	; 0x1e4
 800080e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000810:	4668      	mov	r0, sp
 8000812:	f7ff ff13 	bl	800063c <restore_non_core_regs>
 8000816:	2d06      	cmp	r5, #6
 8000818:	d1f7      	bne.n	800080a <__gnu_Unwind_RaiseException+0x46>
 800081a:	4639      	mov	r1, r7
 800081c:	4620      	mov	r0, r4
 800081e:	f7ff ff43 	bl	80006a8 <unwind_phase2>
 8000822:	bf00      	nop

08000824 <__gnu_Unwind_ForcedUnwind>:
 8000824:	b430      	push	{r4, r5}
 8000826:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000828:	60c1      	str	r1, [r0, #12]
 800082a:	6182      	str	r2, [r0, #24]
 800082c:	4619      	mov	r1, r3
 800082e:	641d      	str	r5, [r3, #64]	; 0x40
 8000830:	2200      	movs	r2, #0
 8000832:	bc30      	pop	{r4, r5}
 8000834:	e758      	b.n	80006e8 <unwind_phase2_forced>
 8000836:	bf00      	nop

08000838 <__gnu_Unwind_Resume>:
 8000838:	b570      	push	{r4, r5, r6, lr}
 800083a:	68c6      	ldr	r6, [r0, #12]
 800083c:	6943      	ldr	r3, [r0, #20]
 800083e:	640b      	str	r3, [r1, #64]	; 0x40
 8000840:	b126      	cbz	r6, 800084c <__gnu_Unwind_Resume+0x14>
 8000842:	2201      	movs	r2, #1
 8000844:	f7ff ff50 	bl	80006e8 <unwind_phase2_forced>
 8000848:	f009 fbcb 	bl	8009fe2 <abort>
 800084c:	6903      	ldr	r3, [r0, #16]
 800084e:	460a      	mov	r2, r1
 8000850:	4604      	mov	r4, r0
 8000852:	460d      	mov	r5, r1
 8000854:	4601      	mov	r1, r0
 8000856:	2002      	movs	r0, #2
 8000858:	4798      	blx	r3
 800085a:	2807      	cmp	r0, #7
 800085c:	d007      	beq.n	800086e <__gnu_Unwind_Resume+0x36>
 800085e:	2808      	cmp	r0, #8
 8000860:	d103      	bne.n	800086a <__gnu_Unwind_Resume+0x32>
 8000862:	4629      	mov	r1, r5
 8000864:	4620      	mov	r0, r4
 8000866:	f7ff ff1f 	bl	80006a8 <unwind_phase2>
 800086a:	f009 fbba 	bl	8009fe2 <abort>
 800086e:	4630      	mov	r0, r6
 8000870:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000872:	f7ff ff17 	bl	80006a4 <_Unwind_DebugHook>
 8000876:	1d28      	adds	r0, r5, #4
 8000878:	f000 fb28 	bl	8000ecc <__restore_core_regs>

0800087c <__gnu_Unwind_Resume_or_Rethrow>:
 800087c:	68c2      	ldr	r2, [r0, #12]
 800087e:	b11a      	cbz	r2, 8000888 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000880:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8000882:	640a      	str	r2, [r1, #64]	; 0x40
 8000884:	2200      	movs	r2, #0
 8000886:	e72f      	b.n	80006e8 <unwind_phase2_forced>
 8000888:	e79c      	b.n	80007c4 <__gnu_Unwind_RaiseException>
 800088a:	bf00      	nop

0800088c <_Unwind_Complete>:
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop

08000890 <_Unwind_DeleteException>:
 8000890:	6883      	ldr	r3, [r0, #8]
 8000892:	b113      	cbz	r3, 800089a <_Unwind_DeleteException+0xa>
 8000894:	4601      	mov	r1, r0
 8000896:	2001      	movs	r0, #1
 8000898:	4718      	bx	r3
 800089a:	4770      	bx	lr

0800089c <_Unwind_VRS_Get>:
 800089c:	b500      	push	{lr}
 800089e:	2904      	cmp	r1, #4
 80008a0:	d807      	bhi.n	80008b2 <_Unwind_VRS_Get+0x16>
 80008a2:	e8df f001 	tbb	[pc, r1]
 80008a6:	0903      	.short	0x0903
 80008a8:	0906      	.short	0x0906
 80008aa:	09          	.byte	0x09
 80008ab:	00          	.byte	0x00
 80008ac:	b90b      	cbnz	r3, 80008b2 <_Unwind_VRS_Get+0x16>
 80008ae:	2a0f      	cmp	r2, #15
 80008b0:	d905      	bls.n	80008be <_Unwind_VRS_Get+0x22>
 80008b2:	2002      	movs	r0, #2
 80008b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80008b8:	2001      	movs	r0, #1
 80008ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80008be:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80008c2:	4618      	mov	r0, r3
 80008c4:	6853      	ldr	r3, [r2, #4]
 80008c6:	9a01      	ldr	r2, [sp, #4]
 80008c8:	6013      	str	r3, [r2, #0]
 80008ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80008ce:	bf00      	nop

080008d0 <_Unwind_GetGR>:
 80008d0:	b510      	push	{r4, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	2300      	movs	r3, #0
 80008d6:	ac03      	add	r4, sp, #12
 80008d8:	460a      	mov	r2, r1
 80008da:	9400      	str	r4, [sp, #0]
 80008dc:	4619      	mov	r1, r3
 80008de:	f7ff ffdd 	bl	800089c <_Unwind_VRS_Get>
 80008e2:	9803      	ldr	r0, [sp, #12]
 80008e4:	b004      	add	sp, #16
 80008e6:	bd10      	pop	{r4, pc}

080008e8 <_Unwind_VRS_Set>:
 80008e8:	b500      	push	{lr}
 80008ea:	2904      	cmp	r1, #4
 80008ec:	d807      	bhi.n	80008fe <_Unwind_VRS_Set+0x16>
 80008ee:	e8df f001 	tbb	[pc, r1]
 80008f2:	0903      	.short	0x0903
 80008f4:	0906      	.short	0x0906
 80008f6:	09          	.byte	0x09
 80008f7:	00          	.byte	0x00
 80008f8:	b90b      	cbnz	r3, 80008fe <_Unwind_VRS_Set+0x16>
 80008fa:	2a0f      	cmp	r2, #15
 80008fc:	d905      	bls.n	800090a <_Unwind_VRS_Set+0x22>
 80008fe:	2002      	movs	r0, #2
 8000900:	f85d fb04 	ldr.w	pc, [sp], #4
 8000904:	2001      	movs	r0, #1
 8000906:	f85d fb04 	ldr.w	pc, [sp], #4
 800090a:	9901      	ldr	r1, [sp, #4]
 800090c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000910:	6809      	ldr	r1, [r1, #0]
 8000912:	6051      	str	r1, [r2, #4]
 8000914:	4618      	mov	r0, r3
 8000916:	f85d fb04 	ldr.w	pc, [sp], #4
 800091a:	bf00      	nop

0800091c <_Unwind_SetGR>:
 800091c:	b510      	push	{r4, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	ac04      	add	r4, sp, #16
 8000922:	2300      	movs	r3, #0
 8000924:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000928:	460a      	mov	r2, r1
 800092a:	9400      	str	r4, [sp, #0]
 800092c:	4619      	mov	r1, r3
 800092e:	f7ff ffdb 	bl	80008e8 <_Unwind_VRS_Set>
 8000932:	b004      	add	sp, #16
 8000934:	bd10      	pop	{r4, pc}
 8000936:	bf00      	nop

08000938 <__gnu_Unwind_Backtrace>:
 8000938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
 800093e:	1d15      	adds	r5, r2, #4
 8000940:	4607      	mov	r7, r0
 8000942:	460e      	mov	r6, r1
 8000944:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000946:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800094a:	ac17      	add	r4, sp, #92	; 0x5c
 800094c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800094e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000950:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000954:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000956:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800095a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800095e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000962:	9516      	str	r5, [sp, #88]	; 0x58
 8000964:	e010      	b.n	8000988 <__gnu_Unwind_Backtrace+0x50>
 8000966:	a816      	add	r0, sp, #88	; 0x58
 8000968:	f7ff ffd8 	bl	800091c <_Unwind_SetGR>
 800096c:	4631      	mov	r1, r6
 800096e:	a816      	add	r0, sp, #88	; 0x58
 8000970:	47b8      	blx	r7
 8000972:	aa16      	add	r2, sp, #88	; 0x58
 8000974:	4669      	mov	r1, sp
 8000976:	b978      	cbnz	r0, 8000998 <__gnu_Unwind_Backtrace+0x60>
 8000978:	9b04      	ldr	r3, [sp, #16]
 800097a:	2008      	movs	r0, #8
 800097c:	4798      	blx	r3
 800097e:	2805      	cmp	r0, #5
 8000980:	4604      	mov	r4, r0
 8000982:	d00a      	beq.n	800099a <__gnu_Unwind_Backtrace+0x62>
 8000984:	2809      	cmp	r0, #9
 8000986:	d007      	beq.n	8000998 <__gnu_Unwind_Backtrace+0x60>
 8000988:	9926      	ldr	r1, [sp, #152]	; 0x98
 800098a:	4668      	mov	r0, sp
 800098c:	f7ff fe06 	bl	800059c <get_eit_entry>
 8000990:	466a      	mov	r2, sp
 8000992:	210c      	movs	r1, #12
 8000994:	2800      	cmp	r0, #0
 8000996:	d0e6      	beq.n	8000966 <__gnu_Unwind_Backtrace+0x2e>
 8000998:	2409      	movs	r4, #9
 800099a:	a816      	add	r0, sp, #88	; 0x58
 800099c:	f7ff fe4e 	bl	800063c <restore_non_core_regs>
 80009a0:	4620      	mov	r0, r4
 80009a2:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80009a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080009a8 <__gnu_unwind_pr_common>:
 80009a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009ac:	460d      	mov	r5, r1
 80009ae:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80009b0:	b08b      	sub	sp, #44	; 0x2c
 80009b2:	1d0c      	adds	r4, r1, #4
 80009b4:	6809      	ldr	r1, [r1, #0]
 80009b6:	9107      	str	r1, [sp, #28]
 80009b8:	4691      	mov	r9, r2
 80009ba:	9408      	str	r4, [sp, #32]
 80009bc:	f000 0b03 	and.w	fp, r0, #3
 80009c0:	461e      	mov	r6, r3
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d160      	bne.n	8000a88 <__gnu_unwind_pr_common+0xe0>
 80009c6:	0209      	lsls	r1, r1, #8
 80009c8:	2303      	movs	r3, #3
 80009ca:	9107      	str	r1, [sp, #28]
 80009cc:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 80009d0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80009d4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80009d6:	f1bb 0f02 	cmp.w	fp, #2
 80009da:	bf08      	it	eq
 80009dc:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80009de:	f013 0301 	ands.w	r3, r3, #1
 80009e2:	d140      	bne.n	8000a66 <__gnu_unwind_pr_common+0xbe>
 80009e4:	9301      	str	r3, [sp, #4]
 80009e6:	f000 0308 	and.w	r3, r0, #8
 80009ea:	9303      	str	r3, [sp, #12]
 80009ec:	f8d4 8000 	ldr.w	r8, [r4]
 80009f0:	f1b8 0f00 	cmp.w	r8, #0
 80009f4:	d039      	beq.n	8000a6a <__gnu_unwind_pr_common+0xc2>
 80009f6:	2e02      	cmp	r6, #2
 80009f8:	d043      	beq.n	8000a82 <__gnu_unwind_pr_common+0xda>
 80009fa:	f8b4 8000 	ldrh.w	r8, [r4]
 80009fe:	8867      	ldrh	r7, [r4, #2]
 8000a00:	3404      	adds	r4, #4
 8000a02:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000a04:	f027 0a01 	bic.w	sl, r7, #1
 8000a08:	210f      	movs	r1, #15
 8000a0a:	4648      	mov	r0, r9
 8000a0c:	449a      	add	sl, r3
 8000a0e:	f7ff ff5f 	bl	80008d0 <_Unwind_GetGR>
 8000a12:	4582      	cmp	sl, r0
 8000a14:	d833      	bhi.n	8000a7e <__gnu_unwind_pr_common+0xd6>
 8000a16:	f028 0301 	bic.w	r3, r8, #1
 8000a1a:	449a      	add	sl, r3
 8000a1c:	4550      	cmp	r0, sl
 8000a1e:	bf2c      	ite	cs
 8000a20:	2000      	movcs	r0, #0
 8000a22:	2001      	movcc	r0, #1
 8000a24:	007f      	lsls	r7, r7, #1
 8000a26:	f007 0702 	and.w	r7, r7, #2
 8000a2a:	f008 0801 	and.w	r8, r8, #1
 8000a2e:	ea47 0708 	orr.w	r7, r7, r8
 8000a32:	2f01      	cmp	r7, #1
 8000a34:	d03e      	beq.n	8000ab4 <__gnu_unwind_pr_common+0x10c>
 8000a36:	d335      	bcc.n	8000aa4 <__gnu_unwind_pr_common+0xfc>
 8000a38:	2f02      	cmp	r7, #2
 8000a3a:	d11c      	bne.n	8000a76 <__gnu_unwind_pr_common+0xce>
 8000a3c:	6823      	ldr	r3, [r4, #0]
 8000a3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000a42:	9202      	str	r2, [sp, #8]
 8000a44:	f1bb 0f00 	cmp.w	fp, #0
 8000a48:	d176      	bne.n	8000b38 <__gnu_unwind_pr_common+0x190>
 8000a4a:	b128      	cbz	r0, 8000a58 <__gnu_unwind_pr_common+0xb0>
 8000a4c:	9903      	ldr	r1, [sp, #12]
 8000a4e:	2900      	cmp	r1, #0
 8000a50:	d07e      	beq.n	8000b50 <__gnu_unwind_pr_common+0x1a8>
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	f000 80a6 	beq.w	8000ba4 <__gnu_unwind_pr_common+0x1fc>
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	db77      	blt.n	8000b4c <__gnu_unwind_pr_common+0x1a4>
 8000a5c:	9b02      	ldr	r3, [sp, #8]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000a64:	e7c2      	b.n	80009ec <__gnu_unwind_pr_common+0x44>
 8000a66:	2300      	movs	r3, #0
 8000a68:	9301      	str	r3, [sp, #4]
 8000a6a:	2e02      	cmp	r6, #2
 8000a6c:	dd3e      	ble.n	8000aec <__gnu_unwind_pr_common+0x144>
 8000a6e:	f7ff fe17 	bl	80006a0 <__gnu_unwind_24bit.isra.1>
 8000a72:	2800      	cmp	r0, #0
 8000a74:	d040      	beq.n	8000af8 <__gnu_unwind_pr_common+0x150>
 8000a76:	2009      	movs	r0, #9
 8000a78:	b00b      	add	sp, #44	; 0x2c
 8000a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a7e:	2000      	movs	r0, #0
 8000a80:	e7d0      	b.n	8000a24 <__gnu_unwind_pr_common+0x7c>
 8000a82:	6867      	ldr	r7, [r4, #4]
 8000a84:	3408      	adds	r4, #8
 8000a86:	e7bc      	b.n	8000a02 <__gnu_unwind_pr_common+0x5a>
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	dca3      	bgt.n	80009d4 <__gnu_unwind_pr_common+0x2c>
 8000a8c:	0c0b      	lsrs	r3, r1, #16
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	0409      	lsls	r1, r1, #16
 8000a92:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000a96:	2302      	movs	r3, #2
 8000a98:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000a9c:	9107      	str	r1, [sp, #28]
 8000a9e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000aa2:	e797      	b.n	80009d4 <__gnu_unwind_pr_common+0x2c>
 8000aa4:	f1bb 0f00 	cmp.w	fp, #0
 8000aa8:	d002      	beq.n	8000ab0 <__gnu_unwind_pr_common+0x108>
 8000aaa:	2800      	cmp	r0, #0
 8000aac:	f040 80bd 	bne.w	8000c2a <__gnu_unwind_pr_common+0x282>
 8000ab0:	3404      	adds	r4, #4
 8000ab2:	e79b      	b.n	80009ec <__gnu_unwind_pr_common+0x44>
 8000ab4:	f1bb 0f00 	cmp.w	fp, #0
 8000ab8:	d125      	bne.n	8000b06 <__gnu_unwind_pr_common+0x15e>
 8000aba:	b1a8      	cbz	r0, 8000ae8 <__gnu_unwind_pr_common+0x140>
 8000abc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000ac0:	1c99      	adds	r1, r3, #2
 8000ac2:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000ac6:	d0d6      	beq.n	8000a76 <__gnu_unwind_pr_common+0xce>
 8000ac8:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000acc:	3301      	adds	r3, #1
 8000ace:	9106      	str	r1, [sp, #24]
 8000ad0:	f000 80a3 	beq.w	8000c1a <__gnu_unwind_pr_common+0x272>
 8000ad4:	1d20      	adds	r0, r4, #4
 8000ad6:	f7ff fddd 	bl	8000694 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000ada:	ab06      	add	r3, sp, #24
 8000adc:	4601      	mov	r1, r0
 8000ade:	4628      	mov	r0, r5
 8000ae0:	f3af 8000 	nop.w
 8000ae4:	2800      	cmp	r0, #0
 8000ae6:	d177      	bne.n	8000bd8 <__gnu_unwind_pr_common+0x230>
 8000ae8:	3408      	adds	r4, #8
 8000aea:	e77f      	b.n	80009ec <__gnu_unwind_pr_common+0x44>
 8000aec:	a907      	add	r1, sp, #28
 8000aee:	4648      	mov	r0, r9
 8000af0:	f000 faee 	bl	80010d0 <__gnu_unwind_execute>
 8000af4:	2800      	cmp	r0, #0
 8000af6:	d1be      	bne.n	8000a76 <__gnu_unwind_pr_common+0xce>
 8000af8:	9b01      	ldr	r3, [sp, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d15c      	bne.n	8000bb8 <__gnu_unwind_pr_common+0x210>
 8000afe:	2008      	movs	r0, #8
 8000b00:	b00b      	add	sp, #44	; 0x2c
 8000b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b06:	210d      	movs	r1, #13
 8000b08:	4648      	mov	r0, r9
 8000b0a:	6a2f      	ldr	r7, [r5, #32]
 8000b0c:	f7ff fee0 	bl	80008d0 <_Unwind_GetGR>
 8000b10:	4287      	cmp	r7, r0
 8000b12:	d1e9      	bne.n	8000ae8 <__gnu_unwind_pr_common+0x140>
 8000b14:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b16:	429c      	cmp	r4, r3
 8000b18:	d1e6      	bne.n	8000ae8 <__gnu_unwind_pr_common+0x140>
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	f7ff fcf0 	bl	8000500 <selfrel_offset31>
 8000b20:	210f      	movs	r1, #15
 8000b22:	4602      	mov	r2, r0
 8000b24:	4648      	mov	r0, r9
 8000b26:	f7ff fef9 	bl	800091c <_Unwind_SetGR>
 8000b2a:	4648      	mov	r0, r9
 8000b2c:	462a      	mov	r2, r5
 8000b2e:	2100      	movs	r1, #0
 8000b30:	f7ff fef4 	bl	800091c <_Unwind_SetGR>
 8000b34:	2007      	movs	r0, #7
 8000b36:	e79f      	b.n	8000a78 <__gnu_unwind_pr_common+0xd0>
 8000b38:	210d      	movs	r1, #13
 8000b3a:	4648      	mov	r0, r9
 8000b3c:	6a2f      	ldr	r7, [r5, #32]
 8000b3e:	f7ff fec7 	bl	80008d0 <_Unwind_GetGR>
 8000b42:	4287      	cmp	r7, r0
 8000b44:	d058      	beq.n	8000bf8 <__gnu_unwind_pr_common+0x250>
 8000b46:	6823      	ldr	r3, [r4, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	da87      	bge.n	8000a5c <__gnu_unwind_pr_common+0xb4>
 8000b4c:	3404      	adds	r4, #4
 8000b4e:	e785      	b.n	8000a5c <__gnu_unwind_pr_common+0xb4>
 8000b50:	9b02      	ldr	r3, [sp, #8]
 8000b52:	b33b      	cbz	r3, 8000ba4 <__gnu_unwind_pr_common+0x1fc>
 8000b54:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000b58:	1d27      	adds	r7, r4, #4
 8000b5a:	f8cd b010 	str.w	fp, [sp, #16]
 8000b5e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000b62:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000b66:	9605      	str	r6, [sp, #20]
 8000b68:	46a3      	mov	fp, r4
 8000b6a:	461c      	mov	r4, r3
 8000b6c:	e002      	b.n	8000b74 <__gnu_unwind_pr_common+0x1cc>
 8000b6e:	45b2      	cmp	sl, r6
 8000b70:	46b0      	mov	r8, r6
 8000b72:	d016      	beq.n	8000ba2 <__gnu_unwind_pr_common+0x1fa>
 8000b74:	4638      	mov	r0, r7
 8000b76:	9406      	str	r4, [sp, #24]
 8000b78:	f7ff fd8c 	bl	8000694 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000b7c:	ab06      	add	r3, sp, #24
 8000b7e:	4601      	mov	r1, r0
 8000b80:	2200      	movs	r2, #0
 8000b82:	4628      	mov	r0, r5
 8000b84:	f3af 8000 	nop.w
 8000b88:	f108 0601 	add.w	r6, r8, #1
 8000b8c:	3704      	adds	r7, #4
 8000b8e:	2800      	cmp	r0, #0
 8000b90:	d0ed      	beq.n	8000b6e <__gnu_unwind_pr_common+0x1c6>
 8000b92:	9b02      	ldr	r3, [sp, #8]
 8000b94:	9e05      	ldr	r6, [sp, #20]
 8000b96:	4543      	cmp	r3, r8
 8000b98:	465c      	mov	r4, fp
 8000b9a:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000b9e:	d1d2      	bne.n	8000b46 <__gnu_unwind_pr_common+0x19e>
 8000ba0:	e000      	b.n	8000ba4 <__gnu_unwind_pr_common+0x1fc>
 8000ba2:	465c      	mov	r4, fp
 8000ba4:	4648      	mov	r0, r9
 8000ba6:	210d      	movs	r1, #13
 8000ba8:	f7ff fe92 	bl	80008d0 <_Unwind_GetGR>
 8000bac:	9b06      	ldr	r3, [sp, #24]
 8000bae:	6228      	str	r0, [r5, #32]
 8000bb0:	62ac      	str	r4, [r5, #40]	; 0x28
 8000bb2:	626b      	str	r3, [r5, #36]	; 0x24
 8000bb4:	2006      	movs	r0, #6
 8000bb6:	e75f      	b.n	8000a78 <__gnu_unwind_pr_common+0xd0>
 8000bb8:	210f      	movs	r1, #15
 8000bba:	4648      	mov	r0, r9
 8000bbc:	f7ff fe88 	bl	80008d0 <_Unwind_GetGR>
 8000bc0:	210e      	movs	r1, #14
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	4648      	mov	r0, r9
 8000bc6:	f7ff fea9 	bl	800091c <_Unwind_SetGR>
 8000bca:	4648      	mov	r0, r9
 8000bcc:	4a29      	ldr	r2, [pc, #164]	; (8000c74 <__gnu_unwind_pr_common+0x2cc>)
 8000bce:	210f      	movs	r1, #15
 8000bd0:	f7ff fea4 	bl	800091c <_Unwind_SetGR>
 8000bd4:	2007      	movs	r0, #7
 8000bd6:	e74f      	b.n	8000a78 <__gnu_unwind_pr_common+0xd0>
 8000bd8:	4607      	mov	r7, r0
 8000bda:	210d      	movs	r1, #13
 8000bdc:	4648      	mov	r0, r9
 8000bde:	f7ff fe77 	bl	80008d0 <_Unwind_GetGR>
 8000be2:	2f02      	cmp	r7, #2
 8000be4:	6228      	str	r0, [r5, #32]
 8000be6:	d11d      	bne.n	8000c24 <__gnu_unwind_pr_common+0x27c>
 8000be8:	462b      	mov	r3, r5
 8000bea:	9a06      	ldr	r2, [sp, #24]
 8000bec:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000bf0:	626b      	str	r3, [r5, #36]	; 0x24
 8000bf2:	62ac      	str	r4, [r5, #40]	; 0x28
 8000bf4:	2006      	movs	r0, #6
 8000bf6:	e73f      	b.n	8000a78 <__gnu_unwind_pr_common+0xd0>
 8000bf8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000bfa:	429c      	cmp	r4, r3
 8000bfc:	d1a3      	bne.n	8000b46 <__gnu_unwind_pr_common+0x19e>
 8000bfe:	2204      	movs	r2, #4
 8000c00:	2700      	movs	r7, #0
 8000c02:	18a3      	adds	r3, r4, r2
 8000c04:	9902      	ldr	r1, [sp, #8]
 8000c06:	62a9      	str	r1, [r5, #40]	; 0x28
 8000c08:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000c0a:	632a      	str	r2, [r5, #48]	; 0x30
 8000c0c:	636b      	str	r3, [r5, #52]	; 0x34
 8000c0e:	6823      	ldr	r3, [r4, #0]
 8000c10:	42bb      	cmp	r3, r7
 8000c12:	db1d      	blt.n	8000c50 <__gnu_unwind_pr_common+0x2a8>
 8000c14:	2301      	movs	r3, #1
 8000c16:	9301      	str	r3, [sp, #4]
 8000c18:	e720      	b.n	8000a5c <__gnu_unwind_pr_common+0xb4>
 8000c1a:	4648      	mov	r0, r9
 8000c1c:	210d      	movs	r1, #13
 8000c1e:	f7ff fe57 	bl	80008d0 <_Unwind_GetGR>
 8000c22:	6228      	str	r0, [r5, #32]
 8000c24:	9b06      	ldr	r3, [sp, #24]
 8000c26:	626b      	str	r3, [r5, #36]	; 0x24
 8000c28:	e7e3      	b.n	8000bf2 <__gnu_unwind_pr_common+0x24a>
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	f7ff fc68 	bl	8000500 <selfrel_offset31>
 8000c30:	3404      	adds	r4, #4
 8000c32:	4606      	mov	r6, r0
 8000c34:	63ac      	str	r4, [r5, #56]	; 0x38
 8000c36:	4628      	mov	r0, r5
 8000c38:	f3af 8000 	nop.w
 8000c3c:	2800      	cmp	r0, #0
 8000c3e:	f43f af1a 	beq.w	8000a76 <__gnu_unwind_pr_common+0xce>
 8000c42:	4648      	mov	r0, r9
 8000c44:	4632      	mov	r2, r6
 8000c46:	210f      	movs	r1, #15
 8000c48:	f7ff fe68 	bl	800091c <_Unwind_SetGR>
 8000c4c:	2007      	movs	r0, #7
 8000c4e:	e713      	b.n	8000a78 <__gnu_unwind_pr_common+0xd0>
 8000c50:	4608      	mov	r0, r1
 8000c52:	3001      	adds	r0, #1
 8000c54:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000c58:	f7ff fc52 	bl	8000500 <selfrel_offset31>
 8000c5c:	210f      	movs	r1, #15
 8000c5e:	4602      	mov	r2, r0
 8000c60:	4648      	mov	r0, r9
 8000c62:	f7ff fe5b 	bl	800091c <_Unwind_SetGR>
 8000c66:	4648      	mov	r0, r9
 8000c68:	462a      	mov	r2, r5
 8000c6a:	4639      	mov	r1, r7
 8000c6c:	f7ff fe56 	bl	800091c <_Unwind_SetGR>
 8000c70:	2007      	movs	r0, #7
 8000c72:	e701      	b.n	8000a78 <__gnu_unwind_pr_common+0xd0>
 8000c74:	00000000 	.word	0x00000000

08000c78 <__aeabi_unwind_cpp_pr0>:
 8000c78:	2300      	movs	r3, #0
 8000c7a:	e695      	b.n	80009a8 <__gnu_unwind_pr_common>

08000c7c <__aeabi_unwind_cpp_pr1>:
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e693      	b.n	80009a8 <__gnu_unwind_pr_common>

08000c80 <__aeabi_unwind_cpp_pr2>:
 8000c80:	2302      	movs	r3, #2
 8000c82:	e691      	b.n	80009a8 <__gnu_unwind_pr_common>

08000c84 <_Unwind_VRS_Pop>:
 8000c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c86:	4604      	mov	r4, r0
 8000c88:	b0c5      	sub	sp, #276	; 0x114
 8000c8a:	2904      	cmp	r1, #4
 8000c8c:	d80d      	bhi.n	8000caa <_Unwind_VRS_Pop+0x26>
 8000c8e:	e8df f001 	tbb	[pc, r1]
 8000c92:	0353      	.short	0x0353
 8000c94:	310c      	.short	0x310c
 8000c96:	0f          	.byte	0x0f
 8000c97:	00          	.byte	0x00
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000c9e:	b295      	uxth	r5, r2
 8000ca0:	d162      	bne.n	8000d68 <_Unwind_VRS_Pop+0xe4>
 8000ca2:	1972      	adds	r2, r6, r5
 8000ca4:	2a10      	cmp	r2, #16
 8000ca6:	f240 809b 	bls.w	8000de0 <_Unwind_VRS_Pop+0x15c>
 8000caa:	2002      	movs	r0, #2
 8000cac:	b045      	add	sp, #276	; 0x114
 8000cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d1fa      	bne.n	8000caa <_Unwind_VRS_Pop+0x26>
 8000cb4:	2a10      	cmp	r2, #16
 8000cb6:	d8f8      	bhi.n	8000caa <_Unwind_VRS_Pop+0x26>
 8000cb8:	6823      	ldr	r3, [r4, #0]
 8000cba:	06d8      	lsls	r0, r3, #27
 8000cbc:	f100 80c6 	bmi.w	8000e4c <_Unwind_VRS_Pop+0x1c8>
 8000cc0:	ae22      	add	r6, sp, #136	; 0x88
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	9201      	str	r2, [sp, #4]
 8000cc6:	f000 f973 	bl	8000fb0 <__gnu_Unwind_Save_WMMXC>
 8000cca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000ccc:	9a01      	ldr	r2, [sp, #4]
 8000cce:	2300      	movs	r3, #0
 8000cd0:	2501      	movs	r5, #1
 8000cd2:	fa05 f103 	lsl.w	r1, r5, r3
 8000cd6:	4211      	tst	r1, r2
 8000cd8:	d003      	beq.n	8000ce2 <_Unwind_VRS_Pop+0x5e>
 8000cda:	6801      	ldr	r1, [r0, #0]
 8000cdc:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000ce0:	3004      	adds	r0, #4
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	2b04      	cmp	r3, #4
 8000ce6:	d1f4      	bne.n	8000cd2 <_Unwind_VRS_Pop+0x4e>
 8000ce8:	63a0      	str	r0, [r4, #56]	; 0x38
 8000cea:	4630      	mov	r0, r6
 8000cec:	f000 f956 	bl	8000f9c <__gnu_Unwind_Restore_WMMXC>
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	e7db      	b.n	8000cac <_Unwind_VRS_Pop+0x28>
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	d1d8      	bne.n	8000caa <_Unwind_VRS_Pop+0x26>
 8000cf8:	0c15      	lsrs	r5, r2, #16
 8000cfa:	b297      	uxth	r7, r2
 8000cfc:	19eb      	adds	r3, r5, r7
 8000cfe:	2b10      	cmp	r3, #16
 8000d00:	d8d3      	bhi.n	8000caa <_Unwind_VRS_Pop+0x26>
 8000d02:	6823      	ldr	r3, [r4, #0]
 8000d04:	071e      	lsls	r6, r3, #28
 8000d06:	f100 80b5 	bmi.w	8000e74 <_Unwind_VRS_Pop+0x1f0>
 8000d0a:	ae22      	add	r6, sp, #136	; 0x88
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	f000 f923 	bl	8000f58 <__gnu_Unwind_Save_WMMXD>
 8000d12:	00ed      	lsls	r5, r5, #3
 8000d14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d16:	b14f      	cbz	r7, 8000d2c <_Unwind_VRS_Pop+0xa8>
 8000d18:	3d04      	subs	r5, #4
 8000d1a:	1971      	adds	r1, r6, r5
 8000d1c:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8000d20:	f853 2b04 	ldr.w	r2, [r3], #4
 8000d24:	f841 2f04 	str.w	r2, [r1, #4]!
 8000d28:	4283      	cmp	r3, r0
 8000d2a:	d1f9      	bne.n	8000d20 <_Unwind_VRS_Pop+0x9c>
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	63a3      	str	r3, [r4, #56]	; 0x38
 8000d30:	f000 f8f0 	bl	8000f14 <__gnu_Unwind_Restore_WMMXD>
 8000d34:	2000      	movs	r0, #0
 8000d36:	e7b9      	b.n	8000cac <_Unwind_VRS_Pop+0x28>
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d1b6      	bne.n	8000caa <_Unwind_VRS_Pop+0x26>
 8000d3c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000d3e:	b297      	uxth	r7, r2
 8000d40:	1d20      	adds	r0, r4, #4
 8000d42:	2601      	movs	r6, #1
 8000d44:	fa06 f103 	lsl.w	r1, r6, r3
 8000d48:	4239      	tst	r1, r7
 8000d4a:	f103 0301 	add.w	r3, r3, #1
 8000d4e:	d002      	beq.n	8000d56 <_Unwind_VRS_Pop+0xd2>
 8000d50:	6829      	ldr	r1, [r5, #0]
 8000d52:	6001      	str	r1, [r0, #0]
 8000d54:	3504      	adds	r5, #4
 8000d56:	2b10      	cmp	r3, #16
 8000d58:	f100 0004 	add.w	r0, r0, #4
 8000d5c:	d1f2      	bne.n	8000d44 <_Unwind_VRS_Pop+0xc0>
 8000d5e:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000d62:	d13b      	bne.n	8000ddc <_Unwind_VRS_Pop+0x158>
 8000d64:	63a5      	str	r5, [r4, #56]	; 0x38
 8000d66:	e7a1      	b.n	8000cac <_Unwind_VRS_Pop+0x28>
 8000d68:	2b05      	cmp	r3, #5
 8000d6a:	d19e      	bne.n	8000caa <_Unwind_VRS_Pop+0x26>
 8000d6c:	1977      	adds	r7, r6, r5
 8000d6e:	2f20      	cmp	r7, #32
 8000d70:	d89b      	bhi.n	8000caa <_Unwind_VRS_Pop+0x26>
 8000d72:	2e0f      	cmp	r6, #15
 8000d74:	d966      	bls.n	8000e44 <_Unwind_VRS_Pop+0x1c0>
 8000d76:	462f      	mov	r7, r5
 8000d78:	2d00      	cmp	r5, #0
 8000d7a:	d13a      	bne.n	8000df2 <_Unwind_VRS_Pop+0x16e>
 8000d7c:	462a      	mov	r2, r5
 8000d7e:	2700      	movs	r7, #0
 8000d80:	2a00      	cmp	r2, #0
 8000d82:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000d84:	dd72      	ble.n	8000e6c <_Unwind_VRS_Pop+0x1e8>
 8000d86:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000d8a:	4601      	mov	r1, r0
 8000d8c:	a844      	add	r0, sp, #272	; 0x110
 8000d8e:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000d92:	388c      	subs	r0, #140	; 0x8c
 8000d94:	f851 5b04 	ldr.w	r5, [r1], #4
 8000d98:	f840 5f04 	str.w	r5, [r0, #4]!
 8000d9c:	4291      	cmp	r1, r2
 8000d9e:	d1f9      	bne.n	8000d94 <_Unwind_VRS_Pop+0x110>
 8000da0:	4608      	mov	r0, r1
 8000da2:	b197      	cbz	r7, 8000dca <_Unwind_VRS_Pop+0x146>
 8000da4:	2e10      	cmp	r6, #16
 8000da6:	4632      	mov	r2, r6
 8000da8:	a944      	add	r1, sp, #272	; 0x110
 8000daa:	bf38      	it	cc
 8000dac:	2210      	movcc	r2, #16
 8000dae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000db2:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000db6:	0079      	lsls	r1, r7, #1
 8000db8:	3a04      	subs	r2, #4
 8000dba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000dbe:	f850 5b04 	ldr.w	r5, [r0], #4
 8000dc2:	f842 5f04 	str.w	r5, [r2, #4]!
 8000dc6:	4288      	cmp	r0, r1
 8000dc8:	d1f9      	bne.n	8000dbe <_Unwind_VRS_Pop+0x13a>
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d048      	beq.n	8000e60 <_Unwind_VRS_Pop+0x1dc>
 8000dce:	2e0f      	cmp	r6, #15
 8000dd0:	63a1      	str	r1, [r4, #56]	; 0x38
 8000dd2:	d933      	bls.n	8000e3c <_Unwind_VRS_Pop+0x1b8>
 8000dd4:	b117      	cbz	r7, 8000ddc <_Unwind_VRS_Pop+0x158>
 8000dd6:	a802      	add	r0, sp, #8
 8000dd8:	f000 f894 	bl	8000f04 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000ddc:	2000      	movs	r0, #0
 8000dde:	e765      	b.n	8000cac <_Unwind_VRS_Pop+0x28>
 8000de0:	2e0f      	cmp	r6, #15
 8000de2:	f63f af62 	bhi.w	8000caa <_Unwind_VRS_Pop+0x26>
 8000de6:	2700      	movs	r7, #0
 8000de8:	6822      	ldr	r2, [r4, #0]
 8000dea:	07d1      	lsls	r1, r2, #31
 8000dec:	d417      	bmi.n	8000e1e <_Unwind_VRS_Pop+0x19a>
 8000dee:	2f00      	cmp	r7, #0
 8000df0:	d060      	beq.n	8000eb4 <_Unwind_VRS_Pop+0x230>
 8000df2:	6822      	ldr	r2, [r4, #0]
 8000df4:	0751      	lsls	r1, r2, #29
 8000df6:	d445      	bmi.n	8000e84 <_Unwind_VRS_Pop+0x200>
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d04d      	beq.n	8000e98 <_Unwind_VRS_Pop+0x214>
 8000dfc:	2e0f      	cmp	r6, #15
 8000dfe:	d806      	bhi.n	8000e0e <_Unwind_VRS_Pop+0x18a>
 8000e00:	a822      	add	r0, sp, #136	; 0x88
 8000e02:	9301      	str	r3, [sp, #4]
 8000e04:	f000 f87a 	bl	8000efc <__gnu_Unwind_Save_VFP_D>
 8000e08:	9b01      	ldr	r3, [sp, #4]
 8000e0a:	2f00      	cmp	r7, #0
 8000e0c:	d0b6      	beq.n	8000d7c <_Unwind_VRS_Pop+0xf8>
 8000e0e:	a802      	add	r0, sp, #8
 8000e10:	9301      	str	r3, [sp, #4]
 8000e12:	f000 f87b 	bl	8000f0c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e16:	9b01      	ldr	r3, [sp, #4]
 8000e18:	f1c6 0210 	rsb	r2, r6, #16
 8000e1c:	e7b0      	b.n	8000d80 <_Unwind_VRS_Pop+0xfc>
 8000e1e:	f022 0101 	bic.w	r1, r2, #1
 8000e22:	2b05      	cmp	r3, #5
 8000e24:	6021      	str	r1, [r4, #0]
 8000e26:	9301      	str	r3, [sp, #4]
 8000e28:	4620      	mov	r0, r4
 8000e2a:	d03b      	beq.n	8000ea4 <_Unwind_VRS_Pop+0x220>
 8000e2c:	f022 0203 	bic.w	r2, r2, #3
 8000e30:	f840 2b48 	str.w	r2, [r0], #72
 8000e34:	f000 f85a 	bl	8000eec <__gnu_Unwind_Save_VFP>
 8000e38:	9b01      	ldr	r3, [sp, #4]
 8000e3a:	e7d8      	b.n	8000dee <_Unwind_VRS_Pop+0x16a>
 8000e3c:	a822      	add	r0, sp, #136	; 0x88
 8000e3e:	f000 f859 	bl	8000ef4 <__gnu_Unwind_Restore_VFP_D>
 8000e42:	e7c7      	b.n	8000dd4 <_Unwind_VRS_Pop+0x150>
 8000e44:	2f10      	cmp	r7, #16
 8000e46:	d9ce      	bls.n	8000de6 <_Unwind_VRS_Pop+0x162>
 8000e48:	3f10      	subs	r7, #16
 8000e4a:	e7cd      	b.n	8000de8 <_Unwind_VRS_Pop+0x164>
 8000e4c:	f023 0310 	bic.w	r3, r3, #16
 8000e50:	6023      	str	r3, [r4, #0]
 8000e52:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000e56:	9201      	str	r2, [sp, #4]
 8000e58:	f000 f8aa 	bl	8000fb0 <__gnu_Unwind_Save_WMMXC>
 8000e5c:	9a01      	ldr	r2, [sp, #4]
 8000e5e:	e72f      	b.n	8000cc0 <_Unwind_VRS_Pop+0x3c>
 8000e60:	3104      	adds	r1, #4
 8000e62:	63a1      	str	r1, [r4, #56]	; 0x38
 8000e64:	a822      	add	r0, sp, #136	; 0x88
 8000e66:	f000 f83d 	bl	8000ee4 <__gnu_Unwind_Restore_VFP>
 8000e6a:	e7b7      	b.n	8000ddc <_Unwind_VRS_Pop+0x158>
 8000e6c:	2f00      	cmp	r7, #0
 8000e6e:	d199      	bne.n	8000da4 <_Unwind_VRS_Pop+0x120>
 8000e70:	4601      	mov	r1, r0
 8000e72:	e7aa      	b.n	8000dca <_Unwind_VRS_Pop+0x146>
 8000e74:	f023 0308 	bic.w	r3, r3, #8
 8000e78:	6023      	str	r3, [r4, #0]
 8000e7a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000e7e:	f000 f86b 	bl	8000f58 <__gnu_Unwind_Save_WMMXD>
 8000e82:	e742      	b.n	8000d0a <_Unwind_VRS_Pop+0x86>
 8000e84:	4620      	mov	r0, r4
 8000e86:	f022 0204 	bic.w	r2, r2, #4
 8000e8a:	f840 2bd0 	str.w	r2, [r0], #208
 8000e8e:	9301      	str	r3, [sp, #4]
 8000e90:	f000 f83c 	bl	8000f0c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e94:	9b01      	ldr	r3, [sp, #4]
 8000e96:	e7af      	b.n	8000df8 <_Unwind_VRS_Pop+0x174>
 8000e98:	a822      	add	r0, sp, #136	; 0x88
 8000e9a:	9301      	str	r3, [sp, #4]
 8000e9c:	f000 f826 	bl	8000eec <__gnu_Unwind_Save_VFP>
 8000ea0:	9b01      	ldr	r3, [sp, #4]
 8000ea2:	e7b9      	b.n	8000e18 <_Unwind_VRS_Pop+0x194>
 8000ea4:	f041 0102 	orr.w	r1, r1, #2
 8000ea8:	f840 1b48 	str.w	r1, [r0], #72
 8000eac:	f000 f826 	bl	8000efc <__gnu_Unwind_Save_VFP_D>
 8000eb0:	9b01      	ldr	r3, [sp, #4]
 8000eb2:	e79c      	b.n	8000dee <_Unwind_VRS_Pop+0x16a>
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d003      	beq.n	8000ec0 <_Unwind_VRS_Pop+0x23c>
 8000eb8:	2e0f      	cmp	r6, #15
 8000eba:	f63f af5f 	bhi.w	8000d7c <_Unwind_VRS_Pop+0xf8>
 8000ebe:	e79f      	b.n	8000e00 <_Unwind_VRS_Pop+0x17c>
 8000ec0:	a822      	add	r0, sp, #136	; 0x88
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	f000 f812 	bl	8000eec <__gnu_Unwind_Save_VFP>
 8000ec8:	9b01      	ldr	r3, [sp, #4]
 8000eca:	e757      	b.n	8000d7c <_Unwind_VRS_Pop+0xf8>

08000ecc <__restore_core_regs>:
 8000ecc:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000ed0:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000ed4:	469c      	mov	ip, r3
 8000ed6:	46a6      	mov	lr, r4
 8000ed8:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000edc:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000ee0:	46e5      	mov	sp, ip
 8000ee2:	bd00      	pop	{pc}

08000ee4 <__gnu_Unwind_Restore_VFP>:
 8000ee4:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <__gnu_Unwind_Save_VFP>:
 8000eec:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <__gnu_Unwind_Restore_VFP_D>:
 8000ef4:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <__gnu_Unwind_Save_VFP_D>:
 8000efc:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000f04:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000f0c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <__gnu_Unwind_Restore_WMMXD>:
 8000f14:	ecf0 0102 	ldfe	f0, [r0], #8
 8000f18:	ecf0 1102 	ldfe	f1, [r0], #8
 8000f1c:	ecf0 2102 	ldfe	f2, [r0], #8
 8000f20:	ecf0 3102 	ldfe	f3, [r0], #8
 8000f24:	ecf0 4102 	ldfe	f4, [r0], #8
 8000f28:	ecf0 5102 	ldfe	f5, [r0], #8
 8000f2c:	ecf0 6102 	ldfe	f6, [r0], #8
 8000f30:	ecf0 7102 	ldfe	f7, [r0], #8
 8000f34:	ecf0 8102 	ldfp	f0, [r0], #8
 8000f38:	ecf0 9102 	ldfp	f1, [r0], #8
 8000f3c:	ecf0 a102 	ldfp	f2, [r0], #8
 8000f40:	ecf0 b102 	ldfp	f3, [r0], #8
 8000f44:	ecf0 c102 	ldfp	f4, [r0], #8
 8000f48:	ecf0 d102 	ldfp	f5, [r0], #8
 8000f4c:	ecf0 e102 	ldfp	f6, [r0], #8
 8000f50:	ecf0 f102 	ldfp	f7, [r0], #8
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <__gnu_Unwind_Save_WMMXD>:
 8000f58:	ece0 0102 	stfe	f0, [r0], #8
 8000f5c:	ece0 1102 	stfe	f1, [r0], #8
 8000f60:	ece0 2102 	stfe	f2, [r0], #8
 8000f64:	ece0 3102 	stfe	f3, [r0], #8
 8000f68:	ece0 4102 	stfe	f4, [r0], #8
 8000f6c:	ece0 5102 	stfe	f5, [r0], #8
 8000f70:	ece0 6102 	stfe	f6, [r0], #8
 8000f74:	ece0 7102 	stfe	f7, [r0], #8
 8000f78:	ece0 8102 	stfp	f0, [r0], #8
 8000f7c:	ece0 9102 	stfp	f1, [r0], #8
 8000f80:	ece0 a102 	stfp	f2, [r0], #8
 8000f84:	ece0 b102 	stfp	f3, [r0], #8
 8000f88:	ece0 c102 	stfp	f4, [r0], #8
 8000f8c:	ece0 d102 	stfp	f5, [r0], #8
 8000f90:	ece0 e102 	stfp	f6, [r0], #8
 8000f94:	ece0 f102 	stfp	f7, [r0], #8
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <__gnu_Unwind_Restore_WMMXC>:
 8000f9c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000fa0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000fa4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000fa8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop

08000fb0 <__gnu_Unwind_Save_WMMXC>:
 8000fb0:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000fb4:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000fb8:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000fbc:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <_Unwind_RaiseException>:
 8000fc4:	46ec      	mov	ip, sp
 8000fc6:	b500      	push	{lr}
 8000fc8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000fcc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000fd0:	f04f 0300 	mov.w	r3, #0
 8000fd4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000fd8:	a901      	add	r1, sp, #4
 8000fda:	f7ff fbf3 	bl	80007c4 <__gnu_Unwind_RaiseException>
 8000fde:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000fe2:	b012      	add	sp, #72	; 0x48
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <_Unwind_Resume>:
 8000fe8:	46ec      	mov	ip, sp
 8000fea:	b500      	push	{lr}
 8000fec:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000ff0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000ff4:	f04f 0300 	mov.w	r3, #0
 8000ff8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000ffc:	a901      	add	r1, sp, #4
 8000ffe:	f7ff fc1b 	bl	8000838 <__gnu_Unwind_Resume>
 8001002:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001006:	b012      	add	sp, #72	; 0x48
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <_Unwind_Resume_or_Rethrow>:
 800100c:	46ec      	mov	ip, sp
 800100e:	b500      	push	{lr}
 8001010:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001014:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001018:	f04f 0300 	mov.w	r3, #0
 800101c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001020:	a901      	add	r1, sp, #4
 8001022:	f7ff fc2b 	bl	800087c <__gnu_Unwind_Resume_or_Rethrow>
 8001026:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800102a:	b012      	add	sp, #72	; 0x48
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <_Unwind_ForcedUnwind>:
 8001030:	46ec      	mov	ip, sp
 8001032:	b500      	push	{lr}
 8001034:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001038:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001044:	ab01      	add	r3, sp, #4
 8001046:	f7ff fbed 	bl	8000824 <__gnu_Unwind_ForcedUnwind>
 800104a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800104e:	b012      	add	sp, #72	; 0x48
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <_Unwind_Backtrace>:
 8001054:	46ec      	mov	ip, sp
 8001056:	b500      	push	{lr}
 8001058:	e92d 5000 	stmdb	sp!, {ip, lr}
 800105c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001068:	aa01      	add	r2, sp, #4
 800106a:	f7ff fc65 	bl	8000938 <__gnu_Unwind_Backtrace>
 800106e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001072:	b012      	add	sp, #72	; 0x48
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <next_unwind_byte>:
 8001078:	7a02      	ldrb	r2, [r0, #8]
 800107a:	b91a      	cbnz	r2, 8001084 <next_unwind_byte+0xc>
 800107c:	7a43      	ldrb	r3, [r0, #9]
 800107e:	b943      	cbnz	r3, 8001092 <next_unwind_byte+0x1a>
 8001080:	20b0      	movs	r0, #176	; 0xb0
 8001082:	4770      	bx	lr
 8001084:	6803      	ldr	r3, [r0, #0]
 8001086:	3a01      	subs	r2, #1
 8001088:	7202      	strb	r2, [r0, #8]
 800108a:	021a      	lsls	r2, r3, #8
 800108c:	6002      	str	r2, [r0, #0]
 800108e:	0e18      	lsrs	r0, r3, #24
 8001090:	4770      	bx	lr
 8001092:	6842      	ldr	r2, [r0, #4]
 8001094:	3b01      	subs	r3, #1
 8001096:	b410      	push	{r4}
 8001098:	7243      	strb	r3, [r0, #9]
 800109a:	6813      	ldr	r3, [r2, #0]
 800109c:	2103      	movs	r1, #3
 800109e:	1d14      	adds	r4, r2, #4
 80010a0:	7201      	strb	r1, [r0, #8]
 80010a2:	021a      	lsls	r2, r3, #8
 80010a4:	6044      	str	r4, [r0, #4]
 80010a6:	6002      	str	r2, [r0, #0]
 80010a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010ac:	0e18      	lsrs	r0, r3, #24
 80010ae:	4770      	bx	lr

080010b0 <_Unwind_GetGR.constprop.0>:
 80010b0:	b500      	push	{lr}
 80010b2:	b085      	sub	sp, #20
 80010b4:	aa03      	add	r2, sp, #12
 80010b6:	2300      	movs	r3, #0
 80010b8:	9200      	str	r2, [sp, #0]
 80010ba:	4619      	mov	r1, r3
 80010bc:	220c      	movs	r2, #12
 80010be:	f7ff fbed 	bl	800089c <_Unwind_VRS_Get>
 80010c2:	9803      	ldr	r0, [sp, #12]
 80010c4:	b005      	add	sp, #20
 80010c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80010ca:	bf00      	nop

080010cc <unwind_UCB_from_context>:
 80010cc:	e7f0      	b.n	80010b0 <_Unwind_GetGR.constprop.0>
 80010ce:	bf00      	nop

080010d0 <__gnu_unwind_execute>:
 80010d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010d4:	4606      	mov	r6, r0
 80010d6:	b085      	sub	sp, #20
 80010d8:	460f      	mov	r7, r1
 80010da:	f04f 0800 	mov.w	r8, #0
 80010de:	4638      	mov	r0, r7
 80010e0:	f7ff ffca 	bl	8001078 <next_unwind_byte>
 80010e4:	28b0      	cmp	r0, #176	; 0xb0
 80010e6:	4604      	mov	r4, r0
 80010e8:	d023      	beq.n	8001132 <__gnu_unwind_execute+0x62>
 80010ea:	0605      	lsls	r5, r0, #24
 80010ec:	d427      	bmi.n	800113e <__gnu_unwind_execute+0x6e>
 80010ee:	2300      	movs	r3, #0
 80010f0:	f10d 090c 	add.w	r9, sp, #12
 80010f4:	4619      	mov	r1, r3
 80010f6:	0085      	lsls	r5, r0, #2
 80010f8:	220d      	movs	r2, #13
 80010fa:	f8cd 9000 	str.w	r9, [sp]
 80010fe:	4630      	mov	r0, r6
 8001100:	f7ff fbcc 	bl	800089c <_Unwind_VRS_Get>
 8001104:	b2ed      	uxtb	r5, r5
 8001106:	9b03      	ldr	r3, [sp, #12]
 8001108:	f8cd 9000 	str.w	r9, [sp]
 800110c:	0660      	lsls	r0, r4, #25
 800110e:	f105 0504 	add.w	r5, r5, #4
 8001112:	bf4c      	ite	mi
 8001114:	1b5d      	submi	r5, r3, r5
 8001116:	18ed      	addpl	r5, r5, r3
 8001118:	2300      	movs	r3, #0
 800111a:	4619      	mov	r1, r3
 800111c:	220d      	movs	r2, #13
 800111e:	4630      	mov	r0, r6
 8001120:	9503      	str	r5, [sp, #12]
 8001122:	f7ff fbe1 	bl	80008e8 <_Unwind_VRS_Set>
 8001126:	4638      	mov	r0, r7
 8001128:	f7ff ffa6 	bl	8001078 <next_unwind_byte>
 800112c:	28b0      	cmp	r0, #176	; 0xb0
 800112e:	4604      	mov	r4, r0
 8001130:	d1db      	bne.n	80010ea <__gnu_unwind_execute+0x1a>
 8001132:	f1b8 0f00 	cmp.w	r8, #0
 8001136:	f000 8095 	beq.w	8001264 <__gnu_unwind_execute+0x194>
 800113a:	2000      	movs	r0, #0
 800113c:	e01c      	b.n	8001178 <__gnu_unwind_execute+0xa8>
 800113e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001142:	2b80      	cmp	r3, #128	; 0x80
 8001144:	d05d      	beq.n	8001202 <__gnu_unwind_execute+0x132>
 8001146:	2b90      	cmp	r3, #144	; 0x90
 8001148:	d019      	beq.n	800117e <__gnu_unwind_execute+0xae>
 800114a:	2ba0      	cmp	r3, #160	; 0xa0
 800114c:	d02c      	beq.n	80011a8 <__gnu_unwind_execute+0xd8>
 800114e:	2bb0      	cmp	r3, #176	; 0xb0
 8001150:	d03f      	beq.n	80011d2 <__gnu_unwind_execute+0x102>
 8001152:	2bc0      	cmp	r3, #192	; 0xc0
 8001154:	d06c      	beq.n	8001230 <__gnu_unwind_execute+0x160>
 8001156:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800115a:	2bd0      	cmp	r3, #208	; 0xd0
 800115c:	d10b      	bne.n	8001176 <__gnu_unwind_execute+0xa6>
 800115e:	f000 0207 	and.w	r2, r0, #7
 8001162:	3201      	adds	r2, #1
 8001164:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001168:	2305      	movs	r3, #5
 800116a:	2101      	movs	r1, #1
 800116c:	4630      	mov	r0, r6
 800116e:	f7ff fd89 	bl	8000c84 <_Unwind_VRS_Pop>
 8001172:	2800      	cmp	r0, #0
 8001174:	d0b3      	beq.n	80010de <__gnu_unwind_execute+0xe>
 8001176:	2009      	movs	r0, #9
 8001178:	b005      	add	sp, #20
 800117a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800117e:	f000 030d 	and.w	r3, r0, #13
 8001182:	2b0d      	cmp	r3, #13
 8001184:	d0f7      	beq.n	8001176 <__gnu_unwind_execute+0xa6>
 8001186:	ad03      	add	r5, sp, #12
 8001188:	2300      	movs	r3, #0
 800118a:	f000 020f 	and.w	r2, r0, #15
 800118e:	4619      	mov	r1, r3
 8001190:	9500      	str	r5, [sp, #0]
 8001192:	4630      	mov	r0, r6
 8001194:	f7ff fb82 	bl	800089c <_Unwind_VRS_Get>
 8001198:	2300      	movs	r3, #0
 800119a:	9500      	str	r5, [sp, #0]
 800119c:	4619      	mov	r1, r3
 800119e:	220d      	movs	r2, #13
 80011a0:	4630      	mov	r0, r6
 80011a2:	f7ff fba1 	bl	80008e8 <_Unwind_VRS_Set>
 80011a6:	e79a      	b.n	80010de <__gnu_unwind_execute+0xe>
 80011a8:	43c2      	mvns	r2, r0
 80011aa:	f002 0307 	and.w	r3, r2, #7
 80011ae:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80011b2:	411a      	asrs	r2, r3
 80011b4:	0701      	lsls	r1, r0, #28
 80011b6:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80011ba:	f04f 0300 	mov.w	r3, #0
 80011be:	bf48      	it	mi
 80011c0:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80011c4:	4619      	mov	r1, r3
 80011c6:	4630      	mov	r0, r6
 80011c8:	f7ff fd5c 	bl	8000c84 <_Unwind_VRS_Pop>
 80011cc:	2800      	cmp	r0, #0
 80011ce:	d1d2      	bne.n	8001176 <__gnu_unwind_execute+0xa6>
 80011d0:	e785      	b.n	80010de <__gnu_unwind_execute+0xe>
 80011d2:	28b1      	cmp	r0, #177	; 0xb1
 80011d4:	d057      	beq.n	8001286 <__gnu_unwind_execute+0x1b6>
 80011d6:	28b2      	cmp	r0, #178	; 0xb2
 80011d8:	d068      	beq.n	80012ac <__gnu_unwind_execute+0x1dc>
 80011da:	28b3      	cmp	r0, #179	; 0xb3
 80011dc:	f000 8095 	beq.w	800130a <__gnu_unwind_execute+0x23a>
 80011e0:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80011e4:	2bb4      	cmp	r3, #180	; 0xb4
 80011e6:	d0c6      	beq.n	8001176 <__gnu_unwind_execute+0xa6>
 80011e8:	f000 0207 	and.w	r2, r0, #7
 80011ec:	3201      	adds	r2, #1
 80011ee:	2301      	movs	r3, #1
 80011f0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80011f4:	4619      	mov	r1, r3
 80011f6:	4630      	mov	r0, r6
 80011f8:	f7ff fd44 	bl	8000c84 <_Unwind_VRS_Pop>
 80011fc:	2800      	cmp	r0, #0
 80011fe:	d1ba      	bne.n	8001176 <__gnu_unwind_execute+0xa6>
 8001200:	e76d      	b.n	80010de <__gnu_unwind_execute+0xe>
 8001202:	4638      	mov	r0, r7
 8001204:	f7ff ff38 	bl	8001078 <next_unwind_byte>
 8001208:	0224      	lsls	r4, r4, #8
 800120a:	4304      	orrs	r4, r0
 800120c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001210:	d0b1      	beq.n	8001176 <__gnu_unwind_execute+0xa6>
 8001212:	0124      	lsls	r4, r4, #4
 8001214:	2300      	movs	r3, #0
 8001216:	b2a2      	uxth	r2, r4
 8001218:	4619      	mov	r1, r3
 800121a:	4630      	mov	r0, r6
 800121c:	f7ff fd32 	bl	8000c84 <_Unwind_VRS_Pop>
 8001220:	2800      	cmp	r0, #0
 8001222:	d1a8      	bne.n	8001176 <__gnu_unwind_execute+0xa6>
 8001224:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001228:	bf18      	it	ne
 800122a:	f04f 0801 	movne.w	r8, #1
 800122e:	e756      	b.n	80010de <__gnu_unwind_execute+0xe>
 8001230:	28c6      	cmp	r0, #198	; 0xc6
 8001232:	d07d      	beq.n	8001330 <__gnu_unwind_execute+0x260>
 8001234:	28c7      	cmp	r0, #199	; 0xc7
 8001236:	f000 8086 	beq.w	8001346 <__gnu_unwind_execute+0x276>
 800123a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800123e:	2bc0      	cmp	r3, #192	; 0xc0
 8001240:	f000 8094 	beq.w	800136c <__gnu_unwind_execute+0x29c>
 8001244:	28c8      	cmp	r0, #200	; 0xc8
 8001246:	f000 809f 	beq.w	8001388 <__gnu_unwind_execute+0x2b8>
 800124a:	28c9      	cmp	r0, #201	; 0xc9
 800124c:	d193      	bne.n	8001176 <__gnu_unwind_execute+0xa6>
 800124e:	4638      	mov	r0, r7
 8001250:	f7ff ff12 	bl	8001078 <next_unwind_byte>
 8001254:	0302      	lsls	r2, r0, #12
 8001256:	f000 000f 	and.w	r0, r0, #15
 800125a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800125e:	3001      	adds	r0, #1
 8001260:	4302      	orrs	r2, r0
 8001262:	e781      	b.n	8001168 <__gnu_unwind_execute+0x98>
 8001264:	ac03      	add	r4, sp, #12
 8001266:	4643      	mov	r3, r8
 8001268:	220e      	movs	r2, #14
 800126a:	4641      	mov	r1, r8
 800126c:	9400      	str	r4, [sp, #0]
 800126e:	4630      	mov	r0, r6
 8001270:	f7ff fb14 	bl	800089c <_Unwind_VRS_Get>
 8001274:	9400      	str	r4, [sp, #0]
 8001276:	4630      	mov	r0, r6
 8001278:	4643      	mov	r3, r8
 800127a:	220f      	movs	r2, #15
 800127c:	4641      	mov	r1, r8
 800127e:	f7ff fb33 	bl	80008e8 <_Unwind_VRS_Set>
 8001282:	4640      	mov	r0, r8
 8001284:	e778      	b.n	8001178 <__gnu_unwind_execute+0xa8>
 8001286:	4638      	mov	r0, r7
 8001288:	f7ff fef6 	bl	8001078 <next_unwind_byte>
 800128c:	2800      	cmp	r0, #0
 800128e:	f43f af72 	beq.w	8001176 <__gnu_unwind_execute+0xa6>
 8001292:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001296:	f47f af6e 	bne.w	8001176 <__gnu_unwind_execute+0xa6>
 800129a:	4602      	mov	r2, r0
 800129c:	4619      	mov	r1, r3
 800129e:	4630      	mov	r0, r6
 80012a0:	f7ff fcf0 	bl	8000c84 <_Unwind_VRS_Pop>
 80012a4:	2800      	cmp	r0, #0
 80012a6:	f47f af66 	bne.w	8001176 <__gnu_unwind_execute+0xa6>
 80012aa:	e718      	b.n	80010de <__gnu_unwind_execute+0xe>
 80012ac:	2300      	movs	r3, #0
 80012ae:	f10d 090c 	add.w	r9, sp, #12
 80012b2:	220d      	movs	r2, #13
 80012b4:	4619      	mov	r1, r3
 80012b6:	f8cd 9000 	str.w	r9, [sp]
 80012ba:	4630      	mov	r0, r6
 80012bc:	f7ff faee 	bl	800089c <_Unwind_VRS_Get>
 80012c0:	4638      	mov	r0, r7
 80012c2:	f7ff fed9 	bl	8001078 <next_unwind_byte>
 80012c6:	0602      	lsls	r2, r0, #24
 80012c8:	f04f 0402 	mov.w	r4, #2
 80012cc:	d50c      	bpl.n	80012e8 <__gnu_unwind_execute+0x218>
 80012ce:	9b03      	ldr	r3, [sp, #12]
 80012d0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80012d4:	40a0      	lsls	r0, r4
 80012d6:	4403      	add	r3, r0
 80012d8:	4638      	mov	r0, r7
 80012da:	9303      	str	r3, [sp, #12]
 80012dc:	f7ff fecc 	bl	8001078 <next_unwind_byte>
 80012e0:	0603      	lsls	r3, r0, #24
 80012e2:	f104 0407 	add.w	r4, r4, #7
 80012e6:	d4f2      	bmi.n	80012ce <__gnu_unwind_execute+0x1fe>
 80012e8:	9b03      	ldr	r3, [sp, #12]
 80012ea:	f8cd 9000 	str.w	r9, [sp]
 80012ee:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80012f2:	40a2      	lsls	r2, r4
 80012f4:	f503 7401 	add.w	r4, r3, #516	; 0x204
 80012f8:	2300      	movs	r3, #0
 80012fa:	4414      	add	r4, r2
 80012fc:	4619      	mov	r1, r3
 80012fe:	220d      	movs	r2, #13
 8001300:	4630      	mov	r0, r6
 8001302:	9403      	str	r4, [sp, #12]
 8001304:	f7ff faf0 	bl	80008e8 <_Unwind_VRS_Set>
 8001308:	e6e9      	b.n	80010de <__gnu_unwind_execute+0xe>
 800130a:	4638      	mov	r0, r7
 800130c:	f7ff feb4 	bl	8001078 <next_unwind_byte>
 8001310:	0301      	lsls	r1, r0, #12
 8001312:	f000 000f 	and.w	r0, r0, #15
 8001316:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800131a:	1c42      	adds	r2, r0, #1
 800131c:	2301      	movs	r3, #1
 800131e:	430a      	orrs	r2, r1
 8001320:	4630      	mov	r0, r6
 8001322:	4619      	mov	r1, r3
 8001324:	f7ff fcae 	bl	8000c84 <_Unwind_VRS_Pop>
 8001328:	2800      	cmp	r0, #0
 800132a:	f47f af24 	bne.w	8001176 <__gnu_unwind_execute+0xa6>
 800132e:	e6d6      	b.n	80010de <__gnu_unwind_execute+0xe>
 8001330:	4638      	mov	r0, r7
 8001332:	f7ff fea1 	bl	8001078 <next_unwind_byte>
 8001336:	0301      	lsls	r1, r0, #12
 8001338:	f000 000f 	and.w	r0, r0, #15
 800133c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001340:	1c42      	adds	r2, r0, #1
 8001342:	2303      	movs	r3, #3
 8001344:	e7eb      	b.n	800131e <__gnu_unwind_execute+0x24e>
 8001346:	4638      	mov	r0, r7
 8001348:	f7ff fe96 	bl	8001078 <next_unwind_byte>
 800134c:	2800      	cmp	r0, #0
 800134e:	f43f af12 	beq.w	8001176 <__gnu_unwind_execute+0xa6>
 8001352:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001356:	f47f af0e 	bne.w	8001176 <__gnu_unwind_execute+0xa6>
 800135a:	4602      	mov	r2, r0
 800135c:	2104      	movs	r1, #4
 800135e:	4630      	mov	r0, r6
 8001360:	f7ff fc90 	bl	8000c84 <_Unwind_VRS_Pop>
 8001364:	2800      	cmp	r0, #0
 8001366:	f47f af06 	bne.w	8001176 <__gnu_unwind_execute+0xa6>
 800136a:	e6b8      	b.n	80010de <__gnu_unwind_execute+0xe>
 800136c:	f000 020f 	and.w	r2, r0, #15
 8001370:	3201      	adds	r2, #1
 8001372:	2303      	movs	r3, #3
 8001374:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001378:	4619      	mov	r1, r3
 800137a:	4630      	mov	r0, r6
 800137c:	f7ff fc82 	bl	8000c84 <_Unwind_VRS_Pop>
 8001380:	2800      	cmp	r0, #0
 8001382:	f47f aef8 	bne.w	8001176 <__gnu_unwind_execute+0xa6>
 8001386:	e6aa      	b.n	80010de <__gnu_unwind_execute+0xe>
 8001388:	4638      	mov	r0, r7
 800138a:	f7ff fe75 	bl	8001078 <next_unwind_byte>
 800138e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001392:	f000 030f 	and.w	r3, r0, #15
 8001396:	3210      	adds	r2, #16
 8001398:	3301      	adds	r3, #1
 800139a:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800139e:	e6e3      	b.n	8001168 <__gnu_unwind_execute+0x98>

080013a0 <__gnu_unwind_frame>:
 80013a0:	b510      	push	{r4, lr}
 80013a2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80013a4:	b084      	sub	sp, #16
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	2003      	movs	r0, #3
 80013aa:	f88d 000c 	strb.w	r0, [sp, #12]
 80013ae:	79dc      	ldrb	r4, [r3, #7]
 80013b0:	f88d 400d 	strb.w	r4, [sp, #13]
 80013b4:	0212      	lsls	r2, r2, #8
 80013b6:	3308      	adds	r3, #8
 80013b8:	4608      	mov	r0, r1
 80013ba:	a901      	add	r1, sp, #4
 80013bc:	9201      	str	r2, [sp, #4]
 80013be:	9302      	str	r3, [sp, #8]
 80013c0:	f7ff fe86 	bl	80010d0 <__gnu_unwind_execute>
 80013c4:	b004      	add	sp, #16
 80013c6:	bd10      	pop	{r4, pc}

080013c8 <_Unwind_GetRegionStart>:
 80013c8:	b508      	push	{r3, lr}
 80013ca:	f7ff fe7f 	bl	80010cc <unwind_UCB_from_context>
 80013ce:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80013d0:	bd08      	pop	{r3, pc}
 80013d2:	bf00      	nop

080013d4 <_Unwind_GetLanguageSpecificData>:
 80013d4:	b508      	push	{r3, lr}
 80013d6:	f7ff fe79 	bl	80010cc <unwind_UCB_from_context>
 80013da:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80013dc:	79c3      	ldrb	r3, [r0, #7]
 80013de:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80013e2:	3008      	adds	r0, #8
 80013e4:	bd08      	pop	{r3, pc}
 80013e6:	bf00      	nop

080013e8 <_Unwind_GetTextRelBase>:
 80013e8:	b508      	push	{r3, lr}
 80013ea:	f008 fdfa 	bl	8009fe2 <abort>
 80013ee:	bf00      	nop

080013f0 <_Unwind_GetDataRelBase>:
 80013f0:	b508      	push	{r3, lr}
 80013f2:	f7ff fff9 	bl	80013e8 <_Unwind_GetTextRelBase>
 80013f6:	bf00      	nop

080013f8 <__aeabi_idiv0>:
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop

080013fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013fc:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <HAL_Init+0x30>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001406:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800140e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001416:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001418:	2003      	movs	r0, #3
 800141a:	f000 f9cd 	bl	80017b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800141e:	2000      	movs	r0, #0
 8001420:	f005 ff26 	bl	8007270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001424:	f005 fe8a 	bl	800713c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001428:	2000      	movs	r0, #0
 800142a:	bd08      	pop	{r3, pc}
 800142c:	40023c00 	.word	0x40023c00

08001430 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001430:	4a03      	ldr	r2, [pc, #12]	; (8001440 <HAL_IncTick+0x10>)
 8001432:	4b04      	ldr	r3, [pc, #16]	; (8001444 <HAL_IncTick+0x14>)
 8001434:	6811      	ldr	r1, [r2, #0]
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	440b      	add	r3, r1
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	200047b0 	.word	0x200047b0
 8001444:	20000000 	.word	0x20000000

08001448 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001448:	4b01      	ldr	r3, [pc, #4]	; (8001450 <HAL_GetTick+0x8>)
 800144a:	6818      	ldr	r0, [r3, #0]
}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	200047b0 	.word	0x200047b0

08001454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001454:	b538      	push	{r3, r4, r5, lr}
 8001456:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001458:	f7ff fff6 	bl	8001448 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800145c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800145e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001460:	d002      	beq.n	8001468 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <HAL_Delay+0x20>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001468:	f7ff ffee 	bl	8001448 <HAL_GetTick>
 800146c:	1b40      	subs	r0, r0, r5
 800146e:	4284      	cmp	r4, r0
 8001470:	d8fa      	bhi.n	8001468 <HAL_Delay+0x14>
  {
  }
}
 8001472:	bd38      	pop	{r3, r4, r5, pc}
 8001474:	20000000 	.word	0x20000000

08001478 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001478:	2800      	cmp	r0, #0
 800147a:	d07c      	beq.n	8001576 <HAL_CAN_Init+0xfe>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800147c:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8001480:	b570      	push	{r4, r5, r6, lr}
 8001482:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001484:	2b00      	cmp	r3, #0
 8001486:	d073      	beq.n	8001570 <HAL_CAN_Init+0xf8>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001488:	6822      	ldr	r2, [r4, #0]
 800148a:	6813      	ldr	r3, [r2, #0]
 800148c:	f023 0302 	bic.w	r3, r3, #2
 8001490:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001492:	f7ff ffd9 	bl	8001448 <HAL_GetTick>
 8001496:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001498:	e004      	b.n	80014a4 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800149a:	f7ff ffd5 	bl	8001448 <HAL_GetTick>
 800149e:	1b40      	subs	r0, r0, r5
 80014a0:	280a      	cmp	r0, #10
 80014a2:	d85c      	bhi.n	800155e <HAL_CAN_Init+0xe6>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014a4:	6823      	ldr	r3, [r4, #0]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	0791      	lsls	r1, r2, #30
 80014aa:	d4f6      	bmi.n	800149a <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	f042 0201 	orr.w	r2, r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b4:	f7ff ffc8 	bl	8001448 <HAL_GetTick>
 80014b8:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014ba:	e004      	b.n	80014c6 <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014bc:	f7ff ffc4 	bl	8001448 <HAL_GetTick>
 80014c0:	1b40      	subs	r0, r0, r5
 80014c2:	280a      	cmp	r0, #10
 80014c4:	d84b      	bhi.n	800155e <HAL_CAN_Init+0xe6>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014c6:	6823      	ldr	r3, [r4, #0]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	07d2      	lsls	r2, r2, #31
 80014cc:	d5f6      	bpl.n	80014bc <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80014ce:	7e22      	ldrb	r2, [r4, #24]
 80014d0:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	bf0c      	ite	eq
 80014d6:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014da:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80014de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80014e0:	7e62      	ldrb	r2, [r4, #25]
 80014e2:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	bf0c      	ite	eq
 80014e8:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014ec:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80014f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80014f2:	7ea2      	ldrb	r2, [r4, #26]
 80014f4:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	bf0c      	ite	eq
 80014fa:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014fe:	f022 0220 	bicne.w	r2, r2, #32
 8001502:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001504:	7ee2      	ldrb	r2, [r4, #27]
 8001506:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	bf0c      	ite	eq
 800150c:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001510:	f042 0210 	orrne.w	r2, r2, #16
 8001514:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001516:	7f22      	ldrb	r2, [r4, #28]
 8001518:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	bf0c      	ite	eq
 800151e:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001522:	f022 0208 	bicne.w	r2, r2, #8
 8001526:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001528:	7f62      	ldrb	r2, [r4, #29]
 800152a:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	bf0c      	ite	eq
 8001530:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001534:	f022 0204 	bicne.w	r2, r2, #4
 8001538:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800153a:	68a2      	ldr	r2, [r4, #8]
 800153c:	68e6      	ldr	r6, [r4, #12]
 800153e:	6925      	ldr	r5, [r4, #16]
 8001540:	6960      	ldr	r0, [r4, #20]
 8001542:	6861      	ldr	r1, [r4, #4]
 8001544:	4332      	orrs	r2, r6
 8001546:	432a      	orrs	r2, r5
 8001548:	4302      	orrs	r2, r0
 800154a:	3901      	subs	r1, #1
 800154c:	430a      	orrs	r2, r1

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800154e:	2501      	movs	r5, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001550:	2100      	movs	r1, #0
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001552:	61da      	str	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 8001554:	4608      	mov	r0, r1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001556:	6261      	str	r1, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001558:	f884 5020 	strb.w	r5, [r4, #32]
  return HAL_OK;
 800155c:	bd70      	pop	{r4, r5, r6, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800155e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8001560:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001566:	6263      	str	r3, [r4, #36]	; 0x24
      return HAL_ERROR;
 8001568:	2001      	movs	r0, #1
      hcan->State = HAL_CAN_STATE_ERROR;
 800156a:	f884 2020 	strb.w	r2, [r4, #32]
      return HAL_ERROR;
 800156e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_CAN_MspInit(hcan);
 8001570:	f005 fe06 	bl	8007180 <HAL_CAN_MspInit>
 8001574:	e788      	b.n	8001488 <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 8001576:	2001      	movs	r0, #1
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop

0800157c <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 800157c:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8001580:	3b01      	subs	r3, #1
 8001582:	2b01      	cmp	r3, #1
 8001584:	d905      	bls.n	8001592 <HAL_CAN_ConfigFilter+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001586:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800158c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800158e:	2001      	movs	r0, #1
 8001590:	4770      	bx	lr
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001592:	4b3c      	ldr	r3, [pc, #240]	; (8001684 <HAL_CAN_ConfigFilter+0x108>)
 8001594:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001598:	f042 0201 	orr.w	r2, r2, #1
{
 800159c:	b4f0      	push	{r4, r5, r6, r7}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800159e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80015a2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80015a6:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80015aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80015ae:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80015b2:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80015b4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80015b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80015bc:	694a      	ldr	r2, [r1, #20]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80015be:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80015c2:	2401      	movs	r4, #1
 80015c4:	f002 001f 	and.w	r0, r2, #31
 80015c8:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80015cc:	43c4      	mvns	r4, r0
 80015ce:	4025      	ands	r5, r4
 80015d0:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80015d4:	69cd      	ldr	r5, [r1, #28]
 80015d6:	2d00      	cmp	r5, #0
 80015d8:	d03a      	beq.n	8001650 <HAL_CAN_ConfigFilter+0xd4>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80015da:	2d01      	cmp	r5, #1
 80015dc:	d115      	bne.n	800160a <HAL_CAN_ConfigFilter+0x8e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80015de:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 80015e2:	4305      	orrs	r5, r0
 80015e4:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
 80015e8:	00d2      	lsls	r2, r2, #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015ea:	680f      	ldr	r7, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015ec:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015ee:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80015f0:	898b      	ldrh	r3, [r1, #12]
 80015f2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80015f6:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015fa:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001602:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001606:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800160a:	698b      	ldr	r3, [r1, #24]
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800160c:	4a1d      	ldr	r2, [pc, #116]	; (8001684 <HAL_CAN_ConfigFilter+0x108>)
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800160e:	bb9b      	cbnz	r3, 8001678 <HAL_CAN_ConfigFilter+0xfc>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001610:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8001614:	4023      	ands	r3, r4
 8001616:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800161a:	690b      	ldr	r3, [r1, #16]
 800161c:	bb2b      	cbnz	r3, 800166a <HAL_CAN_ConfigFilter+0xee>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800161e:	4b19      	ldr	r3, [pc, #100]	; (8001684 <HAL_CAN_ConfigFilter+0x108>)
 8001620:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001624:	4014      	ands	r4, r2
 8001626:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800162a:	6a0b      	ldr	r3, [r1, #32]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d105      	bne.n	800163c <HAL_CAN_ConfigFilter+0xc0>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <HAL_CAN_ConfigFilter+0x108>)
 8001632:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001636:	4310      	orrs	r0, r2
 8001638:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800163c:	4a11      	ldr	r2, [pc, #68]	; (8001684 <HAL_CAN_ConfigFilter+0x108>)
 800163e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8001642:	f023 0301 	bic.w	r3, r3, #1
    return HAL_OK;
 8001646:	2000      	movs	r0, #0
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001648:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  }
}
 800164c:	bcf0      	pop	{r4, r5, r6, r7}
 800164e:	4770      	bx	lr
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001650:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8001654:	4025      	ands	r5, r4
 8001656:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
 800165a:	00d2      	lsls	r2, r2, #3
 800165c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001660:	68cf      	ldr	r7, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001662:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001664:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001666:	880b      	ldrh	r3, [r1, #0]
 8001668:	e7c5      	b.n	80015f6 <HAL_CAN_ConfigFilter+0x7a>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800166a:	4a06      	ldr	r2, [pc, #24]	; (8001684 <HAL_CAN_ConfigFilter+0x108>)
 800166c:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8001670:	4303      	orrs	r3, r0
 8001672:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8001676:	e7d8      	b.n	800162a <HAL_CAN_ConfigFilter+0xae>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001678:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 800167c:	4303      	orrs	r3, r0
 800167e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 8001682:	e7ca      	b.n	800161a <HAL_CAN_ConfigFilter+0x9e>
 8001684:	40006400 	.word	0x40006400

08001688 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001688:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800168a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d005      	beq.n	800169e <HAL_CAN_Start+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001692:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001694:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001698:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800169a:	2001      	movs	r0, #1
  }
}
 800169c:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800169e:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016a0:	2302      	movs	r3, #2
 80016a2:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016a6:	6813      	ldr	r3, [r2, #0]
 80016a8:	f023 0301 	bic.w	r3, r3, #1
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 80016b0:	f7ff feca 	bl	8001448 <HAL_GetTick>
 80016b4:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016b6:	e004      	b.n	80016c2 <HAL_CAN_Start+0x3a>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016b8:	f7ff fec6 	bl	8001448 <HAL_GetTick>
 80016bc:	1b40      	subs	r0, r0, r5
 80016be:	280a      	cmp	r0, #10
 80016c0:	d807      	bhi.n	80016d2 <HAL_CAN_Start+0x4a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016c2:	6823      	ldr	r3, [r4, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f013 0301 	ands.w	r3, r3, #1
 80016ca:	d1f5      	bne.n	80016b8 <HAL_CAN_Start+0x30>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016cc:	6263      	str	r3, [r4, #36]	; 0x24
    return HAL_OK;
 80016ce:	4618      	mov	r0, r3
 80016d0:	bd38      	pop	{r3, r4, r5, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80016d4:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016da:	6263      	str	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 80016dc:	2001      	movs	r0, #1
        hcan->State = HAL_CAN_STATE_ERROR;
 80016de:	f884 2020 	strb.w	r2, [r4, #32]
        return HAL_ERROR;
 80016e2:	bd38      	pop	{r3, r4, r5, pc}

080016e4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80016e4:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80016e6:	f890 4020 	ldrb.w	r4, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80016ea:	6805      	ldr	r5, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80016ec:	3c01      	subs	r4, #1
 80016ee:	2c01      	cmp	r4, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80016f0:	68ae      	ldr	r6, [r5, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80016f2:	d906      	bls.n	8001702 <HAL_CAN_AddTxMessage+0x1e>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80016f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016fa:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80016fc:	2001      	movs	r0, #1
  }
}
 80016fe:	bcf0      	pop	{r4, r5, r6, r7}
 8001700:	4770      	bx	lr
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001702:	f016 5fe0 	tst.w	r6, #469762048	; 0x1c000000
 8001706:	d02e      	beq.n	8001766 <HAL_CAN_AddTxMessage+0x82>
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001708:	f3c6 6601 	ubfx	r6, r6, #24, #2
      if (transmitmailbox > 2U)
 800170c:	2e03      	cmp	r6, #3
 800170e:	d031      	beq.n	8001774 <HAL_CAN_AddTxMessage+0x90>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001710:	2001      	movs	r0, #1
 8001712:	40b0      	lsls	r0, r6
 8001714:	6018      	str	r0, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8001716:	688b      	ldr	r3, [r1, #8]
 8001718:	bb93      	cbnz	r3, 8001780 <HAL_CAN_AddTxMessage+0x9c>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800171a:	680c      	ldr	r4, [r1, #0]
 800171c:	68c8      	ldr	r0, [r1, #12]
 800171e:	f106 0318 	add.w	r3, r6, #24
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	ea40 5044 	orr.w	r0, r0, r4, lsl #21
 8001728:	50e8      	str	r0, [r5, r3]
      if (pHeader->TransmitGlobalTime == ENABLE)
 800172a:	7d08      	ldrb	r0, [r1, #20]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800172c:	6909      	ldr	r1, [r1, #16]
 800172e:	0136      	lsls	r6, r6, #4
 8001730:	19ab      	adds	r3, r5, r6
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001732:	2801      	cmp	r0, #1
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001734:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001738:	d105      	bne.n	8001746 <HAL_CAN_AddTxMessage+0x62>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800173a:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
 800173e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001742:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001746:	4435      	add	r5, r6
 8001748:	6851      	ldr	r1, [r2, #4]
 800174a:	f8c5 118c 	str.w	r1, [r5, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	f8c5 2188 	str.w	r2, [r5, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001754:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8001758:	f042 0201 	orr.w	r2, r2, #1
      return HAL_OK;
 800175c:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800175e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
 8001762:	bcf0      	pop	{r4, r5, r6, r7}
 8001764:	4770      	bx	lr
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001766:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001768:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800176c:	6243      	str	r3, [r0, #36]	; 0x24
}
 800176e:	bcf0      	pop	{r4, r5, r6, r7}
      return HAL_ERROR;
 8001770:	2001      	movs	r0, #1
}
 8001772:	4770      	bx	lr
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001774:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001776:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800177a:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 800177c:	2001      	movs	r0, #1
 800177e:	e7be      	b.n	80016fe <HAL_CAN_AddTxMessage+0x1a>
                                                           pHeader->IDE |
 8001780:	68cf      	ldr	r7, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001782:	684c      	ldr	r4, [r1, #4]
 8001784:	f106 0018 	add.w	r0, r6, #24
                                                           pHeader->IDE |
 8001788:	433b      	orrs	r3, r7
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800178a:	0100      	lsls	r0, r0, #4
                                                           pHeader->IDE |
 800178c:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001790:	502b      	str	r3, [r5, r0]
 8001792:	e7ca      	b.n	800172a <HAL_CAN_AddTxMessage+0x46>

08001794 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8001794:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001798:	3b01      	subs	r3, #1
 800179a:	2b01      	cmp	r3, #1
 800179c:	d905      	bls.n	80017aa <HAL_CAN_ActivateNotification+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800179e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a4:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80017a6:	2001      	movs	r0, #1
  }
}
 80017a8:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80017aa:	6802      	ldr	r2, [r0, #0]
 80017ac:	6953      	ldr	r3, [r2, #20]
 80017ae:	4319      	orrs	r1, r3
 80017b0:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 80017b2:	2000      	movs	r0, #0
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop

080017b8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b8:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80017ba:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017bc:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 80017c0:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c2:	0200      	lsls	r0, r0, #8
 80017c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80017cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80017d0:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80017d2:	60d3      	str	r3, [r2, #12]
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017dc:	4b18      	ldr	r3, [pc, #96]	; (8001840 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017de:	b470      	push	{r4, r5, r6}
 80017e0:	68dc      	ldr	r4, [r3, #12]
 80017e2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e6:	f1c4 0607 	rsb	r6, r4, #7
 80017ea:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ec:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f0:	bf28      	it	cs
 80017f2:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f4:	2b06      	cmp	r3, #6
 80017f6:	d917      	bls.n	8001828 <HAL_NVIC_SetPriority+0x4c>
 80017f8:	3c03      	subs	r4, #3
 80017fa:	2501      	movs	r5, #1
 80017fc:	40a5      	lsls	r5, r4
 80017fe:	3d01      	subs	r5, #1
 8001800:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001802:	2301      	movs	r3, #1
 8001804:	40b3      	lsls	r3, r6
 8001806:	3b01      	subs	r3, #1
 8001808:	4019      	ands	r1, r3
 800180a:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 800180c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180e:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001812:	db0c      	blt.n	800182e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001814:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001818:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800181c:	0109      	lsls	r1, r1, #4
 800181e:	b2c9      	uxtb	r1, r1
 8001820:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001824:	bc70      	pop	{r4, r5, r6}
 8001826:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001828:	2200      	movs	r2, #0
 800182a:	4614      	mov	r4, r2
 800182c:	e7e9      	b.n	8001802 <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182e:	4b05      	ldr	r3, [pc, #20]	; (8001844 <HAL_NVIC_SetPriority+0x68>)
 8001830:	f000 000f 	and.w	r0, r0, #15
 8001834:	0109      	lsls	r1, r1, #4
 8001836:	4403      	add	r3, r0
 8001838:	b2c9      	uxtb	r1, r1
 800183a:	7619      	strb	r1, [r3, #24]
 800183c:	bc70      	pop	{r4, r5, r6}
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00
 8001844:	e000ecfc 	.word	0xe000ecfc

08001848 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001848:	2800      	cmp	r0, #0
 800184a:	db07      	blt.n	800185c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184c:	f000 011f 	and.w	r1, r0, #31
 8001850:	2301      	movs	r3, #1
 8001852:	0940      	lsrs	r0, r0, #5
 8001854:	4a02      	ldr	r2, [pc, #8]	; (8001860 <HAL_NVIC_EnableIRQ+0x18>)
 8001856:	408b      	lsls	r3, r1
 8001858:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000e100 	.word	0xe000e100

08001864 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001864:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001868:	2b02      	cmp	r3, #2
 800186a:	d003      	beq.n	8001874 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001870:	2001      	movs	r0, #1
 8001872:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001874:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001876:	2305      	movs	r3, #5
 8001878:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800187c:	6813      	ldr	r3, [r2, #0]
 800187e:	f023 0301 	bic.w	r3, r3, #1
 8001882:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8001884:	2000      	movs	r0, #0
}
 8001886:	4770      	bx	lr

08001888 <HAL_DMA_GetState>:
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  return hdma->State;
 8001888:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop

08001890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001894:	2500      	movs	r5, #0
{
 8001896:	b083      	sub	sp, #12
 8001898:	468c      	mov	ip, r1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189a:	f8d1 8000 	ldr.w	r8, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800189e:	f8df e204 	ldr.w	lr, [pc, #516]	; 8001aa4 <HAL_GPIO_Init+0x214>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a2:	462a      	mov	r2, r5
 80018a4:	e005      	b.n	80018b2 <HAL_GPIO_Init+0x22>
 80018a6:	3201      	adds	r2, #1
 80018a8:	2a10      	cmp	r2, #16
 80018aa:	f105 0502 	add.w	r5, r5, #2
 80018ae:	f000 8094 	beq.w	80019da <HAL_GPIO_Init+0x14a>
    ioposition = 0x01U << position;
 80018b2:	2301      	movs	r3, #1
 80018b4:	4093      	lsls	r3, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b6:	ea03 0108 	and.w	r1, r3, r8
    if(iocurrent == ioposition)
 80018ba:	428b      	cmp	r3, r1
 80018bc:	d1f3      	bne.n	80018a6 <HAL_GPIO_Init+0x16>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018be:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80018c2:	f026 0910 	bic.w	r9, r6, #16
 80018c6:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 80018ca:	2b01      	cmp	r3, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018cc:	f04f 0303 	mov.w	r3, #3
 80018d0:	fa03 f305 	lsl.w	r3, r3, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018d4:	f240 8084 	bls.w	80019e0 <HAL_GPIO_Init+0x150>
      temp = GPIOx->PUPDR;
 80018d8:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018da:	f8dc 4008 	ldr.w	r4, [ip, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018de:	43db      	mvns	r3, r3
 80018e0:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e2:	40ac      	lsls	r4, r5
 80018e4:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 80018e6:	60c4      	str	r4, [r0, #12]
      temp = GPIOx->MODER;
 80018e8:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ea:	f006 0403 	and.w	r4, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ee:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018f0:	4623      	mov	r3, r4
 80018f2:	40ab      	lsls	r3, r5
 80018f4:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 80018f6:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018f8:	00f3      	lsls	r3, r6, #3
 80018fa:	d5d4      	bpl.n	80018a6 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fc:	f04f 0900 	mov.w	r9, #0
 8001900:	4b61      	ldr	r3, [pc, #388]	; (8001a88 <HAL_GPIO_Init+0x1f8>)
 8001902:	f8cd 9004 	str.w	r9, [sp, #4]
 8001906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001908:	4c5f      	ldr	r4, [pc, #380]	; (8001a88 <HAL_GPIO_Init+0x1f8>)
 800190a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800190e:	6463      	str	r3, [r4, #68]	; 0x44
 8001910:	6c64      	ldr	r4, [r4, #68]	; 0x44
 8001912:	f022 0303 	bic.w	r3, r2, #3
 8001916:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800191a:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 800191e:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8001922:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001924:	f002 0403 	and.w	r4, r2, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001928:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800192a:	f8d3 a008 	ldr.w	sl, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800192e:	00a4      	lsls	r4, r4, #2
 8001930:	270f      	movs	r7, #15
 8001932:	40a7      	lsls	r7, r4
 8001934:	ea2a 0a07 	bic.w	sl, sl, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001938:	4f54      	ldr	r7, [pc, #336]	; (8001a8c <HAL_GPIO_Init+0x1fc>)
 800193a:	42b8      	cmp	r0, r7
 800193c:	d022      	beq.n	8001984 <HAL_GPIO_Init+0xf4>
 800193e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001942:	42b8      	cmp	r0, r7
 8001944:	f000 8082 	beq.w	8001a4c <HAL_GPIO_Init+0x1bc>
 8001948:	4f51      	ldr	r7, [pc, #324]	; (8001a90 <HAL_GPIO_Init+0x200>)
 800194a:	42b8      	cmp	r0, r7
 800194c:	f000 8083 	beq.w	8001a56 <HAL_GPIO_Init+0x1c6>
 8001950:	4f50      	ldr	r7, [pc, #320]	; (8001a94 <HAL_GPIO_Init+0x204>)
 8001952:	42b8      	cmp	r0, r7
 8001954:	f000 8084 	beq.w	8001a60 <HAL_GPIO_Init+0x1d0>
 8001958:	4f4f      	ldr	r7, [pc, #316]	; (8001a98 <HAL_GPIO_Init+0x208>)
 800195a:	42b8      	cmp	r0, r7
 800195c:	f000 8085 	beq.w	8001a6a <HAL_GPIO_Init+0x1da>
 8001960:	4f4e      	ldr	r7, [pc, #312]	; (8001a9c <HAL_GPIO_Init+0x20c>)
 8001962:	42b8      	cmp	r0, r7
 8001964:	f000 8086 	beq.w	8001a74 <HAL_GPIO_Init+0x1e4>
 8001968:	4f4d      	ldr	r7, [pc, #308]	; (8001aa0 <HAL_GPIO_Init+0x210>)
 800196a:	42b8      	cmp	r0, r7
 800196c:	f000 8087 	beq.w	8001a7e <HAL_GPIO_Init+0x1ee>
 8001970:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8001aa8 <HAL_GPIO_Init+0x218>
 8001974:	4548      	cmp	r0, r9
 8001976:	bf0c      	ite	eq
 8001978:	f04f 0907 	moveq.w	r9, #7
 800197c:	f04f 0908 	movne.w	r9, #8
 8001980:	fa09 f904 	lsl.w	r9, r9, r4
 8001984:	ea4a 0709 	orr.w	r7, sl, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001988:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 800198a:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 800198e:	43cc      	mvns	r4, r1
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001990:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 8001992:	bf54      	ite	pl
 8001994:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8001996:	430b      	orrmi	r3, r1
        }
        EXTI->IMR = temp;
 8001998:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 800199c:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019a0:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 80019a2:	bf54      	ite	pl
 80019a4:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 80019a6:	430b      	orrmi	r3, r1
        }
        EXTI->EMR = temp;
 80019a8:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ac:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019b0:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 80019b2:	bf54      	ite	pl
 80019b4:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 80019b6:	430b      	orrmi	r3, r1
        }
        EXTI->RTSR = temp;
 80019b8:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 80019bc:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019c0:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019c2:	f102 0201 	add.w	r2, r2, #1
        temp &= ~((uint32_t)iocurrent);
 80019c6:	bf54      	ite	pl
 80019c8:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 80019ca:	430b      	orrmi	r3, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019cc:	2a10      	cmp	r2, #16
        }
        EXTI->FTSR = temp;
 80019ce:	f8ce 300c 	str.w	r3, [lr, #12]
 80019d2:	f105 0502 	add.w	r5, r5, #2
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019d6:	f47f af6c 	bne.w	80018b2 <HAL_GPIO_Init+0x22>
      }
    }
  }
}
 80019da:	b003      	add	sp, #12
 80019dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 80019e0:	6884      	ldr	r4, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e2:	f8dc 7008 	ldr.w	r7, [ip, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019e6:	43db      	mvns	r3, r3
 80019e8:	ea04 0a03 	and.w	sl, r4, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ec:	f8dc 400c 	ldr.w	r4, [ip, #12]
 80019f0:	40ac      	lsls	r4, r5
 80019f2:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->OSPEEDR = temp;
 80019f6:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80019f8:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019fc:	f3c6 1400 	ubfx	r4, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a00:	ea2a 0a01 	bic.w	sl, sl, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a04:	4094      	lsls	r4, r2
 8001a06:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->OTYPER = temp;
 8001a0a:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8001a0c:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a0e:	40af      	lsls	r7, r5
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a10:	401c      	ands	r4, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a12:	4327      	orrs	r7, r4
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a14:	f1b9 0f02 	cmp.w	r9, #2
      GPIOx->PUPDR = temp;
 8001a18:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a1a:	f47f af65 	bne.w	80018e8 <HAL_GPIO_Init+0x58>
        temp = GPIOx->AFR[position >> 3U];
 8001a1e:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 8001a22:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a26:	f002 0707 	and.w	r7, r2, #7
        temp = GPIOx->AFR[position >> 3U];
 8001a2a:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a2e:	00bf      	lsls	r7, r7, #2
 8001a30:	f04f 0b0f 	mov.w	fp, #15
 8001a34:	fa0b fb07 	lsl.w	fp, fp, r7
 8001a38:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a3c:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8001a40:	40bc      	lsls	r4, r7
 8001a42:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001a46:	f8c9 4020 	str.w	r4, [r9, #32]
 8001a4a:	e74d      	b.n	80018e8 <HAL_GPIO_Init+0x58>
 8001a4c:	f04f 0901 	mov.w	r9, #1
 8001a50:	fa09 f904 	lsl.w	r9, r9, r4
 8001a54:	e796      	b.n	8001984 <HAL_GPIO_Init+0xf4>
 8001a56:	f04f 0902 	mov.w	r9, #2
 8001a5a:	fa09 f904 	lsl.w	r9, r9, r4
 8001a5e:	e791      	b.n	8001984 <HAL_GPIO_Init+0xf4>
 8001a60:	f04f 0903 	mov.w	r9, #3
 8001a64:	fa09 f904 	lsl.w	r9, r9, r4
 8001a68:	e78c      	b.n	8001984 <HAL_GPIO_Init+0xf4>
 8001a6a:	f04f 0904 	mov.w	r9, #4
 8001a6e:	fa09 f904 	lsl.w	r9, r9, r4
 8001a72:	e787      	b.n	8001984 <HAL_GPIO_Init+0xf4>
 8001a74:	f04f 0905 	mov.w	r9, #5
 8001a78:	fa09 f904 	lsl.w	r9, r9, r4
 8001a7c:	e782      	b.n	8001984 <HAL_GPIO_Init+0xf4>
 8001a7e:	f04f 0906 	mov.w	r9, #6
 8001a82:	fa09 f904 	lsl.w	r9, r9, r4
 8001a86:	e77d      	b.n	8001984 <HAL_GPIO_Init+0xf4>
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40020800 	.word	0x40020800
 8001a94:	40020c00 	.word	0x40020c00
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40021400 	.word	0x40021400
 8001aa0:	40021800 	.word	0x40021800
 8001aa4:	40013c00 	.word	0x40013c00
 8001aa8:	40021c00 	.word	0x40021c00

08001aac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aac:	b902      	cbnz	r2, 8001ab0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aae:	0409      	lsls	r1, r1, #16
 8001ab0:	6181      	str	r1, [r0, #24]
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001ab4:	6943      	ldr	r3, [r0, #20]
 8001ab6:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001aba:	bf08      	it	eq
 8001abc:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8001abe:	6181      	str	r1, [r0, #24]
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop

08001ac4 <I2C_MemoryTransmit_TXE_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->EventCount == 0U)
 8001ac4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001ac6:	b95b      	cbnz	r3, 8001ae0 <I2C_MemoryTransmit_TXE_BTF+0x1c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001ac8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001aca:	6802      	ldr	r2, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001acc:	2b01      	cmp	r3, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001ace:	6c83      	ldr	r3, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001ad0:	d00d      	beq.n	8001aee <I2C_MemoryTransmit_TXE_BTF+0x2a>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Send MSB of Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001ad2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001ad6:	6113      	str	r3, [r2, #16]

      hi2c->EventCount++;
 8001ad8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001ada:	3301      	adds	r3, #1
 8001adc:	6503      	str	r3, [r0, #80]	; 0x50
 8001ade:	4770      	bx	lr
    }
  }
  else if (hi2c->EventCount == 1U)
 8001ae0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d009      	beq.n	8001afa <I2C_MemoryTransmit_TXE_BTF+0x36>
    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);

    hi2c->EventCount++;
  }
  else if (hi2c->EventCount == 2U)
 8001ae6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d00e      	beq.n	8001b0a <I2C_MemoryTransmit_TXE_BTF+0x46>
 8001aec:	4770      	bx	lr
 8001aee:	b2db      	uxtb	r3, r3
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001af0:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 8001af2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001af4:	3302      	adds	r3, #2
 8001af6:	6503      	str	r3, [r0, #80]	; 0x50
 8001af8:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001afa:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001afc:	6802      	ldr	r2, [r0, #0]
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	6113      	str	r3, [r2, #16]
    hi2c->EventCount++;
 8001b02:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001b04:	3301      	adds	r3, #1
 8001b06:	6503      	str	r3, [r0, #80]	; 0x50
 8001b08:	4770      	bx	lr
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b0a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001b0e:	2b22      	cmp	r3, #34	; 0x22
 8001b10:	d00e      	beq.n	8001b30 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    {
      /* Generate Restart */
      hi2c->Instance->CR1 |= I2C_CR1_START;
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001b12:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001b16:	2b21      	cmp	r3, #33	; 0x21
 8001b18:	d1e8      	bne.n	8001aec <I2C_MemoryTransmit_TXE_BTF+0x28>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b1a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001b1c:	6803      	ldr	r3, [r0, #0]
 8001b1e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001b22:	6119      	str	r1, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;

      /* Update counter */
      hi2c->XferCount--;
 8001b24:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8001b26:	6242      	str	r2, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001b2e:	e7dd      	b.n	8001aec <I2C_MemoryTransmit_TXE_BTF+0x28>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001b30:	6802      	ldr	r2, [r0, #0]
 8001b32:	6813      	ldr	r3, [r2, #0]
 8001b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	4770      	bx	lr

08001b3c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001b3c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8001b40:	4604      	mov	r4, r0
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b42:	6800      	ldr	r0, [r0, #0]
{
 8001b44:	4689      	mov	r9, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b46:	6801      	ldr	r1, [r0, #0]
 8001b48:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001b4c:	6001      	str	r1, [r0, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b4e:	6801      	ldr	r1, [r0, #0]
{
 8001b50:	b082      	sub	sp, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b52:	f441 7180 	orr.w	r1, r1, #256	; 0x100
{
 8001b56:	9d08      	ldr	r5, [sp, #32]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b58:	6001      	str	r1, [r0, #0]
{
 8001b5a:	4616      	mov	r6, r2
 8001b5c:	461f      	mov	r7, r3
 8001b5e:	1c6b      	adds	r3, r5, #1
 8001b60:	d145      	bne.n	8001bee <I2C_RequestMemoryRead+0xb2>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b62:	6943      	ldr	r3, [r0, #20]
 8001b64:	07d9      	lsls	r1, r3, #31
 8001b66:	d5fc      	bpl.n	8001b62 <I2C_RequestMemoryRead+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b68:	fa5f f989 	uxtb.w	r9, r9
 8001b6c:	f009 03fe 	and.w	r3, r9, #254	; 0xfe
 8001b70:	6103      	str	r3, [r0, #16]
 8001b72:	1c69      	adds	r1, r5, #1
 8001b74:	d014      	beq.n	8001ba0 <I2C_RequestMemoryRead+0x64>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b76:	6943      	ldr	r3, [r0, #20]
 8001b78:	0799      	lsls	r1, r3, #30
 8001b7a:	d414      	bmi.n	8001ba6 <I2C_RequestMemoryRead+0x6a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b7c:	6943      	ldr	r3, [r0, #20]
 8001b7e:	055b      	lsls	r3, r3, #21
 8001b80:	d45a      	bmi.n	8001c38 <I2C_RequestMemoryRead+0xfc>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b82:	f7ff fc61 	bl	8001448 <HAL_GetTick>
 8001b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b88:	1ac0      	subs	r0, r0, r3
 8001b8a:	4285      	cmp	r5, r0
 8001b8c:	f0c0 80e4 	bcc.w	8001d58 <I2C_RequestMemoryRead+0x21c>
 8001b90:	2d00      	cmp	r5, #0
 8001b92:	f000 80e1 	beq.w	8001d58 <I2C_RequestMemoryRead+0x21c>
 8001b96:	6820      	ldr	r0, [r4, #0]
 8001b98:	e7eb      	b.n	8001b72 <I2C_RequestMemoryRead+0x36>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b9a:	6943      	ldr	r3, [r0, #20]
 8001b9c:	055b      	lsls	r3, r3, #21
 8001b9e:	d44b      	bmi.n	8001c38 <I2C_RequestMemoryRead+0xfc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ba0:	6943      	ldr	r3, [r0, #20]
 8001ba2:	079a      	lsls	r2, r3, #30
 8001ba4:	d5f9      	bpl.n	8001b9a <I2C_RequestMemoryRead+0x5e>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	6943      	ldr	r3, [r0, #20]
 8001bac:	9301      	str	r3, [sp, #4]
 8001bae:	6983      	ldr	r3, [r0, #24]
 8001bb0:	9301      	str	r3, [sp, #4]
 8001bb2:	9b01      	ldr	r3, [sp, #4]
 8001bb4:	1c6b      	adds	r3, r5, #1
 8001bb6:	d16f      	bne.n	8001c98 <I2C_RequestMemoryRead+0x15c>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bb8:	6943      	ldr	r3, [r0, #20]
 8001bba:	0619      	lsls	r1, r3, #24
 8001bbc:	d454      	bmi.n	8001c68 <I2C_RequestMemoryRead+0x12c>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bbe:	6943      	ldr	r3, [r0, #20]
 8001bc0:	055a      	lsls	r2, r3, #21
 8001bc2:	d5f9      	bpl.n	8001bb8 <I2C_RequestMemoryRead+0x7c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001bc4:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8001bc6:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bc8:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8001bcc:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001bce:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001bd0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bd4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bd8:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bda:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bde:	f043 0304 	orr.w	r3, r3, #4
 8001be2:	6423      	str	r3, [r4, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001be4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d066      	beq.n	8001cb8 <I2C_RequestMemoryRead+0x17c>
    return HAL_ERROR;
 8001bea:	2001      	movs	r0, #1
 8001bec:	e01d      	b.n	8001c2a <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bee:	6943      	ldr	r3, [r0, #20]
 8001bf0:	07da      	lsls	r2, r3, #31
 8001bf2:	d4b9      	bmi.n	8001b68 <I2C_RequestMemoryRead+0x2c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bf4:	f7ff fc28 	bl	8001448 <HAL_GetTick>
 8001bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001bfa:	1ac0      	subs	r0, r0, r3
 8001bfc:	4285      	cmp	r5, r0
 8001bfe:	d302      	bcc.n	8001c06 <I2C_RequestMemoryRead+0xca>
 8001c00:	b10d      	cbz	r5, 8001c06 <I2C_RequestMemoryRead+0xca>
 8001c02:	6820      	ldr	r0, [r4, #0]
 8001c04:	e7ab      	b.n	8001b5e <I2C_RequestMemoryRead+0x22>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c06:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c08:	2320      	movs	r3, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c0a:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c0c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c10:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c14:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001c16:	6821      	ldr	r1, [r4, #0]
      __HAL_UNLOCK(hi2c);
 8001c18:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c1c:	f043 0320 	orr.w	r3, r3, #32
 8001c20:	6423      	str	r3, [r4, #64]	; 0x40
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001c22:	680b      	ldr	r3, [r1, #0]
 8001c24:	05da      	lsls	r2, r3, #23
 8001c26:	d403      	bmi.n	8001c30 <I2C_RequestMemoryRead+0xf4>
    return HAL_TIMEOUT;
 8001c28:	2003      	movs	r0, #3
}
 8001c2a:	b002      	add	sp, #8
 8001c2c:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c34:	6423      	str	r3, [r4, #64]	; 0x40
 8001c36:	e7f7      	b.n	8001c28 <I2C_RequestMemoryRead+0xec>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c38:	6803      	ldr	r3, [r0, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c3a:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c3c:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c44:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c46:	6003      	str	r3, [r0, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c48:	6145      	str	r5, [r0, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c4a:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c4c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c50:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c54:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001c56:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c5a:	f043 0304 	orr.w	r3, r3, #4
    return HAL_ERROR;
 8001c5e:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c60:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001c62:	b002      	add	sp, #8
 8001c64:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c68:	2f01      	cmp	r7, #1
 8001c6a:	d00a      	beq.n	8001c82 <I2C_RequestMemoryRead+0x146>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001c6c:	0a33      	lsrs	r3, r6, #8
 8001c6e:	6103      	str	r3, [r0, #16]
 8001c70:	1c6a      	adds	r2, r5, #1
 8001c72:	d161      	bne.n	8001d38 <I2C_RequestMemoryRead+0x1fc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c74:	6943      	ldr	r3, [r0, #20]
 8001c76:	061b      	lsls	r3, r3, #24
 8001c78:	d403      	bmi.n	8001c82 <I2C_RequestMemoryRead+0x146>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c7a:	6943      	ldr	r3, [r0, #20]
 8001c7c:	055f      	lsls	r7, r3, #21
 8001c7e:	d4a1      	bmi.n	8001bc4 <I2C_RequestMemoryRead+0x88>
 8001c80:	e7f8      	b.n	8001c74 <I2C_RequestMemoryRead+0x138>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c82:	b2f6      	uxtb	r6, r6
 8001c84:	6106      	str	r6, [r0, #16]
 8001c86:	1c6b      	adds	r3, r5, #1
 8001c88:	d137      	bne.n	8001cfa <I2C_RequestMemoryRead+0x1be>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c8a:	6943      	ldr	r3, [r0, #20]
 8001c8c:	061f      	lsls	r7, r3, #24
 8001c8e:	d41a      	bmi.n	8001cc6 <I2C_RequestMemoryRead+0x18a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c90:	6943      	ldr	r3, [r0, #20]
 8001c92:	055e      	lsls	r6, r3, #21
 8001c94:	d496      	bmi.n	8001bc4 <I2C_RequestMemoryRead+0x88>
 8001c96:	e7f8      	b.n	8001c8a <I2C_RequestMemoryRead+0x14e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c98:	6943      	ldr	r3, [r0, #20]
 8001c9a:	061b      	lsls	r3, r3, #24
 8001c9c:	d4e4      	bmi.n	8001c68 <I2C_RequestMemoryRead+0x12c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c9e:	6943      	ldr	r3, [r0, #20]
 8001ca0:	055a      	lsls	r2, r3, #21
 8001ca2:	d48f      	bmi.n	8001bc4 <I2C_RequestMemoryRead+0x88>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ca4:	f7ff fbd0 	bl	8001448 <HAL_GetTick>
 8001ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001caa:	1ac0      	subs	r0, r0, r3
 8001cac:	4285      	cmp	r5, r0
 8001cae:	d361      	bcc.n	8001d74 <I2C_RequestMemoryRead+0x238>
 8001cb0:	2d00      	cmp	r5, #0
 8001cb2:	d05f      	beq.n	8001d74 <I2C_RequestMemoryRead+0x238>
 8001cb4:	6820      	ldr	r0, [r4, #0]
 8001cb6:	e77d      	b.n	8001bb4 <I2C_RequestMemoryRead+0x78>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb8:	6822      	ldr	r2, [r4, #0]
 8001cba:	6813      	ldr	r3, [r2, #0]
 8001cbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cc0:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	e7b1      	b.n	8001c2a <I2C_RequestMemoryRead+0xee>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cc6:	6803      	ldr	r3, [r0, #0]
 8001cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ccc:	6003      	str	r3, [r0, #0]
 8001cce:	1c6b      	adds	r3, r5, #1
 8001cd0:	d123      	bne.n	8001d1a <I2C_RequestMemoryRead+0x1de>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cd2:	6943      	ldr	r3, [r0, #20]
 8001cd4:	07df      	lsls	r7, r3, #31
 8001cd6:	d5fc      	bpl.n	8001cd2 <I2C_RequestMemoryRead+0x196>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001cd8:	f049 0901 	orr.w	r9, r9, #1
 8001cdc:	f8c0 9010 	str.w	r9, [r0, #16]
 8001ce0:	1c6a      	adds	r2, r5, #1
 8001ce2:	d003      	beq.n	8001cec <I2C_RequestMemoryRead+0x1b0>
 8001ce4:	e054      	b.n	8001d90 <I2C_RequestMemoryRead+0x254>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ce6:	6943      	ldr	r3, [r0, #20]
 8001ce8:	055b      	lsls	r3, r3, #21
 8001cea:	d4a5      	bmi.n	8001c38 <I2C_RequestMemoryRead+0xfc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cec:	6943      	ldr	r3, [r0, #20]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	f013 0302 	ands.w	r3, r3, #2
 8001cf4:	d1f7      	bne.n	8001ce6 <I2C_RequestMemoryRead+0x1aa>
  return HAL_OK;
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	e797      	b.n	8001c2a <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cfa:	6943      	ldr	r3, [r0, #20]
 8001cfc:	0619      	lsls	r1, r3, #24
 8001cfe:	d4e2      	bmi.n	8001cc6 <I2C_RequestMemoryRead+0x18a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d00:	6943      	ldr	r3, [r0, #20]
 8001d02:	055a      	lsls	r2, r3, #21
 8001d04:	f53f af5e 	bmi.w	8001bc4 <I2C_RequestMemoryRead+0x88>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d08:	f7ff fb9e 	bl	8001448 <HAL_GetTick>
 8001d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d0e:	1ac0      	subs	r0, r0, r3
 8001d10:	4285      	cmp	r5, r0
 8001d12:	d32f      	bcc.n	8001d74 <I2C_RequestMemoryRead+0x238>
 8001d14:	b375      	cbz	r5, 8001d74 <I2C_RequestMemoryRead+0x238>
 8001d16:	6820      	ldr	r0, [r4, #0]
 8001d18:	e7b5      	b.n	8001c86 <I2C_RequestMemoryRead+0x14a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d1a:	6943      	ldr	r3, [r0, #20]
 8001d1c:	07de      	lsls	r6, r3, #31
 8001d1e:	d4db      	bmi.n	8001cd8 <I2C_RequestMemoryRead+0x19c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d20:	f7ff fb92 	bl	8001448 <HAL_GetTick>
 8001d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d26:	1ac0      	subs	r0, r0, r3
 8001d28:	4285      	cmp	r5, r0
 8001d2a:	f4ff af6c 	bcc.w	8001c06 <I2C_RequestMemoryRead+0xca>
 8001d2e:	2d00      	cmp	r5, #0
 8001d30:	f43f af69 	beq.w	8001c06 <I2C_RequestMemoryRead+0xca>
 8001d34:	6820      	ldr	r0, [r4, #0]
 8001d36:	e7ca      	b.n	8001cce <I2C_RequestMemoryRead+0x192>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d38:	6943      	ldr	r3, [r0, #20]
 8001d3a:	0619      	lsls	r1, r3, #24
 8001d3c:	d4a1      	bmi.n	8001c82 <I2C_RequestMemoryRead+0x146>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d3e:	6943      	ldr	r3, [r0, #20]
 8001d40:	0559      	lsls	r1, r3, #21
 8001d42:	f53f af3f 	bmi.w	8001bc4 <I2C_RequestMemoryRead+0x88>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d46:	f7ff fb7f 	bl	8001448 <HAL_GetTick>
 8001d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d4c:	1ac0      	subs	r0, r0, r3
 8001d4e:	4285      	cmp	r5, r0
 8001d50:	d310      	bcc.n	8001d74 <I2C_RequestMemoryRead+0x238>
 8001d52:	b17d      	cbz	r5, 8001d74 <I2C_RequestMemoryRead+0x238>
 8001d54:	6820      	ldr	r0, [r4, #0]
 8001d56:	e78b      	b.n	8001c70 <I2C_RequestMemoryRead+0x134>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d58:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d5a:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d5c:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d62:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d66:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001d68:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d6c:	f043 0320 	orr.w	r3, r3, #32
 8001d70:	6423      	str	r3, [r4, #64]	; 0x40
 8001d72:	e73a      	b.n	8001bea <I2C_RequestMemoryRead+0xae>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d74:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d76:	2320      	movs	r3, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d78:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d7e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d82:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001d84:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d88:	f043 0320 	orr.w	r3, r3, #32
 8001d8c:	6423      	str	r3, [r4, #64]	; 0x40
 8001d8e:	e729      	b.n	8001be4 <I2C_RequestMemoryRead+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d90:	6943      	ldr	r3, [r0, #20]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	f013 0302 	ands.w	r3, r3, #2
 8001d98:	d0ad      	beq.n	8001cf6 <I2C_RequestMemoryRead+0x1ba>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d9a:	6943      	ldr	r3, [r0, #20]
 8001d9c:	0559      	lsls	r1, r3, #21
 8001d9e:	f53f af4b 	bmi.w	8001c38 <I2C_RequestMemoryRead+0xfc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001da2:	f7ff fb51 	bl	8001448 <HAL_GetTick>
 8001da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001da8:	1ac0      	subs	r0, r0, r3
 8001daa:	4285      	cmp	r5, r0
 8001dac:	d3d4      	bcc.n	8001d58 <I2C_RequestMemoryRead+0x21c>
 8001dae:	2d00      	cmp	r5, #0
 8001db0:	d0d2      	beq.n	8001d58 <I2C_RequestMemoryRead+0x21c>
 8001db2:	6820      	ldr	r0, [r4, #0]
 8001db4:	e794      	b.n	8001ce0 <I2C_RequestMemoryRead+0x1a4>
 8001db6:	bf00      	nop

08001db8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001db8:	2800      	cmp	r0, #0
 8001dba:	f000 80b1 	beq.w	8001f20 <HAL_I2C_Init+0x168>
{
 8001dbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dc0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001dc4:	4604      	mov	r4, r0
 8001dc6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 8093 	beq.w	8001ef6 <HAL_I2C_Init+0x13e>
  __HAL_I2C_DISABLE(hi2c);
 8001dd0:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd2:	2224      	movs	r2, #36	; 0x24
 8001dd4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001de6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dee:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001df0:	f002 f94a 	bl	8004088 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001df4:	6861      	ldr	r1, [r4, #4]
 8001df6:	4b4b      	ldr	r3, [pc, #300]	; (8001f24 <HAL_I2C_Init+0x16c>)
 8001df8:	4299      	cmp	r1, r3
 8001dfa:	d84b      	bhi.n	8001e94 <HAL_I2C_Init+0xdc>
 8001dfc:	4b4a      	ldr	r3, [pc, #296]	; (8001f28 <HAL_I2C_Init+0x170>)
 8001dfe:	4298      	cmp	r0, r3
 8001e00:	d977      	bls.n	8001ef2 <HAL_I2C_Init+0x13a>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e02:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001e04:	4b49      	ldr	r3, [pc, #292]	; (8001f2c <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e06:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001e08:	fba3 6300 	umull	r6, r3, r3, r0
 8001e0c:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e0e:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001e12:	431d      	orrs	r5, r3
 8001e14:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e16:	6a15      	ldr	r5, [r2, #32]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001e1e:	432b      	orrs	r3, r5
 8001e20:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e22:	69d5      	ldr	r5, [r2, #28]
 8001e24:	0049      	lsls	r1, r1, #1
 8001e26:	3801      	subs	r0, #1
 8001e28:	fbb0 f0f1 	udiv	r0, r0, r1
 8001e2c:	3001      	adds	r0, #1
 8001e2e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8001e32:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 8001e36:	2804      	cmp	r0, #4
 8001e38:	bf38      	it	cc
 8001e3a:	2004      	movcc	r0, #4
 8001e3c:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8001e40:	4328      	orrs	r0, r5
 8001e42:	61d0      	str	r0, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e44:	6815      	ldr	r5, [r2, #0]
 8001e46:	69e0      	ldr	r0, [r4, #28]
 8001e48:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e4a:	6921      	ldr	r1, [r4, #16]
 8001e4c:	68e7      	ldr	r7, [r4, #12]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e4e:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e50:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8001e54:	4330      	orrs	r0, r6
 8001e56:	4328      	orrs	r0, r5
 8001e58:	6010      	str	r0, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e5a:	6890      	ldr	r0, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e5c:	69a5      	ldr	r5, [r4, #24]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e5e:	f420 4003 	bic.w	r0, r0, #33536	; 0x8300
 8001e62:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8001e66:	4339      	orrs	r1, r7
 8001e68:	4301      	orrs	r1, r0
 8001e6a:	6091      	str	r1, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e6c:	68d1      	ldr	r1, [r2, #12]
 8001e6e:	432b      	orrs	r3, r5
 8001e70:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001e74:	430b      	orrs	r3, r1
 8001e76:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001e78:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e7a:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8001e7c:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8001e80:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 8001e82:	6011      	str	r1, [r2, #0]
  return HAL_OK;
 8001e84:	4618      	mov	r0, r3
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e86:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e88:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e8c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  return HAL_OK;
 8001e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e94:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <HAL_I2C_Init+0x178>)
 8001e96:	4298      	cmp	r0, r3
 8001e98:	d92b      	bls.n	8001ef2 <HAL_I2C_Init+0x13a>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e9a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001e9c:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e9e:	6857      	ldr	r7, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ea0:	f8df e090 	ldr.w	lr, [pc, #144]	; 8001f34 <HAL_I2C_Init+0x17c>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ea4:	68a6      	ldr	r6, [r4, #8]
  freqrange = I2C_FREQRANGE(pclk1);
 8001ea6:	fba3 5300 	umull	r5, r3, r3, r0
 8001eaa:	0c9d      	lsrs	r5, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001eac:	f027 073f 	bic.w	r7, r7, #63	; 0x3f
 8001eb0:	432f      	orrs	r7, r5
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001eb2:	f44f 7396 	mov.w	r3, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001eb6:	6057      	str	r7, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001eb8:	fb03 f305 	mul.w	r3, r3, r5
 8001ebc:	fbae 5303 	umull	r5, r3, lr, r3
 8001ec0:	6a15      	ldr	r5, [r2, #32]
 8001ec2:	099b      	lsrs	r3, r3, #6
 8001ec4:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001ec8:	3301      	adds	r3, #1
 8001eca:	432b      	orrs	r3, r5
 8001ecc:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ece:	69d5      	ldr	r5, [r2, #28]
 8001ed0:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 8001ed4:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8001ed8:	b996      	cbnz	r6, 8001f00 <HAL_I2C_Init+0x148>
 8001eda:	1e43      	subs	r3, r0, #1
 8001edc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001ee0:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eea:	b1bb      	cbz	r3, 8001f1c <HAL_I2C_Init+0x164>
 8001eec:	f443 4000 	orr.w	r0, r3, #32768	; 0x8000
 8001ef0:	e7a6      	b.n	8001e40 <HAL_I2C_Init+0x88>
    return HAL_ERROR;
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001ef6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001efa:	f005 f977 	bl	80071ec <HAL_I2C_MspInit>
 8001efe:	e767      	b.n	8001dd0 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f00:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8001f04:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001f08:	1e43      	subs	r3, r0, #1
 8001f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f0e:	3301      	adds	r3, #1
 8001f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f14:	b113      	cbz	r3, 8001f1c <HAL_I2C_Init+0x164>
 8001f16:	f443 4040 	orr.w	r0, r3, #49152	; 0xc000
 8001f1a:	e791      	b.n	8001e40 <HAL_I2C_Init+0x88>
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	e78f      	b.n	8001e40 <HAL_I2C_Init+0x88>
    return HAL_ERROR;
 8001f20:	2001      	movs	r0, #1
}
 8001f22:	4770      	bx	lr
 8001f24:	000186a0 	.word	0x000186a0
 8001f28:	001e847f 	.word	0x001e847f
 8001f2c:	431bde83 	.word	0x431bde83
 8001f30:	003d08ff 	.word	0x003d08ff
 8001f34:	10624dd3 	.word	0x10624dd3

08001f38 <HAL_I2C_Master_Transmit>:
{
 8001f38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f3c:	4604      	mov	r4, r0
 8001f3e:	b083      	sub	sp, #12
 8001f40:	4698      	mov	r8, r3
 8001f42:	460e      	mov	r6, r1
 8001f44:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 8001f46:	f7ff fa7f 	bl	8001448 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f4a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001f4e:	2b20      	cmp	r3, #32
 8001f50:	d003      	beq.n	8001f5a <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8001f52:	2002      	movs	r0, #2
}
 8001f54:	b003      	add	sp, #12
 8001f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f5a:	4605      	mov	r5, r0
 8001f5c:	e005      	b.n	8001f6a <HAL_I2C_Master_Transmit+0x32>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f5e:	f7ff fa73 	bl	8001448 <HAL_GetTick>
 8001f62:	1b40      	subs	r0, r0, r5
 8001f64:	2819      	cmp	r0, #25
 8001f66:	f200 80b0 	bhi.w	80020ca <HAL_I2C_Master_Transmit+0x192>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f6a:	6823      	ldr	r3, [r4, #0]
 8001f6c:	699a      	ldr	r2, [r3, #24]
 8001f6e:	43d2      	mvns	r2, r2
 8001f70:	f012 0902 	ands.w	r9, r2, #2
 8001f74:	d0f3      	beq.n	8001f5e <HAL_I2C_Master_Transmit+0x26>
    __HAL_LOCK(hi2c);
 8001f76:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8001f7a:	2a01      	cmp	r2, #1
 8001f7c:	d0e9      	beq.n	8001f52 <HAL_I2C_Master_Transmit+0x1a>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f7e:	681a      	ldr	r2, [r3, #0]
    __HAL_LOCK(hi2c);
 8001f80:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f82:	07d0      	lsls	r0, r2, #31
    __HAL_LOCK(hi2c);
 8001f84:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f88:	d402      	bmi.n	8001f90 <HAL_I2C_Master_Transmit+0x58>
      __HAL_I2C_ENABLE(hi2c);
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f90:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f92:	48a2      	ldr	r0, [pc, #648]	; (800221c <HAL_I2C_Master_Transmit+0x2e4>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f98:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f9a:	2221      	movs	r2, #33	; 0x21
 8001f9c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fa0:	2210      	movs	r2, #16
 8001fa2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001faa:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fae:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fb0:	62e0      	str	r0, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fb2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8001fb4:	6267      	str	r7, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fb6:	2a08      	cmp	r2, #8
    hi2c->XferSize    = hi2c->XferCount;
 8001fb8:	8521      	strh	r1, [r4, #40]	; 0x28
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fba:	f000 80b1 	beq.w	8002120 <HAL_I2C_Master_Transmit+0x1e8>
 8001fbe:	2a01      	cmp	r2, #1
 8001fc0:	f000 80ae 	beq.w	8002120 <HAL_I2C_Master_Transmit+0x1e8>
 8001fc4:	4282      	cmp	r2, r0
 8001fc6:	f000 80ab 	beq.w	8002120 <HAL_I2C_Master_Transmit+0x1e8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001fca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001fcc:	2a12      	cmp	r2, #18
 8001fce:	f000 80a7 	beq.w	8002120 <HAL_I2C_Master_Transmit+0x1e8>
 8001fd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001fd4:	3201      	adds	r2, #1
 8001fd6:	f040 8096 	bne.w	8002106 <HAL_I2C_Master_Transmit+0x1ce>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fda:	695a      	ldr	r2, [r3, #20]
 8001fdc:	07d2      	lsls	r2, r2, #31
 8001fde:	d5fc      	bpl.n	8001fda <HAL_I2C_Master_Transmit+0xa2>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fe0:	6922      	ldr	r2, [r4, #16]
 8001fe2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001fe6:	f040 80cb 	bne.w	8002180 <HAL_I2C_Master_Transmit+0x248>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fea:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8001fee:	611e      	str	r6, [r3, #16]
 8001ff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001ff2:	3201      	adds	r2, #1
 8001ff4:	d004      	beq.n	8002000 <HAL_I2C_Master_Transmit+0xc8>
 8001ff6:	e0e3      	b.n	80021c0 <HAL_I2C_Master_Transmit+0x288>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ff8:	695a      	ldr	r2, [r3, #20]
 8001ffa:	0551      	lsls	r1, r2, #21
 8001ffc:	f100 80ab 	bmi.w	8002156 <HAL_I2C_Master_Transmit+0x21e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002000:	695a      	ldr	r2, [r3, #20]
 8002002:	0790      	lsls	r0, r2, #30
 8002004:	d5f8      	bpl.n	8001ff8 <HAL_I2C_Master_Transmit+0xc0>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002006:	2200      	movs	r2, #0
 8002008:	9201      	str	r2, [sp, #4]
 800200a:	695a      	ldr	r2, [r3, #20]
 800200c:	9201      	str	r2, [sp, #4]
 800200e:	699a      	ldr	r2, [r3, #24]
 8002010:	9201      	str	r2, [sp, #4]
 8002012:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8002014:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002016:	2a00      	cmp	r2, #0
 8002018:	f000 80c5 	beq.w	80021a6 <HAL_I2C_Master_Transmit+0x26e>
 800201c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800201e:	3201      	adds	r2, #1
 8002020:	d141      	bne.n	80020a6 <HAL_I2C_Master_Transmit+0x16e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002022:	695a      	ldr	r2, [r3, #20]
 8002024:	0616      	lsls	r6, r2, #24
 8002026:	d418      	bmi.n	800205a <HAL_I2C_Master_Transmit+0x122>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002028:	695a      	ldr	r2, [r3, #20]
 800202a:	0550      	lsls	r0, r2, #21
 800202c:	d5f9      	bpl.n	8002022 <HAL_I2C_Master_Transmit+0xea>
    hi2c->PreviousState       = I2C_STATE_NONE;
 800202e:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002030:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8002034:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002036:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002038:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800203a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800203e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002042:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8002044:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002048:	f043 0304 	orr.w	r3, r3, #4
 800204c:	6423      	str	r3, [r4, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800204e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002050:	2b04      	cmp	r3, #4
 8002052:	f000 80e5 	beq.w	8002220 <HAL_I2C_Master_Transmit+0x2e8>
      return HAL_ERROR;
 8002056:	2001      	movs	r0, #1
 8002058:	e77c      	b.n	8001f54 <HAL_I2C_Master_Transmit+0x1c>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800205a:	6a66      	ldr	r6, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800205c:	8d27      	ldrh	r7, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800205e:	4630      	mov	r0, r6
      hi2c->XferSize--;
 8002060:	1e79      	subs	r1, r7, #1
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002062:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002066:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8002068:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800206a:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800206c:	3a01      	subs	r2, #1
 800206e:	b292      	uxth	r2, r2
 8002070:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002072:	6958      	ldr	r0, [r3, #20]
      hi2c->XferSize--;
 8002074:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002076:	0742      	lsls	r2, r0, #29
      hi2c->XferSize--;
 8002078:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800207a:	d50a      	bpl.n	8002092 <HAL_I2C_Master_Transmit+0x15a>
 800207c:	b149      	cbz	r1, 8002092 <HAL_I2C_Master_Transmit+0x15a>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800207e:	7872      	ldrb	r2, [r6, #1]
 8002080:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8002082:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002084:	3a01      	subs	r2, #1
        hi2c->XferSize--;
 8002086:	3f02      	subs	r7, #2
        hi2c->pBuffPtr++;
 8002088:	3602      	adds	r6, #2
        hi2c->XferCount--;
 800208a:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 800208c:	8527      	strh	r7, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 800208e:	6266      	str	r6, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002090:	8562      	strh	r2, [r4, #42]	; 0x2a
 8002092:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002094:	3201      	adds	r2, #1
 8002096:	d126      	bne.n	80020e6 <HAL_I2C_Master_Transmit+0x1ae>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002098:	695a      	ldr	r2, [r3, #20]
 800209a:	0750      	lsls	r0, r2, #29
 800209c:	d4ba      	bmi.n	8002014 <HAL_I2C_Master_Transmit+0xdc>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800209e:	695a      	ldr	r2, [r3, #20]
 80020a0:	0551      	lsls	r1, r2, #21
 80020a2:	d4c4      	bmi.n	800202e <HAL_I2C_Master_Transmit+0xf6>
 80020a4:	e7f8      	b.n	8002098 <HAL_I2C_Master_Transmit+0x160>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	0611      	lsls	r1, r2, #24
 80020aa:	d4d6      	bmi.n	800205a <HAL_I2C_Master_Transmit+0x122>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020ac:	695a      	ldr	r2, [r3, #20]
 80020ae:	0557      	lsls	r7, r2, #21
 80020b0:	d4bd      	bmi.n	800202e <HAL_I2C_Master_Transmit+0xf6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020b2:	f7ff f9c9 	bl	8001448 <HAL_GetTick>
 80020b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80020b8:	1b40      	subs	r0, r0, r5
 80020ba:	4283      	cmp	r3, r0
 80020bc:	f0c0 8090 	bcc.w	80021e0 <HAL_I2C_Master_Transmit+0x2a8>
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 808d 	beq.w	80021e0 <HAL_I2C_Master_Transmit+0x2a8>
 80020c6:	6823      	ldr	r3, [r4, #0]
 80020c8:	e7a8      	b.n	800201c <HAL_I2C_Master_Transmit+0xe4>
      hi2c->State               = HAL_I2C_STATE_READY;
 80020ca:	2320      	movs	r3, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80020cc:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020d4:	f884 903e 	strb.w	r9, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80020da:	f884 903c 	strb.w	r9, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020de:	f043 0320 	orr.w	r3, r3, #32
 80020e2:	6423      	str	r3, [r4, #64]	; 0x40
 80020e4:	e735      	b.n	8001f52 <HAL_I2C_Master_Transmit+0x1a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020e6:	695a      	ldr	r2, [r3, #20]
 80020e8:	0752      	lsls	r2, r2, #29
 80020ea:	d493      	bmi.n	8002014 <HAL_I2C_Master_Transmit+0xdc>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020ec:	695a      	ldr	r2, [r3, #20]
 80020ee:	0556      	lsls	r6, r2, #21
 80020f0:	d49d      	bmi.n	800202e <HAL_I2C_Master_Transmit+0xf6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f2:	f7ff f9a9 	bl	8001448 <HAL_GetTick>
 80020f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80020f8:	1b40      	subs	r0, r0, r5
 80020fa:	4283      	cmp	r3, r0
 80020fc:	d370      	bcc.n	80021e0 <HAL_I2C_Master_Transmit+0x2a8>
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d06e      	beq.n	80021e0 <HAL_I2C_Master_Transmit+0x2a8>
 8002102:	6823      	ldr	r3, [r4, #0]
 8002104:	e7c5      	b.n	8002092 <HAL_I2C_Master_Transmit+0x15a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	07d7      	lsls	r7, r2, #31
 800210a:	f53f af69 	bmi.w	8001fe0 <HAL_I2C_Master_Transmit+0xa8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800210e:	f7ff f99b 	bl	8001448 <HAL_GetTick>
 8002112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002114:	1b40      	subs	r0, r0, r5
 8002116:	4283      	cmp	r3, r0
 8002118:	d307      	bcc.n	800212a <HAL_I2C_Master_Transmit+0x1f2>
 800211a:	b133      	cbz	r3, 800212a <HAL_I2C_Master_Transmit+0x1f2>
 800211c:	6823      	ldr	r3, [r4, #0]
 800211e:	e758      	b.n	8001fd2 <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	e753      	b.n	8001fd2 <HAL_I2C_Master_Transmit+0x9a>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800212a:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800212c:	2320      	movs	r3, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800212e:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002130:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002134:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002138:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800213a:	6821      	ldr	r1, [r4, #0]
      __HAL_UNLOCK(hi2c);
 800213c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002140:	f043 0320 	orr.w	r3, r3, #32
 8002144:	6423      	str	r3, [r4, #64]	; 0x40
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002146:	680b      	ldr	r3, [r1, #0]
 8002148:	05d9      	lsls	r1, r3, #23
 800214a:	d584      	bpl.n	8002056 <HAL_I2C_Master_Transmit+0x11e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800214c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002150:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002152:	2001      	movs	r0, #1
 8002154:	e6fe      	b.n	8001f54 <HAL_I2C_Master_Transmit+0x1c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002156:	6819      	ldr	r1, [r3, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002158:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800215a:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800215e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
      hi2c->State               = HAL_I2C_STATE_READY;
 8002162:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002164:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002166:	615d      	str	r5, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002168:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800216a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800216e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002172:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002174:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002178:	f043 0304 	orr.w	r3, r3, #4
 800217c:	6423      	str	r3, [r4, #64]	; 0x40
 800217e:	e76a      	b.n	8002056 <HAL_I2C_Master_Transmit+0x11e>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002180:	11f2      	asrs	r2, r6, #7
 8002182:	f002 0206 	and.w	r2, r2, #6
 8002186:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 800218a:	611a      	str	r2, [r3, #16]
 800218c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800218e:	3201      	adds	r2, #1
 8002190:	d003      	beq.n	800219a <HAL_I2C_Master_Transmit+0x262>
 8002192:	e033      	b.n	80021fc <HAL_I2C_Master_Transmit+0x2c4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	0552      	lsls	r2, r2, #21
 8002198:	d4dd      	bmi.n	8002156 <HAL_I2C_Master_Transmit+0x21e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800219a:	695a      	ldr	r2, [r3, #20]
 800219c:	0711      	lsls	r1, r2, #28
 800219e:	d5f9      	bpl.n	8002194 <HAL_I2C_Master_Transmit+0x25c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021a0:	b2f6      	uxtb	r6, r6
 80021a2:	611e      	str	r6, [r3, #16]
 80021a4:	e724      	b.n	8001ff0 <HAL_I2C_Master_Transmit+0xb8>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a6:	6819      	ldr	r1, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80021a8:	2520      	movs	r5, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021aa:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80021ae:	6019      	str	r1, [r3, #0]
    return HAL_OK;
 80021b0:	4610      	mov	r0, r2
    hi2c->State = HAL_I2C_STATE_READY;
 80021b2:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80021b6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ba:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    return HAL_OK;
 80021be:	e6c9      	b.n	8001f54 <HAL_I2C_Master_Transmit+0x1c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021c0:	695a      	ldr	r2, [r3, #20]
 80021c2:	0792      	lsls	r2, r2, #30
 80021c4:	f53f af1f 	bmi.w	8002006 <HAL_I2C_Master_Transmit+0xce>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021c8:	695a      	ldr	r2, [r3, #20]
 80021ca:	0556      	lsls	r6, r2, #21
 80021cc:	d4c3      	bmi.n	8002156 <HAL_I2C_Master_Transmit+0x21e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ce:	f7ff f93b 	bl	8001448 <HAL_GetTick>
 80021d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80021d4:	1b40      	subs	r0, r0, r5
 80021d6:	4283      	cmp	r3, r0
 80021d8:	d329      	bcc.n	800222e <HAL_I2C_Master_Transmit+0x2f6>
 80021da:	b343      	cbz	r3, 800222e <HAL_I2C_Master_Transmit+0x2f6>
 80021dc:	6823      	ldr	r3, [r4, #0]
 80021de:	e707      	b.n	8001ff0 <HAL_I2C_Master_Transmit+0xb8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80021e0:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80021e2:	2320      	movs	r3, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80021e4:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ea:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80021f0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021f4:	f043 0320 	orr.w	r3, r3, #32
 80021f8:	6423      	str	r3, [r4, #64]	; 0x40
 80021fa:	e728      	b.n	800204e <HAL_I2C_Master_Transmit+0x116>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	0717      	lsls	r7, r2, #28
 8002200:	d4ce      	bmi.n	80021a0 <HAL_I2C_Master_Transmit+0x268>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	0550      	lsls	r0, r2, #21
 8002206:	d4a6      	bmi.n	8002156 <HAL_I2C_Master_Transmit+0x21e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002208:	f7ff f91e 	bl	8001448 <HAL_GetTick>
 800220c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800220e:	1b40      	subs	r0, r0, r5
 8002210:	4283      	cmp	r3, r0
 8002212:	d30c      	bcc.n	800222e <HAL_I2C_Master_Transmit+0x2f6>
 8002214:	b15b      	cbz	r3, 800222e <HAL_I2C_Master_Transmit+0x2f6>
 8002216:	6823      	ldr	r3, [r4, #0]
 8002218:	e7b8      	b.n	800218c <HAL_I2C_Master_Transmit+0x254>
 800221a:	bf00      	nop
 800221c:	ffff0000 	.word	0xffff0000
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002220:	6822      	ldr	r2, [r4, #0]
 8002222:	6813      	ldr	r3, [r2, #0]
 8002224:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002228:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 800222a:	2001      	movs	r0, #1
 800222c:	e692      	b.n	8001f54 <HAL_I2C_Master_Transmit+0x1c>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800222e:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002230:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002232:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002234:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002238:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800223c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800223e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002242:	f043 0320 	orr.w	r3, r3, #32
 8002246:	6423      	str	r3, [r4, #64]	; 0x40
 8002248:	e705      	b.n	8002056 <HAL_I2C_Master_Transmit+0x11e>
 800224a:	bf00      	nop

0800224c <HAL_I2C_Mem_Read>:
{
 800224c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002250:	4604      	mov	r4, r0
 8002252:	b087      	sub	sp, #28
 8002254:	4699      	mov	r9, r3
 8002256:	460f      	mov	r7, r1
 8002258:	4690      	mov	r8, r2
 800225a:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 800225e:	9e12      	ldr	r6, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8002260:	f7ff f8f2 	bl	8001448 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002264:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002268:	2b20      	cmp	r3, #32
 800226a:	d004      	beq.n	8002276 <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 800226c:	2702      	movs	r7, #2
}
 800226e:	4638      	mov	r0, r7
 8002270:	b007      	add	sp, #28
 8002272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002276:	4605      	mov	r5, r0
 8002278:	e004      	b.n	8002284 <HAL_I2C_Mem_Read+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800227a:	f7ff f8e5 	bl	8001448 <HAL_GetTick>
 800227e:	1b40      	subs	r0, r0, r5
 8002280:	2819      	cmp	r0, #25
 8002282:	d848      	bhi.n	8002316 <HAL_I2C_Mem_Read+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002284:	6822      	ldr	r2, [r4, #0]
 8002286:	6993      	ldr	r3, [r2, #24]
 8002288:	43db      	mvns	r3, r3
 800228a:	f013 0b02 	ands.w	fp, r3, #2
 800228e:	d0f4      	beq.n	800227a <HAL_I2C_Mem_Read+0x2e>
    __HAL_LOCK(hi2c);
 8002290:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002294:	2b01      	cmp	r3, #1
 8002296:	d0e9      	beq.n	800226c <HAL_I2C_Mem_Read+0x20>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002298:	6813      	ldr	r3, [r2, #0]
    __HAL_LOCK(hi2c);
 800229a:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800229c:	07db      	lsls	r3, r3, #31
    __HAL_LOCK(hi2c);
 800229e:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022a2:	d402      	bmi.n	80022aa <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80022a4:	6813      	ldr	r3, [r2, #0]
 80022a6:	430b      	orrs	r3, r1
 80022a8:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022aa:	6813      	ldr	r3, [r2, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022ac:	489a      	ldr	r0, [pc, #616]	; (8002518 <HAL_I2C_Mem_Read+0x2cc>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022b2:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022b4:	2322      	movs	r3, #34	; 0x22
 80022b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022ba:	2240      	movs	r2, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022bc:	2300      	movs	r3, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022be:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022c2:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80022c4:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022c8:	f8b4 e02a 	ldrh.w	lr, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80022cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80022ce:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022d0:	4639      	mov	r1, r7
 80022d2:	9501      	str	r5, [sp, #4]
 80022d4:	9600      	str	r6, [sp, #0]
 80022d6:	464b      	mov	r3, r9
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022d8:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022da:	4642      	mov	r2, r8
    hi2c->XferSize    = hi2c->XferCount;
 80022dc:	f8a4 e028 	strh.w	lr, [r4, #40]	; 0x28
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022e0:	4620      	mov	r0, r4
 80022e2:	f7ff fc2b 	bl	8001b3c <I2C_RequestMemoryRead>
 80022e6:	4607      	mov	r7, r0
 80022e8:	bb18      	cbnz	r0, 8002332 <HAL_I2C_Mem_Read+0xe6>
    if (hi2c->XferSize == 0U)
 80022ea:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ec:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 80022ee:	bb12      	cbnz	r2, 8002336 <HAL_I2C_Mem_Read+0xea>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f0:	9002      	str	r0, [sp, #8]
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	9202      	str	r2, [sp, #8]
 80022f6:	699a      	ldr	r2, [r3, #24]
 80022f8:	9202      	str	r2, [sp, #8]
 80022fa:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002302:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002304:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002306:	2220      	movs	r2, #32
 8002308:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800230c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002310:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8002314:	e7ab      	b.n	800226e <HAL_I2C_Mem_Read+0x22>
      hi2c->State               = HAL_I2C_STATE_READY;
 8002316:	2320      	movs	r3, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002318:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800231c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002320:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002324:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002326:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800232a:	f043 0320 	orr.w	r3, r3, #32
 800232e:	6423      	str	r3, [r4, #64]	; 0x40
 8002330:	e79c      	b.n	800226c <HAL_I2C_Mem_Read+0x20>
      return HAL_ERROR;
 8002332:	2701      	movs	r7, #1
 8002334:	e79b      	b.n	800226e <HAL_I2C_Mem_Read+0x22>
    else if (hi2c->XferSize == 1U)
 8002336:	2a01      	cmp	r2, #1
 8002338:	f000 80df 	beq.w	80024fa <HAL_I2C_Mem_Read+0x2ae>
    else if (hi2c->XferSize == 2U)
 800233c:	2a02      	cmp	r2, #2
 800233e:	f000 80ed 	beq.w	800251c <HAL_I2C_Mem_Read+0x2d0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002342:	9005      	str	r0, [sp, #20]
 8002344:	6959      	ldr	r1, [r3, #20]
 8002346:	9105      	str	r1, [sp, #20]
 8002348:	6999      	ldr	r1, [r3, #24]
 800234a:	9105      	str	r1, [sp, #20]
 800234c:	9905      	ldr	r1, [sp, #20]
      if (hi2c->XferSize <= 3U)
 800234e:	2a03      	cmp	r2, #3
 8002350:	d87f      	bhi.n	8002452 <HAL_I2C_Mem_Read+0x206>
        if (hi2c->XferSize == 1U)
 8002352:	2a01      	cmp	r2, #1
 8002354:	f000 80b2 	beq.w	80024bc <HAL_I2C_Mem_Read+0x270>
        else if (hi2c->XferSize == 2U)
 8002358:	2a02      	cmp	r2, #2
 800235a:	d04a      	beq.n	80023f2 <HAL_I2C_Mem_Read+0x1a6>
 800235c:	1c70      	adds	r0, r6, #1
 800235e:	d154      	bne.n	800240a <HAL_I2C_Mem_Read+0x1be>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002360:	695a      	ldr	r2, [r3, #20]
 8002362:	0751      	lsls	r1, r2, #29
 8002364:	d5fc      	bpl.n	8002360 <HAL_I2C_Mem_Read+0x114>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002366:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002368:	6a61      	ldr	r1, [r4, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800236a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800236e:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8002374:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8002376:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002378:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800237a:	3b01      	subs	r3, #1
 800237c:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 800237e:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8002380:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8002382:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8002384:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002386:	8522      	strh	r2, [r4, #40]	; 0x28
 8002388:	1c70      	adds	r0, r6, #1
 800238a:	6822      	ldr	r2, [r4, #0]
 800238c:	d148      	bne.n	8002420 <HAL_I2C_Mem_Read+0x1d4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800238e:	6953      	ldr	r3, [r2, #20]
 8002390:	0759      	lsls	r1, r3, #29
 8002392:	d5fc      	bpl.n	800238e <HAL_I2C_Mem_Read+0x142>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002394:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002396:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002398:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800239c:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800239e:	6913      	ldr	r3, [r2, #16]
 80023a0:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80023a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80023a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80023a6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023a8:	6822      	ldr	r2, [r4, #0]
          hi2c->XferCount--;
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023b0:	6912      	ldr	r2, [r2, #16]
          hi2c->pBuffPtr++;
 80023b2:	f100 0e01 	add.w	lr, r0, #1
          hi2c->XferSize--;
 80023b6:	1e4b      	subs	r3, r1, #1
          hi2c->pBuffPtr++;
 80023b8:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80023bc:	8523      	strh	r3, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023be:	7042      	strb	r2, [r0, #1]
          hi2c->XferSize--;
 80023c0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80023c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80023c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80023c6:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80023c8:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 80023ca:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 80023cc:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80023ce:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80023d0:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80023d2:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80023d4:	6261      	str	r1, [r4, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 80023d6:	2a00      	cmp	r2, #0
 80023d8:	d094      	beq.n	8002304 <HAL_I2C_Mem_Read+0xb8>
 80023da:	6823      	ldr	r3, [r4, #0]
 80023dc:	e7b7      	b.n	800234e <HAL_I2C_Mem_Read+0x102>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023de:	695a      	ldr	r2, [r3, #20]
 80023e0:	0752      	lsls	r2, r2, #29
 80023e2:	d40b      	bmi.n	80023fc <HAL_I2C_Mem_Read+0x1b0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e4:	f7ff f830 	bl	8001448 <HAL_GetTick>
 80023e8:	1b40      	subs	r0, r0, r5
 80023ea:	4286      	cmp	r6, r0
 80023ec:	d322      	bcc.n	8002434 <HAL_I2C_Mem_Read+0x1e8>
 80023ee:	b30e      	cbz	r6, 8002434 <HAL_I2C_Mem_Read+0x1e8>
 80023f0:	6823      	ldr	r3, [r4, #0]
 80023f2:	1c70      	adds	r0, r6, #1
 80023f4:	d1f3      	bne.n	80023de <HAL_I2C_Mem_Read+0x192>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023f6:	695a      	ldr	r2, [r3, #20]
 80023f8:	0751      	lsls	r1, r2, #29
 80023fa:	d5fc      	bpl.n	80023f6 <HAL_I2C_Mem_Read+0x1aa>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023fc:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002404:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	e7ca      	b.n	80023a0 <HAL_I2C_Mem_Read+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800240a:	695a      	ldr	r2, [r3, #20]
 800240c:	0752      	lsls	r2, r2, #29
 800240e:	d4aa      	bmi.n	8002366 <HAL_I2C_Mem_Read+0x11a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002410:	f7ff f81a 	bl	8001448 <HAL_GetTick>
 8002414:	1b40      	subs	r0, r0, r5
 8002416:	4286      	cmp	r6, r0
 8002418:	d30c      	bcc.n	8002434 <HAL_I2C_Mem_Read+0x1e8>
 800241a:	b15e      	cbz	r6, 8002434 <HAL_I2C_Mem_Read+0x1e8>
 800241c:	6823      	ldr	r3, [r4, #0]
 800241e:	e79d      	b.n	800235c <HAL_I2C_Mem_Read+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002420:	6953      	ldr	r3, [r2, #20]
 8002422:	075b      	lsls	r3, r3, #29
 8002424:	d4b6      	bmi.n	8002394 <HAL_I2C_Mem_Read+0x148>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002426:	f7ff f80f 	bl	8001448 <HAL_GetTick>
 800242a:	1b40      	subs	r0, r0, r5
 800242c:	4286      	cmp	r6, r0
 800242e:	d301      	bcc.n	8002434 <HAL_I2C_Mem_Read+0x1e8>
 8002430:	2e00      	cmp	r6, #0
 8002432:	d1a9      	bne.n	8002388 <HAL_I2C_Mem_Read+0x13c>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002434:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8002436:	2320      	movs	r3, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002438:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800243a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800243e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002442:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002444:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002448:	f043 0320 	orr.w	r3, r3, #32
 800244c:	6423      	str	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 800244e:	2701      	movs	r7, #1
 8002450:	e70d      	b.n	800226e <HAL_I2C_Mem_Read+0x22>
 8002452:	b94e      	cbnz	r6, 8002468 <HAL_I2C_Mem_Read+0x21c>
 8002454:	e044      	b.n	80024e0 <HAL_I2C_Mem_Read+0x294>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002456:	695a      	ldr	r2, [r3, #20]
 8002458:	06d2      	lsls	r2, r2, #27
 800245a:	d41f      	bmi.n	800249c <HAL_I2C_Mem_Read+0x250>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800245c:	f7fe fff4 	bl	8001448 <HAL_GetTick>
 8002460:	1b40      	subs	r0, r0, r5
 8002462:	4286      	cmp	r6, r0
 8002464:	d3e6      	bcc.n	8002434 <HAL_I2C_Mem_Read+0x1e8>
 8002466:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002468:	695a      	ldr	r2, [r3, #20]
 800246a:	0651      	lsls	r1, r2, #25
 800246c:	d5f3      	bpl.n	8002456 <HAL_I2C_Mem_Read+0x20a>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800246e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 8002474:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002476:	6823      	ldr	r3, [r4, #0]
        hi2c->XferSize--;
 8002478:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 800247a:	6a60      	ldr	r0, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800247c:	3901      	subs	r1, #1
 800247e:	b289      	uxth	r1, r1
 8002480:	8561      	strh	r1, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002482:	6959      	ldr	r1, [r3, #20]
        hi2c->XferSize--;
 8002484:	3a01      	subs	r2, #1
 8002486:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8002488:	f100 0e01 	add.w	lr, r0, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800248c:	0749      	lsls	r1, r1, #29
        hi2c->XferSize--;
 800248e:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8002490:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002494:	d59f      	bpl.n	80023d6 <HAL_I2C_Mem_Read+0x18a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	7043      	strb	r3, [r0, #1]
 800249a:	e791      	b.n	80023c0 <HAL_I2C_Mem_Read+0x174>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800249c:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800249e:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 80024a2:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024a4:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80024a6:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024a8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ac:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80024b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80024b2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80024b6:	6423      	str	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 80024b8:	2701      	movs	r7, #1
 80024ba:	e6d8      	b.n	800226e <HAL_I2C_Mem_Read+0x22>
 80024bc:	b94e      	cbnz	r6, 80024d2 <HAL_I2C_Mem_Read+0x286>
 80024be:	e018      	b.n	80024f2 <HAL_I2C_Mem_Read+0x2a6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80024c0:	695a      	ldr	r2, [r3, #20]
 80024c2:	06d1      	lsls	r1, r2, #27
 80024c4:	d4ea      	bmi.n	800249c <HAL_I2C_Mem_Read+0x250>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024c6:	f7fe ffbf 	bl	8001448 <HAL_GetTick>
 80024ca:	1b40      	subs	r0, r0, r5
 80024cc:	4286      	cmp	r6, r0
 80024ce:	d3b1      	bcc.n	8002434 <HAL_I2C_Mem_Read+0x1e8>
 80024d0:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024d2:	695a      	ldr	r2, [r3, #20]
 80024d4:	0650      	lsls	r0, r2, #25
 80024d6:	d5f3      	bpl.n	80024c0 <HAL_I2C_Mem_Read+0x274>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	7013      	strb	r3, [r2, #0]
 80024de:	e76f      	b.n	80023c0 <HAL_I2C_Mem_Read+0x174>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024e0:	695a      	ldr	r2, [r3, #20]
 80024e2:	0650      	lsls	r0, r2, #25
 80024e4:	d4c3      	bmi.n	800246e <HAL_I2C_Mem_Read+0x222>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80024e6:	695a      	ldr	r2, [r3, #20]
 80024e8:	06d0      	lsls	r0, r2, #27
 80024ea:	d4d7      	bmi.n	800249c <HAL_I2C_Mem_Read+0x250>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ec:	f7fe ffac 	bl	8001448 <HAL_GetTick>
 80024f0:	e7a0      	b.n	8002434 <HAL_I2C_Mem_Read+0x1e8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024f2:	695a      	ldr	r2, [r3, #20]
 80024f4:	0652      	lsls	r2, r2, #25
 80024f6:	d5f6      	bpl.n	80024e6 <HAL_I2C_Mem_Read+0x29a>
 80024f8:	e7ee      	b.n	80024d8 <HAL_I2C_Mem_Read+0x28c>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024fa:	6819      	ldr	r1, [r3, #0]
 80024fc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002500:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002502:	9003      	str	r0, [sp, #12]
 8002504:	6959      	ldr	r1, [r3, #20]
 8002506:	9103      	str	r1, [sp, #12]
 8002508:	6999      	ldr	r1, [r3, #24]
 800250a:	9103      	str	r1, [sp, #12]
 800250c:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800250e:	6819      	ldr	r1, [r3, #0]
 8002510:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8002514:	6019      	str	r1, [r3, #0]
 8002516:	e71a      	b.n	800234e <HAL_I2C_Mem_Read+0x102>
 8002518:	ffff0000 	.word	0xffff0000
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800251c:	6819      	ldr	r1, [r3, #0]
 800251e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002522:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002524:	6819      	ldr	r1, [r3, #0]
 8002526:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800252a:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800252c:	9004      	str	r0, [sp, #16]
 800252e:	6959      	ldr	r1, [r3, #20]
 8002530:	9104      	str	r1, [sp, #16]
 8002532:	6999      	ldr	r1, [r3, #24]
 8002534:	9104      	str	r1, [sp, #16]
 8002536:	9904      	ldr	r1, [sp, #16]
 8002538:	e709      	b.n	800234e <HAL_I2C_Mem_Read+0x102>
 800253a:	bf00      	nop

0800253c <HAL_I2C_MasterTxCpltCallback>:
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop

08002540 <HAL_I2C_MasterRxCpltCallback>:
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop

08002544 <HAL_I2C_SlaveTxCpltCallback>:
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop

08002548 <HAL_I2C_SlaveRxCpltCallback>:
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop

0800254c <HAL_I2C_AddrCallback>:
{
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop

08002550 <HAL_I2C_ListenCpltCallback>:
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop

08002554 <HAL_I2C_MemTxCpltCallback>:
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop

08002558 <HAL_I2C_MemRxCpltCallback>:
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop

0800255c <HAL_I2C_ErrorCallback>:
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop

08002560 <HAL_I2C_AbortCpltCallback>:
{
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop

08002564 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002564:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
 8002566:	b570      	push	{r4, r5, r6, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002568:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
  if (hi2c->hdmatx != NULL)
 800256c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 800256e:	6b98      	ldr	r0, [r3, #56]	; 0x38
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002570:	b2ce      	uxtb	r6, r1
  if (hi2c->hdmatx != NULL)
 8002572:	2c00      	cmp	r4, #0
 8002574:	d033      	beq.n	80025de <I2C_DMAAbort+0x7a>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002576:	2100      	movs	r1, #0
 8002578:	63e1      	str	r1, [r4, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 800257a:	2800      	cmp	r0, #0
 800257c:	d038      	beq.n	80025f0 <I2C_DMAAbort+0x8c>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800257e:	681a      	ldr	r2, [r3, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002580:	63c1      	str	r1, [r0, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002582:	6815      	ldr	r5, [r2, #0]
 8002584:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8002588:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 800258a:	8559      	strh	r1, [r3, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 800258c:	6521      	str	r1, [r4, #80]	; 0x50
    hi2c->hdmarx->XferAbortCallback = NULL;
 800258e:	2100      	movs	r1, #0
 8002590:	6501      	str	r1, [r0, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 8002592:	6811      	ldr	r1, [r2, #0]
 8002594:	f021 0101 	bic.w	r1, r1, #1
 8002598:	6011      	str	r1, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800259a:	f893 003d 	ldrb.w	r0, [r3, #61]	; 0x3d
 800259e:	2860      	cmp	r0, #96	; 0x60
 80025a0:	d02e      	beq.n	8002600 <I2C_DMAAbort+0x9c>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80025a2:	f006 0128 	and.w	r1, r6, #40	; 0x28
 80025a6:	2928      	cmp	r1, #40	; 0x28
 80025a8:	d009      	beq.n	80025be <I2C_DMAAbort+0x5a>
      hi2c->State = HAL_I2C_STATE_READY;
 80025aa:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ac:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 80025ae:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 80025b2:	4618      	mov	r0, r3
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80025b8:	f7ff ffd0 	bl	800255c <HAL_I2C_ErrorCallback>
}
 80025bc:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_ENABLE(hi2c);
 80025be:	6810      	ldr	r0, [r2, #0]
 80025c0:	f040 0001 	orr.w	r0, r0, #1
 80025c4:	6010      	str	r0, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025c6:	6810      	ldr	r0, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80025c8:	2400      	movs	r4, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ca:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 80025ce:	6010      	str	r0, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80025d0:	631c      	str	r4, [r3, #48]	; 0x30
    HAL_I2C_ErrorCallback(hi2c);
 80025d2:	4618      	mov	r0, r3
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80025d4:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 80025d8:	f7ff ffc0 	bl	800255c <HAL_I2C_ErrorCallback>
}
 80025dc:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->hdmarx != NULL)
 80025de:	b1d0      	cbz	r0, 8002616 <I2C_DMAAbort+0xb2>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025e0:	681a      	ldr	r2, [r3, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 80025e2:	63c4      	str	r4, [r0, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025e4:	6811      	ldr	r1, [r2, #0]
 80025e6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80025ea:	6011      	str	r1, [r2, #0]
  hi2c->XferCount = 0U;
 80025ec:	855c      	strh	r4, [r3, #42]	; 0x2a
 80025ee:	e7ce      	b.n	800258e <I2C_DMAAbort+0x2a>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	6811      	ldr	r1, [r2, #0]
 80025f4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80025f8:	6011      	str	r1, [r2, #0]
  hi2c->XferCount = 0U;
 80025fa:	8558      	strh	r0, [r3, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 80025fc:	6520      	str	r0, [r4, #80]	; 0x50
 80025fe:	e7c8      	b.n	8002592 <I2C_DMAAbort+0x2e>
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002600:	2200      	movs	r2, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8002602:	2120      	movs	r1, #32
 8002604:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    HAL_I2C_AbortCpltCallback(hi2c);
 8002608:	4618      	mov	r0, r3
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800260a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800260e:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8002610:	f7ff ffa6 	bl	8002560 <HAL_I2C_AbortCpltCallback>
 8002614:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	6811      	ldr	r1, [r2, #0]
 800261a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800261e:	6011      	str	r1, [r2, #0]
  hi2c->XferCount = 0U;
 8002620:	8558      	strh	r0, [r3, #42]	; 0x2a
 8002622:	e7b6      	b.n	8002592 <I2C_DMAAbort+0x2e>

08002624 <HAL_I2C_EV_IRQHandler>:
{
 8002624:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002626:	6803      	ldr	r3, [r0, #0]
{
 8002628:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800262a:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800262c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800262e:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002632:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002636:	b2d2      	uxtb	r2, r2
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002638:	2a10      	cmp	r2, #16
{
 800263a:	b08c      	sub	sp, #48	; 0x30
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800263c:	d037      	beq.n	80026ae <HAL_I2C_EV_IRQHandler+0x8a>
 800263e:	2a40      	cmp	r2, #64	; 0x40
 8002640:	d035      	beq.n	80026ae <HAL_I2C_EV_IRQHandler+0x8a>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002642:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002644:	b2c9      	uxtb	r1, r1
 8002646:	b9c2      	cbnz	r2, 800267a <HAL_I2C_EV_IRQHandler+0x56>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002648:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800264a:	695a      	ldr	r2, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800264c:	f012 0602 	ands.w	r6, r2, #2
 8002650:	d019      	beq.n	8002686 <HAL_I2C_EV_IRQHandler+0x62>
 8002652:	0586      	lsls	r6, r0, #22
 8002654:	d519      	bpl.n	800268a <HAL_I2C_EV_IRQHandler+0x66>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002656:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002658:	b102      	cbz	r2, 800265c <HAL_I2C_EV_IRQHandler+0x38>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800265a:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800265c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002660:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8002664:	2a28      	cmp	r2, #40	; 0x28
 8002666:	f000 81b6 	beq.w	80029d6 <HAL_I2C_EV_IRQHandler+0x3b2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800266a:	f06f 0102 	mvn.w	r1, #2
    __HAL_UNLOCK(hi2c);
 800266e:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002670:	6159      	str	r1, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8002672:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8002676:	b00c      	add	sp, #48	; 0x30
 8002678:	bd70      	pop	{r4, r5, r6, pc}
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800267a:	695a      	ldr	r2, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800267c:	f012 0602 	ands.w	r6, r2, #2
  uint32_t sr2itflags               = 0U;
 8002680:	f04f 0500 	mov.w	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002684:	d1e5      	bne.n	8002652 <HAL_I2C_EV_IRQHandler+0x2e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002686:	06d5      	lsls	r5, r2, #27
 8002688:	d468      	bmi.n	800275c <HAL_I2C_EV_IRQHandler+0x138>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800268a:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 800268e:	2921      	cmp	r1, #33	; 0x21
 8002690:	f000 812d 	beq.w	80028ee <HAL_I2C_EV_IRQHandler+0x2ca>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002694:	0656      	lsls	r6, r2, #25
 8002696:	f100 80f8 	bmi.w	800288a <HAL_I2C_EV_IRQHandler+0x266>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800269a:	0752      	lsls	r2, r2, #29
 800269c:	d5eb      	bpl.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
 800269e:	0586      	lsls	r6, r0, #22
 80026a0:	d5e9      	bpl.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
  if (hi2c->XferCount != 0U)
 80026a2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80026a4:	b292      	uxth	r2, r2
 80026a6:	2a00      	cmp	r2, #0
 80026a8:	f040 817e 	bne.w	80029a8 <HAL_I2C_EV_IRQHandler+0x384>
 80026ac:	e7e3      	b.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80026ae:	6999      	ldr	r1, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80026b0:	695a      	ldr	r2, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80026b2:	07d6      	lsls	r6, r2, #31
 80026b4:	d42b      	bmi.n	800270e <HAL_I2C_EV_IRQHandler+0xea>
 80026b6:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 80026ba:	d0dc      	beq.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
 80026bc:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 80026c0:	d0d9      	beq.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026c2:	0716      	lsls	r6, r2, #28
 80026c4:	f140 80c9 	bpl.w	800285a <HAL_I2C_EV_IRQHandler+0x236>
 80026c8:	0585      	lsls	r5, r0, #22
 80026ca:	f100 8198 	bmi.w	80029fe <HAL_I2C_EV_IRQHandler+0x3da>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80026ce:	f011 0f04 	tst.w	r1, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80026d2:	6859      	ldr	r1, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80026d4:	f000 814b 	beq.w	800296e <HAL_I2C_EV_IRQHandler+0x34a>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80026d8:	0509      	lsls	r1, r1, #20
 80026da:	d4cc      	bmi.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026dc:	0616      	lsls	r6, r2, #24
 80026de:	f140 8102 	bpl.w	80028e6 <HAL_I2C_EV_IRQHandler+0x2c2>
 80026e2:	0545      	lsls	r5, r0, #21
 80026e4:	f140 80ff 	bpl.w	80028e6 <HAL_I2C_EV_IRQHandler+0x2c2>
 80026e8:	0751      	lsls	r1, r2, #29
 80026ea:	f140 8290 	bpl.w	8002c0e <HAL_I2C_EV_IRQHandler+0x5ea>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026ee:	0586      	lsls	r6, r0, #22
 80026f0:	d5c1      	bpl.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026f2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80026f4:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80026f8:	2a21      	cmp	r2, #33	; 0x21
 80026fa:	f000 82a7 	beq.w	8002c4c <HAL_I2C_EV_IRQHandler+0x628>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026fe:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002702:	2b40      	cmp	r3, #64	; 0x40
 8002704:	d1b7      	bne.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002706:	4620      	mov	r0, r4
 8002708:	f7ff f9dc 	bl	8001ac4 <I2C_MemoryTransmit_TXE_BTF>
 800270c:	e7b3      	b.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800270e:	0585      	lsls	r5, r0, #22
 8002710:	f140 80a0 	bpl.w	8002854 <HAL_I2C_EV_IRQHandler+0x230>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002714:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002716:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 800271a:	f000 8180 	beq.w	8002a1e <HAL_I2C_EV_IRQHandler+0x3fa>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800271e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002720:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002724:	bf04      	itt	eq
 8002726:	2208      	moveq	r2, #8
 8002728:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800272a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800272e:	2a40      	cmp	r2, #64	; 0x40
 8002730:	f000 8178 	beq.w	8002a24 <HAL_I2C_EV_IRQHandler+0x400>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002734:	6922      	ldr	r2, [r4, #16]
 8002736:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800273a:	f000 817d 	beq.w	8002a38 <HAL_I2C_EV_IRQHandler+0x414>
      if (hi2c->EventCount == 0U)
 800273e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002740:	2a00      	cmp	r2, #0
 8002742:	f000 8140 	beq.w	80029c6 <HAL_I2C_EV_IRQHandler+0x3a2>
      else if (hi2c->EventCount == 1U)
 8002746:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002748:	2a01      	cmp	r2, #1
 800274a:	d194      	bne.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800274c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800274e:	11d2      	asrs	r2, r2, #7
 8002750:	f002 0206 	and.w	r2, r2, #6
 8002754:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8002758:	611a      	str	r2, [r3, #16]
 800275a:	e78c      	b.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800275c:	0585      	lsls	r5, r0, #22
 800275e:	d594      	bpl.n	800268a <HAL_I2C_EV_IRQHandler+0x66>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002760:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800276a:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800276c:	960b      	str	r6, [sp, #44]	; 0x2c
 800276e:	695a      	ldr	r2, [r3, #20]
 8002770:	920b      	str	r2, [sp, #44]	; 0x2c
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	f042 0201 	orr.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002782:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	0510      	lsls	r0, r2, #20
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002788:	b2ed      	uxtb	r5, r5
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800278a:	d520      	bpl.n	80027ce <HAL_I2C_EV_IRQHandler+0x1aa>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800278c:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8002790:	2a22      	cmp	r2, #34	; 0x22
 8002792:	f000 816f 	beq.w	8002a74 <HAL_I2C_EV_IRQHandler+0x450>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002796:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002798:	6802      	ldr	r2, [r0, #0]
 800279a:	6852      	ldr	r2, [r2, #4]
 800279c:	b292      	uxth	r2, r2
 800279e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80027a0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80027a2:	b292      	uxth	r2, r2
 80027a4:	b11a      	cbz	r2, 80027ae <HAL_I2C_EV_IRQHandler+0x18a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80027a8:	f042 0204 	orr.w	r2, r2, #4
 80027ac:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027b4:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80027b6:	f7ff f867 	bl	8001888 <HAL_DMA_GetState>
 80027ba:	2801      	cmp	r0, #1
 80027bc:	d007      	beq.n	80027ce <HAL_I2C_EV_IRQHandler+0x1aa>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80027be:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80027c0:	4b9c      	ldr	r3, [pc, #624]	; (8002a34 <HAL_I2C_EV_IRQHandler+0x410>)
 80027c2:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80027c4:	f7ff f84e 	bl	8001864 <HAL_DMA_Abort_IT>
 80027c8:	2800      	cmp	r0, #0
 80027ca:	f040 82f9 	bne.w	8002dc0 <HAL_I2C_EV_IRQHandler+0x79c>
  if (hi2c->XferCount != 0U)
 80027ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	b313      	cbz	r3, 800281a <HAL_I2C_EV_IRQHandler+0x1f6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027d4:	6823      	ldr	r3, [r4, #0]
 80027d6:	695a      	ldr	r2, [r3, #20]
 80027d8:	0751      	lsls	r1, r2, #29
 80027da:	d50a      	bpl.n	80027f2 <HAL_I2C_EV_IRQHandler+0x1ce>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80027e2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80027e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80027e6:	6823      	ldr	r3, [r4, #0]
      hi2c->XferCount--;
 80027e8:	3a01      	subs	r2, #1
 80027ea:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 80027ec:	3101      	adds	r1, #1
      hi2c->XferCount--;
 80027ee:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80027f0:	6261      	str	r1, [r4, #36]	; 0x24
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80027f2:	695a      	ldr	r2, [r3, #20]
 80027f4:	0652      	lsls	r2, r2, #25
 80027f6:	d509      	bpl.n	800280c <HAL_I2C_EV_IRQHandler+0x1e8>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80027fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002800:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002802:	3b01      	subs	r3, #1
 8002804:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8002806:	3201      	adds	r2, #1
      hi2c->XferCount--;
 8002808:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800280a:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount != 0U)
 800280c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800280e:	b29b      	uxth	r3, r3
 8002810:	b11b      	cbz	r3, 800281a <HAL_I2C_EV_IRQHandler+0x1f6>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002812:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002814:	f043 0304 	orr.w	r3, r3, #4
 8002818:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800281a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800281c:	2b00      	cmp	r3, #0
 800281e:	f040 8168 	bne.w	8002af2 <HAL_I2C_EV_IRQHandler+0x4ce>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002822:	2d2a      	cmp	r5, #42	; 0x2a
 8002824:	f000 81ba 	beq.w	8002b9c <HAL_I2C_EV_IRQHandler+0x578>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002828:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800282c:	2b28      	cmp	r3, #40	; 0x28
 800282e:	f000 81a1 	beq.w	8002b74 <HAL_I2C_EV_IRQHandler+0x550>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002832:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002834:	2b22      	cmp	r3, #34	; 0x22
 8002836:	d002      	beq.n	800283e <HAL_I2C_EV_IRQHandler+0x21a>
 8002838:	2d22      	cmp	r5, #34	; 0x22
 800283a:	f47f af1c 	bne.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
        hi2c->PreviousState = I2C_STATE_NONE;
 800283e:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002840:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002842:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002844:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8002846:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800284a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800284e:	f7ff fe7b 	bl	8002548 <HAL_I2C_SlaveRxCpltCallback>
 8002852:	e710      	b.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002854:	0715      	lsls	r5, r2, #28
 8002856:	f53f af3a 	bmi.w	80026ce <HAL_I2C_EV_IRQHandler+0xaa>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800285a:	0796      	lsls	r6, r2, #30
 800285c:	f57f af37 	bpl.w	80026ce <HAL_I2C_EV_IRQHandler+0xaa>
 8002860:	0585      	lsls	r5, r0, #22
 8002862:	f57f af34 	bpl.w	80026ce <HAL_I2C_EV_IRQHandler+0xaa>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002866:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800286a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 800286c:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800286e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8002872:	2922      	cmp	r1, #34	; 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002874:	b2d2      	uxtb	r2, r2
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002876:	f000 811e 	beq.w	8002ab6 <HAL_I2C_EV_IRQHandler+0x492>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800287a:	2200      	movs	r2, #0
 800287c:	920a      	str	r2, [sp, #40]	; 0x28
 800287e:	695a      	ldr	r2, [r3, #20]
 8002880:	920a      	str	r2, [sp, #40]	; 0x28
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	930a      	str	r3, [sp, #40]	; 0x28
 8002886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002888:	e6f5      	b.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800288a:	0545      	lsls	r5, r0, #21
 800288c:	f57f af05 	bpl.w	800269a <HAL_I2C_EV_IRQHandler+0x76>
 8002890:	0751      	lsls	r1, r2, #29
 8002892:	f53f af04 	bmi.w	800269e <HAL_I2C_EV_IRQHandler+0x7a>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002896:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 800289a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800289c:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800289e:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 80028a0:	2a00      	cmp	r2, #0
 80028a2:	f43f aee8 	beq.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 80028ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80028ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80028b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80028b8:	3201      	adds	r2, #1
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80028ba:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 80028bc:	6262      	str	r2, [r4, #36]	; 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f47f aed9 	bne.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
 80028c4:	292a      	cmp	r1, #42	; 0x2a
 80028c6:	f47f aed6 	bne.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028ca:	6822      	ldr	r2, [r4, #0]
 80028cc:	6853      	ldr	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80028ce:	2522      	movs	r5, #34	; 0x22
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80028d4:	2128      	movs	r1, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028d6:	6053      	str	r3, [r2, #4]
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80028d8:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80028da:	6325      	str	r5, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80028dc:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80028e0:	f7ff fe32 	bl	8002548 <HAL_I2C_SlaveRxCpltCallback>
 80028e4:	e6c7      	b.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028e6:	0752      	lsls	r2, r2, #29
 80028e8:	f57f aec5 	bpl.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
 80028ec:	e6ff      	b.n	80026ee <HAL_I2C_EV_IRQHandler+0xca>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028ee:	0615      	lsls	r5, r2, #24
 80028f0:	d528      	bpl.n	8002944 <HAL_I2C_EV_IRQHandler+0x320>
 80028f2:	0546      	lsls	r6, r0, #21
 80028f4:	d526      	bpl.n	8002944 <HAL_I2C_EV_IRQHandler+0x320>
 80028f6:	0755      	lsls	r5, r2, #29
 80028f8:	d427      	bmi.n	800294a <HAL_I2C_EV_IRQHandler+0x326>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028fa:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 80028fe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002900:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002902:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8002904:	2a00      	cmp	r2, #0
 8002906:	f43f aeb6 	beq.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800290a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800290c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002910:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 8002912:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8002914:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002916:	3a01      	subs	r2, #1
 8002918:	b292      	uxth	r2, r2
 800291a:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800291c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800291e:	b292      	uxth	r2, r2
 8002920:	2a00      	cmp	r2, #0
 8002922:	f47f aea8 	bne.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
 8002926:	2829      	cmp	r0, #41	; 0x29
 8002928:	f47f aea5 	bne.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800292c:	685a      	ldr	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800292e:	2528      	movs	r5, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002934:	605a      	str	r2, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002936:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002938:	6321      	str	r1, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800293a:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800293e:	f7ff fe01 	bl	8002544 <HAL_I2C_SlaveTxCpltCallback>
 8002942:	e698      	b.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002944:	0751      	lsls	r1, r2, #29
 8002946:	f57f ae96 	bpl.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
 800294a:	0582      	lsls	r2, r0, #22
 800294c:	f57f ae93 	bpl.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
  if (hi2c->XferCount != 0U)
 8002950:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002952:	b292      	uxth	r2, r2
 8002954:	2a00      	cmp	r2, #0
 8002956:	f43f ae8e 	beq.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800295a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800295c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002960:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 8002962:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8002964:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002966:	3b01      	subs	r3, #1
 8002968:	b29b      	uxth	r3, r3
 800296a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800296c:	e683      	b.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800296e:	050d      	lsls	r5, r1, #20
 8002970:	f53f ae81 	bmi.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002974:	0651      	lsls	r1, r2, #25
 8002976:	d522      	bpl.n	80029be <HAL_I2C_EV_IRQHandler+0x39a>
 8002978:	0546      	lsls	r6, r0, #21
 800297a:	d520      	bpl.n	80029be <HAL_I2C_EV_IRQHandler+0x39a>
 800297c:	0755      	lsls	r5, r2, #29
 800297e:	f140 8127 	bpl.w	8002bd0 <HAL_I2C_EV_IRQHandler+0x5ac>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002982:	0582      	lsls	r2, r0, #22
 8002984:	f57f ae77 	bpl.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002988:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 800298a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800298c:	b292      	uxth	r2, r2
 800298e:	2a04      	cmp	r2, #4
 8002990:	f000 81b8 	beq.w	8002d04 <HAL_I2C_EV_IRQHandler+0x6e0>
  else if (hi2c->XferCount == 3U)
 8002994:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002996:	b292      	uxth	r2, r2
 8002998:	2a03      	cmp	r2, #3
 800299a:	f000 81a4 	beq.w	8002ce6 <HAL_I2C_EV_IRQHandler+0x6c2>
  else if (hi2c->XferCount == 2U)
 800299e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80029a0:	b292      	uxth	r2, r2
 80029a2:	2a02      	cmp	r2, #2
 80029a4:	f000 81d0 	beq.w	8002d48 <HAL_I2C_EV_IRQHandler+0x724>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 80029ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80029b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 80029b6:	3201      	adds	r2, #1
    hi2c->XferCount--;
 80029b8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80029ba:	6262      	str	r2, [r4, #36]	; 0x24
 80029bc:	e65b      	b.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029be:	0751      	lsls	r1, r2, #29
 80029c0:	f57f ae59 	bpl.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
 80029c4:	e7dd      	b.n	8002982 <HAL_I2C_EV_IRQHandler+0x35e>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80029c6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80029c8:	11d2      	asrs	r2, r2, #7
 80029ca:	f002 0206 	and.w	r2, r2, #6
 80029ce:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 80029d2:	611a      	str	r2, [r3, #16]
 80029d4:	e64f      	b.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029dc:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80029de:	062e      	lsls	r6, r5, #24
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80029e0:	f085 0104 	eor.w	r1, r5, #4
    __HAL_UNLOCK(hi2c);
 80029e4:	f04f 0300 	mov.w	r3, #0
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80029e8:	f3c1 0180 	ubfx	r1, r1, #2, #1
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80029ec:	bf54      	ite	pl
 80029ee:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80029f0:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 80029f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80029f6:	4620      	mov	r0, r4
 80029f8:	f7ff fda8 	bl	800254c <HAL_I2C_AddrCallback>
 80029fc:	e63b      	b.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80029fe:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002a00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a02:	b2d2      	uxtb	r2, r2
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002a04:	611a      	str	r2, [r3, #16]
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002a06:	2900      	cmp	r1, #0
 8002a08:	f000 80c1 	beq.w	8002b8e <HAL_I2C_EV_IRQHandler+0x56a>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002a0c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8002a0e:	2a00      	cmp	r2, #0
 8002a10:	f000 80c2 	beq.w	8002b98 <HAL_I2C_EV_IRQHandler+0x574>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a1a:	605a      	str	r2, [r3, #4]
 8002a1c:	e62b      	b.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002a1e:	2201      	movs	r2, #1
 8002a20:	62e2      	str	r2, [r4, #44]	; 0x2c
 8002a22:	e682      	b.n	800272a <HAL_I2C_EV_IRQHandler+0x106>
    if (hi2c->EventCount == 0U)
 8002a24:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002a26:	b9fa      	cbnz	r2, 8002a68 <HAL_I2C_EV_IRQHandler+0x444>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002a28:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002a2a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a2e:	611a      	str	r2, [r3, #16]
 8002a30:	e621      	b.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
 8002a32:	bf00      	nop
 8002a34:	08002565 	.word	0x08002565
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a38:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002a3c:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002a3e:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002a40:	bf16      	itet	ne
 8002a42:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002a46:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002a4a:	b2d2      	uxtbne	r2, r2
 8002a4c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002a4e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002a50:	b112      	cbz	r2, 8002a58 <HAL_I2C_EV_IRQHandler+0x434>
 8002a52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a54:	2a00      	cmp	r2, #0
 8002a56:	d1dd      	bne.n	8002a14 <HAL_I2C_EV_IRQHandler+0x3f0>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002a58:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002a5a:	2a00      	cmp	r2, #0
 8002a5c:	f43f ae0b 	beq.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002a60:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a62:	2a00      	cmp	r2, #0
 8002a64:	d1d6      	bne.n	8002a14 <HAL_I2C_EV_IRQHandler+0x3f0>
 8002a66:	e606      	b.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002a68:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002a6a:	f042 0201 	orr.w	r2, r2, #1
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	611a      	str	r2, [r3, #16]
 8002a72:	e600      	b.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002a74:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002a76:	6802      	ldr	r2, [r0, #0]
 8002a78:	6852      	ldr	r2, [r2, #4]
 8002a7a:	b292      	uxth	r2, r2
 8002a7c:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8002a7e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002a80:	b292      	uxth	r2, r2
 8002a82:	b11a      	cbz	r2, 8002a8c <HAL_I2C_EV_IRQHandler+0x468>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a84:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002a86:	f042 0204 	orr.w	r2, r2, #4
 8002a8a:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a92:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a94:	f7fe fef8 	bl	8001888 <HAL_DMA_GetState>
 8002a98:	2801      	cmp	r0, #1
 8002a9a:	f43f ae98 	beq.w	80027ce <HAL_I2C_EV_IRQHandler+0x1aa>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002a9e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002aa0:	4ba6      	ldr	r3, [pc, #664]	; (8002d3c <HAL_I2C_EV_IRQHandler+0x718>)
 8002aa2:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002aa4:	f7fe fede 	bl	8001864 <HAL_DMA_Abort_IT>
 8002aa8:	2800      	cmp	r0, #0
 8002aaa:	f43f ae90 	beq.w	80027ce <HAL_I2C_EV_IRQHandler+0x1aa>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002aae:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002ab0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002ab2:	4798      	blx	r3
 8002ab4:	e68b      	b.n	80027ce <HAL_I2C_EV_IRQHandler+0x1aa>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002ab6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002ab8:	b911      	cbnz	r1, 8002ac0 <HAL_I2C_EV_IRQHandler+0x49c>
 8002aba:	2a40      	cmp	r2, #64	; 0x40
 8002abc:	f000 820e 	beq.w	8002edc <HAL_I2C_EV_IRQHandler+0x8b8>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002ac0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002ac2:	b922      	cbnz	r2, 8002ace <HAL_I2C_EV_IRQHandler+0x4aa>
 8002ac4:	6921      	ldr	r1, [r4, #16]
 8002ac6:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 8002aca:	f000 820f 	beq.w	8002eec <HAL_I2C_EV_IRQHandler+0x8c8>
      if (hi2c->XferCount == 0U)
 8002ace:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002ad0:	b292      	uxth	r2, r2
 8002ad2:	2a00      	cmp	r2, #0
 8002ad4:	f040 80df 	bne.w	8002c96 <HAL_I2C_EV_IRQHandler+0x672>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ad8:	9203      	str	r2, [sp, #12]
 8002ada:	695a      	ldr	r2, [r3, #20]
 8002adc:	9203      	str	r2, [sp, #12]
 8002ade:	699a      	ldr	r2, [r3, #24]
 8002ae0:	9203      	str	r2, [sp, #12]
 8002ae2:	9a03      	ldr	r2, [sp, #12]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aea:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	6523      	str	r3, [r4, #80]	; 0x50
 8002af0:	e5c1      	b.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002af2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002af6:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002afa:	2b10      	cmp	r3, #16
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002afc:	b2d2      	uxtb	r2, r2
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002afe:	f000 810f 	beq.w	8002d20 <HAL_I2C_EV_IRQHandler+0x6fc>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b02:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8002b06:	2928      	cmp	r1, #40	; 0x28
 8002b08:	f000 8104 	beq.w	8002d14 <HAL_I2C_EV_IRQHandler+0x6f0>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002b0c:	6823      	ldr	r3, [r4, #0]
 8002b0e:	6859      	ldr	r1, [r3, #4]
 8002b10:	050d      	lsls	r5, r1, #20
 8002b12:	d404      	bmi.n	8002b1e <HAL_I2C_EV_IRQHandler+0x4fa>
 8002b14:	2a60      	cmp	r2, #96	; 0x60
 8002b16:	d002      	beq.n	8002b1e <HAL_I2C_EV_IRQHandler+0x4fa>
      hi2c->State = HAL_I2C_STATE_READY;
 8002b18:	2220      	movs	r2, #32
 8002b1a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b1e:	2200      	movs	r2, #0
 8002b20:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b22:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8002b2c:	d03e      	beq.n	8002bac <HAL_I2C_EV_IRQHandler+0x588>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002b2e:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002b30:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002b32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b36:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002b38:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	f000 8143 	beq.w	8002dc8 <HAL_I2C_EV_IRQHandler+0x7a4>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b42:	4b7e      	ldr	r3, [pc, #504]	; (8002d3c <HAL_I2C_EV_IRQHandler+0x718>)
 8002b44:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b46:	f7fe fe8d 	bl	8001864 <HAL_DMA_Abort_IT>
 8002b4a:	2800      	cmp	r0, #0
 8002b4c:	f040 8190 	bne.w	8002e70 <HAL_I2C_EV_IRQHandler+0x84c>
  CurrentError = hi2c->ErrorCode;
 8002b50:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002b52:	071b      	lsls	r3, r3, #28
 8002b54:	d004      	beq.n	8002b60 <HAL_I2C_EV_IRQHandler+0x53c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b56:	6822      	ldr	r2, [r4, #0]
 8002b58:	6853      	ldr	r3, [r2, #4]
 8002b5a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b5e:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8002b60:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002b64:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002b66:	0756      	lsls	r6, r2, #29
  CurrentState = hi2c->State;
 8002b68:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002b6a:	f57f ad84 	bpl.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
 8002b6e:	2b28      	cmp	r3, #40	; 0x28
 8002b70:	f47f ad81 	bne.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b74:	4b72      	ldr	r3, [pc, #456]	; (8002d40 <HAL_I2C_EV_IRQHandler+0x71c>)
 8002b76:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8002b78:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 8002b7e:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 8002b80:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b84:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002b88:	f7ff fce2 	bl	8002550 <HAL_I2C_ListenCpltCallback>
 8002b8c:	e573      	b.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002b8e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002b90:	2a00      	cmp	r2, #0
 8002b92:	f47f af3b 	bne.w	8002a0c <HAL_I2C_EV_IRQHandler+0x3e8>
 8002b96:	e56e      	b.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002b98:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002b9a:	e761      	b.n	8002a60 <HAL_I2C_EV_IRQHandler+0x43c>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b9c:	2228      	movs	r2, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b9e:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ba0:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ba2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ba6:	f7ff fccf 	bl	8002548 <HAL_I2C_SlaveRxCpltCallback>
 8002baa:	e63d      	b.n	8002828 <HAL_I2C_EV_IRQHandler+0x204>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002bac:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8002bb0:	2960      	cmp	r1, #96	; 0x60
 8002bb2:	f000 8127 	beq.w	8002e04 <HAL_I2C_EV_IRQHandler+0x7e0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002bb6:	695a      	ldr	r2, [r3, #20]
 8002bb8:	0652      	lsls	r2, r2, #25
 8002bba:	d505      	bpl.n	8002bc8 <HAL_I2C_EV_IRQHandler+0x5a4>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bbc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002bc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8002bc8:	4620      	mov	r0, r4
 8002bca:	f7ff fcc7 	bl	800255c <HAL_I2C_ErrorCallback>
 8002bce:	e7bf      	b.n	8002b50 <HAL_I2C_EV_IRQHandler+0x52c>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002bd0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002bd4:	2a22      	cmp	r2, #34	; 0x22
 8002bd6:	f47f ad4e 	bne.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
    tmp = hi2c->XferCount;
 8002bda:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002bdc:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8002bde:	2a03      	cmp	r2, #3
 8002be0:	f240 8152 	bls.w	8002e88 <HAL_I2C_EV_IRQHandler+0x864>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8002bea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002bec:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8002bf4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bf6:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8002bf8:	3201      	adds	r2, #1
      if (hi2c->XferCount == (uint16_t)3)
 8002bfa:	2b03      	cmp	r3, #3
      hi2c->pBuffPtr++;
 8002bfc:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->XferCount == (uint16_t)3)
 8002bfe:	f47f ad3a 	bne.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c02:	6822      	ldr	r2, [r4, #0]
 8002c04:	6853      	ldr	r3, [r2, #4]
 8002c06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c0a:	6053      	str	r3, [r2, #4]
 8002c0c:	e533      	b.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c0e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c12:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c14:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c18:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c1a:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c1c:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c1e:	2800      	cmp	r0, #0
 8002c20:	f040 80ca 	bne.w	8002db8 <HAL_I2C_EV_IRQHandler+0x794>
 8002c24:	2a21      	cmp	r2, #33	; 0x21
 8002c26:	f000 8174 	beq.w	8002f12 <HAL_I2C_EV_IRQHandler+0x8ee>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002c2a:	2940      	cmp	r1, #64	; 0x40
 8002c2c:	f47f ad23 	bne.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002c30:	2a22      	cmp	r2, #34	; 0x22
 8002c32:	f47f ad20 	bne.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
    if (hi2c->XferCount == 0U)
 8002c36:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002c38:	b292      	uxth	r2, r2
 8002c3a:	2a00      	cmp	r2, #0
 8002c3c:	f000 81bd 	beq.w	8002fba <HAL_I2C_EV_IRQHandler+0x996>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c40:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002c44:	2a40      	cmp	r2, #64	; 0x40
 8002c46:	f47f ae88 	bne.w	800295a <HAL_I2C_EV_IRQHandler+0x336>
 8002c4a:	e55c      	b.n	8002706 <HAL_I2C_EV_IRQHandler+0xe2>
    if (hi2c->XferCount != 0U)
 8002c4c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002c4e:	b292      	uxth	r2, r2
 8002c50:	2a00      	cmp	r2, #0
 8002c52:	f47f ae82 	bne.w	800295a <HAL_I2C_EV_IRQHandler+0x336>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c56:	2908      	cmp	r1, #8
 8002c58:	d005      	beq.n	8002c66 <HAL_I2C_EV_IRQHandler+0x642>
 8002c5a:	2920      	cmp	r1, #32
 8002c5c:	d003      	beq.n	8002c66 <HAL_I2C_EV_IRQHandler+0x642>
 8002c5e:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8002c62:	f040 819d 	bne.w	8002fa0 <HAL_I2C_EV_IRQHandler+0x97c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c6c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6e:	6819      	ldr	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c70:	2200      	movs	r2, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002c72:	2020      	movs	r0, #32
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c74:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8002c78:	6019      	str	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c7a:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002c7c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c80:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c84:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c88:	2b40      	cmp	r3, #64	; 0x40
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002c8a:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c8c:	f000 813d 	beq.w	8002f0a <HAL_I2C_EV_IRQHandler+0x8e6>
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c90:	f7ff fc54 	bl	800253c <HAL_I2C_MasterTxCpltCallback>
 8002c94:	e4ef      	b.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
      else if (hi2c->XferCount == 1U)
 8002c96:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002c98:	b292      	uxth	r2, r2
 8002c9a:	2a01      	cmp	r2, #1
 8002c9c:	f000 80cc 	beq.w	8002e38 <HAL_I2C_EV_IRQHandler+0x814>
      else if (hi2c->XferCount == 2U)
 8002ca0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002ca2:	b292      	uxth	r2, r2
 8002ca4:	2a02      	cmp	r2, #2
 8002ca6:	f000 814f 	beq.w	8002f48 <HAL_I2C_EV_IRQHandler+0x924>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cb0:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	0515      	lsls	r5, r2, #20
 8002cb6:	d50e      	bpl.n	8002cd6 <HAL_I2C_EV_IRQHandler+0x6b2>
 8002cb8:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8002cbc:	d007      	beq.n	8002cce <HAL_I2C_EV_IRQHandler+0x6aa>
 8002cbe:	3801      	subs	r0, #1
 8002cc0:	281f      	cmp	r0, #31
 8002cc2:	d808      	bhi.n	8002cd6 <HAL_I2C_EV_IRQHandler+0x6b2>
 8002cc4:	4a1f      	ldr	r2, [pc, #124]	; (8002d44 <HAL_I2C_EV_IRQHandler+0x720>)
 8002cc6:	fa22 f000 	lsr.w	r0, r2, r0
 8002cca:	07c0      	lsls	r0, r0, #31
 8002ccc:	d503      	bpl.n	8002cd6 <HAL_I2C_EV_IRQHandler+0x6b2>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cd4:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	9209      	str	r2, [sp, #36]	; 0x24
 8002cda:	695a      	ldr	r2, [r3, #20]
 8002cdc:	9209      	str	r2, [sp, #36]	; 0x24
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8002ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ce4:	e702      	b.n	8002aec <HAL_I2C_EV_IRQHandler+0x4c8>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ce6:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002ce8:	2904      	cmp	r1, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cee:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002cf0:	f43f ae5a 	beq.w	80029a8 <HAL_I2C_EV_IRQHandler+0x384>
 8002cf4:	2902      	cmp	r1, #2
 8002cf6:	f43f ae57 	beq.w	80029a8 <HAL_I2C_EV_IRQHandler+0x384>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	e651      	b.n	80029a8 <HAL_I2C_EV_IRQHandler+0x384>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d04:	685a      	ldr	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d06:	6a61      	ldr	r1, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d0c:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	700b      	strb	r3, [r1, #0]
 8002d12:	e64c      	b.n	80029ae <HAL_I2C_EV_IRQHandler+0x38a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d14:	2300      	movs	r3, #0
 8002d16:	6323      	str	r3, [r4, #48]	; 0x30
 8002d18:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d1a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 8002d1e:	e702      	b.n	8002b26 <HAL_I2C_EV_IRQHandler+0x502>
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002d20:	2a22      	cmp	r2, #34	; 0x22
 8002d22:	f47f aeee 	bne.w	8002b02 <HAL_I2C_EV_IRQHandler+0x4de>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002d26:	6821      	ldr	r1, [r4, #0]
 8002d28:	680a      	ldr	r2, [r1, #0]
 8002d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d2e:	600a      	str	r2, [r1, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002d30:	684a      	ldr	r2, [r1, #4]
 8002d32:	0516      	lsls	r6, r2, #20
 8002d34:	460b      	mov	r3, r1
 8002d36:	f57f aeef 	bpl.w	8002b18 <HAL_I2C_EV_IRQHandler+0x4f4>
 8002d3a:	e6f0      	b.n	8002b1e <HAL_I2C_EV_IRQHandler+0x4fa>
 8002d3c:	08002565 	.word	0x08002565
 8002d40:	ffff0000 	.word	0xffff0000
 8002d44:	80008081 	.word	0x80008081
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002d48:	2901      	cmp	r1, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d4a:	681a      	ldr	r2, [r3, #0]
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002d4c:	d070      	beq.n	8002e30 <HAL_I2C_EV_IRQHandler+0x80c>
 8002d4e:	2910      	cmp	r1, #16
 8002d50:	d06e      	beq.n	8002e30 <HAL_I2C_EV_IRQHandler+0x80c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002d52:	2904      	cmp	r1, #4
 8002d54:	f000 8137 	beq.w	8002fc6 <HAL_I2C_EV_IRQHandler+0x9a2>
 8002d58:	2902      	cmp	r1, #2
 8002d5a:	f000 8134 	beq.w	8002fc6 <HAL_I2C_EV_IRQHandler+0x9a2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d62:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d64:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8002d6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8002d6c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d6e:	6821      	ldr	r1, [r4, #0]
    hi2c->XferCount--;
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d76:	690b      	ldr	r3, [r1, #16]
    hi2c->pBuffPtr++;
 8002d78:	1c51      	adds	r1, r2, #1
 8002d7a:	6261      	str	r1, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d7c:	7053      	strb	r3, [r2, #1]
    hi2c->XferCount--;
 8002d7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002d80:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr++;
 8002d82:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002d8a:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr++;
 8002d8c:	3201      	adds	r2, #1
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    hi2c->State = HAL_I2C_STATE_READY;
 8002d92:	2020      	movs	r0, #32
    hi2c->pBuffPtr++;
 8002d94:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002d96:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002d98:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d9c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002da0:	2b40      	cmp	r3, #64	; 0x40
 8002da2:	f000 8092 	beq.w	8002eca <HAL_I2C_EV_IRQHandler+0x8a6>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da6:	2200      	movs	r2, #0
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002da8:	2312      	movs	r3, #18
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002daa:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002dae:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002db0:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002db2:	f7ff fbc5 	bl	8002540 <HAL_I2C_MasterRxCpltCallback>
 8002db6:	e45e      	b.n	8002676 <HAL_I2C_EV_IRQHandler+0x52>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002db8:	2a21      	cmp	r2, #33	; 0x21
 8002dba:	f47f af36 	bne.w	8002c2a <HAL_I2C_EV_IRQHandler+0x606>
 8002dbe:	e73a      	b.n	8002c36 <HAL_I2C_EV_IRQHandler+0x612>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002dc0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002dc2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002dc4:	4798      	blx	r3
 8002dc6:	e502      	b.n	80027ce <HAL_I2C_EV_IRQHandler+0x1aa>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002dc8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002dca:	4b9f      	ldr	r3, [pc, #636]	; (8003048 <HAL_I2C_EV_IRQHandler+0xa24>)
 8002dcc:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002dce:	f7fe fd49 	bl	8001864 <HAL_DMA_Abort_IT>
 8002dd2:	2800      	cmp	r0, #0
 8002dd4:	f43f aebc 	beq.w	8002b50 <HAL_I2C_EV_IRQHandler+0x52c>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002dd8:	6823      	ldr	r3, [r4, #0]
 8002dda:	695a      	ldr	r2, [r3, #20]
 8002ddc:	0650      	lsls	r0, r2, #25
 8002dde:	d506      	bpl.n	8002dee <HAL_I2C_EV_IRQHandler+0x7ca>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8002de6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002de8:	6823      	ldr	r3, [r4, #0]
 8002dea:	3201      	adds	r2, #1
 8002dec:	6262      	str	r2, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8002dee:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002df0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8002df2:	f022 0201 	bic.w	r2, r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8002df6:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8002df8:	601a      	str	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002dfa:	6d03      	ldr	r3, [r0, #80]	; 0x50
        hi2c->State = HAL_I2C_STATE_READY;
 8002dfc:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e00:	4798      	blx	r3
 8002e02:	e6a5      	b.n	8002b50 <HAL_I2C_EV_IRQHandler+0x52c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e04:	2120      	movs	r1, #32
 8002e06:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e0a:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e0c:	695a      	ldr	r2, [r3, #20]
 8002e0e:	0651      	lsls	r1, r2, #25
 8002e10:	d506      	bpl.n	8002e20 <HAL_I2C_EV_IRQHandler+0x7fc>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e12:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002e18:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002e1a:	6823      	ldr	r3, [r4, #0]
 8002e1c:	3201      	adds	r2, #1
 8002e1e:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	f022 0201 	bic.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e28:	4620      	mov	r0, r4
 8002e2a:	f7ff fb99 	bl	8002560 <HAL_I2C_AbortCpltCallback>
 8002e2e:	e68f      	b.n	8002b50 <HAL_I2C_EV_IRQHandler+0x52c>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	e795      	b.n	8002d64 <HAL_I2C_EV_IRQHandler+0x740>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002e38:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8002e3c:	f000 80da 	beq.w	8002ff4 <HAL_I2C_EV_IRQHandler+0x9d0>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002e40:	2808      	cmp	r0, #8
 8002e42:	f000 80c7 	beq.w	8002fd4 <HAL_I2C_EV_IRQHandler+0x9b0>
 8002e46:	2820      	cmp	r0, #32
 8002e48:	f000 80c4 	beq.w	8002fd4 <HAL_I2C_EV_IRQHandler+0x9b0>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002e4c:	2d12      	cmp	r5, #18
 8002e4e:	f000 80be 	beq.w	8002fce <HAL_I2C_EV_IRQHandler+0x9aa>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002e52:	2810      	cmp	r0, #16
 8002e54:	f240 80e2 	bls.w	800301c <HAL_I2C_EV_IRQHandler+0x9f8>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e5e:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e60:	2200      	movs	r2, #0
 8002e62:	9206      	str	r2, [sp, #24]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	9206      	str	r2, [sp, #24]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	9306      	str	r3, [sp, #24]
 8002e6c:	9b06      	ldr	r3, [sp, #24]
 8002e6e:	e63d      	b.n	8002aec <HAL_I2C_EV_IRQHandler+0x4c8>
        __HAL_I2C_DISABLE(hi2c);
 8002e70:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002e72:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8002e74:	6813      	ldr	r3, [r2, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002e76:	6d01      	ldr	r1, [r0, #80]	; 0x50
        __HAL_I2C_DISABLE(hi2c);
 8002e78:	f023 0301 	bic.w	r3, r3, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8002e7c:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE(hi2c);
 8002e7e:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002e80:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002e84:	4788      	blx	r1
 8002e86:	e663      	b.n	8002b50 <HAL_I2C_EV_IRQHandler+0x52c>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002e88:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002e8a:	2902      	cmp	r1, #2
 8002e8c:	f43f abf3 	beq.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
 8002e90:	2a01      	cmp	r2, #1
 8002e92:	f63f abf0 	bhi.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e96:	681a      	ldr	r2, [r3, #0]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e98:	6a61      	ldr	r1, [r4, #36]	; 0x24
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e9e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ea6:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	700b      	strb	r3, [r1, #0]
      hi2c->XferCount--;
 8002eac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002eae:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29b      	uxth	r3, r3
      hi2c->State = HAL_I2C_STATE_READY;
 8002eb4:	2120      	movs	r1, #32
      hi2c->XferCount--;
 8002eb6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8002eb8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ebc:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
      hi2c->pBuffPtr++;
 8002ec0:	3201      	adds	r2, #1
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ec2:	2b40      	cmp	r3, #64	; 0x40
      hi2c->pBuffPtr++;
 8002ec4:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ec6:	f47f af6e 	bne.w	8002da6 <HAL_I2C_EV_IRQHandler+0x782>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002ed0:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ed2:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002ed4:	f7ff fb40 	bl	8002558 <HAL_I2C_MemRxCpltCallback>
 8002ed8:	f7ff bbcd 	b.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002edc:	9101      	str	r1, [sp, #4]
 8002ede:	695a      	ldr	r2, [r3, #20]
 8002ee0:	9201      	str	r2, [sp, #4]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	9301      	str	r3, [sp, #4]
 8002ee6:	9b01      	ldr	r3, [sp, #4]
 8002ee8:	f7ff bbc5 	b.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eec:	9202      	str	r2, [sp, #8]
 8002eee:	695a      	ldr	r2, [r3, #20]
 8002ef0:	9202      	str	r2, [sp, #8]
 8002ef2:	699a      	ldr	r2, [r3, #24]
 8002ef4:	9202      	str	r2, [sp, #8]
 8002ef6:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002efe:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002f00:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002f02:	3301      	adds	r3, #1
 8002f04:	6523      	str	r3, [r4, #80]	; 0x50
 8002f06:	f7ff bbb6 	b.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002f0a:	f7ff fb23 	bl	8002554 <HAL_I2C_MemTxCpltCallback>
 8002f0e:	f7ff bbb2 	b.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f12:	2d08      	cmp	r5, #8
 8002f14:	f43f aea7 	beq.w	8002c66 <HAL_I2C_EV_IRQHandler+0x642>
 8002f18:	2d20      	cmp	r5, #32
 8002f1a:	f43f aea4 	beq.w	8002c66 <HAL_I2C_EV_IRQHandler+0x642>
 8002f1e:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8002f22:	f43f aea0 	beq.w	8002c66 <HAL_I2C_EV_IRQHandler+0x642>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f26:	685a      	ldr	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f28:	2611      	movs	r6, #17
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2e:	2500      	movs	r5, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8002f30:	2120      	movs	r1, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f32:	605a      	str	r2, [r3, #4]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f34:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f36:	6326      	str	r6, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f38:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002f3c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f40:	f7ff fafc 	bl	800253c <HAL_I2C_MasterTxCpltCallback>
 8002f44:	f7ff bb97 	b.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002f48:	2810      	cmp	r0, #16
 8002f4a:	d920      	bls.n	8002f8e <HAL_I2C_EV_IRQHandler+0x96a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f52:	601a      	str	r2, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f5a:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	0512      	lsls	r2, r2, #20
 8002f60:	d50d      	bpl.n	8002f7e <HAL_I2C_EV_IRQHandler+0x95a>
 8002f62:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8002f66:	d006      	beq.n	8002f76 <HAL_I2C_EV_IRQHandler+0x952>
 8002f68:	3801      	subs	r0, #1
 8002f6a:	281f      	cmp	r0, #31
 8002f6c:	d807      	bhi.n	8002f7e <HAL_I2C_EV_IRQHandler+0x95a>
 8002f6e:	4a37      	ldr	r2, [pc, #220]	; (800304c <HAL_I2C_EV_IRQHandler+0xa28>)
 8002f70:	40c2      	lsrs	r2, r0
 8002f72:	07d6      	lsls	r6, r2, #31
 8002f74:	d503      	bpl.n	8002f7e <HAL_I2C_EV_IRQHandler+0x95a>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f7c:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f7e:	2200      	movs	r2, #0
 8002f80:	9208      	str	r2, [sp, #32]
 8002f82:	695a      	ldr	r2, [r3, #20]
 8002f84:	9208      	str	r2, [sp, #32]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	9308      	str	r3, [sp, #32]
 8002f8a:	9b08      	ldr	r3, [sp, #32]
 8002f8c:	e5ae      	b.n	8002aec <HAL_I2C_EV_IRQHandler+0x4c8>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002f8e:	4a30      	ldr	r2, [pc, #192]	; (8003050 <HAL_I2C_EV_IRQHandler+0xa2c>)
 8002f90:	40c2      	lsrs	r2, r0
 8002f92:	07d1      	lsls	r1, r2, #31
 8002f94:	d5da      	bpl.n	8002f4c <HAL_I2C_EV_IRQHandler+0x928>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	e7dd      	b.n	8002f5c <HAL_I2C_EV_IRQHandler+0x938>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fa0:	6859      	ldr	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002fa2:	2611      	movs	r6, #17
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fa4:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
        hi2c->State = HAL_I2C_STATE_READY;
 8002fa8:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002faa:	6059      	str	r1, [r3, #4]
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fac:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002fae:	6326      	str	r6, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002fb4:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
 8002fb8:	e66a      	b.n	8002c90 <HAL_I2C_EV_IRQHandler+0x66c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	f7ff bb58 	b.w	8002676 <HAL_I2C_EV_IRQHandler+0x52>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	e6ca      	b.n	8002d64 <HAL_I2C_EV_IRQHandler+0x740>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002fce:	2801      	cmp	r0, #1
 8002fd0:	f43f af42 	beq.w	8002e58 <HAL_I2C_EV_IRQHandler+0x834>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fd4:	681a      	ldr	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd6:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fdc:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fde:	9107      	str	r1, [sp, #28]
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	9207      	str	r2, [sp, #28]
 8002fe4:	699a      	ldr	r2, [r3, #24]
 8002fe6:	9207      	str	r2, [sp, #28]
 8002fe8:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	e57b      	b.n	8002aec <HAL_I2C_EV_IRQHandler+0x4c8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ffa:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8003002:	d016      	beq.n	8003032 <HAL_I2C_EV_IRQHandler+0xa0e>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003004:	681a      	ldr	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003006:	2100      	movs	r1, #0
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800300c:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800300e:	9104      	str	r1, [sp, #16]
 8003010:	695a      	ldr	r2, [r3, #20]
 8003012:	9204      	str	r2, [sp, #16]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	9304      	str	r3, [sp, #16]
 8003018:	9b04      	ldr	r3, [sp, #16]
 800301a:	e567      	b.n	8002aec <HAL_I2C_EV_IRQHandler+0x4c8>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800301c:	4a0c      	ldr	r2, [pc, #48]	; (8003050 <HAL_I2C_EV_IRQHandler+0xa2c>)
 800301e:	fa22 f000 	lsr.w	r0, r2, r0
 8003022:	07c0      	lsls	r0, r0, #31
 8003024:	f57f af18 	bpl.w	8002e58 <HAL_I2C_EV_IRQHandler+0x834>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	e716      	b.n	8002e60 <HAL_I2C_EV_IRQHandler+0x83c>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003032:	9205      	str	r2, [sp, #20]
 8003034:	695a      	ldr	r2, [r3, #20]
 8003036:	9205      	str	r2, [sp, #20]
 8003038:	699a      	ldr	r2, [r3, #24]
 800303a:	9205      	str	r2, [sp, #20]
 800303c:	9a05      	ldr	r2, [sp, #20]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	e551      	b.n	8002aec <HAL_I2C_EV_IRQHandler+0x4c8>
 8003048:	08002565 	.word	0x08002565
 800304c:	80008081 	.word	0x80008081
 8003050:	00010014 	.word	0x00010014

08003054 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003056:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003058:	2800      	cmp	r0, #0
 800305a:	f000 8086 	beq.w	800316a <HAL_PCD_Init+0x116>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800305e:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8003062:	6805      	ldr	r5, [r0, #0]
 8003064:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003066:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800306a:	2b00      	cmp	r3, #0
 800306c:	d077      	beq.n	800315e <HAL_PCD_Init+0x10a>
 800306e:	4628      	mov	r0, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003070:	2303      	movs	r3, #3
 8003072:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003076:	6beb      	ldr	r3, [r5, #60]	; 0x3c

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003078:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800307a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 800307e:	bf08      	it	eq
 8003080:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8003082:	f001 fa89 	bl	8004598 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003086:	f855 eb10 	ldr.w	lr, [r5], #16
 800308a:	462f      	mov	r7, r5
 800308c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800308e:	466e      	mov	r6, sp
 8003090:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003092:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003094:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003096:	e897 0003 	ldmia.w	r7, {r0, r1}
 800309a:	e886 0003 	stmia.w	r6, {r0, r1}
 800309e:	1d26      	adds	r6, r4, #4
 80030a0:	4670      	mov	r0, lr
 80030a2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80030a6:	f001 f98b 	bl	80043c0 <USB_CoreInit>
 80030aa:	4607      	mov	r7, r0
 80030ac:	b130      	cbz	r0, 80030bc <HAL_PCD_Init+0x68>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 80030ae:	2501      	movs	r5, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030b0:	2302      	movs	r3, #2
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 80030b2:	4628      	mov	r0, r5
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030b4:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
}
 80030b8:	b00b      	add	sp, #44	; 0x2c
 80030ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80030bc:	4601      	mov	r1, r0
 80030be:	6820      	ldr	r0, [r4, #0]
 80030c0:	f001 fa72 	bl	80045a8 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c4:	6860      	ldr	r0, [r4, #4]
 80030c6:	b360      	cbz	r0, 8003122 <HAL_PCD_Init+0xce>
 80030c8:	4639      	mov	r1, r7
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030ca:	463a      	mov	r2, r7
    hpcd->IN_ep[i].is_in = 1U;
 80030cc:	f04f 0e01 	mov.w	lr, #1
 80030d0:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80030d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030d8:	1c4f      	adds	r7, r1, #1
    hpcd->IN_ep[i].num = i;
 80030da:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030de:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030e2:	b2f9      	uxtb	r1, r7
 80030e4:	4281      	cmp	r1, r0
    hpcd->IN_ep[i].is_in = 1U;
 80030e6:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 80030ee:	645a      	str	r2, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030f0:	649a      	str	r2, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 80030f2:	651a      	str	r2, [r3, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030f4:	d3ec      	bcc.n	80030d0 <HAL_PCD_Init+0x7c>
 80030f6:	2200      	movs	r2, #0
    hpcd->OUT_ep[i].is_in = 0U;
 80030f8:	4611      	mov	r1, r2
 80030fa:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 80030fe:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003102:	1c57      	adds	r7, r2, #1
    hpcd->OUT_ep[i].num = i;
 8003104:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003108:	b2fa      	uxtb	r2, r7
 800310a:	4282      	cmp	r2, r0
    hpcd->OUT_ep[i].is_in = 0U;
 800310c:	f883 11fd 	strb.w	r1, [r3, #509]	; 0x1fd
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003110:	f883 11ff 	strb.w	r1, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003114:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003118:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 800311c:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003120:	d3eb      	bcc.n	80030fa <HAL_PCD_Init+0xa6>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003122:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003124:	466f      	mov	r7, sp
 8003126:	f8d4 e000 	ldr.w	lr, [r4]
 800312a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800312c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800312e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003130:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003134:	e887 0003 	stmia.w	r7, {r0, r1}
 8003138:	4670      	mov	r0, lr
 800313a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800313e:	f001 fa4f 	bl	80045e0 <USB_DevInit>
 8003142:	4605      	mov	r5, r0
 8003144:	2800      	cmp	r0, #0
 8003146:	d1b2      	bne.n	80030ae <HAL_PCD_Init+0x5a>
  hpcd->State = HAL_PCD_STATE_READY;
 8003148:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 800314a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  (void)USB_DevDisconnect(hpcd->Instance);
 800314e:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8003150:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8003154:	f001 fe22 	bl	8004d9c <USB_DevDisconnect>
}
 8003158:	4628      	mov	r0, r5
 800315a:	b00b      	add	sp, #44	; 0x2c
 800315c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800315e:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8003162:	f004 f9a7 	bl	80074b4 <HAL_PCD_MspInit>
 8003166:	6820      	ldr	r0, [r4, #0]
 8003168:	e782      	b.n	8003070 <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 800316a:	2501      	movs	r5, #1
}
 800316c:	4628      	mov	r0, r5
 800316e:	b00b      	add	sp, #44	; 0x2c
 8003170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003172:	bf00      	nop

08003174 <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8003174:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8003178:	2b01      	cmp	r3, #1
 800317a:	d012      	beq.n	80031a2 <HAL_PCD_Start+0x2e>
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800317c:	6a82      	ldr	r2, [r0, #40]	; 0x28
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800317e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hpcd);
 8003180:	2101      	movs	r1, #1
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003182:	428a      	cmp	r2, r1
{
 8003184:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8003186:	f880 13bc 	strb.w	r1, [r0, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800318a:	d00c      	beq.n	80031a6 <HAL_PCD_Start+0x32>
 800318c:	4604      	mov	r4, r0
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800318e:	4618      	mov	r0, r3
 8003190:	f001 fdf8 	bl	8004d84 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003194:	6820      	ldr	r0, [r4, #0]
 8003196:	f001 f9f7 	bl	8004588 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800319a:	2000      	movs	r0, #0
 800319c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80031a0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80031a2:	2002      	movs	r0, #2
 80031a4:	4770      	bx	lr
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80031a6:	6982      	ldr	r2, [r0, #24]
 80031a8:	428a      	cmp	r2, r1
 80031aa:	d0ef      	beq.n	800318c <HAL_PCD_Start+0x18>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80031ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80031b2:	639a      	str	r2, [r3, #56]	; 0x38
 80031b4:	e7ea      	b.n	800318c <HAL_PCD_Start+0x18>
 80031b6:	bf00      	nop

080031b8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80031b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031bc:	6807      	ldr	r7, [r0, #0]
{
 80031be:	b089      	sub	sp, #36	; 0x24
 80031c0:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80031c2:	4638      	mov	r0, r7
 80031c4:	f001 fe28 	bl	8004e18 <USB_GetMode>
 80031c8:	b110      	cbz	r0, 80031d0 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 80031ca:	b009      	add	sp, #36	; 0x24
 80031cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031d0:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80031d2:	6820      	ldr	r0, [r4, #0]
 80031d4:	f001 fdee 	bl	8004db4 <USB_ReadInterrupts>
 80031d8:	2800      	cmp	r0, #0
 80031da:	d0f6      	beq.n	80031ca <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80031dc:	6820      	ldr	r0, [r4, #0]
 80031de:	f001 fde9 	bl	8004db4 <USB_ReadInterrupts>
 80031e2:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80031e6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80031e8:	d003      	beq.n	80031f2 <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80031ea:	6943      	ldr	r3, [r0, #20]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80031f2:	f001 fddf 	bl	8004db4 <USB_ReadInterrupts>
 80031f6:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80031fa:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80031fc:	f040 813f 	bne.w	800347e <HAL_PCD_IRQHandler+0x2c6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003200:	f001 fdd8 	bl	8004db4 <USB_ReadInterrupts>
 8003204:	0342      	lsls	r2, r0, #13
 8003206:	f100 80d4 	bmi.w	80033b2 <HAL_PCD_IRQHandler+0x1fa>
 800320a:	6823      	ldr	r3, [r4, #0]
 800320c:	9303      	str	r3, [sp, #12]
 800320e:	4618      	mov	r0, r3
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003210:	f001 fdd0 	bl	8004db4 <USB_ReadInterrupts>
 8003214:	2800      	cmp	r0, #0
 8003216:	f2c0 818d 	blt.w	8003534 <HAL_PCD_IRQHandler+0x37c>
 800321a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800321c:	f001 fdca 	bl	8004db4 <USB_ReadInterrupts>
 8003220:	0501      	lsls	r1, r0, #20
 8003222:	d448      	bmi.n	80032b6 <HAL_PCD_IRQHandler+0xfe>
 8003224:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003226:	f001 fdc5 	bl	8004db4 <USB_ReadInterrupts>
 800322a:	04c3      	lsls	r3, r0, #19
 800322c:	d478      	bmi.n	8003320 <HAL_PCD_IRQHandler+0x168>
 800322e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003230:	f001 fdc0 	bl	8004db4 <USB_ReadInterrupts>
 8003234:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8003238:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800323a:	d15a      	bne.n	80032f2 <HAL_PCD_IRQHandler+0x13a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800323c:	f001 fdba 	bl	8004db4 <USB_ReadInterrupts>
 8003240:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003244:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003246:	d011      	beq.n	800326c <HAL_PCD_IRQHandler+0xb4>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003248:	6983      	ldr	r3, [r0, #24]
 800324a:	f023 0310 	bic.w	r3, r3, #16
 800324e:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 8003250:	6a3d      	ldr	r5, [r7, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003252:	f3c5 4343 	ubfx	r3, r5, #17, #4
 8003256:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003258:	f005 060f 	and.w	r6, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800325c:	f000 822e 	beq.w	80036bc <HAL_PCD_IRQHandler+0x504>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003260:	2b06      	cmp	r3, #6
 8003262:	d033      	beq.n	80032cc <HAL_PCD_IRQHandler+0x114>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003264:	6983      	ldr	r3, [r0, #24]
 8003266:	f043 0310 	orr.w	r3, r3, #16
 800326a:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800326c:	f001 fda2 	bl	8004db4 <USB_ReadInterrupts>
 8003270:	0707      	lsls	r7, r0, #28
 8003272:	f100 814c 	bmi.w	800350e <HAL_PCD_IRQHandler+0x356>
 8003276:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003278:	f001 fd9c 	bl	8004db4 <USB_ReadInterrupts>
 800327c:	02c6      	lsls	r6, r0, #11
 800327e:	f100 813c 	bmi.w	80034fa <HAL_PCD_IRQHandler+0x342>
 8003282:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003284:	f001 fd96 	bl	8004db4 <USB_ReadInterrupts>
 8003288:	0285      	lsls	r5, r0, #10
 800328a:	f100 8149 	bmi.w	8003520 <HAL_PCD_IRQHandler+0x368>
 800328e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003290:	f001 fd90 	bl	8004db4 <USB_ReadInterrupts>
 8003294:	0040      	lsls	r0, r0, #1
 8003296:	f100 80e9 	bmi.w	800346c <HAL_PCD_IRQHandler+0x2b4>
 800329a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800329c:	f001 fd8a 	bl	8004db4 <USB_ReadInterrupts>
 80032a0:	0741      	lsls	r1, r0, #29
 80032a2:	d592      	bpl.n	80031ca <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 80032a4:	6823      	ldr	r3, [r4, #0]
 80032a6:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80032a8:	076a      	lsls	r2, r5, #29
 80032aa:	f100 81f3 	bmi.w	8003694 <HAL_PCD_IRQHandler+0x4dc>
      hpcd->Instance->GOTGINT |= temp;
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	4315      	orrs	r5, r2
 80032b2:	605d      	str	r5, [r3, #4]
 80032b4:	e789      	b.n	80031ca <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80032b6:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80032ba:	07da      	lsls	r2, r3, #31
 80032bc:	f100 81ef 	bmi.w	800369e <HAL_PCD_IRQHandler+0x4e6>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032c0:	6820      	ldr	r0, [r4, #0]
 80032c2:	6943      	ldr	r3, [r0, #20]
 80032c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032c8:	6143      	str	r3, [r0, #20]
 80032ca:	e7ac      	b.n	8003226 <HAL_PCD_IRQHandler+0x6e>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80032cc:	2208      	movs	r2, #8
 80032ce:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80032d2:	4638      	mov	r0, r7
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032d4:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80032d8:	f001 fcd6 	bl	8004c88 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032dc:	eb04 0286 	add.w	r2, r4, r6, lsl #2
 80032e0:	f3c5 130a 	ubfx	r3, r5, #4, #11
 80032e4:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 80032e8:	6820      	ldr	r0, [r4, #0]
 80032ea:	440b      	add	r3, r1
 80032ec:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 80032f0:	e7b8      	b.n	8003264 <HAL_PCD_IRQHandler+0xac>
      (void)USB_ActivateSetup(hpcd->Instance);
 80032f2:	f001 fd95 	bl	8004e20 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80032f6:	6820      	ldr	r0, [r4, #0]
 80032f8:	f001 fa84 	bl	8004804 <USB_GetDevSpeed>
 80032fc:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032fe:	6825      	ldr	r5, [r4, #0]
 8003300:	f000 febc 	bl	800407c <HAL_RCC_GetHCLKFreq>
 8003304:	7b22      	ldrb	r2, [r4, #12]
 8003306:	4601      	mov	r1, r0
 8003308:	4628      	mov	r0, r5
 800330a:	f001 f8c1 	bl	8004490 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800330e:	4620      	mov	r0, r4
 8003310:	f004 f932 	bl	8007578 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003314:	6820      	ldr	r0, [r4, #0]
 8003316:	6943      	ldr	r3, [r0, #20]
 8003318:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800331c:	6143      	str	r3, [r0, #20]
 800331e:	e78d      	b.n	800323c <HAL_PCD_IRQHandler+0x84>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003320:	f507 6500 	add.w	r5, r7, #2048	; 0x800
 8003324:	686b      	ldr	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003326:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003328:	f023 0301 	bic.w	r3, r3, #1
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800332c:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800332e:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003330:	f001 fa56 	bl	80047e0 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003334:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8003338:	f1be 0f00 	cmp.w	lr, #0
 800333c:	d015      	beq.n	800336a <HAL_PCD_IRQHandler+0x1b2>
 800333e:	f507 6310 	add.w	r3, r7, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003342:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8003346:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800334e:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003350:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003354:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003358:	3601      	adds	r6, #1
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800335a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800335e:	4576      	cmp	r6, lr
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003360:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8003364:	f103 0320 	add.w	r3, r3, #32
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003368:	d1ed      	bne.n	8003346 <HAL_PCD_IRQHandler+0x18e>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800336a:	69eb      	ldr	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800336c:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800336e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003372:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003374:	2a00      	cmp	r2, #0
 8003376:	f000 8196 	beq.w	80036a6 <HAL_PCD_IRQHandler+0x4ee>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800337a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800337e:	f043 030b 	orr.w	r3, r3, #11
 8003382:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003386:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003388:	f043 030b 	orr.w	r3, r3, #11
 800338c:	646b      	str	r3, [r5, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800338e:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003392:	7c21      	ldrb	r1, [r4, #16]
 8003394:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003396:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800339a:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800339e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80033a2:	f001 fd59 	bl	8004e58 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80033a6:	6820      	ldr	r0, [r4, #0]
 80033a8:	6943      	ldr	r3, [r0, #20]
 80033aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ae:	6143      	str	r3, [r0, #20]
 80033b0:	e73e      	b.n	8003230 <HAL_PCD_IRQHandler+0x78>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80033b2:	6820      	ldr	r0, [r4, #0]
 80033b4:	f001 fd0a 	bl	8004dcc <USB_ReadDevAllInEpInterrupt>
 80033b8:	6823      	ldr	r3, [r4, #0]
 80033ba:	9303      	str	r3, [sp, #12]
      while (ep_intr != 0U)
 80033bc:	4681      	mov	r9, r0
 80033be:	4618      	mov	r0, r3
 80033c0:	f1b9 0f00 	cmp.w	r9, #0
 80033c4:	f43f af24 	beq.w	8003210 <HAL_PCD_IRQHandler+0x58>
 80033c8:	46a0      	mov	r8, r4
 80033ca:	f507 6b10 	add.w	fp, r7, #2304	; 0x900
 80033ce:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80033d2:	9704      	str	r7, [sp, #16]
 80033d4:	9605      	str	r6, [sp, #20]
 80033d6:	e009      	b.n	80033ec <HAL_PCD_IRQHandler+0x234>
      while (ep_intr != 0U)
 80033d8:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 80033dc:	f10a 0a01 	add.w	sl, sl, #1
 80033e0:	f108 081c 	add.w	r8, r8, #28
 80033e4:	f10b 0b20 	add.w	fp, fp, #32
      while (ep_intr != 0U)
 80033e8:	f000 80b8 	beq.w	800355c <HAL_PCD_IRQHandler+0x3a4>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80033ec:	f019 0f01 	tst.w	r9, #1
 80033f0:	d0f2      	beq.n	80033d8 <HAL_PCD_IRQHandler+0x220>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033f2:	fa5f f68a 	uxtb.w	r6, sl
 80033f6:	9803      	ldr	r0, [sp, #12]
 80033f8:	4631      	mov	r1, r6
 80033fa:	f001 fcf9 	bl	8004df0 <USB_ReadDevInEPInterrupt>
 80033fe:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003400:	07e8      	lsls	r0, r5, #31
 8003402:	d519      	bpl.n	8003438 <HAL_PCD_IRQHandler+0x280>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003404:	9b04      	ldr	r3, [sp, #16]
            if (hpcd->Init.dma_enable == 1U)
 8003406:	6920      	ldr	r0, [r4, #16]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003408:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800340c:	2701      	movs	r7, #1
 800340e:	f00a 010f 	and.w	r1, sl, #15
 8003412:	fa07 f101 	lsl.w	r1, r7, r1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003416:	ea22 0201 	bic.w	r2, r2, r1
            if (hpcd->Init.dma_enable == 1U)
 800341a:	42b8      	cmp	r0, r7
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800341c:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003420:	f8cb 7008 	str.w	r7, [fp, #8]
            if (hpcd->Init.dma_enable == 1U)
 8003424:	f000 8175 	beq.w	8003712 <HAL_PCD_IRQHandler+0x55a>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003428:	4631      	mov	r1, r6
 800342a:	4620      	mov	r0, r4
 800342c:	f004 f896 	bl	800755c <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 8003430:	6921      	ldr	r1, [r4, #16]
 8003432:	2901      	cmp	r1, #1
 8003434:	f000 815f 	beq.w	80036f6 <HAL_PCD_IRQHandler+0x53e>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003438:	0729      	lsls	r1, r5, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800343a:	bf44      	itt	mi
 800343c:	2308      	movmi	r3, #8
 800343e:	f8cb 3008 	strmi.w	r3, [fp, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003442:	06ea      	lsls	r2, r5, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003444:	bf44      	itt	mi
 8003446:	2310      	movmi	r3, #16
 8003448:	f8cb 3008 	strmi.w	r3, [fp, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800344c:	066b      	lsls	r3, r5, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800344e:	bf44      	itt	mi
 8003450:	2340      	movmi	r3, #64	; 0x40
 8003452:	f8cb 3008 	strmi.w	r3, [fp, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003456:	07af      	lsls	r7, r5, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003458:	bf44      	itt	mi
 800345a:	2302      	movmi	r3, #2
 800345c:	f8cb 3008 	strmi.w	r3, [fp, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003460:	0628      	lsls	r0, r5, #24
 8003462:	f100 80a2 	bmi.w	80035aa <HAL_PCD_IRQHandler+0x3f2>
 8003466:	6823      	ldr	r3, [r4, #0]
 8003468:	9303      	str	r3, [sp, #12]
 800346a:	e7b5      	b.n	80033d8 <HAL_PCD_IRQHandler+0x220>
      HAL_PCD_ConnectCallback(hpcd);
 800346c:	4620      	mov	r0, r4
 800346e:	f004 f8bd 	bl	80075ec <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003472:	6820      	ldr	r0, [r4, #0]
 8003474:	6943      	ldr	r3, [r0, #20]
 8003476:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800347a:	6143      	str	r3, [r0, #20]
 800347c:	e70e      	b.n	800329c <HAL_PCD_IRQHandler+0xe4>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800347e:	f001 fc9d 	bl	8004dbc <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 8003482:	4605      	mov	r5, r0
 8003484:	6820      	ldr	r0, [r4, #0]
 8003486:	2d00      	cmp	r5, #0
 8003488:	f43f aeba 	beq.w	8003200 <HAL_PCD_IRQHandler+0x48>
 800348c:	f507 6830 	add.w	r8, r7, #2816	; 0xb00
 8003490:	46a2      	mov	sl, r4
 8003492:	f04f 0900 	mov.w	r9, #0
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003496:	9603      	str	r6, [sp, #12]
 8003498:	e007      	b.n	80034aa <HAL_PCD_IRQHandler+0x2f2>
      while (ep_intr != 0U)
 800349a:	086d      	lsrs	r5, r5, #1
        epnum++;
 800349c:	f109 0901 	add.w	r9, r9, #1
 80034a0:	f108 0820 	add.w	r8, r8, #32
 80034a4:	f10a 0a1c 	add.w	sl, sl, #28
      while (ep_intr != 0U)
 80034a8:	d05c      	beq.n	8003564 <HAL_PCD_IRQHandler+0x3ac>
        if ((ep_intr & 0x1U) != 0U)
 80034aa:	07eb      	lsls	r3, r5, #31
 80034ac:	d5f5      	bpl.n	800349a <HAL_PCD_IRQHandler+0x2e2>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034ae:	fa5f f689 	uxtb.w	r6, r9
 80034b2:	4631      	mov	r1, r6
 80034b4:	f001 fc92 	bl	8004ddc <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80034b8:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034bc:	4683      	mov	fp, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80034be:	d153      	bne.n	8003568 <HAL_PCD_IRQHandler+0x3b0>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80034c0:	f01b 0f08 	tst.w	fp, #8
 80034c4:	f040 80c7 	bne.w	8003656 <HAL_PCD_IRQHandler+0x49e>
 80034c8:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80034ca:	f01b 0f10 	tst.w	fp, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80034ce:	bf1c      	itt	ne
 80034d0:	2310      	movne	r3, #16
 80034d2:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034d6:	f01b 0f20 	tst.w	fp, #32
 80034da:	d006      	beq.n	80034ea <HAL_PCD_IRQHandler+0x332>
            if (hpcd->Init.dma_enable == 1U)
 80034dc:	6921      	ldr	r1, [r4, #16]
 80034de:	2901      	cmp	r1, #1
 80034e0:	f000 816a 	beq.w	80037b8 <HAL_PCD_IRQHandler+0x600>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034e4:	2320      	movs	r3, #32
 80034e6:	f8c8 3008 	str.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80034ea:	f41b 5f00 	tst.w	fp, #8192	; 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80034ee:	bf1c      	itt	ne
 80034f0:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 80034f4:	f8c8 3008 	strne.w	r3, [r8, #8]
 80034f8:	e7cf      	b.n	800349a <HAL_PCD_IRQHandler+0x2e2>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80034fa:	4620      	mov	r0, r4
 80034fc:	2100      	movs	r1, #0
 80034fe:	f004 f871 	bl	80075e4 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003502:	6820      	ldr	r0, [r4, #0]
 8003504:	6943      	ldr	r3, [r0, #20]
 8003506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800350a:	6143      	str	r3, [r0, #20]
 800350c:	e6ba      	b.n	8003284 <HAL_PCD_IRQHandler+0xcc>
      HAL_PCD_SOFCallback(hpcd);
 800350e:	4620      	mov	r0, r4
 8003510:	f004 f82e 	bl	8007570 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003514:	6820      	ldr	r0, [r4, #0]
 8003516:	6943      	ldr	r3, [r0, #20]
 8003518:	f003 0308 	and.w	r3, r3, #8
 800351c:	6143      	str	r3, [r0, #20]
 800351e:	e6ab      	b.n	8003278 <HAL_PCD_IRQHandler+0xc0>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003520:	4620      	mov	r0, r4
 8003522:	2100      	movs	r1, #0
 8003524:	f004 f85a 	bl	80075dc <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003528:	6820      	ldr	r0, [r4, #0]
 800352a:	6943      	ldr	r3, [r0, #20]
 800352c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003530:	6143      	str	r3, [r0, #20]
 8003532:	e6ad      	b.n	8003290 <HAL_PCD_IRQHandler+0xd8>
      if (hpcd->LPM_State == LPM_L1)
 8003534:	f894 13f4 	ldrb.w	r1, [r4, #1012]	; 0x3f4
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003538:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800353c:	2901      	cmp	r1, #1
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800353e:	f022 0201 	bic.w	r2, r2, #1
 8003542:	f8c7 2804 	str.w	r2, [r7, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8003546:	f000 8107 	beq.w	8003758 <HAL_PCD_IRQHandler+0x5a0>
        HAL_PCD_ResumeCallback(hpcd);
 800354a:	4620      	mov	r0, r4
 800354c:	f004 f842 	bl	80075d4 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003550:	6820      	ldr	r0, [r4, #0]
 8003552:	6943      	ldr	r3, [r0, #20]
 8003554:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003558:	6143      	str	r3, [r0, #20]
 800355a:	e65f      	b.n	800321c <HAL_PCD_IRQHandler+0x64>
 800355c:	9f04      	ldr	r7, [sp, #16]
 800355e:	9e05      	ldr	r6, [sp, #20]
 8003560:	9803      	ldr	r0, [sp, #12]
 8003562:	e655      	b.n	8003210 <HAL_PCD_IRQHandler+0x58>
 8003564:	9e03      	ldr	r6, [sp, #12]
 8003566:	e64b      	b.n	8003200 <HAL_PCD_IRQHandler+0x48>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003568:	6820      	ldr	r0, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 800356a:	f8d4 e010 	ldr.w	lr, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800356e:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003572:	2101      	movs	r1, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003574:	eb03 1349 	add.w	r3, r3, r9, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003578:	f8c8 1008 	str.w	r1, [r8, #8]
  if (hpcd->Init.dma_enable == 1U)
 800357c:	458e      	cmp	lr, r1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800357e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003580:	f8d3 c008 	ldr.w	ip, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 8003584:	f000 80fe 	beq.w	8003784 <HAL_PCD_IRQHandler+0x5cc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003588:	49af      	ldr	r1, [pc, #700]	; (8003848 <HAL_PCD_IRQHandler+0x690>)
 800358a:	428a      	cmp	r2, r1
 800358c:	d108      	bne.n	80035a0 <HAL_PCD_IRQHandler+0x3e8>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800358e:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 8003592:	f040 8144 	bne.w	800381e <HAL_PCD_IRQHandler+0x666>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003596:	f01c 0f20 	tst.w	ip, #32
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800359a:	bf1c      	itt	ne
 800359c:	2120      	movne	r1, #32
 800359e:	6099      	strne	r1, [r3, #8]
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035a0:	4631      	mov	r1, r6
 80035a2:	4620      	mov	r0, r4
 80035a4:	f003 ffd0 	bl	8007548 <HAL_PCD_DataOutStageCallback>
 80035a8:	e78a      	b.n	80034c0 <HAL_PCD_IRQHandler+0x308>
  if (ep->xfer_count > ep->xfer_len)
 80035aa:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80035ae:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035b2:	6827      	ldr	r7, [r4, #0]
 80035b4:	9703      	str	r7, [sp, #12]
  if (ep->xfer_count > ep->xfer_len)
 80035b6:	428b      	cmp	r3, r1
 80035b8:	f63f af0e 	bhi.w	80033d8 <HAL_PCD_IRQHandler+0x220>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035bc:	f507 6210 	add.w	r2, r7, #2304	; 0x900
 80035c0:	eb02 124a 	add.w	r2, r2, sl, lsl #5
 80035c4:	4610      	mov	r0, r2
  if (len > ep->maxpacket)
 80035c6:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035ca:	9006      	str	r0, [sp, #24]
  len = ep->xfer_len - ep->xfer_count;
 80035cc:	1acd      	subs	r5, r1, r3
  len32b = (len + 3U) / 4U;
 80035ce:	4295      	cmp	r5, r2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035d0:	6980      	ldr	r0, [r0, #24]
  len32b = (len + 3U) / 4U;
 80035d2:	46ae      	mov	lr, r5
 80035d4:	bf28      	it	cs
 80035d6:	4696      	movcs	lr, r2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035d8:	b280      	uxth	r0, r0
  len32b = (len + 3U) / 4U;
 80035da:	f10e 0e03 	add.w	lr, lr, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035de:	ebb0 0f9e 	cmp.w	r0, lr, lsr #2
 80035e2:	d334      	bcc.n	800364e <HAL_PCD_IRQHandler+0x496>
 80035e4:	428b      	cmp	r3, r1
 80035e6:	f080 809f 	bcs.w	8003728 <HAL_PCD_IRQHandler+0x570>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035ea:	2900      	cmp	r1, #0
 80035ec:	f000 809c 	beq.w	8003728 <HAL_PCD_IRQHandler+0x570>
 80035f0:	f8cd a01c 	str.w	sl, [sp, #28]
 80035f4:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
 80035f8:	f8dd a018 	ldr.w	sl, [sp, #24]
 80035fc:	e007      	b.n	800360e <HAL_PCD_IRQHandler+0x456>
 80035fe:	f8d8 5050 	ldr.w	r5, [r8, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003602:	429d      	cmp	r5, r3
 8003604:	f240 808d 	bls.w	8003722 <HAL_PCD_IRQHandler+0x56a>
 8003608:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 800360c:	1aed      	subs	r5, r5, r3
 800360e:	4295      	cmp	r5, r2
 8003610:	bf28      	it	cs
 8003612:	4615      	movcs	r5, r2
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003614:	7c23      	ldrb	r3, [r4, #16]
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	4632      	mov	r2, r6
 800361a:	b2ab      	uxth	r3, r5
 800361c:	4638      	mov	r0, r7
 800361e:	f001 fb1d 	bl	8004c5c <USB_WritePacket>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003622:	f8da 2018 	ldr.w	r2, [sl, #24]
    ep->xfer_buff  += len;
 8003626:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
    ep->xfer_count += len;
 800362a:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    ep->xfer_buff  += len;
 800362e:	4429      	add	r1, r5
    ep->xfer_count += len;
 8003630:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003632:	b292      	uxth	r2, r2
    len32b = (len + 3U) / 4U;
 8003634:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003636:	ebb2 0f95 	cmp.w	r2, r5, lsr #2
    ep->xfer_buff  += len;
 800363a:	f8c8 1048 	str.w	r1, [r8, #72]	; 0x48
    ep->xfer_count += len;
 800363e:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003642:	d2dc      	bcs.n	80035fe <HAL_PCD_IRQHandler+0x446>
 8003644:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8003648:	6827      	ldr	r7, [r4, #0]
 800364a:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
  if (ep->xfer_len <= ep->xfer_count)
 800364e:	4299      	cmp	r1, r3
 8003650:	d96a      	bls.n	8003728 <HAL_PCD_IRQHandler+0x570>
 8003652:	9703      	str	r7, [sp, #12]
 8003654:	e6c0      	b.n	80033d8 <HAL_PCD_IRQHandler+0x220>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003656:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 8003658:	6921      	ldr	r1, [r4, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800365a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800365c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003660:	eb03 1349 	add.w	r3, r3, r9, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 8003664:	2901      	cmp	r1, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003666:	6898      	ldr	r0, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 8003668:	f000 8085 	beq.w	8003776 <HAL_PCD_IRQHandler+0x5be>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800366c:	4976      	ldr	r1, [pc, #472]	; (8003848 <HAL_PCD_IRQHandler+0x690>)
 800366e:	428a      	cmp	r2, r1
 8003670:	d069      	beq.n	8003746 <HAL_PCD_IRQHandler+0x58e>

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003672:	4620      	mov	r0, r4
 8003674:	9204      	str	r2, [sp, #16]
 8003676:	f003 ff61 	bl	800753c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800367a:	4b74      	ldr	r3, [pc, #464]	; (800384c <HAL_PCD_IRQHandler+0x694>)
 800367c:	9a04      	ldr	r2, [sp, #16]
 800367e:	429a      	cmp	r2, r3
 8003680:	d903      	bls.n	800368a <HAL_PCD_IRQHandler+0x4d2>
 8003682:	6921      	ldr	r1, [r4, #16]
 8003684:	2901      	cmp	r1, #1
 8003686:	f000 80d4 	beq.w	8003832 <HAL_PCD_IRQHandler+0x67a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800368a:	2308      	movs	r3, #8
 800368c:	6820      	ldr	r0, [r4, #0]
 800368e:	f8c8 3008 	str.w	r3, [r8, #8]
 8003692:	e71a      	b.n	80034ca <HAL_PCD_IRQHandler+0x312>
        HAL_PCD_DisconnectCallback(hpcd);
 8003694:	4620      	mov	r0, r4
 8003696:	f003 ffad 	bl	80075f4 <HAL_PCD_DisconnectCallback>
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	e607      	b.n	80032ae <HAL_PCD_IRQHandler+0xf6>
        HAL_PCD_SuspendCallback(hpcd);
 800369e:	4620      	mov	r0, r4
 80036a0:	f003 ff80 	bl	80075a4 <HAL_PCD_SuspendCallback>
 80036a4:	e60c      	b.n	80032c0 <HAL_PCD_IRQHandler+0x108>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80036a6:	696b      	ldr	r3, [r5, #20]
 80036a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036ac:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80036b0:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80036b2:	692b      	ldr	r3, [r5, #16]
 80036b4:	f043 030b 	orr.w	r3, r3, #11
 80036b8:	612b      	str	r3, [r5, #16]
 80036ba:	e668      	b.n	800338e <HAL_PCD_IRQHandler+0x1d6>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80036bc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80036c0:	421d      	tst	r5, r3
 80036c2:	f43f adcf 	beq.w	8003264 <HAL_PCD_IRQHandler+0xac>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036c6:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 80036ca:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80036ce:	f3c5 150a 	ubfx	r5, r5, #4, #11
 80036d2:	462a      	mov	r2, r5
 80036d4:	4638      	mov	r0, r7
 80036d6:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 80036da:	f001 fad5 	bl	8004c88 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036de:	f8d6 2208 	ldr.w	r2, [r6, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036e2:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 80036e6:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036e8:	442a      	add	r2, r5
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036ea:	442b      	add	r3, r5
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036ec:	f8c6 2208 	str.w	r2, [r6, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036f0:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
 80036f4:	e5b6      	b.n	8003264 <HAL_PCD_IRQHandler+0xac>
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80036f6:	f1ba 0f00 	cmp.w	sl, #0
 80036fa:	f47f ae9d 	bne.w	8003438 <HAL_PCD_IRQHandler+0x280>
 80036fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003700:	2b00      	cmp	r3, #0
 8003702:	f47f ae99 	bne.w	8003438 <HAL_PCD_IRQHandler+0x280>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003706:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800370a:	6820      	ldr	r0, [r4, #0]
 800370c:	f001 fba4 	bl	8004e58 <USB_EP0_OutStart>
 8003710:	e692      	b.n	8003438 <HAL_PCD_IRQHandler+0x280>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003712:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8003716:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 800371a:	4413      	add	r3, r2
 800371c:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
 8003720:	e682      	b.n	8003428 <HAL_PCD_IRQHandler+0x270>
 8003722:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8003726:	6827      	ldr	r7, [r4, #0]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003728:	9b03      	ldr	r3, [sp, #12]
 800372a:	9703      	str	r7, [sp, #12]
 800372c:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003730:	f00a 020f 	and.w	r2, sl, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003734:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003738:	2001      	movs	r0, #1
 800373a:	fa00 f202 	lsl.w	r2, r0, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800373e:	ea23 0302 	bic.w	r3, r3, r2
 8003742:	634b      	str	r3, [r1, #52]	; 0x34
 8003744:	e648      	b.n	80033d8 <HAL_PCD_IRQHandler+0x220>
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003746:	0406      	lsls	r6, r0, #16
 8003748:	d502      	bpl.n	8003750 <HAL_PCD_IRQHandler+0x598>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800374a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800374e:	609a      	str	r2, [r3, #8]
  HAL_PCD_SetupStageCallback(hpcd);
 8003750:	4620      	mov	r0, r4
 8003752:	f003 fef3 	bl	800753c <HAL_PCD_SetupStageCallback>
 8003756:	e794      	b.n	8003682 <HAL_PCD_IRQHandler+0x4ca>
        hpcd->LPM_State = LPM_L0;
 8003758:	2100      	movs	r1, #0
 800375a:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800375e:	4620      	mov	r0, r4
 8003760:	f000 f9dc 	bl	8003b1c <HAL_PCDEx_LPM_Callback>
 8003764:	e6f4      	b.n	8003550 <HAL_PCD_IRQHandler+0x398>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003766:	2220      	movs	r2, #32
 8003768:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800376a:	f01b 0f08 	tst.w	fp, #8
 800376e:	f43f aeac 	beq.w	80034ca <HAL_PCD_IRQHandler+0x312>
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003772:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003774:	6898      	ldr	r0, [r3, #8]
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003776:	4935      	ldr	r1, [pc, #212]	; (800384c <HAL_PCD_IRQHandler+0x694>)
 8003778:	428a      	cmp	r2, r1
 800377a:	d8e4      	bhi.n	8003746 <HAL_PCD_IRQHandler+0x58e>
  HAL_PCD_SetupStageCallback(hpcd);
 800377c:	4620      	mov	r0, r4
 800377e:	f003 fedd 	bl	800753c <HAL_PCD_SetupStageCallback>
 8003782:	e782      	b.n	800368a <HAL_PCD_IRQHandler+0x4d2>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003784:	f01c 0f08 	tst.w	ip, #8
 8003788:	d01c      	beq.n	80037c4 <HAL_PCD_IRQHandler+0x60c>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800378a:	4930      	ldr	r1, [pc, #192]	; (800384c <HAL_PCD_IRQHandler+0x694>)
 800378c:	428a      	cmp	r2, r1
 800378e:	d905      	bls.n	800379c <HAL_PCD_IRQHandler+0x5e4>
 8003790:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003794:	bf1c      	itt	ne
 8003796:	f44f 4200 	movne.w	r2, #32768	; 0x8000
 800379a:	609a      	strne	r2, [r3, #8]
      HAL_PCD_SetupStageCallback(hpcd);
 800379c:	4620      	mov	r0, r4
 800379e:	9304      	str	r3, [sp, #16]
 80037a0:	f003 fecc 	bl	800753c <HAL_PCD_SetupStageCallback>
      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037a4:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80037a8:	2101      	movs	r1, #1
 80037aa:	6820      	ldr	r0, [r4, #0]
 80037ac:	f001 fb54 	bl	8004e58 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80037b0:	9b04      	ldr	r3, [sp, #16]
 80037b2:	2208      	movs	r2, #8
 80037b4:	609a      	str	r2, [r3, #8]
 80037b6:	e683      	b.n	80034c0 <HAL_PCD_IRQHandler+0x308>
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037b8:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80037bc:	f001 fb4c 	bl	8004e58 <USB_EP0_OutStart>
 80037c0:	6820      	ldr	r0, [r4, #0]
 80037c2:	e68f      	b.n	80034e4 <HAL_PCD_IRQHandler+0x32c>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80037c4:	f01c 0f20 	tst.w	ip, #32
 80037c8:	d1cd      	bne.n	8003766 <HAL_PCD_IRQHandler+0x5ae>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80037ca:	f01c 0f28 	tst.w	ip, #40	; 0x28
 80037ce:	d1cc      	bne.n	800376a <HAL_PCD_IRQHandler+0x5b2>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037d0:	491e      	ldr	r1, [pc, #120]	; (800384c <HAL_PCD_IRQHandler+0x694>)
 80037d2:	428a      	cmp	r2, r1
 80037d4:	d902      	bls.n	80037dc <HAL_PCD_IRQHandler+0x624>
 80037d6:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 80037da:	d130      	bne.n	800383e <HAL_PCD_IRQHandler+0x686>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80037dc:	691b      	ldr	r3, [r3, #16]
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80037de:	f8da 1208 	ldr.w	r1, [sl, #520]	; 0x208
          hpcd->OUT_ep[epnum].maxpacket -
 80037e2:	f8da 0204 	ldr.w	r0, [sl, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80037e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80037ea:	1ac3      	subs	r3, r0, r3
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80037ec:	4408      	add	r0, r1
 80037ee:	f8ca 0208 	str.w	r0, [sl, #520]	; 0x208
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037f2:	4631      	mov	r1, r6
        hpcd->OUT_ep[epnum].xfer_count =
 80037f4:	f8ca 3214 	str.w	r3, [sl, #532]	; 0x214
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037f8:	4620      	mov	r0, r4
 80037fa:	f003 fea5 	bl	8007548 <HAL_PCD_DataOutStageCallback>
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037fe:	f1b9 0f00 	cmp.w	r9, #0
 8003802:	f47f ae5d 	bne.w	80034c0 <HAL_PCD_IRQHandler+0x308>
 8003806:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 800380a:	2b00      	cmp	r3, #0
 800380c:	f47f ae58 	bne.w	80034c0 <HAL_PCD_IRQHandler+0x308>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003810:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8003814:	2101      	movs	r1, #1
 8003816:	6820      	ldr	r0, [r4, #0]
 8003818:	f001 fb1e 	bl	8004e58 <USB_EP0_OutStart>
 800381c:	e650      	b.n	80034c0 <HAL_PCD_IRQHandler+0x308>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800381e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003822:	f01b 0f08 	tst.w	fp, #8
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003826:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003828:	f43f ae4f 	beq.w	80034ca <HAL_PCD_IRQHandler+0x312>
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800382c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800382e:	6898      	ldr	r0, [r3, #8]
 8003830:	e71c      	b.n	800366c <HAL_PCD_IRQHandler+0x4b4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003832:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8003836:	6820      	ldr	r0, [r4, #0]
 8003838:	f001 fb0e 	bl	8004e58 <USB_EP0_OutStart>
 800383c:	e725      	b.n	800368a <HAL_PCD_IRQHandler+0x4d2>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800383e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003842:	609a      	str	r2, [r3, #8]
 8003844:	e791      	b.n	800376a <HAL_PCD_IRQHandler+0x5b2>
 8003846:	bf00      	nop
 8003848:	4f54310a 	.word	0x4f54310a
 800384c:	4f54300a 	.word	0x4f54300a

08003850 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8003850:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8003854:	2a01      	cmp	r2, #1
 8003856:	d101      	bne.n	800385c <HAL_PCD_SetAddress+0xc>
 8003858:	2002      	movs	r0, #2
 800385a:	4770      	bx	lr
{
 800385c:	b510      	push	{r4, lr}
 800385e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003860:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8003862:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  __HAL_LOCK(hpcd);
 8003866:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800386a:	6800      	ldr	r0, [r0, #0]
 800386c:	f001 fa7a 	bl	8004d64 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003870:	2000      	movs	r0, #0
 8003872:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003876:	bd10      	pop	{r4, pc}

08003878 <HAL_PCD_EP_Open>:
{
 8003878:	b570      	push	{r4, r5, r6, lr}
 800387a:	f001 040f 	and.w	r4, r1, #15
    ep->is_in = 1U;
 800387e:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 8003882:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep->is_in = 1U;
 8003886:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800388a:	f04f 011c 	mov.w	r1, #28
  if ((ep_addr & 0x80U) == 0x80U)
 800388e:	d121      	bne.n	80038d4 <HAL_PCD_EP_Open+0x5c>
    ep->is_in = 0U;
 8003890:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003892:	fb01 0104 	mla	r1, r1, r4, r0
    ep->is_in = 0U;
 8003896:	f885 61fd 	strb.w	r6, [r5, #509]	; 0x1fd
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800389a:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  if (ep->is_in != 0U)
 800389e:	784d      	ldrb	r5, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038a0:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 80038a2:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 80038a4:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80038a6:	b105      	cbz	r5, 80038aa <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 80038a8:	80cc      	strh	r4, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 80038aa:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80038ac:	bf04      	itt	eq
 80038ae:	2300      	moveq	r3, #0
 80038b0:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80038b2:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_PCD_EP_Open+0x46>
 80038ba:	2002      	movs	r0, #2
}
 80038bc:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 80038be:	2301      	movs	r3, #1
 80038c0:	4604      	mov	r4, r0
 80038c2:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80038c6:	6800      	ldr	r0, [r0, #0]
 80038c8:	f000 ffa8 	bl	800481c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038cc:	2000      	movs	r0, #0
 80038ce:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return ret;
 80038d2:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 1U;
 80038d4:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038d6:	fb01 0104 	mla	r1, r1, r4, r0
    ep->is_in = 1U;
 80038da:	f885 603d 	strb.w	r6, [r5, #61]	; 0x3d
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038de:	313c      	adds	r1, #60	; 0x3c
 80038e0:	e7dd      	b.n	800389e <HAL_PCD_EP_Open+0x26>
 80038e2:	bf00      	nop

080038e4 <HAL_PCD_EP_Close>:
{
 80038e4:	f001 030f 	and.w	r3, r1, #15
    ep->is_in = 1U;
 80038e8:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 80038ec:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80038f0:	b510      	push	{r4, lr}
    ep->is_in = 1U;
 80038f2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038f6:	f04f 011c 	mov.w	r1, #28
  if ((ep_addr & 0x80U) == 0x80U)
 80038fa:	d118      	bne.n	800392e <HAL_PCD_EP_Close+0x4a>
    ep->is_in = 0U;
 80038fc:	2400      	movs	r4, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038fe:	fb01 0103 	mla	r1, r1, r3, r0
    ep->is_in = 0U;
 8003902:	f882 41fd 	strb.w	r4, [r2, #509]	; 0x1fd
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003906:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->num   = ep_addr & EP_ADDR_MSK;
 800390a:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800390c:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_PCD_EP_Close+0x34>
 8003914:	2002      	movs	r0, #2
}
 8003916:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003918:	2301      	movs	r3, #1
 800391a:	4604      	mov	r4, r0
 800391c:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003920:	6800      	ldr	r0, [r0, #0]
 8003922:	f000 ffc7 	bl	80048b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003926:	2000      	movs	r0, #0
 8003928:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800392c:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 800392e:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003930:	fb01 0103 	mla	r1, r1, r3, r0
    ep->is_in = 1U;
 8003934:	f882 403d 	strb.w	r4, [r2, #61]	; 0x3d
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003938:	313c      	adds	r1, #60	; 0x3c
 800393a:	e7e6      	b.n	800390a <HAL_PCD_EP_Close+0x26>

0800393c <HAL_PCD_EP_Receive>:
{
 800393c:	b538      	push	{r3, r4, r5, lr}
 800393e:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_buff = pBuf;
 8003942:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
 8003946:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep->xfer_count = 0U;
 800394a:	2100      	movs	r1, #0
  ep->xfer_buff = pBuf;
 800394c:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8003950:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8003954:	f884 11fd 	strb.w	r1, [r4, #509]	; 0x1fd
  ep->xfer_len = len;
 8003958:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->num = ep_addr & EP_ADDR_MSK;
 800395c:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8003960:	6903      	ldr	r3, [r0, #16]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003962:	211c      	movs	r1, #28
 8003964:	fb01 0105 	mla	r1, r1, r5, r0
  if (hpcd->Init.dma_enable == 1U)
 8003968:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800396a:	bf08      	it	eq
 800396c:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003970:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003974:	b2da      	uxtb	r2, r3
 8003976:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003978:	b11d      	cbz	r5, 8003982 <HAL_PCD_EP_Receive+0x46>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800397a:	f000 ffd7 	bl	800492c <USB_EPStartXfer>
}
 800397e:	2000      	movs	r0, #0
 8003980:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003982:	f001 f8dd 	bl	8004b40 <USB_EP0StartXfer>
}
 8003986:	2000      	movs	r0, #0
 8003988:	bd38      	pop	{r3, r4, r5, pc}
 800398a:	bf00      	nop

0800398c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800398c:	f001 010f 	and.w	r1, r1, #15
 8003990:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003994:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8003998:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop

080039a0 <HAL_PCD_EP_Transmit>:
{
 80039a0:	b570      	push	{r4, r5, r6, lr}
 80039a2:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_buff = pBuf;
 80039a6:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
 80039aa:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep->is_in = 1U;
 80039ae:	2101      	movs	r1, #1
  ep->xfer_count = 0U;
 80039b0:	2600      	movs	r6, #0
  ep->xfer_buff = pBuf;
 80039b2:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 80039b4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  ep->xfer_len = len;
 80039b8:	6523      	str	r3, [r4, #80]	; 0x50
  ep->num = ep_addr & EP_ADDR_MSK;
 80039ba:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 80039be:	6566      	str	r6, [r4, #84]	; 0x54
  if (hpcd->Init.dma_enable == 1U)
 80039c0:	6903      	ldr	r3, [r0, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039c2:	211c      	movs	r1, #28
 80039c4:	fb01 0105 	mla	r1, r1, r5, r0
  if (hpcd->Init.dma_enable == 1U)
 80039c8:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 80039ca:	bf08      	it	eq
 80039cc:	64e2      	streq	r2, [r4, #76]	; 0x4c
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039ce:	313c      	adds	r1, #60	; 0x3c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039d4:	b11d      	cbz	r5, 80039de <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039d6:	f000 ffa9 	bl	800492c <USB_EPStartXfer>
}
 80039da:	2000      	movs	r0, #0
 80039dc:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039de:	f001 f8af 	bl	8004b40 <USB_EP0StartXfer>
}
 80039e2:	2000      	movs	r0, #0
 80039e4:	bd70      	pop	{r4, r5, r6, pc}
 80039e6:	bf00      	nop

080039e8 <HAL_PCD_EP_SetStall>:
{
 80039e8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039ea:	6843      	ldr	r3, [r0, #4]
 80039ec:	f001 050f 	and.w	r5, r1, #15
 80039f0:	429d      	cmp	r5, r3
 80039f2:	d816      	bhi.n	8003a22 <HAL_PCD_EP_SetStall+0x3a>
  if ((0x80U & ep_addr) == 0x80U)
 80039f4:	060b      	lsls	r3, r1, #24
 80039f6:	d421      	bmi.n	8003a3c <HAL_PCD_EP_SetStall+0x54>
    ep->is_in = 0U;
 80039f8:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80039fc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8003a00:	241c      	movs	r4, #28
    ep->is_in = 0U;
 8003a02:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8003a04:	fb04 0101 	mla	r1, r4, r1, r0
    ep->is_in = 0U;
 8003a08:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
    ep = &hpcd->OUT_ep[ep_addr];
 8003a0c:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->is_stall = 1U;
 8003a10:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a12:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8003a14:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8003a16:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d103      	bne.n	8003a26 <HAL_PCD_EP_SetStall+0x3e>
 8003a1e:	2002      	movs	r0, #2
}
 8003a20:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003a22:	2001      	movs	r0, #1
 8003a24:	bd38      	pop	{r3, r4, r5, pc}
 8003a26:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003a28:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a2c:	6800      	ldr	r0, [r0, #0]
 8003a2e:	f001 f93f 	bl	8004cb0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a32:	b17d      	cbz	r5, 8003a54 <HAL_PCD_EP_SetStall+0x6c>
  __HAL_UNLOCK(hpcd);
 8003a34:	2000      	movs	r0, #0
 8003a36:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003a3a:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8003a3c:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8003a40:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a44:	211c      	movs	r1, #28
    ep->is_in = 1U;
 8003a46:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a48:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a50:	313c      	adds	r1, #60	; 0x3c
 8003a52:	e7dd      	b.n	8003a10 <HAL_PCD_EP_SetStall+0x28>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a54:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8003a58:	7c21      	ldrb	r1, [r4, #16]
 8003a5a:	6820      	ldr	r0, [r4, #0]
 8003a5c:	f001 f9fc 	bl	8004e58 <USB_EP0_OutStart>
 8003a60:	e7e8      	b.n	8003a34 <HAL_PCD_EP_SetStall+0x4c>
 8003a62:	bf00      	nop

08003a64 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a64:	6842      	ldr	r2, [r0, #4]
{
 8003a66:	b538      	push	{r3, r4, r5, lr}
 8003a68:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d818      	bhi.n	8003aa2 <HAL_PCD_EP_ClrStall+0x3e>
    ep->is_in = 1U;
 8003a70:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8003a74:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep->is_in = 1U;
 8003a78:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a7c:	f04f 011c 	mov.w	r1, #28
  if ((0x80U & ep_addr) == 0x80U)
 8003a80:	d11c      	bne.n	8003abc <HAL_PCD_EP_ClrStall+0x58>
    ep->is_in = 0U;
 8003a82:	2400      	movs	r4, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a84:	fb01 0103 	mla	r1, r1, r3, r0
    ep->is_in = 0U;
 8003a88:	f882 41fd 	strb.w	r4, [r2, #509]	; 0x1fd
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a8c:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->is_stall = 0U;
 8003a90:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a92:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8003a94:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8003a96:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d103      	bne.n	8003aa6 <HAL_PCD_EP_ClrStall+0x42>
 8003a9e:	2002      	movs	r0, #2
}
 8003aa0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003aa2:	2001      	movs	r0, #1
 8003aa4:	bd38      	pop	{r3, r4, r5, pc}
 8003aa6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003aae:	6800      	ldr	r0, [r0, #0]
 8003ab0:	f001 f92c 	bl	8004d0c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ab4:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003ab8:	4628      	mov	r0, r5
 8003aba:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8003abc:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003abe:	fb01 0103 	mla	r1, r1, r3, r0
    ep->is_in = 1U;
 8003ac2:	f882 403d 	strb.w	r4, [r2, #61]	; 0x3d
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ac6:	313c      	adds	r1, #60	; 0x3c
 8003ac8:	e7e2      	b.n	8003a90 <HAL_PCD_EP_ClrStall+0x2c>
 8003aca:	bf00      	nop

08003acc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003acc:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ace:	6805      	ldr	r5, [r0, #0]
 8003ad0:	6a6c      	ldr	r4, [r5, #36]	; 0x24

  if (fifo == 0U)
 8003ad2:	b1c9      	cbz	r1, 8003b08 <HAL_PCDEx_SetTxFiFo+0x3c>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003ad4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8003ad6:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003ad8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003adc:	d00b      	beq.n	8003af6 <HAL_PCDEx_SetTxFiFo+0x2a>
 8003ade:	2300      	movs	r3, #0
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003ae0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8003ae4:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8003ae8:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003aea:	6840      	ldr	r0, [r0, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	428b      	cmp	r3, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003af0:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003af4:	d3f4      	bcc.n	8003ae0 <HAL_PCDEx_SetTxFiFo+0x14>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003af6:	3140      	adds	r1, #64	; 0x40
 8003af8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8003afc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8003b00:	604c      	str	r4, [r1, #4]
  }

  return HAL_OK;
}
 8003b02:	2000      	movs	r0, #0
 8003b04:	bc30      	pop	{r4, r5}
 8003b06:	4770      	bx	lr
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003b08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8003b0c:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8003b0e:	2000      	movs	r0, #0
 8003b10:	bc30      	pop	{r4, r5}
 8003b12:	4770      	bx	lr

08003b14 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8003b14:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8003b16:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8003b18:	6259      	str	r1, [r3, #36]	; 0x24
}
 8003b1a:	4770      	bx	lr

08003b1c <HAL_PCDEx_LPM_Callback>:
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop

08003b20 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b20:	2800      	cmp	r0, #0
 8003b22:	f000 81d7 	beq.w	8003ed4 <HAL_RCC_OscConfig+0x3b4>
{
 8003b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b2a:	6803      	ldr	r3, [r0, #0]
 8003b2c:	07dd      	lsls	r5, r3, #31
{
 8003b2e:	b082      	sub	sp, #8
 8003b30:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b32:	d52f      	bpl.n	8003b94 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b34:	49ab      	ldr	r1, [pc, #684]	; (8003de4 <HAL_RCC_OscConfig+0x2c4>)
 8003b36:	688a      	ldr	r2, [r1, #8]
 8003b38:	f002 020c 	and.w	r2, r2, #12
 8003b3c:	2a04      	cmp	r2, #4
 8003b3e:	f000 8123 	beq.w	8003d88 <HAL_RCC_OscConfig+0x268>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b42:	688a      	ldr	r2, [r1, #8]
 8003b44:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b48:	2a08      	cmp	r2, #8
 8003b4a:	f000 8119 	beq.w	8003d80 <HAL_RCC_OscConfig+0x260>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b4e:	6863      	ldr	r3, [r4, #4]
 8003b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b54:	f000 815a 	beq.w	8003e0c <HAL_RCC_OscConfig+0x2ec>
 8003b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b5c:	f000 80e5 	beq.w	8003d2a <HAL_RCC_OscConfig+0x20a>
 8003b60:	4da0      	ldr	r5, [pc, #640]	; (8003de4 <HAL_RCC_OscConfig+0x2c4>)
 8003b62:	682a      	ldr	r2, [r5, #0]
 8003b64:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b68:	602a      	str	r2, [r5, #0]
 8003b6a:	682a      	ldr	r2, [r5, #0]
 8003b6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b70:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f040 80e2 	bne.w	8003d3c <HAL_RCC_OscConfig+0x21c>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b78:	f7fd fc66 	bl	8001448 <HAL_GetTick>
 8003b7c:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b7e:	e005      	b.n	8003b8c <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b80:	f7fd fc62 	bl	8001448 <HAL_GetTick>
 8003b84:	1b80      	subs	r0, r0, r6
 8003b86:	2864      	cmp	r0, #100	; 0x64
 8003b88:	f200 80f6 	bhi.w	8003d78 <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b8c:	682b      	ldr	r3, [r5, #0]
 8003b8e:	039b      	lsls	r3, r3, #14
 8003b90:	d4f6      	bmi.n	8003b80 <HAL_RCC_OscConfig+0x60>
 8003b92:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b94:	079f      	lsls	r7, r3, #30
 8003b96:	d528      	bpl.n	8003bea <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b98:	4a92      	ldr	r2, [pc, #584]	; (8003de4 <HAL_RCC_OscConfig+0x2c4>)
 8003b9a:	6891      	ldr	r1, [r2, #8]
 8003b9c:	f011 0f0c 	tst.w	r1, #12
 8003ba0:	f000 8090 	beq.w	8003cc4 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ba4:	6891      	ldr	r1, [r2, #8]
 8003ba6:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003baa:	2908      	cmp	r1, #8
 8003bac:	f000 8086 	beq.w	8003cbc <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bb0:	68e3      	ldr	r3, [r4, #12]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 810f 	beq.w	8003dd6 <HAL_RCC_OscConfig+0x2b6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bb8:	4b8b      	ldr	r3, [pc, #556]	; (8003de8 <HAL_RCC_OscConfig+0x2c8>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bba:	4d8a      	ldr	r5, [pc, #552]	; (8003de4 <HAL_RCC_OscConfig+0x2c4>)
        __HAL_RCC_HSI_ENABLE();
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003bc0:	f7fd fc42 	bl	8001448 <HAL_GetTick>
 8003bc4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc6:	e005      	b.n	8003bd4 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bc8:	f7fd fc3e 	bl	8001448 <HAL_GetTick>
 8003bcc:	1b80      	subs	r0, r0, r6
 8003bce:	2802      	cmp	r0, #2
 8003bd0:	f200 80d2 	bhi.w	8003d78 <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd4:	682b      	ldr	r3, [r5, #0]
 8003bd6:	0798      	lsls	r0, r3, #30
 8003bd8:	d5f6      	bpl.n	8003bc8 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bda:	682b      	ldr	r3, [r5, #0]
 8003bdc:	6922      	ldr	r2, [r4, #16]
 8003bde:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003be2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003be6:	602b      	str	r3, [r5, #0]
 8003be8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bea:	071a      	lsls	r2, r3, #28
 8003bec:	d452      	bmi.n	8003c94 <HAL_RCC_OscConfig+0x174>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bee:	0758      	lsls	r0, r3, #29
 8003bf0:	d530      	bpl.n	8003c54 <HAL_RCC_OscConfig+0x134>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bf2:	4a7c      	ldr	r2, [pc, #496]	; (8003de4 <HAL_RCC_OscConfig+0x2c4>)
 8003bf4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003bf6:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	d07e      	beq.n	8003cfa <HAL_RCC_OscConfig+0x1da>
    FlagStatus       pwrclkchanged = RESET;
 8003bfc:	2600      	movs	r6, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfe:	4d7b      	ldr	r5, [pc, #492]	; (8003dec <HAL_RCC_OscConfig+0x2cc>)
 8003c00:	682b      	ldr	r3, [r5, #0]
 8003c02:	05d9      	lsls	r1, r3, #23
 8003c04:	f140 80a8 	bpl.w	8003d58 <HAL_RCC_OscConfig+0x238>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c08:	68a3      	ldr	r3, [r4, #8]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	f000 8128 	beq.w	8003e60 <HAL_RCC_OscConfig+0x340>
 8003c10:	2b05      	cmp	r3, #5
 8003c12:	f000 80c3 	beq.w	8003d9c <HAL_RCC_OscConfig+0x27c>
 8003c16:	4d73      	ldr	r5, [pc, #460]	; (8003de4 <HAL_RCC_OscConfig+0x2c4>)
 8003c18:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003c1a:	f022 0201 	bic.w	r2, r2, #1
 8003c1e:	672a      	str	r2, [r5, #112]	; 0x70
 8003c20:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003c22:	f022 0204 	bic.w	r2, r2, #4
 8003c26:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f040 80c0 	bne.w	8003dae <HAL_RCC_OscConfig+0x28e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c2e:	f7fd fc0b 	bl	8001448 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c32:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003c36:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c38:	e006      	b.n	8003c48 <HAL_RCC_OscConfig+0x128>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c3a:	f7fd fc05 	bl	8001448 <HAL_GetTick>
 8003c3e:	eba0 0008 	sub.w	r0, r0, r8
 8003c42:	42b8      	cmp	r0, r7
 8003c44:	f200 8098 	bhi.w	8003d78 <HAL_RCC_OscConfig+0x258>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c48:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003c4a:	0798      	lsls	r0, r3, #30
 8003c4c:	d4f5      	bmi.n	8003c3a <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c4e:	2e00      	cmp	r6, #0
 8003c50:	f040 810c 	bne.w	8003e6c <HAL_RCC_OscConfig+0x34c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c54:	69a0      	ldr	r0, [r4, #24]
 8003c56:	b1c8      	cbz	r0, 8003c8c <HAL_RCC_OscConfig+0x16c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c58:	4d62      	ldr	r5, [pc, #392]	; (8003de4 <HAL_RCC_OscConfig+0x2c4>)
 8003c5a:	68aa      	ldr	r2, [r5, #8]
 8003c5c:	f002 020c 	and.w	r2, r2, #12
 8003c60:	2a08      	cmp	r2, #8
 8003c62:	f000 80d9 	beq.w	8003e18 <HAL_RCC_OscConfig+0x2f8>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c66:	4a62      	ldr	r2, [pc, #392]	; (8003df0 <HAL_RCC_OscConfig+0x2d0>)
 8003c68:	2100      	movs	r1, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c6a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003c6c:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c6e:	f000 8103 	beq.w	8003e78 <HAL_RCC_OscConfig+0x358>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c72:	f7fd fbe9 	bl	8001448 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c76:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8003c78:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c7a:	e004      	b.n	8003c86 <HAL_RCC_OscConfig+0x166>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c7c:	f7fd fbe4 	bl	8001448 <HAL_GetTick>
 8003c80:	1b40      	subs	r0, r0, r5
 8003c82:	2802      	cmp	r0, #2
 8003c84:	d878      	bhi.n	8003d78 <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	019b      	lsls	r3, r3, #6
 8003c8a:	d4f7      	bmi.n	8003c7c <HAL_RCC_OscConfig+0x15c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003c8c:	2000      	movs	r0, #0
}
 8003c8e:	b002      	add	sp, #8
 8003c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c94:	6963      	ldr	r3, [r4, #20]
 8003c96:	b303      	cbz	r3, 8003cda <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8003c98:	4b56      	ldr	r3, [pc, #344]	; (8003df4 <HAL_RCC_OscConfig+0x2d4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c9a:	4d52      	ldr	r5, [pc, #328]	; (8003de4 <HAL_RCC_OscConfig+0x2c4>)
      __HAL_RCC_LSI_ENABLE();
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003ca0:	f7fd fbd2 	bl	8001448 <HAL_GetTick>
 8003ca4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ca6:	e004      	b.n	8003cb2 <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ca8:	f7fd fbce 	bl	8001448 <HAL_GetTick>
 8003cac:	1b80      	subs	r0, r0, r6
 8003cae:	2802      	cmp	r0, #2
 8003cb0:	d862      	bhi.n	8003d78 <HAL_RCC_OscConfig+0x258>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cb2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003cb4:	079b      	lsls	r3, r3, #30
 8003cb6:	d5f7      	bpl.n	8003ca8 <HAL_RCC_OscConfig+0x188>
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	e798      	b.n	8003bee <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cbc:	6852      	ldr	r2, [r2, #4]
 8003cbe:	0256      	lsls	r6, r2, #9
 8003cc0:	f53f af76 	bmi.w	8003bb0 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cc4:	4a47      	ldr	r2, [pc, #284]	; (8003de4 <HAL_RCC_OscConfig+0x2c4>)
 8003cc6:	6812      	ldr	r2, [r2, #0]
 8003cc8:	0795      	lsls	r5, r2, #30
 8003cca:	d522      	bpl.n	8003d12 <HAL_RCC_OscConfig+0x1f2>
 8003ccc:	68e2      	ldr	r2, [r4, #12]
 8003cce:	2a01      	cmp	r2, #1
 8003cd0:	d01f      	beq.n	8003d12 <HAL_RCC_OscConfig+0x1f2>
        return HAL_ERROR;
 8003cd2:	2001      	movs	r0, #1
}
 8003cd4:	b002      	add	sp, #8
 8003cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8003cda:	4a46      	ldr	r2, [pc, #280]	; (8003df4 <HAL_RCC_OscConfig+0x2d4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cdc:	4d41      	ldr	r5, [pc, #260]	; (8003de4 <HAL_RCC_OscConfig+0x2c4>)
      __HAL_RCC_LSI_DISABLE();
 8003cde:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003ce0:	f7fd fbb2 	bl	8001448 <HAL_GetTick>
 8003ce4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce6:	e004      	b.n	8003cf2 <HAL_RCC_OscConfig+0x1d2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ce8:	f7fd fbae 	bl	8001448 <HAL_GetTick>
 8003cec:	1b80      	subs	r0, r0, r6
 8003cee:	2802      	cmp	r0, #2
 8003cf0:	d842      	bhi.n	8003d78 <HAL_RCC_OscConfig+0x258>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003cf4:	079f      	lsls	r7, r3, #30
 8003cf6:	d4f7      	bmi.n	8003ce8 <HAL_RCC_OscConfig+0x1c8>
 8003cf8:	e7de      	b.n	8003cb8 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cfa:	9301      	str	r3, [sp, #4]
 8003cfc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d02:	6413      	str	r3, [r2, #64]	; 0x40
 8003d04:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0a:	9301      	str	r3, [sp, #4]
 8003d0c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003d0e:	2601      	movs	r6, #1
 8003d10:	e775      	b.n	8003bfe <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d12:	4934      	ldr	r1, [pc, #208]	; (8003de4 <HAL_RCC_OscConfig+0x2c4>)
 8003d14:	6920      	ldr	r0, [r4, #16]
 8003d16:	680a      	ldr	r2, [r1, #0]
 8003d18:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003d1c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003d20:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d22:	071a      	lsls	r2, r3, #28
 8003d24:	f57f af63 	bpl.w	8003bee <HAL_RCC_OscConfig+0xce>
 8003d28:	e7b4      	b.n	8003c94 <HAL_RCC_OscConfig+0x174>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d2a:	4b2e      	ldr	r3, [pc, #184]	; (8003de4 <HAL_RCC_OscConfig+0x2c4>)
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003d3a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003d3c:	f7fd fb84 	bl	8001448 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d40:	4d28      	ldr	r5, [pc, #160]	; (8003de4 <HAL_RCC_OscConfig+0x2c4>)
        tickstart = HAL_GetTick();
 8003d42:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d44:	e004      	b.n	8003d50 <HAL_RCC_OscConfig+0x230>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d46:	f7fd fb7f 	bl	8001448 <HAL_GetTick>
 8003d4a:	1b80      	subs	r0, r0, r6
 8003d4c:	2864      	cmp	r0, #100	; 0x64
 8003d4e:	d813      	bhi.n	8003d78 <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d50:	682b      	ldr	r3, [r5, #0]
 8003d52:	039a      	lsls	r2, r3, #14
 8003d54:	d5f7      	bpl.n	8003d46 <HAL_RCC_OscConfig+0x226>
 8003d56:	e71c      	b.n	8003b92 <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d58:	682b      	ldr	r3, [r5, #0]
 8003d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003d60:	f7fd fb72 	bl	8001448 <HAL_GetTick>
 8003d64:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d66:	682b      	ldr	r3, [r5, #0]
 8003d68:	05da      	lsls	r2, r3, #23
 8003d6a:	f53f af4d 	bmi.w	8003c08 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6e:	f7fd fb6b 	bl	8001448 <HAL_GetTick>
 8003d72:	1bc0      	subs	r0, r0, r7
 8003d74:	2802      	cmp	r0, #2
 8003d76:	d9f6      	bls.n	8003d66 <HAL_RCC_OscConfig+0x246>
            return HAL_TIMEOUT;
 8003d78:	2003      	movs	r0, #3
}
 8003d7a:	b002      	add	sp, #8
 8003d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d80:	684a      	ldr	r2, [r1, #4]
 8003d82:	0250      	lsls	r0, r2, #9
 8003d84:	f57f aee3 	bpl.w	8003b4e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d88:	4a16      	ldr	r2, [pc, #88]	; (8003de4 <HAL_RCC_OscConfig+0x2c4>)
 8003d8a:	6812      	ldr	r2, [r2, #0]
 8003d8c:	0391      	lsls	r1, r2, #14
 8003d8e:	f57f af01 	bpl.w	8003b94 <HAL_RCC_OscConfig+0x74>
 8003d92:	6862      	ldr	r2, [r4, #4]
 8003d94:	2a00      	cmp	r2, #0
 8003d96:	f47f aefd 	bne.w	8003b94 <HAL_RCC_OscConfig+0x74>
 8003d9a:	e79a      	b.n	8003cd2 <HAL_RCC_OscConfig+0x1b2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d9c:	4b11      	ldr	r3, [pc, #68]	; (8003de4 <HAL_RCC_OscConfig+0x2c4>)
 8003d9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003da0:	f042 0204 	orr.w	r2, r2, #4
 8003da4:	671a      	str	r2, [r3, #112]	; 0x70
 8003da6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003da8:	f042 0201 	orr.w	r2, r2, #1
 8003dac:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003dae:	f7fd fb4b 	bl	8001448 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db2:	4d0c      	ldr	r5, [pc, #48]	; (8003de4 <HAL_RCC_OscConfig+0x2c4>)
      tickstart = HAL_GetTick();
 8003db4:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003db6:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dba:	e005      	b.n	8003dc8 <HAL_RCC_OscConfig+0x2a8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dbc:	f7fd fb44 	bl	8001448 <HAL_GetTick>
 8003dc0:	eba0 0008 	sub.w	r0, r0, r8
 8003dc4:	42b8      	cmp	r0, r7
 8003dc6:	d8d7      	bhi.n	8003d78 <HAL_RCC_OscConfig+0x258>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003dca:	079b      	lsls	r3, r3, #30
 8003dcc:	d5f6      	bpl.n	8003dbc <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8003dce:	2e00      	cmp	r6, #0
 8003dd0:	f43f af40 	beq.w	8003c54 <HAL_RCC_OscConfig+0x134>
 8003dd4:	e04a      	b.n	8003e6c <HAL_RCC_OscConfig+0x34c>
        __HAL_RCC_HSI_DISABLE();
 8003dd6:	4a04      	ldr	r2, [pc, #16]	; (8003de8 <HAL_RCC_OscConfig+0x2c8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd8:	4d02      	ldr	r5, [pc, #8]	; (8003de4 <HAL_RCC_OscConfig+0x2c4>)
        __HAL_RCC_HSI_DISABLE();
 8003dda:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003ddc:	f7fd fb34 	bl	8001448 <HAL_GetTick>
 8003de0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003de2:	e00e      	b.n	8003e02 <HAL_RCC_OscConfig+0x2e2>
 8003de4:	40023800 	.word	0x40023800
 8003de8:	42470000 	.word	0x42470000
 8003dec:	40007000 	.word	0x40007000
 8003df0:	42470060 	.word	0x42470060
 8003df4:	42470e80 	.word	0x42470e80
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003df8:	f7fd fb26 	bl	8001448 <HAL_GetTick>
 8003dfc:	1b80      	subs	r0, r0, r6
 8003dfe:	2802      	cmp	r0, #2
 8003e00:	d8ba      	bhi.n	8003d78 <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e02:	682b      	ldr	r3, [r5, #0]
 8003e04:	0799      	lsls	r1, r3, #30
 8003e06:	d4f7      	bmi.n	8003df8 <HAL_RCC_OscConfig+0x2d8>
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	e6ee      	b.n	8003bea <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e0c:	4a32      	ldr	r2, [pc, #200]	; (8003ed8 <HAL_RCC_OscConfig+0x3b8>)
 8003e0e:	6813      	ldr	r3, [r2, #0]
 8003e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	e791      	b.n	8003d3c <HAL_RCC_OscConfig+0x21c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e18:	2801      	cmp	r0, #1
 8003e1a:	f43f af38 	beq.w	8003c8e <HAL_RCC_OscConfig+0x16e>
        pll_config = RCC->CFGR;
 8003e1e:	68ab      	ldr	r3, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e20:	69e2      	ldr	r2, [r4, #28]
 8003e22:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8003e26:	4291      	cmp	r1, r2
 8003e28:	f47f af53 	bne.w	8003cd2 <HAL_RCC_OscConfig+0x1b2>
 8003e2c:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e2e:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e32:	4291      	cmp	r1, r2
 8003e34:	f47f af4d 	bne.w	8003cd2 <HAL_RCC_OscConfig+0x1b2>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e38:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e3e:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e40:	428a      	cmp	r2, r1
 8003e42:	f47f af46 	bne.w	8003cd2 <HAL_RCC_OscConfig+0x1b2>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e46:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e48:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e4c:	4291      	cmp	r1, r2
 8003e4e:	f47f af40 	bne.w	8003cd2 <HAL_RCC_OscConfig+0x1b2>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e52:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003e54:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 8003e58:	1a18      	subs	r0, r3, r0
 8003e5a:	bf18      	it	ne
 8003e5c:	2001      	movne	r0, #1
 8003e5e:	e716      	b.n	8003c8e <HAL_RCC_OscConfig+0x16e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e60:	4a1d      	ldr	r2, [pc, #116]	; (8003ed8 <HAL_RCC_OscConfig+0x3b8>)
 8003e62:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003e64:	f043 0301 	orr.w	r3, r3, #1
 8003e68:	6713      	str	r3, [r2, #112]	; 0x70
 8003e6a:	e7a0      	b.n	8003dae <HAL_RCC_OscConfig+0x28e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e6c:	4a1a      	ldr	r2, [pc, #104]	; (8003ed8 <HAL_RCC_OscConfig+0x3b8>)
 8003e6e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e74:	6413      	str	r3, [r2, #64]	; 0x40
 8003e76:	e6ed      	b.n	8003c54 <HAL_RCC_OscConfig+0x134>
        tickstart = HAL_GetTick();
 8003e78:	f7fd fae6 	bl	8001448 <HAL_GetTick>
 8003e7c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e7e:	e005      	b.n	8003e8c <HAL_RCC_OscConfig+0x36c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e80:	f7fd fae2 	bl	8001448 <HAL_GetTick>
 8003e84:	1b80      	subs	r0, r0, r6
 8003e86:	2802      	cmp	r0, #2
 8003e88:	f63f af76 	bhi.w	8003d78 <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e8c:	682b      	ldr	r3, [r5, #0]
 8003e8e:	0199      	lsls	r1, r3, #6
 8003e90:	d4f6      	bmi.n	8003e80 <HAL_RCC_OscConfig+0x360>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e92:	69e3      	ldr	r3, [r4, #28]
 8003e94:	6a27      	ldr	r7, [r4, #32]
 8003e96:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003e98:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003e9a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003e9c:	490f      	ldr	r1, [pc, #60]	; (8003edc <HAL_RCC_OscConfig+0x3bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9e:	4c0e      	ldr	r4, [pc, #56]	; (8003ed8 <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ea0:	433b      	orrs	r3, r7
 8003ea2:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8003ea6:	0852      	lsrs	r2, r2, #1
 8003ea8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003eac:	3a01      	subs	r2, #1
 8003eae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8003eb2:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003eb4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003eb6:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8003eb8:	f7fd fac6 	bl	8001448 <HAL_GetTick>
 8003ebc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ebe:	e005      	b.n	8003ecc <HAL_RCC_OscConfig+0x3ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ec0:	f7fd fac2 	bl	8001448 <HAL_GetTick>
 8003ec4:	1b40      	subs	r0, r0, r5
 8003ec6:	2802      	cmp	r0, #2
 8003ec8:	f63f af56 	bhi.w	8003d78 <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ecc:	6823      	ldr	r3, [r4, #0]
 8003ece:	019a      	lsls	r2, r3, #6
 8003ed0:	d5f6      	bpl.n	8003ec0 <HAL_RCC_OscConfig+0x3a0>
 8003ed2:	e6db      	b.n	8003c8c <HAL_RCC_OscConfig+0x16c>
    return HAL_ERROR;
 8003ed4:	2001      	movs	r0, #1
}
 8003ed6:	4770      	bx	lr
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	42470060 	.word	0x42470060

08003ee0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ee0:	4915      	ldr	r1, [pc, #84]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x58>)
{
 8003ee2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ee4:	688b      	ldr	r3, [r1, #8]
 8003ee6:	f003 030c 	and.w	r3, r3, #12
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d117      	bne.n	8003f1e <HAL_RCC_GetSysClockFreq+0x3e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003eee:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ef0:	684b      	ldr	r3, [r1, #4]
 8003ef2:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ef6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003efa:	d112      	bne.n	8003f22 <HAL_RCC_GetSysClockFreq+0x42>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003efc:	6849      	ldr	r1, [r1, #4]
 8003efe:	480f      	ldr	r0, [pc, #60]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x5c>)
 8003f00:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003f04:	fba1 0100 	umull	r0, r1, r1, r0
 8003f08:	f7fc f974 	bl	80001f4 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f0c:	4b0a      	ldr	r3, [pc, #40]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x58>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003f14:	3301      	adds	r3, #1
 8003f16:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003f18:	fbb0 f0f3 	udiv	r0, r0, r3
 8003f1c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8003f1e:	4807      	ldr	r0, [pc, #28]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003f20:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f22:	684b      	ldr	r3, [r1, #4]
 8003f24:	4805      	ldr	r0, [pc, #20]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x5c>)
 8003f26:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003f2a:	fba3 0100 	umull	r0, r1, r3, r0
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f7fc f960 	bl	80001f4 <__aeabi_uldivmod>
 8003f34:	e7ea      	b.n	8003f0c <HAL_RCC_GetSysClockFreq+0x2c>
 8003f36:	bf00      	nop
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	00f42400 	.word	0x00f42400

08003f40 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003f40:	b160      	cbz	r0, 8003f5c <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f42:	4a49      	ldr	r2, [pc, #292]	; (8004068 <HAL_RCC_ClockConfig+0x128>)
 8003f44:	6813      	ldr	r3, [r2, #0]
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	428b      	cmp	r3, r1
 8003f4c:	d208      	bcs.n	8003f60 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f4e:	b2cb      	uxtb	r3, r1
 8003f50:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f52:	6813      	ldr	r3, [r2, #0]
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	4299      	cmp	r1, r3
 8003f5a:	d001      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8003f5c:	2001      	movs	r0, #1
}
 8003f5e:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f60:	6803      	ldr	r3, [r0, #0]
{
 8003f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f66:	079d      	lsls	r5, r3, #30
 8003f68:	d514      	bpl.n	8003f94 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f6a:	075c      	lsls	r4, r3, #29
 8003f6c:	d504      	bpl.n	8003f78 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f6e:	4c3f      	ldr	r4, [pc, #252]	; (800406c <HAL_RCC_ClockConfig+0x12c>)
 8003f70:	68a2      	ldr	r2, [r4, #8]
 8003f72:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8003f76:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f78:	071a      	lsls	r2, r3, #28
 8003f7a:	d504      	bpl.n	8003f86 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f7c:	4c3b      	ldr	r4, [pc, #236]	; (800406c <HAL_RCC_ClockConfig+0x12c>)
 8003f7e:	68a2      	ldr	r2, [r4, #8]
 8003f80:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8003f84:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f86:	4c39      	ldr	r4, [pc, #228]	; (800406c <HAL_RCC_ClockConfig+0x12c>)
 8003f88:	6885      	ldr	r5, [r0, #8]
 8003f8a:	68a2      	ldr	r2, [r4, #8]
 8003f8c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003f90:	432a      	orrs	r2, r5
 8003f92:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f94:	07df      	lsls	r7, r3, #31
 8003f96:	4604      	mov	r4, r0
 8003f98:	460d      	mov	r5, r1
 8003f9a:	d522      	bpl.n	8003fe2 <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f9c:	6842      	ldr	r2, [r0, #4]
 8003f9e:	2a01      	cmp	r2, #1
 8003fa0:	d05c      	beq.n	800405c <HAL_RCC_ClockConfig+0x11c>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fa2:	1e93      	subs	r3, r2, #2
 8003fa4:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa6:	4b31      	ldr	r3, [pc, #196]	; (800406c <HAL_RCC_ClockConfig+0x12c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003faa:	d951      	bls.n	8004050 <HAL_RCC_ClockConfig+0x110>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fac:	0799      	lsls	r1, r3, #30
 8003fae:	d525      	bpl.n	8003ffc <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fb0:	4e2e      	ldr	r6, [pc, #184]	; (800406c <HAL_RCC_ClockConfig+0x12c>)
 8003fb2:	68b3      	ldr	r3, [r6, #8]
 8003fb4:	f023 0303 	bic.w	r3, r3, #3
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003fbc:	f7fd fa44 	bl	8001448 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc0:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003fc4:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc6:	e005      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc8:	f7fd fa3e 	bl	8001448 <HAL_GetTick>
 8003fcc:	eba0 0008 	sub.w	r0, r0, r8
 8003fd0:	42b8      	cmp	r0, r7
 8003fd2:	d840      	bhi.n	8004056 <HAL_RCC_ClockConfig+0x116>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd4:	68b3      	ldr	r3, [r6, #8]
 8003fd6:	6862      	ldr	r2, [r4, #4]
 8003fd8:	f003 030c 	and.w	r3, r3, #12
 8003fdc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003fe0:	d1f2      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fe2:	4a21      	ldr	r2, [pc, #132]	; (8004068 <HAL_RCC_ClockConfig+0x128>)
 8003fe4:	6813      	ldr	r3, [r2, #0]
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	429d      	cmp	r5, r3
 8003fec:	d209      	bcs.n	8004002 <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fee:	b2eb      	uxtb	r3, r5
 8003ff0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff2:	6813      	ldr	r3, [r2, #0]
 8003ff4:	f003 030f 	and.w	r3, r3, #15
 8003ff8:	429d      	cmp	r5, r3
 8003ffa:	d002      	beq.n	8004002 <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 8003ffc:	2001      	movs	r0, #1
 8003ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	075a      	lsls	r2, r3, #29
 8004006:	d506      	bpl.n	8004016 <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004008:	4918      	ldr	r1, [pc, #96]	; (800406c <HAL_RCC_ClockConfig+0x12c>)
 800400a:	68e0      	ldr	r0, [r4, #12]
 800400c:	688a      	ldr	r2, [r1, #8]
 800400e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8004012:	4302      	orrs	r2, r0
 8004014:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004016:	071b      	lsls	r3, r3, #28
 8004018:	d507      	bpl.n	800402a <HAL_RCC_ClockConfig+0xea>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800401a:	4a14      	ldr	r2, [pc, #80]	; (800406c <HAL_RCC_ClockConfig+0x12c>)
 800401c:	6921      	ldr	r1, [r4, #16]
 800401e:	6893      	ldr	r3, [r2, #8]
 8004020:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004024:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004028:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800402a:	f7ff ff59 	bl	8003ee0 <HAL_RCC_GetSysClockFreq>
 800402e:	4b0f      	ldr	r3, [pc, #60]	; (800406c <HAL_RCC_ClockConfig+0x12c>)
 8004030:	4c0f      	ldr	r4, [pc, #60]	; (8004070 <HAL_RCC_ClockConfig+0x130>)
 8004032:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 8004034:	490f      	ldr	r1, [pc, #60]	; (8004074 <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004036:	4a10      	ldr	r2, [pc, #64]	; (8004078 <HAL_RCC_ClockConfig+0x138>)
 8004038:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800403c:	5ce3      	ldrb	r3, [r4, r3]
 800403e:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 8004042:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004044:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 8004046:	f003 f913 	bl	8007270 <HAL_InitTick>
  return HAL_OK;
 800404a:	2000      	movs	r0, #0
 800404c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004050:	0198      	lsls	r0, r3, #6
 8004052:	d4ad      	bmi.n	8003fb0 <HAL_RCC_ClockConfig+0x70>
 8004054:	e7d2      	b.n	8003ffc <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8004056:	2003      	movs	r0, #3
}
 8004058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800405c:	4b03      	ldr	r3, [pc, #12]	; (800406c <HAL_RCC_ClockConfig+0x12c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	039e      	lsls	r6, r3, #14
 8004062:	d4a5      	bmi.n	8003fb0 <HAL_RCC_ClockConfig+0x70>
 8004064:	e7ca      	b.n	8003ffc <HAL_RCC_ClockConfig+0xbc>
 8004066:	bf00      	nop
 8004068:	40023c00 	.word	0x40023c00
 800406c:	40023800 	.word	0x40023800
 8004070:	0800a12c 	.word	0x0800a12c
 8004074:	20000004 	.word	0x20000004
 8004078:	2000011c 	.word	0x2000011c

0800407c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800407c:	4b01      	ldr	r3, [pc, #4]	; (8004084 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	2000011c 	.word	0x2000011c

08004088 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004088:	4b04      	ldr	r3, [pc, #16]	; (800409c <HAL_RCC_GetPCLK1Freq+0x14>)
 800408a:	4a05      	ldr	r2, [pc, #20]	; (80040a0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800408c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800408e:	4905      	ldr	r1, [pc, #20]	; (80040a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004090:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004094:	6808      	ldr	r0, [r1, #0]
 8004096:	5cd3      	ldrb	r3, [r2, r3]
}
 8004098:	40d8      	lsrs	r0, r3
 800409a:	4770      	bx	lr
 800409c:	40023800 	.word	0x40023800
 80040a0:	0800a13c 	.word	0x0800a13c
 80040a4:	2000011c 	.word	0x2000011c

080040a8 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80040a8:	4b0e      	ldr	r3, [pc, #56]	; (80040e4 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80040aa:	220f      	movs	r2, #15
 80040ac:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	f002 0203 	and.w	r2, r2, #3
 80040b4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80040bc:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80040c4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	08db      	lsrs	r3, r3, #3
{
 80040ca:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80040cc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80040d0:	4c05      	ldr	r4, [pc, #20]	; (80040e8 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80040d2:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80040d4:	6823      	ldr	r3, [r4, #0]
}
 80040d6:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	600b      	str	r3, [r1, #0]
}
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	40023800 	.word	0x40023800
 80040e8:	40023c00 	.word	0x40023c00

080040ec <HAL_TIM_Base_MspInit>:
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop

080040f0 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040f0:	2800      	cmp	r0, #0
 80040f2:	f000 8098 	beq.w	8004226 <HAL_TIM_Base_Init+0x136>
{
 80040f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040f8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80040fc:	4604      	mov	r4, r0
 80040fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004102:	2b00      	cmp	r3, #0
 8004104:	d066      	beq.n	80041d4 <HAL_TIM_Base_Init+0xe4>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004106:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004108:	4948      	ldr	r1, [pc, #288]	; (800422c <HAL_TIM_Base_Init+0x13c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800410a:	2202      	movs	r2, #2
 800410c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004110:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8004112:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004114:	d063      	beq.n	80041de <HAL_TIM_Base_Init+0xee>
 8004116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411a:	d072      	beq.n	8004202 <HAL_TIM_Base_Init+0x112>
 800411c:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8004120:	428b      	cmp	r3, r1
 8004122:	d02d      	beq.n	8004180 <HAL_TIM_Base_Init+0x90>
 8004124:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004128:	428b      	cmp	r3, r1
 800412a:	d029      	beq.n	8004180 <HAL_TIM_Base_Init+0x90>
 800412c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004130:	428b      	cmp	r3, r1
 8004132:	d025      	beq.n	8004180 <HAL_TIM_Base_Init+0x90>
 8004134:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8004138:	428b      	cmp	r3, r1
 800413a:	d021      	beq.n	8004180 <HAL_TIM_Base_Init+0x90>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800413c:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8004140:	428b      	cmp	r3, r1
 8004142:	d039      	beq.n	80041b8 <HAL_TIM_Base_Init+0xc8>
 8004144:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004148:	428b      	cmp	r3, r1
 800414a:	d035      	beq.n	80041b8 <HAL_TIM_Base_Init+0xc8>
 800414c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004150:	428b      	cmp	r3, r1
 8004152:	d031      	beq.n	80041b8 <HAL_TIM_Base_Init+0xc8>
 8004154:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 8004158:	428b      	cmp	r3, r1
 800415a:	d02d      	beq.n	80041b8 <HAL_TIM_Base_Init+0xc8>
 800415c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004160:	428b      	cmp	r3, r1
 8004162:	d029      	beq.n	80041b8 <HAL_TIM_Base_Init+0xc8>
 8004164:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004168:	428b      	cmp	r3, r1
 800416a:	d025      	beq.n	80041b8 <HAL_TIM_Base_Init+0xc8>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800416c:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800416e:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004170:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004172:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004176:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8004178:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800417a:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800417c:	6299      	str	r1, [r3, #40]	; 0x28
 800417e:	e015      	b.n	80041ac <HAL_TIM_Base_Init+0xbc>
    tmpcr1 |= Structure->CounterMode;
 8004180:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004182:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004184:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004186:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8004188:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800418a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800418e:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8004190:	f422 7240 	bic.w	r2, r2, #768	; 0x300

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004194:	4926      	ldr	r1, [pc, #152]	; (8004230 <HAL_TIM_Base_Init+0x140>)
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004196:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004198:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800419c:	4302      	orrs	r2, r0
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800419e:	428b      	cmp	r3, r1
  TIMx->CR1 = tmpcr1;
 80041a0:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041a2:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80041a4:	629d      	str	r5, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041a6:	d101      	bne.n	80041ac <HAL_TIM_Base_Init+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041a8:	6962      	ldr	r2, [r4, #20]
 80041aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041ac:	2201      	movs	r2, #1
 80041ae:	615a      	str	r2, [r3, #20]
  return HAL_OK;
 80041b0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80041b2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  return HAL_OK;
 80041b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041b8:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041ba:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041bc:	68e5      	ldr	r5, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80041be:	6861      	ldr	r1, [r4, #4]
    tmpcr1 &= ~TIM_CR1_CKD;
 80041c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041c4:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041ca:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 80041cc:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041ce:	62dd      	str	r5, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80041d0:	6299      	str	r1, [r3, #40]	; 0x28
 80041d2:	e7eb      	b.n	80041ac <HAL_TIM_Base_Init+0xbc>
    htim->Lock = HAL_UNLOCKED;
 80041d4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80041d8:	f7ff ff88 	bl	80040ec <HAL_TIM_Base_MspInit>
 80041dc:	e793      	b.n	8004106 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= Structure->CounterMode;
 80041de:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041e0:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041e2:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80041e8:	432a      	orrs	r2, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ee:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041f4:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80041f6:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041f8:	68e2      	ldr	r2, [r4, #12]
 80041fa:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80041fc:	6862      	ldr	r2, [r4, #4]
 80041fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004200:	e7d2      	b.n	80041a8 <HAL_TIM_Base_Init+0xb8>
    tmpcr1 |= Structure->CounterMode;
 8004202:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004204:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004206:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004208:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800420a:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800420c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004210:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004212:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004216:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004218:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800421c:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 800421e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004220:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004222:	629d      	str	r5, [r3, #40]	; 0x28
 8004224:	e7c2      	b.n	80041ac <HAL_TIM_Base_Init+0xbc>
    return HAL_ERROR;
 8004226:	2001      	movs	r0, #1
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	40010000 	.word	0x40010000
 8004230:	40010400 	.word	0x40010400

08004234 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004234:	6803      	ldr	r3, [r0, #0]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	f042 0201 	orr.w	r2, r2, #1
 800423c:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004244:	2a06      	cmp	r2, #6
 8004246:	d003      	beq.n	8004250 <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	f042 0201 	orr.w	r2, r2, #1
 800424e:	601a      	str	r2, [r3, #0]
}
 8004250:	2000      	movs	r0, #0
 8004252:	4770      	bx	lr

08004254 <HAL_TIM_OC_DelayElapsedCallback>:
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop

08004258 <HAL_TIM_IC_CaptureCallback>:
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop

0800425c <HAL_TIM_PWM_PulseFinishedCallback>:
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop

08004260 <HAL_TIM_TriggerCallback>:
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop

08004264 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004264:	6803      	ldr	r3, [r0, #0]
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	0791      	lsls	r1, r2, #30
{
 800426a:	b510      	push	{r4, lr}
 800426c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800426e:	d502      	bpl.n	8004276 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	0792      	lsls	r2, r2, #30
 8004274:	d462      	bmi.n	800433c <HAL_TIM_IRQHandler+0xd8>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	0750      	lsls	r0, r2, #29
 800427a:	d502      	bpl.n	8004282 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800427c:	68da      	ldr	r2, [r3, #12]
 800427e:	0751      	lsls	r1, r2, #29
 8004280:	d449      	bmi.n	8004316 <HAL_TIM_IRQHandler+0xb2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004282:	691a      	ldr	r2, [r3, #16]
 8004284:	0712      	lsls	r2, r2, #28
 8004286:	d502      	bpl.n	800428e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	0710      	lsls	r0, r2, #28
 800428c:	d431      	bmi.n	80042f2 <HAL_TIM_IRQHandler+0x8e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	06d2      	lsls	r2, r2, #27
 8004292:	d502      	bpl.n	800429a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	06d0      	lsls	r0, r2, #27
 8004298:	d418      	bmi.n	80042cc <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800429a:	691a      	ldr	r2, [r3, #16]
 800429c:	07d1      	lsls	r1, r2, #31
 800429e:	d502      	bpl.n	80042a6 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	07d2      	lsls	r2, r2, #31
 80042a4:	d46b      	bmi.n	800437e <HAL_TIM_IRQHandler+0x11a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	0610      	lsls	r0, r2, #24
 80042aa:	d502      	bpl.n	80042b2 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	0611      	lsls	r1, r2, #24
 80042b0:	d46d      	bmi.n	800438e <HAL_TIM_IRQHandler+0x12a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	0652      	lsls	r2, r2, #25
 80042b6:	d502      	bpl.n	80042be <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	0650      	lsls	r0, r2, #25
 80042bc:	d457      	bmi.n	800436e <HAL_TIM_IRQHandler+0x10a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	0691      	lsls	r1, r2, #26
 80042c2:	d502      	bpl.n	80042ca <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	0692      	lsls	r2, r2, #26
 80042c8:	d449      	bmi.n	800435e <HAL_TIM_IRQHandler+0xfa>
 80042ca:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042cc:	f06f 0210 	mvn.w	r2, #16
 80042d0:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042d2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042d4:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042d6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042da:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80042dc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042de:	d161      	bne.n	80043a4 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e0:	f7ff ffb8 	bl	8004254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e4:	4620      	mov	r0, r4
 80042e6:	f7ff ffb9 	bl	800425c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ea:	2200      	movs	r2, #0
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	7722      	strb	r2, [r4, #28]
 80042f0:	e7d3      	b.n	800429a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042f2:	f06f 0208 	mvn.w	r2, #8
 80042f6:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042f8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042fa:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042fc:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042fe:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004300:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004302:	d155      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004304:	f7ff ffa6 	bl	8004254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004308:	4620      	mov	r0, r4
 800430a:	f7ff ffa7 	bl	800425c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430e:	2200      	movs	r2, #0
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	7722      	strb	r2, [r4, #28]
 8004314:	e7bb      	b.n	800428e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004316:	f06f 0204 	mvn.w	r2, #4
 800431a:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800431c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800431e:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004320:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004324:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004326:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004328:	d13f      	bne.n	80043aa <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432a:	f7ff ff93 	bl	8004254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800432e:	4620      	mov	r0, r4
 8004330:	f7ff ff94 	bl	800425c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004334:	2200      	movs	r2, #0
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	7722      	strb	r2, [r4, #28]
 800433a:	e7a2      	b.n	8004282 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800433c:	f06f 0202 	mvn.w	r2, #2
 8004340:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004342:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004344:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004346:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004348:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800434a:	d128      	bne.n	800439e <HAL_TIM_IRQHandler+0x13a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800434c:	f7ff ff82 	bl	8004254 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004350:	4620      	mov	r0, r4
 8004352:	f7ff ff83 	bl	800425c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004356:	2200      	movs	r2, #0
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	7722      	strb	r2, [r4, #28]
 800435c:	e78b      	b.n	8004276 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800435e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004362:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004364:	611a      	str	r2, [r3, #16]
}
 8004366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800436a:	f000 b825 	b.w	80043b8 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800436e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004372:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004374:	4620      	mov	r0, r4
 8004376:	f7ff ff73 	bl	8004260 <HAL_TIM_TriggerCallback>
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	e79f      	b.n	80042be <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800437e:	f06f 0201 	mvn.w	r2, #1
 8004382:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004384:	4620      	mov	r0, r4
 8004386:	f002 fc85 	bl	8006c94 <HAL_TIM_PeriodElapsedCallback>
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	e78b      	b.n	80042a6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800438e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004392:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004394:	4620      	mov	r0, r4
 8004396:	f000 f811 	bl	80043bc <HAL_TIMEx_BreakCallback>
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	e789      	b.n	80042b2 <HAL_TIM_IRQHandler+0x4e>
          HAL_TIM_IC_CaptureCallback(htim);
 800439e:	f7ff ff5b 	bl	8004258 <HAL_TIM_IC_CaptureCallback>
 80043a2:	e7d8      	b.n	8004356 <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 80043a4:	f7ff ff58 	bl	8004258 <HAL_TIM_IC_CaptureCallback>
 80043a8:	e79f      	b.n	80042ea <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_IC_CaptureCallback(htim);
 80043aa:	f7ff ff55 	bl	8004258 <HAL_TIM_IC_CaptureCallback>
 80043ae:	e7c1      	b.n	8004334 <HAL_TIM_IRQHandler+0xd0>
        HAL_TIM_IC_CaptureCallback(htim);
 80043b0:	f7ff ff52 	bl	8004258 <HAL_TIM_IC_CaptureCallback>
 80043b4:	e7ab      	b.n	800430e <HAL_TIM_IRQHandler+0xaa>
 80043b6:	bf00      	nop

080043b8 <HAL_TIMEx_CommutCallback>:
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop

080043bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop

080043c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043c0:	b084      	sub	sp, #16
 80043c2:	b430      	push	{r4, r5}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043c4:	9d08      	ldr	r5, [sp, #32]
{
 80043c6:	ac03      	add	r4, sp, #12
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043c8:	2d01      	cmp	r5, #1
{
 80043ca:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043ce:	d02c      	beq.n	800442a <USB_CoreInit+0x6a>
    ret = USB_CoreReset(USBx);
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043d0:	68c2      	ldr	r2, [r0, #12]
 80043d2:	4b2e      	ldr	r3, [pc, #184]	; (800448c <USB_CoreInit+0xcc>)
 80043d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043d8:	60c2      	str	r2, [r0, #12]
 80043da:	e001      	b.n	80043e0 <USB_CoreInit+0x20>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80043dc:	3b01      	subs	r3, #1
 80043de:	d04e      	beq.n	800447e <USB_CoreInit+0xbe>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043e0:	6902      	ldr	r2, [r0, #16]
 80043e2:	2a00      	cmp	r2, #0
 80043e4:	dafa      	bge.n	80043dc <USB_CoreInit+0x1c>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80043e6:	6903      	ldr	r3, [r0, #16]
 80043e8:	4a28      	ldr	r2, [pc, #160]	; (800448c <USB_CoreInit+0xcc>)
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	6103      	str	r3, [r0, #16]
 80043f0:	e001      	b.n	80043f6 <USB_CoreInit+0x36>

  do
  {
    if (++count > 200000U)
 80043f2:	3a01      	subs	r2, #1
 80043f4:	d043      	beq.n	800447e <USB_CoreInit+0xbe>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80043f6:	6903      	ldr	r3, [r0, #16]
 80043f8:	f013 0301 	ands.w	r3, r3, #1
 80043fc:	d1f9      	bne.n	80043f2 <USB_CoreInit+0x32>
    if (cfg.battery_charging_enable == 0U)
 80043fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004400:	2a00      	cmp	r2, #0
 8004402:	d137      	bne.n	8004474 <USB_CoreInit+0xb4>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004404:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004406:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800440a:	6382      	str	r2, [r0, #56]	; 0x38
  if (cfg.dma_enable == 1U)
 800440c:	9a06      	ldr	r2, [sp, #24]
 800440e:	2a01      	cmp	r2, #1
 8004410:	d107      	bne.n	8004422 <USB_CoreInit+0x62>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004412:	6882      	ldr	r2, [r0, #8]
 8004414:	f042 0206 	orr.w	r2, r2, #6
 8004418:	6082      	str	r2, [r0, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800441a:	6882      	ldr	r2, [r0, #8]
 800441c:	f042 0220 	orr.w	r2, r2, #32
 8004420:	6082      	str	r2, [r0, #8]
}
 8004422:	bc30      	pop	{r4, r5}
 8004424:	4618      	mov	r0, r3
 8004426:	b004      	add	sp, #16
 8004428:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800442a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 800442c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800442e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004432:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004434:	68c3      	ldr	r3, [r0, #12]
 8004436:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800443a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800443e:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004440:	68c3      	ldr	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8004442:	2a01      	cmp	r2, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004444:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004448:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800444a:	d01a      	beq.n	8004482 <USB_CoreInit+0xc2>
{
 800444c:	4b0f      	ldr	r3, [pc, #60]	; (800448c <USB_CoreInit+0xcc>)
 800444e:	e001      	b.n	8004454 <USB_CoreInit+0x94>
    if (++count > 200000U)
 8004450:	3b01      	subs	r3, #1
 8004452:	d00d      	beq.n	8004470 <USB_CoreInit+0xb0>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004454:	6902      	ldr	r2, [r0, #16]
 8004456:	2a00      	cmp	r2, #0
 8004458:	dafa      	bge.n	8004450 <USB_CoreInit+0x90>
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800445a:	6903      	ldr	r3, [r0, #16]
 800445c:	4a0b      	ldr	r2, [pc, #44]	; (800448c <USB_CoreInit+0xcc>)
 800445e:	f043 0301 	orr.w	r3, r3, #1
 8004462:	6103      	str	r3, [r0, #16]
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004464:	6903      	ldr	r3, [r0, #16]
 8004466:	f013 0301 	ands.w	r3, r3, #1
 800446a:	d0cf      	beq.n	800440c <USB_CoreInit+0x4c>
    if (++count > 200000U)
 800446c:	3a01      	subs	r2, #1
 800446e:	d1f9      	bne.n	8004464 <USB_CoreInit+0xa4>
      return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e7cb      	b.n	800440c <USB_CoreInit+0x4c>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004474:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004476:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800447a:	6382      	str	r2, [r0, #56]	; 0x38
 800447c:	e7c6      	b.n	800440c <USB_CoreInit+0x4c>
      return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e7bd      	b.n	80043fe <USB_CoreInit+0x3e>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004482:	68c3      	ldr	r3, [r0, #12]
 8004484:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004488:	60c3      	str	r3, [r0, #12]
 800448a:	e7df      	b.n	800444c <USB_CoreInit+0x8c>
 800448c:	00030d40 	.word	0x00030d40

08004490 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8004490:	2a02      	cmp	r2, #2
 8004492:	d00a      	beq.n	80044aa <USB_SetTurnaroundTime+0x1a>
 8004494:	f44f 5110 	mov.w	r1, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004498:	68c2      	ldr	r2, [r0, #12]
 800449a:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800449e:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80044a0:	68c3      	ldr	r3, [r0, #12]
 80044a2:	430b      	orrs	r3, r1
 80044a4:	60c3      	str	r3, [r0, #12]
}
 80044a6:	2000      	movs	r0, #0
 80044a8:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80044aa:	4b2d      	ldr	r3, [pc, #180]	; (8004560 <USB_SetTurnaroundTime+0xd0>)
 80044ac:	4a2d      	ldr	r2, [pc, #180]	; (8004564 <USB_SetTurnaroundTime+0xd4>)
 80044ae:	440b      	add	r3, r1
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d943      	bls.n	800453c <USB_SetTurnaroundTime+0xac>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80044b4:	4b2c      	ldr	r3, [pc, #176]	; (8004568 <USB_SetTurnaroundTime+0xd8>)
 80044b6:	4a2d      	ldr	r2, [pc, #180]	; (800456c <USB_SetTurnaroundTime+0xdc>)
 80044b8:	440b      	add	r3, r1
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d93b      	bls.n	8004536 <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80044be:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 80044c2:	4a2b      	ldr	r2, [pc, #172]	; (8004570 <USB_SetTurnaroundTime+0xe0>)
 80044c4:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d93a      	bls.n	8004542 <USB_SetTurnaroundTime+0xb2>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80044cc:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 80044d0:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 80044d4:	32a0      	adds	r2, #160	; 0xa0
 80044d6:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 80044da:	4293      	cmp	r3, r2
 80044dc:	d937      	bls.n	800454e <USB_SetTurnaroundTime+0xbe>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80044de:	4b25      	ldr	r3, [pc, #148]	; (8004574 <USB_SetTurnaroundTime+0xe4>)
 80044e0:	4a25      	ldr	r2, [pc, #148]	; (8004578 <USB_SetTurnaroundTime+0xe8>)
 80044e2:	440b      	add	r3, r1
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d92f      	bls.n	8004548 <USB_SetTurnaroundTime+0xb8>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80044e8:	4b24      	ldr	r3, [pc, #144]	; (800457c <USB_SetTurnaroundTime+0xec>)
 80044ea:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 80044ee:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 80044f2:	440b      	add	r3, r1
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d92d      	bls.n	8004554 <USB_SetTurnaroundTime+0xc4>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80044f8:	4b21      	ldr	r3, [pc, #132]	; (8004580 <USB_SetTurnaroundTime+0xf0>)
 80044fa:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 80044fe:	f502 7220 	add.w	r2, r2, #640	; 0x280
 8004502:	440b      	add	r3, r1
 8004504:	4293      	cmp	r3, r2
 8004506:	d9c5      	bls.n	8004494 <USB_SetTurnaroundTime+0x4>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004508:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 800450c:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 8004510:	f502 7258 	add.w	r2, r2, #864	; 0x360
 8004514:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8004518:	4293      	cmp	r3, r2
 800451a:	d91e      	bls.n	800455a <USB_SetTurnaroundTime+0xca>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800451c:	4b19      	ldr	r3, [pc, #100]	; (8004584 <USB_SetTurnaroundTime+0xf4>)
 800451e:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
 8004522:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 8004526:	440b      	add	r3, r1
 8004528:	4293      	cmp	r3, r2
 800452a:	bf8c      	ite	hi
 800452c:	f44f 51c0 	movhi.w	r1, #6144	; 0x1800
 8004530:	f44f 51e0 	movls.w	r1, #7168	; 0x1c00
 8004534:	e7b0      	b.n	8004498 <USB_SetTurnaroundTime+0x8>
 8004536:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800453a:	e7ad      	b.n	8004498 <USB_SetTurnaroundTime+0x8>
 800453c:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8004540:	e7aa      	b.n	8004498 <USB_SetTurnaroundTime+0x8>
 8004542:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 8004546:	e7a7      	b.n	8004498 <USB_SetTurnaroundTime+0x8>
 8004548:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 800454c:	e7a4      	b.n	8004498 <USB_SetTurnaroundTime+0x8>
 800454e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004552:	e7a1      	b.n	8004498 <USB_SetTurnaroundTime+0x8>
 8004554:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8004558:	e79e      	b.n	8004498 <USB_SetTurnaroundTime+0x8>
 800455a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800455e:	e79b      	b.n	8004498 <USB_SetTurnaroundTime+0x8>
 8004560:	ff275340 	.word	0xff275340
 8004564:	000c34ff 	.word	0x000c34ff
 8004568:	ff1b1e40 	.word	0xff1b1e40
 800456c:	000f423f 	.word	0x000f423f
 8004570:	00124f7f 	.word	0x00124f7f
 8004574:	fee5b660 	.word	0xfee5b660
 8004578:	0016e35f 	.word	0x0016e35f
 800457c:	feced300 	.word	0xfeced300
 8004580:	feb35bc0 	.word	0xfeb35bc0
 8004584:	fe5954e0 	.word	0xfe5954e0

08004588 <USB_EnableGlobalInt>:
{
 8004588:	4602      	mov	r2, r0
}
 800458a:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800458c:	6893      	ldr	r3, [r2, #8]
 800458e:	f043 0301 	orr.w	r3, r3, #1
 8004592:	6093      	str	r3, [r2, #8]
}
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop

08004598 <USB_DisableGlobalInt>:
{
 8004598:	4602      	mov	r2, r0
}
 800459a:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800459c:	6893      	ldr	r3, [r2, #8]
 800459e:	f023 0301 	bic.w	r3, r3, #1
 80045a2:	6093      	str	r3, [r2, #8]
}
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop

080045a8 <USB_SetCurrentMode>:
{
 80045a8:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045aa:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80045ac:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045ae:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80045b2:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80045b4:	d00b      	beq.n	80045ce <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 80045b6:	b941      	cbnz	r1, 80045ca <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045b8:	68c3      	ldr	r3, [r0, #12]
 80045ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045be:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80045c0:	2032      	movs	r0, #50	; 0x32
 80045c2:	f7fc ff47 	bl	8001454 <HAL_Delay>
  return HAL_OK;
 80045c6:	2000      	movs	r0, #0
 80045c8:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 80045ca:	2001      	movs	r0, #1
}
 80045cc:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045ce:	68c3      	ldr	r3, [r0, #12]
 80045d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045d4:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80045d6:	2032      	movs	r0, #50	; 0x32
 80045d8:	f7fc ff3c 	bl	8001454 <HAL_Delay>
  return HAL_OK;
 80045dc:	2000      	movs	r0, #0
 80045de:	bd08      	pop	{r3, pc}

080045e0 <USB_DevInit>:
{
 80045e0:	b084      	sub	sp, #16
 80045e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045e6:	ac0a      	add	r4, sp, #40	; 0x28
 80045e8:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80045ec:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80045ee:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    USBx->DIEPTXF[i] = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 80045f8:	468e      	mov	lr, r1
 80045fa:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 80045fe:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8004602:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 8004606:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 800460a:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 800460e:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
 8004612:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 8004616:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 800461a:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 800461e:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
 8004622:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
 8004626:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
 800462a:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
 800462e:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 8004632:	2e00      	cmp	r6, #0
 8004634:	f040 809c 	bne.w	8004770 <USB_DevInit+0x190>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004638:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800463a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800463e:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004640:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004642:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004646:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004648:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800464a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800464e:	6383      	str	r3, [r0, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004656:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004658:	f8d0 2800 	ldr.w	r2, [r0, #2048]	; 0x800
 800465c:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004660:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004662:	f500 6500 	add.w	r5, r0, #2048	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004666:	f000 809a 	beq.w	800479e <USB_DevInit+0x1be>
  USBx_DEVICE->DCFG |= speed;
 800466a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800466e:	f043 0303 	orr.w	r3, r3, #3
 8004672:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004676:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800467a:	6103      	str	r3, [r0, #16]
 800467c:	4a55      	ldr	r2, [pc, #340]	; (80047d4 <USB_DevInit+0x1f4>)
 800467e:	e002      	b.n	8004686 <USB_DevInit+0xa6>
    if (++count > 200000U)
 8004680:	3a01      	subs	r2, #1
 8004682:	f000 809d 	beq.w	80047c0 <USB_DevInit+0x1e0>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004686:	6903      	ldr	r3, [r0, #16]
 8004688:	f013 0320 	ands.w	r3, r3, #32
 800468c:	d1f8      	bne.n	8004680 <USB_DevInit+0xa0>
  HAL_StatusTypeDef ret = HAL_OK;
 800468e:	469c      	mov	ip, r3
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004690:	2210      	movs	r2, #16
 8004692:	6102      	str	r2, [r0, #16]
 8004694:	4a4f      	ldr	r2, [pc, #316]	; (80047d4 <USB_DevInit+0x1f4>)
 8004696:	e002      	b.n	800469e <USB_DevInit+0xbe>
    if (++count > 200000U)
 8004698:	3a01      	subs	r2, #1
 800469a:	f000 808e 	beq.w	80047ba <USB_DevInit+0x1da>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800469e:	6901      	ldr	r1, [r0, #16]
 80046a0:	06cb      	lsls	r3, r1, #27
 80046a2:	d4f9      	bmi.n	8004698 <USB_DevInit+0xb8>
  USBx_DEVICE->DIEPMSK = 0U;
 80046a4:	2100      	movs	r1, #0
 80046a6:	6129      	str	r1, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80046a8:	6169      	str	r1, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80046aa:	61e9      	str	r1, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046ac:	f1be 0f00 	cmp.w	lr, #0
 80046b0:	d019      	beq.n	80046e6 <USB_DevInit+0x106>
      USBx_INEP(i)->DIEPCTL = 0U;
 80046b2:	460f      	mov	r7, r1
 80046b4:	f500 6210 	add.w	r2, r0, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046b8:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046bc:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80046c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046c4:	e007      	b.n	80046d6 <USB_DevInit+0xf6>
      USBx_INEP(i)->DIEPCTL = 0U;
 80046c6:	6017      	str	r7, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046c8:	3101      	adds	r1, #1
 80046ca:	4571      	cmp	r1, lr
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80046cc:	6117      	str	r7, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80046ce:	6093      	str	r3, [r2, #8]
 80046d0:	f102 0220 	add.w	r2, r2, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046d4:	d031      	beq.n	800473a <USB_DevInit+0x15a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046d6:	6814      	ldr	r4, [r2, #0]
 80046d8:	2c00      	cmp	r4, #0
 80046da:	daf4      	bge.n	80046c6 <USB_DevInit+0xe6>
      if (i == 0U)
 80046dc:	2900      	cmp	r1, #0
 80046de:	d072      	beq.n	80047c6 <USB_DevInit+0x1e6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046e0:	f8c2 9000 	str.w	r9, [r2]
 80046e4:	e7f0      	b.n	80046c8 <USB_DevInit+0xe8>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046e6:	692a      	ldr	r2, [r5, #16]
  if (cfg.dma_enable == 1U)
 80046e8:	f1bb 0f01 	cmp.w	fp, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046f0:	612a      	str	r2, [r5, #16]
  if (cfg.dma_enable == 1U)
 80046f2:	d046      	beq.n	8004782 <USB_DevInit+0x1a2>
  USBx->GINTMSK = 0U;
 80046f4:	2100      	movs	r1, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 80046f6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 80046fa:	6181      	str	r1, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80046fc:	6142      	str	r2, [r0, #20]
  if (cfg.dma_enable == 0U)
 80046fe:	f1bb 0f00 	cmp.w	fp, #0
 8004702:	d103      	bne.n	800470c <USB_DevInit+0x12c>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004704:	6982      	ldr	r2, [r0, #24]
 8004706:	f042 0210 	orr.w	r2, r2, #16
 800470a:	6182      	str	r2, [r0, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800470c:	6984      	ldr	r4, [r0, #24]
 800470e:	4a32      	ldr	r2, [pc, #200]	; (80047d8 <USB_DevInit+0x1f8>)
  if (cfg.Sof_enable != 0U)
 8004710:	9910      	ldr	r1, [sp, #64]	; 0x40
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004712:	4322      	orrs	r2, r4
 8004714:	6182      	str	r2, [r0, #24]
  if (cfg.Sof_enable != 0U)
 8004716:	b119      	cbz	r1, 8004720 <USB_DevInit+0x140>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004718:	6982      	ldr	r2, [r0, #24]
 800471a:	f042 0208 	orr.w	r2, r2, #8
 800471e:	6182      	str	r2, [r0, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8004720:	2e01      	cmp	r6, #1
 8004722:	d105      	bne.n	8004730 <USB_DevInit+0x150>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004724:	6982      	ldr	r2, [r0, #24]
 8004726:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800472a:	f042 0204 	orr.w	r2, r2, #4
 800472e:	6182      	str	r2, [r0, #24]
}
 8004730:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004734:	4660      	mov	r0, ip
 8004736:	b004      	add	sp, #16
 8004738:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800473a:	2400      	movs	r4, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800473c:	4623      	mov	r3, r4
 800473e:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004742:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004746:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800474a:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 800474e:	e008      	b.n	8004762 <USB_DevInit+0x182>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004750:	6013      	str	r3, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004752:	3401      	adds	r4, #1
 8004754:	42a1      	cmp	r1, r4
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004756:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004758:	f8c2 8008 	str.w	r8, [r2, #8]
 800475c:	f102 0220 	add.w	r2, r2, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004760:	d0c1      	beq.n	80046e6 <USB_DevInit+0x106>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004762:	6817      	ldr	r7, [r2, #0]
 8004764:	2f00      	cmp	r7, #0
 8004766:	daf3      	bge.n	8004750 <USB_DevInit+0x170>
      if (i == 0U)
 8004768:	b384      	cbz	r4, 80047cc <USB_DevInit+0x1ec>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800476a:	f8c2 9000 	str.w	r9, [r2]
 800476e:	e7f0      	b.n	8004752 <USB_DevInit+0x172>
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004770:	6803      	ldr	r3, [r0, #0]
 8004772:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004776:	6003      	str	r3, [r0, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004778:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800477a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800477e:	6383      	str	r3, [r0, #56]	; 0x38
 8004780:	e766      	b.n	8004650 <USB_DevInit+0x70>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8004782:	4a16      	ldr	r2, [pc, #88]	; (80047dc <USB_DevInit+0x1fc>)
 8004784:	632a      	str	r2, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8004786:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004788:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800478c:	f042 0203 	orr.w	r2, r2, #3
  USBx->GINTMSK = 0U;
 8004790:	2400      	movs	r4, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004792:	f06f 4180 	mvn.w	r1, #1073741824	; 0x40000000
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8004796:	632a      	str	r2, [r5, #48]	; 0x30
  USBx->GINTMSK = 0U;
 8004798:	6184      	str	r4, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800479a:	6141      	str	r1, [r0, #20]
 800479c:	e7b6      	b.n	800470c <USB_DevInit+0x12c>
    if (cfg.speed == USBD_HS_SPEED)
 800479e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047a0:	b923      	cbnz	r3, 80047ac <USB_DevInit+0x1cc>
  USBx_DEVICE->DCFG |= speed;
 80047a2:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80047a6:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
 80047aa:	e764      	b.n	8004676 <USB_DevInit+0x96>
 80047ac:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80047b0:	f043 0301 	orr.w	r3, r3, #1
 80047b4:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
 80047b8:	e75d      	b.n	8004676 <USB_DevInit+0x96>
    ret = HAL_ERROR;
 80047ba:	f04f 0c01 	mov.w	ip, #1
 80047be:	e771      	b.n	80046a4 <USB_DevInit+0xc4>
    ret = HAL_ERROR;
 80047c0:	f04f 0c01 	mov.w	ip, #1
 80047c4:	e764      	b.n	8004690 <USB_DevInit+0xb0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80047c6:	f8c2 a000 	str.w	sl, [r2]
 80047ca:	e77d      	b.n	80046c8 <USB_DevInit+0xe8>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047cc:	f8c2 a000 	str.w	sl, [r2]
 80047d0:	e7bf      	b.n	8004752 <USB_DevInit+0x172>
 80047d2:	bf00      	nop
 80047d4:	00030d40 	.word	0x00030d40
 80047d8:	803c3800 	.word	0x803c3800
 80047dc:	00800100 	.word	0x00800100

080047e0 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047e0:	0189      	lsls	r1, r1, #6
 80047e2:	f041 0120 	orr.w	r1, r1, #32
 80047e6:	6101      	str	r1, [r0, #16]
 80047e8:	4a05      	ldr	r2, [pc, #20]	; (8004800 <USB_FlushTxFifo+0x20>)
 80047ea:	e001      	b.n	80047f0 <USB_FlushTxFifo+0x10>
    if (++count > 200000U)
 80047ec:	3a01      	subs	r2, #1
 80047ee:	d005      	beq.n	80047fc <USB_FlushTxFifo+0x1c>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047f0:	6903      	ldr	r3, [r0, #16]
 80047f2:	f013 0320 	ands.w	r3, r3, #32
 80047f6:	d1f9      	bne.n	80047ec <USB_FlushTxFifo+0xc>
  return HAL_OK;
 80047f8:	4618      	mov	r0, r3
 80047fa:	4770      	bx	lr
      return HAL_TIMEOUT;
 80047fc:	2003      	movs	r0, #3
}
 80047fe:	4770      	bx	lr
 8004800:	00030d40 	.word	0x00030d40

08004804 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004804:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004808:	f013 0006 	ands.w	r0, r3, #6
 800480c:	d004      	beq.n	8004818 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800480e:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 8004812:	bf14      	ite	ne
 8004814:	2002      	movne	r0, #2
 8004816:	200f      	moveq	r0, #15
}
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop

0800481c <USB_ActivateEndpoint>:
{
 800481c:	b470      	push	{r4, r5, r6}
  if (ep->is_in == 1U)
 800481e:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8004820:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8004822:	2b01      	cmp	r3, #1
 8004824:	d022      	beq.n	800486c <USB_ActivateEndpoint+0x50>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004826:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 800482a:	f004 060f 	and.w	r6, r4, #15
 800482e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004832:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8004836:	40b3      	lsls	r3, r6
 8004838:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800483a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800483e:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004840:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004844:	041b      	lsls	r3, r3, #16
 8004846:	d40e      	bmi.n	8004866 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004848:	688a      	ldr	r2, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 800484a:	78cc      	ldrb	r4, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800484c:	f8d0 1b00 	ldr.w	r1, [r0, #2816]	; 0xb00
 8004850:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8004854:	f042 5380 	orr.w	r3, r2, #268435456	; 0x10000000
 8004858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800485c:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8004860:	430b      	orrs	r3, r1
 8004862:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8004866:	2000      	movs	r0, #0
 8004868:	bc70      	pop	{r4, r5, r6}
 800486a:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800486c:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 8004870:	f004 020f 	and.w	r2, r4, #15
 8004874:	fa03 f202 	lsl.w	r2, r3, r2
 8004878:	4332      	orrs	r2, r6
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800487a:	eb00 1344 	add.w	r3, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800487e:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004882:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8004886:	0412      	lsls	r2, r2, #16
 8004888:	d4ed      	bmi.n	8004866 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800488a:	688a      	ldr	r2, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800488c:	78cd      	ldrb	r5, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800488e:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8004892:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8004896:	f042 5080 	orr.w	r0, r2, #268435456	; 0x10000000
 800489a:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800489e:	ea40 4085 	orr.w	r0, r0, r5, lsl #18
 80048a2:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 80048a6:	4308      	orrs	r0, r1
 80048a8:	f8c3 0900 	str.w	r0, [r3, #2304]	; 0x900
}
 80048ac:	bc70      	pop	{r4, r5, r6}
 80048ae:	2000      	movs	r0, #0
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop

080048b4 <USB_DeactivateEndpoint>:
{
 80048b4:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 80048b6:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80048b8:	7809      	ldrb	r1, [r1, #0]
  if (ep->is_in == 1U)
 80048ba:	2b01      	cmp	r3, #1
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80048bc:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 80048c0:	f001 040f 	and.w	r4, r1, #15
  if (ep->is_in == 1U)
 80048c4:	d017      	beq.n	80048f6 <USB_DeactivateEndpoint+0x42>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80048c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048ca:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 80048ce:	40a3      	lsls	r3, r4
 80048d0:	43db      	mvns	r3, r3
 80048d2:	401d      	ands	r5, r3
 80048d4:	f8c0 583c 	str.w	r5, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80048d8:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80048dc:	4c11      	ldr	r4, [pc, #68]	; (8004924 <USB_DeactivateEndpoint+0x70>)
 80048de:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80048e2:	402b      	ands	r3, r5
 80048e4:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80048e6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80048ea:	401c      	ands	r4, r3
 80048ec:	f8c0 4b00 	str.w	r4, [r0, #2816]	; 0xb00
}
 80048f0:	2000      	movs	r0, #0
 80048f2:	bc30      	pop	{r4, r5}
 80048f4:	4770      	bx	lr
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80048f6:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 80048fa:	40a3      	lsls	r3, r4
 80048fc:	43db      	mvns	r3, r3
 80048fe:	401d      	ands	r5, r3
 8004900:	f8c0 583c 	str.w	r5, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004904:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004908:	4c07      	ldr	r4, [pc, #28]	; (8004928 <USB_DeactivateEndpoint+0x74>)
 800490a:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800490e:	402b      	ands	r3, r5
 8004910:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004912:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004916:	401c      	ands	r4, r3
 8004918:	f8c0 4900 	str.w	r4, [r0, #2304]	; 0x900
}
 800491c:	2000      	movs	r0, #0
 800491e:	bc30      	pop	{r4, r5}
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	eff37800 	.word	0xeff37800
 8004928:	ec337800 	.word	0xec337800

0800492c <USB_EPStartXfer>:
{
 800492c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (ep->is_in == 1U)
 8004930:	784d      	ldrb	r5, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8004932:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8004934:	2d01      	cmp	r5, #1
 8004936:	d053      	beq.n	80049e0 <USB_EPStartXfer+0xb4>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004938:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800493c:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8004940:	691e      	ldr	r6, [r3, #16]
    if (ep->xfer_len == 0U)
 8004942:	694d      	ldr	r5, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004944:	0cf6      	lsrs	r6, r6, #19
 8004946:	04f6      	lsls	r6, r6, #19
 8004948:	611e      	str	r6, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800494a:	691e      	ldr	r6, [r3, #16]
 800494c:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8004950:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8004954:	611e      	str	r6, [r3, #16]
    if (ep->xfer_len == 0U)
 8004956:	b315      	cbz	r5, 800499e <USB_EPStartXfer+0x72>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004958:	688e      	ldr	r6, [r1, #8]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800495a:	4f78      	ldr	r7, [pc, #480]	; (8004b3c <USB_EPStartXfer+0x210>)
 800495c:	f8d3 e010 	ldr.w	lr, [r3, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004960:	4435      	add	r5, r6
 8004962:	3d01      	subs	r5, #1
 8004964:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004968:	ea07 47c5 	and.w	r7, r7, r5, lsl #19
 800496c:	ea47 070e 	orr.w	r7, r7, lr
 8004970:	611f      	str	r7, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004972:	b2ad      	uxth	r5, r5
 8004974:	fb06 f505 	mul.w	r5, r6, r5
 8004978:	691e      	ldr	r6, [r3, #16]
 800497a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800497e:	4335      	orrs	r5, r6
    if (dma == 1U)
 8004980:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004982:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8004984:	d017      	beq.n	80049b6 <USB_EPStartXfer+0x8a>
    if (ep->type == EP_TYPE_ISOC)
 8004986:	78cb      	ldrb	r3, [r1, #3]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d01b      	beq.n	80049c4 <USB_EPStartXfer+0x98>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800498c:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8004990:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004994:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 8004998:	2000      	movs	r0, #0
 800499a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800499e:	688d      	ldr	r5, [r1, #8]
 80049a0:	691e      	ldr	r6, [r3, #16]
 80049a2:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80049a6:	4335      	orrs	r5, r6
 80049a8:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049aa:	691d      	ldr	r5, [r3, #16]
    if (dma == 1U)
 80049ac:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049ae:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80049b2:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 80049b4:	d1e7      	bne.n	8004986 <USB_EPStartXfer+0x5a>
      if ((uint32_t)ep->xfer_buff != 0U)
 80049b6:	68ca      	ldr	r2, [r1, #12]
 80049b8:	2a00      	cmp	r2, #0
 80049ba:	d0e4      	beq.n	8004986 <USB_EPStartXfer+0x5a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80049bc:	615a      	str	r2, [r3, #20]
    if (ep->type == EP_TYPE_ISOC)
 80049be:	78cb      	ldrb	r3, [r1, #3]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d1e3      	bne.n	800498c <USB_EPStartXfer+0x60>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049c4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80049c8:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80049cc:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 80049d0:	bf0c      	ite	eq
 80049d2:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80049d6:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80049da:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 80049de:	e7d5      	b.n	800498c <USB_EPStartXfer+0x60>
    if (ep->xfer_len == 0U)
 80049e0:	694e      	ldr	r6, [r1, #20]
 80049e2:	2e00      	cmp	r6, #0
 80049e4:	d03e      	beq.n	8004a64 <USB_EPStartXfer+0x138>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049e6:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 80049ea:	f50c 6310 	add.w	r3, ip, #2304	; 0x900
 80049ee:	f8d3 e010 	ldr.w	lr, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80049f2:	f8d1 9008 	ldr.w	r9, [r1, #8]
 80049f6:	4f51      	ldr	r7, [pc, #324]	; (8004b3c <USB_EPStartXfer+0x210>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049f8:	ea4f 4ede 	mov.w	lr, lr, lsr #19
 80049fc:	ea4f 4ece 	mov.w	lr, lr, lsl #19
 8004a00:	f8c3 e010 	str.w	lr, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a04:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8004a08:	f028 58ff 	bic.w	r8, r8, #534773760	; 0x1fe00000
 8004a0c:	f428 18c0 	bic.w	r8, r8, #1572864	; 0x180000
 8004a10:	f8c3 8010 	str.w	r8, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004a14:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8004a18:	eb06 0e09 	add.w	lr, r6, r9
 8004a1c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8004a20:	fbbe fef9 	udiv	lr, lr, r9
 8004a24:	ea07 47ce 	and.w	r7, r7, lr, lsl #19
 8004a28:	ea47 0708 	orr.w	r7, r7, r8
 8004a2c:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a2e:	f8d3 e010 	ldr.w	lr, [r3, #16]
 8004a32:	f3c6 0712 	ubfx	r7, r6, #0, #19
 8004a36:	ea47 070e 	orr.w	r7, r7, lr
 8004a3a:	611f      	str	r7, [r3, #16]
      if (ep->type == EP_TYPE_ISOC)
 8004a3c:	78cf      	ldrb	r7, [r1, #3]
 8004a3e:	2f01      	cmp	r7, #1
 8004a40:	d058      	beq.n	8004af4 <USB_EPStartXfer+0x1c8>
    if (dma == 1U)
 8004a42:	2a01      	cmp	r2, #1
 8004a44:	d076      	beq.n	8004b34 <USB_EPStartXfer+0x208>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a46:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 8004a4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a4e:	f8cc 3900 	str.w	r3, [ip, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a52:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8004a56:	f004 040f 	and.w	r4, r4, #15
 8004a5a:	40a5      	lsls	r5, r4
 8004a5c:	431d      	orrs	r5, r3
 8004a5e:	f8c0 5834 	str.w	r5, [r0, #2100]	; 0x834
  return HAL_OK;
 8004a62:	e799      	b.n	8004998 <USB_EPStartXfer+0x6c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a64:	eb00 1e44 	add.w	lr, r0, r4, lsl #5
 8004a68:	f50e 6310 	add.w	r3, lr, #2304	; 0x900
 8004a6c:	691d      	ldr	r5, [r3, #16]
 8004a6e:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8004a72:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8004a76:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a78:	691d      	ldr	r5, [r3, #16]
 8004a7a:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8004a7e:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a80:	691d      	ldr	r5, [r3, #16]
 8004a82:	0ced      	lsrs	r5, r5, #19
 8004a84:	04ed      	lsls	r5, r5, #19
 8004a86:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8004a88:	2a01      	cmp	r2, #1
 8004a8a:	78cf      	ldrb	r7, [r1, #3]
 8004a8c:	d028      	beq.n	8004ae0 <USB_EPStartXfer+0x1b4>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a8e:	f8de 5900 	ldr.w	r5, [lr, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8004a92:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a94:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 8004a98:	f8ce 5900 	str.w	r5, [lr, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8004a9c:	f47f af7c 	bne.w	8004998 <USB_EPStartXfer+0x6c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004aa0:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
 8004aa4:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004aa8:	681d      	ldr	r5, [r3, #0]
 8004aaa:	bf0c      	ite	eq
 8004aac:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ab0:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 8004ab4:	601d      	str	r5, [r3, #0]
  if (dma == 0U)
 8004ab6:	2a00      	cmp	r2, #0
 8004ab8:	f47f af6e 	bne.w	8004998 <USB_EPStartXfer+0x6c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8004abc:	b2b6      	uxth	r6, r6
 8004abe:	3603      	adds	r6, #3
    for (i = 0U; i < count32b; i++)
 8004ac0:	08b6      	lsrs	r6, r6, #2
 8004ac2:	f43f af69 	beq.w	8004998 <USB_EPStartXfer+0x6c>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004ac6:	68cb      	ldr	r3, [r1, #12]
 8004ac8:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 8004acc:	eb03 0186 	add.w	r1, r3, r6, lsl #2
 8004ad0:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ad4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ad8:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8004ada:	428b      	cmp	r3, r1
 8004adc:	d1fa      	bne.n	8004ad4 <USB_EPStartXfer+0x1a8>
 8004ade:	e75b      	b.n	8004998 <USB_EPStartXfer+0x6c>
      if ((uint32_t)ep->dma_addr != 0U)
 8004ae0:	690a      	ldr	r2, [r1, #16]
 8004ae2:	b102      	cbz	r2, 8004ae6 <USB_EPStartXfer+0x1ba>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ae4:	615a      	str	r2, [r3, #20]
      if (ep->type == EP_TYPE_ISOC)
 8004ae6:	2f01      	cmp	r7, #1
 8004ae8:	d018      	beq.n	8004b1c <USB_EPStartXfer+0x1f0>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	e751      	b.n	8004998 <USB_EPStartXfer+0x6c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004af4:	691d      	ldr	r5, [r3, #16]
 8004af6:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8004afa:	611d      	str	r5, [r3, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004afc:	691d      	ldr	r5, [r3, #16]
    if (dma == 1U)
 8004afe:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004b00:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004b04:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8004b06:	d006      	beq.n	8004b16 <USB_EPStartXfer+0x1ea>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b08:	f8dc 5900 	ldr.w	r5, [ip, #2304]	; 0x900
 8004b0c:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 8004b10:	f8cc 5900 	str.w	r5, [ip, #2304]	; 0x900
 8004b14:	e7c4      	b.n	8004aa0 <USB_EPStartXfer+0x174>
      if ((uint32_t)ep->dma_addr != 0U)
 8004b16:	690a      	ldr	r2, [r1, #16]
 8004b18:	2a00      	cmp	r2, #0
 8004b1a:	d1e3      	bne.n	8004ae4 <USB_EPStartXfer+0x1b8>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b1c:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8004b20:	f412 7f80 	tst.w	r2, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	bf0c      	ite	eq
 8004b28:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b2c:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	e7da      	b.n	8004aea <USB_EPStartXfer+0x1be>
      if ((uint32_t)ep->dma_addr != 0U)
 8004b34:	690a      	ldr	r2, [r1, #16]
 8004b36:	2a00      	cmp	r2, #0
 8004b38:	d0d7      	beq.n	8004aea <USB_EPStartXfer+0x1be>
 8004b3a:	e7d3      	b.n	8004ae4 <USB_EPStartXfer+0x1b8>
 8004b3c:	1ff80000 	.word	0x1ff80000

08004b40 <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 8004b40:	784b      	ldrb	r3, [r1, #1]
 8004b42:	2b01      	cmp	r3, #1
{
 8004b44:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8004b46:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8004b48:	d025      	beq.n	8004b96 <USB_EP0StartXfer+0x56>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b4a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8004b4e:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8004b52:	691c      	ldr	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8004b54:	694d      	ldr	r5, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b56:	0ce4      	lsrs	r4, r4, #19
 8004b58:	04e4      	lsls	r4, r4, #19
 8004b5a:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b5c:	691c      	ldr	r4, [r3, #16]
 8004b5e:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8004b62:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8004b66:	611c      	str	r4, [r3, #16]
      ep->xfer_len = ep->maxpacket;
 8004b68:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len > 0U)
 8004b6a:	b995      	cbnz	r5, 8004b92 <USB_EP0StartXfer+0x52>
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b6c:	691d      	ldr	r5, [r3, #16]
 8004b6e:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8004b72:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004b74:	691d      	ldr	r5, [r3, #16]
 8004b76:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8004b7a:	432c      	orrs	r4, r5
    if (dma == 1U)
 8004b7c:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004b7e:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8004b80:	d042      	beq.n	8004c08 <USB_EP0StartXfer+0xc8>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004b82:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004b86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b8a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8004b8e:	2000      	movs	r0, #0
 8004b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ep->xfer_len = ep->maxpacket;
 8004b92:	614c      	str	r4, [r1, #20]
 8004b94:	e7ea      	b.n	8004b6c <USB_EP0StartXfer+0x2c>
    if (ep->xfer_len == 0U)
 8004b96:	694d      	ldr	r5, [r1, #20]
 8004b98:	2d00      	cmp	r5, #0
 8004b9a:	d03a      	beq.n	8004c12 <USB_EP0StartXfer+0xd2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b9c:	eb00 1744 	add.w	r7, r0, r4, lsl #5
 8004ba0:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8004ba4:	691e      	ldr	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8004ba6:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004baa:	0cf6      	lsrs	r6, r6, #19
 8004bac:	04f6      	lsls	r6, r6, #19
 8004bae:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bb0:	691e      	ldr	r6, [r3, #16]
 8004bb2:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8004bb6:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8004bba:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bbc:	691e      	ldr	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8004bbe:	4575      	cmp	r5, lr
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bc0:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
        ep->xfer_len = ep->maxpacket;
 8004bc4:	bf88      	it	hi
 8004bc6:	f8c1 e014 	strhi.w	lr, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bca:	611e      	str	r6, [r3, #16]
        ep->xfer_len = ep->maxpacket;
 8004bcc:	bf88      	it	hi
 8004bce:	4675      	movhi	r5, lr
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004bd0:	f8d3 e010 	ldr.w	lr, [r3, #16]
 8004bd4:	f3c5 0612 	ubfx	r6, r5, #0, #19
 8004bd8:	ea46 060e 	orr.w	r6, r6, lr
    if (dma == 1U)
 8004bdc:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004bde:	611e      	str	r6, [r3, #16]
    if (dma == 1U)
 8004be0:	d033      	beq.n	8004c4a <USB_EP0StartXfer+0x10a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004be2:	f8d7 3900 	ldr.w	r3, [r7, #2304]	; 0x900
 8004be6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bea:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8004bee:	2d00      	cmp	r5, #0
 8004bf0:	d0cd      	beq.n	8004b8e <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004bf2:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8004bf6:	f004 000f 	and.w	r0, r4, #15
 8004bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bfc:	2401      	movs	r4, #1
 8004bfe:	4084      	lsls	r4, r0
 8004c00:	4314      	orrs	r4, r2
 8004c02:	635c      	str	r4, [r3, #52]	; 0x34
}
 8004c04:	2000      	movs	r0, #0
 8004c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c08:	68ca      	ldr	r2, [r1, #12]
 8004c0a:	2a00      	cmp	r2, #0
 8004c0c:	d0b9      	beq.n	8004b82 <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c0e:	615a      	str	r2, [r3, #20]
 8004c10:	e7b7      	b.n	8004b82 <USB_EP0StartXfer+0x42>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c12:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8004c16:	f500 6310 	add.w	r3, r0, #2304	; 0x900
 8004c1a:	691c      	ldr	r4, [r3, #16]
 8004c1c:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8004c20:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8004c24:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c26:	691c      	ldr	r4, [r3, #16]
 8004c28:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8004c2c:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c2e:	691c      	ldr	r4, [r3, #16]
 8004c30:	0ce4      	lsrs	r4, r4, #19
 8004c32:	04e4      	lsls	r4, r4, #19
    if (dma == 1U)
 8004c34:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c36:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8004c38:	d007      	beq.n	8004c4a <USB_EP0StartXfer+0x10a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c3a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004c3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c42:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8004c46:	2000      	movs	r0, #0
 8004c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 8004c4a:	690a      	ldr	r2, [r1, #16]
 8004c4c:	b102      	cbz	r2, 8004c50 <USB_EP0StartXfer+0x110>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c4e:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	e799      	b.n	8004b8e <USB_EP0StartXfer+0x4e>
 8004c5a:	bf00      	nop

08004c5c <USB_WritePacket>:
{
 8004c5c:	b410      	push	{r4}
 8004c5e:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8004c62:	b96c      	cbnz	r4, 8004c80 <USB_WritePacket+0x24>
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c64:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8004c66:	089b      	lsrs	r3, r3, #2
 8004c68:	d00a      	beq.n	8004c80 <USB_WritePacket+0x24>
 8004c6a:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8004c6e:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8004c72:	eb01 0283 	add.w	r2, r1, r3, lsl #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c76:	f851 3b04 	ldr.w	r3, [r1], #4
 8004c7a:	6003      	str	r3, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8004c7c:	4291      	cmp	r1, r2
 8004c7e:	d1fa      	bne.n	8004c76 <USB_WritePacket+0x1a>
}
 8004c80:	2000      	movs	r0, #0
 8004c82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004c88:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 8004c8a:	0892      	lsrs	r2, r2, #2
 8004c8c:	d00d      	beq.n	8004caa <USB_ReadPacket+0x22>
{
 8004c8e:	b410      	push	{r4}
 8004c90:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8004c94:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8004c98:	4608      	mov	r0, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	f840 3b04 	str.w	r3, [r0], #4
  for (i = 0U; i < count32b; i++)
 8004ca0:	4282      	cmp	r2, r0
 8004ca2:	d1fa      	bne.n	8004c9a <USB_ReadPacket+0x12>
}
 8004ca4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ca8:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 8004caa:	4608      	mov	r0, r1
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop

08004cb0 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8004cb0:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8004cb2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004cb4:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004cb6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8004cba:	d013      	beq.n	8004ce4 <USB_EPSetStall+0x34>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004cbc:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8004cc0:	2a00      	cmp	r2, #0
 8004cc2:	db00      	blt.n	8004cc6 <USB_EPSetStall+0x16>
 8004cc4:	b93b      	cbnz	r3, 8004cd6 <USB_EPSetStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004cc6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004cca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004cce:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8004cd2:	2000      	movs	r0, #0
 8004cd4:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004cd6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004cda:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004cde:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8004ce2:	e7f0      	b.n	8004cc6 <USB_EPSetStall+0x16>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004ce4:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8004ce8:	2a00      	cmp	r2, #0
 8004cea:	db06      	blt.n	8004cfa <USB_EPSetStall+0x4a>
 8004cec:	b12b      	cbz	r3, 8004cfa <USB_EPSetStall+0x4a>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004cee:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004cf2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004cf6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004cfa:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004cfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d02:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8004d06:	2000      	movs	r0, #0
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop

08004d0c <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8004d0c:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8004d0e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004d10:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d12:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8004d16:	d013      	beq.n	8004d40 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004d18:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004d1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d20:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d24:	78cb      	ldrb	r3, [r1, #3]
 8004d26:	3b02      	subs	r3, #2
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d901      	bls.n	8004d30 <USB_EPClearStall+0x24>
}
 8004d2c:	2000      	movs	r0, #0
 8004d2e:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d30:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d38:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d40:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004d44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d48:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d4c:	78cb      	ldrb	r3, [r1, #3]
 8004d4e:	3b02      	subs	r3, #2
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d8eb      	bhi.n	8004d2c <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d54:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d5c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8004d60:	e7e4      	b.n	8004d2c <USB_EPClearStall+0x20>
 8004d62:	bf00      	nop

08004d64 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004d64:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004d68:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004d6c:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004d70:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004d74:	0109      	lsls	r1, r1, #4
 8004d76:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8004d7a:	4319      	orrs	r1, r3
 8004d7c:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8004d80:	2000      	movs	r0, #0
 8004d82:	4770      	bx	lr

08004d84 <USB_DevConnect>:
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004d84:	f500 6200 	add.w	r2, r0, #2048	; 0x800
{
 8004d88:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004d8a:	6853      	ldr	r3, [r2, #4]
 8004d8c:	f023 0302 	bic.w	r3, r3, #2
  HAL_Delay(3U);
 8004d90:	2003      	movs	r0, #3
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004d92:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004d94:	f7fc fb5e 	bl	8001454 <HAL_Delay>
}
 8004d98:	2000      	movs	r0, #0
 8004d9a:	bd08      	pop	{r3, pc}

08004d9c <USB_DevDisconnect>:
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d9c:	f500 6200 	add.w	r2, r0, #2048	; 0x800
{
 8004da0:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004da2:	6853      	ldr	r3, [r2, #4]
 8004da4:	f043 0302 	orr.w	r3, r3, #2
  HAL_Delay(3U);
 8004da8:	2003      	movs	r0, #3
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004daa:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004dac:	f7fc fb52 	bl	8001454 <HAL_Delay>
}
 8004db0:	2000      	movs	r0, #0
 8004db2:	bd08      	pop	{r3, pc}

08004db4 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8004db4:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8004db6:	6980      	ldr	r0, [r0, #24]
}
 8004db8:	4010      	ands	r0, r2
 8004dba:	4770      	bx	lr

08004dbc <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8004dbc:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8004dc0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004dc4:	69c0      	ldr	r0, [r0, #28]
 8004dc6:	4018      	ands	r0, r3
}
 8004dc8:	0c00      	lsrs	r0, r0, #16
 8004dca:	4770      	bx	lr

08004dcc <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8004dcc:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8004dd0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004dd4:	69c0      	ldr	r0, [r0, #28]
 8004dd6:	4018      	ands	r0, r3
}
 8004dd8:	b280      	uxth	r0, r0
 8004dda:	4770      	bx	lr

08004ddc <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004ddc:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004de0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004de4:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004de8:	6940      	ldr	r0, [r0, #20]
}
 8004dea:	4010      	ands	r0, r2
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop

08004df0 <USB_ReadDevInEPInterrupt>:
{
 8004df0:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 8004df2:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004df6:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004dfa:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004dfe:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004e02:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004e06:	40cb      	lsrs	r3, r1
 8004e08:	01db      	lsls	r3, r3, #7
 8004e0a:	b2db      	uxtb	r3, r3
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004e0c:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004e0e:	4323      	orrs	r3, r4
}
 8004e10:	4018      	ands	r0, r3
 8004e12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8004e18:	6940      	ldr	r0, [r0, #20]
}
 8004e1a:	f000 0001 	and.w	r0, r0, #1
 8004e1e:	4770      	bx	lr

08004e20 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004e20:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004e24:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004e28:	f023 0307 	bic.w	r3, r3, #7
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8004e2c:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004e30:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8004e34:	6893      	ldr	r3, [r2, #8]
 8004e36:	f003 0306 	and.w	r3, r3, #6
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d105      	bne.n	8004e4a <USB_ActivateSetup+0x2a>
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8004e3e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004e42:	f043 0303 	orr.w	r3, r3, #3
 8004e46:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004e4a:	6853      	ldr	r3, [r2, #4]
 8004e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e50:	6053      	str	r3, [r2, #4]
}
 8004e52:	2000      	movs	r0, #0
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop

08004e58 <USB_EP0_OutStart>:
{
 8004e58:	b410      	push	{r4}
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004e5a:	4b13      	ldr	r3, [pc, #76]	; (8004ea8 <USB_EP0_OutStart+0x50>)
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e5c:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004e5e:	429c      	cmp	r4, r3
 8004e60:	d81a      	bhi.n	8004e98 <USB_EP0_OutStart+0x40>
 8004e62:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e6a:	6903      	ldr	r3, [r0, #16]
 8004e6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e70:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004e72:	6903      	ldr	r3, [r0, #16]
 8004e74:	f043 0318 	orr.w	r3, r3, #24
 8004e78:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004e7a:	6903      	ldr	r3, [r0, #16]
  if (dma == 1U)
 8004e7c:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004e7e:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004e82:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 8004e84:	d104      	bne.n	8004e90 <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004e86:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004e88:	6803      	ldr	r3, [r0, #0]
 8004e8a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004e8e:	6003      	str	r3, [r0, #0]
}
 8004e90:	2000      	movs	r0, #0
 8004e92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e96:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e98:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8004ea2:	dae0      	bge.n	8004e66 <USB_EP0_OutStart+0xe>
 8004ea4:	e7f4      	b.n	8004e90 <USB_EP0_OutStart+0x38>
 8004ea6:	bf00      	nop
 8004ea8:	4f54300a 	.word	0x4f54300a

08004eac <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004eac:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
{
 8004eb0:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004eb2:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004eb6:	b15b      	cbz	r3, 8004ed0 <USBD_CDC_EP0_RxReady+0x24>
 8004eb8:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8004ebc:	28ff      	cmp	r0, #255	; 0xff
 8004ebe:	d007      	beq.n	8004ed0 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8004ec6:	4621      	mov	r1, r4
 8004ec8:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 8004eca:	23ff      	movs	r3, #255	; 0xff
 8004ecc:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	bd10      	pop	{r4, pc}

08004ed4 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8004ed4:	2343      	movs	r3, #67	; 0x43
 8004ed6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8004ed8:	4800      	ldr	r0, [pc, #0]	; (8004edc <USBD_CDC_GetFSCfgDesc+0x8>)
 8004eda:	4770      	bx	lr
 8004edc:	20000040 	.word	0x20000040

08004ee0 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8004ee0:	2343      	movs	r3, #67	; 0x43
 8004ee2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8004ee4:	4800      	ldr	r0, [pc, #0]	; (8004ee8 <USBD_CDC_GetHSCfgDesc+0x8>)
 8004ee6:	4770      	bx	lr
 8004ee8:	20000084 	.word	0x20000084

08004eec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8004eec:	2343      	movs	r3, #67	; 0x43
 8004eee:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8004ef0:	4800      	ldr	r0, [pc, #0]	; (8004ef4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8004ef2:	4770      	bx	lr
 8004ef4:	200000d4 	.word	0x200000d4

08004ef8 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8004ef8:	230a      	movs	r3, #10
 8004efa:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8004efc:	4800      	ldr	r0, [pc, #0]	; (8004f00 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8004efe:	4770      	bx	lr
 8004f00:	200000c8 	.word	0x200000c8

08004f04 <USBD_CDC_DataOut>:
{
 8004f04:	b538      	push	{r3, r4, r5, lr}
 8004f06:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004f08:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004f0c:	f002 fc2e 	bl	800776c <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8004f10:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004f14:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8004f18:	b14b      	cbz	r3, 8004f2e <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004f1a:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8004f1e:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8004f28:	4798      	blx	r3
    return USBD_OK;
 8004f2a:	2000      	movs	r0, #0
 8004f2c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8004f2e:	2002      	movs	r0, #2
}
 8004f30:	bd38      	pop	{r3, r4, r5, pc}
 8004f32:	bf00      	nop

08004f34 <USBD_CDC_DataIn>:
{
 8004f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8004f36:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if(pdev->pClassData != NULL)
 8004f3a:	b1ae      	cbz	r6, 8004f68 <USBD_CDC_DataIn+0x34>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004f3c:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8004f40:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8004f44:	69ef      	ldr	r7, [r5, #28]
 8004f46:	b15f      	cbz	r7, 8004f60 <USBD_CDC_DataIn+0x2c>
 8004f48:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8004f4c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8004f50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f56:	fbb7 f4f3 	udiv	r4, r7, r3
 8004f5a:	fb03 7414 	mls	r4, r3, r4, r7
 8004f5e:	b12c      	cbz	r4, 8004f6c <USBD_CDC_DataIn+0x38>
      hcdc->TxState = 0U;
 8004f60:	2000      	movs	r0, #0
 8004f62:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8004f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 8004f68:	2002      	movs	r0, #2
}
 8004f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pdev->ep_in[epnum].total_length = 0U;
 8004f6c:	61ec      	str	r4, [r5, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8004f6e:	4623      	mov	r3, r4
 8004f70:	4622      	mov	r2, r4
 8004f72:	f002 fbdf 	bl	8007734 <USBD_LL_Transmit>
    return USBD_OK;
 8004f76:	4620      	mov	r0, r4
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8004f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f7a:	bf00      	nop

08004f7c <USBD_CDC_Setup>:
{
 8004f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f80:	780b      	ldrb	r3, [r1, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004f82:	f8d0 7290 	ldr.w	r7, [r0, #656]	; 0x290
{
 8004f86:	b082      	sub	sp, #8
  uint8_t ifalt = 0U;
 8004f88:	2400      	movs	r4, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f8a:	f013 0860 	ands.w	r8, r3, #96	; 0x60
{
 8004f8e:	460d      	mov	r5, r1
 8004f90:	4606      	mov	r6, r0
  uint8_t ifalt = 0U;
 8004f92:	f88d 4005 	strb.w	r4, [sp, #5]
  uint16_t status_info = 0U;
 8004f96:	f8ad 4006 	strh.w	r4, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f9a:	d01c      	beq.n	8004fd6 <USBD_CDC_Setup+0x5a>
 8004f9c:	f1b8 0f20 	cmp.w	r8, #32
 8004fa0:	d113      	bne.n	8004fca <USBD_CDC_Setup+0x4e>
    if (req->wLength)
 8004fa2:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8004fa6:	f1b8 0f00 	cmp.w	r8, #0
 8004faa:	d046      	beq.n	800503a <USBD_CDC_Setup+0xbe>
      if (req->bmRequest & 0x80U)
 8004fac:	061b      	lsls	r3, r3, #24
 8004fae:	d42b      	bmi.n	8005008 <USBD_CDC_Setup+0x8c>
        hcdc->CmdOpCode = req->bRequest;
 8004fb0:	784b      	ldrb	r3, [r1, #1]
 8004fb2:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004fb6:	f887 8201 	strb.w	r8, [r7, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004fba:	4642      	mov	r2, r8
 8004fbc:	4639      	mov	r1, r7
 8004fbe:	f000 fd17 	bl	80059f0 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8004fc2:	4620      	mov	r0, r4
}
 8004fc4:	b002      	add	sp, #8
 8004fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_CtlError (pdev, req);
 8004fca:	f000 fccb 	bl	8005964 <USBD_CtlError>
    ret = USBD_FAIL;
 8004fce:	2002      	movs	r0, #2
}
 8004fd0:	b002      	add	sp, #8
 8004fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 8004fd6:	784c      	ldrb	r4, [r1, #1]
 8004fd8:	2c0a      	cmp	r4, #10
 8004fda:	d023      	beq.n	8005024 <USBD_CDC_Setup+0xa8>
 8004fdc:	2c0b      	cmp	r4, #11
 8004fde:	d00d      	beq.n	8004ffc <USBD_CDC_Setup+0x80>
 8004fe0:	2c00      	cmp	r4, #0
 8004fe2:	d1f2      	bne.n	8004fca <USBD_CDC_Setup+0x4e>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fe4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	d02e      	beq.n	800504a <USBD_CDC_Setup+0xce>
        USBD_CtlError (pdev, req);
 8004fec:	4630      	mov	r0, r6
 8004fee:	4629      	mov	r1, r5
 8004ff0:	f000 fcb8 	bl	8005964 <USBD_CtlError>
			  ret = USBD_FAIL;
 8004ff4:	2002      	movs	r0, #2
}
 8004ff6:	b002      	add	sp, #8
 8004ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004ffc:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005000:	2b03      	cmp	r3, #3
 8005002:	d1f3      	bne.n	8004fec <USBD_CDC_Setup+0x70>
  uint8_t ret = USBD_OK;
 8005004:	4640      	mov	r0, r8
 8005006:	e7e3      	b.n	8004fd0 <USBD_CDC_Setup+0x54>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005008:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800500c:	7848      	ldrb	r0, [r1, #1]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	4642      	mov	r2, r8
 8005012:	4639      	mov	r1, r7
 8005014:	4798      	blx	r3
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005016:	88ea      	ldrh	r2, [r5, #6]
 8005018:	4639      	mov	r1, r7
 800501a:	4630      	mov	r0, r6
 800501c:	f000 fcd2 	bl	80059c4 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8005020:	4620      	mov	r0, r4
 8005022:	e7d5      	b.n	8004fd0 <USBD_CDC_Setup+0x54>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005024:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005028:	2b03      	cmp	r3, #3
 800502a:	d1df      	bne.n	8004fec <USBD_CDC_Setup+0x70>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800502c:	2201      	movs	r2, #1
 800502e:	f10d 0105 	add.w	r1, sp, #5
 8005032:	f000 fcc7 	bl	80059c4 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8005036:	4640      	mov	r0, r8
 8005038:	e7ca      	b.n	8004fd0 <USBD_CDC_Setup+0x54>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800503a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800503e:	7848      	ldrb	r0, [r1, #1]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	4642      	mov	r2, r8
 8005044:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 8005046:	4640      	mov	r0, r8
 8005048:	e7c2      	b.n	8004fd0 <USBD_CDC_Setup+0x54>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800504a:	2202      	movs	r2, #2
 800504c:	f10d 0106 	add.w	r1, sp, #6
 8005050:	f000 fcb8 	bl	80059c4 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8005054:	4620      	mov	r0, r4
 8005056:	e7bb      	b.n	8004fd0 <USBD_CDC_Setup+0x54>

08005058 <USBD_CDC_DeInit>:
{
 8005058:	b538      	push	{r3, r4, r5, lr}
 800505a:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800505c:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800505e:	2181      	movs	r1, #129	; 0x81
 8005060:	f002 fb1c 	bl	800769c <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005064:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005066:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005068:	4620      	mov	r0, r4
 800506a:	f002 fb17 	bl	800769c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800506e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005072:	4620      	mov	r0, r4
 8005074:	2182      	movs	r1, #130	; 0x82
 8005076:	f002 fb11 	bl	800769c <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800507a:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800507e:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 8005080:	b14b      	cbz	r3, 8005096 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005082:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800508a:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 800508e:	f004 fe7d 	bl	8009d8c <free>
    pdev->pClassData = NULL;
 8005092:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 8005096:	2000      	movs	r0, #0
 8005098:	bd38      	pop	{r3, r4, r5, pc}
 800509a:	bf00      	nop

0800509c <USBD_CDC_Init>:
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800509c:	7c03      	ldrb	r3, [r0, #16]
{
 800509e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050a2:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80050a4:	bbc3      	cbnz	r3, 8005118 <USBD_CDC_Init+0x7c>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80050a6:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80050a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050ac:	2202      	movs	r2, #2
 80050ae:	2181      	movs	r1, #129	; 0x81
 80050b0:	f002 fae4 	bl	800767c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80050b4:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80050b6:	4629      	mov	r1, r5
 80050b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050bc:	2202      	movs	r2, #2
 80050be:	4620      	mov	r0, r4
 80050c0:	f002 fadc 	bl	800767c <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80050c4:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80050c8:	2308      	movs	r3, #8
 80050ca:	2203      	movs	r2, #3
 80050cc:	2182      	movs	r1, #130	; 0x82
 80050ce:	4620      	mov	r0, r4
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80050d0:	2701      	movs	r7, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80050d2:	f002 fad3 	bl	800767c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80050d6:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80050d8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80050dc:	f004 fe4e 	bl	8009d7c <malloc>
 80050e0:	4605      	mov	r5, r0
 80050e2:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 80050e6:	b370      	cbz	r0, 8005146 <USBD_CDC_Init+0xaa>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80050e8:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80050f0:	f894 8010 	ldrb.w	r8, [r4, #16]
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80050f4:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
    hcdc->TxState = 0U;
 80050f8:	2600      	movs	r6, #0
 80050fa:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80050fe:	4639      	mov	r1, r7
    hcdc->RxState = 0U;
 8005100:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005104:	4620      	mov	r0, r4
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005106:	f1b8 0f00 	cmp.w	r8, #0
 800510a:	d015      	beq.n	8005138 <USBD_CDC_Init+0x9c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800510c:	2340      	movs	r3, #64	; 0x40
 800510e:	f002 fb1f 	bl	8007750 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8005112:	4630      	mov	r0, r6
 8005114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005118:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800511a:	2340      	movs	r3, #64	; 0x40
 800511c:	2202      	movs	r2, #2
 800511e:	2181      	movs	r1, #129	; 0x81
 8005120:	f002 faac 	bl	800767c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005124:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005126:	4629      	mov	r1, r5
 8005128:	2340      	movs	r3, #64	; 0x40
 800512a:	2202      	movs	r2, #2
 800512c:	4620      	mov	r0, r4
 800512e:	f002 faa5 	bl	800767c <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005132:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
 8005136:	e7c7      	b.n	80050c8 <USBD_CDC_Init+0x2c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800513c:	f002 fb08 	bl	8007750 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8005140:	4640      	mov	r0, r8
 8005142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 8005146:	4638      	mov	r0, r7
}
 8005148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800514c <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 800514c:	b119      	cbz	r1, 8005156 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 800514e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 8005152:	2000      	movs	r0, #0
 8005154:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8005156:	2002      	movs	r0, #2
  }

  return ret;
}
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop

0800515c <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800515c:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8005160:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8005162:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005166:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800516a:	4770      	bx	lr

0800516c <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800516c:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  return USBD_OK;
}
 8005170:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8005172:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8005176:	4770      	bx	lr

08005178 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005178:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  if(pdev->pClassData != NULL)
 800517c:	b19b      	cbz	r3, 80051a6 <USBD_CDC_TransmitPacket+0x2e>
{
 800517e:	b570      	push	{r4, r5, r6, lr}
  {
    if(hcdc->TxState == 0U)
 8005180:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
 8005184:	b10c      	cbz	r4, 800518a <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8005186:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8005188:	bd70      	pop	{r4, r5, r6, pc}
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800518a:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800518e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
      hcdc->TxState = 1U;
 8005192:	2601      	movs	r6, #1
 8005194:	f8c3 6214 	str.w	r6, [r3, #532]	; 0x214
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005198:	2181      	movs	r1, #129	; 0x81
 800519a:	b2ab      	uxth	r3, r5
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800519c:	6305      	str	r5, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800519e:	f002 fac9 	bl	8007734 <USBD_LL_Transmit>
      return USBD_OK;
 80051a2:	4620      	mov	r0, r4
 80051a4:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80051a6:	2002      	movs	r0, #2
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop

080051ac <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80051ac:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80051b0:	b18a      	cbz	r2, 80051d6 <USBD_CDC_ReceivePacket+0x2a>
{
 80051b2:	b510      	push	{r4, lr}
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80051b4:	7c04      	ldrb	r4, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80051b6:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80051ba:	b12c      	cbz	r4, 80051c8 <USBD_CDC_ReceivePacket+0x1c>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80051bc:	2340      	movs	r3, #64	; 0x40
 80051be:	2101      	movs	r1, #1
 80051c0:	f002 fac6 	bl	8007750 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80051c4:	2000      	movs	r0, #0
 80051c6:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80051c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051cc:	2101      	movs	r1, #1
 80051ce:	f002 fabf 	bl	8007750 <USBD_LL_PrepareReceive>
    return USBD_OK;
 80051d2:	4620      	mov	r0, r4
 80051d4:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USBD_FAIL;
 80051d6:	2002      	movs	r0, #2
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop

080051dc <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80051dc:	b188      	cbz	r0, 8005202 <USBD_Init+0x26>
{
 80051de:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80051e0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80051e4:	b113      	cbz	r3, 80051ec <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80051e6:	2300      	movs	r3, #0
 80051e8:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80051ec:	b109      	cbz	r1, 80051f2 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80051ee:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80051f2:	2301      	movs	r3, #1
  pdev->id = id;
 80051f4:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80051f6:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80051fa:	f002 f9ff 	bl	80075fc <USBD_LL_Init>

  return USBD_OK;
 80051fe:	2000      	movs	r0, #0
 8005200:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8005202:	2002      	movs	r0, #2
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop

08005208 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8005208:	b119      	cbz	r1, 8005212 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800520a:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 800520e:	2000      	movs	r0, #0
 8005210:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005212:	2002      	movs	r0, #2
  }

  return status;
}
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop

08005218 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8005218:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800521a:	f002 fa21 	bl	8007660 <USBD_LL_Start>

  return USBD_OK;
}
 800521e:	2000      	movs	r0, #0
 8005220:	bd08      	pop	{r3, pc}
 8005222:	bf00      	nop

08005224 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005224:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8005226:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800522a:	b113      	cbz	r3, 8005232 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4798      	blx	r3
 8005230:	b108      	cbz	r0, 8005236 <USBD_SetClassConfig+0x12>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8005232:	2002      	movs	r0, #2
 8005234:	bd08      	pop	{r3, pc}
      ret = USBD_OK;
    }
  }

  return ret;
}
 8005236:	bd08      	pop	{r3, pc}

08005238 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005238:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800523a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	4798      	blx	r3
  return USBD_OK;
}
 8005242:	2000      	movs	r0, #0
 8005244:	bd08      	pop	{r3, pc}
 8005246:	bf00      	nop

08005248 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005248:	b538      	push	{r3, r4, r5, lr}
 800524a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800524c:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8005250:	4628      	mov	r0, r5
 8005252:	f000 fb73 	bl	800593c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8005256:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_data_len = pdev->request.wLength;
 800525a:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 800525e:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  pdev->ep0_state = USBD_EP0_SETUP;
 8005262:	2201      	movs	r2, #1
  switch (pdev->request.bmRequest & 0x1FU)
 8005264:	f001 031f 	and.w	r3, r1, #31
 8005268:	4293      	cmp	r3, r2
  pdev->ep0_state = USBD_EP0_SETUP;
 800526a:	f8c4 226c 	str.w	r2, [r4, #620]	; 0x26c
  switch (pdev->request.bmRequest & 0x1FU)
 800526e:	d015      	beq.n	800529c <USBD_LL_SetupStage+0x54>
 8005270:	d30e      	bcc.n	8005290 <USBD_LL_SetupStage+0x48>
 8005272:	2b02      	cmp	r3, #2
 8005274:	d006      	beq.n	8005284 <USBD_LL_SetupStage+0x3c>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005276:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800527a:	4620      	mov	r0, r4
 800527c:	f002 fa1c 	bl	80076b8 <USBD_LL_StallEP>
    break;
  }

  return USBD_OK;
}
 8005280:	2000      	movs	r0, #0
 8005282:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdEPReq(pdev, &pdev->request);
 8005284:	4629      	mov	r1, r5
 8005286:	4620      	mov	r0, r4
 8005288:	f000 fab2 	bl	80057f0 <USBD_StdEPReq>
}
 800528c:	2000      	movs	r0, #0
 800528e:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdDevReq (pdev, &pdev->request);
 8005290:	4629      	mov	r1, r5
 8005292:	4620      	mov	r0, r4
 8005294:	f000 f908 	bl	80054a8 <USBD_StdDevReq>
}
 8005298:	2000      	movs	r0, #0
 800529a:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800529c:	4629      	mov	r1, r5
 800529e:	4620      	mov	r0, r4
 80052a0:	f000 fa70 	bl	8005784 <USBD_StdItfReq>
}
 80052a4:	2000      	movs	r0, #0
 80052a6:	bd38      	pop	{r3, r4, r5, pc}

080052a8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80052a8:	b570      	push	{r4, r5, r6, lr}
 80052aa:	4605      	mov	r5, r0
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80052ac:	b941      	cbnz	r1, 80052c0 <USBD_LL_DataOutStage+0x18>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80052ae:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 80052b2:	2b03      	cmp	r3, #3
 80052b4:	d00e      	beq.n	80052d4 <USBD_LL_DataOutStage+0x2c>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80052b6:	2b05      	cmp	r3, #5
 80052b8:	460c      	mov	r4, r1
 80052ba:	d02a      	beq.n	8005312 <USBD_LL_DataOutStage+0x6a>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80052bc:	2000      	movs	r0, #0
 80052be:	bd70      	pop	{r4, r5, r6, pc}
  else if((pdev->pClass->DataOut != NULL) &&
 80052c0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	b11b      	cbz	r3, 80052d0 <USBD_LL_DataOutStage+0x28>
 80052c8:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80052cc:	2a03      	cmp	r2, #3
 80052ce:	d026      	beq.n	800531e <USBD_LL_DataOutStage+0x76>
    return USBD_FAIL;
 80052d0:	2002      	movs	r0, #2
}
 80052d2:	bd70      	pop	{r4, r5, r6, pc}
 80052d4:	4616      	mov	r6, r2
      if(pep->rem_length > pep->maxpacket)
 80052d6:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80052da:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 80052de:	4293      	cmp	r3, r2
 80052e0:	d90a      	bls.n	80052f8 <USBD_LL_DataOutStage+0x50>
        pep->rem_length -=  pep->maxpacket;
 80052e2:	1a9b      	subs	r3, r3, r2
        USBD_CtlContinueRx (pdev,
 80052e4:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80052e6:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 80052ea:	bf8c      	ite	hi
 80052ec:	b29a      	uxthhi	r2, r3
 80052ee:	b292      	uxthls	r2, r2
 80052f0:	4631      	mov	r1, r6
 80052f2:	f000 fb8d 	bl	8005a10 <USBD_CtlContinueRx>
 80052f6:	e7e1      	b.n	80052bc <USBD_LL_DataOutStage+0x14>
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80052f8:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	b11b      	cbz	r3, 8005308 <USBD_LL_DataOutStage+0x60>
 8005300:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8005304:	2a03      	cmp	r2, #3
 8005306:	d00d      	beq.n	8005324 <USBD_LL_DataOutStage+0x7c>
        USBD_CtlSendStatus(pdev);
 8005308:	4628      	mov	r0, r5
 800530a:	f000 fb89 	bl	8005a20 <USBD_CtlSendStatus>
  return USBD_OK;
 800530e:	2000      	movs	r0, #0
 8005310:	bd70      	pop	{r4, r5, r6, pc}
        pdev->ep0_state = USBD_EP0_IDLE;
 8005312:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8005316:	f002 f9cf 	bl	80076b8 <USBD_LL_StallEP>
  return USBD_OK;
 800531a:	4620      	mov	r0, r4
 800531c:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClass->DataOut(pdev, epnum);
 800531e:	4798      	blx	r3
  return USBD_OK;
 8005320:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 8005322:	bd70      	pop	{r4, r5, r6, pc}
          pdev->pClass->EP0_RxReady(pdev);
 8005324:	4798      	blx	r3
 8005326:	e7ef      	b.n	8005308 <USBD_LL_DataOutStage+0x60>

08005328 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8005328:	b570      	push	{r4, r5, r6, lr}
 800532a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800532c:	b971      	cbnz	r1, 800534c <USBD_LL_DataInStage+0x24>
 800532e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8005330:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8005334:	2a02      	cmp	r2, #2
 8005336:	d01f      	beq.n	8005378 <USBD_LL_DataInStage+0x50>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005338:	f032 0304 	bics.w	r3, r2, #4
 800533c:	d010      	beq.n	8005360 <USBD_LL_DataInStage+0x38>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800533e:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 8005342:	2b01      	cmp	r3, #1
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8005344:	f04f 0000 	mov.w	r0, #0
    if (pdev->dev_test_mode == 1U)
 8005348:	d013      	beq.n	8005372 <USBD_LL_DataInStage+0x4a>
 800534a:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800534c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	b11b      	cbz	r3, 800535c <USBD_LL_DataInStage+0x34>
 8005354:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8005358:	2a03      	cmp	r2, #3
 800535a:	d041      	beq.n	80053e0 <USBD_LL_DataInStage+0xb8>
    pdev->pClass->DataIn(pdev, epnum);
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800535c:	2002      	movs	r0, #2
  }

  return USBD_OK;
}
 800535e:	bd70      	pop	{r4, r5, r6, pc}
        USBD_LL_StallEP(pdev, 0x80U);
 8005360:	2180      	movs	r1, #128	; 0x80
 8005362:	f002 f9a9 	bl	80076b8 <USBD_LL_StallEP>
    if (pdev->dev_test_mode == 1U)
 8005366:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 800536a:	2b01      	cmp	r3, #1
      pdev->dev_test_mode = 0U;
 800536c:	f04f 0000 	mov.w	r0, #0
    if (pdev->dev_test_mode == 1U)
 8005370:	d1eb      	bne.n	800534a <USBD_LL_DataInStage+0x22>
      pdev->dev_test_mode = 0U;
 8005372:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 8005376:	bd70      	pop	{r4, r5, r6, pc}
      if(pep->rem_length > pep->maxpacket)
 8005378:	6a06      	ldr	r6, [r0, #32]
 800537a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800537c:	4296      	cmp	r6, r2
 800537e:	d827      	bhi.n	80053d0 <USBD_LL_DataInStage+0xa8>
        if((pep->total_length % pep->maxpacket == 0U) &&
 8005380:	69c3      	ldr	r3, [r0, #28]
 8005382:	fbb3 f5f2 	udiv	r5, r3, r2
 8005386:	fb02 3515 	mls	r5, r2, r5, r3
 800538a:	b98d      	cbnz	r5, 80053b0 <USBD_LL_DataInStage+0x88>
 800538c:	429a      	cmp	r2, r3
 800538e:	d80f      	bhi.n	80053b0 <USBD_LL_DataInStage+0x88>
           (pep->total_length >= pep->maxpacket) &&
 8005390:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8005394:	4293      	cmp	r3, r2
 8005396:	d20b      	bcs.n	80053b0 <USBD_LL_DataInStage+0x88>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005398:	462a      	mov	r2, r5
 800539a:	f000 fb21 	bl	80059e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800539e:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80053a2:	462b      	mov	r3, r5
 80053a4:	462a      	mov	r2, r5
 80053a6:	4629      	mov	r1, r5
 80053a8:	4620      	mov	r0, r4
 80053aa:	f002 f9d1 	bl	8007750 <USBD_LL_PrepareReceive>
 80053ae:	e7c6      	b.n	800533e <USBD_LL_DataInStage+0x16>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80053b0:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	b11b      	cbz	r3, 80053c0 <USBD_LL_DataInStage+0x98>
 80053b8:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 80053bc:	2a03      	cmp	r2, #3
 80053be:	d012      	beq.n	80053e6 <USBD_LL_DataInStage+0xbe>
          USBD_LL_StallEP(pdev, 0x80U);
 80053c0:	2180      	movs	r1, #128	; 0x80
 80053c2:	4620      	mov	r0, r4
 80053c4:	f002 f978 	bl	80076b8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80053c8:	4620      	mov	r0, r4
 80053ca:	f000 fb35 	bl	8005a38 <USBD_CtlReceiveStatus>
 80053ce:	e7b6      	b.n	800533e <USBD_LL_DataInStage+0x16>
        pep->rem_length -= pep->maxpacket;
 80053d0:	1ab2      	subs	r2, r6, r2
 80053d2:	460d      	mov	r5, r1
 80053d4:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80053d6:	4619      	mov	r1, r3
 80053d8:	b292      	uxth	r2, r2
 80053da:	f000 fb01 	bl	80059e0 <USBD_CtlContinueSendData>
 80053de:	e7e0      	b.n	80053a2 <USBD_LL_DataInStage+0x7a>
    pdev->pClass->DataIn(pdev, epnum);
 80053e0:	4798      	blx	r3
  return USBD_OK;
 80053e2:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 80053e4:	bd70      	pop	{r4, r5, r6, pc}
            pdev->pClass->EP0_TxSent(pdev);
 80053e6:	4620      	mov	r0, r4
 80053e8:	4798      	blx	r3
 80053ea:	e7e9      	b.n	80053c0 <USBD_LL_DataInStage+0x98>

080053ec <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80053ec:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80053ee:	2200      	movs	r2, #0
{
 80053f0:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80053f2:	2340      	movs	r3, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80053f4:	461e      	mov	r6, r3
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80053f6:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80053f8:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80053fa:	f002 f93f 	bl	800767c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80053fe:	4633      	mov	r3, r6
 8005400:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005402:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005406:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800540a:	4620      	mov	r0, r4
 800540c:	2200      	movs	r2, #0
 800540e:	f002 f935 	bl	800767c <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8005412:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005416:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 8005418:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800541a:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800541c:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8005420:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 8005424:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8005426:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 800542a:	b123      	cbz	r3, 8005436 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800542c:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8005430:	4620      	mov	r0, r4
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005436:	2000      	movs	r0, #0
 8005438:	bd70      	pop	{r4, r5, r6, pc}
 800543a:	bf00      	nop

0800543c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800543c:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800543e:	2000      	movs	r0, #0
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop

08005444 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8005444:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8005448:	f880 2275 	strb.w	r2, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800544c:	2304      	movs	r3, #4
 800544e:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8005452:	2000      	movs	r0, #0
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop

08005458 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8005458:	4603      	mov	r3, r0
  pdev->dev_state = pdev->dev_old_state;
  return USBD_OK;
}
 800545a:	2000      	movs	r0, #0
  pdev->dev_state = pdev->dev_old_state;
 800545c:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8005460:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
}
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop

08005468 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8005468:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800546c:	2a03      	cmp	r2, #3
 800546e:	d001      	beq.n	8005474 <USBD_LL_SOF+0xc>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 8005470:	2000      	movs	r0, #0
 8005472:	4770      	bx	lr
{
 8005474:	b508      	push	{r3, lr}
    if(pdev->pClass->SOF != NULL)
 8005476:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	b103      	cbz	r3, 8005480 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 800547e:	4798      	blx	r3
}
 8005480:	2000      	movs	r0, #0
 8005482:	bd08      	pop	{r3, pc}

08005484 <USBD_LL_IsoINIncomplete>:
 8005484:	2000      	movs	r0, #0
 8005486:	4770      	bx	lr

08005488 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8005488:	2000      	movs	r0, #0
 800548a:	4770      	bx	lr

0800548c <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 800548c:	2000      	movs	r0, #0
 800548e:	4770      	bx	lr

08005490 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8005490:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005492:	2101      	movs	r1, #1
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005494:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005498:	f880 1274 	strb.w	r1, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800549c:	6852      	ldr	r2, [r2, #4]
 800549e:	7901      	ldrb	r1, [r0, #4]
 80054a0:	4790      	blx	r2

  return USBD_OK;
}
 80054a2:	2000      	movs	r0, #0
 80054a4:	bd08      	pop	{r3, pc}
 80054a6:	bf00      	nop

080054a8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80054a8:	b530      	push	{r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054aa:	780b      	ldrb	r3, [r1, #0]
 80054ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80054b0:	2b20      	cmp	r3, #32
{
 80054b2:	b083      	sub	sp, #12
 80054b4:	460c      	mov	r4, r1
 80054b6:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054b8:	d016      	beq.n	80054e8 <USBD_StdDevReq+0x40>
 80054ba:	2b40      	cmp	r3, #64	; 0x40
 80054bc:	d014      	beq.n	80054e8 <USBD_StdDevReq+0x40>
 80054be:	b14b      	cbz	r3, 80054d4 <USBD_StdDevReq+0x2c>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 80054c0:	2180      	movs	r1, #128	; 0x80
 80054c2:	f002 f8f9 	bl	80076b8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80054c6:	4628      	mov	r0, r5
 80054c8:	2100      	movs	r1, #0
 80054ca:	f002 f8f5 	bl	80076b8 <USBD_LL_StallEP>
}
 80054ce:	2000      	movs	r0, #0
 80054d0:	b003      	add	sp, #12
 80054d2:	bd30      	pop	{r4, r5, pc}
    switch (req->bRequest)
 80054d4:	784b      	ldrb	r3, [r1, #1]
 80054d6:	2b09      	cmp	r3, #9
 80054d8:	d819      	bhi.n	800550e <USBD_StdDevReq+0x66>
 80054da:	e8df f003 	tbb	[pc, r3]
 80054de:	5a43      	.short	0x5a43
 80054e0:	6a186618 	.word	0x6a186618
 80054e4:	239d1886 	.word	0x239d1886
    pdev->pClass->Setup(pdev, req);
 80054e8:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
 80054ec:	4621      	mov	r1, r4
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	4628      	mov	r0, r5
 80054f2:	4798      	blx	r3
}
 80054f4:	2000      	movs	r0, #0
 80054f6:	b003      	add	sp, #12
 80054f8:	bd30      	pop	{r4, r5, pc}
      if (cfgidx)
 80054fa:	b379      	cbz	r1, 800555c <USBD_StdDevReq+0xb4>
        pdev->dev_config = cfgidx;
 80054fc:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80054fe:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8005500:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005502:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005506:	f7ff fe8d 	bl	8005224 <USBD_SetClassConfig>
 800550a:	2802      	cmp	r0, #2
 800550c:	d126      	bne.n	800555c <USBD_StdDevReq+0xb4>
  USBD_LL_StallEP(pdev , 0x80U);
 800550e:	2180      	movs	r1, #128	; 0x80
 8005510:	4628      	mov	r0, r5
 8005512:	f002 f8d1 	bl	80076b8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005516:	4628      	mov	r0, r5
 8005518:	2100      	movs	r1, #0
 800551a:	f002 f8cd 	bl	80076b8 <USBD_LL_StallEP>
}
 800551e:	2000      	movs	r0, #0
 8005520:	b003      	add	sp, #12
 8005522:	bd30      	pop	{r4, r5, pc}
  cfgidx = (uint8_t)(req->wValue);
 8005524:	7889      	ldrb	r1, [r1, #2]
 8005526:	4c96      	ldr	r4, [pc, #600]	; (8005780 <USBD_StdDevReq+0x2d8>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005528:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800552a:	7021      	strb	r1, [r4, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800552c:	d8ef      	bhi.n	800550e <USBD_StdDevReq+0x66>
    switch (pdev->dev_state)
 800552e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005532:	2b02      	cmp	r3, #2
 8005534:	d0e1      	beq.n	80054fa <USBD_StdDevReq+0x52>
 8005536:	2b03      	cmp	r3, #3
 8005538:	f040 8102 	bne.w	8005740 <USBD_StdDevReq+0x298>
      if (cfgidx == 0U)
 800553c:	2900      	cmp	r1, #0
 800553e:	f000 8118 	beq.w	8005772 <USBD_StdDevReq+0x2ca>
      else if (cfgidx != pdev->dev_config)
 8005542:	6841      	ldr	r1, [r0, #4]
 8005544:	2901      	cmp	r1, #1
 8005546:	d009      	beq.n	800555c <USBD_StdDevReq+0xb4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005548:	b2c9      	uxtb	r1, r1
 800554a:	f7ff fe75 	bl	8005238 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800554e:	7821      	ldrb	r1, [r4, #0]
 8005550:	6069      	str	r1, [r5, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005552:	4628      	mov	r0, r5
 8005554:	f7ff fe66 	bl	8005224 <USBD_SetClassConfig>
 8005558:	2802      	cmp	r0, #2
 800555a:	d0d8      	beq.n	800550e <USBD_StdDevReq+0x66>
        USBD_CtlSendStatus(pdev);
 800555c:	4628      	mov	r0, r5
 800555e:	f000 fa5f 	bl	8005a20 <USBD_CtlSendStatus>
 8005562:	e7b4      	b.n	80054ce <USBD_StdDevReq+0x26>
  switch (pdev->dev_state)
 8005564:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005568:	3b01      	subs	r3, #1
 800556a:	2b02      	cmp	r3, #2
 800556c:	f04f 0203 	mov.w	r2, #3
 8005570:	d8cd      	bhi.n	800550e <USBD_StdDevReq+0x66>
    if(req->wLength != 0x2U)
 8005572:	88cb      	ldrh	r3, [r1, #6]
 8005574:	2b02      	cmp	r3, #2
 8005576:	d1ca      	bne.n	800550e <USBD_StdDevReq+0x66>
    if (pdev->dev_remote_wakeup)
 8005578:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800557c:	2101      	movs	r1, #1
 800557e:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup)
 8005580:	b103      	cbz	r3, 8005584 <USBD_StdDevReq+0xdc>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005582:	60c2      	str	r2, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005584:	2202      	movs	r2, #2
 8005586:	f105 010c 	add.w	r1, r5, #12
 800558a:	4628      	mov	r0, r5
 800558c:	f000 fa1a 	bl	80059c4 <USBD_CtlSendData>
 8005590:	e79d      	b.n	80054ce <USBD_StdDevReq+0x26>
  switch (pdev->dev_state)
 8005592:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005596:	3b01      	subs	r3, #1
 8005598:	2b02      	cmp	r3, #2
 800559a:	d8b8      	bhi.n	800550e <USBD_StdDevReq+0x66>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800559c:	884b      	ldrh	r3, [r1, #2]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d195      	bne.n	80054ce <USBD_StdDevReq+0x26>
      pdev->dev_remote_wakeup = 0U;
 80055a2:	2300      	movs	r3, #0
 80055a4:	f8c5 327c 	str.w	r3, [r5, #636]	; 0x27c
 80055a8:	e7d8      	b.n	800555c <USBD_StdDevReq+0xb4>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80055aa:	884b      	ldrh	r3, [r1, #2]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d18e      	bne.n	80054ce <USBD_StdDevReq+0x26>
 80055b0:	e7f8      	b.n	80055a4 <USBD_StdDevReq+0xfc>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80055b2:	888b      	ldrh	r3, [r1, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1aa      	bne.n	800550e <USBD_StdDevReq+0x66>
 80055b8:	88cb      	ldrh	r3, [r1, #6]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1a7      	bne.n	800550e <USBD_StdDevReq+0x66>
 80055be:	884c      	ldrh	r4, [r1, #2]
 80055c0:	2c7f      	cmp	r4, #127	; 0x7f
 80055c2:	d8a4      	bhi.n	800550e <USBD_StdDevReq+0x66>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055c4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80055c8:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80055ca:	b2e1      	uxtb	r1, r4
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055cc:	d09f      	beq.n	800550e <USBD_StdDevReq+0x66>
      pdev->dev_address = dev_addr;
 80055ce:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80055d2:	f002 f8a1 	bl	8007718 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80055d6:	4628      	mov	r0, r5
 80055d8:	f000 fa22 	bl	8005a20 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80055dc:	2c00      	cmp	r4, #0
 80055de:	f000 80c4 	beq.w	800576a <USBD_StdDevReq+0x2c2>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80055e2:	2302      	movs	r3, #2
 80055e4:	f885 3274 	strb.w	r3, [r5, #628]	; 0x274
 80055e8:	e771      	b.n	80054ce <USBD_StdDevReq+0x26>
 80055ea:	884a      	ldrh	r2, [r1, #2]
  switch (req->wValue >> 8)
 80055ec:	0a13      	lsrs	r3, r2, #8
 80055ee:	3b01      	subs	r3, #1
 80055f0:	2b06      	cmp	r3, #6
 80055f2:	d88c      	bhi.n	800550e <USBD_StdDevReq+0x66>
 80055f4:	a101      	add	r1, pc, #4	; (adr r1, 80055fc <USBD_StdDevReq+0x154>)
 80055f6:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055fa:	bf00      	nop
 80055fc:	080056c3 	.word	0x080056c3
 8005600:	080056ab 	.word	0x080056ab
 8005604:	08005699 	.word	0x08005699
 8005608:	0800550f 	.word	0x0800550f
 800560c:	0800550f 	.word	0x0800550f
 8005610:	08005683 	.word	0x08005683
 8005614:	0800563f 	.word	0x0800563f
  if (req->wLength != 1U)
 8005618:	88ca      	ldrh	r2, [r1, #6]
 800561a:	2a01      	cmp	r2, #1
 800561c:	f47f af77 	bne.w	800550e <USBD_StdDevReq+0x66>
    switch (pdev->dev_state)
 8005620:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005624:	2b00      	cmp	r3, #0
 8005626:	f43f af72 	beq.w	800550e <USBD_StdDevReq+0x66>
 800562a:	2b02      	cmp	r3, #2
 800562c:	f240 8081 	bls.w	8005732 <USBD_StdDevReq+0x28a>
 8005630:	2b03      	cmp	r3, #3
 8005632:	f47f af6c 	bne.w	800550e <USBD_StdDevReq+0x66>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005636:	1d01      	adds	r1, r0, #4
 8005638:	f000 f9c4 	bl	80059c4 <USBD_CtlSendData>
 800563c:	e747      	b.n	80054ce <USBD_StdDevReq+0x26>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800563e:	7c03      	ldrb	r3, [r0, #16]
 8005640:	2b00      	cmp	r3, #0
 8005642:	f47f af64 	bne.w	800550e <USBD_StdDevReq+0x66>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005646:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800564a:	f10d 0006 	add.w	r0, sp, #6
 800564e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005650:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005652:	2307      	movs	r3, #7
 8005654:	7043      	strb	r3, [r0, #1]
  if((len != 0U) && (req->wLength != 0U))
 8005656:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800565a:	b16b      	cbz	r3, 8005678 <USBD_StdDevReq+0x1d0>
 800565c:	88e2      	ldrh	r2, [r4, #6]
 800565e:	2a00      	cmp	r2, #0
 8005660:	f43f af7c 	beq.w	800555c <USBD_StdDevReq+0xb4>
    len = MIN(len, req->wLength);
 8005664:	4293      	cmp	r3, r2
 8005666:	bf28      	it	cs
 8005668:	4613      	movcs	r3, r2
    USBD_CtlSendData (pdev, pbuf, len);
 800566a:	4601      	mov	r1, r0
 800566c:	461a      	mov	r2, r3
 800566e:	4628      	mov	r0, r5
    len = MIN(len, req->wLength);
 8005670:	f8ad 3006 	strh.w	r3, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 8005674:	f000 f9a6 	bl	80059c4 <USBD_CtlSendData>
  if(req->wLength == 0U)
 8005678:	88e3      	ldrh	r3, [r4, #6]
 800567a:	2b00      	cmp	r3, #0
 800567c:	f47f af27 	bne.w	80054ce <USBD_StdDevReq+0x26>
 8005680:	e76c      	b.n	800555c <USBD_StdDevReq+0xb4>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005682:	7c03      	ldrb	r3, [r0, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	f47f af42 	bne.w	800550e <USBD_StdDevReq+0x66>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800568a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800568e:	f10d 0006 	add.w	r0, sp, #6
 8005692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005694:	4798      	blx	r3
 8005696:	e7de      	b.n	8005656 <USBD_StdDevReq+0x1ae>
    switch ((uint8_t)(req->wValue))
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	2a05      	cmp	r2, #5
 800569c:	f63f af37 	bhi.w	800550e <USBD_StdDevReq+0x66>
 80056a0:	e8df f002 	tbb	[pc, r2]
 80056a4:	272f373f 	.word	0x272f373f
 80056a8:	171f      	.short	0x171f
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80056aa:	7c03      	ldrb	r3, [r0, #16]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d153      	bne.n	8005758 <USBD_StdDevReq+0x2b0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80056b0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80056b4:	f10d 0006 	add.w	r0, sp, #6
 80056b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ba:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80056bc:	2302      	movs	r3, #2
 80056be:	7043      	strb	r3, [r0, #1]
 80056c0:	e7c9      	b.n	8005656 <USBD_StdDevReq+0x1ae>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80056c2:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80056c6:	7c00      	ldrb	r0, [r0, #16]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f10d 0106 	add.w	r1, sp, #6
 80056ce:	4798      	blx	r3
 80056d0:	e7c1      	b.n	8005656 <USBD_StdDevReq+0x1ae>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80056d2:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80056d6:	7c00      	ldrb	r0, [r0, #16]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	f10d 0106 	add.w	r1, sp, #6
 80056de:	4798      	blx	r3
 80056e0:	e7b9      	b.n	8005656 <USBD_StdDevReq+0x1ae>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80056e2:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80056e6:	7c00      	ldrb	r0, [r0, #16]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	f10d 0106 	add.w	r1, sp, #6
 80056ee:	4798      	blx	r3
 80056f0:	e7b1      	b.n	8005656 <USBD_StdDevReq+0x1ae>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80056f2:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80056f6:	7c00      	ldrb	r0, [r0, #16]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f10d 0106 	add.w	r1, sp, #6
 80056fe:	4798      	blx	r3
 8005700:	e7a9      	b.n	8005656 <USBD_StdDevReq+0x1ae>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005702:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005706:	7c00      	ldrb	r0, [r0, #16]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f10d 0106 	add.w	r1, sp, #6
 800570e:	4798      	blx	r3
 8005710:	e7a1      	b.n	8005656 <USBD_StdDevReq+0x1ae>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005712:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005716:	7c00      	ldrb	r0, [r0, #16]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f10d 0106 	add.w	r1, sp, #6
 800571e:	4798      	blx	r3
 8005720:	e799      	b.n	8005656 <USBD_StdDevReq+0x1ae>
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005722:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005726:	7c00      	ldrb	r0, [r0, #16]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f10d 0106 	add.w	r1, sp, #6
 800572e:	4798      	blx	r3
 8005730:	e791      	b.n	8005656 <USBD_StdDevReq+0x1ae>
      pdev->dev_default_config = 0U;
 8005732:	4601      	mov	r1, r0
 8005734:	2300      	movs	r3, #0
 8005736:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800573a:	f000 f943 	bl	80059c4 <USBD_CtlSendData>
 800573e:	e6c6      	b.n	80054ce <USBD_StdDevReq+0x26>
  USBD_LL_StallEP(pdev , 0x80U);
 8005740:	2180      	movs	r1, #128	; 0x80
 8005742:	f001 ffb9 	bl	80076b8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005746:	2100      	movs	r1, #0
 8005748:	4628      	mov	r0, r5
 800574a:	f001 ffb5 	bl	80076b8 <USBD_LL_StallEP>
      USBD_ClrClassConfig(pdev, cfgidx);
 800574e:	7821      	ldrb	r1, [r4, #0]
 8005750:	4628      	mov	r0, r5
 8005752:	f7ff fd71 	bl	8005238 <USBD_ClrClassConfig>
 8005756:	e6ba      	b.n	80054ce <USBD_StdDevReq+0x26>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005758:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800575c:	f10d 0006 	add.w	r0, sp, #6
 8005760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005762:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005764:	2302      	movs	r3, #2
 8005766:	7043      	strb	r3, [r0, #1]
 8005768:	e775      	b.n	8005656 <USBD_StdDevReq+0x1ae>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800576a:	2301      	movs	r3, #1
 800576c:	f885 3274 	strb.w	r3, [r5, #628]	; 0x274
 8005770:	e6ad      	b.n	80054ce <USBD_StdDevReq+0x26>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005772:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 8005774:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005776:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        USBD_ClrClassConfig(pdev, cfgidx);
 800577a:	f7ff fd5d 	bl	8005238 <USBD_ClrClassConfig>
 800577e:	e6ed      	b.n	800555c <USBD_StdDevReq+0xb4>
 8005780:	20000800 	.word	0x20000800

08005784 <USBD_StdItfReq>:
{
 8005784:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005786:	780b      	ldrb	r3, [r1, #0]
 8005788:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800578c:	2b20      	cmp	r3, #32
{
 800578e:	460d      	mov	r5, r1
 8005790:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005792:	d00b      	beq.n	80057ac <USBD_StdItfReq+0x28>
 8005794:	2b40      	cmp	r3, #64	; 0x40
 8005796:	d009      	beq.n	80057ac <USBD_StdItfReq+0x28>
 8005798:	b143      	cbz	r3, 80057ac <USBD_StdItfReq+0x28>
  USBD_LL_StallEP(pdev , 0x80U);
 800579a:	2180      	movs	r1, #128	; 0x80
 800579c:	f001 ff8c 	bl	80076b8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80057a0:	4620      	mov	r0, r4
 80057a2:	2100      	movs	r1, #0
 80057a4:	f001 ff88 	bl	80076b8 <USBD_LL_StallEP>
}
 80057a8:	2000      	movs	r0, #0
 80057aa:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 80057ac:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 80057b0:	3b01      	subs	r3, #1
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d802      	bhi.n	80057bc <USBD_StdItfReq+0x38>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80057b6:	792b      	ldrb	r3, [r5, #4]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d909      	bls.n	80057d0 <USBD_StdItfReq+0x4c>
  USBD_LL_StallEP(pdev , 0x80U);
 80057bc:	2180      	movs	r1, #128	; 0x80
 80057be:	4620      	mov	r0, r4
 80057c0:	f001 ff7a 	bl	80076b8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80057c4:	4620      	mov	r0, r4
 80057c6:	2100      	movs	r1, #0
 80057c8:	f001 ff76 	bl	80076b8 <USBD_LL_StallEP>
}
 80057cc:	2000      	movs	r0, #0
 80057ce:	bd38      	pop	{r3, r4, r5, pc}
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80057d0:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80057d4:	4629      	mov	r1, r5
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	4620      	mov	r0, r4
 80057da:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80057dc:	88eb      	ldrh	r3, [r5, #6]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1f4      	bne.n	80057cc <USBD_StdItfReq+0x48>
 80057e2:	2800      	cmp	r0, #0
 80057e4:	d1f2      	bne.n	80057cc <USBD_StdItfReq+0x48>
          USBD_CtlSendStatus(pdev);
 80057e6:	4620      	mov	r0, r4
 80057e8:	f000 f91a 	bl	8005a20 <USBD_CtlSendStatus>
 80057ec:	e7ee      	b.n	80057cc <USBD_StdItfReq+0x48>
 80057ee:	bf00      	nop

080057f0 <USBD_StdEPReq>:
{
 80057f0:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057f2:	780c      	ldrb	r4, [r1, #0]
 80057f4:	f004 0460 	and.w	r4, r4, #96	; 0x60
 80057f8:	2c20      	cmp	r4, #32
{
 80057fa:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057fc:	d025      	beq.n	800584a <USBD_StdEPReq+0x5a>
 80057fe:	2c40      	cmp	r4, #64	; 0x40
 8005800:	d023      	beq.n	800584a <USBD_StdEPReq+0x5a>
 8005802:	b144      	cbz	r4, 8005816 <USBD_StdEPReq+0x26>
  USBD_LL_StallEP(pdev , 0x80U);
 8005804:	2180      	movs	r1, #128	; 0x80
 8005806:	f001 ff57 	bl	80076b8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800580a:	4628      	mov	r0, r5
 800580c:	2100      	movs	r1, #0
 800580e:	f001 ff53 	bl	80076b8 <USBD_LL_StallEP>
}
 8005812:	2000      	movs	r0, #0
 8005814:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 8005816:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8005818:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 800581a:	2b01      	cmp	r3, #1
  ep_addr  = LOBYTE(req->wIndex);
 800581c:	b2d6      	uxtb	r6, r2
    switch (req->bRequest)
 800581e:	d043      	beq.n	80058a8 <USBD_StdEPReq+0xb8>
 8005820:	d31a      	bcc.n	8005858 <USBD_StdEPReq+0x68>
 8005822:	2b03      	cmp	r3, #3
 8005824:	d146      	bne.n	80058b4 <USBD_StdEPReq+0xc4>
      switch (pdev->dev_state)
 8005826:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800582a:	2b02      	cmp	r3, #2
 800582c:	d04b      	beq.n	80058c6 <USBD_StdEPReq+0xd6>
 800582e:	2b03      	cmp	r3, #3
 8005830:	d140      	bne.n	80058b4 <USBD_StdEPReq+0xc4>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005832:	884b      	ldrh	r3, [r1, #2]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d158      	bne.n	80058ea <USBD_StdEPReq+0xfa>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005838:	0672      	lsls	r2, r6, #25
 800583a:	d056      	beq.n	80058ea <USBD_StdEPReq+0xfa>
 800583c:	88cb      	ldrh	r3, [r1, #6]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d153      	bne.n	80058ea <USBD_StdEPReq+0xfa>
            USBD_LL_StallEP(pdev, ep_addr);
 8005842:	4631      	mov	r1, r6
 8005844:	f001 ff38 	bl	80076b8 <USBD_LL_StallEP>
 8005848:	e04f      	b.n	80058ea <USBD_StdEPReq+0xfa>
    pdev->pClass->Setup (pdev, req);
 800584a:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
 800584e:	4628      	mov	r0, r5
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	4798      	blx	r3
}
 8005854:	2000      	movs	r0, #0
 8005856:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8005858:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800585c:	2b02      	cmp	r3, #2
 800585e:	d051      	beq.n	8005904 <USBD_StdEPReq+0x114>
 8005860:	2b03      	cmp	r3, #3
 8005862:	d127      	bne.n	80058b4 <USBD_StdEPReq+0xc4>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005864:	f006 030f 	and.w	r3, r6, #15
 8005868:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 800586c:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800586e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 8005872:	d456      	bmi.n	8005922 <USBD_StdEPReq+0x132>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005874:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8005878:	2b00      	cmp	r3, #0
 800587a:	d03a      	beq.n	80058f2 <USBD_StdEPReq+0x102>
 800587c:	f006 037f 	and.w	r3, r6, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005880:	2414      	movs	r4, #20
 8005882:	fb04 0403 	mla	r4, r4, r3, r0
 8005886:	f504 74a0 	add.w	r4, r4, #320	; 0x140
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800588a:	b133      	cbz	r3, 800589a <USBD_StdEPReq+0xaa>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800588c:	4631      	mov	r1, r6
 800588e:	4628      	mov	r0, r5
 8005890:	f001 ff2e 	bl	80076f0 <USBD_LL_IsStallEP>
 8005894:	2800      	cmp	r0, #0
 8005896:	d04f      	beq.n	8005938 <USBD_StdEPReq+0x148>
            pep->status = 0x0001U;
 8005898:	2301      	movs	r3, #1
 800589a:	6023      	str	r3, [r4, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800589c:	4621      	mov	r1, r4
 800589e:	4628      	mov	r0, r5
 80058a0:	2202      	movs	r2, #2
 80058a2:	f000 f88f 	bl	80059c4 <USBD_CtlSendData>
          break;
 80058a6:	e7b4      	b.n	8005812 <USBD_StdEPReq+0x22>
      switch (pdev->dev_state)
 80058a8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d00a      	beq.n	80058c6 <USBD_StdEPReq+0xd6>
 80058b0:	2b03      	cmp	r3, #3
 80058b2:	d012      	beq.n	80058da <USBD_StdEPReq+0xea>
  USBD_LL_StallEP(pdev , 0x80U);
 80058b4:	2180      	movs	r1, #128	; 0x80
 80058b6:	f001 feff 	bl	80076b8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80058ba:	4621      	mov	r1, r4
 80058bc:	4628      	mov	r0, r5
 80058be:	f001 fefb 	bl	80076b8 <USBD_LL_StallEP>
}
 80058c2:	2000      	movs	r0, #0
 80058c4:	bd70      	pop	{r4, r5, r6, pc}
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80058c6:	0673      	lsls	r3, r6, #25
 80058c8:	d013      	beq.n	80058f2 <USBD_StdEPReq+0x102>
          USBD_LL_StallEP(pdev, ep_addr);
 80058ca:	4631      	mov	r1, r6
 80058cc:	f001 fef4 	bl	80076b8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80058d0:	4628      	mov	r0, r5
 80058d2:	2180      	movs	r1, #128	; 0x80
 80058d4:	f001 fef0 	bl	80076b8 <USBD_LL_StallEP>
 80058d8:	e79b      	b.n	8005812 <USBD_StdEPReq+0x22>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80058da:	884b      	ldrh	r3, [r1, #2]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d198      	bne.n	8005812 <USBD_StdEPReq+0x22>
          if ((ep_addr & 0x7FU) != 0x00U)
 80058e0:	0674      	lsls	r4, r6, #25
 80058e2:	d002      	beq.n	80058ea <USBD_StdEPReq+0xfa>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80058e4:	4631      	mov	r1, r6
 80058e6:	f001 fef5 	bl	80076d4 <USBD_LL_ClearStallEP>
        USBD_CtlSendStatus(pdev);
 80058ea:	4628      	mov	r0, r5
 80058ec:	f000 f898 	bl	8005a20 <USBD_CtlSendStatus>
        break;
 80058f0:	e78f      	b.n	8005812 <USBD_StdEPReq+0x22>
  USBD_LL_StallEP(pdev , 0x80U);
 80058f2:	2180      	movs	r1, #128	; 0x80
 80058f4:	4628      	mov	r0, r5
 80058f6:	f001 fedf 	bl	80076b8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80058fa:	4628      	mov	r0, r5
 80058fc:	2100      	movs	r1, #0
 80058fe:	f001 fedb 	bl	80076b8 <USBD_LL_StallEP>
 8005902:	e786      	b.n	8005812 <USBD_StdEPReq+0x22>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005904:	0670      	lsls	r0, r6, #25
 8005906:	d1f4      	bne.n	80058f2 <USBD_StdEPReq+0x102>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005908:	0611      	lsls	r1, r2, #24
 800590a:	bf4c      	ite	mi
 800590c:	f105 0114 	addmi.w	r1, r5, #20
 8005910:	f505 71a0 	addpl.w	r1, r5, #320	; 0x140
          pep->status = 0x0000U;
 8005914:	2300      	movs	r3, #0
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005916:	4628      	mov	r0, r5
          pep->status = 0x0000U;
 8005918:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800591a:	2202      	movs	r2, #2
 800591c:	f000 f852 	bl	80059c4 <USBD_CtlSendData>
          break;
 8005920:	e777      	b.n	8005812 <USBD_StdEPReq+0x22>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d0e4      	beq.n	80058f2 <USBD_StdEPReq+0x102>
 8005928:	f006 037f 	and.w	r3, r6, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800592c:	1c5c      	adds	r4, r3, #1
 800592e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8005932:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8005936:	e7a8      	b.n	800588a <USBD_StdEPReq+0x9a>
            pep->status = 0x0000U;
 8005938:	6020      	str	r0, [r4, #0]
 800593a:	e7af      	b.n	800589c <USBD_StdEPReq+0xac>

0800593c <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800593c:	780b      	ldrb	r3, [r1, #0]
 800593e:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8005940:	784b      	ldrb	r3, [r1, #1]
 8005942:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8005944:	78ca      	ldrb	r2, [r1, #3]
 8005946:	788b      	ldrb	r3, [r1, #2]
 8005948:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800594c:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800594e:	794a      	ldrb	r2, [r1, #5]
 8005950:	790b      	ldrb	r3, [r1, #4]
 8005952:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005956:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8005958:	79ca      	ldrb	r2, [r1, #7]
 800595a:	798b      	ldrb	r3, [r1, #6]
 800595c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005960:	80c3      	strh	r3, [r0, #6]
 8005962:	4770      	bx	lr

08005964 <USBD_CtlError>:
{
 8005964:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 8005966:	2180      	movs	r1, #128	; 0x80
{
 8005968:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 800596a:	f001 fea5 	bl	80076b8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800596e:	4620      	mov	r0, r4
 8005970:	2100      	movs	r1, #0
}
 8005972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8005976:	f001 be9f 	b.w	80076b8 <USBD_LL_StallEP>
 800597a:	bf00      	nop

0800597c <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 800597c:	b1f8      	cbz	r0, 80059be <USBD_GetString+0x42>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 800597e:	7803      	ldrb	r3, [r0, #0]
{
 8005980:	b430      	push	{r4, r5}
    while (*buf != '\0')
 8005982:	b1eb      	cbz	r3, 80059c0 <USBD_GetString+0x44>
 8005984:	4604      	mov	r4, r0
 8005986:	2300      	movs	r3, #0
 8005988:	f814 5f01 	ldrb.w	r5, [r4, #1]!
    {
        len++;
 800598c:	3301      	adds	r3, #1
 800598e:	b2db      	uxtb	r3, r3
    while (*buf != '\0')
 8005990:	2d00      	cmp	r5, #0
 8005992:	d1f9      	bne.n	8005988 <USBD_GetString+0xc>
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	3302      	adds	r3, #2
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005998:	2403      	movs	r4, #3
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800599a:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800599c:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800599e:	704c      	strb	r4, [r1, #1]
    while (*desc != '\0')
 80059a0:	7804      	ldrb	r4, [r0, #0]
 80059a2:	b15c      	cbz	r4, 80059bc <USBD_GetString+0x40>
 80059a4:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 80059a6:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	b2d2      	uxtb	r2, r2
 80059ac:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 80059ae:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 80059b0:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 80059b4:	3302      	adds	r3, #2
 80059b6:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 80059b8:	2c00      	cmp	r4, #0
 80059ba:	d1f5      	bne.n	80059a8 <USBD_GetString+0x2c>
}
 80059bc:	bc30      	pop	{r4, r5}
 80059be:	4770      	bx	lr
    while (*buf != '\0')
 80059c0:	2302      	movs	r3, #2
 80059c2:	e7e9      	b.n	8005998 <USBD_GetString+0x1c>

080059c4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80059c4:	b538      	push	{r3, r4, r5, lr}
 80059c6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80059c8:	2502      	movs	r5, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80059ca:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
 80059cc:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 80059ce:	6203      	str	r3, [r0, #32]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80059d0:	f8c0 526c 	str.w	r5, [r0, #620]	; 0x26c
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80059d4:	2100      	movs	r1, #0
 80059d6:	f001 fead 	bl	8007734 <USBD_LL_Transmit>

  return USBD_OK;
}
 80059da:	2000      	movs	r0, #0
 80059dc:	bd38      	pop	{r3, r4, r5, pc}
 80059de:	bf00      	nop

080059e0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80059e0:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80059e2:	4613      	mov	r3, r2
 80059e4:	460a      	mov	r2, r1
 80059e6:	2100      	movs	r1, #0
 80059e8:	f001 fea4 	bl	8007734 <USBD_LL_Transmit>

  return USBD_OK;
}
 80059ec:	2000      	movs	r0, #0
 80059ee:	bd08      	pop	{r3, pc}

080059f0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80059f0:	b538      	push	{r3, r4, r5, lr}
 80059f2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80059f4:	2503      	movs	r5, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80059f6:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
 80059f8:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 80059fc:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005a00:	f8c0 526c 	str.w	r5, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8005a04:	2100      	movs	r1, #0
 8005a06:	f001 fea3 	bl	8007750 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	bd38      	pop	{r3, r4, r5, pc}
 8005a0e:	bf00      	nop

08005a10 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8005a10:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005a12:	4613      	mov	r3, r2
 8005a14:	460a      	mov	r2, r1
 8005a16:	2100      	movs	r1, #0
 8005a18:	f001 fe9a 	bl	8007750 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005a1c:	2000      	movs	r0, #0
 8005a1e:	bd08      	pop	{r3, pc}

08005a20 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8005a20:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005a22:	2204      	movs	r2, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005a24:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005a26:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	f001 fe81 	bl	8007734 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005a32:	2000      	movs	r0, #0
 8005a34:	bd08      	pop	{r3, pc}
 8005a36:	bf00      	nop

08005a38 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8005a38:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005a3a:	2205      	movs	r2, #5

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005a3c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005a3e:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005a42:	4619      	mov	r1, r3
 8005a44:	461a      	mov	r2, r3
 8005a46:	f001 fe83 	bl	8007750 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005a4a:	2000      	movs	r0, #0
 8005a4c:	bd08      	pop	{r3, pc}
 8005a4e:	bf00      	nop

08005a50 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005a50:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8005a52:	f000 fd87 	bl	8006564 <vTaskStartScheduler>
  
  return osOK;
}
 8005a56:	2000      	movs	r0, #0
 8005a58:	bd08      	pop	{r3, pc}
 8005a5a:	bf00      	nop

08005a5c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005a5e:	6945      	ldr	r5, [r0, #20]
{
 8005a60:	b087      	sub	sp, #28
 8005a62:	460b      	mov	r3, r1
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005a64:	b18d      	cbz	r5, 8005a8a <osThreadCreate+0x2e>
 8005a66:	6986      	ldr	r6, [r0, #24]
 8005a68:	b17e      	cbz	r6, 8005a8a <osThreadCreate+0x2e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a6a:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8005a6e:	6902      	ldr	r2, [r0, #16]
 8005a70:	e890 0082 	ldmia.w	r0, {r1, r7}
  if (priority != osPriorityError) {
 8005a74:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8005a76:	bf14      	ite	ne
 8005a78:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005a7a:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a7c:	e88d 0070 	stmia.w	sp, {r4, r5, r6}
 8005a80:	4638      	mov	r0, r7
 8005a82:	f000 fc95 	bl	80063b0 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 8005a86:	b007      	add	sp, #28
 8005a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a8a:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8005a8e:	8a02      	ldrh	r2, [r0, #16]
 8005a90:	e890 0042 	ldmia.w	r0, {r1, r6}
  if (priority != osPriorityError) {
 8005a94:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8005a96:	bf14      	ite	ne
 8005a98:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005a9a:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a9c:	ad05      	add	r5, sp, #20
 8005a9e:	9400      	str	r4, [sp, #0]
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	9501      	str	r5, [sp, #4]
 8005aa4:	f000 fcbc 	bl	8006420 <xTaskCreate>
 8005aa8:	2801      	cmp	r0, #1
 8005aaa:	bf0c      	ite	eq
 8005aac:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 8005aae:	2000      	movne	r0, #0
}
 8005ab0:	b007      	add	sp, #28
 8005ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ab4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005ab4:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	bf08      	it	eq
 8005aba:	2001      	moveq	r0, #1
 8005abc:	f000 fef6 	bl	80068ac <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005ac0:	2000      	movs	r0, #0
 8005ac2:	bd08      	pop	{r3, pc}

08005ac4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ac4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ac8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005acc:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ace:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ad0:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ad2:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ad4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ad6:	6103      	str	r3, [r0, #16]
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop

08005adc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005adc:	2300      	movs	r3, #0
 8005ade:	6103      	str	r3, [r0, #16]
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop

08005ae4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ae4:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8005ae6:	6802      	ldr	r2, [r0, #0]
{
 8005ae8:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005aea:	689c      	ldr	r4, [r3, #8]
 8005aec:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005aee:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8005af0:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8005af2:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005af4:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005af6:	6099      	str	r1, [r3, #8]
}
 8005af8:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005afc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005afe:	6002      	str	r2, [r0, #0]
}
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop

08005b04 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b04:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b06:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b08:	1c6b      	adds	r3, r5, #1
 8005b0a:	d011      	beq.n	8005b30 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b0c:	f100 0208 	add.w	r2, r0, #8
 8005b10:	e000      	b.n	8005b14 <vListInsert+0x10>
 8005b12:	461a      	mov	r2, r3
 8005b14:	6853      	ldr	r3, [r2, #4]
 8005b16:	681c      	ldr	r4, [r3, #0]
 8005b18:	42a5      	cmp	r5, r4
 8005b1a:	d2fa      	bcs.n	8005b12 <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8005b1c:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b1e:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8005b20:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b22:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b24:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b26:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005b28:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005b2a:	6004      	str	r4, [r0, #0]
}
 8005b2c:	bc30      	pop	{r4, r5}
 8005b2e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b30:	6902      	ldr	r2, [r0, #16]
 8005b32:	6853      	ldr	r3, [r2, #4]
 8005b34:	e7f2      	b.n	8005b1c <vListInsert+0x18>
 8005b36:	bf00      	nop

08005b38 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b38:	6842      	ldr	r2, [r0, #4]
 8005b3a:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005b3c:	6903      	ldr	r3, [r0, #16]
{
 8005b3e:	b410      	push	{r4}
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b40:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b42:	6881      	ldr	r1, [r0, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b44:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b46:	604a      	str	r2, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8005b48:	681a      	ldr	r2, [r3, #0]
	if( pxList->pxIndex == pxItemToRemove )
 8005b4a:	42a0      	cmp	r0, r4
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b4c:	bf08      	it	eq
 8005b4e:	6059      	streq	r1, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8005b50:	3a01      	subs	r2, #1
	pxItemToRemove->pvContainer = NULL;
 8005b52:	2100      	movs	r1, #0
 8005b54:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005b56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b58:	6818      	ldr	r0, [r3, #0]
}
 8005b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b60:	4b0e      	ldr	r3, [pc, #56]	; (8005b9c <prvTaskExitError+0x3c>)
 8005b62:	681b      	ldr	r3, [r3, #0]
{
 8005b64:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8005b66:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8005b68:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 8005b6a:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8005b6c:	d008      	beq.n	8005b80 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	e7fe      	b.n	8005b7e <prvTaskExitError+0x1e>
 8005b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b90:	9b01      	ldr	r3, [sp, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d0fc      	beq.n	8005b90 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b96:	b002      	add	sp, #8
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	20000118 	.word	0x20000118

08005ba0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ba0:	4808      	ldr	r0, [pc, #32]	; (8005bc4 <prvPortStartFirstTask+0x24>)
 8005ba2:	6800      	ldr	r0, [r0, #0]
 8005ba4:	6800      	ldr	r0, [r0, #0]
 8005ba6:	f380 8808 	msr	MSP, r0
 8005baa:	f04f 0000 	mov.w	r0, #0
 8005bae:	f380 8814 	msr	CONTROL, r0
 8005bb2:	b662      	cpsie	i
 8005bb4:	b661      	cpsie	f
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	df00      	svc	0
 8005bc0:	bf00      	nop
 8005bc2:	0000      	.short	0x0000
 8005bc4:	e000ed08 	.word	0xe000ed08

08005bc8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005bc8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005bd8 <vPortEnableVFP+0x10>
 8005bcc:	6801      	ldr	r1, [r0, #0]
 8005bce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005bd2:	6001      	str	r1, [r0, #0]
 8005bd4:	4770      	bx	lr
 8005bd6:	0000      	.short	0x0000
 8005bd8:	e000ed88 	.word	0xe000ed88

08005bdc <pxPortInitialiseStack>:
{
 8005bdc:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005bde:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005be2:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005be6:	4c07      	ldr	r4, [pc, #28]	; (8005c04 <pxPortInitialiseStack+0x28>)
 8005be8:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005bec:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005bf0:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005bf4:	e900 0022 	stmdb	r0, {r1, r5}
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005bf8:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8005bfc:	bc30      	pop	{r4, r5}
 8005bfe:	3844      	subs	r0, #68	; 0x44
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	08005b61 	.word	0x08005b61
	...

08005c10 <SVC_Handler>:
	__asm volatile (
 8005c10:	4b07      	ldr	r3, [pc, #28]	; (8005c30 <pxCurrentTCBConst2>)
 8005c12:	6819      	ldr	r1, [r3, #0]
 8005c14:	6808      	ldr	r0, [r1, #0]
 8005c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c1a:	f380 8809 	msr	PSP, r0
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f04f 0000 	mov.w	r0, #0
 8005c26:	f380 8811 	msr	BASEPRI, r0
 8005c2a:	4770      	bx	lr
 8005c2c:	f3af 8000 	nop.w

08005c30 <pxCurrentTCBConst2>:
 8005c30:	20004420 	.word	0x20004420

08005c34 <vPortEnterCritical>:
 8005c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c38:	f383 8811 	msr	BASEPRI, r3
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8005c44:	4a0a      	ldr	r2, [pc, #40]	; (8005c70 <vPortEnterCritical+0x3c>)
 8005c46:	6813      	ldr	r3, [r2, #0]
 8005c48:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8005c4a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8005c4c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8005c4e:	d000      	beq.n	8005c52 <vPortEnterCritical+0x1e>
 8005c50:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c52:	4b08      	ldr	r3, [pc, #32]	; (8005c74 <vPortEnterCritical+0x40>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005c5a:	d0f9      	beq.n	8005c50 <vPortEnterCritical+0x1c>
 8005c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	e7fe      	b.n	8005c6c <vPortEnterCritical+0x38>
 8005c6e:	bf00      	nop
 8005c70:	20000118 	.word	0x20000118
 8005c74:	e000ed04 	.word	0xe000ed04

08005c78 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005c78:	4a08      	ldr	r2, [pc, #32]	; (8005c9c <vPortExitCritical+0x24>)
 8005c7a:	6813      	ldr	r3, [r2, #0]
 8005c7c:	b943      	cbnz	r3, 8005c90 <vPortExitCritical+0x18>
 8005c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	e7fe      	b.n	8005c8e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8005c90:	3b01      	subs	r3, #1
 8005c92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c94:	b90b      	cbnz	r3, 8005c9a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c96:	f383 8811 	msr	BASEPRI, r3
 8005c9a:	4770      	bx	lr
 8005c9c:	20000118 	.word	0x20000118

08005ca0 <PendSV_Handler>:
	__asm volatile
 8005ca0:	f3ef 8009 	mrs	r0, PSP
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	4b15      	ldr	r3, [pc, #84]	; (8005d00 <pxCurrentTCBConst>)
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	f01e 0f10 	tst.w	lr, #16
 8005cb0:	bf08      	it	eq
 8005cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cba:	6010      	str	r0, [r2, #0]
 8005cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005cc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005cc4:	f380 8811 	msr	BASEPRI, r0
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	f000 fe12 	bl	80068f8 <vTaskSwitchContext>
 8005cd4:	f04f 0000 	mov.w	r0, #0
 8005cd8:	f380 8811 	msr	BASEPRI, r0
 8005cdc:	bc09      	pop	{r0, r3}
 8005cde:	6819      	ldr	r1, [r3, #0]
 8005ce0:	6808      	ldr	r0, [r1, #0]
 8005ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce6:	f01e 0f10 	tst.w	lr, #16
 8005cea:	bf08      	it	eq
 8005cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005cf0:	f380 8809 	msr	PSP, r0
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	f3af 8000 	nop.w

08005d00 <pxCurrentTCBConst>:
 8005d00:	20004420 	.word	0x20004420

08005d04 <SysTick_Handler>:
{
 8005d04:	b508      	push	{r3, lr}
	__asm volatile
 8005d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0a:	f383 8811 	msr	BASEPRI, r3
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8005d16:	f000 fc8f 	bl	8006638 <xTaskIncrementTick>
 8005d1a:	b118      	cbz	r0, 8005d24 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d1c:	4b03      	ldr	r3, [pc, #12]	; (8005d2c <SysTick_Handler+0x28>)
 8005d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d22:	601a      	str	r2, [r3, #0]
	__asm volatile
 8005d24:	2300      	movs	r3, #0
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	bd08      	pop	{r3, pc}
 8005d2c:	e000ed04 	.word	0xe000ed04

08005d30 <vPortSetupTimerInterrupt>:
{
 8005d30:	b430      	push	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d32:	4a09      	ldr	r2, [pc, #36]	; (8005d58 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d34:	4d09      	ldr	r5, [pc, #36]	; (8005d5c <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d36:	4b0a      	ldr	r3, [pc, #40]	; (8005d60 <vPortSetupTimerInterrupt+0x30>)
 8005d38:	4c0a      	ldr	r4, [pc, #40]	; (8005d64 <vPortSetupTimerInterrupt+0x34>)
 8005d3a:	480b      	ldr	r0, [pc, #44]	; (8005d68 <vPortSetupTimerInterrupt+0x38>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d40:	6029      	str	r1, [r5, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	fba4 1303 	umull	r1, r3, r4, r3
 8005d48:	099b      	lsrs	r3, r3, #6
 8005d4a:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d4c:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d4e:	6003      	str	r3, [r0, #0]
}
 8005d50:	bc30      	pop	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d52:	6011      	str	r1, [r2, #0]
}
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	e000e010 	.word	0xe000e010
 8005d5c:	e000e018 	.word	0xe000e018
 8005d60:	2000011c 	.word	0x2000011c
 8005d64:	10624dd3 	.word	0x10624dd3
 8005d68:	e000e014 	.word	0xe000e014

08005d6c <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005d6c:	4b3a      	ldr	r3, [pc, #232]	; (8005e58 <xPortStartScheduler+0xec>)
 8005d6e:	4a3b      	ldr	r2, [pc, #236]	; (8005e5c <xPortStartScheduler+0xf0>)
 8005d70:	6819      	ldr	r1, [r3, #0]
 8005d72:	4291      	cmp	r1, r2
 8005d74:	d038      	beq.n	8005de8 <xPortStartScheduler+0x7c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	4b39      	ldr	r3, [pc, #228]	; (8005e60 <xPortStartScheduler+0xf4>)
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d03d      	beq.n	8005dfa <xPortStartScheduler+0x8e>
{
 8005d7e:	b510      	push	{r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d80:	4b38      	ldr	r3, [pc, #224]	; (8005e64 <xPortStartScheduler+0xf8>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d82:	4839      	ldr	r0, [pc, #228]	; (8005e68 <xPortStartScheduler+0xfc>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d84:	781a      	ldrb	r2, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d86:	4c39      	ldr	r4, [pc, #228]	; (8005e6c <xPortStartScheduler+0x100>)
{
 8005d88:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d8a:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d8c:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d8e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d90:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d9a:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d9e:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005da2:	2107      	movs	r1, #7
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005da4:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005da8:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005daa:	0611      	lsls	r1, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005dac:	7023      	strb	r3, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005dae:	bf48      	it	mi
 8005db0:	2306      	movmi	r3, #6
 8005db2:	d401      	bmi.n	8005db8 <xPortStartScheduler+0x4c>
 8005db4:	e00f      	b.n	8005dd6 <xPortStartScheduler+0x6a>
 8005db6:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005db8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8005dbc:	0052      	lsls	r2, r2, #1
 8005dbe:	b2d2      	uxtb	r2, r2
 8005dc0:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005dc4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8005dc8:	0612      	lsls	r2, r2, #24
 8005dca:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8005dce:	d4f2      	bmi.n	8005db6 <xPortStartScheduler+0x4a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	6003      	str	r3, [r0, #0]
 8005dd4:	d01a      	beq.n	8005e0c <xPortStartScheduler+0xa0>
	__asm volatile
 8005dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dda:	f383 8811 	msr	BASEPRI, r3
 8005dde:	f3bf 8f6f 	isb	sy
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	e7fe      	b.n	8005de6 <xPortStartScheduler+0x7a>
 8005de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	e7fe      	b.n	8005df8 <xPortStartScheduler+0x8c>
 8005dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfe:	f383 8811 	msr	BASEPRI, r3
 8005e02:	f3bf 8f6f 	isb	sy
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	e7fe      	b.n	8005e0a <xPortStartScheduler+0x9e>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e0c:	9901      	ldr	r1, [sp, #4]
 8005e0e:	4c15      	ldr	r4, [pc, #84]	; (8005e64 <xPortStartScheduler+0xf8>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e10:	4a17      	ldr	r2, [pc, #92]	; (8005e70 <xPortStartScheduler+0x104>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e12:	021b      	lsls	r3, r3, #8
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e14:	b2c9      	uxtb	r1, r1
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e1a:	6003      	str	r3, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e1c:	7021      	strb	r1, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e1e:	6813      	ldr	r3, [r2, #0]
 8005e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e24:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e26:	6813      	ldr	r3, [r2, #0]
 8005e28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005e2c:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 8005e2e:	f7ff ff7f 	bl	8005d30 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005e32:	4b10      	ldr	r3, [pc, #64]	; (8005e74 <xPortStartScheduler+0x108>)
 8005e34:	2400      	movs	r4, #0
 8005e36:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8005e38:	f7ff fec6 	bl	8005bc8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005e3c:	4a0e      	ldr	r2, [pc, #56]	; (8005e78 <xPortStartScheduler+0x10c>)
 8005e3e:	6813      	ldr	r3, [r2, #0]
 8005e40:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005e44:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8005e46:	f7ff feab 	bl	8005ba0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8005e4a:	f000 fd55 	bl	80068f8 <vTaskSwitchContext>
	prvTaskExitError();
 8005e4e:	f7ff fe87 	bl	8005b60 <prvTaskExitError>
}
 8005e52:	4620      	mov	r0, r4
 8005e54:	b002      	add	sp, #8
 8005e56:	bd10      	pop	{r4, pc}
 8005e58:	e000ed00 	.word	0xe000ed00
 8005e5c:	410fc271 	.word	0x410fc271
 8005e60:	410fc270 	.word	0x410fc270
 8005e64:	e000e400 	.word	0xe000e400
 8005e68:	20000804 	.word	0x20000804
 8005e6c:	20000801 	.word	0x20000801
 8005e70:	e000ed20 	.word	0xe000ed20
 8005e74:	20000118 	.word	0x20000118
 8005e78:	e000ef34 	.word	0xe000ef34

08005e7c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e7c:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e7e:	4b11      	ldr	r3, [pc, #68]	; (8005ec4 <prvInsertBlockIntoFreeList+0x48>)
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	4282      	cmp	r2, r0
 8005e84:	d201      	bcs.n	8005e8a <prvInsertBlockIntoFreeList+0xe>
 8005e86:	4613      	mov	r3, r2
 8005e88:	e7fa      	b.n	8005e80 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e8a:	685c      	ldr	r4, [r3, #4]
 8005e8c:	1919      	adds	r1, r3, r4
 8005e8e:	4288      	cmp	r0, r1
 8005e90:	d103      	bne.n	8005e9a <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e92:	6841      	ldr	r1, [r0, #4]
 8005e94:	4421      	add	r1, r4
 8005e96:	6059      	str	r1, [r3, #4]
 8005e98:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e9a:	6844      	ldr	r4, [r0, #4]
 8005e9c:	1901      	adds	r1, r0, r4
 8005e9e:	428a      	cmp	r2, r1
 8005ea0:	d109      	bne.n	8005eb6 <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ea2:	4909      	ldr	r1, [pc, #36]	; (8005ec8 <prvInsertBlockIntoFreeList+0x4c>)
 8005ea4:	6809      	ldr	r1, [r1, #0]
 8005ea6:	428a      	cmp	r2, r1
 8005ea8:	d005      	beq.n	8005eb6 <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005eaa:	6851      	ldr	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005eac:	6812      	ldr	r2, [r2, #0]
 8005eae:	6002      	str	r2, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005eb0:	4421      	add	r1, r4
 8005eb2:	6041      	str	r1, [r0, #4]
 8005eb4:	e000      	b.n	8005eb8 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005eb6:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005eb8:	4298      	cmp	r0, r3
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005eba:	bf18      	it	ne
 8005ebc:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ebe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ec2:	4770      	bx	lr
 8005ec4:	20004418 	.word	0x20004418
 8005ec8:	20000808 	.word	0x20000808

08005ecc <pvPortMalloc>:
{
 8005ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ece:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005ed0:	f000 fbaa 	bl	8006628 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005ed4:	4840      	ldr	r0, [pc, #256]	; (8005fd8 <pvPortMalloc+0x10c>)
 8005ed6:	6803      	ldr	r3, [r0, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d056      	beq.n	8005f8a <pvPortMalloc+0xbe>
 8005edc:	4a3f      	ldr	r2, [pc, #252]	; (8005fdc <pvPortMalloc+0x110>)
 8005ede:	6815      	ldr	r5, [r2, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ee0:	422c      	tst	r4, r5
 8005ee2:	d14d      	bne.n	8005f80 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 8005ee4:	2c00      	cmp	r4, #0
 8005ee6:	d04b      	beq.n	8005f80 <pvPortMalloc+0xb4>
				xWantedSize += xHeapStructSize;
 8005ee8:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005eec:	0750      	lsls	r0, r2, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005eee:	bf1c      	itt	ne
 8005ef0:	f022 0207 	bicne.w	r2, r2, #7
 8005ef4:	3208      	addne	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ef6:	2a00      	cmp	r2, #0
 8005ef8:	d042      	beq.n	8005f80 <pvPortMalloc+0xb4>
 8005efa:	4f39      	ldr	r7, [pc, #228]	; (8005fe0 <pvPortMalloc+0x114>)
 8005efc:	683e      	ldr	r6, [r7, #0]
 8005efe:	42b2      	cmp	r2, r6
 8005f00:	d83e      	bhi.n	8005f80 <pvPortMalloc+0xb4>
				pxBlock = xStart.pxNextFreeBlock;
 8005f02:	4838      	ldr	r0, [pc, #224]	; (8005fe4 <pvPortMalloc+0x118>)
 8005f04:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f06:	e006      	b.n	8005f16 <pvPortMalloc+0x4a>
 8005f08:	f8d4 e000 	ldr.w	lr, [r4]
 8005f0c:	f1be 0f00 	cmp.w	lr, #0
 8005f10:	d004      	beq.n	8005f1c <pvPortMalloc+0x50>
 8005f12:	4620      	mov	r0, r4
 8005f14:	4674      	mov	r4, lr
 8005f16:	6861      	ldr	r1, [r4, #4]
 8005f18:	428a      	cmp	r2, r1
 8005f1a:	d8f5      	bhi.n	8005f08 <pvPortMalloc+0x3c>
				if( pxBlock != pxEnd )
 8005f1c:	429c      	cmp	r4, r3
 8005f1e:	d02f      	beq.n	8005f80 <pvPortMalloc+0xb4>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f20:	6823      	ldr	r3, [r4, #0]
 8005f22:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f24:	1a8b      	subs	r3, r1, r2
 8005f26:	2b10      	cmp	r3, #16
 8005f28:	d910      	bls.n	8005f4c <pvPortMalloc+0x80>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f2a:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f2c:	0741      	lsls	r1, r0, #29
 8005f2e:	d008      	beq.n	8005f42 <pvPortMalloc+0x76>
 8005f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	e7fe      	b.n	8005f40 <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f42:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f44:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f46:	f7ff ff99 	bl	8005e7c <prvInsertBlockIntoFreeList>
 8005f4a:	6861      	ldr	r1, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f4c:	4a26      	ldr	r2, [pc, #152]	; (8005fe8 <pvPortMalloc+0x11c>)
 8005f4e:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f50:	1a76      	subs	r6, r6, r1
					pxBlock->pxNextFreeBlock = NULL;
 8005f52:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f54:	4329      	orrs	r1, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f56:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f58:	6061      	str	r1, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f5a:	6023      	str	r3, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f5c:	f104 0408 	add.w	r4, r4, #8
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f60:	bf38      	it	cc
 8005f62:	6016      	strcc	r6, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f64:	603e      	str	r6, [r7, #0]
	( void ) xTaskResumeAll();
 8005f66:	f000 fc15 	bl	8006794 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f6a:	0763      	lsls	r3, r4, #29
 8005f6c:	d00b      	beq.n	8005f86 <pvPortMalloc+0xba>
 8005f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	e7fe      	b.n	8005f7e <pvPortMalloc+0xb2>
	( void ) xTaskResumeAll();
 8005f80:	f000 fc08 	bl	8006794 <xTaskResumeAll>
 8005f84:	2400      	movs	r4, #0
}
 8005f86:	4620      	mov	r0, r4
 8005f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uxAddress = ( size_t ) ucHeap;
 8005f8a:	4918      	ldr	r1, [pc, #96]	; (8005fec <pvPortMalloc+0x120>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f8c:	074d      	lsls	r5, r1, #29
 8005f8e:	d01f      	beq.n	8005fd0 <pvPortMalloc+0x104>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f90:	1dca      	adds	r2, r1, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f92:	f022 0207 	bic.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f96:	f501 5370 	add.w	r3, r1, #15360	; 0x3c00
 8005f9a:	1a9b      	subs	r3, r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f9c:	4611      	mov	r1, r2
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f9e:	440b      	add	r3, r1
	uxAddress -= xHeapStructSize;
 8005fa0:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fa2:	f023 0307 	bic.w	r3, r3, #7
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fa6:	4d0e      	ldr	r5, [pc, #56]	; (8005fe0 <pvPortMalloc+0x114>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005fa8:	4e0e      	ldr	r6, [pc, #56]	; (8005fe4 <pvPortMalloc+0x118>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005faa:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8005fe8 <pvPortMalloc+0x11c>
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005fae:	4f0b      	ldr	r7, [pc, #44]	; (8005fdc <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8005fb0:	6003      	str	r3, [r0, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005fb2:	1a5a      	subs	r2, r3, r1
	xStart.xBlockSize = ( size_t ) 0;
 8005fb4:	2000      	movs	r0, #0
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fb6:	602a      	str	r2, [r5, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005fb8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	xStart.xBlockSize = ( size_t ) 0;
 8005fbc:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005fbe:	6031      	str	r1, [r6, #0]
	pxEnd->xBlockSize = 0;
 8005fc0:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005fc2:	6018      	str	r0, [r3, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fc4:	f8ce 2000 	str.w	r2, [lr]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005fc8:	603d      	str	r5, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005fca:	604a      	str	r2, [r1, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005fcc:	600b      	str	r3, [r1, #0]
 8005fce:	e787      	b.n	8005ee0 <pvPortMalloc+0x14>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005fd0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005fd4:	e7e3      	b.n	8005f9e <pvPortMalloc+0xd2>
 8005fd6:	bf00      	nop
 8005fd8:	20000808 	.word	0x20000808
 8005fdc:	2000440c 	.word	0x2000440c
 8005fe0:	20004410 	.word	0x20004410
 8005fe4:	20004418 	.word	0x20004418
 8005fe8:	20004414 	.word	0x20004414
 8005fec:	2000080c 	.word	0x2000080c

08005ff0 <vPortFree>:
	if( pv != NULL )
 8005ff0:	b1d0      	cbz	r0, 8006028 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ff2:	4a19      	ldr	r2, [pc, #100]	; (8006058 <vPortFree+0x68>)
 8005ff4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005ff8:	6812      	ldr	r2, [r2, #0]
 8005ffa:	4213      	tst	r3, r2
 8005ffc:	d108      	bne.n	8006010 <vPortFree+0x20>
 8005ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	e7fe      	b.n	800600e <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006010:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006014:	b149      	cbz	r1, 800602a <vPortFree+0x3a>
 8006016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601a:	f383 8811 	msr	BASEPRI, r3
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	e7fe      	b.n	8006026 <vPortFree+0x36>
 8006028:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800602a:	ea23 0302 	bic.w	r3, r3, r2
{
 800602e:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006030:	f840 3c04 	str.w	r3, [r0, #-4]
 8006034:	4604      	mov	r4, r0
				vTaskSuspendAll();
 8006036:	f000 faf7 	bl	8006628 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800603a:	4a08      	ldr	r2, [pc, #32]	; (800605c <vPortFree+0x6c>)
 800603c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006040:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006042:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006046:	440b      	add	r3, r1
 8006048:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800604a:	f7ff ff17 	bl	8005e7c <prvInsertBlockIntoFreeList>
}
 800604e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8006052:	f000 bb9f 	b.w	8006794 <xTaskResumeAll>
 8006056:	bf00      	nop
 8006058:	2000440c 	.word	0x2000440c
 800605c:	20004410 	.word	0x20004410

08006060 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006064:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006066:	f7ff fde5 	bl	8005c34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800606a:	4a36      	ldr	r2, [pc, #216]	; (8006144 <prvAddNewTaskToReadyList+0xe4>)
		if( pxCurrentTCB == NULL )
 800606c:	4d36      	ldr	r5, [pc, #216]	; (8006148 <prvAddNewTaskToReadyList+0xe8>)
		uxCurrentNumberOfTasks++;
 800606e:	6813      	ldr	r3, [r2, #0]
 8006070:	3301      	adds	r3, #1
 8006072:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006074:	682b      	ldr	r3, [r5, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d035      	beq.n	80060e6 <prvAddNewTaskToReadyList+0x86>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800607a:	4f34      	ldr	r7, [pc, #208]	; (800614c <prvAddNewTaskToReadyList+0xec>)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	b34b      	cbz	r3, 80060d4 <prvAddNewTaskToReadyList+0x74>
 8006080:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006082:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8006170 <prvAddNewTaskToReadyList+0x110>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006086:	f8df e0ec 	ldr.w	lr, [pc, #236]	; 8006174 <prvAddNewTaskToReadyList+0x114>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800608a:	4e31      	ldr	r6, [pc, #196]	; (8006150 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 800608c:	f8de 2000 	ldr.w	r2, [lr]
		prvAddTaskToReadyList( pxNewTCB );
 8006090:	6831      	ldr	r1, [r6, #0]
 8006092:	2301      	movs	r3, #1
 8006094:	4083      	lsls	r3, r0
 8006096:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800609a:	430b      	orrs	r3, r1
		uxTaskNumber++;
 800609c:	3201      	adds	r2, #1
		prvAddTaskToReadyList( pxNewTCB );
 800609e:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80060a2:	1d21      	adds	r1, r4, #4
 80060a4:	6033      	str	r3, [r6, #0]
		uxTaskNumber++;
 80060a6:	f8ce 2000 	str.w	r2, [lr]
		prvAddTaskToReadyList( pxNewTCB );
 80060aa:	f7ff fd1b 	bl	8005ae4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060ae:	f7ff fde3 	bl	8005c78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	b163      	cbz	r3, 80060d0 <prvAddNewTaskToReadyList+0x70>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060b6:	682a      	ldr	r2, [r5, #0]
 80060b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80060ba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80060bc:	429a      	cmp	r2, r3
 80060be:	d207      	bcs.n	80060d0 <prvAddNewTaskToReadyList+0x70>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060c0:	4b24      	ldr	r3, [pc, #144]	; (8006154 <prvAddNewTaskToReadyList+0xf4>)
 80060c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060d4:	682b      	ldr	r3, [r5, #0]
 80060d6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80060d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060da:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8006170 <prvAddNewTaskToReadyList+0x110>
 80060de:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 80060e0:	bf98      	it	ls
 80060e2:	602c      	strls	r4, [r5, #0]
 80060e4:	e7cf      	b.n	8006086 <prvAddNewTaskToReadyList+0x26>
			pxCurrentTCB = pxNewTCB;
 80060e6:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060e8:	6813      	ldr	r3, [r2, #0]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d004      	beq.n	80060f8 <prvAddNewTaskToReadyList+0x98>
 80060ee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80060f0:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8006170 <prvAddNewTaskToReadyList+0x110>
 80060f4:	4f15      	ldr	r7, [pc, #84]	; (800614c <prvAddNewTaskToReadyList+0xec>)
 80060f6:	e7c6      	b.n	8006086 <prvAddNewTaskToReadyList+0x26>
 80060f8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8006170 <prvAddNewTaskToReadyList+0x110>
 80060fc:	4646      	mov	r6, r8
 80060fe:	f108 078c 	add.w	r7, r8, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006102:	4630      	mov	r0, r6
 8006104:	3614      	adds	r6, #20
 8006106:	f7ff fcdd 	bl	8005ac4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800610a:	42be      	cmp	r6, r7
 800610c:	d1f9      	bne.n	8006102 <prvAddNewTaskToReadyList+0xa2>
	}

	vListInitialise( &xDelayedTaskList1 );
 800610e:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8006178 <prvAddNewTaskToReadyList+0x118>
	vListInitialise( &xDelayedTaskList2 );
 8006112:	4e11      	ldr	r6, [pc, #68]	; (8006158 <prvAddNewTaskToReadyList+0xf8>)
 8006114:	4f0d      	ldr	r7, [pc, #52]	; (800614c <prvAddNewTaskToReadyList+0xec>)
	vListInitialise( &xDelayedTaskList1 );
 8006116:	4648      	mov	r0, r9
 8006118:	f7ff fcd4 	bl	8005ac4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800611c:	4630      	mov	r0, r6
 800611e:	f7ff fcd1 	bl	8005ac4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006122:	480e      	ldr	r0, [pc, #56]	; (800615c <prvAddNewTaskToReadyList+0xfc>)
 8006124:	f7ff fcce 	bl	8005ac4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006128:	480d      	ldr	r0, [pc, #52]	; (8006160 <prvAddNewTaskToReadyList+0x100>)
 800612a:	f7ff fccb 	bl	8005ac4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800612e:	480d      	ldr	r0, [pc, #52]	; (8006164 <prvAddNewTaskToReadyList+0x104>)
 8006130:	f7ff fcc8 	bl	8005ac4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006134:	4a0c      	ldr	r2, [pc, #48]	; (8006168 <prvAddNewTaskToReadyList+0x108>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006136:	4b0d      	ldr	r3, [pc, #52]	; (800616c <prvAddNewTaskToReadyList+0x10c>)
	pxDelayedTaskList = &xDelayedTaskList1;
 8006138:	f8c2 9000 	str.w	r9, [r2]
 800613c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800613e:	601e      	str	r6, [r3, #0]
 8006140:	e7a1      	b.n	8006086 <prvAddNewTaskToReadyList+0x26>
 8006142:	bf00      	nop
 8006144:	200044b8 	.word	0x200044b8
 8006148:	20004420 	.word	0x20004420
 800614c:	20004514 	.word	0x20004514
 8006150:	200044cc 	.word	0x200044cc
 8006154:	e000ed04 	.word	0xe000ed04
 8006158:	200044e4 	.word	0x200044e4
 800615c:	20004500 	.word	0x20004500
 8006160:	2000452c 	.word	0x2000452c
 8006164:	20004518 	.word	0x20004518
 8006168:	20004424 	.word	0x20004424
 800616c:	20004428 	.word	0x20004428
 8006170:	2000442c 	.word	0x2000442c
 8006174:	200044c8 	.word	0x200044c8
 8006178:	200044d0 	.word	0x200044d0

0800617c <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800617c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006180:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006182:	780d      	ldrb	r5, [r1, #0]
 8006184:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006188:	6b26      	ldr	r6, [r4, #48]	; 0x30
		if( pcName[ x ] == 0x00 )
 800618a:	f891 e000 	ldrb.w	lr, [r1]
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800618e:	9d08      	ldr	r5, [sp, #32]
 8006190:	9f09      	ldr	r7, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006192:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006196:	3a01      	subs	r2, #1
 8006198:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800619c:	4681      	mov	r9, r0
 800619e:	469a      	mov	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80061a0:	f026 0607 	bic.w	r6, r6, #7
		if( pcName[ x ] == 0x00 )
 80061a4:	f1be 0f00 	cmp.w	lr, #0
 80061a8:	d047      	beq.n	800623a <prvInitialiseNewTask.isra.2+0xbe>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061aa:	784b      	ldrb	r3, [r1, #1]
 80061ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
 80061b0:	784b      	ldrb	r3, [r1, #1]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d041      	beq.n	800623a <prvInitialiseNewTask.isra.2+0xbe>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061b6:	788b      	ldrb	r3, [r1, #2]
 80061b8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
 80061bc:	788b      	ldrb	r3, [r1, #2]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d03b      	beq.n	800623a <prvInitialiseNewTask.isra.2+0xbe>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061c2:	78cb      	ldrb	r3, [r1, #3]
 80061c4:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
 80061c8:	78cb      	ldrb	r3, [r1, #3]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d035      	beq.n	800623a <prvInitialiseNewTask.isra.2+0xbe>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061ce:	790b      	ldrb	r3, [r1, #4]
 80061d0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
 80061d4:	790b      	ldrb	r3, [r1, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d02f      	beq.n	800623a <prvInitialiseNewTask.isra.2+0xbe>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061da:	794b      	ldrb	r3, [r1, #5]
 80061dc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
 80061e0:	794b      	ldrb	r3, [r1, #5]
 80061e2:	b353      	cbz	r3, 800623a <prvInitialiseNewTask.isra.2+0xbe>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061e4:	798b      	ldrb	r3, [r1, #6]
 80061e6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
 80061ea:	798b      	ldrb	r3, [r1, #6]
 80061ec:	b32b      	cbz	r3, 800623a <prvInitialiseNewTask.isra.2+0xbe>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061ee:	79cb      	ldrb	r3, [r1, #7]
 80061f0:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
 80061f4:	79cb      	ldrb	r3, [r1, #7]
 80061f6:	b303      	cbz	r3, 800623a <prvInitialiseNewTask.isra.2+0xbe>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061f8:	7a0b      	ldrb	r3, [r1, #8]
 80061fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if( pcName[ x ] == 0x00 )
 80061fe:	7a0b      	ldrb	r3, [r1, #8]
 8006200:	b1db      	cbz	r3, 800623a <prvInitialiseNewTask.isra.2+0xbe>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006202:	7a4b      	ldrb	r3, [r1, #9]
 8006204:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		if( pcName[ x ] == 0x00 )
 8006208:	7a4b      	ldrb	r3, [r1, #9]
 800620a:	b1b3      	cbz	r3, 800623a <prvInitialiseNewTask.isra.2+0xbe>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800620c:	7a8b      	ldrb	r3, [r1, #10]
 800620e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		if( pcName[ x ] == 0x00 )
 8006212:	7a8b      	ldrb	r3, [r1, #10]
 8006214:	b18b      	cbz	r3, 800623a <prvInitialiseNewTask.isra.2+0xbe>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006216:	7acb      	ldrb	r3, [r1, #11]
 8006218:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
		if( pcName[ x ] == 0x00 )
 800621c:	7acb      	ldrb	r3, [r1, #11]
 800621e:	b163      	cbz	r3, 800623a <prvInitialiseNewTask.isra.2+0xbe>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006220:	7b0b      	ldrb	r3, [r1, #12]
 8006222:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
		if( pcName[ x ] == 0x00 )
 8006226:	7b0b      	ldrb	r3, [r1, #12]
 8006228:	b13b      	cbz	r3, 800623a <prvInitialiseNewTask.isra.2+0xbe>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800622a:	7b4b      	ldrb	r3, [r1, #13]
 800622c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		if( pcName[ x ] == 0x00 )
 8006230:	7b4b      	ldrb	r3, [r1, #13]
 8006232:	b113      	cbz	r3, 800623a <prvInitialiseNewTask.isra.2+0xbe>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006234:	7b8b      	ldrb	r3, [r1, #14]
 8006236:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800623a:	2d06      	cmp	r5, #6
 800623c:	bf28      	it	cs
 800623e:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006240:	f04f 0800 	mov.w	r8, #0
	pxNewTCB->uxPriority = uxPriority;
 8006244:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006246:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006248:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800624a:	f884 8043 	strb.w	r8, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 800624e:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006252:	f7ff fc43 	bl	8005adc <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006256:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800625a:	f104 0018 	add.w	r0, r4, #24
 800625e:	f7ff fc3d 	bl	8005adc <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8006262:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006266:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006268:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800626a:	f884 8050 	strb.w	r8, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800626e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006270:	4652      	mov	r2, sl
 8006272:	4649      	mov	r1, r9
 8006274:	4630      	mov	r0, r6
 8006276:	f7ff fcb1 	bl	8005bdc <pxPortInitialiseStack>
 800627a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800627c:	b107      	cbz	r7, 8006280 <prvInitialiseNewTask.isra.2+0x104>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800627e:	603c      	str	r4, [r7, #0]
 8006280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006284 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006286:	4b1b      	ldr	r3, [pc, #108]	; (80062f4 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006288:	4d1b      	ldr	r5, [pc, #108]	; (80062f8 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800628a:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800628c:	682b      	ldr	r3, [r5, #0]
{
 800628e:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006290:	1d18      	adds	r0, r3, #4
{
 8006292:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006294:	f7ff fc50 	bl	8005b38 <uxListRemove>
 8006298:	b940      	cbnz	r0, 80062ac <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800629a:	682b      	ldr	r3, [r5, #0]
 800629c:	4917      	ldr	r1, [pc, #92]	; (80062fc <prvAddCurrentTaskToDelayedList+0x78>)
 800629e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80062a0:	680b      	ldr	r3, [r1, #0]
 80062a2:	2201      	movs	r2, #1
 80062a4:	4082      	lsls	r2, r0
 80062a6:	ea23 0302 	bic.w	r3, r3, r2
 80062aa:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062ac:	1c63      	adds	r3, r4, #1
 80062ae:	d018      	beq.n	80062e2 <prvAddCurrentTaskToDelayedList+0x5e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80062b0:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80062b2:	682b      	ldr	r3, [r5, #0]

			if( xTimeToWake < xConstTickCount )
 80062b4:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80062b6:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80062b8:	d80b      	bhi.n	80062d2 <prvAddCurrentTaskToDelayedList+0x4e>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062ba:	4b11      	ldr	r3, [pc, #68]	; (8006300 <prvAddCurrentTaskToDelayedList+0x7c>)
 80062bc:	6818      	ldr	r0, [r3, #0]
 80062be:	6829      	ldr	r1, [r5, #0]
 80062c0:	3104      	adds	r1, #4
 80062c2:	f7ff fc1f 	bl	8005b04 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80062c6:	4b0f      	ldr	r3, [pc, #60]	; (8006304 <prvAddCurrentTaskToDelayedList+0x80>)
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 80062cc:	bf38      	it	cc
 80062ce:	601c      	strcc	r4, [r3, #0]
 80062d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062d2:	4b0d      	ldr	r3, [pc, #52]	; (8006308 <prvAddCurrentTaskToDelayedList+0x84>)
 80062d4:	6818      	ldr	r0, [r3, #0]
 80062d6:	6829      	ldr	r1, [r5, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80062d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062dc:	3104      	adds	r1, #4
 80062de:	f7ff bc11 	b.w	8005b04 <vListInsert>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062e2:	2f00      	cmp	r7, #0
 80062e4:	d0e4      	beq.n	80062b0 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062e6:	6829      	ldr	r1, [r5, #0]
 80062e8:	4808      	ldr	r0, [pc, #32]	; (800630c <prvAddCurrentTaskToDelayedList+0x88>)
 80062ea:	3104      	adds	r1, #4
}
 80062ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062f0:	f7ff bbf8 	b.w	8005ae4 <vListInsertEnd>
 80062f4:	20004540 	.word	0x20004540
 80062f8:	20004420 	.word	0x20004420
 80062fc:	200044cc 	.word	0x200044cc
 8006300:	20004424 	.word	0x20004424
 8006304:	200044f8 	.word	0x200044f8
 8006308:	20004428 	.word	0x20004428
 800630c:	20004518 	.word	0x20004518

08006310 <prvIdleTask>:
{
 8006310:	f8df a090 	ldr.w	sl, [pc, #144]	; 80063a4 <prvIdleTask+0x94>
 8006314:	4e21      	ldr	r6, [pc, #132]	; (800639c <prvIdleTask+0x8c>)
 8006316:	4d22      	ldr	r5, [pc, #136]	; (80063a0 <prvIdleTask+0x90>)
 8006318:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80063a8 <prvIdleTask+0x98>
				taskYIELD();
 800631c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80063ac <prvIdleTask+0x9c>
{
 8006320:	b580      	push	{r7, lr}
				taskYIELD();
 8006322:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006326:	682b      	ldr	r3, [r5, #0]
 8006328:	b32b      	cbz	r3, 8006376 <prvIdleTask+0x66>
			taskENTER_CRITICAL();
 800632a:	f7ff fc83 	bl	8005c34 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800632e:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006332:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006334:	1d20      	adds	r0, r4, #4
 8006336:	f7ff fbff 	bl	8005b38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800633a:	6833      	ldr	r3, [r6, #0]
 800633c:	3b01      	subs	r3, #1
 800633e:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006340:	682b      	ldr	r3, [r5, #0]
 8006342:	3b01      	subs	r3, #1
 8006344:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 8006346:	f7ff fc97 	bl	8005c78 <vPortExitCritical>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800634a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800634e:	b1eb      	cbz	r3, 800638c <prvIdleTask+0x7c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006350:	2b01      	cmp	r3, #1
 8006352:	d00a      	beq.n	800636a <prvIdleTask+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006354:	2b02      	cmp	r3, #2
 8006356:	d0e6      	beq.n	8006326 <prvIdleTask+0x16>
 8006358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635c:	f383 8811 	msr	BASEPRI, r3
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	e7fe      	b.n	8006368 <prvIdleTask+0x58>
				vPortFree( pxTCB );
 800636a:	4620      	mov	r0, r4
 800636c:	f7ff fe40 	bl	8005ff0 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006370:	682b      	ldr	r3, [r5, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1d9      	bne.n	800632a <prvIdleTask+0x1a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006376:	f8d9 3000 	ldr.w	r3, [r9]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d9d3      	bls.n	8006326 <prvIdleTask+0x16>
				taskYIELD();
 800637e:	f8c8 7000 	str.w	r7, [r8]
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	e7cc      	b.n	8006326 <prvIdleTask+0x16>
				vPortFree( pxTCB->pxStack );
 800638c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800638e:	f7ff fe2f 	bl	8005ff0 <vPortFree>
				vPortFree( pxTCB );
 8006392:	4620      	mov	r0, r4
 8006394:	f7ff fe2c 	bl	8005ff0 <vPortFree>
 8006398:	e7c5      	b.n	8006326 <prvIdleTask+0x16>
 800639a:	bf00      	nop
 800639c:	200044b8 	.word	0x200044b8
 80063a0:	200044bc 	.word	0x200044bc
 80063a4:	2000452c 	.word	0x2000452c
 80063a8:	2000442c 	.word	0x2000442c
 80063ac:	e000ed04 	.word	0xe000ed04

080063b0 <xTaskCreateStatic>:
	{
 80063b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063b2:	b087      	sub	sp, #28
 80063b4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80063b6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80063b8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
		configASSERT( puxStackBuffer != NULL );
 80063ba:	b175      	cbz	r5, 80063da <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80063bc:	b334      	cbz	r4, 800640c <xTaskCreateStatic+0x5c>
			volatile size_t xSize = sizeof( StaticTask_t );
 80063be:	2754      	movs	r7, #84	; 0x54
 80063c0:	9704      	str	r7, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80063c2:	9f04      	ldr	r7, [sp, #16]
 80063c4:	2f54      	cmp	r7, #84	; 0x54
 80063c6:	d011      	beq.n	80063ec <xTaskCreateStatic+0x3c>
 80063c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063cc:	f383 8811 	msr	BASEPRI, r3
 80063d0:	f3bf 8f6f 	isb	sy
 80063d4:	f3bf 8f4f 	dsb	sy
 80063d8:	e7fe      	b.n	80063d8 <xTaskCreateStatic+0x28>
 80063da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	e7fe      	b.n	80063ea <xTaskCreateStatic+0x3a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80063ec:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80063ee:	2702      	movs	r7, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80063f0:	ad05      	add	r5, sp, #20
 80063f2:	9402      	str	r4, [sp, #8]
 80063f4:	9600      	str	r6, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80063f6:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80063fa:	9501      	str	r5, [sp, #4]
 80063fc:	f7ff febe 	bl	800617c <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006400:	4620      	mov	r0, r4
 8006402:	f7ff fe2d 	bl	8006060 <prvAddNewTaskToReadyList>
	}
 8006406:	9805      	ldr	r0, [sp, #20]
 8006408:	b007      	add	sp, #28
 800640a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800640c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	e7fe      	b.n	800641c <xTaskCreateStatic+0x6c>
 800641e:	bf00      	nop

08006420 <xTaskCreate>:
	{
 8006420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006424:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8006428:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800642a:	4650      	mov	r0, sl
	{
 800642c:	460d      	mov	r5, r1
 800642e:	4699      	mov	r9, r3
 8006430:	9f09      	ldr	r7, [sp, #36]	; 0x24
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006432:	f7ff fd4b 	bl	8005ecc <pvPortMalloc>
			if( pxStack != NULL )
 8006436:	2800      	cmp	r0, #0
 8006438:	f000 8089 	beq.w	800654e <xTaskCreate+0x12e>
 800643c:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800643e:	2054      	movs	r0, #84	; 0x54
 8006440:	f7ff fd44 	bl	8005ecc <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006444:	4604      	mov	r4, r0
 8006446:	2800      	cmp	r0, #0
 8006448:	f000 8085 	beq.w	8006556 <xTaskCreate+0x136>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800644c:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800644e:	6306      	str	r6, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006450:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006454:	782b      	ldrb	r3, [r5, #0]
 8006456:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800645a:	f1aa 0a04 	sub.w	sl, sl, #4
		if( pcName[ x ] == 0x00 )
 800645e:	782b      	ldrb	r3, [r5, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006460:	4456      	add	r6, sl
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006462:	f026 0607 	bic.w	r6, r6, #7
		if( pcName[ x ] == 0x00 )
 8006466:	2b00      	cmp	r3, #0
 8006468:	d047      	beq.n	80064fa <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800646a:	786b      	ldrb	r3, [r5, #1]
 800646c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
 8006470:	786b      	ldrb	r3, [r5, #1]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d041      	beq.n	80064fa <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006476:	78ab      	ldrb	r3, [r5, #2]
 8006478:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
 800647c:	78ab      	ldrb	r3, [r5, #2]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d03b      	beq.n	80064fa <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006482:	78eb      	ldrb	r3, [r5, #3]
 8006484:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
 8006488:	78eb      	ldrb	r3, [r5, #3]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d035      	beq.n	80064fa <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800648e:	792b      	ldrb	r3, [r5, #4]
 8006490:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
 8006494:	792b      	ldrb	r3, [r5, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d02f      	beq.n	80064fa <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800649a:	796b      	ldrb	r3, [r5, #5]
 800649c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
 80064a0:	796b      	ldrb	r3, [r5, #5]
 80064a2:	b353      	cbz	r3, 80064fa <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064a4:	79ab      	ldrb	r3, [r5, #6]
 80064a6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
 80064aa:	79ab      	ldrb	r3, [r5, #6]
 80064ac:	b32b      	cbz	r3, 80064fa <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064ae:	79eb      	ldrb	r3, [r5, #7]
 80064b0:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
 80064b4:	79eb      	ldrb	r3, [r5, #7]
 80064b6:	b303      	cbz	r3, 80064fa <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064b8:	7a2b      	ldrb	r3, [r5, #8]
 80064ba:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
		if( pcName[ x ] == 0x00 )
 80064be:	7a2b      	ldrb	r3, [r5, #8]
 80064c0:	b1db      	cbz	r3, 80064fa <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064c2:	7a6b      	ldrb	r3, [r5, #9]
 80064c4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		if( pcName[ x ] == 0x00 )
 80064c8:	7a6b      	ldrb	r3, [r5, #9]
 80064ca:	b1b3      	cbz	r3, 80064fa <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064cc:	7aab      	ldrb	r3, [r5, #10]
 80064ce:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
		if( pcName[ x ] == 0x00 )
 80064d2:	7aab      	ldrb	r3, [r5, #10]
 80064d4:	b18b      	cbz	r3, 80064fa <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064d6:	7aeb      	ldrb	r3, [r5, #11]
 80064d8:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
		if( pcName[ x ] == 0x00 )
 80064dc:	7aeb      	ldrb	r3, [r5, #11]
 80064de:	b163      	cbz	r3, 80064fa <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064e0:	7b2b      	ldrb	r3, [r5, #12]
 80064e2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
		if( pcName[ x ] == 0x00 )
 80064e6:	7b2b      	ldrb	r3, [r5, #12]
 80064e8:	b13b      	cbz	r3, 80064fa <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064ea:	7b6b      	ldrb	r3, [r5, #13]
 80064ec:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
		if( pcName[ x ] == 0x00 )
 80064f0:	7b6b      	ldrb	r3, [r5, #13]
 80064f2:	b113      	cbz	r3, 80064fa <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064f4:	7bab      	ldrb	r3, [r5, #14]
 80064f6:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 80064fa:	9d08      	ldr	r5, [sp, #32]
 80064fc:	2d06      	cmp	r5, #6
 80064fe:	bf28      	it	cs
 8006500:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006502:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8006506:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006508:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800650a:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800650c:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8006510:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006514:	f7ff fae2 	bl	8005adc <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006518:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800651c:	f104 0018 	add.w	r0, r4, #24
 8006520:	f7ff fadc 	bl	8005adc <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8006524:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006528:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800652a:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800652c:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006530:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006532:	464a      	mov	r2, r9
 8006534:	4641      	mov	r1, r8
 8006536:	4630      	mov	r0, r6
 8006538:	f7ff fb50 	bl	8005bdc <pxPortInitialiseStack>
 800653c:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800653e:	b107      	cbz	r7, 8006542 <xTaskCreate+0x122>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006540:	603c      	str	r4, [r7, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 8006542:	4620      	mov	r0, r4
 8006544:	f7ff fd8c 	bl	8006060 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006548:	2001      	movs	r0, #1
 800654a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800654e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 8006552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					vPortFree( pxStack );
 8006556:	4630      	mov	r0, r6
 8006558:	f7ff fd4a 	bl	8005ff0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800655c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006564 <vTaskStartScheduler>:
{
 8006564:	b530      	push	{r4, r5, lr}
 8006566:	b08b      	sub	sp, #44	; 0x2c
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006568:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800656a:	aa07      	add	r2, sp, #28
 800656c:	a906      	add	r1, sp, #24
 800656e:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006570:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006572:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006574:	f000 f9f8 	bl	8006968 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006578:	9b06      	ldr	r3, [sp, #24]
		configASSERT( puxStackBuffer != NULL );
 800657a:	b18b      	cbz	r3, 80065a0 <vTaskStartScheduler+0x3c>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800657c:	9d05      	ldr	r5, [sp, #20]
		configASSERT( pxTaskBuffer != NULL );
 800657e:	2d00      	cmp	r5, #0
 8006580:	d03e      	beq.n	8006600 <vTaskStartScheduler+0x9c>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006582:	2254      	movs	r2, #84	; 0x54
 8006584:	9208      	str	r2, [sp, #32]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006586:	9908      	ldr	r1, [sp, #32]
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006588:	9a07      	ldr	r2, [sp, #28]
			configASSERT( xSize == sizeof( TCB_t ) );
 800658a:	2954      	cmp	r1, #84	; 0x54
 800658c:	d011      	beq.n	80065b2 <vTaskStartScheduler+0x4e>
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	e7fe      	b.n	800659e <vTaskStartScheduler+0x3a>
 80065a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a4:	f383 8811 	msr	BASEPRI, r3
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	e7fe      	b.n	80065b0 <vTaskStartScheduler+0x4c>
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80065b2:	2002      	movs	r0, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80065b4:	a909      	add	r1, sp, #36	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80065b6:	632b      	str	r3, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80065b8:	f885 0051 	strb.w	r0, [r5, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80065bc:	4623      	mov	r3, r4
 80065be:	9101      	str	r1, [sp, #4]
 80065c0:	4814      	ldr	r0, [pc, #80]	; (8006614 <vTaskStartScheduler+0xb0>)
 80065c2:	4915      	ldr	r1, [pc, #84]	; (8006618 <vTaskStartScheduler+0xb4>)
 80065c4:	9502      	str	r5, [sp, #8]
 80065c6:	9400      	str	r4, [sp, #0]
 80065c8:	f7ff fdd8 	bl	800617c <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065cc:	4628      	mov	r0, r5
 80065ce:	f7ff fd47 	bl	8006060 <prvAddNewTaskToReadyList>
		return xReturn;
 80065d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
		if( xIdleTaskHandle != NULL )
 80065d4:	b193      	cbz	r3, 80065fc <vTaskStartScheduler+0x98>
 80065d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80065e6:	480d      	ldr	r0, [pc, #52]	; (800661c <vTaskStartScheduler+0xb8>)
		xSchedulerRunning = pdTRUE;
 80065e8:	4a0d      	ldr	r2, [pc, #52]	; (8006620 <vTaskStartScheduler+0xbc>)
		xTickCount = ( TickType_t ) 0U;
 80065ea:	4b0e      	ldr	r3, [pc, #56]	; (8006624 <vTaskStartScheduler+0xc0>)
		xNextTaskUnblockTime = portMAX_DELAY;
 80065ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		xSchedulerRunning = pdTRUE;
 80065f0:	2101      	movs	r1, #1
		xNextTaskUnblockTime = portMAX_DELAY;
 80065f2:	6005      	str	r5, [r0, #0]
		xSchedulerRunning = pdTRUE;
 80065f4:	6011      	str	r1, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 80065f6:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80065f8:	f7ff fbb8 	bl	8005d6c <xPortStartScheduler>
}
 80065fc:	b00b      	add	sp, #44	; 0x2c
 80065fe:	bd30      	pop	{r4, r5, pc}
 8006600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	e7fe      	b.n	8006610 <vTaskStartScheduler+0xac>
 8006612:	bf00      	nop
 8006614:	08006311 	.word	0x08006311
 8006618:	0800a100 	.word	0x0800a100
 800661c:	200044f8 	.word	0x200044f8
 8006620:	20004514 	.word	0x20004514
 8006624:	20004540 	.word	0x20004540

08006628 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006628:	4a02      	ldr	r2, [pc, #8]	; (8006634 <vTaskSuspendAll+0xc>)
 800662a:	6813      	ldr	r3, [r2, #0]
 800662c:	3301      	adds	r3, #1
 800662e:	6013      	str	r3, [r2, #0]
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	200044c4 	.word	0x200044c4

08006638 <xTaskIncrementTick>:
{
 8006638:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800663c:	4b4a      	ldr	r3, [pc, #296]	; (8006768 <xTaskIncrementTick+0x130>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d153      	bne.n	80066ec <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006644:	4b49      	ldr	r3, [pc, #292]	; (800676c <xTaskIncrementTick+0x134>)
 8006646:	681e      	ldr	r6, [r3, #0]
 8006648:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 800664a:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800664c:	2e00      	cmp	r6, #0
 800664e:	d05a      	beq.n	8006706 <xTaskIncrementTick+0xce>
 8006650:	f8df b138 	ldr.w	fp, [pc, #312]	; 800678c <xTaskIncrementTick+0x154>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006654:	f8db 2000 	ldr.w	r2, [fp]
 8006658:	4296      	cmp	r6, r2
 800665a:	d361      	bcc.n	8006720 <xTaskIncrementTick+0xe8>
 800665c:	4d44      	ldr	r5, [pc, #272]	; (8006770 <xTaskIncrementTick+0x138>)
 800665e:	4f45      	ldr	r7, [pc, #276]	; (8006774 <xTaskIncrementTick+0x13c>)
 8006660:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8006790 <xTaskIncrementTick+0x158>
 8006664:	2400      	movs	r4, #0
 8006666:	e02e      	b.n	80066c6 <xTaskIncrementTick+0x8e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006668:	682a      	ldr	r2, [r5, #0]
 800666a:	68d2      	ldr	r2, [r2, #12]
 800666c:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006670:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006674:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 8006678:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800667a:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 800667c:	d36a      	bcc.n	8006754 <xTaskIncrementTick+0x11c>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800667e:	f7ff fa5b 	bl	8005b38 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006682:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006686:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800668a:	b109      	cbz	r1, 8006690 <xTaskIncrementTick+0x58>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800668c:	f7ff fa54 	bl	8005b38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006690:	4b39      	ldr	r3, [pc, #228]	; (8006778 <xTaskIncrementTick+0x140>)
 8006692:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2201      	movs	r2, #1
 800669a:	fa02 fe00 	lsl.w	lr, r2, r0
 800669e:	ea4e 0e03 	orr.w	lr, lr, r3
 80066a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80066a6:	4b34      	ldr	r3, [pc, #208]	; (8006778 <xTaskIncrementTick+0x140>)
 80066a8:	4651      	mov	r1, sl
 80066aa:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80066ae:	f8c3 e000 	str.w	lr, [r3]
 80066b2:	f7ff fa17 	bl	8005ae4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066b6:	f8d8 0000 	ldr.w	r0, [r8]
 80066ba:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 80066be:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80066c0:	4291      	cmp	r1, r2
 80066c2:	bf28      	it	cs
 80066c4:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066c6:	682a      	ldr	r2, [r5, #0]
 80066c8:	6812      	ldr	r2, [r2, #0]
 80066ca:	2a00      	cmp	r2, #0
 80066cc:	d1cc      	bne.n	8006668 <xTaskIncrementTick+0x30>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066d2:	f8cb 2000 	str.w	r2, [fp]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066d6:	f8d8 3000 	ldr.w	r3, [r8]
 80066da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	bf28      	it	cs
 80066e8:	2401      	movcs	r4, #1
 80066ea:	e004      	b.n	80066f6 <xTaskIncrementTick+0xbe>
		++uxPendedTicks;
 80066ec:	4a23      	ldr	r2, [pc, #140]	; (800677c <xTaskIncrementTick+0x144>)
 80066ee:	6813      	ldr	r3, [r2, #0]
 80066f0:	3301      	adds	r3, #1
 80066f2:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80066f4:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 80066f6:	4b22      	ldr	r3, [pc, #136]	; (8006780 <xTaskIncrementTick+0x148>)
 80066f8:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	bf18      	it	ne
 80066fe:	2401      	movne	r4, #1
}
 8006700:	4620      	mov	r0, r4
 8006702:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8006706:	4d1a      	ldr	r5, [pc, #104]	; (8006770 <xTaskIncrementTick+0x138>)
 8006708:	682b      	ldr	r3, [r5, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	b16b      	cbz	r3, 800672a <xTaskIncrementTick+0xf2>
 800670e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	e7fe      	b.n	800671e <xTaskIncrementTick+0xe6>
 8006720:	4f14      	ldr	r7, [pc, #80]	; (8006774 <xTaskIncrementTick+0x13c>)
 8006722:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8006790 <xTaskIncrementTick+0x158>
BaseType_t xSwitchRequired = pdFALSE;
 8006726:	2400      	movs	r4, #0
 8006728:	e7d5      	b.n	80066d6 <xTaskIncrementTick+0x9e>
			taskSWITCH_DELAYED_LISTS();
 800672a:	4b16      	ldr	r3, [pc, #88]	; (8006784 <xTaskIncrementTick+0x14c>)
 800672c:	6829      	ldr	r1, [r5, #0]
 800672e:	4a16      	ldr	r2, [pc, #88]	; (8006788 <xTaskIncrementTick+0x150>)
 8006730:	6818      	ldr	r0, [r3, #0]
 8006732:	6028      	str	r0, [r5, #0]
 8006734:	6019      	str	r1, [r3, #0]
 8006736:	6813      	ldr	r3, [r2, #0]
 8006738:	3301      	adds	r3, #1
 800673a:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800673c:	682b      	ldr	r3, [r5, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	b15b      	cbz	r3, 800675a <xTaskIncrementTick+0x122>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006742:	682a      	ldr	r2, [r5, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006744:	f8df b044 	ldr.w	fp, [pc, #68]	; 800678c <xTaskIncrementTick+0x154>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006748:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800674a:	68d2      	ldr	r2, [r2, #12]
 800674c:	6852      	ldr	r2, [r2, #4]
 800674e:	f8cb 2000 	str.w	r2, [fp]
 8006752:	e77f      	b.n	8006654 <xTaskIncrementTick+0x1c>
						xNextTaskUnblockTime = xItemValue;
 8006754:	f8cb 1000 	str.w	r1, [fp]
						break;
 8006758:	e7bd      	b.n	80066d6 <xTaskIncrementTick+0x9e>
		xNextTaskUnblockTime = portMAX_DELAY;
 800675a:	f8df b030 	ldr.w	fp, [pc, #48]	; 800678c <xTaskIncrementTick+0x154>
 800675e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006762:	f8cb 2000 	str.w	r2, [fp]
 8006766:	e775      	b.n	8006654 <xTaskIncrementTick+0x1c>
 8006768:	200044c4 	.word	0x200044c4
 800676c:	20004540 	.word	0x20004540
 8006770:	20004424 	.word	0x20004424
 8006774:	2000442c 	.word	0x2000442c
 8006778:	200044cc 	.word	0x200044cc
 800677c:	200044c0 	.word	0x200044c0
 8006780:	20004544 	.word	0x20004544
 8006784:	20004428 	.word	0x20004428
 8006788:	200044fc 	.word	0x200044fc
 800678c:	200044f8 	.word	0x200044f8
 8006790:	20004420 	.word	0x20004420

08006794 <xTaskResumeAll>:
{
 8006794:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 8006798:	4c39      	ldr	r4, [pc, #228]	; (8006880 <xTaskResumeAll+0xec>)
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	b943      	cbnz	r3, 80067b0 <xTaskResumeAll+0x1c>
 800679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	e7fe      	b.n	80067ae <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80067b0:	f7ff fa40 	bl	8005c34 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	3b01      	subs	r3, #1
 80067b8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067ba:	6824      	ldr	r4, [r4, #0]
 80067bc:	2c00      	cmp	r4, #0
 80067be:	d151      	bne.n	8006864 <xTaskResumeAll+0xd0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80067c0:	4b30      	ldr	r3, [pc, #192]	; (8006884 <xTaskResumeAll+0xf0>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d04d      	beq.n	8006864 <xTaskResumeAll+0xd0>
 80067c8:	4d2f      	ldr	r5, [pc, #188]	; (8006888 <xTaskResumeAll+0xf4>)
 80067ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80068a0 <xTaskResumeAll+0x10c>
					prvAddTaskToReadyList( pxTCB );
 80067ce:	4e2f      	ldr	r6, [pc, #188]	; (800688c <xTaskResumeAll+0xf8>)
 80067d0:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80068a4 <xTaskResumeAll+0x110>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067d4:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 80068a8 <xTaskResumeAll+0x114>
 80067d8:	e01f      	b.n	800681a <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80067da:	f8da 300c 	ldr.w	r3, [sl, #12]
 80067de:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067e0:	f104 0804 	add.w	r8, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067e4:	f104 0018 	add.w	r0, r4, #24
 80067e8:	f7ff f9a6 	bl	8005b38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067ec:	4640      	mov	r0, r8
 80067ee:	f7ff f9a3 	bl	8005b38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80067f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80067f4:	6832      	ldr	r2, [r6, #0]
 80067f6:	fa07 f300 	lsl.w	r3, r7, r0
 80067fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80067fe:	4313      	orrs	r3, r2
 8006800:	4641      	mov	r1, r8
 8006802:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8006806:	6033      	str	r3, [r6, #0]
 8006808:	f7ff f96c 	bl	8005ae4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800680c:	f8db 3000 	ldr.w	r3, [fp]
 8006810:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006814:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8006816:	bf28      	it	cs
 8006818:	602f      	strcs	r7, [r5, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800681a:	f8da 3000 	ldr.w	r3, [sl]
					prvAddTaskToReadyList( pxTCB );
 800681e:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1da      	bne.n	80067da <xTaskResumeAll+0x46>
				if( pxTCB != NULL )
 8006824:	b13c      	cbz	r4, 8006836 <xTaskResumeAll+0xa2>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006826:	4b1a      	ldr	r3, [pc, #104]	; (8006890 <xTaskResumeAll+0xfc>)
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	6812      	ldr	r2, [r2, #0]
 800682c:	bb02      	cbnz	r2, 8006870 <xTaskResumeAll+0xdc>
		xNextTaskUnblockTime = portMAX_DELAY;
 800682e:	4b19      	ldr	r3, [pc, #100]	; (8006894 <xTaskResumeAll+0x100>)
 8006830:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006834:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006836:	4e18      	ldr	r6, [pc, #96]	; (8006898 <xTaskResumeAll+0x104>)
 8006838:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800683a:	b13c      	cbz	r4, 800684c <xTaskResumeAll+0xb8>
								xYieldPending = pdTRUE;
 800683c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800683e:	f7ff fefb 	bl	8006638 <xTaskIncrementTick>
 8006842:	b100      	cbz	r0, 8006846 <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 8006844:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006846:	3c01      	subs	r4, #1
 8006848:	d1f9      	bne.n	800683e <xTaskResumeAll+0xaa>
						uxPendedTicks = 0;
 800684a:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 800684c:	682b      	ldr	r3, [r5, #0]
 800684e:	b14b      	cbz	r3, 8006864 <xTaskResumeAll+0xd0>
					taskYIELD_IF_USING_PREEMPTION();
 8006850:	4b12      	ldr	r3, [pc, #72]	; (800689c <xTaskResumeAll+0x108>)
 8006852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006860:	2401      	movs	r4, #1
 8006862:	e000      	b.n	8006866 <xTaskResumeAll+0xd2>
BaseType_t xAlreadyYielded = pdFALSE;
 8006864:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006866:	f7ff fa07 	bl	8005c78 <vPortExitCritical>
}
 800686a:	4620      	mov	r0, r4
 800686c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006870:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006872:	4b08      	ldr	r3, [pc, #32]	; (8006894 <xTaskResumeAll+0x100>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006874:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006876:	68d2      	ldr	r2, [r2, #12]
 8006878:	6852      	ldr	r2, [r2, #4]
 800687a:	601a      	str	r2, [r3, #0]
 800687c:	e7db      	b.n	8006836 <xTaskResumeAll+0xa2>
 800687e:	bf00      	nop
 8006880:	200044c4 	.word	0x200044c4
 8006884:	200044b8 	.word	0x200044b8
 8006888:	20004544 	.word	0x20004544
 800688c:	200044cc 	.word	0x200044cc
 8006890:	20004424 	.word	0x20004424
 8006894:	200044f8 	.word	0x200044f8
 8006898:	200044c0 	.word	0x200044c0
 800689c:	e000ed04 	.word	0xe000ed04
 80068a0:	20004500 	.word	0x20004500
 80068a4:	2000442c 	.word	0x2000442c
 80068a8:	20004420 	.word	0x20004420

080068ac <vTaskDelay>:
	{
 80068ac:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80068ae:	b158      	cbz	r0, 80068c8 <vTaskDelay+0x1c>
			configASSERT( uxSchedulerSuspended == 0 );
 80068b0:	4b0f      	ldr	r3, [pc, #60]	; (80068f0 <vTaskDelay+0x44>)
 80068b2:	6819      	ldr	r1, [r3, #0]
 80068b4:	b189      	cbz	r1, 80068da <vTaskDelay+0x2e>
 80068b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	e7fe      	b.n	80068c6 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80068c8:	4b0a      	ldr	r3, [pc, #40]	; (80068f4 <vTaskDelay+0x48>)
 80068ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ce:	601a      	str	r2, [r3, #0]
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	bd08      	pop	{r3, pc}
	++uxSchedulerSuspended;
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	3201      	adds	r2, #1
 80068de:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80068e0:	f7ff fcd0 	bl	8006284 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80068e4:	f7ff ff56 	bl	8006794 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80068e8:	2800      	cmp	r0, #0
 80068ea:	d0ed      	beq.n	80068c8 <vTaskDelay+0x1c>
 80068ec:	bd08      	pop	{r3, pc}
 80068ee:	bf00      	nop
 80068f0:	200044c4 	.word	0x200044c4
 80068f4:	e000ed04 	.word	0xe000ed04

080068f8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068f8:	4b16      	ldr	r3, [pc, #88]	; (8006954 <vTaskSwitchContext+0x5c>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	bb33      	cbnz	r3, 800694c <vTaskSwitchContext+0x54>
		xYieldPending = pdFALSE;
 80068fe:	4916      	ldr	r1, [pc, #88]	; (8006958 <vTaskSwitchContext+0x60>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006900:	4a16      	ldr	r2, [pc, #88]	; (800695c <vTaskSwitchContext+0x64>)
		xYieldPending = pdFALSE;
 8006902:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006904:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006906:	fab3 f383 	clz	r3, r3
 800690a:	b2db      	uxtb	r3, r3
 800690c:	f1c3 031f 	rsb	r3, r3, #31
 8006910:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4912      	ldr	r1, [pc, #72]	; (8006960 <vTaskSwitchContext+0x68>)
 8006918:	58ca      	ldr	r2, [r1, r3]
 800691a:	18c8      	adds	r0, r1, r3
 800691c:	b942      	cbnz	r2, 8006930 <vTaskSwitchContext+0x38>
	__asm volatile
 800691e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	e7fe      	b.n	800692e <vTaskSwitchContext+0x36>
 8006930:	6842      	ldr	r2, [r0, #4]
 8006932:	3308      	adds	r3, #8
 8006934:	6852      	ldr	r2, [r2, #4]
 8006936:	6042      	str	r2, [r0, #4]
 8006938:	440b      	add	r3, r1
 800693a:	429a      	cmp	r2, r3
 800693c:	bf08      	it	eq
 800693e:	6852      	ldreq	r2, [r2, #4]
 8006940:	4b08      	ldr	r3, [pc, #32]	; (8006964 <vTaskSwitchContext+0x6c>)
 8006942:	bf08      	it	eq
 8006944:	6042      	streq	r2, [r0, #4]
 8006946:	68d2      	ldr	r2, [r2, #12]
 8006948:	601a      	str	r2, [r3, #0]
 800694a:	4770      	bx	lr
		xYieldPending = pdTRUE;
 800694c:	4b02      	ldr	r3, [pc, #8]	; (8006958 <vTaskSwitchContext+0x60>)
 800694e:	2201      	movs	r2, #1
 8006950:	601a      	str	r2, [r3, #0]
 8006952:	4770      	bx	lr
 8006954:	200044c4 	.word	0x200044c4
 8006958:	20004544 	.word	0x20004544
 800695c:	200044cc 	.word	0x200044cc
 8006960:	2000442c 	.word	0x2000442c
 8006964:	20004420 	.word	0x20004420

08006968 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8006968:	4b04      	ldr	r3, [pc, #16]	; (800697c <vApplicationGetIdleTaskMemory+0x14>)
 800696a:	6003      	str	r3, [r0, #0]
{
 800696c:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800696e:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8006970:	4c03      	ldr	r4, [pc, #12]	; (8006980 <vApplicationGetIdleTaskMemory+0x18>)
 8006972:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8006974:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 8006976:	f85d 4b04 	ldr.w	r4, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	20004748 	.word	0x20004748
 8006980:	20004548 	.word	0x20004548

08006984 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8006984:	b508      	push	{r3, lr}
    
    
                 
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8006986:	f000 fd07 	bl	8007398 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  gyro_handler();
 800698a:	f001 fd61 	bl	8008450 <gyro_handler>
	  osDelay(5);
 800698e:	2005      	movs	r0, #5
 8006990:	f7ff f890 	bl	8005ab4 <osDelay>
	  accel_handler();
 8006994:	f001 fe46 	bl	8008624 <accel_handler>
	  osDelay(5);
 8006998:	2005      	movs	r0, #5
 800699a:	f7ff f88b 	bl	8005ab4 <osDelay>
	  spinOnce();
 800699e:	f002 fcc1 	bl	8009324 <spinOnce>
 80069a2:	e7f2      	b.n	800698a <StartDefaultTask+0x6>

080069a4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80069a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	MPU6050_getAllData(allData);
 80069a6:	4c04      	ldr	r4, [pc, #16]	; (80069b8 <StartTask02+0x14>)
 80069a8:	4620      	mov	r0, r4
 80069aa:	f000 fac5 	bl	8006f38 <MPU6050_getAllData>
    osDelay(50);
 80069ae:	2032      	movs	r0, #50	; 0x32
 80069b0:	f7ff f880 	bl	8005ab4 <osDelay>
 80069b4:	e7f8      	b.n	80069a8 <StartTask02+0x4>
 80069b6:	bf00      	nop
 80069b8:	20004a78 	.word	0x20004a78

080069bc <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80069bc:	4c0f      	ldr	r4, [pc, #60]	; (80069fc <StartTask03+0x40>)
 80069be:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8006a10 <StartTask03+0x54>
 80069c2:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8006a14 <StartTask03+0x58>
  {
//	a[0] = (uint8_t)sideData;
//	a[1] = (uint8_t)speedData;
	  a[0] = sideData;
	  a[1] = speedData;
	HAL_CAN_AddTxMessage(&hcan1, &r_wheelHeader, &a, &TxMailbox);
 80069c6:	4e0e      	ldr	r6, [pc, #56]	; (8006a00 <StartTask03+0x44>)
{
 80069c8:	b580      	push	{r7, lr}
	HAL_CAN_AddTxMessage(&hcan1, &r_wheelHeader, &a, &TxMailbox);
 80069ca:	4f0e      	ldr	r7, [pc, #56]	; (8006a04 <StartTask03+0x48>)
 80069cc:	4625      	mov	r5, r4
	  a[0] = sideData;
 80069ce:	f899 3000 	ldrb.w	r3, [r9]
	  a[1] = speedData;
 80069d2:	f898 e000 	ldrb.w	lr, [r8]
	  a[0] = sideData;
 80069d6:	7023      	strb	r3, [r4, #0]
	HAL_CAN_AddTxMessage(&hcan1, &r_wheelHeader, &a, &TxMailbox);
 80069d8:	462a      	mov	r2, r5
 80069da:	463b      	mov	r3, r7
 80069dc:	490a      	ldr	r1, [pc, #40]	; (8006a08 <StartTask03+0x4c>)
	  a[1] = speedData;
 80069de:	f884 e001 	strb.w	lr, [r4, #1]
	HAL_CAN_AddTxMessage(&hcan1, &r_wheelHeader, &a, &TxMailbox);
 80069e2:	4630      	mov	r0, r6
 80069e4:	f7fa fe7e 	bl	80016e4 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan1, &l_wheelHeader, &a, &TxMailbox);
 80069e8:	463b      	mov	r3, r7
 80069ea:	462a      	mov	r2, r5
 80069ec:	4907      	ldr	r1, [pc, #28]	; (8006a0c <StartTask03+0x50>)
 80069ee:	4630      	mov	r0, r6
 80069f0:	f7fa fe78 	bl	80016e4 <HAL_CAN_AddTxMessage>
    osDelay(50);
 80069f4:	2032      	movs	r0, #50	; 0x32
 80069f6:	f7ff f85d 	bl	8005ab4 <osDelay>
 80069fa:	e7e8      	b.n	80069ce <StartTask03+0x12>
 80069fc:	200007fc 	.word	0x200007fc
 8006a00:	20004aa0 	.word	0x20004aa0
 8006a04:	20004a70 	.word	0x20004a70
 8006a08:	20004858 	.word	0x20004858
 8006a0c:	20004ad0 	.word	0x20004ad0
 8006a10:	20004856 	.word	0x20004856
 8006a14:	20004850 	.word	0x20004850

08006a18 <SystemClock_Config>:
{
 8006a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a1a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006a1c:	a808      	add	r0, sp, #32
 8006a1e:	2230      	movs	r2, #48	; 0x30
 8006a20:	2100      	movs	r1, #0
 8006a22:	f003 f9e0 	bl	8009de6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006a26:	2400      	movs	r4, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a28:	4a1f      	ldr	r2, [pc, #124]	; (8006aa8 <SystemClock_Config+0x90>)
 8006a2a:	9401      	str	r4, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006a2c:	9404      	str	r4, [sp, #16]
 8006a2e:	9403      	str	r4, [sp, #12]
 8006a30:	9405      	str	r4, [sp, #20]
 8006a32:	9406      	str	r4, [sp, #24]
 8006a34:	9407      	str	r4, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a36:	6c11      	ldr	r1, [r2, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a38:	4b1c      	ldr	r3, [pc, #112]	; (8006aac <SystemClock_Config+0x94>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a3a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8006a3e:	6411      	str	r1, [r2, #64]	; 0x40
 8006a40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006a42:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8006a46:	9201      	str	r2, [sp, #4]
 8006a48:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a4a:	9402      	str	r4, [sp, #8]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a5a:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006a5c:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006a5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006a62:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006a64:	2108      	movs	r1, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006a66:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006a68:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 168;
 8006a6a:	22a8      	movs	r2, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006a6c:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006a6e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006a70:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 8006a74:	960f      	str	r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006a76:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8006a78:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006a7a:	9313      	str	r3, [sp, #76]	; 0x4c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a7c:	9f02      	ldr	r7, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006a7e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006a80:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006a82:	260f      	movs	r6, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006a84:	f7fd f84c 	bl	8003b20 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006a88:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006a90:	a803      	add	r0, sp, #12
 8006a92:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006a94:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006a96:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006a98:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006a9a:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006a9c:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006a9e:	f7fd fa4f 	bl	8003f40 <HAL_RCC_ClockConfig>
}
 8006aa2:	b015      	add	sp, #84	; 0x54
 8006aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	40023800 	.word	0x40023800
 8006aac:	40007000 	.word	0x40007000

08006ab0 <main>:
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b09a      	sub	sp, #104	; 0x68
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ab4:	2400      	movs	r4, #0
  HAL_Init();
 8006ab6:	f7fa fca1 	bl	80013fc <HAL_Init>
  SystemClock_Config();
 8006aba:	f7ff ffad 	bl	8006a18 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006abe:	4b68      	ldr	r3, [pc, #416]	; (8006c60 <main+0x1b0>)
 8006ac0:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ac2:	9414      	str	r4, [sp, #80]	; 0x50
 8006ac4:	9413      	str	r4, [sp, #76]	; 0x4c
 8006ac6:	9415      	str	r4, [sp, #84]	; 0x54
 8006ac8:	9416      	str	r4, [sp, #88]	; 0x58
 8006aca:	9417      	str	r4, [sp, #92]	; 0x5c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006acc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hcan1.Instance = CAN1;
 8006ace:	4e65      	ldr	r6, [pc, #404]	; (8006c64 <main+0x1b4>)
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8006ad0:	4865      	ldr	r0, [pc, #404]	; (8006c68 <main+0x1b8>)
  hcan1.Instance = CAN1;
 8006ad2:	4f66      	ldr	r7, [pc, #408]	; (8006c6c <main+0x1bc>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8006ad4:	4d66      	ldr	r5, [pc, #408]	; (8006c70 <main+0x1c0>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006ad6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ada:	631a      	str	r2, [r3, #48]	; 0x30
 8006adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ade:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8006ae2:	9200      	str	r2, [sp, #0]
 8006ae4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006ae6:	9401      	str	r4, [sp, #4]
 8006ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006aea:	f042 0210 	orr.w	r2, r2, #16
 8006aee:	631a      	str	r2, [r3, #48]	; 0x30
 8006af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006af2:	f002 0210 	and.w	r2, r2, #16
 8006af6:	9201      	str	r2, [sp, #4]
 8006af8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006afa:	9402      	str	r4, [sp, #8]
 8006afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006afe:	f042 0201 	orr.w	r2, r2, #1
 8006b02:	631a      	str	r2, [r3, #48]	; 0x30
 8006b04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b06:	f002 0201 	and.w	r2, r2, #1
 8006b0a:	9202      	str	r2, [sp, #8]
 8006b0c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b0e:	9403      	str	r4, [sp, #12]
 8006b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b12:	f042 0208 	orr.w	r2, r2, #8
 8006b16:	631a      	str	r2, [r3, #48]	; 0x30
 8006b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b1a:	f002 0208 	and.w	r2, r2, #8
 8006b1e:	9203      	str	r2, [sp, #12]
 8006b20:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b22:	9404      	str	r4, [sp, #16]
 8006b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b26:	f042 0202 	orr.w	r2, r2, #2
 8006b2a:	631a      	str	r2, [r3, #48]	; 0x30
 8006b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2e:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8006b32:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b34:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8006b36:	f44f 7180 	mov.w	r1, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b3a:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b3e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8006b40:	f7fa ffb4 	bl	8001aac <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006b44:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b48:	a913      	add	r1, sp, #76	; 0x4c
 8006b4a:	4847      	ldr	r0, [pc, #284]	; (8006c68 <main+0x1b8>)
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006b4c:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b4e:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b50:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b52:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b56:	f7fa fe9b 	bl	8001890 <HAL_GPIO_Init>
  hcan1.Init.Prescaler = 21;
 8006b5a:	2115      	movs	r1, #21
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8006b5c:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8006b60:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8006b64:	4630      	mov	r0, r6
  hcan1.Instance = CAN1;
 8006b66:	6037      	str	r7, [r6, #0]
  hcan1.Init.Prescaler = 21;
 8006b68:	6071      	str	r1, [r6, #4]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8006b6a:	6132      	str	r2, [r6, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8006b6c:	6173      	str	r3, [r6, #20]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8006b6e:	60b4      	str	r4, [r6, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006b70:	60f4      	str	r4, [r6, #12]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8006b72:	7634      	strb	r4, [r6, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8006b74:	7674      	strb	r4, [r6, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8006b76:	76b4      	strb	r4, [r6, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8006b78:	76f4      	strb	r4, [r6, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8006b7a:	7734      	strb	r4, [r6, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8006b7c:	7774      	strb	r4, [r6, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8006b7e:	f7fa fc7b 	bl	8001478 <HAL_CAN_Init>
  hi2c1.Instance = I2C1;
 8006b82:	4b3c      	ldr	r3, [pc, #240]	; (8006c74 <main+0x1c4>)
  hi2c1.Init.ClockSpeed = 100000;
 8006b84:	493c      	ldr	r1, [pc, #240]	; (8006c78 <main+0x1c8>)
 8006b86:	6059      	str	r1, [r3, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006b88:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006b8c:	4618      	mov	r0, r3
  hi2c1.Instance = I2C1;
 8006b8e:	f5a7 5780 	sub.w	r7, r7, #4096	; 0x1000
 8006b92:	601f      	str	r7, [r3, #0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006b94:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006b96:	609c      	str	r4, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006b98:	60dc      	str	r4, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006b9a:	615c      	str	r4, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006b9c:	619c      	str	r4, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006b9e:	61dc      	str	r4, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006ba0:	621c      	str	r4, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006ba2:	f7fb f909 	bl	8001db8 <HAL_I2C_Init>
  sensor_ini();
 8006ba6:	f000 f881 	bl	8006cac <sensor_ini>
  MPU6050_init();
 8006baa:	f000 f995 	bl	8006ed8 <MPU6050_init>
  HAL_Delay(1000);
 8006bae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006bb2:	f7fa fc4f 	bl	8001454 <HAL_Delay>
  init_ROS();
 8006bb6:	f001 fbc1 	bl	800833c <init_ROS>
  r_wheelHeader.DLC = 2;
 8006bba:	4930      	ldr	r1, [pc, #192]	; (8006c7c <main+0x1cc>)
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8006bbc:	4b30      	ldr	r3, [pc, #192]	; (8006c80 <main+0x1d0>)
  l_wheelHeader.DLC = 2;
 8006bbe:	4a31      	ldr	r2, [pc, #196]	; (8006c84 <main+0x1d4>)
  r_wheelHeader.IDE = CAN_ID_STD;
 8006bc0:	608c      	str	r4, [r1, #8]
  r_wheelHeader.StdId = 0x244;
 8006bc2:	f44f 7711 	mov.w	r7, #580	; 0x244
 8006bc6:	600f      	str	r7, [r1, #0]
  r_wheelHeader.DLC = 2;
 8006bc8:	2702      	movs	r7, #2
 8006bca:	610f      	str	r7, [r1, #16]
  r_wheelHeader.RTR = CAN_RTR_DATA;
 8006bcc:	60cc      	str	r4, [r1, #12]
  l_wheelHeader.StdId = 0x243;
 8006bce:	f240 2143 	movw	r1, #579	; 0x243
  l_wheelHeader.DLC = 2;
 8006bd2:	6117      	str	r7, [r2, #16]
  l_wheelHeader.StdId = 0x243;
 8006bd4:	6011      	str	r1, [r2, #0]
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8006bd6:	4630      	mov	r0, r6
 8006bd8:	4619      	mov	r1, r3
  l_wheelHeader.IDE = CAN_ID_STD;
 8006bda:	6094      	str	r4, [r2, #8]
  l_wheelHeader.RTR = CAN_RTR_DATA;
 8006bdc:	60d4      	str	r4, [r2, #12]
  sFilterConfig.FilterIdHigh = 0x245<<5;
 8006bde:	f644 02a0 	movw	r2, #18592	; 0x48a0
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8006be2:	611c      	str	r4, [r3, #16]
  sFilterConfig.FilterIdLow = 0;
 8006be4:	605c      	str	r4, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 8006be6:	609c      	str	r4, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 8006be8:	60dc      	str	r4, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8006bea:	f8c3 801c 	str.w	r8, [r3, #28]
  sFilterConfig.FilterActivation = ENABLE;
 8006bee:	f8c3 8020 	str.w	r8, [r3, #32]
  sFilterConfig.FilterIdHigh = 0x245<<5;
 8006bf2:	601a      	str	r2, [r3, #0]
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8006bf4:	f7fa fcc2 	bl	800157c <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	f7fa fd45 	bl	8001688 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8006bfe:	4639      	mov	r1, r7
 8006c00:	4630      	mov	r0, r6
 8006c02:	f7fa fdc7 	bl	8001794 <HAL_CAN_ActivateNotification>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8006c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c08:	ae05      	add	r6, sp, #20
 8006c0a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006c0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006c10:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8006c14:	4621      	mov	r1, r4
 8006c16:	a805      	add	r0, sp, #20
 8006c18:	f7fe ff20 	bl	8005a5c <osThreadCreate>
 8006c1c:	4b1a      	ldr	r3, [pc, #104]	; (8006c88 <main+0x1d8>)
  osThreadDef(IMUtask, StartTask02, osPriorityNormal, 0, 128);
 8006c1e:	f105 070c 	add.w	r7, r5, #12
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8006c22:	6018      	str	r0, [r3, #0]
  osThreadDef(IMUtask, StartTask02, osPriorityNormal, 0, 128);
 8006c24:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006c26:	ae0c      	add	r6, sp, #48	; 0x30
 8006c28:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006c2a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8006c2e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  IMUtaskHandle = osThreadCreate(osThread(IMUtask), NULL);
 8006c32:	4621      	mov	r1, r4
 8006c34:	a80c      	add	r0, sp, #48	; 0x30
 8006c36:	f7fe ff11 	bl	8005a5c <osThreadCreate>
 8006c3a:	4b14      	ldr	r3, [pc, #80]	; (8006c8c <main+0x1dc>)
  osThreadDef(wheelControltas, StartTask03, osPriorityHigh, 0, 128);
 8006c3c:	3528      	adds	r5, #40	; 0x28
  IMUtaskHandle = osThreadCreate(osThread(IMUtask), NULL);
 8006c3e:	6018      	str	r0, [r3, #0]
  osThreadDef(wheelControltas, StartTask03, osPriorityHigh, 0, 128);
 8006c40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c42:	ae13      	add	r6, sp, #76	; 0x4c
 8006c44:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006c46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006c4a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  wheelControltasHandle = osThreadCreate(osThread(wheelControltas), NULL);
 8006c4e:	4621      	mov	r1, r4
 8006c50:	a813      	add	r0, sp, #76	; 0x4c
 8006c52:	f7fe ff03 	bl	8005a5c <osThreadCreate>
 8006c56:	4b0e      	ldr	r3, [pc, #56]	; (8006c90 <main+0x1e0>)
 8006c58:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8006c5a:	f7fe fef9 	bl	8005a50 <osKernelStart>
 8006c5e:	e7fe      	b.n	8006c5e <main+0x1ae>
 8006c60:	40023800 	.word	0x40023800
 8006c64:	20004aa0 	.word	0x20004aa0
 8006c68:	40021000 	.word	0x40021000
 8006c6c:	40006400 	.word	0x40006400
 8006c70:	0800a090 	.word	0x0800a090
 8006c74:	200047ec 	.word	0x200047ec
 8006c78:	000186a0 	.word	0x000186a0
 8006c7c:	20004858 	.word	0x20004858
 8006c80:	200047b4 	.word	0x200047b4
 8006c84:	20004ad0 	.word	0x20004ad0
 8006c88:	200047e0 	.word	0x200047e0
 8006c8c:	200047e4 	.word	0x200047e4
 8006c90:	20004844 	.word	0x20004844

08006c94 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8006c94:	6802      	ldr	r2, [r0, #0]
 8006c96:	4b03      	ldr	r3, [pc, #12]	; (8006ca4 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d000      	beq.n	8006c9e <HAL_TIM_PeriodElapsedCallback+0xa>
 8006c9c:	4770      	bx	lr
    HAL_IncTick();
 8006c9e:	f7fa bbc7 	b.w	8001430 <HAL_IncTick>
 8006ca2:	bf00      	nop
 8006ca4:	40000400 	.word	0x40000400

08006ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop

08006cac <sensor_ini>:

void ledOff(void) {
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_12,GPIO_PIN_RESET);
}

void sensor_ini(void) {
 8006cac:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_Delay(100);
 8006cae:	2064      	movs	r0, #100	; 0x64
void sensor_ini(void) {
 8006cb0:	b085      	sub	sp, #20
	HAL_Delay(100);
 8006cb2:	f7fa fbcf 	bl	8001454 <HAL_Delay>
	value = 0;
 8006cb6:	4c83      	ldr	r4, [pc, #524]	; (8006ec4 <sensor_ini+0x218>)
		a = 2;
	}
}

uint8_t read_id(void) {
	ctrl = 0x00;
 8006cb8:	4d83      	ldr	r5, [pc, #524]	; (8006ec8 <sensor_ini+0x21c>)
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8006cba:	9400      	str	r4, [sp, #0]
 8006cbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006cc0:	2601      	movs	r6, #1
	ctrl = 0x00;
 8006cc2:	2700      	movs	r7, #0
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8006cc4:	9302      	str	r3, [sp, #8]
 8006cc6:	9601      	str	r6, [sp, #4]
 8006cc8:	4633      	mov	r3, r6
 8006cca:	2275      	movs	r2, #117	; 0x75
 8006ccc:	21d0      	movs	r1, #208	; 0xd0
 8006cce:	487f      	ldr	r0, [pc, #508]	; (8006ecc <sensor_ini+0x220>)
	ctrl = 0x00;
 8006cd0:	702f      	strb	r7, [r5, #0]
	value = 0;
 8006cd2:	7027      	strb	r7, [r4, #0]
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8006cd4:	f7fb faba 	bl	800224c <HAL_I2C_Mem_Read>
	if(status != HAL_OK)
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	d03c      	beq.n	8006d56 <sensor_ini+0xaa>
		a = 1;
 8006cdc:	4b7c      	ldr	r3, [pc, #496]	; (8006ed0 <sensor_ini+0x224>)
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006cde:	487d      	ldr	r0, [pc, #500]	; (8006ed4 <sensor_ini+0x228>)
		a = 1;
 8006ce0:	701e      	strb	r6, [r3, #0]
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006ce2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006ce6:	f7fa fee5 	bl	8001ab4 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8006cea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006cee:	f7fa fbb1 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006cf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006cf6:	4877      	ldr	r0, [pc, #476]	; (8006ed4 <sensor_ini+0x228>)
 8006cf8:	f7fa fedc 	bl	8001ab4 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8006cfc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006d00:	f7fa fba8 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006d04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d08:	4872      	ldr	r0, [pc, #456]	; (8006ed4 <sensor_ini+0x228>)
 8006d0a:	f7fa fed3 	bl	8001ab4 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8006d0e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006d12:	f7fa fb9f 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006d16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d1a:	486e      	ldr	r0, [pc, #440]	; (8006ed4 <sensor_ini+0x228>)
 8006d1c:	f7fa feca 	bl	8001ab4 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8006d20:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006d24:	f7fa fb96 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006d28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d2c:	4869      	ldr	r0, [pc, #420]	; (8006ed4 <sensor_ini+0x228>)
 8006d2e:	f7fa fec1 	bl	8001ab4 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8006d32:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006d36:	f7fa fb8d 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006d3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d3e:	4865      	ldr	r0, [pc, #404]	; (8006ed4 <sensor_ini+0x228>)
 8006d40:	f7fa feb8 	bl	8001ab4 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8006d44:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006d48:	f7fa fb84 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006d4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d50:	4860      	ldr	r0, [pc, #384]	; (8006ed4 <sensor_ini+0x228>)
 8006d52:	f7fa feaf 	bl	8001ab4 <HAL_GPIO_TogglePin>
	if ((read_id()==0xFF)||(read_id()==0x70)||(read_id()==0x48)) {
 8006d56:	7823      	ldrb	r3, [r4, #0]
 8006d58:	2bff      	cmp	r3, #255	; 0xff
 8006d5a:	d029      	beq.n	8006db0 <sensor_ini+0x104>
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8006d5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d60:	2601      	movs	r6, #1
	ctrl = 0x00;
 8006d62:	2700      	movs	r7, #0
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8006d64:	9302      	str	r3, [sp, #8]
 8006d66:	9400      	str	r4, [sp, #0]
 8006d68:	9601      	str	r6, [sp, #4]
 8006d6a:	4633      	mov	r3, r6
 8006d6c:	2275      	movs	r2, #117	; 0x75
 8006d6e:	21d0      	movs	r1, #208	; 0xd0
 8006d70:	4856      	ldr	r0, [pc, #344]	; (8006ecc <sensor_ini+0x220>)
	ctrl = 0x00;
 8006d72:	702f      	strb	r7, [r5, #0]
	value = 0;
 8006d74:	7027      	strb	r7, [r4, #0]
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8006d76:	f7fb fa69 	bl	800224c <HAL_I2C_Mem_Read>
	if(status != HAL_OK)
 8006d7a:	b9f8      	cbnz	r0, 8006dbc <sensor_ini+0x110>
	if ((read_id()==0xFF)||(read_id()==0x70)||(read_id()==0x48)) {
 8006d7c:	7823      	ldrb	r3, [r4, #0]
 8006d7e:	2b70      	cmp	r3, #112	; 0x70
 8006d80:	d016      	beq.n	8006db0 <sensor_ini+0x104>
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8006d82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d86:	2601      	movs	r6, #1
	ctrl = 0x00;
 8006d88:	2700      	movs	r7, #0
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8006d8a:	9302      	str	r3, [sp, #8]
 8006d8c:	9400      	str	r4, [sp, #0]
 8006d8e:	9601      	str	r6, [sp, #4]
 8006d90:	4633      	mov	r3, r6
 8006d92:	2275      	movs	r2, #117	; 0x75
 8006d94:	21d0      	movs	r1, #208	; 0xd0
 8006d96:	484d      	ldr	r0, [pc, #308]	; (8006ecc <sensor_ini+0x220>)
	ctrl = 0x00;
 8006d98:	702f      	strb	r7, [r5, #0]
	value = 0;
 8006d9a:	7027      	strb	r7, [r4, #0]
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8006d9c:	f7fb fa56 	bl	800224c <HAL_I2C_Mem_Read>
	if(status != HAL_OK)
 8006da0:	2800      	cmp	r0, #0
 8006da2:	d14c      	bne.n	8006e3e <sensor_ini+0x192>
	return value;
 8006da4:	7823      	ldrb	r3, [r4, #0]
	ctrl = sensor_io_read(0x68, 0x75);
 8006da6:	702b      	strb	r3, [r5, #0]
	if ((read_id()==0xFF)||(read_id()==0x70)||(read_id()==0x48)) {
 8006da8:	2b48      	cmp	r3, #72	; 0x48
 8006daa:	d002      	beq.n	8006db2 <sensor_ini+0x106>
}
 8006dac:	b005      	add	sp, #20
 8006dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ctrl = sensor_io_read(0x68, 0x75);
 8006db0:	702b      	strb	r3, [r5, #0]
		a = 2;
 8006db2:	4b47      	ldr	r3, [pc, #284]	; (8006ed0 <sensor_ini+0x224>)
 8006db4:	2202      	movs	r2, #2
 8006db6:	701a      	strb	r2, [r3, #0]
}
 8006db8:	b005      	add	sp, #20
 8006dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		a = 1;
 8006dbc:	4b44      	ldr	r3, [pc, #272]	; (8006ed0 <sensor_ini+0x224>)
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006dbe:	4845      	ldr	r0, [pc, #276]	; (8006ed4 <sensor_ini+0x228>)
		a = 1;
 8006dc0:	701e      	strb	r6, [r3, #0]
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006dc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006dc6:	f7fa fe75 	bl	8001ab4 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8006dca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006dce:	f7fa fb41 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006dd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006dd6:	483f      	ldr	r0, [pc, #252]	; (8006ed4 <sensor_ini+0x228>)
 8006dd8:	f7fa fe6c 	bl	8001ab4 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8006ddc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006de0:	f7fa fb38 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006de4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006de8:	483a      	ldr	r0, [pc, #232]	; (8006ed4 <sensor_ini+0x228>)
 8006dea:	f7fa fe63 	bl	8001ab4 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8006dee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006df2:	f7fa fb2f 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006df6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006dfa:	4836      	ldr	r0, [pc, #216]	; (8006ed4 <sensor_ini+0x228>)
 8006dfc:	f7fa fe5a 	bl	8001ab4 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8006e00:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006e04:	f7fa fb26 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006e08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e0c:	4831      	ldr	r0, [pc, #196]	; (8006ed4 <sensor_ini+0x228>)
 8006e0e:	f7fa fe51 	bl	8001ab4 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8006e12:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006e16:	f7fa fb1d 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006e1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e1e:	482d      	ldr	r0, [pc, #180]	; (8006ed4 <sensor_ini+0x228>)
 8006e20:	f7fa fe48 	bl	8001ab4 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8006e24:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006e28:	f7fa fb14 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006e2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e30:	4828      	ldr	r0, [pc, #160]	; (8006ed4 <sensor_ini+0x228>)
 8006e32:	f7fa fe3f 	bl	8001ab4 <HAL_GPIO_TogglePin>
	if ((read_id()==0xFF)||(read_id()==0x70)||(read_id()==0x48)) {
 8006e36:	7823      	ldrb	r3, [r4, #0]
 8006e38:	2b70      	cmp	r3, #112	; 0x70
 8006e3a:	d1a2      	bne.n	8006d82 <sensor_ini+0xd6>
 8006e3c:	e7b8      	b.n	8006db0 <sensor_ini+0x104>
		a = 1;
 8006e3e:	4b24      	ldr	r3, [pc, #144]	; (8006ed0 <sensor_ini+0x224>)
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006e40:	4824      	ldr	r0, [pc, #144]	; (8006ed4 <sensor_ini+0x228>)
		a = 1;
 8006e42:	701e      	strb	r6, [r3, #0]
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006e44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e48:	f7fa fe34 	bl	8001ab4 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8006e4c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006e50:	f7fa fb00 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006e54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e58:	481e      	ldr	r0, [pc, #120]	; (8006ed4 <sensor_ini+0x228>)
 8006e5a:	f7fa fe2b 	bl	8001ab4 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8006e5e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006e62:	f7fa faf7 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006e66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e6a:	481a      	ldr	r0, [pc, #104]	; (8006ed4 <sensor_ini+0x228>)
 8006e6c:	f7fa fe22 	bl	8001ab4 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8006e70:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006e74:	f7fa faee 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006e78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e7c:	4815      	ldr	r0, [pc, #84]	; (8006ed4 <sensor_ini+0x228>)
 8006e7e:	f7fa fe19 	bl	8001ab4 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8006e82:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006e86:	f7fa fae5 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006e8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e8e:	4811      	ldr	r0, [pc, #68]	; (8006ed4 <sensor_ini+0x228>)
 8006e90:	f7fa fe10 	bl	8001ab4 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8006e94:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006e98:	f7fa fadc 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006e9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006ea0:	480c      	ldr	r0, [pc, #48]	; (8006ed4 <sensor_ini+0x228>)
 8006ea2:	f7fa fe07 	bl	8001ab4 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8006ea6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006eaa:	f7fa fad3 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006eae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006eb2:	4808      	ldr	r0, [pc, #32]	; (8006ed4 <sensor_ini+0x228>)
 8006eb4:	f7fa fdfe 	bl	8001ab4 <HAL_GPIO_TogglePin>
	return value;
 8006eb8:	7823      	ldrb	r3, [r4, #0]
	ctrl = sensor_io_read(0x68, 0x75);
 8006eba:	702b      	strb	r3, [r5, #0]
	if ((read_id()==0xFF)||(read_id()==0x70)||(read_id()==0x48)) {
 8006ebc:	2b48      	cmp	r3, #72	; 0x48
 8006ebe:	f47f af75 	bne.w	8006dac <sensor_ini+0x100>
 8006ec2:	e776      	b.n	8006db2 <sensor_ini+0x106>
 8006ec4:	2000479d 	.word	0x2000479d
 8006ec8:	2000479c 	.word	0x2000479c
 8006ecc:	200047ec 	.word	0x200047ec
 8006ed0:	200007fc 	.word	0x200007fc
 8006ed4:	40021000 	.word	0x40021000

08006ed8 <MPU6050_init>:
	return ctrl;
}

void MPU6050_init(void)
{
 8006ed8:	b570      	push	{r4, r5, r6, lr}
void MPU6050_writeReg(uint16_t Addr, uint8_t reg, uint8_t value)
{
	uint8_t buf[2];
	buf[0] = reg;
	buf[1] = value;
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 8006eda:	4c16      	ldr	r4, [pc, #88]	; (8006f34 <MPU6050_init+0x5c>)
{
 8006edc:	b084      	sub	sp, #16
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 8006ede:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	buf[0] = reg;
 8006ee2:	216b      	movs	r1, #107	; 0x6b
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 8006ee4:	aa03      	add	r2, sp, #12
 8006ee6:	9500      	str	r5, [sp, #0]
	buf[0] = reg;
 8006ee8:	f88d 100c 	strb.w	r1, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 8006eec:	4620      	mov	r0, r4
	buf[1] = value;
 8006eee:	2600      	movs	r6, #0
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	21d0      	movs	r1, #208	; 0xd0
	buf[1] = value;
 8006ef4:	f88d 600d 	strb.w	r6, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 8006ef8:	f7fb f81e 	bl	8001f38 <HAL_I2C_Master_Transmit>
	buf[0] = reg;
 8006efc:	211b      	movs	r1, #27
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 8006efe:	9500      	str	r5, [sp, #0]
 8006f00:	aa03      	add	r2, sp, #12
	buf[0] = reg;
 8006f02:	f88d 100c 	strb.w	r1, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 8006f06:	4620      	mov	r0, r4
	buf[1] = value;
 8006f08:	2608      	movs	r6, #8
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	21d0      	movs	r1, #208	; 0xd0
	buf[1] = value;
 8006f0e:	f88d 600d 	strb.w	r6, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 8006f12:	f7fb f811 	bl	8001f38 <HAL_I2C_Master_Transmit>
 8006f16:	9500      	str	r5, [sp, #0]
 8006f18:	aa03      	add	r2, sp, #12
 8006f1a:	4620      	mov	r0, r4
	buf[0] = reg;
 8006f1c:	251c      	movs	r5, #28
	buf[1] = value;
 8006f1e:	2410      	movs	r4, #16
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 8006f20:	2302      	movs	r3, #2
 8006f22:	21d0      	movs	r1, #208	; 0xd0
	buf[0] = reg;
 8006f24:	f88d 500c 	strb.w	r5, [sp, #12]
	buf[1] = value;
 8006f28:	f88d 400d 	strb.w	r4, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 8006f2c:	f7fb f804 	bl	8001f38 <HAL_I2C_Master_Transmit>
}
 8006f30:	b004      	add	sp, #16
 8006f32:	bd70      	pop	{r4, r5, r6, pc}
 8006f34:	200047ec 	.word	0x200047ec

08006f38 <MPU6050_getAllData>:
{
 8006f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f3c:	b08d      	sub	sp, #52	; 0x34

// Read an 8-bit register
uint8_t MPU6050_readReg(uint16_t Addr, uint8_t reg)
{
  uint8_t value;
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8006f3e:	2401      	movs	r4, #1
 8006f40:	f10d 062f 	add.w	r6, sp, #47	; 0x2f
 8006f44:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 8006f48:	9702      	str	r7, [sp, #8]
 8006f4a:	9401      	str	r4, [sp, #4]
 8006f4c:	4623      	mov	r3, r4
 8006f4e:	9600      	str	r6, [sp, #0]
 8006f50:	2243      	movs	r2, #67	; 0x43
 8006f52:	21d0      	movs	r1, #208	; 0xd0
 8006f54:	4870      	ldr	r0, [pc, #448]	; (8007118 <MPU6050_getAllData+0x1e0>)
 8006f56:	f7fb f979 	bl	800224c <HAL_I2C_Mem_Read>
 8006f5a:	9702      	str	r7, [sp, #8]
 8006f5c:	9401      	str	r4, [sp, #4]
 8006f5e:	9600      	str	r6, [sp, #0]
 8006f60:	4623      	mov	r3, r4
 8006f62:	2244      	movs	r2, #68	; 0x44
 8006f64:	21d0      	movs	r1, #208	; 0xd0
 8006f66:	486c      	ldr	r0, [pc, #432]	; (8007118 <MPU6050_getAllData+0x1e0>)
  return value;
 8006f68:	f89d a02f 	ldrb.w	sl, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8006f6c:	f7fb f96e 	bl	800224c <HAL_I2C_Mem_Read>
  return value;
 8006f70:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8006f74:	9702      	str	r7, [sp, #8]
 8006f76:	9401      	str	r4, [sp, #4]
 8006f78:	9600      	str	r6, [sp, #0]
 8006f7a:	4623      	mov	r3, r4
 8006f7c:	2245      	movs	r2, #69	; 0x45
 8006f7e:	21d0      	movs	r1, #208	; 0xd0
 8006f80:	4865      	ldr	r0, [pc, #404]	; (8007118 <MPU6050_getAllData+0x1e0>)
  return value;
 8006f82:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8006f84:	f7fb f962 	bl	800224c <HAL_I2C_Mem_Read>
 8006f88:	9702      	str	r7, [sp, #8]
 8006f8a:	9401      	str	r4, [sp, #4]
 8006f8c:	9600      	str	r6, [sp, #0]
 8006f8e:	4623      	mov	r3, r4
 8006f90:	2246      	movs	r2, #70	; 0x46
 8006f92:	21d0      	movs	r1, #208	; 0xd0
 8006f94:	4860      	ldr	r0, [pc, #384]	; (8007118 <MPU6050_getAllData+0x1e0>)
  return value;
 8006f96:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8006f9a:	f7fb f957 	bl	800224c <HAL_I2C_Mem_Read>
  return value;
 8006f9e:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8006fa2:	9702      	str	r7, [sp, #8]
 8006fa4:	9401      	str	r4, [sp, #4]
 8006fa6:	9600      	str	r6, [sp, #0]
 8006fa8:	4623      	mov	r3, r4
 8006faa:	2247      	movs	r2, #71	; 0x47
 8006fac:	21d0      	movs	r1, #208	; 0xd0
 8006fae:	485a      	ldr	r0, [pc, #360]	; (8007118 <MPU6050_getAllData+0x1e0>)
  return value;
 8006fb0:	9508      	str	r5, [sp, #32]
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8006fb2:	f7fb f94b 	bl	800224c <HAL_I2C_Mem_Read>
  return value;
 8006fb6:	f89d e02f 	ldrb.w	lr, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8006fba:	9702      	str	r7, [sp, #8]
 8006fbc:	9401      	str	r4, [sp, #4]
 8006fbe:	9600      	str	r6, [sp, #0]
 8006fc0:	4623      	mov	r3, r4
 8006fc2:	2248      	movs	r2, #72	; 0x48
 8006fc4:	21d0      	movs	r1, #208	; 0xd0
 8006fc6:	4854      	ldr	r0, [pc, #336]	; (8007118 <MPU6050_getAllData+0x1e0>)
  return value;
 8006fc8:	f8cd e01c 	str.w	lr, [sp, #28]
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8006fcc:	f7fb f93e 	bl	800224c <HAL_I2C_Mem_Read>
  return value;
 8006fd0:	f89d e02f 	ldrb.w	lr, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8006fd4:	9702      	str	r7, [sp, #8]
 8006fd6:	9401      	str	r4, [sp, #4]
 8006fd8:	9600      	str	r6, [sp, #0]
 8006fda:	4623      	mov	r3, r4
 8006fdc:	223b      	movs	r2, #59	; 0x3b
 8006fde:	21d0      	movs	r1, #208	; 0xd0
 8006fe0:	484d      	ldr	r0, [pc, #308]	; (8007118 <MPU6050_getAllData+0x1e0>)
  return value;
 8006fe2:	f8cd e018 	str.w	lr, [sp, #24]
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8006fe6:	f7fb f931 	bl	800224c <HAL_I2C_Mem_Read>
  return value;
 8006fea:	f89d e02f 	ldrb.w	lr, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8006fee:	9702      	str	r7, [sp, #8]
 8006ff0:	9401      	str	r4, [sp, #4]
 8006ff2:	9600      	str	r6, [sp, #0]
 8006ff4:	4623      	mov	r3, r4
 8006ff6:	223c      	movs	r2, #60	; 0x3c
 8006ff8:	21d0      	movs	r1, #208	; 0xd0
 8006ffa:	4847      	ldr	r0, [pc, #284]	; (8007118 <MPU6050_getAllData+0x1e0>)
  return value;
 8006ffc:	f8cd e014 	str.w	lr, [sp, #20]
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8007000:	f7fb f924 	bl	800224c <HAL_I2C_Mem_Read>
  return value;
 8007004:	f89d e02f 	ldrb.w	lr, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8007008:	9702      	str	r7, [sp, #8]
 800700a:	9401      	str	r4, [sp, #4]
 800700c:	9600      	str	r6, [sp, #0]
 800700e:	4623      	mov	r3, r4
 8007010:	223d      	movs	r2, #61	; 0x3d
 8007012:	21d0      	movs	r1, #208	; 0xd0
 8007014:	4840      	ldr	r0, [pc, #256]	; (8007118 <MPU6050_getAllData+0x1e0>)
  return value;
 8007016:	f8cd e010 	str.w	lr, [sp, #16]
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 800701a:	f7fb f917 	bl	800224c <HAL_I2C_Mem_Read>
 800701e:	9702      	str	r7, [sp, #8]
 8007020:	9401      	str	r4, [sp, #4]
 8007022:	9600      	str	r6, [sp, #0]
 8007024:	4623      	mov	r3, r4
 8007026:	223e      	movs	r2, #62	; 0x3e
 8007028:	21d0      	movs	r1, #208	; 0xd0
 800702a:	483b      	ldr	r0, [pc, #236]	; (8007118 <MPU6050_getAllData+0x1e0>)
  return value;
 800702c:	f89d 802f 	ldrb.w	r8, [sp, #47]	; 0x2f
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 8007030:	4d3a      	ldr	r5, [pc, #232]	; (800711c <MPU6050_getAllData+0x1e4>)
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8007032:	f7fb f90b 	bl	800224c <HAL_I2C_Mem_Read>
 8007036:	9702      	str	r7, [sp, #8]
 8007038:	9401      	str	r4, [sp, #4]
 800703a:	9600      	str	r6, [sp, #0]
 800703c:	4623      	mov	r3, r4
 800703e:	223f      	movs	r2, #63	; 0x3f
 8007040:	21d0      	movs	r1, #208	; 0xd0
 8007042:	4835      	ldr	r0, [pc, #212]	; (8007118 <MPU6050_getAllData+0x1e0>)
  return value;
 8007044:	f89d b02f 	ldrb.w	fp, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8007048:	f7fb f900 	bl	800224c <HAL_I2C_Mem_Read>
 800704c:	9702      	str	r7, [sp, #8]
 800704e:	9401      	str	r4, [sp, #4]
 8007050:	9600      	str	r6, [sp, #0]
 8007052:	4623      	mov	r3, r4
 8007054:	2240      	movs	r2, #64	; 0x40
 8007056:	21d0      	movs	r1, #208	; 0xd0
 8007058:	482f      	ldr	r0, [pc, #188]	; (8007118 <MPU6050_getAllData+0x1e0>)
  return value;
 800705a:	f89d 402f 	ldrb.w	r4, [sp, #47]	; 0x2f
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 800705e:	4e30      	ldr	r6, [pc, #192]	; (8007120 <MPU6050_getAllData+0x1e8>)
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8007060:	f7fb f8f4 	bl	800224c <HAL_I2C_Mem_Read>
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 8007064:	9b07      	ldr	r3, [sp, #28]
  return value;
 8007066:	f89d 702f 	ldrb.w	r7, [sp, #47]	; 0x2f
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 800706a:	ed9f 4a2e 	vldr	s8, [pc, #184]	; 8007124 <MPU6050_getAllData+0x1ec>
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 800706e:	eddf 4a2e 	vldr	s9, [pc, #184]	; 8007128 <MPU6050_getAllData+0x1f0>
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 8007072:	482e      	ldr	r0, [pc, #184]	; (800712c <MPU6050_getAllData+0x1f4>)
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 8007074:	492e      	ldr	r1, [pc, #184]	; (8007130 <MPU6050_getAllData+0x1f8>)
	accelY=(((int16_t)((uint16_t)buffer[8] << 8) + buffer[9]))/4096.0f*9.8f;
 8007076:	4a2f      	ldr	r2, [pc, #188]	; (8007134 <MPU6050_getAllData+0x1fc>)
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 8007078:	ea4f 2e03 	mov.w	lr, r3, lsl #8
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 800707c:	9b05      	ldr	r3, [sp, #20]
 800707e:	ea4f 2c03 	mov.w	ip, r3, lsl #8
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 8007082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007084:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 8007088:	fa03 fa8a 	sxtah	sl, r3, sl
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 800708c:	9b08      	ldr	r3, [sp, #32]
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 800708e:	ee07 aa90 	vmov	s15, sl
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 8007092:	ea4f 2909 	mov.w	r9, r9, lsl #8
 8007096:	fa03 f989 	sxtah	r9, r3, r9
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 800709a:	9b06      	ldr	r3, [sp, #24]
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 800709c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
	accelY=(((int16_t)((uint16_t)buffer[8] << 8) + buffer[9]))/4096.0f*9.8f;
 80070a0:	ea4f 2808 	mov.w	r8, r8, lsl #8
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 80070a4:	ee07 9a90 	vmov	s15, r9
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 80070a8:	fa03 fe8e 	sxtah	lr, r3, lr
	accelY=(((int16_t)((uint16_t)buffer[8] << 8) + buffer[9]))/4096.0f*9.8f;
 80070ac:	fa0b f888 	sxtah	r8, fp, r8
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 80070b0:	9b04      	ldr	r3, [sp, #16]
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 80070b2:	eef8 5ae7 	vcvt.f32.s32	s11, s15
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 80070b6:	0224      	lsls	r4, r4, #8
	accelY=(((int16_t)((uint16_t)buffer[8] << 8) + buffer[9]))/4096.0f*9.8f;
 80070b8:	ee07 8a90 	vmov	s15, r8
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 80070bc:	fa03 f38c 	sxtah	r3, r3, ip
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 80070c0:	fa07 f484 	sxtah	r4, r7, r4
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 80070c4:	ee06 ea10 	vmov	s12, lr
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 80070c8:	ee06 3a90 	vmov	s13, r3
	accelY=(((int16_t)((uint16_t)buffer[8] << 8) + buffer[9]))/4096.0f*9.8f;
 80070cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 80070d0:	ee07 4a90 	vmov	s15, r4
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 80070d4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 80070d8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 80070dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 80070e0:	ee25 5a04 	vmul.f32	s10, s10, s8
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 80070e4:	ee65 5a84 	vmul.f32	s11, s11, s8
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 80070e8:	ee26 6a04 	vmul.f32	s12, s12, s8
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 80070ec:	ee66 6aa4 	vmul.f32	s13, s13, s9
	accelY=(((int16_t)((uint16_t)buffer[8] << 8) + buffer[9]))/4096.0f*9.8f;
 80070f0:	ee27 7a24 	vmul.f32	s14, s14, s9
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 80070f4:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80070f8:	4b0f      	ldr	r3, [pc, #60]	; (8007138 <MPU6050_getAllData+0x200>)
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 80070fa:	ed86 5a00 	vstr	s10, [r6]
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 80070fe:	edc5 5a00 	vstr	s11, [r5]
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 8007102:	ed80 6a00 	vstr	s12, [r0]
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 8007106:	edc1 6a00 	vstr	s13, [r1]
	accelY=(((int16_t)((uint16_t)buffer[8] << 8) + buffer[9]))/4096.0f*9.8f;
 800710a:	ed82 7a00 	vstr	s14, [r2]
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 800710e:	edc3 7a00 	vstr	s15, [r3]
}
 8007112:	b00d      	add	sp, #52	; 0x34
 8007114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007118:	200047ec 	.word	0x200047ec
 800711c:	20004ac8 	.word	0x20004ac8
 8007120:	20004840 	.word	0x20004840
 8007124:	398ba1dc 	.word	0x398ba1dc
 8007128:	3b1ccccd 	.word	0x3b1ccccd
 800712c:	2000484c 	.word	0x2000484c
 8007130:	200047e8 	.word	0x200047e8
 8007134:	200047dc 	.word	0x200047dc
 8007138:	20004a74 	.word	0x20004a74

0800713c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800713c:	b500      	push	{lr}
 800713e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007140:	4b0e      	ldr	r3, [pc, #56]	; (800717c <HAL_MspInit+0x40>)
 8007142:	2200      	movs	r2, #0
 8007144:	9200      	str	r2, [sp, #0]
 8007146:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007148:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800714c:	6459      	str	r1, [r3, #68]	; 0x44
 800714e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007150:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8007154:	9100      	str	r1, [sp, #0]
 8007156:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007158:	9201      	str	r2, [sp, #4]
 800715a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800715c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8007160:	6419      	str	r1, [r3, #64]	; 0x40
 8007162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007168:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800716a:	210f      	movs	r1, #15
 800716c:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8007170:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007172:	f7fa fb33 	bl	80017dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007176:	b003      	add	sp, #12
 8007178:	f85d fb04 	ldr.w	pc, [sp], #4
 800717c:	40023800 	.word	0x40023800

08007180 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8007180:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcan->Instance==CAN1)
 8007182:	6801      	ldr	r1, [r0, #0]
 8007184:	4a17      	ldr	r2, [pc, #92]	; (80071e4 <HAL_CAN_MspInit+0x64>)
{
 8007186:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007188:	2300      	movs	r3, #0
  if(hcan->Instance==CAN1)
 800718a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800718c:	9304      	str	r3, [sp, #16]
 800718e:	9303      	str	r3, [sp, #12]
 8007190:	9305      	str	r3, [sp, #20]
 8007192:	9306      	str	r3, [sp, #24]
 8007194:	9307      	str	r3, [sp, #28]
  if(hcan->Instance==CAN1)
 8007196:	d001      	beq.n	800719c <HAL_CAN_MspInit+0x1c>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8007198:	b009      	add	sp, #36	; 0x24
 800719a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 800719c:	f502 32ea 	add.w	r2, r2, #119808	; 0x1d400
 80071a0:	9301      	str	r3, [sp, #4]
 80071a2:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80071a4:	4810      	ldr	r0, [pc, #64]	; (80071e8 <HAL_CAN_MspInit+0x68>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80071a6:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80071aa:	6411      	str	r1, [r2, #64]	; 0x40
 80071ac:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80071ae:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
 80071b2:	9101      	str	r1, [sp, #4]
 80071b4:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80071b6:	9302      	str	r3, [sp, #8]
 80071b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80071ba:	f043 0308 	orr.w	r3, r3, #8
 80071be:	6313      	str	r3, [r2, #48]	; 0x30
 80071c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80071c2:	f003 0308 	and.w	r3, r3, #8
 80071c6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80071c8:	2209      	movs	r2, #9
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80071ca:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80071cc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071ce:	2402      	movs	r4, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80071d0:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80071d2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071d4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071d6:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80071d8:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80071da:	f7fa fb59 	bl	8001890 <HAL_GPIO_Init>
}
 80071de:	b009      	add	sp, #36	; 0x24
 80071e0:	bd30      	pop	{r4, r5, pc}
 80071e2:	bf00      	nop
 80071e4:	40006400 	.word	0x40006400
 80071e8:	40020c00 	.word	0x40020c00

080071ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80071ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 80071ee:	6802      	ldr	r2, [r0, #0]
 80071f0:	4b1c      	ldr	r3, [pc, #112]	; (8007264 <HAL_I2C_MspInit+0x78>)
{
 80071f2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071f4:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 80071f6:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071f8:	9404      	str	r4, [sp, #16]
 80071fa:	9403      	str	r4, [sp, #12]
 80071fc:	9405      	str	r4, [sp, #20]
 80071fe:	9406      	str	r4, [sp, #24]
 8007200:	9407      	str	r4, [sp, #28]
  if(hi2c->Instance==I2C1)
 8007202:	d001      	beq.n	8007208 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007204:	b009      	add	sp, #36	; 0x24
 8007206:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007208:	4d17      	ldr	r5, [pc, #92]	; (8007268 <HAL_I2C_MspInit+0x7c>)
 800720a:	9401      	str	r4, [sp, #4]
 800720c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800720e:	4817      	ldr	r0, [pc, #92]	; (800726c <HAL_I2C_MspInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007210:	f043 0302 	orr.w	r3, r3, #2
 8007214:	632b      	str	r3, [r5, #48]	; 0x30
 8007216:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8007218:	f003 0302 	and.w	r3, r3, #2
 800721c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800721e:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007220:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007222:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007224:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007226:	2712      	movs	r7, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007228:	2304      	movs	r3, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800722a:	2601      	movs	r6, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800722c:	f8dd e004 	ldr.w	lr, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007230:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007232:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007234:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007236:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007238:	f7fa fb2a 	bl	8001890 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800723c:	9402      	str	r4, [sp, #8]
 800723e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8007240:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007244:	642b      	str	r3, [r5, #64]	; 0x40
 8007246:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8007248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800724c:	4622      	mov	r2, r4
    __HAL_RCC_I2C1_CLK_ENABLE();
 800724e:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8007250:	2105      	movs	r1, #5
 8007252:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007254:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8007256:	f7fa fac1 	bl	80017dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800725a:	201f      	movs	r0, #31
 800725c:	f7fa faf4 	bl	8001848 <HAL_NVIC_EnableIRQ>
}
 8007260:	b009      	add	sp, #36	; 0x24
 8007262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007264:	40005400 	.word	0x40005400
 8007268:	40023800 	.word	0x40023800
 800726c:	40020400 	.word	0x40020400

08007270 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007270:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8007272:	4601      	mov	r1, r0
{
 8007274:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8007276:	2200      	movs	r2, #0
 8007278:	201d      	movs	r0, #29
 800727a:	f7fa faaf 	bl	80017dc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 800727e:	201d      	movs	r0, #29
 8007280:	f7fa fae2 	bl	8001848 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8007284:	2500      	movs	r5, #0
 8007286:	4b15      	ldr	r3, [pc, #84]	; (80072dc <HAL_InitTick+0x6c>)
 8007288:	9502      	str	r5, [sp, #8]
 800728a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800728c:	4c14      	ldr	r4, [pc, #80]	; (80072e0 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM3_CLK_ENABLE();
 800728e:	f042 0202 	orr.w	r2, r2, #2
 8007292:	641a      	str	r2, [r3, #64]	; 0x40
 8007294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007296:	f003 0302 	and.w	r3, r3, #2
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800729a:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM3_CLK_ENABLE();
 800729c:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800729e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM3_CLK_ENABLE();
 80072a0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80072a2:	f7fc ff01 	bl	80040a8 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80072a6:	f7fc feef 	bl	8004088 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80072aa:	4a0e      	ldr	r2, [pc, #56]	; (80072e4 <HAL_InitTick+0x74>)
  htim3.Instance = TIM3;
 80072ac:	490e      	ldr	r1, [pc, #56]	; (80072e8 <HAL_InitTick+0x78>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
  htim3.Init.Prescaler = uwPrescalerValue;
  htim3.Init.ClockDivision = 0;
 80072ae:	6125      	str	r5, [r4, #16]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80072b0:	0043      	lsls	r3, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80072b2:	fba2 2303 	umull	r2, r3, r2, r3
 80072b6:	0c9b      	lsrs	r3, r3, #18
 80072b8:	3b01      	subs	r3, #1
  htim3.Init.Period = (1000000 / 1000) - 1;
 80072ba:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80072be:	4620      	mov	r0, r4
  htim3.Instance = TIM3;
 80072c0:	e884 002a 	stmia.w	r4, {r1, r3, r5}
  htim3.Init.Period = (1000000 / 1000) - 1;
 80072c4:	60e2      	str	r2, [r4, #12]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80072c6:	f7fc ff13 	bl	80040f0 <HAL_TIM_Base_Init>
 80072ca:	b110      	cbz	r0, 80072d2 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
  }
  
  /* Return function status */
  return HAL_ERROR;
 80072cc:	2001      	movs	r0, #1
}
 80072ce:	b009      	add	sp, #36	; 0x24
 80072d0:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim3);
 80072d2:	4620      	mov	r0, r4
 80072d4:	f7fc ffae 	bl	8004234 <HAL_TIM_Base_Start_IT>
}
 80072d8:	b009      	add	sp, #36	; 0x24
 80072da:	bd30      	pop	{r4, r5, pc}
 80072dc:	40023800 	.word	0x40023800
 80072e0:	20004ae8 	.word	0x20004ae8
 80072e4:	431bde83 	.word	0x431bde83
 80072e8:	40000400 	.word	0x40000400

080072ec <NMI_Handler>:
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop

080072f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80072f0:	e7fe      	b.n	80072f0 <HardFault_Handler>
 80072f2:	bf00      	nop

080072f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80072f4:	e7fe      	b.n	80072f4 <MemManage_Handler>
 80072f6:	bf00      	nop

080072f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80072f8:	e7fe      	b.n	80072f8 <BusFault_Handler>
 80072fa:	bf00      	nop

080072fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80072fc:	e7fe      	b.n	80072fc <UsageFault_Handler>
 80072fe:	bf00      	nop

08007300 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop

08007304 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007304:	4801      	ldr	r0, [pc, #4]	; (800730c <TIM3_IRQHandler+0x8>)
 8007306:	f7fc bfad 	b.w	8004264 <HAL_TIM_IRQHandler>
 800730a:	bf00      	nop
 800730c:	20004ae8 	.word	0x20004ae8

08007310 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8007310:	4801      	ldr	r0, [pc, #4]	; (8007318 <I2C1_EV_IRQHandler+0x8>)
 8007312:	f7fb b987 	b.w	8002624 <HAL_I2C_EV_IRQHandler>
 8007316:	bf00      	nop
 8007318:	200047ec 	.word	0x200047ec

0800731c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800731c:	4801      	ldr	r0, [pc, #4]	; (8007324 <OTG_FS_IRQHandler+0x8>)
 800731e:	f7fb bf4b 	b.w	80031b8 <HAL_PCD_IRQHandler>
 8007322:	bf00      	nop
 8007324:	200055c4 	.word	0x200055c4

08007328 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8007328:	2001      	movs	r0, #1
 800732a:	4770      	bx	lr

0800732c <_kill>:

int _kill(int pid, int sig)
{
 800732c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800732e:	f002 fcfb 	bl	8009d28 <__errno>
 8007332:	2316      	movs	r3, #22
 8007334:	6003      	str	r3, [r0, #0]
	return -1;
}
 8007336:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800733a:	bd08      	pop	{r3, pc}

0800733c <_exit>:

void _exit (int status)
{
 800733c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800733e:	f002 fcf3 	bl	8009d28 <__errno>
 8007342:	2316      	movs	r3, #22
 8007344:	6003      	str	r3, [r0, #0]
 8007346:	e7fe      	b.n	8007346 <_exit+0xa>

08007348 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007348:	4a0a      	ldr	r2, [pc, #40]	; (8007374 <_sbrk+0x2c>)
{
 800734a:	b508      	push	{r3, lr}
	if (heap_end == 0)
 800734c:	6813      	ldr	r3, [r2, #0]
 800734e:	b173      	cbz	r3, 800736e <_sbrk+0x26>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8007350:	4418      	add	r0, r3
 8007352:	4669      	mov	r1, sp
 8007354:	4288      	cmp	r0, r1
 8007356:	d802      	bhi.n	800735e <_sbrk+0x16>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8007358:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800735a:	4618      	mov	r0, r3
 800735c:	bd08      	pop	{r3, pc}
		errno = ENOMEM;
 800735e:	f002 fce3 	bl	8009d28 <__errno>
 8007362:	230c      	movs	r3, #12
 8007364:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8007366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800736a:	4618      	mov	r0, r3
 800736c:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800736e:	4b02      	ldr	r3, [pc, #8]	; (8007378 <_sbrk+0x30>)
 8007370:	6013      	str	r3, [r2, #0]
 8007372:	e7ed      	b.n	8007350 <_sbrk+0x8>
 8007374:	200047a0 	.word	0x200047a0
 8007378:	20005bd0 	.word	0x20005bd0

0800737c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800737c:	4b05      	ldr	r3, [pc, #20]	; (8007394 <SystemInit+0x18>)
 800737e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007382:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007386:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800738a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800738e:	6099      	str	r1, [r3, #8]
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	e000ed00 	.word	0xe000ed00

08007398 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007398:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800739a:	2200      	movs	r2, #0
 800739c:	4910      	ldr	r1, [pc, #64]	; (80073e0 <MX_USB_DEVICE_Init+0x48>)
 800739e:	4811      	ldr	r0, [pc, #68]	; (80073e4 <MX_USB_DEVICE_Init+0x4c>)
 80073a0:	f7fd ff1c 	bl	80051dc <USBD_Init>
 80073a4:	b9c0      	cbnz	r0, 80073d8 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80073a6:	4910      	ldr	r1, [pc, #64]	; (80073e8 <MX_USB_DEVICE_Init+0x50>)
 80073a8:	480e      	ldr	r0, [pc, #56]	; (80073e4 <MX_USB_DEVICE_Init+0x4c>)
 80073aa:	f7fd ff2d 	bl	8005208 <USBD_RegisterClass>
 80073ae:	b980      	cbnz	r0, 80073d2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80073b0:	490e      	ldr	r1, [pc, #56]	; (80073ec <MX_USB_DEVICE_Init+0x54>)
 80073b2:	480c      	ldr	r0, [pc, #48]	; (80073e4 <MX_USB_DEVICE_Init+0x4c>)
 80073b4:	f7fd feca 	bl	800514c <USBD_CDC_RegisterInterface>
 80073b8:	b940      	cbnz	r0, 80073cc <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80073ba:	480a      	ldr	r0, [pc, #40]	; (80073e4 <MX_USB_DEVICE_Init+0x4c>)
 80073bc:	f7fd ff2c 	bl	8005218 <USBD_Start>
 80073c0:	b900      	cbnz	r0, 80073c4 <MX_USB_DEVICE_Init+0x2c>
 80073c2:	bd08      	pop	{r3, pc}
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80073c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80073c8:	f7ff bc6e 	b.w	8006ca8 <Error_Handler>
    Error_Handler();
 80073cc:	f7ff fc6c 	bl	8006ca8 <Error_Handler>
 80073d0:	e7f3      	b.n	80073ba <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 80073d2:	f7ff fc69 	bl	8006ca8 <Error_Handler>
 80073d6:	e7eb      	b.n	80073b0 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 80073d8:	f7ff fc66 	bl	8006ca8 <Error_Handler>
 80073dc:	e7e3      	b.n	80073a6 <MX_USB_DEVICE_Init+0xe>
 80073de:	bf00      	nop
 80073e0:	20000130 	.word	0x20000130
 80073e4:	20004b28 	.word	0x20004b28
 80073e8:	20000008 	.word	0x20000008
 80073ec:	20000120 	.word	0x20000120

080073f0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80073f0:	2000      	movs	r0, #0
 80073f2:	4770      	bx	lr

080073f4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80073f4:	2000      	movs	r0, #0
 80073f6:	4770      	bx	lr

080073f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80073f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073fa:	b083      	sub	sp, #12
  /* USER CODE BEGIN 6 */


  volatile uint32_t counter = 0;
 80073fc:	2300      	movs	r3, #0
{
 80073fe:	4605      	mov	r5, r0
 8007400:	460f      	mov	r7, r1
  volatile uint32_t counter = 0;
 8007402:	9301      	str	r3, [sp, #4]

  while(counter < *Len)
  {
       RxBuffer[RxFifoIndex ] = Buf[counter];
 8007404:	4e12      	ldr	r6, [pc, #72]	; (8007450 <CDC_Receive_FS+0x58>)
 8007406:	4c13      	ldr	r4, [pc, #76]	; (8007454 <CDC_Receive_FS+0x5c>)
  while(counter < *Len)
 8007408:	e014      	b.n	8007434 <CDC_Receive_FS+0x3c>
       RxBuffer[RxFifoIndex ] = Buf[counter];
 800740a:	9a01      	ldr	r2, [sp, #4]
 800740c:	6823      	ldr	r3, [r4, #0]
 800740e:	5caa      	ldrb	r2, [r5, r2]
 8007410:	54f2      	strb	r2, [r6, r3]
       cdc_receive_put(Buf[counter]);
 8007412:	9b01      	ldr	r3, [sp, #4]
 8007414:	5ce8      	ldrb	r0, [r5, r3]
 8007416:	f000 ff8b 	bl	8008330 <cdc_receive_put>
       counter++, RxFifoIndex++;
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	9a01      	ldr	r2, [sp, #4]
 800741e:	3301      	adds	r3, #1
       if(RxFifoIndex  == RxBufferSize)
 8007420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
       counter++, RxFifoIndex++;
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	f102 0201 	add.w	r2, r2, #1
            RxFifoIndex  = 0;
 800742a:	bf08      	it	eq
 800742c:	2300      	moveq	r3, #0
       counter++, RxFifoIndex++;
 800742e:	9201      	str	r2, [sp, #4]
            RxFifoIndex  = 0;
 8007430:	bf08      	it	eq
 8007432:	6023      	streq	r3, [r4, #0]
  while(counter < *Len)
 8007434:	9b01      	ldr	r3, [sp, #4]
 8007436:	683a      	ldr	r2, [r7, #0]
 8007438:	429a      	cmp	r2, r3
 800743a:	d8e6      	bhi.n	800740a <CDC_Receive_FS+0x12>
   }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800743c:	4629      	mov	r1, r5
 800743e:	4806      	ldr	r0, [pc, #24]	; (8007458 <CDC_Receive_FS+0x60>)
 8007440:	f7fd fe94 	bl	800516c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007444:	4804      	ldr	r0, [pc, #16]	; (8007458 <CDC_Receive_FS+0x60>)
 8007446:	f7fd feb1 	bl	80051ac <USBD_CDC_ReceivePacket>

  return (USBD_OK);
  /* USER CODE END 6 */
}
 800744a:	2000      	movs	r0, #0
 800744c:	b003      	add	sp, #12
 800744e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007450:	200051c4 	.word	0x200051c4
 8007454:	200047a4 	.word	0x200047a4
 8007458:	20004b28 	.word	0x20004b28

0800745c <CDC_Init_FS>:
{
 800745c:	b510      	push	{r4, lr}
	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800745e:	4c07      	ldr	r4, [pc, #28]	; (800747c <CDC_Init_FS+0x20>)
 8007460:	4907      	ldr	r1, [pc, #28]	; (8007480 <CDC_Init_FS+0x24>)
 8007462:	2200      	movs	r2, #0
 8007464:	4620      	mov	r0, r4
 8007466:	f7fd fe79 	bl	800515c <USBD_CDC_SetTxBuffer>
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800746a:	4906      	ldr	r1, [pc, #24]	; (8007484 <CDC_Init_FS+0x28>)
 800746c:	4620      	mov	r0, r4
 800746e:	f7fd fe7d 	bl	800516c <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);                                         //This is new to the function, the rest is standard HAL
 8007472:	4620      	mov	r0, r4
 8007474:	f7fd fe9a 	bl	80051ac <USBD_CDC_ReceivePacket>
}
 8007478:	2000      	movs	r0, #0
 800747a:	bd10      	pop	{r4, pc}
 800747c:	20004b28 	.word	0x20004b28
 8007480:	20004fc4 	.word	0x20004fc4
 8007484:	20004dc4 	.word	0x20004dc4

08007488 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007488:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800748a:	4c09      	ldr	r4, [pc, #36]	; (80074b0 <CDC_Transmit_FS+0x28>)
 800748c:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  if (hcdc->TxState != 0){
 8007490:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007494:	b10b      	cbz	r3, 800749a <CDC_Transmit_FS+0x12>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 8007496:	2001      	movs	r0, #1
 8007498:	bd10      	pop	{r4, pc}
 800749a:	460a      	mov	r2, r1
 800749c:	4601      	mov	r1, r0
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800749e:	4620      	mov	r0, r4
 80074a0:	f7fd fe5c 	bl	800515c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80074a4:	4620      	mov	r0, r4
}
 80074a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80074aa:	f7fd be65 	b.w	8005178 <USBD_CDC_TransmitPacket>
 80074ae:	bf00      	nop
 80074b0:	20004b28 	.word	0x20004b28

080074b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80074b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 80074b6:	6803      	ldr	r3, [r0, #0]
{
 80074b8:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074ba:	2400      	movs	r4, #0
  if(pcdHandle->Instance==USB_OTG_FS)
 80074bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074c0:	9404      	str	r4, [sp, #16]
 80074c2:	9403      	str	r4, [sp, #12]
 80074c4:	9405      	str	r4, [sp, #20]
 80074c6:	9406      	str	r4, [sp, #24]
 80074c8:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 80074ca:	d001      	beq.n	80074d0 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80074cc:	b009      	add	sp, #36	; 0x24
 80074ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074d0:	4d18      	ldr	r5, [pc, #96]	; (8007534 <HAL_PCD_MspInit+0x80>)
 80074d2:	9401      	str	r4, [sp, #4]
 80074d4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074d6:	4818      	ldr	r0, [pc, #96]	; (8007538 <HAL_PCD_MspInit+0x84>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074d8:	f043 0301 	orr.w	r3, r3, #1
 80074dc:	632b      	str	r3, [r5, #48]	; 0x30
 80074de:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074e6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074e8:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80074ea:	230a      	movs	r3, #10
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80074ec:	f44f 57c0 	mov.w	r7, #6144	; 0x1800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074f0:	2602      	movs	r6, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074f2:	f8dd e004 	ldr.w	lr, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074f6:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80074f8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80074fa:	9703      	str	r7, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074fc:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074fe:	f7fa f9c7 	bl	8001890 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007502:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8007504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007508:	636b      	str	r3, [r5, #52]	; 0x34
 800750a:	9402      	str	r4, [sp, #8]
 800750c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800750e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007512:	646b      	str	r3, [r5, #68]	; 0x44
 8007514:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800751a:	4622      	mov	r2, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800751c:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800751e:	2105      	movs	r1, #5
 8007520:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007522:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8007524:	f7fa f95a 	bl	80017dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007528:	2043      	movs	r0, #67	; 0x43
 800752a:	f7fa f98d 	bl	8001848 <HAL_NVIC_EnableIRQ>
}
 800752e:	b009      	add	sp, #36	; 0x24
 8007530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007532:	bf00      	nop
 8007534:	40023800 	.word	0x40023800
 8007538:	40020000 	.word	0x40020000

0800753c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800753c:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8007540:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007544:	f7fd be80 	b.w	8005248 <USBD_LL_SetupStage>

08007548 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007548:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800754c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007550:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007554:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007558:	f7fd bea6 	b.w	80052a8 <USBD_LL_DataOutStage>

0800755c <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800755c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8007560:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007564:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007568:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800756a:	f7fd bedd 	b.w	8005328 <USBD_LL_DataInStage>
 800756e:	bf00      	nop

08007570 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007570:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007574:	f7fd bf78 	b.w	8005468 <USBD_LL_SOF>

08007578 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007578:	68c1      	ldr	r1, [r0, #12]
{ 
 800757a:	b510      	push	{r4, lr}
 800757c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800757e:	b121      	cbz	r1, 800758a <HAL_PCD_ResetCallback+0x12>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007580:	2902      	cmp	r1, #2
 8007582:	d00c      	beq.n	800759e <HAL_PCD_ResetCallback+0x26>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 8007584:	f7ff fb90 	bl	8006ca8 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007588:	2101      	movs	r1, #1
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800758a:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 800758e:	f7fd ff55 	bl	800543c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007592:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 8007596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800759a:	f7fd bf27 	b.w	80053ec <USBD_LL_Reset>
    speed = USBD_SPEED_FULL;
 800759e:	2101      	movs	r1, #1
 80075a0:	e7f3      	b.n	800758a <HAL_PCD_ResetCallback+0x12>
 80075a2:	bf00      	nop

080075a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075a4:	b510      	push	{r4, lr}
 80075a6:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80075a8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80075ac:	f7fd ff4a 	bl	8005444 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80075b0:	6822      	ldr	r2, [r4, #0]
 80075b2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80075b6:	f043 0301 	orr.w	r3, r3, #1
 80075ba:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80075be:	6a23      	ldr	r3, [r4, #32]
 80075c0:	b123      	cbz	r3, 80075cc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80075c2:	4a03      	ldr	r2, [pc, #12]	; (80075d0 <HAL_PCD_SuspendCallback+0x2c>)
 80075c4:	6913      	ldr	r3, [r2, #16]
 80075c6:	f043 0306 	orr.w	r3, r3, #6
 80075ca:	6113      	str	r3, [r2, #16]
 80075cc:	bd10      	pop	{r4, pc}
 80075ce:	bf00      	nop
 80075d0:	e000ed00 	.word	0xe000ed00

080075d4 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80075d4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80075d8:	f7fd bf3e 	b.w	8005458 <USBD_LL_Resume>

080075dc <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80075dc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80075e0:	f7fd bf52 	b.w	8005488 <USBD_LL_IsoOUTIncomplete>

080075e4 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80075e4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80075e8:	f7fd bf4c 	b.w	8005484 <USBD_LL_IsoINIncomplete>

080075ec <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80075ec:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80075f0:	f7fd bf4c 	b.w	800548c <USBD_LL_DevConnected>

080075f4 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80075f4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80075f8:	f7fd bf4a 	b.w	8005490 <USBD_LL_DevDisconnected>

080075fc <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80075fc:	7802      	ldrb	r2, [r0, #0]
 80075fe:	b10a      	cbz	r2, 8007604 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8007600:	2000      	movs	r0, #0
 8007602:	4770      	bx	lr
{
 8007604:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_OTG_FS.pData = pdev;
 8007606:	4b15      	ldr	r3, [pc, #84]	; (800765c <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007608:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.pData = pdev;
 800760a:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800760e:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007612:	2404      	movs	r4, #4
  pdev->pData = &hpcd_USB_OTG_FS;
 8007614:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007618:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800761a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800761c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800761e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007620:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007622:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007624:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007626:	601d      	str	r5, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007628:	605c      	str	r4, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800762a:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800762c:	6199      	str	r1, [r3, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800762e:	f7fb fd11 	bl	8003054 <HAL_PCD_Init>
 8007632:	b978      	cbnz	r0, 8007654 <USBD_LL_Init+0x58>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007634:	2180      	movs	r1, #128	; 0x80
 8007636:	4809      	ldr	r0, [pc, #36]	; (800765c <USBD_LL_Init+0x60>)
 8007638:	f7fc fa6c 	bl	8003b14 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800763c:	2240      	movs	r2, #64	; 0x40
 800763e:	2100      	movs	r1, #0
 8007640:	4806      	ldr	r0, [pc, #24]	; (800765c <USBD_LL_Init+0x60>)
 8007642:	f7fc fa43 	bl	8003acc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007646:	2280      	movs	r2, #128	; 0x80
 8007648:	2101      	movs	r1, #1
 800764a:	4804      	ldr	r0, [pc, #16]	; (800765c <USBD_LL_Init+0x60>)
 800764c:	f7fc fa3e 	bl	8003acc <HAL_PCDEx_SetTxFiFo>
}
 8007650:	2000      	movs	r0, #0
 8007652:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 8007654:	f7ff fb28 	bl	8006ca8 <Error_Handler>
 8007658:	e7ec      	b.n	8007634 <USBD_LL_Init+0x38>
 800765a:	bf00      	nop
 800765c:	200055c4 	.word	0x200055c4

08007660 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007660:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007662:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007666:	f7fb fd85 	bl	8003174 <HAL_PCD_Start>
 800766a:	2803      	cmp	r0, #3
 800766c:	bf9a      	itte	ls
 800766e:	4b02      	ldrls	r3, [pc, #8]	; (8007678 <USBD_LL_Start+0x18>)
 8007670:	5c18      	ldrbls	r0, [r3, r0]
 8007672:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
  
  return usb_status;
}
 8007674:	bd08      	pop	{r3, pc}
 8007676:	bf00      	nop
 8007678:	0800a144 	.word	0x0800a144

0800767c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800767c:	b510      	push	{r4, lr}
 800767e:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007680:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007684:	4613      	mov	r3, r2
 8007686:	4622      	mov	r2, r4
 8007688:	f7fc f8f6 	bl	8003878 <HAL_PCD_EP_Open>
 800768c:	2803      	cmp	r0, #3
 800768e:	bf9a      	itte	ls
 8007690:	4b01      	ldrls	r3, [pc, #4]	; (8007698 <USBD_LL_OpenEP+0x1c>)
 8007692:	5c18      	ldrbls	r0, [r3, r0]
 8007694:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8007696:	bd10      	pop	{r4, pc}
 8007698:	0800a144 	.word	0x0800a144

0800769c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800769c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800769e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80076a2:	f7fc f91f 	bl	80038e4 <HAL_PCD_EP_Close>
 80076a6:	2803      	cmp	r0, #3
 80076a8:	bf9a      	itte	ls
 80076aa:	4b02      	ldrls	r3, [pc, #8]	; (80076b4 <USBD_LL_CloseEP+0x18>)
 80076ac:	5c18      	ldrbls	r0, [r3, r0]
 80076ae:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 
  return usb_status;  
}
 80076b0:	bd08      	pop	{r3, pc}
 80076b2:	bf00      	nop
 80076b4:	0800a144 	.word	0x0800a144

080076b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076b8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80076ba:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80076be:	f7fc f993 	bl	80039e8 <HAL_PCD_EP_SetStall>
 80076c2:	2803      	cmp	r0, #3
 80076c4:	bf9a      	itte	ls
 80076c6:	4b02      	ldrls	r3, [pc, #8]	; (80076d0 <USBD_LL_StallEP+0x18>)
 80076c8:	5c18      	ldrbls	r0, [r3, r0]
 80076ca:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 80076cc:	bd08      	pop	{r3, pc}
 80076ce:	bf00      	nop
 80076d0:	0800a144 	.word	0x0800a144

080076d4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076d4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80076d6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80076da:	f7fc f9c3 	bl	8003a64 <HAL_PCD_EP_ClrStall>
 80076de:	2803      	cmp	r0, #3
 80076e0:	bf9a      	itte	ls
 80076e2:	4b02      	ldrls	r3, [pc, #8]	; (80076ec <USBD_LL_ClearStallEP+0x18>)
 80076e4:	5c18      	ldrbls	r0, [r3, r0]
 80076e6:	2002      	movhi	r0, #2
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
  
  return usb_status; 
}
 80076e8:	bd08      	pop	{r3, pc}
 80076ea:	bf00      	nop
 80076ec:	0800a144 	.word	0x0800a144

080076f0 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 80076f0:	060b      	lsls	r3, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80076f2:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
  if((ep_addr & 0x80) == 0x80)
 80076f6:	d406      	bmi.n	8007706 <USBD_LL_IsStallEP+0x16>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80076f8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80076fc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8007700:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 8007704:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007706:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800770a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800770e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007712:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 8007716:	4770      	bx	lr

08007718 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007718:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800771a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800771e:	f7fc f897 	bl	8003850 <HAL_PCD_SetAddress>
 8007722:	2803      	cmp	r0, #3
 8007724:	bf9a      	itte	ls
 8007726:	4b02      	ldrls	r3, [pc, #8]	; (8007730 <USBD_LL_SetUSBAddress+0x18>)
 8007728:	5c18      	ldrbls	r0, [r3, r0]
 800772a:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 800772c:	bd08      	pop	{r3, pc}
 800772e:	bf00      	nop
 8007730:	0800a144 	.word	0x0800a144

08007734 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007734:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007736:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800773a:	f7fc f931 	bl	80039a0 <HAL_PCD_EP_Transmit>
 800773e:	2803      	cmp	r0, #3
 8007740:	bf9a      	itte	ls
 8007742:	4b02      	ldrls	r3, [pc, #8]	; (800774c <USBD_LL_Transmit+0x18>)
 8007744:	5c18      	ldrbls	r0, [r3, r0]
 8007746:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
  
  return usb_status;    
}
 8007748:	bd08      	pop	{r3, pc}
 800774a:	bf00      	nop
 800774c:	0800a144 	.word	0x0800a144

08007750 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007750:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007752:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007756:	f7fc f8f1 	bl	800393c <HAL_PCD_EP_Receive>
 800775a:	2803      	cmp	r0, #3
 800775c:	bf9a      	itte	ls
 800775e:	4b02      	ldrls	r3, [pc, #8]	; (8007768 <USBD_LL_PrepareReceive+0x18>)
 8007760:	5c18      	ldrbls	r0, [r3, r0]
 8007762:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
  
  return usb_status; 
}
 8007764:	bd08      	pop	{r3, pc}
 8007766:	bf00      	nop
 8007768:	0800a144 	.word	0x0800a144

0800776c <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800776c:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007770:	f7fc b90c 	b.w	800398c <HAL_PCD_EP_GetRxCount>

08007774 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007774:	2312      	movs	r3, #18
 8007776:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8007778:	4800      	ldr	r0, [pc, #0]	; (800777c <USBD_FS_DeviceDescriptor+0x8>)
 800777a:	4770      	bx	lr
 800777c:	2000014c 	.word	0x2000014c

08007780 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007780:	2304      	movs	r3, #4
 8007782:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8007784:	4800      	ldr	r0, [pc, #0]	; (8007788 <USBD_FS_LangIDStrDescriptor+0x8>)
 8007786:	4770      	bx	lr
 8007788:	20000160 	.word	0x20000160

0800778c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800778c:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800778e:	4c04      	ldr	r4, [pc, #16]	; (80077a0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8007790:	4804      	ldr	r0, [pc, #16]	; (80077a4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8007792:	460a      	mov	r2, r1
 8007794:	4621      	mov	r1, r4
 8007796:	f7fe f8f1 	bl	800597c <USBD_GetString>
  return USBD_StrDesc;
}
 800779a:	4620      	mov	r0, r4
 800779c:	bd10      	pop	{r4, pc}
 800779e:	bf00      	nop
 80077a0:	200059cc 	.word	0x200059cc
 80077a4:	0800a164 	.word	0x0800a164

080077a8 <USBD_FS_ProductStrDescriptor>:
{
 80077a8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077aa:	4c04      	ldr	r4, [pc, #16]	; (80077bc <USBD_FS_ProductStrDescriptor+0x14>)
 80077ac:	4804      	ldr	r0, [pc, #16]	; (80077c0 <USBD_FS_ProductStrDescriptor+0x18>)
 80077ae:	460a      	mov	r2, r1
 80077b0:	4621      	mov	r1, r4
 80077b2:	f7fe f8e3 	bl	800597c <USBD_GetString>
}
 80077b6:	4620      	mov	r0, r4
 80077b8:	bd10      	pop	{r4, pc}
 80077ba:	bf00      	nop
 80077bc:	200059cc 	.word	0x200059cc
 80077c0:	0800a178 	.word	0x0800a178

080077c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077c4:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077c6:	4c04      	ldr	r4, [pc, #16]	; (80077d8 <USBD_FS_ConfigStrDescriptor+0x14>)
 80077c8:	4804      	ldr	r0, [pc, #16]	; (80077dc <USBD_FS_ConfigStrDescriptor+0x18>)
 80077ca:	460a      	mov	r2, r1
 80077cc:	4621      	mov	r1, r4
 80077ce:	f7fe f8d5 	bl	800597c <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80077d2:	4620      	mov	r0, r4
 80077d4:	bd10      	pop	{r4, pc}
 80077d6:	bf00      	nop
 80077d8:	200059cc 	.word	0x200059cc
 80077dc:	0800a148 	.word	0x0800a148

080077e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077e0:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077e2:	4c04      	ldr	r4, [pc, #16]	; (80077f4 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80077e4:	4804      	ldr	r0, [pc, #16]	; (80077f8 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80077e6:	460a      	mov	r2, r1
 80077e8:	4621      	mov	r1, r4
 80077ea:	f7fe f8c7 	bl	800597c <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80077ee:	4620      	mov	r0, r4
 80077f0:	bd10      	pop	{r4, pc}
 80077f2:	bf00      	nop
 80077f4:	200059cc 	.word	0x200059cc
 80077f8:	0800a154 	.word	0x0800a154

080077fc <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80077fc:	4a40      	ldr	r2, [pc, #256]	; (8007900 <USBD_FS_SerialStrDescriptor+0x104>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80077fe:	4b41      	ldr	r3, [pc, #260]	; (8007904 <USBD_FS_SerialStrDescriptor+0x108>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007800:	6812      	ldr	r2, [r2, #0]

  deviceserial0 += deviceserial2;
 8007802:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 8007804:	201a      	movs	r0, #26

  if (deviceserial0 != 0)
 8007806:	18d2      	adds	r2, r2, r3
  *length = USB_SIZ_STRING_SERIAL;
 8007808:	8008      	strh	r0, [r1, #0]
  if (deviceserial0 != 0)
 800780a:	d101      	bne.n	8007810 <USBD_FS_SerialStrDescriptor+0x14>
}
 800780c:	483e      	ldr	r0, [pc, #248]	; (8007908 <USBD_FS_SerialStrDescriptor+0x10c>)
 800780e:	4770      	bx	lr
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007810:	4b3e      	ldr	r3, [pc, #248]	; (800790c <USBD_FS_SerialStrDescriptor+0x110>)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 8007812:	0f10      	lsrs	r0, r2, #28
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007814:	6819      	ldr	r1, [r3, #0]
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007816:	4b3c      	ldr	r3, [pc, #240]	; (8007908 <USBD_FS_SerialStrDescriptor+0x10c>)
    if (((value >> 28)) < 0xA)
 8007818:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800781a:	bf94      	ite	ls
 800781c:	3030      	addls	r0, #48	; 0x30
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800781e:	3037      	addhi	r0, #55	; 0x37
{
 8007820:	b410      	push	{r4}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007822:	7098      	strb	r0, [r3, #2]
    if (((value >> 28)) < 0xA)
 8007824:	f3c2 6003 	ubfx	r0, r2, #24, #4
 8007828:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800782a:	bf94      	ite	ls
 800782c:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800782e:	3037      	addhi	r0, #55	; 0x37
 8007830:	7118      	strb	r0, [r3, #4]
    if (((value >> 28)) < 0xA)
 8007832:	f3c2 5003 	ubfx	r0, r2, #20, #4
 8007836:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8007838:	bf94      	ite	ls
 800783a:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800783c:	3037      	addhi	r0, #55	; 0x37
 800783e:	7198      	strb	r0, [r3, #6]
    if (((value >> 28)) < 0xA)
 8007840:	f3c2 4003 	ubfx	r0, r2, #16, #4
 8007844:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8007846:	bf94      	ite	ls
 8007848:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800784a:	3037      	addhi	r0, #55	; 0x37
 800784c:	7218      	strb	r0, [r3, #8]
    if (((value >> 28)) < 0xA)
 800784e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8007852:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8007854:	bf94      	ite	ls
 8007856:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007858:	3037      	addhi	r0, #55	; 0x37
 800785a:	7298      	strb	r0, [r3, #10]
    if (((value >> 28)) < 0xA)
 800785c:	f3c2 2003 	ubfx	r0, r2, #8, #4
 8007860:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8007862:	bf94      	ite	ls
 8007864:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007866:	3037      	addhi	r0, #55	; 0x37
 8007868:	7318      	strb	r0, [r3, #12]
    if (((value >> 28)) < 0xA)
 800786a:	f3c2 1003 	ubfx	r0, r2, #4, #4
 800786e:	2809      	cmp	r0, #9
 8007870:	f002 020f 	and.w	r2, r2, #15
      pbuf[2 * idx] = (value >> 28) + '0';
 8007874:	bf94      	ite	ls
 8007876:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007878:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800787a:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800787c:	bf94      	ite	ls
 800787e:	3230      	addls	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007880:	3237      	addhi	r2, #55	; 0x37
 8007882:	741a      	strb	r2, [r3, #16]
    if (((value >> 28)) < 0xA)
 8007884:	0f0a      	lsrs	r2, r1, #28
 8007886:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8007888:	bf94      	ite	ls
 800788a:	3230      	addls	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800788c:	3237      	addhi	r2, #55	; 0x37
 800788e:	749a      	strb	r2, [r3, #18]
    if (((value >> 28)) < 0xA)
 8007890:	f3c1 6203 	ubfx	r2, r1, #24, #4
 8007894:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8007896:	bf94      	ite	ls
 8007898:	3230      	addls	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800789a:	3237      	addhi	r2, #55	; 0x37
 800789c:	751a      	strb	r2, [r3, #20]
    if (((value >> 28)) < 0xA)
 800789e:	f3c1 5203 	ubfx	r2, r1, #20, #4
 80078a2:	2a09      	cmp	r2, #9
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80078a4:	f04f 0400 	mov.w	r4, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 80078a8:	bf94      	ite	ls
 80078aa:	3230      	addls	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80078ac:	3237      	addhi	r2, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 80078ae:	70dc      	strb	r4, [r3, #3]
 80078b0:	2400      	movs	r4, #0
 80078b2:	715c      	strb	r4, [r3, #5]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80078b4:	7398      	strb	r0, [r3, #14]
    pbuf[2 * idx + 1] = 0;
 80078b6:	2400      	movs	r4, #0
 80078b8:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80078ba:	759a      	strb	r2, [r3, #22]
    if (((value >> 28)) < 0xA)
 80078bc:	f3c1 4203 	ubfx	r2, r1, #16, #4
 80078c0:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 80078c2:	71dc      	strb	r4, [r3, #7]
 80078c4:	73d8      	strb	r0, [r3, #15]
 80078c6:	f04f 0400 	mov.w	r4, #0
 80078ca:	f04f 0000 	mov.w	r0, #0
 80078ce:	725c      	strb	r4, [r3, #9]
 80078d0:	7458      	strb	r0, [r3, #17]
 80078d2:	f04f 0400 	mov.w	r4, #0
 80078d6:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 80078da:	bf94      	ite	ls
 80078dc:	3230      	addls	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80078de:	3237      	addhi	r2, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 80078e0:	72dc      	strb	r4, [r3, #11]
 80078e2:	74d8      	strb	r0, [r3, #19]
 80078e4:	2400      	movs	r4, #0
 80078e6:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80078e8:	761a      	strb	r2, [r3, #24]
    pbuf[2 * idx + 1] = 0;
 80078ea:	2100      	movs	r1, #0
 80078ec:	2200      	movs	r2, #0
 80078ee:	7558      	strb	r0, [r3, #21]
 80078f0:	735c      	strb	r4, [r3, #13]
 80078f2:	75d9      	strb	r1, [r3, #23]
 80078f4:	765a      	strb	r2, [r3, #25]
}
 80078f6:	4804      	ldr	r0, [pc, #16]	; (8007908 <USBD_FS_SerialStrDescriptor+0x10c>)
 80078f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	1fff7a10 	.word	0x1fff7a10
 8007904:	1fff7a18 	.word	0x1fff7a18
 8007908:	20000164 	.word	0x20000164
 800790c:	1fff7a14 	.word	0x1fff7a14

08007910 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8007910:	b470      	push	{r4, r5, r6}
  uint32_t nsec_part = nsec % 1000000000UL;
 8007912:	680d      	ldr	r5, [r1, #0]
  uint32_t sec_part = nsec / 1000000000UL;
 8007914:	4b06      	ldr	r3, [pc, #24]	; (8007930 <_ZN3ros16normalizeSecNSecERmS0_+0x20>)
  sec += sec_part;
 8007916:	6804      	ldr	r4, [r0, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8007918:	4e06      	ldr	r6, [pc, #24]	; (8007934 <_ZN3ros16normalizeSecNSecERmS0_+0x24>)
  uint32_t sec_part = nsec / 1000000000UL;
 800791a:	0a6a      	lsrs	r2, r5, #9
 800791c:	fba3 3202 	umull	r3, r2, r3, r2
 8007920:	09d3      	lsrs	r3, r2, #7
  sec += sec_part;
 8007922:	441c      	add	r4, r3
  uint32_t nsec_part = nsec % 1000000000UL;
 8007924:	fb06 5313 	mls	r3, r6, r3, r5
  sec += sec_part;
 8007928:	6004      	str	r4, [r0, #0]
  nsec = nsec_part;
 800792a:	600b      	str	r3, [r1, #0]
}
 800792c:	bc70      	pop	{r4, r5, r6}
 800792e:	4770      	bx	lr
 8007930:	00044b83 	.word	0x00044b83
 8007934:	3b9aca00 	.word	0x3b9aca00

08007938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007970 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800793c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800793e:	e003      	b.n	8007948 <LoopCopyDataInit>

08007940 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007940:	4b0c      	ldr	r3, [pc, #48]	; (8007974 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007942:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007944:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007946:	3104      	adds	r1, #4

08007948 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007948:	480b      	ldr	r0, [pc, #44]	; (8007978 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800794a:	4b0c      	ldr	r3, [pc, #48]	; (800797c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800794c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800794e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007950:	d3f6      	bcc.n	8007940 <CopyDataInit>
  ldr  r2, =_sbss
 8007952:	4a0b      	ldr	r2, [pc, #44]	; (8007980 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007954:	e002      	b.n	800795c <LoopFillZerobss>

08007956 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007956:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007958:	f842 3b04 	str.w	r3, [r2], #4

0800795c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800795c:	4b09      	ldr	r3, [pc, #36]	; (8007984 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800795e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007960:	d3f9      	bcc.n	8007956 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007962:	f7ff fd0b 	bl	800737c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007966:	f002 f9e5 	bl	8009d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800796a:	f7ff f8a1 	bl	8006ab0 <main>
  bx  lr    
 800796e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007970:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007974:	0800a884 	.word	0x0800a884
  ldr  r0, =_sdata
 8007978:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800797c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8007980:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8007984:	20005bd0 	.word	0x20005bd0

08007988 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007988:	e7fe      	b.n	8007988 <ADC_IRQHandler>
	...

0800798c <_ZNK8std_msgs4Time9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800798c:	6843      	ldr	r3, [r0, #4]
 800798e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8007990:	6843      	ldr	r3, [r0, #4]
 8007992:	0a1b      	lsrs	r3, r3, #8
 8007994:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8007996:	88c3      	ldrh	r3, [r0, #6]
 8007998:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800799a:	79c3      	ldrb	r3, [r0, #7]
 800799c:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->data.sec);
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800799e:	6883      	ldr	r3, [r0, #8]
 80079a0:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80079a2:	6883      	ldr	r3, [r0, #8]
 80079a4:	0a1b      	lsrs	r3, r3, #8
 80079a6:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80079a8:	8943      	ldrh	r3, [r0, #10]
 80079aa:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80079ac:	7ac3      	ldrb	r3, [r0, #11]
 80079ae:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->data.nsec);
      return offset;
    }
 80079b0:	2008      	movs	r0, #8
 80079b2:	4770      	bx	lr

080079b4 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80079b4:	780b      	ldrb	r3, [r1, #0]
 80079b6:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80079b8:	784a      	ldrb	r2, [r1, #1]
 80079ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80079be:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80079c0:	788a      	ldrb	r2, [r1, #2]
 80079c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079c6:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80079c8:	78ca      	ldrb	r2, [r1, #3]
 80079ca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80079ce:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->data.sec);
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80079d0:	790b      	ldrb	r3, [r1, #4]
 80079d2:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80079d4:	794a      	ldrb	r2, [r1, #5]
 80079d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80079da:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80079dc:	798a      	ldrb	r2, [r1, #6]
 80079de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079e2:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80079e4:	79ca      	ldrb	r2, [r1, #7]
 80079e6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80079ea:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->data.nsec);
     return offset;
    }
 80079ec:	2008      	movs	r0, #8
 80079ee:	4770      	bx	lr

080079f0 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80079f0:	4800      	ldr	r0, [pc, #0]	; (80079f4 <_ZN8std_msgs4Time7getTypeEv+0x4>)
 80079f2:	4770      	bx	lr
 80079f4:	0800a5e4 	.word	0x0800a5e4

080079f8 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80079f8:	4800      	ldr	r0, [pc, #0]	; (80079fc <_ZN8std_msgs4Time6getMD5Ev+0x4>)
 80079fa:	4770      	bx	lr
 80079fc:	0800a5c0 	.word	0x0800a5c0

08007a00 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8007a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8007a04:	780b      	ldrb	r3, [r1, #0]
 8007a06:	8083      	strh	r3, [r0, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007a08:	784a      	ldrb	r2, [r1, #1]
 8007a0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007a0e:	8083      	strh	r3, [r0, #4]
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
  {
    var = 0;
    for (size_t i = 0; i < sizeof(V); i++)
      var |= (arr[i] << (8 * i));
 8007a10:	790d      	ldrb	r5, [r1, #4]
 8007a12:	78ca      	ldrb	r2, [r1, #3]
 8007a14:	794b      	ldrb	r3, [r1, #5]
 8007a16:	042d      	lsls	r5, r5, #16
    virtual int deserialize(unsigned char *inbuffer)
 8007a18:	4607      	mov	r7, r0
 8007a1a:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8007a1e:	7888      	ldrb	r0, [r1, #2]
 8007a20:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 8007a24:	4305      	orrs	r5, r0
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8007a26:	f105 0806 	add.w	r8, r5, #6
 8007a2a:	f1b8 0f06 	cmp.w	r8, #6
    virtual int deserialize(unsigned char *inbuffer)
 8007a2e:	460e      	mov	r6, r1
 8007a30:	f101 0405 	add.w	r4, r1, #5
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8007a34:	d904      	bls.n	8007a40 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x40>
 8007a36:	462a      	mov	r2, r5
 8007a38:	3106      	adds	r1, #6
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f002 f9b9 	bl	8009db2 <memmove>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_topic_name-1]=0;
 8007a40:	1973      	adds	r3, r6, r5
 8007a42:	2200      	movs	r2, #0
 8007a44:	715a      	strb	r2, [r3, #5]
      this->topic_name = (char *)(inbuffer + offset-1);
 8007a46:	60bc      	str	r4, [r7, #8]
 8007a48:	79dc      	ldrb	r4, [r3, #7]
 8007a4a:	7a1a      	ldrb	r2, [r3, #8]
 8007a4c:	7a5b      	ldrb	r3, [r3, #9]
 8007a4e:	f816 0008 	ldrb.w	r0, [r6, r8]
 8007a52:	0224      	lsls	r4, r4, #8
 8007a54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007a58:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
      offset += length_topic_name;
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
      offset += 4;
 8007a5c:	f108 0804 	add.w	r8, r8, #4
 8007a60:	4304      	orrs	r4, r0
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8007a62:	4444      	add	r4, r8
 8007a64:	45a0      	cmp	r8, r4
 8007a66:	d20f      	bcs.n	8007a88 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x88>
          inbuffer[k-1]=inbuffer[k];
 8007a68:	1b63      	subs	r3, r4, r5
 8007a6a:	3b0a      	subs	r3, #10
 8007a6c:	f105 020b 	add.w	r2, r5, #11
 8007a70:	f105 010a 	add.w	r1, r5, #10
 8007a74:	f105 0009 	add.w	r0, r5, #9
 8007a78:	4294      	cmp	r4, r2
 8007a7a:	bf2c      	ite	cs
 8007a7c:	461a      	movcs	r2, r3
 8007a7e:	2201      	movcc	r2, #1
 8007a80:	4431      	add	r1, r6
 8007a82:	4430      	add	r0, r6
 8007a84:	f002 f995 	bl	8009db2 <memmove>
      }
      inbuffer[offset+length_message_type-1]=0;
 8007a88:	1933      	adds	r3, r6, r4
      this->message_type = (char *)(inbuffer + offset-1);
 8007a8a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007a8e:	eb06 0208 	add.w	r2, r6, r8
      inbuffer[offset+length_message_type-1]=0;
 8007a92:	2100      	movs	r1, #0
 8007a94:	f803 1c01 	strb.w	r1, [r3, #-1]
      this->message_type = (char *)(inbuffer + offset-1);
 8007a98:	60fa      	str	r2, [r7, #12]
 8007a9a:	785d      	ldrb	r5, [r3, #1]
 8007a9c:	789a      	ldrb	r2, [r3, #2]
 8007a9e:	78db      	ldrb	r3, [r3, #3]
 8007aa0:	5d30      	ldrb	r0, [r6, r4]
 8007aa2:	022d      	lsls	r5, r5, #8
 8007aa4:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
 8007aa8:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
      offset += length_message_type;
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
      offset += 4;
 8007aac:	f104 0804 	add.w	r8, r4, #4
 8007ab0:	4305      	orrs	r5, r0
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8007ab2:	4445      	add	r5, r8
 8007ab4:	45a8      	cmp	r8, r5
 8007ab6:	d20c      	bcs.n	8007ad2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xd2>
          inbuffer[k-1]=inbuffer[k];
 8007ab8:	1b2b      	subs	r3, r5, r4
 8007aba:	3b04      	subs	r3, #4
 8007abc:	1d62      	adds	r2, r4, #5
 8007abe:	1ce0      	adds	r0, r4, #3
 8007ac0:	4295      	cmp	r5, r2
 8007ac2:	bf2c      	ite	cs
 8007ac4:	461a      	movcs	r2, r3
 8007ac6:	2201      	movcc	r2, #1
 8007ac8:	4430      	add	r0, r6
 8007aca:	eb06 0108 	add.w	r1, r6, r8
 8007ace:	f002 f970 	bl	8009db2 <memmove>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8007ad2:	1972      	adds	r2, r6, r5
      this->md5sum = (char *)(inbuffer + offset-1);
 8007ad4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007ad8:	eb06 0308 	add.w	r3, r6, r8
      inbuffer[offset+length_md5sum-1]=0;
 8007adc:	2100      	movs	r1, #0
 8007ade:	f802 1c01 	strb.w	r1, [r2, #-1]
      this->md5sum = (char *)(inbuffer + offset-1);
 8007ae2:	613b      	str	r3, [r7, #16]
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007ae4:	7893      	ldrb	r3, [r2, #2]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007ae6:	7850      	ldrb	r0, [r2, #1]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007ae8:	5d71      	ldrb	r1, [r6, r5]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007aea:	78d2      	ldrb	r2, [r2, #3]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007aec:	041b      	lsls	r3, r3, #16
 8007aee:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8007af2:	430b      	orrs	r3, r1
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007af4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      this->buffer_size = u_buffer_size.real;
      offset += sizeof(this->buffer_size);
 8007af8:	1d28      	adds	r0, r5, #4
      this->buffer_size = u_buffer_size.real;
 8007afa:	617b      	str	r3, [r7, #20]
     return offset;
    }
 8007afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007b00 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8007b00:	4800      	ldr	r0, [pc, #0]	; (8007b04 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x4>)
 8007b02:	4770      	bx	lr
 8007b04:	0800a534 	.word	0x0800a534

08007b08 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8007b08:	4800      	ldr	r0, [pc, #0]	; (8007b0c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x4>)
 8007b0a:	4770      	bx	lr
 8007b0c:	0800a510 	.word	0x0800a510

08007b10 <_ZN14rosserial_msgs3Log11deserializeEPh>:
      memcpy(outbuffer + offset, this->msg, length_msg);
      offset += length_msg;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8007b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8007b12:	460b      	mov	r3, r1
    virtual int deserialize(unsigned char *inbuffer)
 8007b14:	460d      	mov	r5, r1
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8007b16:	f813 2b04 	ldrb.w	r2, [r3], #4
 8007b1a:	7102      	strb	r2, [r0, #4]
 8007b1c:	78cc      	ldrb	r4, [r1, #3]
 8007b1e:	786a      	ldrb	r2, [r5, #1]
    virtual int deserialize(unsigned char *inbuffer)
 8007b20:	4606      	mov	r6, r0
 8007b22:	7888      	ldrb	r0, [r1, #2]
 8007b24:	7909      	ldrb	r1, [r1, #4]
 8007b26:	0424      	lsls	r4, r4, #16
 8007b28:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8007b2c:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8007b30:	4314      	orrs	r4, r2
      offset += sizeof(this->level);
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8007b32:	1d67      	adds	r7, r4, #5
 8007b34:	2f05      	cmp	r7, #5
 8007b36:	d905      	bls.n	8007b44 <_ZN14rosserial_msgs3Log11deserializeEPh+0x34>
 8007b38:	4618      	mov	r0, r3
 8007b3a:	4622      	mov	r2, r4
 8007b3c:	1d69      	adds	r1, r5, #5
 8007b3e:	f002 f938 	bl	8009db2 <memmove>
 8007b42:	4603      	mov	r3, r0
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_msg-1]=0;
 8007b44:	442c      	add	r4, r5
 8007b46:	2200      	movs	r2, #0
 8007b48:	7122      	strb	r2, [r4, #4]
      this->msg = (char *)(inbuffer + offset-1);
      offset += length_msg;
     return offset;
    }
 8007b4a:	4638      	mov	r0, r7
      this->msg = (char *)(inbuffer + offset-1);
 8007b4c:	60b3      	str	r3, [r6, #8]
    }
 8007b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007b50 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8007b50:	4800      	ldr	r0, [pc, #0]	; (8007b54 <_ZN14rosserial_msgs3Log7getTypeEv+0x4>)
 8007b52:	4770      	bx	lr
 8007b54:	0800a4fc 	.word	0x0800a4fc

08007b58 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8007b58:	4800      	ldr	r0, [pc, #0]	; (8007b5c <_ZN14rosserial_msgs3Log6getMD5Ev+0x4>)
 8007b5a:	4770      	bx	lr
 8007b5c:	0800a4d8 	.word	0x0800a4d8

08007b60 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }

    const char * getType(){ return REQUESTPARAM; };
 8007b60:	4800      	ldr	r0, [pc, #0]	; (8007b64 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x4>)
 8007b62:	4770      	bx	lr
 8007b64:	0800a0e4 	.word	0x0800a0e4

08007b68 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8007b68:	4800      	ldr	r0, [pc, #0]	; (8007b6c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x4>)
 8007b6a:	4770      	bx	lr
 8007b6c:	0800a4b4 	.word	0x0800a4b4

08007b70 <_ZNK8std_msgs4Byte9serializeEPh>:
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8007b70:	7903      	ldrb	r3, [r0, #4]
 8007b72:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
      return offset;
    }
 8007b74:	2001      	movs	r0, #1
 8007b76:	4770      	bx	lr

08007b78 <_ZN8std_msgs4Byte11deserializeEPh>:
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
      this->data = u_data.real;
 8007b78:	780b      	ldrb	r3, [r1, #0]
 8007b7a:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
 8007b7c:	2001      	movs	r0, #1
 8007b7e:	4770      	bx	lr

08007b80 <_ZN8std_msgs4Byte7getTypeEv>:

    const char * getType(){ return "std_msgs/Byte"; };
 8007b80:	4800      	ldr	r0, [pc, #0]	; (8007b84 <_ZN8std_msgs4Byte7getTypeEv+0x4>)
 8007b82:	4770      	bx	lr
 8007b84:	0800a5b0 	.word	0x0800a5b0

08007b88 <_ZN8std_msgs4Byte6getMD5Ev>:
    const char * getMD5(){ return "ad736a2e8818154c487bb80fe42ce43b"; };
 8007b88:	4800      	ldr	r0, [pc, #0]	; (8007b8c <_ZN8std_msgs4Byte6getMD5Ev+0x4>)
 8007b8a:	4770      	bx	lr
 8007b8c:	0800a58c 	.word	0x0800a58c

08007b90 <_ZN8std_msgs6String11deserializeEPh>:
      memcpy(outbuffer + offset, this->data, length_data);
      offset += length_data;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8007b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b92:	460d      	mov	r5, r1
 8007b94:	788c      	ldrb	r4, [r1, #2]
 8007b96:	7849      	ldrb	r1, [r1, #1]
 8007b98:	78ea      	ldrb	r2, [r5, #3]
 8007b9a:	782b      	ldrb	r3, [r5, #0]
 8007b9c:	0424      	lsls	r4, r4, #16
 8007b9e:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
 8007ba2:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
 8007ba6:	431c      	orrs	r4, r3
    {
      int offset = 0;
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8007ba8:	1d26      	adds	r6, r4, #4
 8007baa:	2e04      	cmp	r6, #4
    virtual int deserialize(unsigned char *inbuffer)
 8007bac:	4607      	mov	r7, r0
 8007bae:	f105 0303 	add.w	r3, r5, #3
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8007bb2:	d905      	bls.n	8007bc0 <_ZN8std_msgs6String11deserializeEPh+0x30>
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	4622      	mov	r2, r4
 8007bb8:	1d29      	adds	r1, r5, #4
 8007bba:	f002 f8fa 	bl	8009db2 <memmove>
 8007bbe:	4603      	mov	r3, r0
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_data-1]=0;
 8007bc0:	442c      	add	r4, r5
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	70e2      	strb	r2, [r4, #3]
      this->data = (char *)(inbuffer + offset-1);
      offset += length_data;
     return offset;
    }
 8007bc6:	4630      	mov	r0, r6
      this->data = (char *)(inbuffer + offset-1);
 8007bc8:	607b      	str	r3, [r7, #4]
    }
 8007bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007bcc <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8007bcc:	4800      	ldr	r0, [pc, #0]	; (8007bd0 <_ZN8std_msgs6String7getTypeEv+0x4>)
 8007bce:	4770      	bx	lr
 8007bd0:	0800a64c 	.word	0x0800a64c

08007bd4 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8007bd4:	4800      	ldr	r0, [pc, #0]	; (8007bd8 <_ZN8std_msgs6String6getMD5Ev+0x4>)
 8007bd6:	4770      	bx	lr
 8007bd8:	0800a628 	.word	0x0800a628

08007bdc <_ZNK8std_msgs5Int329serializeEPh>:
      int offset = 0;
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 8007bdc:	6843      	ldr	r3, [r0, #4]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8007bde:	700b      	strb	r3, [r1, #0]
    virtual int serialize(unsigned char *outbuffer) const
 8007be0:	b410      	push	{r4}
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8007be2:	0c18      	lsrs	r0, r3, #16
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8007be4:	0a1c      	lsrs	r4, r3, #8
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8007be6:	0e1a      	lsrs	r2, r3, #24
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8007be8:	704c      	strb	r4, [r1, #1]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8007bea:	7088      	strb	r0, [r1, #2]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8007bec:	70ca      	strb	r2, [r1, #3]
      offset += sizeof(this->data);
      return offset;
    }
 8007bee:	2004      	movs	r0, #4
 8007bf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop

08007bf8 <_ZN8std_msgs5Int3211deserializeEPh>:
      } u_data;
      u_data.base = 0;
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007bf8:	680b      	ldr	r3, [r1, #0]
      this->data = u_data.real;
 8007bfa:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
 8007bfc:	2004      	movs	r0, #4
 8007bfe:	4770      	bx	lr

08007c00 <_ZN8std_msgs5Int327getTypeEv>:

    const char * getType(){ return "std_msgs/Int32"; };
 8007c00:	4800      	ldr	r0, [pc, #0]	; (8007c04 <_ZN8std_msgs5Int327getTypeEv+0x4>)
 8007c02:	4770      	bx	lr
 8007c04:	0800a618 	.word	0x0800a618

08007c08 <_ZN8std_msgs5Int326getMD5Ev>:
    const char * getMD5(){ return "da5909fbe378aeaf85e547e830cc1bb7"; };
 8007c08:	4800      	ldr	r0, [pc, #0]	; (8007c0c <_ZN8std_msgs5Int326getMD5Ev+0x4>)
 8007c0a:	4770      	bx	lr
 8007c0c:	0800a5f4 	.word	0x0800a5f4

08007c10 <_ZN13geometry_msgs7Vector37getTypeEv>:
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
     return offset;
    }

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8007c10:	4800      	ldr	r0, [pc, #0]	; (8007c14 <_ZN13geometry_msgs7Vector37getTypeEv+0x4>)
 8007c12:	4770      	bx	lr
 8007c14:	0800a49c 	.word	0x0800a49c

08007c18 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8007c18:	4800      	ldr	r0, [pc, #0]	; (8007c1c <_ZN13geometry_msgs7Vector36getMD5Ev+0x4>)
 8007c1a:	4770      	bx	lr
 8007c1c:	0800a478 	.word	0x0800a478

08007c20 <messageSide>:
static nbt_t accel_nbt;
static nbt_t ros_nbt;

extern "C" void messageSide(const std_msgs::Byte& msg)
{
	sideData = msg.data;
 8007c20:	4b01      	ldr	r3, [pc, #4]	; (8007c28 <messageSide+0x8>)
 8007c22:	7902      	ldrb	r2, [r0, #4]
 8007c24:	701a      	strb	r2, [r3, #0]
 8007c26:	4770      	bx	lr
 8007c28:	20004856 	.word	0x20004856

08007c2c <messageSpeed>:
}

extern "C" void messageSpeed(const std_msgs::Byte& msg)
{
	speedData = msg.data;
 8007c2c:	4b01      	ldr	r3, [pc, #4]	; (8007c34 <messageSpeed+0x8>)
 8007c2e:	7902      	ldrb	r2, [r0, #4]
 8007c30:	701a      	strb	r2, [r3, #0]
 8007c32:	4770      	bx	lr
 8007c34:	20004850 	.word	0x20004850

08007c38 <_ZN3ros10SubscriberIN8std_msgs4ByteEvE8callbackEPh>:
      this->data = u_data.real;
 8007c38:	780b      	ldrb	r3, [r1, #0]
 8007c3a:	7403      	strb	r3, [r0, #16]
  };

  virtual void callback(unsigned char* data)
  {
    msg.deserialize(data);
    this->cb_(msg);
 8007c3c:	6943      	ldr	r3, [r0, #20]
 8007c3e:	300c      	adds	r0, #12
 8007c40:	4718      	bx	r3
 8007c42:	bf00      	nop

08007c44 <_ZN3ros10SubscriberIN8std_msgs4ByteEvE15getEndpointTypeEv>:
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
  {
    return endpoint_;
  }
 8007c44:	6980      	ldr	r0, [r0, #24]
 8007c46:	4770      	bx	lr

08007c48 <_ZN3ros10SubscriberIN8std_msgs4ByteEvE10getMsgTypeEv>:
  }
 8007c48:	4800      	ldr	r0, [pc, #0]	; (8007c4c <_ZN3ros10SubscriberIN8std_msgs4ByteEvE10getMsgTypeEv+0x4>)
 8007c4a:	4770      	bx	lr
 8007c4c:	0800a5b0 	.word	0x0800a5b0

08007c50 <_ZN3ros10SubscriberIN8std_msgs4ByteEvE9getMsgMD5Ev>:
  }
 8007c50:	4800      	ldr	r0, [pc, #0]	; (8007c54 <_ZN3ros10SubscriberIN8std_msgs4ByteEvE9getMsgMD5Ev+0x4>)
 8007c52:	4770      	bx	lr
 8007c54:	0800a58c 	.word	0x0800a58c

08007c58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:

  /* Are we connected to the PC? */
  virtual bool connected()
  {
    return configured_;
  };
 8007c58:	f890 04f4 	ldrb.w	r0, [r0, #1268]	; 0x4f4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop

08007c60 <_ZNK8std_msgs6String9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 8007c60:	b570      	push	{r4, r5, r6, lr}
 8007c62:	4606      	mov	r6, r0
      uint32_t length_data = strlen(this->data);
 8007c64:	6840      	ldr	r0, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const
 8007c66:	460d      	mov	r5, r1
      uint32_t length_data = strlen(this->data);
 8007c68:	f7f8 fabc 	bl	80001e4 <strlen>
      arr[i] = (var >> (8 * i));
 8007c6c:	0e03      	lsrs	r3, r0, #24
 8007c6e:	0a01      	lsrs	r1, r0, #8
 8007c70:	0c02      	lsrs	r2, r0, #16
 8007c72:	4604      	mov	r4, r0
 8007c74:	7028      	strb	r0, [r5, #0]
 8007c76:	70aa      	strb	r2, [r5, #2]
 8007c78:	7069      	strb	r1, [r5, #1]
 8007c7a:	70eb      	strb	r3, [r5, #3]
      memcpy(outbuffer + offset, this->data, length_data);
 8007c7c:	6871      	ldr	r1, [r6, #4]
 8007c7e:	1d28      	adds	r0, r5, #4
 8007c80:	4622      	mov	r2, r4
 8007c82:	f002 f88b 	bl	8009d9c <memcpy>
    }
 8007c86:	1d20      	adds	r0, r4, #4
 8007c88:	bd70      	pop	{r4, r5, r6, pc}
 8007c8a:	bf00      	nop

08007c8c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8007c8c:	6843      	ldr	r3, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const
 8007c8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8007c92:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8007c94:	6843      	ldr	r3, [r0, #4]
 8007c96:	0a1b      	lsrs	r3, r3, #8
 8007c98:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8007c9a:	88c3      	ldrh	r3, [r0, #6]
 8007c9c:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8007c9e:	79c3      	ldrb	r3, [r0, #7]
 8007ca0:	70cb      	strb	r3, [r1, #3]
      for( uint32_t i = 0; i < ints_length; i++){
 8007ca2:	6843      	ldr	r3, [r0, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f000 8084 	beq.w	8007db2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x126>
 8007caa:	460a      	mov	r2, r1
 8007cac:	2500      	movs	r5, #0
 8007cae:	2604      	movs	r6, #4
      u_intsi.real = this->ints[i];
 8007cb0:	68c3      	ldr	r3, [r0, #12]
 8007cb2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8007cb6:	7113      	strb	r3, [r2, #4]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8007cb8:	0c1c      	lsrs	r4, r3, #16
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8007cba:	0a1f      	lsrs	r7, r3, #8
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8007cbc:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8007cbe:	7194      	strb	r4, [r2, #6]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8007cc0:	7157      	strb	r7, [r2, #5]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8007cc2:	71d3      	strb	r3, [r2, #7]
      for( uint32_t i = 0; i < ints_length; i++){
 8007cc4:	6843      	ldr	r3, [r0, #4]
 8007cc6:	3501      	adds	r5, #1
 8007cc8:	42ab      	cmp	r3, r5
 8007cca:	4634      	mov	r4, r6
 8007ccc:	f102 0204 	add.w	r2, r2, #4
 8007cd0:	f106 0604 	add.w	r6, r6, #4
 8007cd4:	d8ec      	bhi.n	8007cb0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x24>
 8007cd6:	f104 0708 	add.w	r7, r4, #8
 8007cda:	f104 0a05 	add.w	sl, r4, #5
 8007cde:	f104 0906 	add.w	r9, r4, #6
 8007ce2:	f104 0807 	add.w	r8, r4, #7
 8007ce6:	f104 0c09 	add.w	ip, r4, #9
 8007cea:	f104 0e0a 	add.w	lr, r4, #10
 8007cee:	f104 050b 	add.w	r5, r4, #11
 8007cf2:	463a      	mov	r2, r7
 8007cf4:	340c      	adds	r4, #12
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8007cf6:	6903      	ldr	r3, [r0, #16]
 8007cf8:	558b      	strb	r3, [r1, r6]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8007cfa:	6903      	ldr	r3, [r0, #16]
 8007cfc:	0a1b      	lsrs	r3, r3, #8
 8007cfe:	f801 300a 	strb.w	r3, [r1, sl]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8007d02:	8a43      	ldrh	r3, [r0, #18]
 8007d04:	f801 3009 	strb.w	r3, [r1, r9]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8007d08:	7cc3      	ldrb	r3, [r0, #19]
 8007d0a:	f801 3008 	strb.w	r3, [r1, r8]
      for( uint32_t i = 0; i < floats_length; i++){
 8007d0e:	6903      	ldr	r3, [r0, #16]
 8007d10:	b1f3      	cbz	r3, 8007d50 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xc4>
 8007d12:	2500      	movs	r5, #0
      u_floatsi.real = this->floats[i];
 8007d14:	6983      	ldr	r3, [r0, #24]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8007d16:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007d1a:	2200      	movs	r2, #0
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8007d1c:	0a1c      	lsrs	r4, r3, #8
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8007d1e:	f363 0207 	bfi	r2, r3, #0, #8
 8007d22:	f364 220f 	bfi	r2, r4, #8, #8
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8007d26:	0c1c      	lsrs	r4, r3, #16
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8007d28:	f364 4217 	bfi	r2, r4, #16, #8
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8007d2c:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8007d2e:	f363 621f 	bfi	r2, r3, #24, #8
 8007d32:	51ca      	str	r2, [r1, r7]
      for( uint32_t i = 0; i < floats_length; i++){
 8007d34:	6903      	ldr	r3, [r0, #16]
 8007d36:	3501      	adds	r5, #1
 8007d38:	42ab      	cmp	r3, r5
 8007d3a:	463c      	mov	r4, r7
 8007d3c:	f107 0704 	add.w	r7, r7, #4
 8007d40:	d8e8      	bhi.n	8007d14 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x88>
 8007d42:	f104 0c05 	add.w	ip, r4, #5
 8007d46:	f104 0e06 	add.w	lr, r4, #6
 8007d4a:	1de5      	adds	r5, r4, #7
 8007d4c:	463a      	mov	r2, r7
 8007d4e:	3408      	adds	r4, #8
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8007d50:	69c3      	ldr	r3, [r0, #28]
 8007d52:	548b      	strb	r3, [r1, r2]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8007d54:	69c3      	ldr	r3, [r0, #28]
 8007d56:	0a1b      	lsrs	r3, r3, #8
 8007d58:	f801 300c 	strb.w	r3, [r1, ip]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8007d5c:	8bc3      	ldrh	r3, [r0, #30]
 8007d5e:	f801 300e 	strb.w	r3, [r1, lr]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8007d62:	7fc3      	ldrb	r3, [r0, #31]
 8007d64:	554b      	strb	r3, [r1, r5]
      for( uint32_t i = 0; i < strings_length; i++){
 8007d66:	69c3      	ldr	r3, [r0, #28]
 8007d68:	b303      	cbz	r3, 8007dac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x120>
 8007d6a:	4688      	mov	r8, r1
 8007d6c:	4607      	mov	r7, r0
 8007d6e:	2600      	movs	r6, #0
      uint32_t length_stringsi = strlen(this->strings[i]);
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d72:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007d76:	f7f8 fa35 	bl	80001e4 <strlen>
 8007d7a:	eb08 0304 	add.w	r3, r8, r4
 8007d7e:	4605      	mov	r5, r0
 8007d80:	f808 0004 	strb.w	r0, [r8, r4]
 8007d84:	0c29      	lsrs	r1, r5, #16
 8007d86:	0a00      	lsrs	r0, r0, #8
 8007d88:	0e2a      	lsrs	r2, r5, #24
 8007d8a:	7058      	strb	r0, [r3, #1]
 8007d8c:	70da      	strb	r2, [r3, #3]
 8007d8e:	7099      	strb	r1, [r3, #2]
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8007d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      offset += 4;
 8007d92:	3404      	adds	r4, #4
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8007d94:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8007d98:	eb08 0004 	add.w	r0, r8, r4
 8007d9c:	462a      	mov	r2, r5
 8007d9e:	f001 fffd 	bl	8009d9c <memcpy>
      for( uint32_t i = 0; i < strings_length; i++){
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	3601      	adds	r6, #1
 8007da6:	42b3      	cmp	r3, r6
      offset += length_stringsi;
 8007da8:	442c      	add	r4, r5
      for( uint32_t i = 0; i < strings_length; i++){
 8007daa:	d8e1      	bhi.n	8007d70 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xe4>
    }
 8007dac:	4620      	mov	r0, r4
 8007dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      for( uint32_t i = 0; i < ints_length; i++){
 8007db2:	2208      	movs	r2, #8
 8007db4:	4617      	mov	r7, r2
 8007db6:	240c      	movs	r4, #12
 8007db8:	250b      	movs	r5, #11
 8007dba:	f04f 0e0a 	mov.w	lr, #10
 8007dbe:	f04f 0c09 	mov.w	ip, #9
 8007dc2:	f04f 0807 	mov.w	r8, #7
 8007dc6:	f04f 0906 	mov.w	r9, #6
 8007dca:	f04f 0a05 	mov.w	sl, #5
 8007dce:	2604      	movs	r6, #4
 8007dd0:	e791      	b.n	8007cf6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x6a>
 8007dd2:	bf00      	nop

08007dd4 <_ZNK14rosserial_msgs3Log9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 8007dd4:	b570      	push	{r4, r5, r6, lr}
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8007dd6:	7903      	ldrb	r3, [r0, #4]
 8007dd8:	700b      	strb	r3, [r1, #0]
    virtual int serialize(unsigned char *outbuffer) const
 8007dda:	4606      	mov	r6, r0
      uint32_t length_msg = strlen(this->msg);
 8007ddc:	6880      	ldr	r0, [r0, #8]
    virtual int serialize(unsigned char *outbuffer) const
 8007dde:	460d      	mov	r5, r1
      uint32_t length_msg = strlen(this->msg);
 8007de0:	f7f8 fa00 	bl	80001e4 <strlen>
 8007de4:	2300      	movs	r3, #0
 8007de6:	0a02      	lsrs	r2, r0, #8
 8007de8:	f360 0307 	bfi	r3, r0, #0, #8
 8007dec:	f362 230f 	bfi	r3, r2, #8, #8
 8007df0:	0c02      	lsrs	r2, r0, #16
 8007df2:	f362 4317 	bfi	r3, r2, #16, #8
 8007df6:	0e02      	lsrs	r2, r0, #24
 8007df8:	f362 631f 	bfi	r3, r2, #24, #8
 8007dfc:	4604      	mov	r4, r0
 8007dfe:	f8c5 3001 	str.w	r3, [r5, #1]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8007e02:	68b1      	ldr	r1, [r6, #8]
 8007e04:	1d68      	adds	r0, r5, #5
 8007e06:	4622      	mov	r2, r4
 8007e08:	f001 ffc8 	bl	8009d9c <memcpy>
    }
 8007e0c:	1d60      	adds	r0, r4, #5
 8007e0e:	bd70      	pop	{r4, r5, r6, pc}

08007e10 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8007e10:	8883      	ldrh	r3, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const
 8007e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8007e16:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8007e18:	8883      	ldrh	r3, [r0, #4]
 8007e1a:	0a1b      	lsrs	r3, r3, #8
 8007e1c:	704b      	strb	r3, [r1, #1]
    virtual int serialize(unsigned char *outbuffer) const
 8007e1e:	4607      	mov	r7, r0
      uint32_t length_topic_name = strlen(this->topic_name);
 8007e20:	6880      	ldr	r0, [r0, #8]
    virtual int serialize(unsigned char *outbuffer) const
 8007e22:	460c      	mov	r4, r1
      uint32_t length_topic_name = strlen(this->topic_name);
 8007e24:	f7f8 f9de 	bl	80001e4 <strlen>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	0a02      	lsrs	r2, r0, #8
 8007e2c:	f360 0307 	bfi	r3, r0, #0, #8
 8007e30:	f362 230f 	bfi	r3, r2, #8, #8
 8007e34:	0c02      	lsrs	r2, r0, #16
 8007e36:	f362 4317 	bfi	r3, r2, #16, #8
 8007e3a:	0e02      	lsrs	r2, r0, #24
 8007e3c:	f362 631f 	bfi	r3, r2, #24, #8
 8007e40:	f8c4 3002 	str.w	r3, [r4, #2]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8007e44:	68b9      	ldr	r1, [r7, #8]
 8007e46:	4602      	mov	r2, r0
      uint32_t length_topic_name = strlen(this->topic_name);
 8007e48:	4680      	mov	r8, r0
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8007e4a:	1da0      	adds	r0, r4, #6
 8007e4c:	f001 ffa6 	bl	8009d9c <memcpy>
      uint32_t length_message_type = strlen(this->message_type);
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f7f8 f9c7 	bl	80001e4 <strlen>
 8007e56:	2300      	movs	r3, #0
 8007e58:	0a02      	lsrs	r2, r0, #8
 8007e5a:	f360 0307 	bfi	r3, r0, #0, #8
 8007e5e:	f362 230f 	bfi	r3, r2, #8, #8
 8007e62:	0c02      	lsrs	r2, r0, #16
 8007e64:	0e01      	lsrs	r1, r0, #24
 8007e66:	f362 4317 	bfi	r3, r2, #16, #8
      offset += length_topic_name;
 8007e6a:	f108 0206 	add.w	r2, r8, #6
 8007e6e:	f361 631f 	bfi	r3, r1, #24, #8
 8007e72:	50a3      	str	r3, [r4, r2]
      uint32_t length_message_type = strlen(this->message_type);
 8007e74:	4605      	mov	r5, r0
      offset += 4;
 8007e76:	f108 080a 	add.w	r8, r8, #10
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8007e7a:	68f9      	ldr	r1, [r7, #12]
 8007e7c:	462a      	mov	r2, r5
 8007e7e:	eb04 0008 	add.w	r0, r4, r8
 8007e82:	f001 ff8b 	bl	8009d9c <memcpy>
      uint32_t length_md5sum = strlen(this->md5sum);
 8007e86:	6938      	ldr	r0, [r7, #16]
 8007e88:	f7f8 f9ac 	bl	80001e4 <strlen>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	0a02      	lsrs	r2, r0, #8
 8007e90:	f360 0307 	bfi	r3, r0, #0, #8
 8007e94:	f362 230f 	bfi	r3, r2, #8, #8
 8007e98:	0c02      	lsrs	r2, r0, #16
      offset += length_message_type;
 8007e9a:	4445      	add	r5, r8
 8007e9c:	f362 4317 	bfi	r3, r2, #16, #8
 8007ea0:	0e02      	lsrs	r2, r0, #24
 8007ea2:	f362 631f 	bfi	r3, r2, #24, #8
 8007ea6:	5163      	str	r3, [r4, r5]
      uint32_t length_md5sum = strlen(this->md5sum);
 8007ea8:	4606      	mov	r6, r0
      offset += 4;
 8007eaa:	3504      	adds	r5, #4
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8007eac:	6939      	ldr	r1, [r7, #16]
 8007eae:	1960      	adds	r0, r4, r5
 8007eb0:	4632      	mov	r2, r6
      offset += length_md5sum;
 8007eb2:	4435      	add	r5, r6
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8007eb4:	f001 ff72 	bl	8009d9c <memcpy>
      u_buffer_size.real = this->buffer_size;
 8007eb8:	697b      	ldr	r3, [r7, #20]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8007eba:	5563      	strb	r3, [r4, r5]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8007ebc:	442c      	add	r4, r5
 8007ebe:	0a19      	lsrs	r1, r3, #8
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8007ec0:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8007ec2:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8007ec4:	7061      	strb	r1, [r4, #1]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8007ec6:	70a2      	strb	r2, [r4, #2]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8007ec8:	70e3      	strb	r3, [r4, #3]
    }
 8007eca:	1d28      	adds	r0, r5, #4
 8007ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007ed0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
 8007ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if(ints_lengthT > ints_length)
 8007ed4:	6843      	ldr	r3, [r0, #4]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8007ed6:	680c      	ldr	r4, [r1, #0]
      if(ints_lengthT > ints_length)
 8007ed8:	429c      	cmp	r4, r3
    virtual int deserialize(unsigned char *inbuffer)
 8007eda:	b083      	sub	sp, #12
 8007edc:	4605      	mov	r5, r0
 8007ede:	460e      	mov	r6, r1
      if(ints_lengthT > ints_length)
 8007ee0:	f200 80b4 	bhi.w	800804c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x17c>
      ints_length = ints_lengthT;
 8007ee4:	606c      	str	r4, [r5, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8007ee6:	2c00      	cmp	r4, #0
 8007ee8:	f000 80b9 	beq.w	800805e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x18e>
 8007eec:	4631      	mov	r1, r6
 8007eee:	2000      	movs	r0, #0
 8007ef0:	2704      	movs	r7, #4
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007ef2:	798b      	ldrb	r3, [r1, #6]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007ef4:	f891 c005 	ldrb.w	ip, [r1, #5]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007ef8:	f891 e004 	ldrb.w	lr, [r1, #4]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007efc:	79cc      	ldrb	r4, [r1, #7]
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8007efe:	68ea      	ldr	r2, [r5, #12]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007f00:	041b      	lsls	r3, r3, #16
 8007f02:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8007f06:	ea43 030e 	orr.w	r3, r3, lr
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007f0a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
      this->st_ints = u_st_ints.real;
 8007f0e:	60ab      	str	r3, [r5, #8]
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8007f10:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
      for( uint32_t i = 0; i < ints_length; i++){
 8007f14:	686b      	ldr	r3, [r5, #4]
 8007f16:	3001      	adds	r0, #1
 8007f18:	4283      	cmp	r3, r0
 8007f1a:	46bb      	mov	fp, r7
 8007f1c:	f101 0104 	add.w	r1, r1, #4
 8007f20:	f107 0704 	add.w	r7, r7, #4
 8007f24:	d8e5      	bhi.n	8007ef2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x22>
 8007f26:	f10b 0408 	add.w	r4, fp, #8
 8007f2a:	4639      	mov	r1, r7
 8007f2c:	f10b 0005 	add.w	r0, fp, #5
 8007f30:	f10b 0306 	add.w	r3, fp, #6
 8007f34:	f10b 0207 	add.w	r2, fp, #7
 8007f38:	f10b 0a09 	add.w	sl, fp, #9
 8007f3c:	f10b 070a 	add.w	r7, fp, #10
 8007f40:	f10b 090b 	add.w	r9, fp, #11
 8007f44:	46a0      	mov	r8, r4
 8007f46:	f10b 0b0c 	add.w	fp, fp, #12
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8007f4a:	5cf3      	ldrb	r3, [r6, r3]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8007f4c:	f816 e000 	ldrb.w	lr, [r6, r0]
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8007f50:	5c70      	ldrb	r0, [r6, r1]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8007f52:	5cb1      	ldrb	r1, [r6, r2]
      if(floats_lengthT > floats_length)
 8007f54:	692a      	ldr	r2, [r5, #16]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8007f56:	041b      	lsls	r3, r3, #16
 8007f58:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 8007f5c:	4303      	orrs	r3, r0
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8007f5e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      if(floats_lengthT > floats_length)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	f200 8090 	bhi.w	8008088 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1b8>
      floats_length = floats_lengthT;
 8007f68:	612b      	str	r3, [r5, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8007f6a:	b323      	cbz	r3, 8007fb6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xe6>
 8007f6c:	1931      	adds	r1, r6, r4
 8007f6e:	2000      	movs	r0, #0
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007f70:	788b      	ldrb	r3, [r1, #2]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007f72:	f891 c001 	ldrb.w	ip, [r1, #1]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007f76:	f891 e000 	ldrb.w	lr, [r1]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007f7a:	78cf      	ldrb	r7, [r1, #3]
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8007f7c:	69aa      	ldr	r2, [r5, #24]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007f7e:	041b      	lsls	r3, r3, #16
 8007f80:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8007f84:	ea43 030e 	orr.w	r3, r3, lr
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007f88:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
      this->st_floats = u_st_floats.real;
 8007f8c:	616b      	str	r3, [r5, #20]
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8007f8e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
      for( uint32_t i = 0; i < floats_length; i++){
 8007f92:	692b      	ldr	r3, [r5, #16]
 8007f94:	3001      	adds	r0, #1
 8007f96:	4283      	cmp	r3, r0
 8007f98:	46a3      	mov	fp, r4
 8007f9a:	f101 0104 	add.w	r1, r1, #4
 8007f9e:	f104 0404 	add.w	r4, r4, #4
 8007fa2:	d8e5      	bhi.n	8007f70 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xa0>
 8007fa4:	f10b 0a05 	add.w	sl, fp, #5
 8007fa8:	f10b 0706 	add.w	r7, fp, #6
 8007fac:	f10b 0907 	add.w	r9, fp, #7
 8007fb0:	46a0      	mov	r8, r4
 8007fb2:	f10b 0b08 	add.w	fp, fp, #8
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8007fb6:	5df4      	ldrb	r4, [r6, r7]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8007fb8:	f816 000a 	ldrb.w	r0, [r6, sl]
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8007fbc:	f816 1008 	ldrb.w	r1, [r6, r8]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8007fc0:	f816 2009 	ldrb.w	r2, [r6, r9]
      if(strings_lengthT > strings_length)
 8007fc4:	69eb      	ldr	r3, [r5, #28]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8007fc6:	0424      	lsls	r4, r4, #16
 8007fc8:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8007fcc:	430c      	orrs	r4, r1
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8007fce:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
      if(strings_lengthT > strings_length)
 8007fd2:	429c      	cmp	r4, r3
 8007fd4:	d852      	bhi.n	800807c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1ac>
      strings_length = strings_lengthT;
 8007fd6:	61ec      	str	r4, [r5, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8007fd8:	b3a4      	cbz	r4, 8008044 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x174>
 8007fda:	f04f 0a00 	mov.w	sl, #0
      inbuffer[offset+length_st_strings-1]=0;
 8007fde:	46d1      	mov	r9, sl
          inbuffer[k-1]=inbuffer[k];
 8007fe0:	f06f 0803 	mvn.w	r8, #3
      var |= (arr[i] << (8 * i));
 8007fe4:	eb06 030b 	add.w	r3, r6, fp
 8007fe8:	f10b 0003 	add.w	r0, fp, #3
 8007fec:	789c      	ldrb	r4, [r3, #2]
 8007fee:	7859      	ldrb	r1, [r3, #1]
 8007ff0:	f816 200b 	ldrb.w	r2, [r6, fp]
 8007ff4:	5c33      	ldrb	r3, [r6, r0]
 8007ff6:	0424      	lsls	r4, r4, #16
 8007ff8:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
 8007ffc:	4314      	orrs	r4, r2
      offset += 4;
 8007ffe:	f10b 0704 	add.w	r7, fp, #4
 8008002:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8008006:	443c      	add	r4, r7
          inbuffer[k-1]=inbuffer[k];
 8008008:	eba8 020b 	sub.w	r2, r8, fp
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800800c:	42a7      	cmp	r7, r4
          inbuffer[k-1]=inbuffer[k];
 800800e:	4422      	add	r2, r4
 8008010:	f10b 0b05 	add.w	fp, fp, #5
 8008014:	4430      	add	r0, r6
 8008016:	eb06 0107 	add.w	r1, r6, r7
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800801a:	d204      	bcs.n	8008026 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x156>
 800801c:	45a3      	cmp	fp, r4
 800801e:	bf88      	it	hi
 8008020:	2201      	movhi	r2, #1
 8008022:	f001 fec6 	bl	8009db2 <memmove>
      inbuffer[offset+length_st_strings-1]=0;
 8008026:	1933      	adds	r3, r6, r4
      this->st_strings = (char *)(inbuffer + offset-1);
 8008028:	3f01      	subs	r7, #1
      inbuffer[offset+length_st_strings-1]=0;
 800802a:	f803 9c01 	strb.w	r9, [r3, #-1]
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800802e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      this->st_strings = (char *)(inbuffer + offset-1);
 8008030:	4437      	add	r7, r6
 8008032:	622f      	str	r7, [r5, #32]
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8008034:	f843 702a 	str.w	r7, [r3, sl, lsl #2]
      for( uint32_t i = 0; i < strings_length; i++){
 8008038:	69eb      	ldr	r3, [r5, #28]
 800803a:	f10a 0a01 	add.w	sl, sl, #1
 800803e:	4553      	cmp	r3, sl
      offset += length_st_strings;
 8008040:	46a3      	mov	fp, r4
      for( uint32_t i = 0; i < strings_length; i++){
 8008042:	d8cf      	bhi.n	8007fe4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x114>
    }
 8008044:	4658      	mov	r0, fp
 8008046:	b003      	add	sp, #12
 8008048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800804c:	00a1      	lsls	r1, r4, #2
 800804e:	68c0      	ldr	r0, [r0, #12]
 8008050:	f001 ff7e 	bl	8009f50 <realloc>
      ints_length = ints_lengthT;
 8008054:	606c      	str	r4, [r5, #4]
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8008056:	60e8      	str	r0, [r5, #12]
      for( uint32_t i = 0; i < ints_length; i++){
 8008058:	2c00      	cmp	r4, #0
 800805a:	f47f af47 	bne.w	8007eec <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1c>
 800805e:	f04f 0808 	mov.w	r8, #8
 8008062:	4644      	mov	r4, r8
 8008064:	f04f 0b0c 	mov.w	fp, #12
 8008068:	f04f 090b 	mov.w	r9, #11
 800806c:	270a      	movs	r7, #10
 800806e:	f04f 0a09 	mov.w	sl, #9
 8008072:	2207      	movs	r2, #7
 8008074:	2306      	movs	r3, #6
 8008076:	2005      	movs	r0, #5
 8008078:	2104      	movs	r1, #4
 800807a:	e766      	b.n	8007f4a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7a>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800807c:	00a1      	lsls	r1, r4, #2
 800807e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008080:	f001 ff66 	bl	8009f50 <realloc>
 8008084:	6268      	str	r0, [r5, #36]	; 0x24
 8008086:	e7a6      	b.n	8007fd6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x106>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8008088:	0099      	lsls	r1, r3, #2
 800808a:	69a8      	ldr	r0, [r5, #24]
 800808c:	9301      	str	r3, [sp, #4]
 800808e:	f001 ff5f 	bl	8009f50 <realloc>
 8008092:	9b01      	ldr	r3, [sp, #4]
 8008094:	61a8      	str	r0, [r5, #24]
 8008096:	e767      	b.n	8007f68 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x98>

08008098 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
      }
    }
    configured_ = true;
  }

  virtual int publish(int id, const Msg * msg)
 8008098:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    if (id >= 100 && !configured_)
 800809a:	2963      	cmp	r1, #99	; 0x63
  virtual int publish(int id, const Msg * msg)
 800809c:	b085      	sub	sp, #20
    if (id >= 100 && !configured_)
 800809e:	dd03      	ble.n	80080a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10>
 80080a0:	f890 44f4 	ldrb.w	r4, [r0, #1268]	; 0x4f4
 80080a4:	2c00      	cmp	r4, #0
 80080a6:	d03a      	beq.n	800811e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x86>
      return 0;

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80080a8:	6813      	ldr	r3, [r2, #0]
 80080aa:	4605      	mov	r5, r0
 80080ac:	460c      	mov	r4, r1
 80080ae:	4610      	mov	r0, r2
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f205 211f 	addw	r1, r5, #543	; 0x21f
 80080b6:	4798      	blx	r3

    /* setup the header */
    message_out[0] = 0xff;
    message_out[1] = PROTOCOL_VER;
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80080b8:	b2c6      	uxtb	r6, r0
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80080ba:	f3c0 2107 	ubfx	r1, r0, #8, #8
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80080be:	1872      	adds	r2, r6, r1
 80080c0:	43d2      	mvns	r2, r2
    message_out[5] = (uint8_t)((int16_t)id & 255);
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80080c2:	f344 2707 	sbfx	r7, r4, #8, #8
    message_out[0] = 0xff;
 80080c6:	23ff      	movs	r3, #255	; 0xff
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80080c8:	f885 421d 	strb.w	r4, [r5, #541]	; 0x21d
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80080cc:	f885 221c 	strb.w	r2, [r5, #540]	; 0x21c
    message_out[1] = PROTOCOL_VER;
 80080d0:	24fe      	movs	r4, #254	; 0xfe

    /* calculate checksum */
    int chk = 0;
    for (int i = 5; i < l + 7; i++)
 80080d2:	1c42      	adds	r2, r0, #1
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80080d4:	f885 721e 	strb.w	r7, [r5, #542]	; 0x21e
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80080d8:	f885 621a 	strb.w	r6, [r5, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80080dc:	f885 121b 	strb.w	r1, [r5, #539]	; 0x21b
    message_out[0] = 0xff;
 80080e0:	f885 3218 	strb.w	r3, [r5, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 80080e4:	f885 4219 	strb.w	r4, [r5, #537]	; 0x219
    for (int i = 5; i < l + 7; i++)
 80080e8:	db0c      	blt.n	8008104 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x6c>
 80080ea:	f200 241e 	addw	r4, r0, #542	; 0x21e
 80080ee:	442c      	add	r4, r5
 80080f0:	f505 7307 	add.w	r3, r5, #540	; 0x21c
 80080f4:	2200      	movs	r2, #0
      chk += message_out[i];
 80080f6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 80080fa:	42a3      	cmp	r3, r4
      chk += message_out[i];
 80080fc:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
 80080fe:	d1fa      	bne.n	80080f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x5e>
 8008100:	43d3      	mvns	r3, r2
 8008102:	b2db      	uxtb	r3, r3
    l += 7;
    message_out[l++] = 255 - (chk % 256);
 8008104:	182a      	adds	r2, r5, r0
 8008106:	f100 0408 	add.w	r4, r0, #8

    if (l <= OUTPUT_SIZE)
 800810a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    message_out[l++] = 255 - (chk % 256);
 800810e:	f882 321f 	strb.w	r3, [r2, #543]	; 0x21f
    if (l <= OUTPUT_SIZE)
 8008112:	dc07      	bgt.n	8008124 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x8c>


	// Send a byte of data to ROS connection
	void write(uint8_t* data, int length)
	{
		CDC_Transmit_FS(data, length);
 8008114:	f505 7006 	add.w	r0, r5, #536	; 0x218
 8008118:	b2a1      	uxth	r1, r4
 800811a:	f7ff f9b5 	bl	8007488 <CDC_Transmit_FS>
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
      return -1;
    }
  }
 800811e:	4620      	mov	r0, r4
 8008120:	b005      	add	sp, #20
 8008122:	bdf0      	pop	{r4, r5, r6, r7, pc}

private:
  void log(char byte, const char * msg)
  {
    rosserial_msgs::Log l;
    l.level = byte;
 8008124:	2203      	movs	r2, #3
    l.msg = (char*)msg;
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8008126:	682b      	ldr	r3, [r5, #0]
    l.level = byte;
 8008128:	f88d 2008 	strb.w	r2, [sp, #8]
      msg("")
 800812c:	4905      	ldr	r1, [pc, #20]	; (8008144 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xac>)
    l.msg = (char*)msg;
 800812e:	4a06      	ldr	r2, [pc, #24]	; (8008148 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xb0>)
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	9101      	str	r1, [sp, #4]
    l.msg = (char*)msg;
 8008134:	9203      	str	r2, [sp, #12]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8008136:	4628      	mov	r0, r5
 8008138:	aa01      	add	r2, sp, #4
 800813a:	2107      	movs	r1, #7
 800813c:	4798      	blx	r3
 800813e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008142:	e7ec      	b.n	800811e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x86>
 8008144:	0800a3c4 	.word	0x0800a3c4
 8008148:	0800a550 	.word	0x0800a550

0800814c <_ZN13geometry_msgs7Vector311deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
 800814c:	78cb      	ldrb	r3, [r1, #3]
 800814e:	095b      	lsrs	r3, r3, #5
 8008150:	b430      	push	{r4, r5}
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 8008152:	6043      	str	r3, [r0, #4]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 8008154:	790a      	ldrb	r2, [r1, #4]
 8008156:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800815a:	6043      	str	r3, [r0, #4]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 800815c:	794a      	ldrb	r2, [r1, #5]
 800815e:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 8008162:	6043      	str	r3, [r0, #4]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 8008164:	798a      	ldrb	r2, [r1, #6]
 8008166:	04d2      	lsls	r2, r2, #19
 8008168:	f402 02f0 	and.w	r2, r2, #7864320	; 0x780000
 800816c:	4313      	orrs	r3, r2
 800816e:	6043      	str	r3, [r0, #4]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8008170:	79ca      	ldrb	r2, [r1, #7]
 8008172:	798d      	ldrb	r5, [r1, #6]
 8008174:	0114      	lsls	r4, r2, #4
 8008176:	f404 64fe 	and.w	r4, r4, #2032	; 0x7f0
    if (exp != 0)
 800817a:	ea54 1415 	orrs.w	r4, r4, r5, lsr #4
 800817e:	d005      	beq.n	800818c <_ZN13geometry_msgs7Vector311deserializeEPh+0x40>
      *val |= ((exp) - 1023 + 127) << 23;
 8008180:	f5a4 7460 	sub.w	r4, r4, #896	; 0x380
 8008184:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
 8008188:	6043      	str	r3, [r0, #4]
 800818a:	79ca      	ldrb	r2, [r1, #7]
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 800818c:	0612      	lsls	r2, r2, #24
 800818e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008192:	4313      	orrs	r3, r2
 8008194:	6043      	str	r3, [r0, #4]
 8008196:	7acb      	ldrb	r3, [r1, #11]
 8008198:	095b      	lsrs	r3, r3, #5
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 800819a:	6083      	str	r3, [r0, #8]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 800819c:	7b0a      	ldrb	r2, [r1, #12]
 800819e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80081a2:	6083      	str	r3, [r0, #8]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 80081a4:	7b4a      	ldrb	r2, [r1, #13]
 80081a6:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80081aa:	6083      	str	r3, [r0, #8]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 80081ac:	7b8a      	ldrb	r2, [r1, #14]
 80081ae:	04d2      	lsls	r2, r2, #19
 80081b0:	f402 02f0 	and.w	r2, r2, #7864320	; 0x780000
 80081b4:	4313      	orrs	r3, r2
 80081b6:	6083      	str	r3, [r0, #8]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 80081b8:	7bca      	ldrb	r2, [r1, #15]
 80081ba:	7b8d      	ldrb	r5, [r1, #14]
 80081bc:	0114      	lsls	r4, r2, #4
 80081be:	f404 64fe 	and.w	r4, r4, #2032	; 0x7f0
    if (exp != 0)
 80081c2:	ea54 1415 	orrs.w	r4, r4, r5, lsr #4
 80081c6:	d005      	beq.n	80081d4 <_ZN13geometry_msgs7Vector311deserializeEPh+0x88>
      *val |= ((exp) - 1023 + 127) << 23;
 80081c8:	f5a4 7460 	sub.w	r4, r4, #896	; 0x380
 80081cc:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
 80081d0:	6083      	str	r3, [r0, #8]
 80081d2:	7bca      	ldrb	r2, [r1, #15]
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 80081d4:	0612      	lsls	r2, r2, #24
 80081d6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80081da:	4313      	orrs	r3, r2
 80081dc:	6083      	str	r3, [r0, #8]
 80081de:	7ccb      	ldrb	r3, [r1, #19]
 80081e0:	095b      	lsrs	r3, r3, #5
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 80081e2:	60c3      	str	r3, [r0, #12]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 80081e4:	7d0a      	ldrb	r2, [r1, #20]
 80081e6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80081ea:	60c3      	str	r3, [r0, #12]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 80081ec:	7d4a      	ldrb	r2, [r1, #21]
 80081ee:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80081f2:	60c3      	str	r3, [r0, #12]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 80081f4:	7d8a      	ldrb	r2, [r1, #22]
 80081f6:	04d2      	lsls	r2, r2, #19
 80081f8:	f402 02f0 	and.w	r2, r2, #7864320	; 0x780000
 80081fc:	4313      	orrs	r3, r2
 80081fe:	60c3      	str	r3, [r0, #12]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8008200:	7dca      	ldrb	r2, [r1, #23]
 8008202:	7d8d      	ldrb	r5, [r1, #22]
 8008204:	0114      	lsls	r4, r2, #4
 8008206:	f404 64fe 	and.w	r4, r4, #2032	; 0x7f0
    if (exp != 0)
 800820a:	ea54 1415 	orrs.w	r4, r4, r5, lsr #4
 800820e:	d005      	beq.n	800821c <_ZN13geometry_msgs7Vector311deserializeEPh+0xd0>
      *val |= ((exp) - 1023 + 127) << 23;
 8008210:	f5a4 7460 	sub.w	r4, r4, #896	; 0x380
 8008214:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
 8008218:	60c3      	str	r3, [r0, #12]
 800821a:	7dca      	ldrb	r2, [r1, #23]
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 800821c:	0612      	lsls	r2, r2, #24
 800821e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008222:	4313      	orrs	r3, r2
 8008224:	60c3      	str	r3, [r0, #12]
    }
 8008226:	bc30      	pop	{r4, r5}
 8008228:	2018      	movs	r0, #24
 800822a:	4770      	bx	lr

0800822c <_ZNK13geometry_msgs7Vector39serializeEPh>:
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 800822c:	edd0 7a01 	vldr	s15, [r0, #4]
    int32_t exp = ((*val >> 23) & 255);
 8008230:	ee17 3a90 	vmov	r3, s15
 8008234:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    virtual int serialize(unsigned char *outbuffer) const
 8008238:	b4f0      	push	{r4, r5, r6, r7}
    if (exp != 0)
 800823a:	2a00      	cmp	r2, #0
 800823c:	d071      	beq.n	8008322 <_ZNK13geometry_msgs7Vector39serializeEPh+0xf6>
      exp += 1023 - 127;
 800823e:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8008242:	0114      	lsls	r4, r2, #4
 8008244:	b264      	sxtb	r4, r4
 8008246:	f3c2 1207 	ubfx	r2, r2, #4, #8
    if (f < 0)
 800824a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800824e:	f3c3 45c3 	ubfx	r5, r3, #19, #4
    if (f < 0)
 8008252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008256:	ea44 0405 	orr.w	r4, r4, r5
    *(outbuffer++) = (sig << 5) & 0xff;
 800825a:	ea4f 1743 	mov.w	r7, r3, lsl #5
    *(outbuffer++) = 0;
 800825e:	f04f 0500 	mov.w	r5, #0
    *(outbuffer++) = (sig >> 3) & 0xff;
 8008262:	ea4f 06e3 	mov.w	r6, r3, asr #3
      *(outbuffer - 1) |= 0x80;
 8008266:	bf48      	it	mi
 8008268:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = (sig >> 11) & 0xff;
 800826c:	12db      	asrs	r3, r3, #11
 800826e:	714b      	strb	r3, [r1, #5]
      *(outbuffer - 1) |= 0x80;
 8008270:	71ca      	strb	r2, [r1, #7]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008272:	718c      	strb	r4, [r1, #6]
    *(outbuffer++) = 0;
 8008274:	700d      	strb	r5, [r1, #0]
    *(outbuffer++) = 0;
 8008276:	704d      	strb	r5, [r1, #1]
    *(outbuffer++) = 0;
 8008278:	708d      	strb	r5, [r1, #2]
    *(outbuffer++) = (sig << 5) & 0xff;
 800827a:	70cf      	strb	r7, [r1, #3]
    *(outbuffer++) = (sig >> 3) & 0xff;
 800827c:	710e      	strb	r6, [r1, #4]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 800827e:	edd0 7a02 	vldr	s15, [r0, #8]
    int32_t exp = ((*val >> 23) & 255);
 8008282:	ee17 3a90 	vmov	r3, s15
 8008286:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    if (exp != 0)
 800828a:	2a00      	cmp	r2, #0
 800828c:	d04d      	beq.n	800832a <_ZNK13geometry_msgs7Vector39serializeEPh+0xfe>
      exp += 1023 - 127;
 800828e:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8008292:	0114      	lsls	r4, r2, #4
 8008294:	b264      	sxtb	r4, r4
 8008296:	f3c2 1207 	ubfx	r2, r2, #4, #8
    if (f < 0)
 800829a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800829e:	f3c3 45c3 	ubfx	r5, r3, #19, #4
    if (f < 0)
 80082a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 80082a6:	ea44 0405 	orr.w	r4, r4, r5
    *(outbuffer++) = (sig << 5) & 0xff;
 80082aa:	ea4f 1743 	mov.w	r7, r3, lsl #5
    *(outbuffer++) = 0;
 80082ae:	f04f 0500 	mov.w	r5, #0
    *(outbuffer++) = (sig >> 3) & 0xff;
 80082b2:	ea4f 06e3 	mov.w	r6, r3, asr #3
      *(outbuffer - 1) |= 0x80;
 80082b6:	bf48      	it	mi
 80082b8:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = (sig >> 11) & 0xff;
 80082bc:	12db      	asrs	r3, r3, #11
 80082be:	734b      	strb	r3, [r1, #13]
      *(outbuffer - 1) |= 0x80;
 80082c0:	73ca      	strb	r2, [r1, #15]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 80082c2:	738c      	strb	r4, [r1, #14]
    *(outbuffer++) = 0;
 80082c4:	720d      	strb	r5, [r1, #8]
    *(outbuffer++) = 0;
 80082c6:	724d      	strb	r5, [r1, #9]
    *(outbuffer++) = 0;
 80082c8:	728d      	strb	r5, [r1, #10]
    *(outbuffer++) = (sig << 5) & 0xff;
 80082ca:	72cf      	strb	r7, [r1, #11]
    *(outbuffer++) = (sig >> 3) & 0xff;
 80082cc:	730e      	strb	r6, [r1, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 80082ce:	edd0 7a03 	vldr	s15, [r0, #12]
    int32_t exp = ((*val >> 23) & 255);
 80082d2:	ee17 3a90 	vmov	r3, s15
 80082d6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    if (exp != 0)
 80082da:	b322      	cbz	r2, 8008326 <_ZNK13geometry_msgs7Vector39serializeEPh+0xfa>
      exp += 1023 - 127;
 80082dc:	f502 7260 	add.w	r2, r2, #896	; 0x380
 80082e0:	0110      	lsls	r0, r2, #4
 80082e2:	b240      	sxtb	r0, r0
 80082e4:	f3c2 1207 	ubfx	r2, r2, #4, #8
    if (f < 0)
 80082e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 80082ec:	f3c3 44c3 	ubfx	r4, r3, #19, #4
    if (f < 0)
 80082f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 80082f4:	ea40 0004 	orr.w	r0, r0, r4
    *(outbuffer++) = (sig << 5) & 0xff;
 80082f8:	ea4f 1643 	mov.w	r6, r3, lsl #5
    *(outbuffer++) = 0;
 80082fc:	f04f 0400 	mov.w	r4, #0
    *(outbuffer++) = (sig >> 3) & 0xff;
 8008300:	ea4f 05e3 	mov.w	r5, r3, asr #3
      *(outbuffer - 1) |= 0x80;
 8008304:	bf48      	it	mi
 8008306:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = (sig >> 11) & 0xff;
 800830a:	12db      	asrs	r3, r3, #11
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800830c:	7588      	strb	r0, [r1, #22]
    *(outbuffer++) = 0;
 800830e:	740c      	strb	r4, [r1, #16]
    *(outbuffer++) = 0;
 8008310:	744c      	strb	r4, [r1, #17]
    *(outbuffer++) = 0;
 8008312:	748c      	strb	r4, [r1, #18]
    *(outbuffer++) = (sig << 5) & 0xff;
 8008314:	74ce      	strb	r6, [r1, #19]
    *(outbuffer++) = (sig >> 3) & 0xff;
 8008316:	750d      	strb	r5, [r1, #20]
    }
 8008318:	2018      	movs	r0, #24
    *(outbuffer++) = (sig >> 11) & 0xff;
 800831a:	754b      	strb	r3, [r1, #21]
      *(outbuffer - 1) |= 0x80;
 800831c:	75ca      	strb	r2, [r1, #23]
 800831e:	bcf0      	pop	{r4, r5, r6, r7}
 8008320:	4770      	bx	lr
    if (exp != 0)
 8008322:	4614      	mov	r4, r2
 8008324:	e791      	b.n	800824a <_ZNK13geometry_msgs7Vector39serializeEPh+0x1e>
 8008326:	4610      	mov	r0, r2
 8008328:	e7de      	b.n	80082e8 <_ZNK13geometry_msgs7Vector39serializeEPh+0xbc>
 800832a:	4614      	mov	r4, r2
 800832c:	e7b5      	b.n	800829a <_ZNK13geometry_msgs7Vector39serializeEPh+0x6e>
 800832e:	bf00      	nop

08008330 <cdc_receive_put>:
}

extern "C" void cdc_receive_put(uint8_t value)
{
	ringbuffer_putchar(&rb, value);
 8008330:	4601      	mov	r1, r0
 8008332:	4801      	ldr	r0, [pc, #4]	; (8008338 <cdc_receive_put+0x8>)
 8008334:	f001 bb4c 	b.w	80099d0 <_Z18ringbuffer_putcharP10ringbufferh>
 8008338:	20000200 	.word	0x20000200

0800833c <init_ROS>:
}

extern "C" void init_ROS(void)
{
 800833c:	b538      	push	{r3, r4, r5, lr}
	ringbuffer_init(&rb, RxBuffer, RxBufferSize);
 800833e:	4c39      	ldr	r4, [pc, #228]	; (8008424 <init_ROS+0xe8>)
 8008340:	4939      	ldr	r1, [pc, #228]	; (8008428 <init_ROS+0xec>)
 8008342:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008346:	4620      	mov	r0, r4
 8008348:	f001 fbc6 	bl	8009ad8 <_Z15ringbuffer_initP10ringbufferPhs>
    mode_ = 0;
 800834c:	2300      	movs	r3, #0
 800834e:	f504 6284 	add.w	r2, r4, #1056	; 0x420
    topic_ = 0;
 8008352:	4611      	mov	r1, r2
    mode_ = 0;
 8008354:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
    bytes_ = 0;
 8008358:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
    index_ = 0;
 800835c:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
    topic_ = 0;
 8008360:	f8c4 34f4 	str.w	r3, [r4, #1268]	; 0x4f4
 8008364:	e002      	b.n	800836c <init_ROS+0x30>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8008366:	3301      	adds	r3, #1
 8008368:	2b19      	cmp	r3, #25
 800836a:	d00f      	beq.n	800838c <init_ROS+0x50>
      if (publishers[i] == 0) // empty slot
 800836c:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8008370:	2800      	cmp	r0, #0
 8008372:	d1f8      	bne.n	8008366 <init_ROS+0x2a>
        publishers[i] = &p;
 8008374:	492d      	ldr	r1, [pc, #180]	; (800842c <init_ROS+0xf0>)
 8008376:	eb04 0583 	add.w	r5, r4, r3, lsl #2
        p.nh_ = this;
 800837a:	f5a1 60a6 	sub.w	r0, r1, #1328	; 0x530
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800837e:	337d      	adds	r3, #125	; 0x7d
        publishers[i] = &p;
 8008380:	f8c5 1424 	str.w	r1, [r5, #1060]	; 0x424
        p.nh_ = this;
 8008384:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8008388:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800838c:	2300      	movs	r3, #0
 800838e:	e002      	b.n	8008396 <init_ROS+0x5a>
 8008390:	3301      	adds	r3, #1
 8008392:	2b19      	cmp	r3, #25
 8008394:	d00f      	beq.n	80083b6 <init_ROS+0x7a>
      if (publishers[i] == 0) // empty slot
 8008396:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800839a:	2900      	cmp	r1, #0
 800839c:	d1f8      	bne.n	8008390 <init_ROS+0x54>
        publishers[i] = &p;
 800839e:	4a24      	ldr	r2, [pc, #144]	; (8008430 <init_ROS+0xf4>)
 80083a0:	eb04 0083 	add.w	r0, r4, r3, lsl #2
        p.nh_ = this;
 80083a4:	f2a2 5144 	subw	r1, r2, #1348	; 0x544
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80083a8:	337d      	adds	r3, #125	; 0x7d
        publishers[i] = &p;
 80083aa:	f8c0 2424 	str.w	r2, [r0, #1060]	; 0x424
        p.nh_ = this;
 80083ae:	f8c4 155c 	str.w	r1, [r4, #1372]	; 0x55c
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80083b2:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
 80083b6:	4a1f      	ldr	r2, [pc, #124]	; (8008434 <init_ROS+0xf8>)
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80083b8:	2300      	movs	r3, #0
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80083ba:	4611      	mov	r1, r2
 80083bc:	e002      	b.n	80083c4 <init_ROS+0x88>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80083be:	3301      	adds	r3, #1
 80083c0:	2b19      	cmp	r3, #25
 80083c2:	d00b      	beq.n	80083dc <init_ROS+0xa0>
      if (subscribers[i] == 0) // empty slot
 80083c4:	f851 0f04 	ldr.w	r0, [r1, #4]!
 80083c8:	2800      	cmp	r0, #0
 80083ca:	d1f8      	bne.n	80083be <init_ROS+0x82>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80083cc:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 80083d0:	4819      	ldr	r0, [pc, #100]	; (8008438 <init_ROS+0xfc>)
 80083d2:	f8c1 0488 	str.w	r0, [r1, #1160]	; 0x488
        s.id_ = i + 100;
 80083d6:	3364      	adds	r3, #100	; 0x64
 80083d8:	f8c4 3568 	str.w	r3, [r4, #1384]	; 0x568
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80083dc:	2300      	movs	r3, #0
 80083de:	e002      	b.n	80083e6 <init_ROS+0xaa>
 80083e0:	3301      	adds	r3, #1
 80083e2:	2b19      	cmp	r3, #25
 80083e4:	d00b      	beq.n	80083fe <init_ROS+0xc2>
      if (subscribers[i] == 0) // empty slot
 80083e6:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80083ea:	2900      	cmp	r1, #0
 80083ec:	d1f8      	bne.n	80083e0 <init_ROS+0xa4>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80083ee:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80083f2:	4912      	ldr	r1, [pc, #72]	; (800843c <init_ROS+0x100>)
 80083f4:	f8c2 1488 	str.w	r1, [r2, #1160]	; 0x488
        s.id_ = i + 100;
 80083f8:	3364      	adds	r3, #100	; 0x64
 80083fa:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
	nh.advertise(gyro);
	nh.advertise(accel);
	nh.subscribe(sideD);
	nh.subscribe(speedD);

	NBT_init(&gyro_nbt, 9);
 80083fe:	2109      	movs	r1, #9
 8008400:	480f      	ldr	r0, [pc, #60]	; (8008440 <init_ROS+0x104>)
 8008402:	f001 facb 	bl	800999c <_Z8NBT_initP5nbt_tm>
	NBT_init(&vector_nbt, 9);
 8008406:	2109      	movs	r1, #9
 8008408:	480e      	ldr	r0, [pc, #56]	; (8008444 <init_ROS+0x108>)
 800840a:	f001 fac7 	bl	800999c <_Z8NBT_initP5nbt_tm>
	NBT_init(&accel_nbt, 9);
 800840e:	2109      	movs	r1, #9
 8008410:	480d      	ldr	r0, [pc, #52]	; (8008448 <init_ROS+0x10c>)
 8008412:	f001 fac3 	bl	800999c <_Z8NBT_initP5nbt_tm>
	NBT_init(&ros_nbt, 1);
 8008416:	2101      	movs	r1, #1
 8008418:	480c      	ldr	r0, [pc, #48]	; (800844c <init_ROS+0x110>)
//	NBT_init(&LED_nbt, 100);
}
 800841a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	NBT_init(&ros_nbt, 1);
 800841e:	f001 babd 	b.w	800999c <_Z8NBT_initP5nbt_tm>
 8008422:	bf00      	nop
 8008424:	20000200 	.word	0x20000200
 8008428:	200051c4 	.word	0x200051c4
 800842c:	2000073c 	.word	0x2000073c
 8008430:	20000750 	.word	0x20000750
 8008434:	20000684 	.word	0x20000684
 8008438:	20000764 	.word	0x20000764
 800843c:	20000780 	.word	0x20000780
 8008440:	2000079c 	.word	0x2000079c
 8008444:	200007a4 	.word	0x200007a4
 8008448:	200007ac 	.word	0x200007ac
 800844c:	200007b4 	.word	0x200007b4

08008450 <gyro_handler>:
	 }

}

extern "C" void gyro_handler(void)
{
 8008450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (NBT_handler(&gyro_nbt))
 8008454:	4c6e      	ldr	r4, [pc, #440]	; (8008610 <gyro_handler+0x1c0>)
 8008456:	f204 509c 	addw	r0, r4, #1436	; 0x59c
 800845a:	f001 faa7 	bl	80099ac <_Z11NBT_handlerP5nbt_t>
 800845e:	b908      	cbnz	r0, 8008464 <gyro_handler+0x14>
 8008460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008464:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
	   {

		  gyro_msg.x = gyroX;
 8008468:	4d6a      	ldr	r5, [pc, #424]	; (8008614 <gyro_handler+0x1c4>)
    msg_(msg),
    endpoint_(endpoint) {};

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
 800846a:	6803      	ldr	r3, [r0, #0]
		  gyro_msg.y = gyroY;
 800846c:	496a      	ldr	r1, [pc, #424]	; (8008618 <gyro_handler+0x1c8>)
		  gyro_msg.z = gyroZ;
 800846e:	4a6b      	ldr	r2, [pc, #428]	; (800861c <gyro_handler+0x1cc>)
 8008470:	681b      	ldr	r3, [r3, #0]
		  gyro_msg.x = gyroX;
 8008472:	edd5 6a00 	vldr	s13, [r5]
 8008476:	4d6a      	ldr	r5, [pc, #424]	; (8008620 <gyro_handler+0x1d0>)
		  gyro_msg.y = gyroY;
 8008478:	ed91 7a00 	vldr	s14, [r1]
		  gyro_msg.z = gyroZ;
 800847c:	edd2 7a00 	vldr	s15, [r2]
 8008480:	f8d4 1544 	ldr.w	r1, [r4, #1348]	; 0x544
		  gyro_msg.x = gyroX;
 8008484:	f204 52d4 	addw	r2, r4, #1492	; 0x5d4
 8008488:	42ab      	cmp	r3, r5
 800848a:	edc2 6a01 	vstr	s13, [r2, #4]
		  gyro_msg.y = gyroY;
 800848e:	ed82 7a02 	vstr	s14, [r2, #8]
		  gyro_msg.z = gyroZ;
 8008492:	edc2 7a03 	vstr	s15, [r2, #12]
 8008496:	f040 80b8 	bne.w	800860a <gyro_handler+0x1ba>
    if (id >= 100 && !configured_)
 800849a:	2963      	cmp	r1, #99	; 0x63
 800849c:	dd03      	ble.n	80084a6 <gyro_handler+0x56>
 800849e:	f890 34f4 	ldrb.w	r3, [r0, #1268]	; 0x4f4
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d0dc      	beq.n	8008460 <gyro_handler+0x10>
    int32_t exp = ((*val >> 23) & 255);
 80084a6:	ee16 3a90 	vmov	r3, s13
 80084aa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    if (exp != 0)
 80084ae:	2a00      	cmp	r2, #0
 80084b0:	f040 80a0 	bne.w	80085f4 <gyro_handler+0x1a4>
 80084b4:	4614      	mov	r4, r2
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 80084b6:	f3c3 45c3 	ubfx	r5, r3, #19, #4
    *(outbuffer++) = (sig << 5) & 0xff;
 80084ba:	015f      	lsls	r7, r3, #5
    *(outbuffer++) = (sig >> 3) & 0xff;
 80084bc:	10de      	asrs	r6, r3, #3
    if (f < 0)
 80084be:	eef5 6ac0 	vcmpe.f32	s13, #0.0
    *(outbuffer++) = (sig >> 11) & 0xff;
 80084c2:	12db      	asrs	r3, r3, #11
 80084c4:	f880 3224 	strb.w	r3, [r0, #548]	; 0x224
    if (f < 0)
 80084c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    int32_t exp = ((*val >> 23) & 255);
 80084cc:	ee17 3a10 	vmov	r3, s14
      *(outbuffer - 1) |= 0x80;
 80084d0:	bf48      	it	mi
 80084d2:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 80084d6:	432c      	orrs	r4, r5
      *(outbuffer - 1) |= 0x80;
 80084d8:	f880 2226 	strb.w	r2, [r0, #550]	; 0x226
    *(outbuffer++) = 0;
 80084dc:	2500      	movs	r5, #0
    int32_t exp = ((*val >> 23) & 255);
 80084de:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 80084e2:	f880 4225 	strb.w	r4, [r0, #549]	; 0x225
    *(outbuffer++) = 0;
 80084e6:	f880 521f 	strb.w	r5, [r0, #543]	; 0x21f
    *(outbuffer++) = 0;
 80084ea:	f880 5220 	strb.w	r5, [r0, #544]	; 0x220
    *(outbuffer++) = 0;
 80084ee:	f880 5221 	strb.w	r5, [r0, #545]	; 0x221
    *(outbuffer++) = (sig << 5) & 0xff;
 80084f2:	f880 7222 	strb.w	r7, [r0, #546]	; 0x222
    *(outbuffer++) = (sig >> 3) & 0xff;
 80084f6:	f880 6223 	strb.w	r6, [r0, #547]	; 0x223
    if (exp != 0)
 80084fa:	2a00      	cmp	r2, #0
 80084fc:	f000 8083 	beq.w	8008606 <gyro_handler+0x1b6>
      exp += 1023 - 127;
 8008500:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8008504:	0114      	lsls	r4, r2, #4
 8008506:	b264      	sxtb	r4, r4
 8008508:	f3c2 1207 	ubfx	r2, r2, #4, #8
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800850c:	f3c3 45c3 	ubfx	r5, r3, #19, #4
    *(outbuffer++) = (sig << 5) & 0xff;
 8008510:	015f      	lsls	r7, r3, #5
    *(outbuffer++) = (sig >> 3) & 0xff;
 8008512:	10de      	asrs	r6, r3, #3
    if (f < 0)
 8008514:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    *(outbuffer++) = (sig >> 11) & 0xff;
 8008518:	12db      	asrs	r3, r3, #11
 800851a:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
    if (f < 0)
 800851e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    int32_t exp = ((*val >> 23) & 255);
 8008522:	ee17 3a90 	vmov	r3, s15
      *(outbuffer - 1) |= 0x80;
 8008526:	bf48      	it	mi
 8008528:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800852c:	432c      	orrs	r4, r5
      *(outbuffer - 1) |= 0x80;
 800852e:	f880 222e 	strb.w	r2, [r0, #558]	; 0x22e
    *(outbuffer++) = 0;
 8008532:	2500      	movs	r5, #0
    int32_t exp = ((*val >> 23) & 255);
 8008534:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008538:	f880 422d 	strb.w	r4, [r0, #557]	; 0x22d
    *(outbuffer++) = 0;
 800853c:	f880 5227 	strb.w	r5, [r0, #551]	; 0x227
    *(outbuffer++) = 0;
 8008540:	f880 5228 	strb.w	r5, [r0, #552]	; 0x228
    *(outbuffer++) = 0;
 8008544:	f880 5229 	strb.w	r5, [r0, #553]	; 0x229
    *(outbuffer++) = (sig << 5) & 0xff;
 8008548:	f880 722a 	strb.w	r7, [r0, #554]	; 0x22a
    *(outbuffer++) = (sig >> 3) & 0xff;
 800854c:	f880 622b 	strb.w	r6, [r0, #555]	; 0x22b
    if (exp != 0)
 8008550:	2a00      	cmp	r2, #0
 8008552:	d056      	beq.n	8008602 <gyro_handler+0x1b2>
      exp += 1023 - 127;
 8008554:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8008558:	0114      	lsls	r4, r2, #4
 800855a:	b264      	sxtb	r4, r4
 800855c:	f3c2 1207 	ubfx	r2, r2, #4, #8
    if (f < 0)
 8008560:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008564:	f3c3 45c3 	ubfx	r5, r3, #19, #4
    if (f < 0)
 8008568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800856c:	ea44 0405 	orr.w	r4, r4, r5
    *(outbuffer++) = (sig << 5) & 0xff;
 8008570:	ea4f 1743 	mov.w	r7, r3, lsl #5
    *(outbuffer++) = 0;
 8008574:	f04f 0500 	mov.w	r5, #0
    *(outbuffer++) = (sig >> 3) & 0xff;
 8008578:	ea4f 06e3 	mov.w	r6, r3, asr #3
      *(outbuffer - 1) |= 0x80;
 800857c:	bf48      	it	mi
 800857e:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = (sig >> 11) & 0xff;
 8008582:	12db      	asrs	r3, r3, #11
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008584:	f880 4235 	strb.w	r4, [r0, #565]	; 0x235
    *(outbuffer++) = 0;
 8008588:	f880 522f 	strb.w	r5, [r0, #559]	; 0x22f
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800858c:	2418      	movs	r4, #24
    *(outbuffer++) = 0;
 800858e:	f880 5230 	strb.w	r5, [r0, #560]	; 0x230
    *(outbuffer++) = 0;
 8008592:	f880 5231 	strb.w	r5, [r0, #561]	; 0x231
    *(outbuffer++) = (sig << 5) & 0xff;
 8008596:	f880 7232 	strb.w	r7, [r0, #562]	; 0x232
    *(outbuffer++) = (sig >> 3) & 0xff;
 800859a:	f880 6233 	strb.w	r6, [r0, #563]	; 0x233
    *(outbuffer++) = (sig >> 11) & 0xff;
 800859e:	f880 3234 	strb.w	r3, [r0, #564]	; 0x234
      *(outbuffer - 1) |= 0x80;
 80085a2:	f880 2236 	strb.w	r2, [r0, #566]	; 0x236
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80085a6:	23e7      	movs	r3, #231	; 0xe7
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80085a8:	f341 2707 	sbfx	r7, r1, #8, #8
    message_out[0] = 0xff;
 80085ac:	26ff      	movs	r6, #255	; 0xff
    message_out[1] = PROTOCOL_VER;
 80085ae:	25fe      	movs	r5, #254	; 0xfe
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80085b0:	2200      	movs	r2, #0
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80085b2:	f880 421a 	strb.w	r4, [r0, #538]	; 0x21a
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80085b6:	f880 321c 	strb.w	r3, [r0, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80085ba:	f880 121d 	strb.w	r1, [r0, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80085be:	f880 721e 	strb.w	r7, [r0, #542]	; 0x21e
    message_out[0] = 0xff;
 80085c2:	f880 6218 	strb.w	r6, [r0, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 80085c6:	f880 5219 	strb.w	r5, [r0, #537]	; 0x219
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80085ca:	f880 221b 	strb.w	r2, [r0, #539]	; 0x21b
 80085ce:	f500 7307 	add.w	r3, r0, #540	; 0x21c
 80085d2:	f200 2436 	addw	r4, r0, #566	; 0x236
      chk += message_out[i];
 80085d6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 80085da:	429c      	cmp	r4, r3
      chk += message_out[i];
 80085dc:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
 80085de:	d1fa      	bne.n	80085d6 <gyro_handler+0x186>
    message_out[l++] = 255 - (chk % 256);
 80085e0:	43d2      	mvns	r2, r2
 80085e2:	f880 2237 	strb.w	r2, [r0, #567]	; 0x237
 80085e6:	2120      	movs	r1, #32
 80085e8:	f500 7006 	add.w	r0, r0, #536	; 0x218
//		  vx++;
//		  vy++;
//		  vz++;

       }
}
 80085ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085f0:	f7fe bf4a 	b.w	8007488 <CDC_Transmit_FS>
      exp += 1023 - 127;
 80085f4:	f502 7260 	add.w	r2, r2, #896	; 0x380
 80085f8:	0114      	lsls	r4, r2, #4
 80085fa:	b264      	sxtb	r4, r4
 80085fc:	f3c2 1207 	ubfx	r2, r2, #4, #8
 8008600:	e759      	b.n	80084b6 <gyro_handler+0x66>
    if (exp != 0)
 8008602:	4614      	mov	r4, r2
 8008604:	e7ac      	b.n	8008560 <gyro_handler+0x110>
 8008606:	4614      	mov	r4, r2
 8008608:	e780      	b.n	800850c <gyro_handler+0xbc>
 800860a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800860e:	4718      	bx	r3
 8008610:	20000200 	.word	0x20000200
 8008614:	20004840 	.word	0x20004840
 8008618:	20004ac8 	.word	0x20004ac8
 800861c:	2000484c 	.word	0x2000484c
 8008620:	08008099 	.word	0x08008099

08008624 <accel_handler>:

extern "C" void accel_handler(void)
{
 8008624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (NBT_handler(&accel_nbt))
 8008628:	4c6e      	ldr	r4, [pc, #440]	; (80087e4 <accel_handler+0x1c0>)
 800862a:	f204 50ac 	addw	r0, r4, #1452	; 0x5ac
 800862e:	f001 f9bd 	bl	80099ac <_Z11NBT_handlerP5nbt_t>
 8008632:	b908      	cbnz	r0, 8008638 <accel_handler+0x14>
 8008634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008638:	f8d4 055c 	ldr.w	r0, [r4, #1372]	; 0x55c
	   {
          accel_msg.x = accelX;
 800863c:	4d6a      	ldr	r5, [pc, #424]	; (80087e8 <accel_handler+0x1c4>)
 800863e:	6803      	ldr	r3, [r0, #0]
		  accel_msg.y = accelY;
 8008640:	496a      	ldr	r1, [pc, #424]	; (80087ec <accel_handler+0x1c8>)
		  accel_msg.z = accelZ;
 8008642:	4a6b      	ldr	r2, [pc, #428]	; (80087f0 <accel_handler+0x1cc>)
 8008644:	681b      	ldr	r3, [r3, #0]
          accel_msg.x = accelX;
 8008646:	edd5 6a00 	vldr	s13, [r5]
 800864a:	4d6a      	ldr	r5, [pc, #424]	; (80087f4 <accel_handler+0x1d0>)
		  accel_msg.y = accelY;
 800864c:	ed91 7a00 	vldr	s14, [r1]
		  accel_msg.z = accelZ;
 8008650:	edd2 7a00 	vldr	s15, [r2]
 8008654:	f8d4 1558 	ldr.w	r1, [r4, #1368]	; 0x558
          accel_msg.x = accelX;
 8008658:	f204 52e4 	addw	r2, r4, #1508	; 0x5e4
 800865c:	42ab      	cmp	r3, r5
 800865e:	edc2 6a01 	vstr	s13, [r2, #4]
		  accel_msg.y = accelY;
 8008662:	ed82 7a02 	vstr	s14, [r2, #8]
		  accel_msg.z = accelZ;
 8008666:	edc2 7a03 	vstr	s15, [r2, #12]
 800866a:	f040 80b8 	bne.w	80087de <accel_handler+0x1ba>
    if (id >= 100 && !configured_)
 800866e:	2963      	cmp	r1, #99	; 0x63
 8008670:	dd03      	ble.n	800867a <accel_handler+0x56>
 8008672:	f890 34f4 	ldrb.w	r3, [r0, #1268]	; 0x4f4
 8008676:	2b00      	cmp	r3, #0
 8008678:	d0dc      	beq.n	8008634 <accel_handler+0x10>
    int32_t exp = ((*val >> 23) & 255);
 800867a:	ee16 3a90 	vmov	r3, s13
 800867e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    if (exp != 0)
 8008682:	2a00      	cmp	r2, #0
 8008684:	f040 80a0 	bne.w	80087c8 <accel_handler+0x1a4>
 8008688:	4614      	mov	r4, r2
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800868a:	f3c3 45c3 	ubfx	r5, r3, #19, #4
    *(outbuffer++) = (sig << 5) & 0xff;
 800868e:	015f      	lsls	r7, r3, #5
    *(outbuffer++) = (sig >> 3) & 0xff;
 8008690:	10de      	asrs	r6, r3, #3
    if (f < 0)
 8008692:	eef5 6ac0 	vcmpe.f32	s13, #0.0
    *(outbuffer++) = (sig >> 11) & 0xff;
 8008696:	12db      	asrs	r3, r3, #11
 8008698:	f880 3224 	strb.w	r3, [r0, #548]	; 0x224
    if (f < 0)
 800869c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    int32_t exp = ((*val >> 23) & 255);
 80086a0:	ee17 3a10 	vmov	r3, s14
      *(outbuffer - 1) |= 0x80;
 80086a4:	bf48      	it	mi
 80086a6:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 80086aa:	432c      	orrs	r4, r5
      *(outbuffer - 1) |= 0x80;
 80086ac:	f880 2226 	strb.w	r2, [r0, #550]	; 0x226
    *(outbuffer++) = 0;
 80086b0:	2500      	movs	r5, #0
    int32_t exp = ((*val >> 23) & 255);
 80086b2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 80086b6:	f880 4225 	strb.w	r4, [r0, #549]	; 0x225
    *(outbuffer++) = 0;
 80086ba:	f880 521f 	strb.w	r5, [r0, #543]	; 0x21f
    *(outbuffer++) = 0;
 80086be:	f880 5220 	strb.w	r5, [r0, #544]	; 0x220
    *(outbuffer++) = 0;
 80086c2:	f880 5221 	strb.w	r5, [r0, #545]	; 0x221
    *(outbuffer++) = (sig << 5) & 0xff;
 80086c6:	f880 7222 	strb.w	r7, [r0, #546]	; 0x222
    *(outbuffer++) = (sig >> 3) & 0xff;
 80086ca:	f880 6223 	strb.w	r6, [r0, #547]	; 0x223
    if (exp != 0)
 80086ce:	2a00      	cmp	r2, #0
 80086d0:	f000 8083 	beq.w	80087da <accel_handler+0x1b6>
      exp += 1023 - 127;
 80086d4:	f502 7260 	add.w	r2, r2, #896	; 0x380
 80086d8:	0114      	lsls	r4, r2, #4
 80086da:	b264      	sxtb	r4, r4
 80086dc:	f3c2 1207 	ubfx	r2, r2, #4, #8
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 80086e0:	f3c3 45c3 	ubfx	r5, r3, #19, #4
    *(outbuffer++) = (sig << 5) & 0xff;
 80086e4:	015f      	lsls	r7, r3, #5
    *(outbuffer++) = (sig >> 3) & 0xff;
 80086e6:	10de      	asrs	r6, r3, #3
    if (f < 0)
 80086e8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    *(outbuffer++) = (sig >> 11) & 0xff;
 80086ec:	12db      	asrs	r3, r3, #11
 80086ee:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
    if (f < 0)
 80086f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    int32_t exp = ((*val >> 23) & 255);
 80086f6:	ee17 3a90 	vmov	r3, s15
      *(outbuffer - 1) |= 0x80;
 80086fa:	bf48      	it	mi
 80086fc:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008700:	432c      	orrs	r4, r5
      *(outbuffer - 1) |= 0x80;
 8008702:	f880 222e 	strb.w	r2, [r0, #558]	; 0x22e
    *(outbuffer++) = 0;
 8008706:	2500      	movs	r5, #0
    int32_t exp = ((*val >> 23) & 255);
 8008708:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800870c:	f880 422d 	strb.w	r4, [r0, #557]	; 0x22d
    *(outbuffer++) = 0;
 8008710:	f880 5227 	strb.w	r5, [r0, #551]	; 0x227
    *(outbuffer++) = 0;
 8008714:	f880 5228 	strb.w	r5, [r0, #552]	; 0x228
    *(outbuffer++) = 0;
 8008718:	f880 5229 	strb.w	r5, [r0, #553]	; 0x229
    *(outbuffer++) = (sig << 5) & 0xff;
 800871c:	f880 722a 	strb.w	r7, [r0, #554]	; 0x22a
    *(outbuffer++) = (sig >> 3) & 0xff;
 8008720:	f880 622b 	strb.w	r6, [r0, #555]	; 0x22b
    if (exp != 0)
 8008724:	2a00      	cmp	r2, #0
 8008726:	d056      	beq.n	80087d6 <accel_handler+0x1b2>
      exp += 1023 - 127;
 8008728:	f502 7260 	add.w	r2, r2, #896	; 0x380
 800872c:	0114      	lsls	r4, r2, #4
 800872e:	b264      	sxtb	r4, r4
 8008730:	f3c2 1207 	ubfx	r2, r2, #4, #8
    if (f < 0)
 8008734:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008738:	f3c3 45c3 	ubfx	r5, r3, #19, #4
    if (f < 0)
 800873c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008740:	ea44 0405 	orr.w	r4, r4, r5
    *(outbuffer++) = (sig << 5) & 0xff;
 8008744:	ea4f 1743 	mov.w	r7, r3, lsl #5
    *(outbuffer++) = 0;
 8008748:	f04f 0500 	mov.w	r5, #0
    *(outbuffer++) = (sig >> 3) & 0xff;
 800874c:	ea4f 06e3 	mov.w	r6, r3, asr #3
      *(outbuffer - 1) |= 0x80;
 8008750:	bf48      	it	mi
 8008752:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = (sig >> 11) & 0xff;
 8008756:	12db      	asrs	r3, r3, #11
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008758:	f880 4235 	strb.w	r4, [r0, #565]	; 0x235
    *(outbuffer++) = 0;
 800875c:	f880 522f 	strb.w	r5, [r0, #559]	; 0x22f
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8008760:	2418      	movs	r4, #24
    *(outbuffer++) = 0;
 8008762:	f880 5230 	strb.w	r5, [r0, #560]	; 0x230
    *(outbuffer++) = 0;
 8008766:	f880 5231 	strb.w	r5, [r0, #561]	; 0x231
    *(outbuffer++) = (sig << 5) & 0xff;
 800876a:	f880 7232 	strb.w	r7, [r0, #562]	; 0x232
    *(outbuffer++) = (sig >> 3) & 0xff;
 800876e:	f880 6233 	strb.w	r6, [r0, #563]	; 0x233
    *(outbuffer++) = (sig >> 11) & 0xff;
 8008772:	f880 3234 	strb.w	r3, [r0, #564]	; 0x234
      *(outbuffer - 1) |= 0x80;
 8008776:	f880 2236 	strb.w	r2, [r0, #566]	; 0x236
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800877a:	23e7      	movs	r3, #231	; 0xe7
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800877c:	f341 2707 	sbfx	r7, r1, #8, #8
    message_out[0] = 0xff;
 8008780:	26ff      	movs	r6, #255	; 0xff
    message_out[1] = PROTOCOL_VER;
 8008782:	25fe      	movs	r5, #254	; 0xfe
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8008784:	2200      	movs	r2, #0
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8008786:	f880 421a 	strb.w	r4, [r0, #538]	; 0x21a
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800878a:	f880 321c 	strb.w	r3, [r0, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800878e:	f880 121d 	strb.w	r1, [r0, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8008792:	f880 721e 	strb.w	r7, [r0, #542]	; 0x21e
    message_out[0] = 0xff;
 8008796:	f880 6218 	strb.w	r6, [r0, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 800879a:	f880 5219 	strb.w	r5, [r0, #537]	; 0x219
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800879e:	f880 221b 	strb.w	r2, [r0, #539]	; 0x21b
 80087a2:	f500 7307 	add.w	r3, r0, #540	; 0x21c
 80087a6:	f200 2436 	addw	r4, r0, #566	; 0x236
      chk += message_out[i];
 80087aa:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 80087ae:	429c      	cmp	r4, r3
      chk += message_out[i];
 80087b0:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
 80087b2:	d1fa      	bne.n	80087aa <accel_handler+0x186>
    message_out[l++] = 255 - (chk % 256);
 80087b4:	43d2      	mvns	r2, r2
 80087b6:	f880 2237 	strb.w	r2, [r0, #567]	; 0x237
 80087ba:	2120      	movs	r1, #32
 80087bc:	f500 7006 	add.w	r0, r0, #536	; 0x218
//		  vx++;
//		  vy++;
//		  vz++;

       }
}
 80087c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087c4:	f7fe be60 	b.w	8007488 <CDC_Transmit_FS>
      exp += 1023 - 127;
 80087c8:	f502 7260 	add.w	r2, r2, #896	; 0x380
 80087cc:	0114      	lsls	r4, r2, #4
 80087ce:	b264      	sxtb	r4, r4
 80087d0:	f3c2 1207 	ubfx	r2, r2, #4, #8
 80087d4:	e759      	b.n	800868a <accel_handler+0x66>
    if (exp != 0)
 80087d6:	4614      	mov	r4, r2
 80087d8:	e7ac      	b.n	8008734 <accel_handler+0x110>
 80087da:	4614      	mov	r4, r2
 80087dc:	e780      	b.n	80086e0 <accel_handler+0xbc>
 80087de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087e2:	4718      	bx	r3
 80087e4:	20000200 	.word	0x20000200
 80087e8:	200047e8 	.word	0x200047e8
 80087ec:	200047dc 	.word	0x200047dc
 80087f0:	20004a74 	.word	0x20004a74
 80087f4:	08008099 	.word	0x08008099

080087f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80087f8:	b530      	push	{r4, r5, lr}
    publish(TopicInfo::ID_TIME, &t);
 80087fa:	6801      	ldr	r1, [r0, #0]
 80087fc:	4a18      	ldr	r2, [pc, #96]	; (8008860 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv+0x68>)
 80087fe:	680d      	ldr	r5, [r1, #0]
      data()
 8008800:	4b18      	ldr	r3, [pc, #96]	; (8008864 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv+0x6c>)
  void requestSyncTime()
 8008802:	b085      	sub	sp, #20
 8008804:	4295      	cmp	r5, r2
 8008806:	9301      	str	r3, [sp, #4]
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8008808:	f04f 0300 	mov.w	r3, #0
 800880c:	4604      	mov	r4, r0
 800880e:	9302      	str	r3, [sp, #8]
 8008810:	9303      	str	r3, [sp, #12]
 8008812:	d11c      	bne.n	800884e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv+0x56>
    message_out[l++] = 255 - (chk % 256);
 8008814:	f06f 020a 	mvn.w	r2, #10
    message_out[0] = 0xff;
 8008818:	4813      	ldr	r0, [pc, #76]	; (8008868 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv+0x70>)
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800881a:	f884 3224 	strb.w	r3, [r4, #548]	; 0x224
 800881e:	f640 21f7 	movw	r1, #2807	; 0xaf7
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8008822:	f884 3225 	strb.w	r3, [r4, #549]	; 0x225
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8008826:	f884 3226 	strb.w	r3, [r4, #550]	; 0x226
 800882a:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
 800882e:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
 8008832:	f8c4 121c 	str.w	r1, [r4, #540]	; 0x21c
    message_out[l++] = 255 - (chk % 256);
 8008836:	f884 2227 	strb.w	r2, [r4, #551]	; 0x227
 800883a:	2110      	movs	r1, #16
 800883c:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8008840:	f7fe fe22 	bl	8007488 <CDC_Transmit_FS>
	}

	// Returns milliseconds since start of program
	unsigned long time(void)
	{
		return HAL_GetTick();
 8008844:	f7f8 fe00 	bl	8001448 <HAL_GetTick>
    rt_time = hardware_.time();
 8008848:	60a0      	str	r0, [r4, #8]
  }
 800884a:	b005      	add	sp, #20
 800884c:	bd30      	pop	{r4, r5, pc}
    publish(TopicInfo::ID_TIME, &t);
 800884e:	aa01      	add	r2, sp, #4
 8008850:	210a      	movs	r1, #10
 8008852:	47a8      	blx	r5
 8008854:	f7f8 fdf8 	bl	8001448 <HAL_GetTick>
    rt_time = hardware_.time();
 8008858:	60a0      	str	r0, [r4, #8]
  }
 800885a:	b005      	add	sp, #20
 800885c:	bd30      	pop	{r4, r5, pc}
 800885e:	bf00      	nop
 8008860:	08008099 	.word	0x08008099
 8008864:	0800a394 	.word	0x0800a394
 8008868:	0008feff 	.word	0x0008feff

0800886c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
  void negotiateTopics()
 800886c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008870:	b08d      	sub	sp, #52	; 0x34
      buffer_size(0)
 8008872:	4ad7      	ldr	r2, [pc, #860]	; (8008bd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x364>)
 8008874:	4bd7      	ldr	r3, [pc, #860]	; (8008bd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x368>)
 8008876:	9206      	str	r2, [sp, #24]
 8008878:	2200      	movs	r2, #0
 800887a:	4606      	mov	r6, r0
 800887c:	f500 6783 	add.w	r7, r0, #1048	; 0x418
 8008880:	f200 4b7c 	addw	fp, r0, #1148	; 0x47c
 8008884:	f8ad 201c 	strh.w	r2, [sp, #28]
 8008888:	920b      	str	r2, [sp, #44]	; 0x2c
 800888a:	9308      	str	r3, [sp, #32]
 800888c:	9309      	str	r3, [sp, #36]	; 0x24
 800888e:	930a      	str	r3, [sp, #40]	; 0x28
      if (publishers[i] != 0) // non-empty slot
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	f000 80bb 	beq.w	8008a0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8008898:	6858      	ldr	r0, [r3, #4]
        ti.topic_id = publishers[i]->id_;
 800889a:	6899      	ldr	r1, [r3, #8]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800889c:	6804      	ldr	r4, [r0, #0]
        ti.topic_name = (char *) publishers[i]->topic_;
 800889e:	681a      	ldr	r2, [r3, #0]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80088a0:	68a3      	ldr	r3, [r4, #8]
        ti.topic_id = publishers[i]->id_;
 80088a2:	f8ad 101c 	strh.w	r1, [sp, #28]
        ti.topic_name = (char *) publishers[i]->topic_;
 80088a6:	9208      	str	r2, [sp, #32]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80088a8:	4798      	blx	r3
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80088aa:	683b      	ldr	r3, [r7, #0]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80088ac:	9009      	str	r0, [sp, #36]	; 0x24
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80088ae:	6858      	ldr	r0, [r3, #4]
 80088b0:	6803      	ldr	r3, [r0, #0]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	4798      	blx	r3
        publish(publishers[i]->getEndpointType(), &ti);
 80088b6:	6833      	ldr	r3, [r6, #0]
 80088b8:	6839      	ldr	r1, [r7, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	690d      	ldr	r5, [r1, #16]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80088be:	900a      	str	r0, [sp, #40]	; 0x28
        ti.buffer_size = OUTPUT_SIZE;
 80088c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80088c6:	4ac4      	ldr	r2, [pc, #784]	; (8008bd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x36c>)
 80088c8:	4293      	cmp	r3, r2
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80088ca:	4682      	mov	sl, r0
 80088cc:	f040 81ab 	bne.w	8008c26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x3ba>
    if (id >= 100 && !configured_)
 80088d0:	2d63      	cmp	r5, #99	; 0x63
 80088d2:	dd04      	ble.n	80088de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x72>
 80088d4:	f896 34f4 	ldrb.w	r3, [r6, #1268]	; 0x4f4
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 8095 	beq.w	8008a08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x19c>
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80088de:	f8bd 301c 	ldrh.w	r3, [sp, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80088e2:	f8dd 8020 	ldr.w	r8, [sp, #32]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80088e6:	f886 321f 	strb.w	r3, [r6, #543]	; 0x21f
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80088ea:	0a1b      	lsrs	r3, r3, #8
 80088ec:	f886 3220 	strb.w	r3, [r6, #544]	; 0x220
      uint32_t length_topic_name = strlen(this->topic_name);
 80088f0:	4640      	mov	r0, r8
 80088f2:	f7f7 fc77 	bl	80001e4 <strlen>
 80088f6:	4604      	mov	r4, r0
      arr[i] = (var >> (8 * i));
 80088f8:	0e23      	lsrs	r3, r4, #24
 80088fa:	0c22      	lsrs	r2, r4, #16
 80088fc:	0a00      	lsrs	r0, r0, #8
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80088fe:	4641      	mov	r1, r8
 8008900:	f886 3224 	strb.w	r3, [r6, #548]	; 0x224
 8008904:	f886 4221 	strb.w	r4, [r6, #545]	; 0x221
 8008908:	f886 0222 	strb.w	r0, [r6, #546]	; 0x222
 800890c:	f886 2223 	strb.w	r2, [r6, #547]	; 0x223
 8008910:	f206 2025 	addw	r0, r6, #549	; 0x225
 8008914:	4622      	mov	r2, r4
 8008916:	f001 fa41 	bl	8009d9c <memcpy>
      uint32_t length_message_type = strlen(this->message_type);
 800891a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800891e:	4648      	mov	r0, r9
 8008920:	f7f7 fc60 	bl	80001e4 <strlen>
    int l = msg->serialize(message_out + 7);
 8008924:	f206 281f 	addw	r8, r6, #543	; 0x21f
 8008928:	eb08 0304 	add.w	r3, r8, r4
      offset += length_topic_name;
 800892c:	f104 0e06 	add.w	lr, r4, #6
      uint32_t length_message_type = strlen(this->message_type);
 8008930:	4602      	mov	r2, r0
 8008932:	0a00      	lsrs	r0, r0, #8
 8008934:	f808 200e 	strb.w	r2, [r8, lr]
      offset += 4;
 8008938:	340a      	adds	r4, #10
 800893a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800893e:	71d8      	strb	r0, [r3, #7]
 8008940:	0e10      	lsrs	r0, r2, #24
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8008942:	4649      	mov	r1, r9
 8008944:	f883 e008 	strb.w	lr, [r3, #8]
 8008948:	7258      	strb	r0, [r3, #9]
 800894a:	eb08 0004 	add.w	r0, r8, r4
      offset += length_message_type;
 800894e:	eb02 0904 	add.w	r9, r2, r4
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8008952:	f001 fa23 	bl	8009d9c <memcpy>
      uint32_t length_md5sum = strlen(this->md5sum);
 8008956:	4650      	mov	r0, sl
 8008958:	f7f7 fc44 	bl	80001e4 <strlen>
 800895c:	eb08 0209 	add.w	r2, r8, r9
 8008960:	f808 0009 	strb.w	r0, [r8, r9]
 8008964:	4603      	mov	r3, r0
      offset += 4;
 8008966:	f109 0404 	add.w	r4, r9, #4
 800896a:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 800896e:	ea4f 4e10 	mov.w	lr, r0, lsr #16
 8008972:	0e00      	lsrs	r0, r0, #24
 8008974:	f882 c001 	strb.w	ip, [r2, #1]
 8008978:	f882 e002 	strb.w	lr, [r2, #2]
 800897c:	70d0      	strb	r0, [r2, #3]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800897e:	4651      	mov	r1, sl
 8008980:	461a      	mov	r2, r3
 8008982:	eb08 0004 	add.w	r0, r8, r4
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	f001 fa08 	bl	8009d9c <memcpy>
      offset += length_md5sum;
 800898c:	9b00      	ldr	r3, [sp, #0]
 800898e:	191a      	adds	r2, r3, r4
      offset += sizeof(this->buffer_size);
 8008990:	1d14      	adds	r4, r2, #4
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8008992:	fa5f fe84 	uxtb.w	lr, r4
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8008996:	f3c4 2007 	ubfx	r0, r4, #8, #8
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800899a:	eb0e 0100 	add.w	r1, lr, r0
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800899e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089a2:	43c9      	mvns	r1, r1
 80089a4:	f848 3002 	str.w	r3, [r8, r2]
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80089a8:	f345 2907 	sbfx	r9, r5, #8, #8
    message_out[0] = 0xff;
 80089ac:	23ff      	movs	r3, #255	; 0xff
    message_out[1] = PROTOCOL_VER;
 80089ae:	f04f 0cfe 	mov.w	ip, #254	; 0xfe
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80089b2:	f886 121c 	strb.w	r1, [r6, #540]	; 0x21c
    for (int i = 5; i < l + 7; i++)
 80089b6:	1c61      	adds	r1, r4, #1
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80089b8:	f886 521d 	strb.w	r5, [r6, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80089bc:	f886 921e 	strb.w	r9, [r6, #542]	; 0x21e
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80089c0:	f886 e21a 	strb.w	lr, [r6, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80089c4:	f886 021b 	strb.w	r0, [r6, #539]	; 0x21b
    message_out[0] = 0xff;
 80089c8:	f886 3218 	strb.w	r3, [r6, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 80089cc:	f886 c219 	strb.w	ip, [r6, #537]	; 0x219
    for (int i = 5; i < l + 7; i++)
 80089d0:	db0c      	blt.n	80089ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x180>
 80089d2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80089d6:	18b0      	adds	r0, r6, r2
 80089d8:	f506 7307 	add.w	r3, r6, #540	; 0x21c
 80089dc:	2200      	movs	r2, #0
      chk += message_out[i];
 80089de:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 80089e2:	4298      	cmp	r0, r3
      chk += message_out[i];
 80089e4:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
 80089e6:	d1fa      	bne.n	80089de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x172>
 80089e8:	43d3      	mvns	r3, r2
 80089ea:	b2db      	uxtb	r3, r3
    message_out[l++] = 255 - (chk % 256);
 80089ec:	1932      	adds	r2, r6, r4
 80089ee:	f104 0108 	add.w	r1, r4, #8
    if (l <= OUTPUT_SIZE)
 80089f2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    message_out[l++] = 255 - (chk % 256);
 80089f6:	f882 321f 	strb.w	r3, [r2, #543]	; 0x21f
    if (l <= OUTPUT_SIZE)
 80089fa:	f300 8119 	bgt.w	8008c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x3c4>
		CDC_Transmit_FS(data, length);
 80089fe:	b289      	uxth	r1, r1
 8008a00:	f506 7006 	add.w	r0, r6, #536	; 0x218
 8008a04:	f7fe fd40 	bl	8007488 <CDC_Transmit_FS>
        HAL_Delay(1);
 8008a08:	2001      	movs	r0, #1
 8008a0a:	f7f8 fd23 	bl	8001454 <HAL_Delay>
 8008a0e:	3704      	adds	r7, #4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8008a10:	45bb      	cmp	fp, r7
 8008a12:	f47f af3d 	bne.w	8008890 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x24>
 8008a16:	f506 639c 	add.w	r3, r6, #1248	; 0x4e0
 8008a1a:	9300      	str	r3, [sp, #0]
      if (subscribers[i] != 0) // non-empty slot
 8008a1c:	6838      	ldr	r0, [r7, #0]
 8008a1e:	2800      	cmp	r0, #0
 8008a20:	f000 80cb 	beq.w	8008bba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x34e>
        ti.topic_id = subscribers[i]->id_;
 8008a24:	e890 0018 	ldmia.w	r0, {r3, r4}
        ti.topic_name = (char *) subscribers[i]->topic_;
 8008a28:	6881      	ldr	r1, [r0, #8]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8008a2a:	689a      	ldr	r2, [r3, #8]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8008a2c:	9108      	str	r1, [sp, #32]
 8008a2e:	496b      	ldr	r1, [pc, #428]	; (8008bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x370>)
        ti.topic_id = subscribers[i]->id_;
 8008a30:	f8ad 401c 	strh.w	r4, [sp, #28]
 8008a34:	428a      	cmp	r2, r1
 8008a36:	f040 80db 	bne.w	8008bf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x384>
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8008a3a:	4969      	ldr	r1, [pc, #420]	; (8008be0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x374>)
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8008a3c:	68da      	ldr	r2, [r3, #12]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8008a3e:	9109      	str	r1, [sp, #36]	; 0x24
 8008a40:	4968      	ldr	r1, [pc, #416]	; (8008be4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x378>)
 8008a42:	428a      	cmp	r2, r1
 8008a44:	f040 80de 	bne.w	8008c04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x398>
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8008a48:	4a67      	ldr	r2, [pc, #412]	; (8008be8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x37c>)
        publish(subscribers[i]->getEndpointType(), &ti);
 8008a4a:	6831      	ldr	r1, [r6, #0]
 8008a4c:	685b      	ldr	r3, [r3, #4]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8008a4e:	920a      	str	r2, [sp, #40]	; 0x28
        ti.buffer_size = INPUT_SIZE;
 8008a50:	f44f 7200 	mov.w	r2, #512	; 0x200
        publish(subscribers[i]->getEndpointType(), &ti);
 8008a54:	680c      	ldr	r4, [r1, #0]
        ti.buffer_size = INPUT_SIZE;
 8008a56:	920b      	str	r2, [sp, #44]	; 0x2c
 8008a58:	4a64      	ldr	r2, [pc, #400]	; (8008bec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x380>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	f040 80d7 	bne.w	8008c0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x3a2>
 8008a60:	f8df b174 	ldr.w	fp, [pc, #372]	; 8008bd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x36c>
    return endpoint_;
 8008a64:	f8d0 a018 	ldr.w	sl, [r0, #24]
 8008a68:	455c      	cmp	r4, fp
 8008a6a:	f040 80d7 	bne.w	8008c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x3b0>
    if (id >= 100 && !configured_)
 8008a6e:	f1ba 0f63 	cmp.w	sl, #99	; 0x63
 8008a72:	dd04      	ble.n	8008a7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x212>
 8008a74:	f896 34f4 	ldrb.w	r3, [r6, #1268]	; 0x4f4
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 809b 	beq.w	8008bb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x348>
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8008a7e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8008a82:	9d08      	ldr	r5, [sp, #32]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8008a84:	f886 321f 	strb.w	r3, [r6, #543]	; 0x21f
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8008a88:	0a1b      	lsrs	r3, r3, #8
 8008a8a:	f886 3220 	strb.w	r3, [r6, #544]	; 0x220
      uint32_t length_topic_name = strlen(this->topic_name);
 8008a8e:	4628      	mov	r0, r5
 8008a90:	f7f7 fba8 	bl	80001e4 <strlen>
 8008a94:	4604      	mov	r4, r0
 8008a96:	0e23      	lsrs	r3, r4, #24
 8008a98:	0c22      	lsrs	r2, r4, #16
 8008a9a:	0a00      	lsrs	r0, r0, #8
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8008a9c:	4629      	mov	r1, r5
 8008a9e:	f886 3224 	strb.w	r3, [r6, #548]	; 0x224
 8008aa2:	f886 4221 	strb.w	r4, [r6, #545]	; 0x221
 8008aa6:	f886 0222 	strb.w	r0, [r6, #546]	; 0x222
 8008aaa:	f886 2223 	strb.w	r2, [r6, #547]	; 0x223
 8008aae:	f206 2025 	addw	r0, r6, #549	; 0x225
 8008ab2:	4622      	mov	r2, r4
 8008ab4:	f001 f972 	bl	8009d9c <memcpy>
      uint32_t length_message_type = strlen(this->message_type);
 8008ab8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008abc:	4648      	mov	r0, r9
 8008abe:	f7f7 fb91 	bl	80001e4 <strlen>
    int l = msg->serialize(message_out + 7);
 8008ac2:	f206 251f 	addw	r5, r6, #543	; 0x21f
 8008ac6:	192b      	adds	r3, r5, r4
 8008ac8:	4680      	mov	r8, r0
      offset += length_topic_name;
 8008aca:	f104 0e06 	add.w	lr, r4, #6
 8008ace:	ea4f 2c10 	mov.w	ip, r0, lsr #8
      offset += 4;
 8008ad2:	340a      	adds	r4, #10
 8008ad4:	ea4f 6218 	mov.w	r2, r8, lsr #24
 8008ad8:	0c00      	lsrs	r0, r0, #16
 8008ada:	f805 800e 	strb.w	r8, [r5, lr]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8008ade:	4649      	mov	r1, r9
 8008ae0:	f883 c007 	strb.w	ip, [r3, #7]
 8008ae4:	7218      	strb	r0, [r3, #8]
 8008ae6:	725a      	strb	r2, [r3, #9]
 8008ae8:	1928      	adds	r0, r5, r4
 8008aea:	4642      	mov	r2, r8
 8008aec:	f001 f956 	bl	8009d9c <memcpy>
      uint32_t length_md5sum = strlen(this->md5sum);
 8008af0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008af2:	9101      	str	r1, [sp, #4]
 8008af4:	4608      	mov	r0, r1
 8008af6:	f7f7 fb75 	bl	80001e4 <strlen>
      offset += length_message_type;
 8008afa:	44a0      	add	r8, r4
 8008afc:	eb05 0308 	add.w	r3, r5, r8
      uint32_t length_md5sum = strlen(this->md5sum);
 8008b00:	4681      	mov	r9, r0
 8008b02:	ea4f 2e10 	mov.w	lr, r0, lsr #8
      offset += 4;
 8008b06:	f108 0404 	add.w	r4, r8, #4
 8008b0a:	0c00      	lsrs	r0, r0, #16
 8008b0c:	ea4f 6219 	mov.w	r2, r9, lsr #24
 8008b10:	f805 9008 	strb.w	r9, [r5, r8]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8008b14:	9901      	ldr	r1, [sp, #4]
 8008b16:	f883 e001 	strb.w	lr, [r3, #1]
 8008b1a:	7098      	strb	r0, [r3, #2]
 8008b1c:	70da      	strb	r2, [r3, #3]
 8008b1e:	1928      	adds	r0, r5, r4
 8008b20:	464a      	mov	r2, r9
      offset += length_md5sum;
 8008b22:	444c      	add	r4, r9
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8008b24:	f001 f93a 	bl	8009d9c <memcpy>
      u_buffer_size.real = this->buffer_size;
 8008b28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8008b2a:	552b      	strb	r3, [r5, r4]
      offset += sizeof(this->buffer_size);
 8008b2c:	1d21      	adds	r1, r4, #4
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8008b2e:	4425      	add	r5, r4
 8008b30:	ea4f 2813 	mov.w	r8, r3, lsr #8
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8008b34:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8008b38:	fa5f fe81 	uxtb.w	lr, r1
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8008b3c:	f3c1 2007 	ubfx	r0, r1, #8, #8
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8008b40:	0e1b      	lsrs	r3, r3, #24
 8008b42:	70eb      	strb	r3, [r5, #3]
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8008b44:	eb0e 0200 	add.w	r2, lr, r0
    message_out[1] = PROTOCOL_VER;
 8008b48:	23fe      	movs	r3, #254	; 0xfe
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8008b4a:	f885 8001 	strb.w	r8, [r5, #1]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8008b4e:	f885 c002 	strb.w	ip, [r5, #2]
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8008b52:	43d2      	mvns	r2, r2
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8008b54:	f34a 2807 	sbfx	r8, sl, #8, #8
    message_out[0] = 0xff;
 8008b58:	f04f 0cff 	mov.w	ip, #255	; 0xff
    message_out[1] = PROTOCOL_VER;
 8008b5c:	f886 3219 	strb.w	r3, [r6, #537]	; 0x219
    for (int i = 5; i < l + 7; i++)
 8008b60:	1c4b      	adds	r3, r1, #1
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8008b62:	f886 221c 	strb.w	r2, [r6, #540]	; 0x21c
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8008b66:	f886 e21a 	strb.w	lr, [r6, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8008b6a:	f886 021b 	strb.w	r0, [r6, #539]	; 0x21b
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8008b6e:	f886 a21d 	strb.w	sl, [r6, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8008b72:	f886 821e 	strb.w	r8, [r6, #542]	; 0x21e
    message_out[0] = 0xff;
 8008b76:	f886 c218 	strb.w	ip, [r6, #536]	; 0x218
    for (int i = 5; i < l + 7; i++)
 8008b7a:	db0e      	blt.n	8008b9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x32e>
 8008b7c:	f204 2422 	addw	r4, r4, #546	; 0x222
 8008b80:	4434      	add	r4, r6
 8008b82:	f506 7307 	add.w	r3, r6, #540	; 0x21c
 8008b86:	2200      	movs	r2, #0
      chk += message_out[i];
 8008b88:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 8008b8c:	429c      	cmp	r4, r3
      chk += message_out[i];
 8008b8e:	4402      	add	r2, r0
    for (int i = 5; i < l + 7; i++)
 8008b90:	d1fa      	bne.n	8008b88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x31c>
 8008b92:	ea6f 0c02 	mvn.w	ip, r2
 8008b96:	fa5f fc8c 	uxtb.w	ip, ip
    message_out[l++] = 255 - (chk % 256);
 8008b9a:	1873      	adds	r3, r6, r1
 8008b9c:	3108      	adds	r1, #8
    if (l <= OUTPUT_SIZE)
 8008b9e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    message_out[l++] = 255 - (chk % 256);
 8008ba2:	f883 c21f 	strb.w	ip, [r3, #543]	; 0x21f
    if (l <= OUTPUT_SIZE)
 8008ba6:	f300 8096 	bgt.w	8008cd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x46a>
 8008baa:	b289      	uxth	r1, r1
 8008bac:	f506 7006 	add.w	r0, r6, #536	; 0x218
 8008bb0:	f7fe fc6a 	bl	8007488 <CDC_Transmit_FS>
        HAL_Delay(1);
 8008bb4:	2001      	movs	r0, #1
 8008bb6:	f7f8 fc4d 	bl	8001454 <HAL_Delay>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8008bba:	9b00      	ldr	r3, [sp, #0]
 8008bbc:	3704      	adds	r7, #4
 8008bbe:	42bb      	cmp	r3, r7
 8008bc0:	f47f af2c 	bne.w	8008a1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1b0>
    configured_ = true;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	f886 34f4 	strb.w	r3, [r6, #1268]	; 0x4f4
  }
 8008bca:	b00d      	add	sp, #52	; 0x34
 8008bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bd0:	0800a3ac 	.word	0x0800a3ac
 8008bd4:	0800a588 	.word	0x0800a588
 8008bd8:	08008099 	.word	0x08008099
 8008bdc:	08007c49 	.word	0x08007c49
 8008be0:	0800a5b0 	.word	0x0800a5b0
 8008be4:	08007c51 	.word	0x08007c51
 8008be8:	0800a58c 	.word	0x0800a58c
 8008bec:	08007c45 	.word	0x08007c45
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8008bf0:	4790      	blx	r2
 8008bf2:	4601      	mov	r1, r0
 8008bf4:	6838      	ldr	r0, [r7, #0]
 8008bf6:	6803      	ldr	r3, [r0, #0]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8008bf8:	68da      	ldr	r2, [r3, #12]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8008bfa:	9109      	str	r1, [sp, #36]	; 0x24
 8008bfc:	4963      	ldr	r1, [pc, #396]	; (8008d8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x520>)
 8008bfe:	428a      	cmp	r2, r1
 8008c00:	f43f af22 	beq.w	8008a48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1dc>
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8008c04:	4790      	blx	r2
 8008c06:	4602      	mov	r2, r0
 8008c08:	6838      	ldr	r0, [r7, #0]
 8008c0a:	6803      	ldr	r3, [r0, #0]
 8008c0c:	e71d      	b.n	8008a4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1de>
        publish(subscribers[i]->getEndpointType(), &ti);
 8008c0e:	4798      	blx	r3
 8008c10:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008d98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x52c>
 8008c14:	455c      	cmp	r4, fp
 8008c16:	4682      	mov	sl, r0
 8008c18:	f43f af29 	beq.w	8008a6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x202>
 8008c1c:	4651      	mov	r1, sl
 8008c1e:	aa06      	add	r2, sp, #24
 8008c20:	4630      	mov	r0, r6
 8008c22:	47a0      	blx	r4
 8008c24:	e7c6      	b.n	8008bb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x348>
        publish(publishers[i]->getEndpointType(), &ti);
 8008c26:	4629      	mov	r1, r5
 8008c28:	aa06      	add	r2, sp, #24
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	4798      	blx	r3
 8008c2e:	e6eb      	b.n	8008a08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x19c>
    l.level = byte;
 8008c30:	2203      	movs	r2, #3
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8008c32:	6833      	ldr	r3, [r6, #0]
 8008c34:	4956      	ldr	r1, [pc, #344]	; (8008d90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x524>)
    l.level = byte;
 8008c36:	f88d 2010 	strb.w	r2, [sp, #16]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	9103      	str	r1, [sp, #12]
    l.msg = (char*)msg;
 8008c3e:	4955      	ldr	r1, [pc, #340]	; (8008d94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x528>)
 8008c40:	9105      	str	r1, [sp, #20]
 8008c42:	4955      	ldr	r1, [pc, #340]	; (8008d98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x52c>)
 8008c44:	428b      	cmp	r3, r1
 8008c46:	f040 809b 	bne.w	8008d80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x514>
      memcpy(outbuffer + offset, this->msg, length_msg);
 8008c4a:	4c52      	ldr	r4, [pc, #328]	; (8008d94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x528>)
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8008c4c:	f886 221f 	strb.w	r2, [r6, #543]	; 0x21f
 8008c50:	2300      	movs	r3, #0
 8008c52:	2238      	movs	r2, #56	; 0x38
      memcpy(outbuffer + offset, this->msg, length_msg);
 8008c54:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8008c58:	f886 2220 	strb.w	r2, [r6, #544]	; 0x220
 8008c5c:	f886 3221 	strb.w	r3, [r6, #545]	; 0x221
 8008c60:	f886 3222 	strb.w	r3, [r6, #546]	; 0x222
 8008c64:	f886 3223 	strb.w	r3, [r6, #547]	; 0x223
 8008c68:	f506 7509 	add.w	r5, r6, #548	; 0x224
 8008c6c:	46a6      	mov	lr, r4
 8008c6e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008c72:	45e6      	cmp	lr, ip
 8008c74:	6028      	str	r0, [r5, #0]
 8008c76:	6069      	str	r1, [r5, #4]
 8008c78:	60aa      	str	r2, [r5, #8]
 8008c7a:	60eb      	str	r3, [r5, #12]
 8008c7c:	4674      	mov	r4, lr
 8008c7e:	f105 0510 	add.w	r5, r5, #16
 8008c82:	d1f3      	bne.n	8008c6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x400>
 8008c84:	cc03      	ldmia	r4!, {r0, r1}
    message_out[1] = PROTOCOL_VER;
 8008c86:	23fe      	movs	r3, #254	; 0xfe
 8008c88:	6028      	str	r0, [r5, #0]
 8008c8a:	6069      	str	r1, [r5, #4]
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8008c8c:	203d      	movs	r0, #61	; 0x3d
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8008c8e:	2200      	movs	r2, #0
    message_out[0] = 0xff;
 8008c90:	24ff      	movs	r4, #255	; 0xff
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8008c92:	21c2      	movs	r1, #194	; 0xc2
    message_out[1] = PROTOCOL_VER;
 8008c94:	f886 3219 	strb.w	r3, [r6, #537]	; 0x219
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8008c98:	2307      	movs	r3, #7
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8008c9a:	f886 021a 	strb.w	r0, [r6, #538]	; 0x21a
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8008c9e:	f886 321d 	strb.w	r3, [r6, #541]	; 0x21d
    message_out[0] = 0xff;
 8008ca2:	f886 4218 	strb.w	r4, [r6, #536]	; 0x218
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8008ca6:	f886 221b 	strb.w	r2, [r6, #539]	; 0x21b
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8008caa:	f886 221e 	strb.w	r2, [r6, #542]	; 0x21e
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8008cae:	f886 121c 	strb.w	r1, [r6, #540]	; 0x21c
 8008cb2:	f506 7307 	add.w	r3, r6, #540	; 0x21c
 8008cb6:	f206 205b 	addw	r0, r6, #603	; 0x25b
      chk += message_out[i];
 8008cba:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 8008cbe:	4298      	cmp	r0, r3
      chk += message_out[i];
 8008cc0:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
 8008cc2:	d1fa      	bne.n	8008cba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x44e>
    message_out[l++] = 255 - (chk % 256);
 8008cc4:	43d2      	mvns	r2, r2
 8008cc6:	f886 225c 	strb.w	r2, [r6, #604]	; 0x25c
 8008cca:	2145      	movs	r1, #69	; 0x45
 8008ccc:	f506 7006 	add.w	r0, r6, #536	; 0x218
 8008cd0:	f7fe fbda 	bl	8007488 <CDC_Transmit_FS>
 8008cd4:	e698      	b.n	8008a08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x19c>
    l.level = byte;
 8008cd6:	2203      	movs	r2, #3
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8008cd8:	6833      	ldr	r3, [r6, #0]
    l.level = byte;
 8008cda:	f88d 2010 	strb.w	r2, [sp, #16]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8008cde:	681b      	ldr	r3, [r3, #0]
      msg("")
 8008ce0:	492b      	ldr	r1, [pc, #172]	; (8008d90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x524>)
    l.msg = (char*)msg;
 8008ce2:	4c2c      	ldr	r4, [pc, #176]	; (8008d94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x528>)
 8008ce4:	9103      	str	r1, [sp, #12]
 8008ce6:	455b      	cmp	r3, fp
 8008ce8:	9405      	str	r4, [sp, #20]
 8008cea:	d144      	bne.n	8008d76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x50a>
 8008cec:	2300      	movs	r3, #0
 8008cee:	2138      	movs	r1, #56	; 0x38
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8008cf0:	f886 221f 	strb.w	r2, [r6, #543]	; 0x21f
      memcpy(outbuffer + offset, this->msg, length_msg);
 8008cf4:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8008cf8:	f886 1220 	strb.w	r1, [r6, #544]	; 0x220
 8008cfc:	f886 3221 	strb.w	r3, [r6, #545]	; 0x221
 8008d00:	f886 3222 	strb.w	r3, [r6, #546]	; 0x222
 8008d04:	f886 3223 	strb.w	r3, [r6, #547]	; 0x223
 8008d08:	f506 7509 	add.w	r5, r6, #548	; 0x224
 8008d0c:	46a6      	mov	lr, r4
 8008d0e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008d12:	45e6      	cmp	lr, ip
 8008d14:	6028      	str	r0, [r5, #0]
 8008d16:	6069      	str	r1, [r5, #4]
 8008d18:	60aa      	str	r2, [r5, #8]
 8008d1a:	60eb      	str	r3, [r5, #12]
 8008d1c:	4674      	mov	r4, lr
 8008d1e:	f105 0510 	add.w	r5, r5, #16
 8008d22:	d1f3      	bne.n	8008d0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x4a0>
 8008d24:	cc03      	ldmia	r4!, {r0, r1}
    message_out[1] = PROTOCOL_VER;
 8008d26:	23fe      	movs	r3, #254	; 0xfe
 8008d28:	6028      	str	r0, [r5, #0]
 8008d2a:	6069      	str	r1, [r5, #4]
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8008d2c:	203d      	movs	r0, #61	; 0x3d
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8008d2e:	2200      	movs	r2, #0
    message_out[0] = 0xff;
 8008d30:	24ff      	movs	r4, #255	; 0xff
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8008d32:	21c2      	movs	r1, #194	; 0xc2
    message_out[1] = PROTOCOL_VER;
 8008d34:	f886 3219 	strb.w	r3, [r6, #537]	; 0x219
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8008d38:	2307      	movs	r3, #7
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8008d3a:	f886 021a 	strb.w	r0, [r6, #538]	; 0x21a
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8008d3e:	f886 321d 	strb.w	r3, [r6, #541]	; 0x21d
    message_out[0] = 0xff;
 8008d42:	f886 4218 	strb.w	r4, [r6, #536]	; 0x218
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8008d46:	f886 221b 	strb.w	r2, [r6, #539]	; 0x21b
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8008d4a:	f886 221e 	strb.w	r2, [r6, #542]	; 0x21e
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8008d4e:	f886 121c 	strb.w	r1, [r6, #540]	; 0x21c
 8008d52:	f506 7307 	add.w	r3, r6, #540	; 0x21c
 8008d56:	f206 205b 	addw	r0, r6, #603	; 0x25b
      chk += message_out[i];
 8008d5a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 8008d5e:	4283      	cmp	r3, r0
      chk += message_out[i];
 8008d60:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
 8008d62:	d1fa      	bne.n	8008d5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x4ee>
    message_out[l++] = 255 - (chk % 256);
 8008d64:	43d2      	mvns	r2, r2
 8008d66:	f886 225c 	strb.w	r2, [r6, #604]	; 0x25c
 8008d6a:	2145      	movs	r1, #69	; 0x45
 8008d6c:	f506 7006 	add.w	r0, r6, #536	; 0x218
 8008d70:	f7fe fb8a 	bl	8007488 <CDC_Transmit_FS>
 8008d74:	e71e      	b.n	8008bb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x348>
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8008d76:	aa03      	add	r2, sp, #12
 8008d78:	2107      	movs	r1, #7
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	4798      	blx	r3
 8008d7e:	e719      	b.n	8008bb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x348>
 8008d80:	aa03      	add	r2, sp, #12
 8008d82:	2107      	movs	r1, #7
 8008d84:	4630      	mov	r0, r6
 8008d86:	4798      	blx	r3
 8008d88:	e63e      	b.n	8008a08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x19c>
 8008d8a:	bf00      	nop
 8008d8c:	08007c51 	.word	0x08007c51
 8008d90:	0800a3c4 	.word	0x0800a3c4
 8008d94:	0800a550 	.word	0x0800a550
 8008d98:	08008099 	.word	0x08008099

08008d9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8008d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da0:	4604      	mov	r4, r0
 8008da2:	b08b      	sub	sp, #44	; 0x2c
		return HAL_GetTick();
 8008da4:	f7f8 fb50 	bl	8001448 <HAL_GetTick>
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8008da8:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
 8008dac:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8008db0:	1ac3      	subs	r3, r0, r3
 8008db2:	4293      	cmp	r3, r2
      configured_ = false;
 8008db4:	bf84      	itt	hi
 8008db6:	2300      	movhi	r3, #0
 8008db8:	f884 34f4 	strbhi.w	r3, [r4, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8008dbc:	f8d4 34e0 	ldr.w	r3, [r4, #1248]	; 0x4e0
 8008dc0:	4607      	mov	r7, r0
 8008dc2:	b133      	cbz	r3, 8008dd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      if (c_time > last_msg_timeout_time)
 8008dc4:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
 8008dc8:	4283      	cmp	r3, r0
        mode_ = MODE_FIRST_FF;
 8008dca:	bf3c      	itt	cc
 8008dcc:	2300      	movcc	r3, #0
 8008dce:	f8c4 34e0 	strcc.w	r3, [r4, #1248]	; 0x4e0
		r = ringbuffer_getchar(&rb, &ch);
 8008dd2:	4ea0      	ldr	r6, [pc, #640]	; (8009054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2b8>)
 8008dd4:	f8df a290 	ldr.w	sl, [pc, #656]	; 8009068 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2cc>
    t.data.sec += offset / 1000;
 8008dd8:	f8df b290 	ldr.w	fp, [pc, #656]	; 800906c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
      if (spin_timeout_ > 0)
 8008ddc:	6963      	ldr	r3, [r4, #20]
 8008dde:	b133      	cbz	r3, 8008dee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52>
		return HAL_GetTick();
 8008de0:	f7f8 fb32 	bl	8001448 <HAL_GetTick>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8008de4:	6963      	ldr	r3, [r4, #20]
 8008de6:	1bc0      	subs	r0, r0, r7
 8008de8:	4298      	cmp	r0, r3
 8008dea:	f200 80f4 	bhi.w	8008fd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x23a>
		uint8_t ch = -1;
 8008dee:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8008df2:	23ff      	movs	r3, #255	; 0xff
 8008df4:	f808 3d0c 	strb.w	r3, [r8, #-12]!
		r = ringbuffer_getchar(&rb, &ch);
 8008df8:	4630      	mov	r0, r6
 8008dfa:	4641      	mov	r1, r8
 8008dfc:	f000 fe2c 	bl	8009a58 <_Z18ringbuffer_getcharP10ringbufferPh>
		if (1 == r)
 8008e00:	2801      	cmp	r0, #1
 8008e02:	d00e      	beq.n	8008e22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x86>
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8008e04:	f894 04f4 	ldrb.w	r0, [r4, #1268]	; 0x4f4
 8008e08:	b140      	cbz	r0, 8008e1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
 8008e0a:	f8d4 34f8 	ldr.w	r3, [r4, #1272]	; 0x4f8
 8008e0e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008e12:	1afb      	subs	r3, r7, r3
 8008e14:	4293      	cmp	r3, r2
 8008e16:	f200 80e3 	bhi.w	8008fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
    return SPIN_OK;
 8008e1a:	2000      	movs	r0, #0
  }
 8008e1c:	b00b      	add	sp, #44	; 0x2c
 8008e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      checksum_ += data;
 8008e22:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
			return ch;
 8008e26:	f89d 201c 	ldrb.w	r2, [sp, #28]
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8008e2a:	f8d4 54e0 	ldr.w	r5, [r4, #1248]	; 0x4e0
      checksum_ += data;
 8008e2e:	4413      	add	r3, r2
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8008e30:	2d07      	cmp	r5, #7
      checksum_ += data;
 8008e32:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8008e36:	d047      	beq.n	8008ec8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
      else if (mode_ == MODE_FIRST_FF)
 8008e38:	b945      	cbnz	r5, 8008e4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xb0>
        if (data == 0xff)
 8008e3a:	2aff      	cmp	r2, #255	; 0xff
 8008e3c:	d157      	bne.n	8008eee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x152>
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8008e3e:	f107 0314 	add.w	r3, r7, #20
          mode_++;
 8008e42:	f8c4 04e0 	str.w	r0, [r4, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8008e46:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
 8008e4a:	e7c7      	b.n	8008ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
      else if (mode_ == MODE_PROTOCOL_VER)
 8008e4c:	2d01      	cmp	r5, #1
 8008e4e:	d05d      	beq.n	8008f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x170>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8008e50:	2d02      	cmp	r5, #2
 8008e52:	f000 8085 	beq.w	8008f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1c4>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8008e56:	2d03      	cmp	r5, #3
 8008e58:	f000 808d 	beq.w	8008f76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1da>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8008e5c:	2d04      	cmp	r5, #4
 8008e5e:	f000 8094 	beq.w	8008f8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1ee>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8008e62:	2d05      	cmp	r5, #5
 8008e64:	f000 80a1 	beq.w	8008faa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x20e>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8008e68:	2d06      	cmp	r5, #6
 8008e6a:	f000 80a6 	beq.w	8008fba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21e>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8008e6e:	2d08      	cmp	r5, #8
 8008e70:	d1b4      	bne.n	8008ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
        if ((checksum_ % 256) == 255)
 8008e72:	425a      	negs	r2, r3
 8008e74:	b2d2      	uxtb	r2, r2
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	bf58      	it	pl
 8008e7a:	4253      	negpl	r3, r2
 8008e7c:	2bff      	cmp	r3, #255	; 0xff
        mode_ = MODE_FIRST_FF;
 8008e7e:	f04f 0200 	mov.w	r2, #0
 8008e82:	f8c4 24e0 	str.w	r2, [r4, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 8008e86:	d1a9      	bne.n	8008ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8008e88:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f000 821e 	beq.w	80092ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x532>
          else if (topic_ == TopicInfo::ID_TIME)
 8008e92:	2b0a      	cmp	r3, #10
 8008e94:	f000 81e8 	beq.w	8009268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4cc>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8008e98:	2b06      	cmp	r3, #6
 8008e9a:	f000 80e9 	beq.w	8009070 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8008e9e:	2b0b      	cmp	r3, #11
 8008ea0:	f000 80d4 	beq.w	800904c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2b0>
            if (subscribers[topic_ - 100])
 8008ea4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ea8:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008eac:	2800      	cmp	r0, #0
 8008eae:	d095      	beq.n	8008ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
              subscribers[topic_ - 100]->callback(message_in);
 8008eb0:	6803      	ldr	r3, [r0, #0]
 8008eb2:	4a69      	ldr	r2, [pc, #420]	; (8009058 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2bc>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	f040 8205 	bne.w	80092c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52a>
 8008ebc:	7e23      	ldrb	r3, [r4, #24]
 8008ebe:	7403      	strb	r3, [r0, #16]
    this->cb_(msg);
 8008ec0:	6943      	ldr	r3, [r0, #20]
 8008ec2:	300c      	adds	r0, #12
 8008ec4:	4798      	blx	r3
 8008ec6:	e789      	b.n	8008ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
        message_in[index_++] = data;
 8008ec8:	f8d4 34ec 	ldr.w	r3, [r4, #1260]	; 0x4ec
 8008ecc:	18e1      	adds	r1, r4, r3
 8008ece:	3301      	adds	r3, #1
 8008ed0:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
 8008ed4:	760a      	strb	r2, [r1, #24]
        bytes_--;
 8008ed6:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
 8008eda:	3b01      	subs	r3, #1
 8008edc:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	f47f af7b 	bne.w	8008ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
          mode_ = MODE_MSG_CHECKSUM;
 8008ee6:	2308      	movs	r3, #8
 8008ee8:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 8008eec:	e776      	b.n	8008ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
		return HAL_GetTick();
 8008eee:	f7f8 faab 	bl	8001448 <HAL_GetTick>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8008ef2:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ef6:	1bc0      	subs	r0, r0, r7
 8008ef8:	4298      	cmp	r0, r3
 8008efa:	f67f af6f 	bls.w	8008ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
          return SPIN_TIMEOUT;
 8008efe:	f06f 0001 	mvn.w	r0, #1
          configured_ = false;
 8008f02:	f884 54f4 	strb.w	r5, [r4, #1268]	; 0x4f4
  }
 8008f06:	b00b      	add	sp, #44	; 0x2c
 8008f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (data == PROTOCOL_VER)
 8008f0c:	2afe      	cmp	r2, #254	; 0xfe
 8008f0e:	d048      	beq.n	8008fa2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x206>
          if (configured_ == false)
 8008f10:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
          mode_ = MODE_FIRST_FF;
 8008f14:	2200      	movs	r2, #0
 8008f16:	f8c4 24e0 	str.w	r2, [r4, #1248]	; 0x4e0
          if (configured_ == false)
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f47f af5e 	bne.w	8008ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
    publish(TopicInfo::ID_TIME, &t);
 8008f20:	6821      	ldr	r1, [r4, #0]
 8008f22:	4a4e      	ldr	r2, [pc, #312]	; (800905c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>)
 8008f24:	680d      	ldr	r5, [r1, #0]
      data()
 8008f26:	494e      	ldr	r1, [pc, #312]	; (8009060 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c4>)
 8008f28:	9308      	str	r3, [sp, #32]
 8008f2a:	4295      	cmp	r5, r2
 8008f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f2e:	9107      	str	r1, [sp, #28]
 8008f30:	f040 8082 	bne.w	8009038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x29c>
    message_out[0] = 0xff;
 8008f34:	494b      	ldr	r1, [pc, #300]	; (8009064 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c8>)
 8008f36:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
 8008f3a:	f640 22f7 	movw	r2, #2807	; 0xaf7
 8008f3e:	f04f 4375 	mov.w	r3, #4110417920	; 0xf5000000
 8008f42:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
 8008f46:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
 8008f4a:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
		CDC_Transmit_FS(data, length);
 8008f4e:	2110      	movs	r1, #16
 8008f50:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8008f54:	f7fe fa98 	bl	8007488 <CDC_Transmit_FS>
		return HAL_GetTick();
 8008f58:	f7f8 fa76 	bl	8001448 <HAL_GetTick>
    rt_time = hardware_.time();
 8008f5c:	60a0      	str	r0, [r4, #8]
 8008f5e:	e73d      	b.n	8008ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
        index_ = 0;
 8008f60:	2100      	movs	r1, #0
        mode_++;
 8008f62:	2303      	movs	r3, #3
        bytes_ = data;
 8008f64:	f8c4 24e4 	str.w	r2, [r4, #1252]	; 0x4e4
        checksum_ = data;               /* first byte for calculating size checksum */
 8008f68:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
        index_ = 0;
 8008f6c:	f8c4 14ec 	str.w	r1, [r4, #1260]	; 0x4ec
        mode_++;
 8008f70:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 8008f74:	e732      	b.n	8008ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
        bytes_ += data << 8;
 8008f76:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
        mode_++;
 8008f7a:	2104      	movs	r1, #4
        bytes_ += data << 8;
 8008f7c:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8008f80:	f8c4 24e4 	str.w	r2, [r4, #1252]	; 0x4e4
        mode_++;
 8008f84:	f8c4 14e0 	str.w	r1, [r4, #1248]	; 0x4e0
 8008f88:	e728      	b.n	8008ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
        if ((checksum_ % 256) == 255)
 8008f8a:	425a      	negs	r2, r3
 8008f8c:	b2d2      	uxtb	r2, r2
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	bf58      	it	pl
 8008f92:	4253      	negpl	r3, r2
 8008f94:	2bff      	cmp	r3, #255	; 0xff
          mode_++;
 8008f96:	bf0c      	ite	eq
 8008f98:	2305      	moveq	r3, #5
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8008f9a:	2300      	movne	r3, #0
 8008f9c:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 8008fa0:	e71c      	b.n	8008ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
          mode_++;
 8008fa2:	2302      	movs	r3, #2
 8008fa4:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 8008fa8:	e718      	b.n	8008ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
        mode_++;
 8008faa:	2306      	movs	r3, #6
        topic_ = data;
 8008fac:	f8c4 24e8 	str.w	r2, [r4, #1256]	; 0x4e8
        checksum_ = data;               /* first byte included in checksum */
 8008fb0:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
        mode_++;
 8008fb4:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 8008fb8:	e710      	b.n	8008ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
        topic_ += data << 8;
 8008fba:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
        if (bytes_ == 0)
 8008fbe:	f8d4 14e4 	ldr.w	r1, [r4, #1252]	; 0x4e4
        topic_ += data << 8;
 8008fc2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
        mode_ = MODE_MESSAGE;
 8008fc6:	2207      	movs	r2, #7
        topic_ += data << 8;
 8008fc8:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 8008fcc:	f8c4 24e0 	str.w	r2, [r4, #1248]	; 0x4e0
        if (bytes_ == 0)
 8008fd0:	2900      	cmp	r1, #0
 8008fd2:	d088      	beq.n	8008ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x14a>
 8008fd4:	e702      	b.n	8008ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
          return SPIN_TIMEOUT;
 8008fd6:	f06f 0001 	mvn.w	r0, #1
  }
 8008fda:	b00b      	add	sp, #44	; 0x2c
 8008fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    publish(TopicInfo::ID_TIME, &t);
 8008fe0:	6823      	ldr	r3, [r4, #0]
 8008fe2:	4a1e      	ldr	r2, [pc, #120]	; (800905c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>)
 8008fe4:	681d      	ldr	r5, [r3, #0]
 8008fe6:	4b1e      	ldr	r3, [pc, #120]	; (8009060 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c4>)
 8008fe8:	9307      	str	r3, [sp, #28]
 8008fea:	4295      	cmp	r5, r2
 8008fec:	f04f 0300 	mov.w	r3, #0
 8008ff0:	9308      	str	r3, [sp, #32]
 8008ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ff4:	d125      	bne.n	8009042 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2a6>
    message_out[0] = 0xff;
 8008ff6:	481b      	ldr	r0, [pc, #108]	; (8009064 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c8>)
 8008ff8:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
 8008ffc:	f640 21f7 	movw	r1, #2807	; 0xaf7
    message_out[l++] = 255 - (chk % 256);
 8009000:	f06f 020a 	mvn.w	r2, #10
    message_out[0] = 0xff;
 8009004:	f8c4 121c 	str.w	r1, [r4, #540]	; 0x21c
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8009008:	f884 3224 	strb.w	r3, [r4, #548]	; 0x224
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800900c:	f884 3225 	strb.w	r3, [r4, #549]	; 0x225
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8009010:	f884 3226 	strb.w	r3, [r4, #550]	; 0x226
 8009014:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
    message_out[l++] = 255 - (chk % 256);
 8009018:	f884 2227 	strb.w	r2, [r4, #551]	; 0x227
		CDC_Transmit_FS(data, length);
 800901c:	2110      	movs	r1, #16
 800901e:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8009022:	f7fe fa31 	bl	8007488 <CDC_Transmit_FS>
		return HAL_GetTick();
 8009026:	f7f8 fa0f 	bl	8001448 <HAL_GetTick>
    rt_time = hardware_.time();
 800902a:	60a0      	str	r0, [r4, #8]
    return SPIN_OK;
 800902c:	2000      	movs	r0, #0
      last_sync_time = c_time;
 800902e:	f8c4 74f8 	str.w	r7, [r4, #1272]	; 0x4f8
  }
 8009032:	b00b      	add	sp, #44	; 0x2c
 8009034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    publish(TopicInfo::ID_TIME, &t);
 8009038:	4642      	mov	r2, r8
 800903a:	210a      	movs	r1, #10
 800903c:	4620      	mov	r0, r4
 800903e:	47a8      	blx	r5
 8009040:	e78a      	b.n	8008f58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
 8009042:	4642      	mov	r2, r8
 8009044:	210a      	movs	r1, #10
 8009046:	4620      	mov	r0, r4
 8009048:	47a8      	blx	r5
 800904a:	e7ec      	b.n	8009026 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x28a>
            configured_ = false;
 800904c:	f884 24f4 	strb.w	r2, [r4, #1268]	; 0x4f4
 8009050:	e6c4      	b.n	8008ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
 8009052:	bf00      	nop
 8009054:	20000200 	.word	0x20000200
 8009058:	08007c39 	.word	0x08007c39
 800905c:	08008099 	.word	0x08008099
 8009060:	0800a394 	.word	0x0800a394
 8009064:	0008feff 	.word	0x0008feff
 8009068:	3b9aca00 	.word	0x3b9aca00
 800906c:	10624dd3 	.word	0x10624dd3
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8009070:	f8d4 9018 	ldr.w	r9, [r4, #24]
      if(ints_lengthT > ints_length)
 8009074:	f8d4 350c 	ldr.w	r3, [r4, #1292]	; 0x50c
 8009078:	4599      	cmp	r9, r3
            req_param_resp.deserialize(message_in);
 800907a:	f104 0818 	add.w	r8, r4, #24
 800907e:	d907      	bls.n	8009090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8009080:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8009084:	f8d4 0514 	ldr.w	r0, [r4, #1300]	; 0x514
 8009088:	f000 ff62 	bl	8009f50 <realloc>
 800908c:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
      ints_length = ints_lengthT;
 8009090:	f8c4 950c 	str.w	r9, [r4, #1292]	; 0x50c
      for( uint32_t i = 0; i < ints_length; i++){
 8009094:	f1b9 0f00 	cmp.w	r9, #0
 8009098:	f000 8130 	beq.w	80092fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x560>
 800909c:	4640      	mov	r0, r8
 800909e:	2104      	movs	r1, #4
 80090a0:	2500      	movs	r5, #0
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80090a2:	7983      	ldrb	r3, [r0, #6]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80090a4:	f890 e005 	ldrb.w	lr, [r0, #5]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80090a8:	7902      	ldrb	r2, [r0, #4]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80090aa:	041b      	lsls	r3, r3, #16
 80090ac:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80090b0:	f890 e007 	ldrb.w	lr, [r0, #7]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80090b4:	4313      	orrs	r3, r2
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80090b6:	f8d4 2514 	ldr.w	r2, [r4, #1300]	; 0x514
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80090ba:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
      this->st_ints = u_st_ints.real;
 80090be:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80090c2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
      for( uint32_t i = 0; i < ints_length; i++){
 80090c6:	f8d4 350c 	ldr.w	r3, [r4, #1292]	; 0x50c
 80090ca:	3501      	adds	r5, #1
 80090cc:	42ab      	cmp	r3, r5
 80090ce:	460a      	mov	r2, r1
 80090d0:	f100 0004 	add.w	r0, r0, #4
 80090d4:	f101 0104 	add.w	r1, r1, #4
 80090d8:	d8e3      	bhi.n	80090a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x306>
 80090da:	f102 0309 	add.w	r3, r2, #9
 80090de:	f102 0508 	add.w	r5, r2, #8
 80090e2:	4689      	mov	r9, r1
 80090e4:	f102 010b 	add.w	r1, r2, #11
 80090e8:	1d50      	adds	r0, r2, #5
 80090ea:	f102 0e06 	add.w	lr, r2, #6
 80090ee:	f102 0c07 	add.w	ip, r2, #7
 80090f2:	9301      	str	r3, [sp, #4]
 80090f4:	9503      	str	r5, [sp, #12]
 80090f6:	f102 030a 	add.w	r3, r2, #10
 80090fa:	9102      	str	r1, [sp, #8]
 80090fc:	320c      	adds	r2, #12
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80090fe:	f818 e00e 	ldrb.w	lr, [r8, lr]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8009102:	f818 0000 	ldrb.w	r0, [r8, r0]
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8009106:	f818 9009 	ldrb.w	r9, [r8, r9]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800910a:	f818 c00c 	ldrb.w	ip, [r8, ip]
      if(floats_lengthT > floats_length)
 800910e:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8009112:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8009116:	ea4e 2e00 	orr.w	lr, lr, r0, lsl #8
 800911a:	ea4e 0909 	orr.w	r9, lr, r9
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800911e:	ea49 690c 	orr.w	r9, r9, ip, lsl #24
      if(floats_lengthT > floats_length)
 8009122:	4589      	cmp	r9, r1
 8009124:	d90b      	bls.n	800913e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8009126:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800912a:	f8d4 0520 	ldr.w	r0, [r4, #1312]	; 0x520
 800912e:	9205      	str	r2, [sp, #20]
 8009130:	9304      	str	r3, [sp, #16]
 8009132:	f000 ff0d 	bl	8009f50 <realloc>
 8009136:	9a05      	ldr	r2, [sp, #20]
 8009138:	9b04      	ldr	r3, [sp, #16]
 800913a:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
      floats_length = floats_lengthT;
 800913e:	f8c4 9518 	str.w	r9, [r4, #1304]	; 0x518
      for( uint32_t i = 0; i < floats_length; i++){
 8009142:	f1b9 0f00 	cmp.w	r9, #0
 8009146:	d027      	beq.n	8009198 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
 8009148:	eb08 0105 	add.w	r1, r8, r5
 800914c:	2000      	movs	r0, #0
 800914e:	f504 6ea1 	add.w	lr, r4, #1288	; 0x508
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009152:	788b      	ldrb	r3, [r1, #2]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8009154:	f891 c001 	ldrb.w	ip, [r1, #1]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8009158:	780a      	ldrb	r2, [r1, #0]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800915a:	041b      	lsls	r3, r3, #16
 800915c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009160:	f891 c003 	ldrb.w	ip, [r1, #3]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009164:	4313      	orrs	r3, r2
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8009166:	f8d4 2520 	ldr.w	r2, [r4, #1312]	; 0x520
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800916a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
      this->st_floats = u_st_floats.real;
 800916e:	f8ce 3014 	str.w	r3, [lr, #20]
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8009172:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
      for( uint32_t i = 0; i < floats_length; i++){
 8009176:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
 800917a:	3001      	adds	r0, #1
 800917c:	4283      	cmp	r3, r0
 800917e:	462a      	mov	r2, r5
 8009180:	f101 0104 	add.w	r1, r1, #4
 8009184:	f105 0504 	add.w	r5, r5, #4
 8009188:	d8e3      	bhi.n	8009152 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b6>
 800918a:	1d53      	adds	r3, r2, #5
 800918c:	1dd1      	adds	r1, r2, #7
 800918e:	9301      	str	r3, [sp, #4]
 8009190:	9503      	str	r5, [sp, #12]
 8009192:	1d93      	adds	r3, r2, #6
 8009194:	9102      	str	r1, [sp, #8]
 8009196:	3208      	adds	r2, #8
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8009198:	f818 1003 	ldrb.w	r1, [r8, r3]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800919c:	9b01      	ldr	r3, [sp, #4]
 800919e:	f818 5003 	ldrb.w	r5, [r8, r3]
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80091a2:	9b03      	ldr	r3, [sp, #12]
 80091a4:	f818 e003 	ldrb.w	lr, [r8, r3]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80091a8:	9b02      	ldr	r3, [sp, #8]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80091aa:	0409      	lsls	r1, r1, #16
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80091ac:	f818 0003 	ldrb.w	r0, [r8, r3]
      if(strings_lengthT > strings_length)
 80091b0:	f8d4 3524 	ldr.w	r3, [r4, #1316]	; 0x524
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80091b4:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
 80091b8:	ea45 050e 	orr.w	r5, r5, lr
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80091bc:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
      if(strings_lengthT > strings_length)
 80091c0:	429d      	cmp	r5, r3
 80091c2:	d908      	bls.n	80091d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x43a>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80091c4:	00a9      	lsls	r1, r5, #2
 80091c6:	f8d4 052c 	ldr.w	r0, [r4, #1324]	; 0x52c
 80091ca:	9201      	str	r2, [sp, #4]
 80091cc:	f000 fec0 	bl	8009f50 <realloc>
 80091d0:	9a01      	ldr	r2, [sp, #4]
 80091d2:	f8c4 052c 	str.w	r0, [r4, #1324]	; 0x52c
      strings_length = strings_lengthT;
 80091d6:	f8c4 5524 	str.w	r5, [r4, #1316]	; 0x524
      for( uint32_t i = 0; i < strings_length; i++){
 80091da:	2d00      	cmp	r5, #0
 80091dc:	d040      	beq.n	8009260 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c4>
 80091de:	2300      	movs	r3, #0
          inbuffer[k-1]=inbuffer[k];
 80091e0:	9701      	str	r7, [sp, #4]
 80091e2:	461f      	mov	r7, r3
      var |= (arr[i] << (8 * i));
 80091e4:	eb08 0002 	add.w	r0, r8, r2
 80091e8:	f818 e002 	ldrb.w	lr, [r8, r2]
 80091ec:	7885      	ldrb	r5, [r0, #2]
 80091ee:	f890 c001 	ldrb.w	ip, [r0, #1]
 80091f2:	78c0      	ldrb	r0, [r0, #3]
 80091f4:	042d      	lsls	r5, r5, #16
 80091f6:	ea45 250c 	orr.w	r5, r5, ip, lsl #8
 80091fa:	ea45 050e 	orr.w	r5, r5, lr
      offset += 4;
 80091fe:	f102 0904 	add.w	r9, r2, #4
 8009202:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
          inbuffer[k-1]=inbuffer[k];
 8009206:	f06f 0103 	mvn.w	r1, #3
 800920a:	1a89      	subs	r1, r1, r2
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800920c:	444d      	add	r5, r9
          inbuffer[k-1]=inbuffer[k];
 800920e:	eb01 0e05 	add.w	lr, r1, r5
 8009212:	f102 0c05 	add.w	ip, r2, #5
 8009216:	f102 011c 	add.w	r1, r2, #28
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800921a:	45a9      	cmp	r9, r5
          inbuffer[k-1]=inbuffer[k];
 800921c:	f102 021b 	add.w	r2, r2, #27
 8009220:	4421      	add	r1, r4
 8009222:	eb04 0002 	add.w	r0, r4, r2
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8009226:	d205      	bcs.n	8009234 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x498>
 8009228:	4565      	cmp	r5, ip
 800922a:	bf2c      	ite	cs
 800922c:	4672      	movcs	r2, lr
 800922e:	2201      	movcc	r2, #1
 8009230:	f000 fdbf 	bl	8009db2 <memmove>
      inbuffer[offset+length_st_strings-1]=0;
 8009234:	eb08 0105 	add.w	r1, r8, r5
 8009238:	f04f 0300 	mov.w	r3, #0
 800923c:	f801 3c01 	strb.w	r3, [r1, #-1]
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8009240:	f8d4 152c 	ldr.w	r1, [r4, #1324]	; 0x52c
      this->st_strings = (char *)(inbuffer + offset-1);
 8009244:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8009248:	4442      	add	r2, r8
 800924a:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800924e:	f841 2027 	str.w	r2, [r1, r7, lsl #2]
      for( uint32_t i = 0; i < strings_length; i++){
 8009252:	f8d4 1524 	ldr.w	r1, [r4, #1316]	; 0x524
 8009256:	3701      	adds	r7, #1
 8009258:	42b9      	cmp	r1, r7
      offset += length_st_strings;
 800925a:	462a      	mov	r2, r5
      for( uint32_t i = 0; i < strings_length; i++){
 800925c:	d8c2      	bhi.n	80091e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x448>
 800925e:	9f01      	ldr	r7, [sp, #4]
            param_recieved = true;
 8009260:	2301      	movs	r3, #1
 8009262:	f884 3504 	strb.w	r3, [r4, #1284]	; 0x504
 8009266:	e5b9      	b.n	8008ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
 8009268:	f7f8 f8ee 	bl	8001448 <HAL_GetTick>
    uint32_t offset = hardware_.time() - rt_time;
 800926c:	68a5      	ldr	r5, [r4, #8]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800926e:	f8d4 9018 	ldr.w	r9, [r4, #24]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009272:	f8d4 801c 	ldr.w	r8, [r4, #28]
 8009276:	1b45      	subs	r5, r0, r5
 8009278:	f7f8 f8e6 	bl	8001448 <HAL_GetTick>
    t.data.sec += offset / 1000;
 800927c:	fbab 3205 	umull	r3, r2, fp, r5
 8009280:	0992      	lsrs	r2, r2, #6
    t.data.nsec += (offset % 1000) * 1000000UL;
 8009282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009286:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800928a:	fb03 5112 	mls	r1, r3, r2, r5
 800928e:	f8df e090 	ldr.w	lr, [pc, #144]	; 8009320 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x584>
    sec_offset = new_now.sec - ms / 1000 - 1;
 8009292:	eb02 0509 	add.w	r5, r2, r9
 8009296:	fbab c200 	umull	ip, r2, fp, r0
 800929a:	0992      	lsrs	r2, r2, #6
 800929c:	44d0      	add	r8, sl
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800929e:	fb0e 8801 	mla	r8, lr, r1, r8
 80092a2:	fb03 0312 	mls	r3, r3, r2, r0
 80092a6:	4621      	mov	r1, r4
 80092a8:	fb0e 8313 	mls	r3, lr, r3, r8
    sec_offset = new_now.sec - ms / 1000 - 1;
 80092ac:	1aaa      	subs	r2, r5, r2
 80092ae:	60e2      	str	r2, [r4, #12]
    normalizeSecNSec(sec_offset, nsec_offset);
 80092b0:	f104 000c 	add.w	r0, r4, #12
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80092b4:	f841 3f10 	str.w	r3, [r1, #16]!
    normalizeSecNSec(sec_offset, nsec_offset);
 80092b8:	f7fe fb2a 	bl	8007910 <_ZN3ros16normalizeSecNSecERmS0_>
 80092bc:	f7f8 f8c4 	bl	8001448 <HAL_GetTick>
    last_sync_receive_time = hardware_.time();
 80092c0:	f8c4 04fc 	str.w	r0, [r4, #1276]	; 0x4fc
 80092c4:	e58a      	b.n	8008ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
              subscribers[topic_ - 100]->callback(message_in);
 80092c6:	f104 0118 	add.w	r1, r4, #24
 80092ca:	4798      	blx	r3
 80092cc:	e586      	b.n	8008ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
    publish(TopicInfo::ID_TIME, &t);
 80092ce:	6820      	ldr	r0, [r4, #0]
      data()
 80092d0:	4912      	ldr	r1, [pc, #72]	; (800931c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x580>)
 80092d2:	9308      	str	r3, [sp, #32]
 80092d4:	4642      	mov	r2, r8
 80092d6:	9309      	str	r3, [sp, #36]	; 0x24
 80092d8:	6803      	ldr	r3, [r0, #0]
 80092da:	9107      	str	r1, [sp, #28]
 80092dc:	4620      	mov	r0, r4
 80092de:	210a      	movs	r1, #10
 80092e0:	4798      	blx	r3
 80092e2:	f7f8 f8b1 	bl	8001448 <HAL_GetTick>
    rt_time = hardware_.time();
 80092e6:	60a0      	str	r0, [r4, #8]
            negotiateTopics();
 80092e8:	4620      	mov	r0, r4
 80092ea:	f7ff fabf 	bl	800886c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80092ee:	f8c4 74f8 	str.w	r7, [r4, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 80092f2:	f8c4 74fc 	str.w	r7, [r4, #1276]	; 0x4fc
            return SPIN_ERR;
 80092f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092fa:	e58f      	b.n	8008e1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
      for( uint32_t i = 0; i < ints_length; i++){
 80092fc:	2109      	movs	r1, #9
 80092fe:	230b      	movs	r3, #11
 8009300:	9101      	str	r1, [sp, #4]
 8009302:	2108      	movs	r1, #8
 8009304:	9302      	str	r3, [sp, #8]
 8009306:	220c      	movs	r2, #12
 8009308:	230a      	movs	r3, #10
 800930a:	9103      	str	r1, [sp, #12]
 800930c:	f04f 0c07 	mov.w	ip, #7
 8009310:	f04f 0e06 	mov.w	lr, #6
 8009314:	2005      	movs	r0, #5
 8009316:	f04f 0904 	mov.w	r9, #4
 800931a:	e6f0      	b.n	80090fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x362>
 800931c:	0800a394 	.word	0x0800a394
 8009320:	000f4240 	.word	0x000f4240

08009324 <spinOnce>:


extern "C" void spinOnce(void)
{
 8009324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//nh.spinOnce();
	  if (NBT_handler(&ros_nbt))
 8009328:	4cb2      	ldr	r4, [pc, #712]	; (80095f4 <spinOnce+0x2d0>)
{
 800932a:	b089      	sub	sp, #36	; 0x24
	  if (NBT_handler(&ros_nbt))
 800932c:	f204 50b4 	addw	r0, r4, #1460	; 0x5b4
 8009330:	f000 fb3c 	bl	80099ac <_Z11NBT_handlerP5nbt_t>
 8009334:	b910      	cbnz	r0, 800933c <spinOnce+0x18>
	  {

		nh.spinOnce();

	  }
}
 8009336:	b009      	add	sp, #36	; 0x24
 8009338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800933c:	f7f8 f884 	bl	8001448 <HAL_GetTick>
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8009340:	f8d4 3508 	ldr.w	r3, [r4, #1288]	; 0x508
 8009344:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8009348:	1ac3      	subs	r3, r0, r3
 800934a:	4293      	cmp	r3, r2
      configured_ = false;
 800934c:	bf84      	itt	hi
 800934e:	2300      	movhi	r3, #0
 8009350:	f884 3500 	strbhi.w	r3, [r4, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 8009354:	f8d4 34ec 	ldr.w	r3, [r4, #1260]	; 0x4ec
 8009358:	4605      	mov	r5, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	f040 8101 	bne.w	8009562 <spinOnce+0x23e>
          inbuffer[k-1]=inbuffer[k];
 8009360:	4fa5      	ldr	r7, [pc, #660]	; (80095f8 <spinOnce+0x2d4>)
 8009362:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8009610 <spinOnce+0x2ec>
    t.data.sec += offset / 1000;
 8009366:	f8df a2ac 	ldr.w	sl, [pc, #684]	; 8009614 <spinOnce+0x2f0>
    normalizeSecNSec(sec_offset, nsec_offset);
 800936a:	f107 0b0c 	add.w	fp, r7, #12
      if (spin_timeout_ > 0)
 800936e:	6a23      	ldr	r3, [r4, #32]
 8009370:	b12b      	cbz	r3, 800937e <spinOnce+0x5a>
 8009372:	f7f8 f869 	bl	8001448 <HAL_GetTick>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8009376:	6a23      	ldr	r3, [r4, #32]
 8009378:	1b40      	subs	r0, r0, r5
 800937a:	4298      	cmp	r0, r3
 800937c:	d8db      	bhi.n	8009336 <spinOnce+0x12>
		uint8_t ch = -1;
 800937e:	a908      	add	r1, sp, #32
 8009380:	23ff      	movs	r3, #255	; 0xff
 8009382:	f801 3d01 	strb.w	r3, [r1, #-1]!
		r = ringbuffer_getchar(&rb, &ch);
 8009386:	489b      	ldr	r0, [pc, #620]	; (80095f4 <spinOnce+0x2d0>)
 8009388:	f000 fb66 	bl	8009a58 <_Z18ringbuffer_getcharP10ringbufferPh>
		if (1 == r)
 800938c:	2801      	cmp	r0, #1
 800938e:	d029      	beq.n	80093e4 <spinOnce+0xc0>
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8009390:	f894 3500 	ldrb.w	r3, [r4, #1280]	; 0x500
 8009394:	2b00      	cmp	r3, #0
 8009396:	d0ce      	beq.n	8009336 <spinOnce+0x12>
 8009398:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
 800939c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80093a0:	1aeb      	subs	r3, r5, r3
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d9c7      	bls.n	8009336 <spinOnce+0x12>
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80093a6:	2300      	movs	r3, #0
    message_out[l++] = 255 - (chk % 256);
 80093a8:	f06f 020a 	mvn.w	r2, #10
		CDC_Transmit_FS(data, length);
 80093ac:	2110      	movs	r1, #16
    message_out[0] = 0xff;
 80093ae:	4f93      	ldr	r7, [pc, #588]	; (80095fc <spinOnce+0x2d8>)
 80093b0:	f884 3230 	strb.w	r3, [r4, #560]	; 0x230
 80093b4:	f640 26f7 	movw	r6, #2807	; 0xaf7
 80093b8:	f504 7009 	add.w	r0, r4, #548	; 0x224
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80093bc:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80093c0:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
 80093c4:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
    message_out[l++] = 255 - (chk % 256);
 80093c8:	f884 2233 	strb.w	r2, [r4, #563]	; 0x233
    message_out[0] = 0xff;
 80093cc:	f8c4 7224 	str.w	r7, [r4, #548]	; 0x224
 80093d0:	f8c4 6228 	str.w	r6, [r4, #552]	; 0x228
 80093d4:	f7fe f858 	bl	8007488 <CDC_Transmit_FS>
		return HAL_GetTick();
 80093d8:	f7f8 f836 	bl	8001448 <HAL_GetTick>
      last_sync_time = c_time;
 80093dc:	f8c4 5504 	str.w	r5, [r4, #1284]	; 0x504
    rt_time = hardware_.time();
 80093e0:	6160      	str	r0, [r4, #20]
 80093e2:	e7a8      	b.n	8009336 <spinOnce+0x12>
      checksum_ += data;
 80093e4:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
			return ch;
 80093e8:	f89d 201f 	ldrb.w	r2, [sp, #31]
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80093ec:	f8d4 64ec 	ldr.w	r6, [r4, #1260]	; 0x4ec
      checksum_ += data;
 80093f0:	4413      	add	r3, r2
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80093f2:	2e07      	cmp	r6, #7
      checksum_ += data;
 80093f4:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80093f8:	d048      	beq.n	800948c <spinOnce+0x168>
      else if (mode_ == MODE_FIRST_FF)
 80093fa:	b946      	cbnz	r6, 800940e <spinOnce+0xea>
        if (data == 0xff)
 80093fc:	2aff      	cmp	r2, #255	; 0xff
 80093fe:	d159      	bne.n	80094b4 <spinOnce+0x190>
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8009400:	f105 0314 	add.w	r3, r5, #20
          mode_++;
 8009404:	f8c4 04ec 	str.w	r0, [r4, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8009408:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
 800940c:	e7af      	b.n	800936e <spinOnce+0x4a>
      else if (mode_ == MODE_PROTOCOL_VER)
 800940e:	2e01      	cmp	r6, #1
 8009410:	d05b      	beq.n	80094ca <spinOnce+0x1a6>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8009412:	2e02      	cmp	r6, #2
 8009414:	d078      	beq.n	8009508 <spinOnce+0x1e4>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8009416:	2e03      	cmp	r6, #3
 8009418:	f000 8081 	beq.w	800951e <spinOnce+0x1fa>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800941c:	2e04      	cmp	r6, #4
 800941e:	f000 8088 	beq.w	8009532 <spinOnce+0x20e>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8009422:	2e05      	cmp	r6, #5
 8009424:	f000 8095 	beq.w	8009552 <spinOnce+0x22e>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8009428:	2e06      	cmp	r6, #6
 800942a:	f000 80a2 	beq.w	8009572 <spinOnce+0x24e>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800942e:	2e08      	cmp	r6, #8
 8009430:	d19d      	bne.n	800936e <spinOnce+0x4a>
        if ((checksum_ % 256) == 255)
 8009432:	425a      	negs	r2, r3
 8009434:	b2d2      	uxtb	r2, r2
 8009436:	b2db      	uxtb	r3, r3
 8009438:	bf58      	it	pl
 800943a:	4253      	negpl	r3, r2
 800943c:	2bff      	cmp	r3, #255	; 0xff
        mode_ = MODE_FIRST_FF;
 800943e:	f04f 0200 	mov.w	r2, #0
 8009442:	f8c4 24ec 	str.w	r2, [r4, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 8009446:	d192      	bne.n	800936e <spinOnce+0x4a>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8009448:	f8d4 34f4 	ldr.w	r3, [r4, #1268]	; 0x4f4
 800944c:	2b00      	cmp	r3, #0
 800944e:	f000 81f9 	beq.w	8009844 <spinOnce+0x520>
          else if (topic_ == TopicInfo::ID_TIME)
 8009452:	2b0a      	cmp	r3, #10
 8009454:	f000 809e 	beq.w	8009594 <spinOnce+0x270>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8009458:	2b06      	cmp	r3, #6
 800945a:	f000 80df 	beq.w	800961c <spinOnce+0x2f8>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800945e:	2b0b      	cmp	r3, #11
 8009460:	f000 8095 	beq.w	800958e <spinOnce+0x26a>
            if (subscribers[topic_ - 100])
 8009464:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009468:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800946c:	2800      	cmp	r0, #0
 800946e:	f43f af7e 	beq.w	800936e <spinOnce+0x4a>
              subscribers[topic_ - 100]->callback(message_in);
 8009472:	6803      	ldr	r3, [r0, #0]
 8009474:	4a62      	ldr	r2, [pc, #392]	; (8009600 <spinOnce+0x2dc>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4293      	cmp	r3, r2
 800947a:	f040 80b7 	bne.w	80095ec <spinOnce+0x2c8>
 800947e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8009482:	7403      	strb	r3, [r0, #16]
 8009484:	6943      	ldr	r3, [r0, #20]
 8009486:	300c      	adds	r0, #12
 8009488:	4798      	blx	r3
 800948a:	e770      	b.n	800936e <spinOnce+0x4a>
        message_in[index_++] = data;
 800948c:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
        bytes_--;
 8009490:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
        message_in[index_++] = data;
 8009494:	1860      	adds	r0, r4, r1
        bytes_--;
 8009496:	3b01      	subs	r3, #1
        message_in[index_++] = data;
 8009498:	3101      	adds	r1, #1
 800949a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 800949e:	f8c4 14f8 	str.w	r1, [r4, #1272]	; 0x4f8
        bytes_--;
 80094a2:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f47f af61 	bne.w	800936e <spinOnce+0x4a>
          mode_ = MODE_MSG_CHECKSUM;
 80094ac:	2308      	movs	r3, #8
 80094ae:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
 80094b2:	e75c      	b.n	800936e <spinOnce+0x4a>
		return HAL_GetTick();
 80094b4:	f7f7 ffc8 	bl	8001448 <HAL_GetTick>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80094b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80094bc:	1b40      	subs	r0, r0, r5
 80094be:	4298      	cmp	r0, r3
 80094c0:	f67f af55 	bls.w	800936e <spinOnce+0x4a>
          configured_ = false;
 80094c4:	f884 6500 	strb.w	r6, [r4, #1280]	; 0x500
 80094c8:	e735      	b.n	8009336 <spinOnce+0x12>
        if (data == PROTOCOL_VER)
 80094ca:	2afe      	cmp	r2, #254	; 0xfe
 80094cc:	d03d      	beq.n	800954a <spinOnce+0x226>
          if (configured_ == false)
 80094ce:	f894 3500 	ldrb.w	r3, [r4, #1280]	; 0x500
          mode_ = MODE_FIRST_FF;
 80094d2:	2200      	movs	r2, #0
 80094d4:	f8c4 24ec 	str.w	r2, [r4, #1260]	; 0x4ec
          if (configured_ == false)
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f47f af48 	bne.w	800936e <spinOnce+0x4a>
    message_out[0] = 0xff;
 80094de:	4947      	ldr	r1, [pc, #284]	; (80095fc <spinOnce+0x2d8>)
 80094e0:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
 80094e4:	f640 22f7 	movw	r2, #2807	; 0xaf7
 80094e8:	f04f 4375 	mov.w	r3, #4110417920	; 0xf5000000
 80094ec:	f8c4 1224 	str.w	r1, [r4, #548]	; 0x224
		CDC_Transmit_FS(data, length);
 80094f0:	4844      	ldr	r0, [pc, #272]	; (8009604 <spinOnce+0x2e0>)
 80094f2:	f8c4 2228 	str.w	r2, [r4, #552]	; 0x228
 80094f6:	2110      	movs	r1, #16
 80094f8:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
 80094fc:	f7fd ffc4 	bl	8007488 <CDC_Transmit_FS>
		return HAL_GetTick();
 8009500:	f7f7 ffa2 	bl	8001448 <HAL_GetTick>
    rt_time = hardware_.time();
 8009504:	6160      	str	r0, [r4, #20]
 8009506:	e732      	b.n	800936e <spinOnce+0x4a>
        index_ = 0;
 8009508:	2100      	movs	r1, #0
        mode_++;
 800950a:	2303      	movs	r3, #3
        bytes_ = data;
 800950c:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
        checksum_ = data;               /* first byte for calculating size checksum */
 8009510:	f8c4 24fc 	str.w	r2, [r4, #1276]	; 0x4fc
        index_ = 0;
 8009514:	f8c4 14f8 	str.w	r1, [r4, #1272]	; 0x4f8
        mode_++;
 8009518:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
 800951c:	e727      	b.n	800936e <spinOnce+0x4a>
        bytes_ += data << 8;
 800951e:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
 8009522:	eb03 2202 	add.w	r2, r3, r2, lsl #8
        mode_++;
 8009526:	2304      	movs	r3, #4
        bytes_ += data << 8;
 8009528:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
        mode_++;
 800952c:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
 8009530:	e71d      	b.n	800936e <spinOnce+0x4a>
        if ((checksum_ % 256) == 255)
 8009532:	425a      	negs	r2, r3
 8009534:	b2d2      	uxtb	r2, r2
 8009536:	b2db      	uxtb	r3, r3
 8009538:	bf58      	it	pl
 800953a:	4253      	negpl	r3, r2
 800953c:	2bff      	cmp	r3, #255	; 0xff
          mode_++;
 800953e:	bf0c      	ite	eq
 8009540:	2305      	moveq	r3, #5
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8009542:	2300      	movne	r3, #0
 8009544:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
 8009548:	e711      	b.n	800936e <spinOnce+0x4a>
          mode_++;
 800954a:	2302      	movs	r3, #2
 800954c:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
 8009550:	e70d      	b.n	800936e <spinOnce+0x4a>
        mode_++;
 8009552:	2306      	movs	r3, #6
        topic_ = data;
 8009554:	f8c4 24f4 	str.w	r2, [r4, #1268]	; 0x4f4
        checksum_ = data;               /* first byte included in checksum */
 8009558:	f8c4 24fc 	str.w	r2, [r4, #1276]	; 0x4fc
        mode_++;
 800955c:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
 8009560:	e705      	b.n	800936e <spinOnce+0x4a>
      if (c_time > last_msg_timeout_time)
 8009562:	f8d4 350c 	ldr.w	r3, [r4, #1292]	; 0x50c
 8009566:	4298      	cmp	r0, r3
        mode_ = MODE_FIRST_FF;
 8009568:	bf84      	itt	hi
 800956a:	2300      	movhi	r3, #0
 800956c:	f8c4 34ec 	strhi.w	r3, [r4, #1260]	; 0x4ec
 8009570:	e6f6      	b.n	8009360 <spinOnce+0x3c>
        topic_ += data << 8;
 8009572:	f8d4 34f4 	ldr.w	r3, [r4, #1268]	; 0x4f4
        if (bytes_ == 0)
 8009576:	f8d4 14f0 	ldr.w	r1, [r4, #1264]	; 0x4f0
        topic_ += data << 8;
 800957a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
        mode_ = MODE_MESSAGE;
 800957e:	2207      	movs	r2, #7
        topic_ += data << 8;
 8009580:	f8c4 34f4 	str.w	r3, [r4, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 8009584:	f8c4 24ec 	str.w	r2, [r4, #1260]	; 0x4ec
        if (bytes_ == 0)
 8009588:	2900      	cmp	r1, #0
 800958a:	d08f      	beq.n	80094ac <spinOnce+0x188>
 800958c:	e6ef      	b.n	800936e <spinOnce+0x4a>
            configured_ = false;
 800958e:	f884 2500 	strb.w	r2, [r4, #1280]	; 0x500
 8009592:	e6ec      	b.n	800936e <spinOnce+0x4a>
 8009594:	f7f7 ff58 	bl	8001448 <HAL_GetTick>
 8009598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800959a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    uint32_t offset = hardware_.time() - rt_time;
 800959c:	6966      	ldr	r6, [r4, #20]
 800959e:	3b01      	subs	r3, #1
 80095a0:	1b86      	subs	r6, r0, r6
 80095a2:	9301      	str	r3, [sp, #4]
 80095a4:	eb02 0809 	add.w	r8, r2, r9
 80095a8:	f7f7 ff4e 	bl	8001448 <HAL_GetTick>
    t.data.sec += offset / 1000;
 80095ac:	fbaa 3106 	umull	r3, r1, sl, r6
    sec_offset = new_now.sec - ms / 1000 - 1;
 80095b0:	9b01      	ldr	r3, [sp, #4]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80095b2:	f8df e064 	ldr.w	lr, [pc, #100]	; 8009618 <spinOnce+0x2f4>
    t.data.sec += offset / 1000;
 80095b6:	0989      	lsrs	r1, r1, #6
    t.data.nsec += (offset % 1000) * 1000000UL;
 80095b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80095bc:	fb02 6611 	mls	r6, r2, r1, r6
    sec_offset = new_now.sec - ms / 1000 - 1;
 80095c0:	440b      	add	r3, r1
 80095c2:	fbaa c100 	umull	ip, r1, sl, r0
 80095c6:	0989      	lsrs	r1, r1, #6
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80095c8:	fb0e 8606 	mla	r6, lr, r6, r8
 80095cc:	fb02 0211 	mls	r2, r2, r1, r0
    sec_offset = new_now.sec - ms / 1000 - 1;
 80095d0:	1a5b      	subs	r3, r3, r1
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80095d2:	fb0e 6212 	mls	r2, lr, r2, r6
    normalizeSecNSec(sec_offset, nsec_offset);
 80095d6:	490c      	ldr	r1, [pc, #48]	; (8009608 <spinOnce+0x2e4>)
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80095d8:	61e2      	str	r2, [r4, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 80095da:	4658      	mov	r0, fp
    sec_offset = new_now.sec - ms / 1000 - 1;
 80095dc:	61a3      	str	r3, [r4, #24]
    normalizeSecNSec(sec_offset, nsec_offset);
 80095de:	f7fe f997 	bl	8007910 <_ZN3ros16normalizeSecNSecERmS0_>
 80095e2:	f7f7 ff31 	bl	8001448 <HAL_GetTick>
    last_sync_receive_time = hardware_.time();
 80095e6:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
 80095ea:	e6c0      	b.n	800936e <spinOnce+0x4a>
              subscribers[topic_ - 100]->callback(message_in);
 80095ec:	4907      	ldr	r1, [pc, #28]	; (800960c <spinOnce+0x2e8>)
 80095ee:	4798      	blx	r3
 80095f0:	e6bd      	b.n	800936e <spinOnce+0x4a>
 80095f2:	bf00      	nop
 80095f4:	20000200 	.word	0x20000200
 80095f8:	2000020c 	.word	0x2000020c
 80095fc:	0008feff 	.word	0x0008feff
 8009600:	08007c39 	.word	0x08007c39
 8009604:	20000424 	.word	0x20000424
 8009608:	2000021c 	.word	0x2000021c
 800960c:	20000224 	.word	0x20000224
 8009610:	3b9aca00 	.word	0x3b9aca00
 8009614:	10624dd3 	.word	0x10624dd3
 8009618:	000f4240 	.word	0x000f4240
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800961c:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
      if(ints_lengthT > ints_length)
 8009620:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
 8009624:	4598      	cmp	r8, r3
 8009626:	d907      	bls.n	8009638 <spinOnce+0x314>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8009628:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800962c:	f8d4 0520 	ldr.w	r0, [r4, #1312]	; 0x520
 8009630:	f000 fc8e 	bl	8009f50 <realloc>
 8009634:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
      ints_length = ints_lengthT;
 8009638:	f8c4 8518 	str.w	r8, [r4, #1304]	; 0x518
      for( uint32_t i = 0; i < ints_length; i++){
 800963c:	f1b8 0f00 	cmp.w	r8, #0
 8009640:	f000 80f0 	beq.w	8009824 <spinOnce+0x500>
 8009644:	4885      	ldr	r0, [pc, #532]	; (800985c <spinOnce+0x538>)
 8009646:	2104      	movs	r1, #4
 8009648:	2600      	movs	r6, #0
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800964a:	7f83      	ldrb	r3, [r0, #30]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800964c:	f890 e01d 	ldrb.w	lr, [r0, #29]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8009650:	7f02      	ldrb	r2, [r0, #28]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009652:	041b      	lsls	r3, r3, #16
 8009654:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009658:	f890 e01f 	ldrb.w	lr, [r0, #31]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800965c:	4313      	orrs	r3, r2
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800965e:	f8d4 2520 	ldr.w	r2, [r4, #1312]	; 0x520
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009662:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
      this->st_ints = u_st_ints.real;
 8009666:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800966a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
      for( uint32_t i = 0; i < ints_length; i++){
 800966e:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
 8009672:	3601      	adds	r6, #1
 8009674:	42b3      	cmp	r3, r6
 8009676:	460a      	mov	r2, r1
 8009678:	f100 0004 	add.w	r0, r0, #4
 800967c:	f101 0104 	add.w	r1, r1, #4
 8009680:	d8e3      	bhi.n	800964a <spinOnce+0x326>
 8009682:	9104      	str	r1, [sp, #16]
 8009684:	f102 010b 	add.w	r1, r2, #11
 8009688:	f102 0309 	add.w	r3, r2, #9
 800968c:	f102 0608 	add.w	r6, r2, #8
 8009690:	9102      	str	r1, [sp, #8]
 8009692:	9904      	ldr	r1, [sp, #16]
 8009694:	9301      	str	r3, [sp, #4]
 8009696:	1d50      	adds	r0, r2, #5
 8009698:	f102 0e06 	add.w	lr, r2, #6
 800969c:	f102 0c07 	add.w	ip, r2, #7
 80096a0:	f102 030a 	add.w	r3, r2, #10
 80096a4:	9603      	str	r6, [sp, #12]
 80096a6:	320c      	adds	r2, #12
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80096a8:	44a6      	add	lr, r4
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80096aa:	4420      	add	r0, r4
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80096ac:	f89e e024 	ldrb.w	lr, [lr, #36]	; 0x24
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80096b0:	f890 8024 	ldrb.w	r8, [r0, #36]	; 0x24
      if(floats_lengthT > floats_length)
 80096b4:	f8d4 0524 	ldr.w	r0, [r4, #1316]	; 0x524
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80096b8:	4421      	add	r1, r4
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80096ba:	44a4      	add	ip, r4
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80096bc:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80096c0:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80096c4:	f89c c024 	ldrb.w	ip, [ip, #36]	; 0x24
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80096c8:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
 80096cc:	ea4e 0101 	orr.w	r1, lr, r1
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80096d0:	ea41 680c 	orr.w	r8, r1, ip, lsl #24
      if(floats_lengthT > floats_length)
 80096d4:	4580      	cmp	r8, r0
 80096d6:	d90b      	bls.n	80096f0 <spinOnce+0x3cc>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80096d8:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80096dc:	f8d4 052c 	ldr.w	r0, [r4, #1324]	; 0x52c
 80096e0:	9205      	str	r2, [sp, #20]
 80096e2:	9304      	str	r3, [sp, #16]
 80096e4:	f000 fc34 	bl	8009f50 <realloc>
 80096e8:	9a05      	ldr	r2, [sp, #20]
 80096ea:	9b04      	ldr	r3, [sp, #16]
 80096ec:	f8c4 052c 	str.w	r0, [r4, #1324]	; 0x52c
      floats_length = floats_lengthT;
 80096f0:	f8c4 8524 	str.w	r8, [r4, #1316]	; 0x524
      for( uint32_t i = 0; i < floats_length; i++){
 80096f4:	f1b8 0f00 	cmp.w	r8, #0
 80096f8:	d026      	beq.n	8009748 <spinOnce+0x424>
 80096fa:	f8df e168 	ldr.w	lr, [pc, #360]	; 8009864 <spinOnce+0x540>
 80096fe:	19b9      	adds	r1, r7, r6
 8009700:	2000      	movs	r0, #0
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009702:	7e8b      	ldrb	r3, [r1, #26]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8009704:	f891 c019 	ldrb.w	ip, [r1, #25]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8009708:	7e0a      	ldrb	r2, [r1, #24]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800970a:	041b      	lsls	r3, r3, #16
 800970c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009710:	f891 c01b 	ldrb.w	ip, [r1, #27]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009714:	4313      	orrs	r3, r2
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8009716:	f8d4 252c 	ldr.w	r2, [r4, #1324]	; 0x52c
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800971a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
      this->st_floats = u_st_floats.real;
 800971e:	f8ce 3000 	str.w	r3, [lr]
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8009722:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
      for( uint32_t i = 0; i < floats_length; i++){
 8009726:	f8d4 3524 	ldr.w	r3, [r4, #1316]	; 0x524
 800972a:	3001      	adds	r0, #1
 800972c:	4283      	cmp	r3, r0
 800972e:	4632      	mov	r2, r6
 8009730:	f101 0104 	add.w	r1, r1, #4
 8009734:	f106 0604 	add.w	r6, r6, #4
 8009738:	d8e3      	bhi.n	8009702 <spinOnce+0x3de>
 800973a:	1d53      	adds	r3, r2, #5
 800973c:	1dd1      	adds	r1, r2, #7
 800973e:	9301      	str	r3, [sp, #4]
 8009740:	9603      	str	r6, [sp, #12]
 8009742:	1d93      	adds	r3, r2, #6
 8009744:	9102      	str	r1, [sp, #8]
 8009746:	3208      	adds	r2, #8
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8009748:	9901      	ldr	r1, [sp, #4]
 800974a:	4421      	add	r1, r4
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800974c:	4423      	add	r3, r4
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800974e:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8009752:	9903      	ldr	r1, [sp, #12]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8009754:	f893 6024 	ldrb.w	r6, [r3, #36]	; 0x24
      if(strings_lengthT > strings_length)
 8009758:	f8d4 3530 	ldr.w	r3, [r4, #1328]	; 0x530
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800975c:	4421      	add	r1, r4
 800975e:	468e      	mov	lr, r1
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8009760:	9902      	ldr	r1, [sp, #8]
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8009762:	f89e e024 	ldrb.w	lr, [lr, #36]	; 0x24
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8009766:	4421      	add	r1, r4
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8009768:	0436      	lsls	r6, r6, #16
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800976a:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800976e:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
 8009772:	ea46 060e 	orr.w	r6, r6, lr
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8009776:	ea46 6601 	orr.w	r6, r6, r1, lsl #24
      if(strings_lengthT > strings_length)
 800977a:	429e      	cmp	r6, r3
 800977c:	d908      	bls.n	8009790 <spinOnce+0x46c>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800977e:	00b1      	lsls	r1, r6, #2
 8009780:	f8d4 0538 	ldr.w	r0, [r4, #1336]	; 0x538
 8009784:	9201      	str	r2, [sp, #4]
 8009786:	f000 fbe3 	bl	8009f50 <realloc>
 800978a:	9a01      	ldr	r2, [sp, #4]
 800978c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
      strings_length = strings_lengthT;
 8009790:	f8c4 6530 	str.w	r6, [r4, #1328]	; 0x530
      for( uint32_t i = 0; i < strings_length; i++){
 8009794:	2e00      	cmp	r6, #0
 8009796:	d041      	beq.n	800981c <spinOnce+0x4f8>
 8009798:	2300      	movs	r3, #0
          inbuffer[k-1]=inbuffer[k];
 800979a:	9501      	str	r5, [sp, #4]
 800979c:	461d      	mov	r5, r3
 800979e:	18a0      	adds	r0, r4, r2
      offset += 4;
 80097a0:	f102 0804 	add.w	r8, r2, #4
 80097a4:	f890 6025 	ldrb.w	r6, [r0, #37]	; 0x25
 80097a8:	f890 c026 	ldrb.w	ip, [r0, #38]	; 0x26
 80097ac:	f890 e024 	ldrb.w	lr, [r0, #36]	; 0x24
 80097b0:	f890 0027 	ldrb.w	r0, [r0, #39]	; 0x27
 80097b4:	0236      	lsls	r6, r6, #8
 80097b6:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 80097ba:	ea46 060e 	orr.w	r6, r6, lr
 80097be:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
          inbuffer[k-1]=inbuffer[k];
 80097c2:	f06f 0103 	mvn.w	r1, #3
 80097c6:	1a89      	subs	r1, r1, r2
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80097c8:	4446      	add	r6, r8
          inbuffer[k-1]=inbuffer[k];
 80097ca:	eb01 0e06 	add.w	lr, r1, r6
 80097ce:	f102 0c05 	add.w	ip, r2, #5
 80097d2:	f102 011c 	add.w	r1, r2, #28
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80097d6:	45b0      	cmp	r8, r6
          inbuffer[k-1]=inbuffer[k];
 80097d8:	f102 021b 	add.w	r2, r2, #27
 80097dc:	4439      	add	r1, r7
 80097de:	eb07 0002 	add.w	r0, r7, r2
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80097e2:	d205      	bcs.n	80097f0 <spinOnce+0x4cc>
 80097e4:	45b4      	cmp	ip, r6
 80097e6:	bf94      	ite	ls
 80097e8:	4672      	movls	r2, lr
 80097ea:	2201      	movhi	r2, #1
 80097ec:	f000 fae1 	bl	8009db2 <memmove>
      inbuffer[offset+length_st_strings-1]=0;
 80097f0:	19a1      	adds	r1, r4, r6
 80097f2:	f04f 0300 	mov.w	r3, #0
 80097f6:	f881 3023 	strb.w	r3, [r1, #35]	; 0x23
      this->st_strings = (char *)(inbuffer + offset-1);
 80097fa:	4b19      	ldr	r3, [pc, #100]	; (8009860 <spinOnce+0x53c>)
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80097fc:	f8d4 1538 	ldr.w	r1, [r4, #1336]	; 0x538
      this->st_strings = (char *)(inbuffer + offset-1);
 8009800:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8009804:	441a      	add	r2, r3
 8009806:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800980a:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
      for( uint32_t i = 0; i < strings_length; i++){
 800980e:	f8d4 1530 	ldr.w	r1, [r4, #1328]	; 0x530
 8009812:	3501      	adds	r5, #1
 8009814:	42a9      	cmp	r1, r5
      offset += length_st_strings;
 8009816:	4632      	mov	r2, r6
      for( uint32_t i = 0; i < strings_length; i++){
 8009818:	d8c1      	bhi.n	800979e <spinOnce+0x47a>
 800981a:	9d01      	ldr	r5, [sp, #4]
            param_recieved = true;
 800981c:	2301      	movs	r3, #1
 800981e:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
 8009822:	e5a4      	b.n	800936e <spinOnce+0x4a>
      for( uint32_t i = 0; i < ints_length; i++){
 8009824:	2109      	movs	r1, #9
 8009826:	9101      	str	r1, [sp, #4]
 8009828:	2108      	movs	r1, #8
 800982a:	230b      	movs	r3, #11
 800982c:	9103      	str	r1, [sp, #12]
 800982e:	2104      	movs	r1, #4
 8009830:	9302      	str	r3, [sp, #8]
 8009832:	220c      	movs	r2, #12
 8009834:	230a      	movs	r3, #10
 8009836:	f04f 0c07 	mov.w	ip, #7
 800983a:	f04f 0e06 	mov.w	lr, #6
 800983e:	2005      	movs	r0, #5
 8009840:	9104      	str	r1, [sp, #16]
 8009842:	e731      	b.n	80096a8 <spinOnce+0x384>
            requestSyncTime();
 8009844:	4805      	ldr	r0, [pc, #20]	; (800985c <spinOnce+0x538>)
 8009846:	f7fe ffd7 	bl	80087f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800984a:	4804      	ldr	r0, [pc, #16]	; (800985c <spinOnce+0x538>)
 800984c:	f7ff f80e 	bl	800886c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8009850:	f8c4 5504 	str.w	r5, [r4, #1284]	; 0x504
            last_sync_receive_time = c_time;
 8009854:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
 8009858:	e56d      	b.n	8009336 <spinOnce+0x12>
 800985a:	bf00      	nop
 800985c:	2000020c 	.word	0x2000020c
 8009860:	20000224 	.word	0x20000224
 8009864:	20000728 	.word	0x20000728

08009868 <_GLOBAL__sub_I_rb>:
 8009868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  NodeHandle_() : configured_(false)
 800986a:	4c3d      	ldr	r4, [pc, #244]	; (8009960 <_GLOBAL__sub_I_rb+0xf8>)
      strings_length(0), strings(NULL)
 800986c:	4b3d      	ldr	r3, [pc, #244]	; (8009964 <_GLOBAL__sub_I_rb+0xfc>)
 800986e:	4a3e      	ldr	r2, [pc, #248]	; (8009968 <_GLOBAL__sub_I_rb+0x100>)
 8009870:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
 8009874:	2500      	movs	r5, #0
 8009876:	2764      	movs	r7, #100	; 0x64
 8009878:	4629      	mov	r1, r5
 800987a:	60e2      	str	r2, [r4, #12]
 800987c:	f8c4 5518 	str.w	r5, [r4, #1304]	; 0x518
 8009880:	463a      	mov	r2, r7
 8009882:	f8c4 5520 	str.w	r5, [r4, #1312]	; 0x520
 8009886:	f8c4 5524 	str.w	r5, [r4, #1316]	; 0x524
 800988a:	f8c4 552c 	str.w	r5, [r4, #1324]	; 0x52c
 800988e:	f8c4 5530 	str.w	r5, [r4, #1328]	; 0x530
 8009892:	f8c4 5538 	str.w	r5, [r4, #1336]	; 0x538
 8009896:	f204 4024 	addw	r0, r4, #1060	; 0x424
 800989a:	f44f 7600 	mov.w	r6, #512	; 0x200
 800989e:	f884 5500 	strb.w	r5, [r4, #1280]	; 0x500
 80098a2:	f000 faa0 	bl	8009de6 <memset>
 80098a6:	463a      	mov	r2, r7
 80098a8:	4629      	mov	r1, r5
 80098aa:	f504 6091 	add.w	r0, r4, #1160	; 0x488
 80098ae:	f000 fa9a 	bl	8009de6 <memset>
 80098b2:	4629      	mov	r1, r5
 80098b4:	4632      	mov	r2, r6
 80098b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80098ba:	f000 fa94 	bl	8009de6 <memset>
 80098be:	4632      	mov	r2, r6
 80098c0:	4629      	mov	r1, r5
 80098c2:	f504 7009 	add.w	r0, r4, #548	; 0x224
 80098c6:	f000 fa8e 	bl	8009de6 <memset>
      data("")
 80098ca:	4e28      	ldr	r6, [pc, #160]	; (800996c <_GLOBAL__sub_I_rb+0x104>)
      data(0)
 80098cc:	4828      	ldr	r0, [pc, #160]	; (8009970 <_GLOBAL__sub_I_rb+0x108>)
    endpoint_(endpoint) {};
 80098ce:	4929      	ldr	r1, [pc, #164]	; (8009974 <_GLOBAL__sub_I_rb+0x10c>)
 80098d0:	4a29      	ldr	r2, [pc, #164]	; (8009978 <_GLOBAL__sub_I_rb+0x110>)
    endpoint_(endpoint)
 80098d2:	4f2a      	ldr	r7, [pc, #168]	; (800997c <_GLOBAL__sub_I_rb+0x114>)
    spin_timeout_ = 0;
 80098d4:	6225      	str	r5, [r4, #32]
 80098d6:	f8c4 55f8 	str.w	r5, [r4, #1528]	; 0x5f8
 80098da:	f8c4 554c 	str.w	r5, [r4, #1356]	; 0x54c
 80098de:	f8c4 5560 	str.w	r5, [r4, #1376]	; 0x560
      data(0)
 80098e2:	f884 5574 	strb.w	r5, [r4, #1396]	; 0x574
 80098e6:	f884 5590 	strb.w	r5, [r4, #1424]	; 0x590
 80098ea:	f8c4 65c4 	str.w	r6, [r4, #1476]	; 0x5c4
 80098ee:	4d24      	ldr	r5, [pc, #144]	; (8009980 <_GLOBAL__sub_I_rb+0x118>)
    topic_ = topic_name;
 80098f0:	4e24      	ldr	r6, [pc, #144]	; (8009984 <_GLOBAL__sub_I_rb+0x11c>)
 80098f2:	f8c4 05f4 	str.w	r0, [r4, #1524]	; 0x5f4
 80098f6:	f8c4 153c 	str.w	r1, [r4, #1340]	; 0x53c
 80098fa:	4823      	ldr	r0, [pc, #140]	; (8009988 <_GLOBAL__sub_I_rb+0x120>)
 80098fc:	f8c4 2550 	str.w	r2, [r4, #1360]	; 0x550
      z(0)
 8009900:	f204 51d4 	addw	r1, r4, #1492	; 0x5d4
 8009904:	f204 52e4 	addw	r2, r4, #1508	; 0x5e4
 8009908:	2300      	movs	r3, #0
 800990a:	f8df e08c 	ldr.w	lr, [pc, #140]	; 8009998 <_GLOBAL__sub_I_rb+0x130>
    endpoint_(endpoint)
 800990e:	f8c4 7578 	str.w	r7, [r4, #1400]	; 0x578
    topic_ = topic_name;
 8009912:	f8c4 656c 	str.w	r6, [r4, #1388]	; 0x56c
 8009916:	4f1d      	ldr	r7, [pc, #116]	; (800998c <_GLOBAL__sub_I_rb+0x124>)
    endpoint_(endpoint)
 8009918:	4e1d      	ldr	r6, [pc, #116]	; (8009990 <_GLOBAL__sub_I_rb+0x128>)
 800991a:	f8c4 5594 	str.w	r5, [r4, #1428]	; 0x594
    topic_ = topic_name;
 800991e:	f8c4 0588 	str.w	r0, [r4, #1416]	; 0x588
 8009922:	4d1c      	ldr	r5, [pc, #112]	; (8009994 <_GLOBAL__sub_I_rb+0x12c>)
 8009924:	f8c4 e5c8 	str.w	lr, [r4, #1480]	; 0x5c8
    endpoint_(endpoint)
 8009928:	2001      	movs	r0, #1
 800992a:	f8c4 1540 	str.w	r1, [r4, #1344]	; 0x540
 800992e:	604b      	str	r3, [r1, #4]
 8009930:	608b      	str	r3, [r1, #8]
 8009932:	60cb      	str	r3, [r1, #12]
 8009934:	6053      	str	r3, [r2, #4]
 8009936:	6093      	str	r3, [r2, #8]
 8009938:	60d3      	str	r3, [r2, #12]
 800993a:	f8c4 2554 	str.w	r2, [r4, #1364]	; 0x554
 800993e:	f8c4 75d4 	str.w	r7, [r4, #1492]	; 0x5d4
 8009942:	f8c4 75e4 	str.w	r7, [r4, #1508]	; 0x5e4
 8009946:	f8c4 6564 	str.w	r6, [r4, #1380]	; 0x564
 800994a:	f8c4 6580 	str.w	r6, [r4, #1408]	; 0x580
 800994e:	f8c4 5570 	str.w	r5, [r4, #1392]	; 0x570
 8009952:	f8c4 558c 	str.w	r5, [r4, #1420]	; 0x58c
 8009956:	f8c4 057c 	str.w	r0, [r4, #1404]	; 0x57c
 800995a:	f8c4 0598 	str.w	r0, [r4, #1432]	; 0x598
 800995e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009960:	20000200 	.word	0x20000200
 8009964:	0800a3dc 	.word	0x0800a3dc
 8009968:	0800a454 	.word	0x0800a454
 800996c:	0800a40c 	.word	0x0800a40c
 8009970:	0800a424 	.word	0x0800a424
 8009974:	0800a65c 	.word	0x0800a65c
 8009978:	0800a664 	.word	0x0800a664
 800997c:	08007c21 	.word	0x08007c21
 8009980:	08007c2d 	.word	0x08007c2d
 8009984:	0800a66c 	.word	0x0800a66c
 8009988:	0800a674 	.word	0x0800a674
 800998c:	0800a43c 	.word	0x0800a43c
 8009990:	0800a468 	.word	0x0800a468
 8009994:	0800a3f4 	.word	0x0800a3f4
 8009998:	0800a588 	.word	0x0800a588

0800999c <_Z8NBT_initP5nbt_tm>:
#include "stm32f4xx_hal.h"
#include "nbt.h"

//NBT - Non Blocking Timer
void NBT_init(nbt_t * nbt, uint32_t interval)
{
 800999c:	b510      	push	{r4, lr}
	nbt->timeout = interval;
 800999e:	6001      	str	r1, [r0, #0]
{
 80099a0:	4604      	mov	r4, r0
	nbt->previousMillis = HAL_GetTick();
 80099a2:	f7f7 fd51 	bl	8001448 <HAL_GetTick>
 80099a6:	6060      	str	r0, [r4, #4]
 80099a8:	bd10      	pop	{r4, pc}
 80099aa:	bf00      	nop

080099ac <_Z11NBT_handlerP5nbt_t>:
}

bool NBT_handler(nbt_t * nbt)
{
 80099ac:	b510      	push	{r4, lr}
 80099ae:	4604      	mov	r4, r0
	if(HAL_GetTick()-nbt->previousMillis>nbt->timeout){
 80099b0:	f7f7 fd4a 	bl	8001448 <HAL_GetTick>
 80099b4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80099b8:	1ac0      	subs	r0, r0, r3
 80099ba:	4290      	cmp	r0, r2
 80099bc:	d802      	bhi.n	80099c4 <_Z11NBT_handlerP5nbt_t+0x18>
		nbt->previousMillis = HAL_GetTick();
		return true;
	}

	return false;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	bd10      	pop	{r4, pc}
		nbt->previousMillis = HAL_GetTick();
 80099c4:	f7f7 fd40 	bl	8001448 <HAL_GetTick>
		return true;
 80099c8:	2301      	movs	r3, #1
		nbt->previousMillis = HAL_GetTick();
 80099ca:	6060      	str	r0, [r4, #4]
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	bd10      	pop	{r4, pc}

080099d0 <_Z18ringbuffer_putcharP10ringbufferh>:

#define ASSERT(EX)                                                         \

__inline enum ringbuffer_state  ringbuffer_status(struct  ringbuffer *rb)
{
	if (rb->read_index == rb->write_index) {
 80099d0:	8882      	ldrh	r2, [r0, #4]
 80099d2:	88c3      	ldrh	r3, [r0, #6]
 80099d4:	f3c2 024e 	ubfx	r2, r2, #1, #15
 80099d8:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80099dc:	429a      	cmp	r2, r3

/**
 * put a character into ring buffer
 */
uint32_t  ringbuffer_putchar(struct  ringbuffer *rb, const uint8_t ch)
{
 80099de:	b430      	push	{r4, r5}
    ASSERT(rb != NULL);

    /* whether has enough space */
	if (! ringbuffer_empty_space(rb))
 80099e0:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
	if (rb->read_index == rb->write_index) {
 80099e4:	d017      	beq.n	8009a16 <_Z18ringbuffer_putcharP10ringbufferh+0x46>
		if (rb->write_index > rb->read_index)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	dc23      	bgt.n	8009a32 <_Z18ringbuffer_putcharP10ringbufferh+0x62>
			return rb->buffer_size - (rb->read_index - rb->write_index);
 80099ea:	195c      	adds	r4, r3, r5
 80099ec:	1aa2      	subs	r2, r4, r2
 80099ee:	b292      	uxth	r2, r2
	if (! ringbuffer_empty_space(rb))
 80099f0:	4295      	cmp	r5, r2
 80099f2:	d01b      	beq.n	8009a2c <_Z18ringbuffer_putcharP10ringbufferh+0x5c>
		return 0;

	rb->buffer_ptr[rb->write_index] = ch;
 80099f4:	6802      	ldr	r2, [r0, #0]
 80099f6:	54d1      	strb	r1, [r2, r3]

	/* flip mirror */
	if (rb->write_index == rb->buffer_size - 1) {
 80099f8:	88c3      	ldrh	r3, [r0, #6]
 80099fa:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80099fe:	f3c3 024e 	ubfx	r2, r3, #1, #15
 8009a02:	3901      	subs	r1, #1
 8009a04:	428a      	cmp	r2, r1
 8009a06:	d017      	beq.n	8009a38 <_Z18ringbuffer_putcharP10ringbufferh+0x68>
		rb->write_mirror = ~rb->write_mirror;
		rb->write_index = 0;
	} else {
		rb->write_index++;
 8009a08:	3201      	adds	r2, #1
 8009a0a:	f362 034f 	bfi	r3, r2, #1, #15
 8009a0e:	80c3      	strh	r3, [r0, #6]
	}

	return 1;
}
 8009a10:	bc30      	pop	{r4, r5}
	return 1;
 8009a12:	2001      	movs	r0, #1
}
 8009a14:	4770      	bx	lr
		if (rb->read_mirror == rb->write_mirror)
 8009a16:	7904      	ldrb	r4, [r0, #4]
 8009a18:	7982      	ldrb	r2, [r0, #6]
 8009a1a:	f004 0401 	and.w	r4, r4, #1
 8009a1e:	f002 0201 	and.w	r2, r2, #1
 8009a22:	4294      	cmp	r4, r2
 8009a24:	d016      	beq.n	8009a54 <_Z18ringbuffer_putcharP10ringbufferh+0x84>
 8009a26:	b2aa      	uxth	r2, r5
	if (! ringbuffer_empty_space(rb))
 8009a28:	4295      	cmp	r5, r2
 8009a2a:	d1e3      	bne.n	80099f4 <_Z18ringbuffer_putcharP10ringbufferh+0x24>
		return 0;
 8009a2c:	2000      	movs	r0, #0
}
 8009a2e:	bc30      	pop	{r4, r5}
 8009a30:	4770      	bx	lr
			return rb->write_index - rb->read_index;
 8009a32:	1a9a      	subs	r2, r3, r2
 8009a34:	b292      	uxth	r2, r2
 8009a36:	e7db      	b.n	80099f0 <_Z18ringbuffer_putcharP10ringbufferh+0x20>
		rb->write_mirror = ~rb->write_mirror;
 8009a38:	7983      	ldrb	r3, [r0, #6]
 8009a3a:	f3c3 0200 	ubfx	r2, r3, #0, #1
 8009a3e:	43d2      	mvns	r2, r2
 8009a40:	f362 0300 	bfi	r3, r2, #0, #1
 8009a44:	7183      	strb	r3, [r0, #6]
		rb->write_index = 0;
 8009a46:	88c3      	ldrh	r3, [r0, #6]
 8009a48:	f36f 034f 	bfc	r3, #1, #15
 8009a4c:	80c3      	strh	r3, [r0, #6]
}
 8009a4e:	bc30      	pop	{r4, r5}
	return 1;
 8009a50:	2001      	movs	r0, #1
}
 8009a52:	4770      	bx	lr
		if (rb->read_mirror == rb->write_mirror)
 8009a54:	2200      	movs	r2, #0
 8009a56:	e7cb      	b.n	80099f0 <_Z18ringbuffer_putcharP10ringbufferh+0x20>

08009a58 <_Z18ringbuffer_getcharP10ringbufferPh>:
	if (rb->read_index == rb->write_index) {
 8009a58:	8882      	ldrh	r2, [r0, #4]
 8009a5a:	88c3      	ldrh	r3, [r0, #6]
 8009a5c:	f3c2 024e 	ubfx	r2, r2, #1, #15
 8009a60:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8009a64:	429a      	cmp	r2, r3

/**
 * get a character from a ringbuffer
 */
uint32_t  ringbuffer_getchar(struct  ringbuffer *rb, uint8_t *ch)
{
 8009a66:	b410      	push	{r4}
	if (rb->read_index == rb->write_index) {
 8009a68:	d01d      	beq.n	8009aa6 <_Z18ringbuffer_getcharP10ringbufferPh+0x4e>
		if (rb->write_index > rb->read_index)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	dc01      	bgt.n	8009a72 <_Z18ringbuffer_getcharP10ringbufferPh+0x1a>
			return rb->buffer_size - (rb->read_index - rb->write_index);
 8009a6e:	8904      	ldrh	r4, [r0, #8]
 8009a70:	4423      	add	r3, r4
 8009a72:	1a9b      	subs	r3, r3, r2
 8009a74:	b29b      	uxth	r3, r3
    ASSERT(rb != NULL);

    /* ringbuffer is empty */
    if (! ringbuffer_data_len(rb))
 8009a76:	b193      	cbz	r3, 8009a9e <_Z18ringbuffer_getcharP10ringbufferPh+0x46>
        return 0;

    /* put character */
    *ch = rb->buffer_ptr[rb->read_index];
 8009a78:	6803      	ldr	r3, [r0, #0]
 8009a7a:	5c9b      	ldrb	r3, [r3, r2]
 8009a7c:	700b      	strb	r3, [r1, #0]

    if (rb->read_index == rb->buffer_size-1)
 8009a7e:	8883      	ldrh	r3, [r0, #4]
 8009a80:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8009a84:	f3c3 024e 	ubfx	r2, r3, #1, #15
 8009a88:	3901      	subs	r1, #1
 8009a8a:	428a      	cmp	r2, r1
 8009a8c:	d015      	beq.n	8009aba <_Z18ringbuffer_getcharP10ringbufferPh+0x62>
        rb->read_mirror = ~rb->read_mirror;
        rb->read_index = 0;
    }
    else
    {
        rb->read_index++;
 8009a8e:	3201      	adds	r2, #1
 8009a90:	f362 034f 	bfi	r3, r2, #1, #15
 8009a94:	8083      	strh	r3, [r0, #4]
    }

    return 1;
}
 8009a96:	f85d 4b04 	ldr.w	r4, [sp], #4
    return 1;
 8009a9a:	2001      	movs	r0, #1
}
 8009a9c:	4770      	bx	lr
        return 0;
 8009a9e:	2000      	movs	r0, #0
}
 8009aa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009aa4:	4770      	bx	lr
		if (rb->read_mirror == rb->write_mirror)
 8009aa6:	7904      	ldrb	r4, [r0, #4]
 8009aa8:	7983      	ldrb	r3, [r0, #6]
 8009aaa:	f004 0401 	and.w	r4, r4, #1
 8009aae:	f003 0301 	and.w	r3, r3, #1
 8009ab2:	429c      	cmp	r4, r3
 8009ab4:	d0f3      	beq.n	8009a9e <_Z18ringbuffer_getcharP10ringbufferPh+0x46>
		return rb->buffer_size;
 8009ab6:	8903      	ldrh	r3, [r0, #8]
 8009ab8:	e7dd      	b.n	8009a76 <_Z18ringbuffer_getcharP10ringbufferPh+0x1e>
        rb->read_mirror = ~rb->read_mirror;
 8009aba:	7903      	ldrb	r3, [r0, #4]
}
 8009abc:	f85d 4b04 	ldr.w	r4, [sp], #4
        rb->read_mirror = ~rb->read_mirror;
 8009ac0:	f3c3 0200 	ubfx	r2, r3, #0, #1
 8009ac4:	43d2      	mvns	r2, r2
 8009ac6:	f362 0300 	bfi	r3, r2, #0, #1
 8009aca:	7103      	strb	r3, [r0, #4]
        rb->read_index = 0;
 8009acc:	8883      	ldrh	r3, [r0, #4]
 8009ace:	f36f 034f 	bfc	r3, #1, #15
 8009ad2:	8083      	strh	r3, [r0, #4]
    return 1;
 8009ad4:	2001      	movs	r0, #1
}
 8009ad6:	4770      	bx	lr

08009ad8 <_Z15ringbuffer_initP10ringbufferPhs>:
}

void  ringbuffer_init(struct  ringbuffer *rb,
                        uint8_t           *pool,
                        int16_t            size)
{
 8009ad8:	b430      	push	{r4, r5}
    ASSERT(rb != NULL);
    ASSERT(size > 0);

    /* initialize read and write index */
    rb->read_mirror = rb->read_index = 0;
    rb->write_mirror = rb->write_index = 0;
 8009ada:	88c3      	ldrh	r3, [r0, #6]
    rb->read_mirror = rb->read_index = 0;
 8009adc:	8884      	ldrh	r4, [r0, #4]

    /* set buffer pool and size */
    rb->buffer_ptr = pool;
 8009ade:	6001      	str	r1, [r0, #0]
    rb->read_mirror = rb->read_index = 0;
 8009ae0:	f36f 044f 	bfc	r4, #1, #15
    rb->write_mirror = rb->write_index = 0;
 8009ae4:	f36f 034f 	bfc	r3, #1, #15
    rb->read_mirror = rb->read_index = 0;
 8009ae8:	4625      	mov	r5, r4
    rb->write_mirror = rb->write_index = 0;
 8009aea:	4619      	mov	r1, r3
    rb->read_mirror = rb->read_index = 0;
 8009aec:	f36f 0500 	bfc	r5, #0, #1
    rb->write_mirror = rb->write_index = 0;
 8009af0:	f36f 0100 	bfc	r1, #0, #1
    rb->read_mirror = rb->read_index = 0;
 8009af4:	8084      	strh	r4, [r0, #4]
    rb->write_mirror = rb->write_index = 0;
 8009af6:	80c3      	strh	r3, [r0, #6]
    rb->read_mirror = rb->read_index = 0;
 8009af8:	7105      	strb	r5, [r0, #4]
    rb->buffer_size = size; //ALIGN_DOWN(size, ALIGN_SIZE);
 8009afa:	8102      	strh	r2, [r0, #8]
    rb->write_mirror = rb->write_index = 0;
 8009afc:	7181      	strb	r1, [r0, #6]
}
 8009afe:	bc30      	pop	{r4, r5}
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop

08009b04 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8009b04:	b510      	push	{r4, lr}
 8009b06:	4b03      	ldr	r3, [pc, #12]	; (8009b14 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8009b08:	6003      	str	r3, [r0, #0]
 8009b0a:	4604      	mov	r4, r0
 8009b0c:	f000 f8a0 	bl	8009c50 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8009b10:	4620      	mov	r0, r4
 8009b12:	bd10      	pop	{r4, pc}
 8009b14:	0800a6b8 	.word	0x0800a6b8

08009b18 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8009b18:	b510      	push	{r4, lr}
 8009b1a:	4604      	mov	r4, r0
 8009b1c:	f7ff fff2 	bl	8009b04 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8009b20:	4620      	mov	r0, r4
 8009b22:	210c      	movs	r1, #12
 8009b24:	f000 f871 	bl	8009c0a <_ZdlPvj>
 8009b28:	4620      	mov	r0, r4
 8009b2a:	bd10      	pop	{r4, pc}

08009b2c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8009b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b30:	9e06      	ldr	r6, [sp, #24]
 8009b32:	4296      	cmp	r6, r2
 8009b34:	4680      	mov	r8, r0
 8009b36:	460f      	mov	r7, r1
 8009b38:	4614      	mov	r4, r2
 8009b3a:	461d      	mov	r5, r3
 8009b3c:	d103      	bne.n	8009b46 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 8009b3e:	4619      	mov	r1, r3
 8009b40:	f000 f8da 	bl	8009cf8 <_ZNKSt9type_infoeqERKS_>
 8009b44:	b958      	cbnz	r0, 8009b5e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x32>
 8009b46:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8009b4a:	6803      	ldr	r3, [r0, #0]
 8009b4c:	9606      	str	r6, [sp, #24]
 8009b4e:	6a1e      	ldr	r6, [r3, #32]
 8009b50:	4622      	mov	r2, r4
 8009b52:	462b      	mov	r3, r5
 8009b54:	4639      	mov	r1, r7
 8009b56:	46b4      	mov	ip, r6
 8009b58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b5c:	4760      	bx	ip
 8009b5e:	2006      	movs	r0, #6
 8009b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009b64 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8009b64:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b68:	460e      	mov	r6, r1
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	4683      	mov	fp, r0
 8009b6e:	4617      	mov	r7, r2
 8009b70:	4699      	mov	r9, r3
 8009b72:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009b74:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8009b78:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8009b7c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009b7e:	f000 f8bb 	bl	8009cf8 <_ZNKSt9type_infoeqERKS_>
 8009b82:	b190      	cbz	r0, 8009baa <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46>
 8009b84:	2e00      	cmp	r6, #0
 8009b86:	602c      	str	r4, [r5, #0]
 8009b88:	712f      	strb	r7, [r5, #4]
 8009b8a:	db09      	blt.n	8009ba0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 8009b8c:	4434      	add	r4, r6
 8009b8e:	45a0      	cmp	r8, r4
 8009b90:	bf0c      	ite	eq
 8009b92:	2406      	moveq	r4, #6
 8009b94:	2401      	movne	r4, #1
 8009b96:	71ac      	strb	r4, [r5, #6]
 8009b98:	2000      	movs	r0, #0
 8009b9a:	b001      	add	sp, #4
 8009b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba0:	3602      	adds	r6, #2
 8009ba2:	d1f9      	bne.n	8009b98 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	71ab      	strb	r3, [r5, #6]
 8009ba8:	e7f6      	b.n	8009b98 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8009baa:	4544      	cmp	r4, r8
 8009bac:	d104      	bne.n	8009bb8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8009bae:	4651      	mov	r1, sl
 8009bb0:	4658      	mov	r0, fp
 8009bb2:	f000 f8a1 	bl	8009cf8 <_ZNKSt9type_infoeqERKS_>
 8009bb6:	b988      	cbnz	r0, 8009bdc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 8009bb8:	f8db 0008 	ldr.w	r0, [fp, #8]
 8009bbc:	6803      	ldr	r3, [r0, #0]
 8009bbe:	950d      	str	r5, [sp, #52]	; 0x34
 8009bc0:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8009bc4:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8009bc8:	940a      	str	r4, [sp, #40]	; 0x28
 8009bca:	69dc      	ldr	r4, [r3, #28]
 8009bcc:	463a      	mov	r2, r7
 8009bce:	464b      	mov	r3, r9
 8009bd0:	4631      	mov	r1, r6
 8009bd2:	46a4      	mov	ip, r4
 8009bd4:	b001      	add	sp, #4
 8009bd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bda:	4760      	bx	ip
 8009bdc:	716f      	strb	r7, [r5, #5]
 8009bde:	e7db      	b.n	8009b98 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

08009be0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8009be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009be4:	4604      	mov	r4, r0
 8009be6:	460d      	mov	r5, r1
 8009be8:	4616      	mov	r6, r2
 8009bea:	461f      	mov	r7, r3
 8009bec:	f000 f844 	bl	8009c78 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8009bf0:	b948      	cbnz	r0, 8009c06 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8009bf2:	68a0      	ldr	r0, [r4, #8]
 8009bf4:	6803      	ldr	r3, [r0, #0]
 8009bf6:	699c      	ldr	r4, [r3, #24]
 8009bf8:	4632      	mov	r2, r6
 8009bfa:	463b      	mov	r3, r7
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	46a4      	mov	ip, r4
 8009c00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c04:	4760      	bx	ip
 8009c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009c0a <_ZdlPvj>:
 8009c0a:	f000 b88b 	b.w	8009d24 <_ZdlPv>

08009c0e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8009c0e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009c10:	2310      	movs	r3, #16
 8009c12:	9302      	str	r3, [sp, #8]
 8009c14:	6803      	ldr	r3, [r0, #0]
 8009c16:	2400      	movs	r4, #0
 8009c18:	4615      	mov	r5, r2
 8009c1a:	699e      	ldr	r6, [r3, #24]
 8009c1c:	9400      	str	r4, [sp, #0]
 8009c1e:	466b      	mov	r3, sp
 8009c20:	f88d 4004 	strb.w	r4, [sp, #4]
 8009c24:	9403      	str	r4, [sp, #12]
 8009c26:	6812      	ldr	r2, [r2, #0]
 8009c28:	47b0      	blx	r6
 8009c2a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009c2e:	f003 0306 	and.w	r3, r3, #6
 8009c32:	2b06      	cmp	r3, #6
 8009c34:	bf03      	ittte	eq
 8009c36:	9b00      	ldreq	r3, [sp, #0]
 8009c38:	602b      	streq	r3, [r5, #0]
 8009c3a:	2001      	moveq	r0, #1
 8009c3c:	4620      	movne	r0, r4
 8009c3e:	b004      	add	sp, #16
 8009c40:	bd70      	pop	{r4, r5, r6, pc}

08009c42 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8009c42:	9800      	ldr	r0, [sp, #0]
 8009c44:	4290      	cmp	r0, r2
 8009c46:	bf0c      	ite	eq
 8009c48:	2006      	moveq	r0, #6
 8009c4a:	2001      	movne	r0, #1
 8009c4c:	4770      	bx	lr
	...

08009c50 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8009c50:	b510      	push	{r4, lr}
 8009c52:	4b03      	ldr	r3, [pc, #12]	; (8009c60 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8009c54:	6003      	str	r3, [r0, #0]
 8009c56:	4604      	mov	r4, r0
 8009c58:	f000 f84b 	bl	8009cf2 <_ZNSt9type_infoD1Ev>
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	bd10      	pop	{r4, pc}
 8009c60:	0800a714 	.word	0x0800a714

08009c64 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8009c64:	b510      	push	{r4, lr}
 8009c66:	4604      	mov	r4, r0
 8009c68:	f7ff fff2 	bl	8009c50 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8009c6c:	4620      	mov	r0, r4
 8009c6e:	2108      	movs	r1, #8
 8009c70:	f7ff ffcb 	bl	8009c0a <_ZdlPvj>
 8009c74:	4620      	mov	r0, r4
 8009c76:	bd10      	pop	{r4, pc}

08009c78 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8009c78:	b538      	push	{r3, r4, r5, lr}
 8009c7a:	4615      	mov	r5, r2
 8009c7c:	461c      	mov	r4, r3
 8009c7e:	f000 f83b 	bl	8009cf8 <_ZNKSt9type_infoeqERKS_>
 8009c82:	b120      	cbz	r0, 8009c8e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8009c84:	2308      	movs	r3, #8
 8009c86:	60e3      	str	r3, [r4, #12]
 8009c88:	2306      	movs	r3, #6
 8009c8a:	6025      	str	r5, [r4, #0]
 8009c8c:	7123      	strb	r3, [r4, #4]
 8009c8e:	bd38      	pop	{r3, r4, r5, pc}

08009c90 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8009c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c94:	4605      	mov	r5, r0
 8009c96:	460c      	mov	r4, r1
 8009c98:	4616      	mov	r6, r2
 8009c9a:	461f      	mov	r7, r3
 8009c9c:	f000 f82c 	bl	8009cf8 <_ZNKSt9type_infoeqERKS_>
 8009ca0:	b948      	cbnz	r0, 8009cb6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8009ca2:	2f03      	cmp	r7, #3
 8009ca4:	d807      	bhi.n	8009cb6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8009ca6:	6823      	ldr	r3, [r4, #0]
 8009ca8:	4632      	mov	r2, r6
 8009caa:	4629      	mov	r1, r5
 8009cac:	4620      	mov	r0, r4
 8009cae:	695b      	ldr	r3, [r3, #20]
 8009cb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb4:	4718      	bx	r3
 8009cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009cba <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8009cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cbe:	9e06      	ldr	r6, [sp, #24]
 8009cc0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009cc2:	4698      	mov	r8, r3
 8009cc4:	9b08      	ldr	r3, [sp, #32]
 8009cc6:	429e      	cmp	r6, r3
 8009cc8:	4607      	mov	r7, r0
 8009cca:	4615      	mov	r5, r2
 8009ccc:	d103      	bne.n	8009cd6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1c>
 8009cce:	9907      	ldr	r1, [sp, #28]
 8009cd0:	f000 f812 	bl	8009cf8 <_ZNKSt9type_infoeqERKS_>
 8009cd4:	b958      	cbnz	r0, 8009cee <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 8009cd6:	4641      	mov	r1, r8
 8009cd8:	4638      	mov	r0, r7
 8009cda:	f000 f80d 	bl	8009cf8 <_ZNKSt9type_infoeqERKS_>
 8009cde:	b118      	cbz	r0, 8009ce8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	6026      	str	r6, [r4, #0]
 8009ce4:	7125      	strb	r5, [r4, #4]
 8009ce6:	71a3      	strb	r3, [r4, #6]
 8009ce8:	2000      	movs	r0, #0
 8009cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cee:	7165      	strb	r5, [r4, #5]
 8009cf0:	e7fa      	b.n	8009ce8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>

08009cf2 <_ZNSt9type_infoD1Ev>:
 8009cf2:	4770      	bx	lr

08009cf4 <_ZNKSt9type_info14__is_pointer_pEv>:
 8009cf4:	2000      	movs	r0, #0
 8009cf6:	4770      	bx	lr

08009cf8 <_ZNKSt9type_infoeqERKS_>:
 8009cf8:	4281      	cmp	r1, r0
 8009cfa:	b508      	push	{r3, lr}
 8009cfc:	d00e      	beq.n	8009d1c <_ZNKSt9type_infoeqERKS_+0x24>
 8009cfe:	6840      	ldr	r0, [r0, #4]
 8009d00:	7803      	ldrb	r3, [r0, #0]
 8009d02:	2b2a      	cmp	r3, #42	; 0x2a
 8009d04:	d00c      	beq.n	8009d20 <_ZNKSt9type_infoeqERKS_+0x28>
 8009d06:	6849      	ldr	r1, [r1, #4]
 8009d08:	780b      	ldrb	r3, [r1, #0]
 8009d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d0c:	bf08      	it	eq
 8009d0e:	3101      	addeq	r1, #1
 8009d10:	f7f6 fa5e 	bl	80001d0 <strcmp>
 8009d14:	fab0 f080 	clz	r0, r0
 8009d18:	0940      	lsrs	r0, r0, #5
 8009d1a:	bd08      	pop	{r3, pc}
 8009d1c:	2001      	movs	r0, #1
 8009d1e:	bd08      	pop	{r3, pc}
 8009d20:	2000      	movs	r0, #0
 8009d22:	bd08      	pop	{r3, pc}

08009d24 <_ZdlPv>:
 8009d24:	f000 b832 	b.w	8009d8c <free>

08009d28 <__errno>:
 8009d28:	4b01      	ldr	r3, [pc, #4]	; (8009d30 <__errno+0x8>)
 8009d2a:	6818      	ldr	r0, [r3, #0]
 8009d2c:	4770      	bx	lr
 8009d2e:	bf00      	nop
 8009d30:	20000180 	.word	0x20000180

08009d34 <__libc_init_array>:
 8009d34:	b570      	push	{r4, r5, r6, lr}
 8009d36:	4e0d      	ldr	r6, [pc, #52]	; (8009d6c <__libc_init_array+0x38>)
 8009d38:	4c0d      	ldr	r4, [pc, #52]	; (8009d70 <__libc_init_array+0x3c>)
 8009d3a:	1ba4      	subs	r4, r4, r6
 8009d3c:	10a4      	asrs	r4, r4, #2
 8009d3e:	2500      	movs	r5, #0
 8009d40:	42a5      	cmp	r5, r4
 8009d42:	d109      	bne.n	8009d58 <__libc_init_array+0x24>
 8009d44:	4e0b      	ldr	r6, [pc, #44]	; (8009d74 <__libc_init_array+0x40>)
 8009d46:	4c0c      	ldr	r4, [pc, #48]	; (8009d78 <__libc_init_array+0x44>)
 8009d48:	f000 f996 	bl	800a078 <_init>
 8009d4c:	1ba4      	subs	r4, r4, r6
 8009d4e:	10a4      	asrs	r4, r4, #2
 8009d50:	2500      	movs	r5, #0
 8009d52:	42a5      	cmp	r5, r4
 8009d54:	d105      	bne.n	8009d62 <__libc_init_array+0x2e>
 8009d56:	bd70      	pop	{r4, r5, r6, pc}
 8009d58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d5c:	4798      	blx	r3
 8009d5e:	3501      	adds	r5, #1
 8009d60:	e7ee      	b.n	8009d40 <__libc_init_array+0xc>
 8009d62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d66:	4798      	blx	r3
 8009d68:	3501      	adds	r5, #1
 8009d6a:	e7f2      	b.n	8009d52 <__libc_init_array+0x1e>
 8009d6c:	0800a878 	.word	0x0800a878
 8009d70:	0800a878 	.word	0x0800a878
 8009d74:	0800a878 	.word	0x0800a878
 8009d78:	0800a880 	.word	0x0800a880

08009d7c <malloc>:
 8009d7c:	4b02      	ldr	r3, [pc, #8]	; (8009d88 <malloc+0xc>)
 8009d7e:	4601      	mov	r1, r0
 8009d80:	6818      	ldr	r0, [r3, #0]
 8009d82:	f000 b887 	b.w	8009e94 <_malloc_r>
 8009d86:	bf00      	nop
 8009d88:	20000180 	.word	0x20000180

08009d8c <free>:
 8009d8c:	4b02      	ldr	r3, [pc, #8]	; (8009d98 <free+0xc>)
 8009d8e:	4601      	mov	r1, r0
 8009d90:	6818      	ldr	r0, [r3, #0]
 8009d92:	f000 b831 	b.w	8009df8 <_free_r>
 8009d96:	bf00      	nop
 8009d98:	20000180 	.word	0x20000180

08009d9c <memcpy>:
 8009d9c:	b510      	push	{r4, lr}
 8009d9e:	1e43      	subs	r3, r0, #1
 8009da0:	440a      	add	r2, r1
 8009da2:	4291      	cmp	r1, r2
 8009da4:	d100      	bne.n	8009da8 <memcpy+0xc>
 8009da6:	bd10      	pop	{r4, pc}
 8009da8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009db0:	e7f7      	b.n	8009da2 <memcpy+0x6>

08009db2 <memmove>:
 8009db2:	4288      	cmp	r0, r1
 8009db4:	b510      	push	{r4, lr}
 8009db6:	eb01 0302 	add.w	r3, r1, r2
 8009dba:	d803      	bhi.n	8009dc4 <memmove+0x12>
 8009dbc:	1e42      	subs	r2, r0, #1
 8009dbe:	4299      	cmp	r1, r3
 8009dc0:	d10c      	bne.n	8009ddc <memmove+0x2a>
 8009dc2:	bd10      	pop	{r4, pc}
 8009dc4:	4298      	cmp	r0, r3
 8009dc6:	d2f9      	bcs.n	8009dbc <memmove+0xa>
 8009dc8:	1881      	adds	r1, r0, r2
 8009dca:	1ad2      	subs	r2, r2, r3
 8009dcc:	42d3      	cmn	r3, r2
 8009dce:	d100      	bne.n	8009dd2 <memmove+0x20>
 8009dd0:	bd10      	pop	{r4, pc}
 8009dd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009dd6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009dda:	e7f7      	b.n	8009dcc <memmove+0x1a>
 8009ddc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009de0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009de4:	e7eb      	b.n	8009dbe <memmove+0xc>

08009de6 <memset>:
 8009de6:	4402      	add	r2, r0
 8009de8:	4603      	mov	r3, r0
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d100      	bne.n	8009df0 <memset+0xa>
 8009dee:	4770      	bx	lr
 8009df0:	f803 1b01 	strb.w	r1, [r3], #1
 8009df4:	e7f9      	b.n	8009dea <memset+0x4>
	...

08009df8 <_free_r>:
 8009df8:	b538      	push	{r3, r4, r5, lr}
 8009dfa:	4605      	mov	r5, r0
 8009dfc:	2900      	cmp	r1, #0
 8009dfe:	d045      	beq.n	8009e8c <_free_r+0x94>
 8009e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e04:	1f0c      	subs	r4, r1, #4
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	bfb8      	it	lt
 8009e0a:	18e4      	addlt	r4, r4, r3
 8009e0c:	f000 f8b8 	bl	8009f80 <__malloc_lock>
 8009e10:	4a1f      	ldr	r2, [pc, #124]	; (8009e90 <_free_r+0x98>)
 8009e12:	6813      	ldr	r3, [r2, #0]
 8009e14:	4610      	mov	r0, r2
 8009e16:	b933      	cbnz	r3, 8009e26 <_free_r+0x2e>
 8009e18:	6063      	str	r3, [r4, #4]
 8009e1a:	6014      	str	r4, [r2, #0]
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e22:	f000 b8ae 	b.w	8009f82 <__malloc_unlock>
 8009e26:	42a3      	cmp	r3, r4
 8009e28:	d90c      	bls.n	8009e44 <_free_r+0x4c>
 8009e2a:	6821      	ldr	r1, [r4, #0]
 8009e2c:	1862      	adds	r2, r4, r1
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	bf04      	itt	eq
 8009e32:	681a      	ldreq	r2, [r3, #0]
 8009e34:	685b      	ldreq	r3, [r3, #4]
 8009e36:	6063      	str	r3, [r4, #4]
 8009e38:	bf04      	itt	eq
 8009e3a:	1852      	addeq	r2, r2, r1
 8009e3c:	6022      	streq	r2, [r4, #0]
 8009e3e:	6004      	str	r4, [r0, #0]
 8009e40:	e7ec      	b.n	8009e1c <_free_r+0x24>
 8009e42:	4613      	mov	r3, r2
 8009e44:	685a      	ldr	r2, [r3, #4]
 8009e46:	b10a      	cbz	r2, 8009e4c <_free_r+0x54>
 8009e48:	42a2      	cmp	r2, r4
 8009e4a:	d9fa      	bls.n	8009e42 <_free_r+0x4a>
 8009e4c:	6819      	ldr	r1, [r3, #0]
 8009e4e:	1858      	adds	r0, r3, r1
 8009e50:	42a0      	cmp	r0, r4
 8009e52:	d10b      	bne.n	8009e6c <_free_r+0x74>
 8009e54:	6820      	ldr	r0, [r4, #0]
 8009e56:	4401      	add	r1, r0
 8009e58:	1858      	adds	r0, r3, r1
 8009e5a:	4282      	cmp	r2, r0
 8009e5c:	6019      	str	r1, [r3, #0]
 8009e5e:	d1dd      	bne.n	8009e1c <_free_r+0x24>
 8009e60:	6810      	ldr	r0, [r2, #0]
 8009e62:	6852      	ldr	r2, [r2, #4]
 8009e64:	605a      	str	r2, [r3, #4]
 8009e66:	4401      	add	r1, r0
 8009e68:	6019      	str	r1, [r3, #0]
 8009e6a:	e7d7      	b.n	8009e1c <_free_r+0x24>
 8009e6c:	d902      	bls.n	8009e74 <_free_r+0x7c>
 8009e6e:	230c      	movs	r3, #12
 8009e70:	602b      	str	r3, [r5, #0]
 8009e72:	e7d3      	b.n	8009e1c <_free_r+0x24>
 8009e74:	6820      	ldr	r0, [r4, #0]
 8009e76:	1821      	adds	r1, r4, r0
 8009e78:	428a      	cmp	r2, r1
 8009e7a:	bf04      	itt	eq
 8009e7c:	6811      	ldreq	r1, [r2, #0]
 8009e7e:	6852      	ldreq	r2, [r2, #4]
 8009e80:	6062      	str	r2, [r4, #4]
 8009e82:	bf04      	itt	eq
 8009e84:	1809      	addeq	r1, r1, r0
 8009e86:	6021      	streq	r1, [r4, #0]
 8009e88:	605c      	str	r4, [r3, #4]
 8009e8a:	e7c7      	b.n	8009e1c <_free_r+0x24>
 8009e8c:	bd38      	pop	{r3, r4, r5, pc}
 8009e8e:	bf00      	nop
 8009e90:	200047a8 	.word	0x200047a8

08009e94 <_malloc_r>:
 8009e94:	b570      	push	{r4, r5, r6, lr}
 8009e96:	1ccd      	adds	r5, r1, #3
 8009e98:	f025 0503 	bic.w	r5, r5, #3
 8009e9c:	3508      	adds	r5, #8
 8009e9e:	2d0c      	cmp	r5, #12
 8009ea0:	bf38      	it	cc
 8009ea2:	250c      	movcc	r5, #12
 8009ea4:	2d00      	cmp	r5, #0
 8009ea6:	4606      	mov	r6, r0
 8009ea8:	db01      	blt.n	8009eae <_malloc_r+0x1a>
 8009eaa:	42a9      	cmp	r1, r5
 8009eac:	d903      	bls.n	8009eb6 <_malloc_r+0x22>
 8009eae:	230c      	movs	r3, #12
 8009eb0:	6033      	str	r3, [r6, #0]
 8009eb2:	2000      	movs	r0, #0
 8009eb4:	bd70      	pop	{r4, r5, r6, pc}
 8009eb6:	f000 f863 	bl	8009f80 <__malloc_lock>
 8009eba:	4a23      	ldr	r2, [pc, #140]	; (8009f48 <_malloc_r+0xb4>)
 8009ebc:	6814      	ldr	r4, [r2, #0]
 8009ebe:	4621      	mov	r1, r4
 8009ec0:	b991      	cbnz	r1, 8009ee8 <_malloc_r+0x54>
 8009ec2:	4c22      	ldr	r4, [pc, #136]	; (8009f4c <_malloc_r+0xb8>)
 8009ec4:	6823      	ldr	r3, [r4, #0]
 8009ec6:	b91b      	cbnz	r3, 8009ed0 <_malloc_r+0x3c>
 8009ec8:	4630      	mov	r0, r6
 8009eca:	f000 f849 	bl	8009f60 <_sbrk_r>
 8009ece:	6020      	str	r0, [r4, #0]
 8009ed0:	4629      	mov	r1, r5
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	f000 f844 	bl	8009f60 <_sbrk_r>
 8009ed8:	1c43      	adds	r3, r0, #1
 8009eda:	d126      	bne.n	8009f2a <_malloc_r+0x96>
 8009edc:	230c      	movs	r3, #12
 8009ede:	6033      	str	r3, [r6, #0]
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	f000 f84e 	bl	8009f82 <__malloc_unlock>
 8009ee6:	e7e4      	b.n	8009eb2 <_malloc_r+0x1e>
 8009ee8:	680b      	ldr	r3, [r1, #0]
 8009eea:	1b5b      	subs	r3, r3, r5
 8009eec:	d41a      	bmi.n	8009f24 <_malloc_r+0x90>
 8009eee:	2b0b      	cmp	r3, #11
 8009ef0:	d90f      	bls.n	8009f12 <_malloc_r+0x7e>
 8009ef2:	600b      	str	r3, [r1, #0]
 8009ef4:	50cd      	str	r5, [r1, r3]
 8009ef6:	18cc      	adds	r4, r1, r3
 8009ef8:	4630      	mov	r0, r6
 8009efa:	f000 f842 	bl	8009f82 <__malloc_unlock>
 8009efe:	f104 000b 	add.w	r0, r4, #11
 8009f02:	1d23      	adds	r3, r4, #4
 8009f04:	f020 0007 	bic.w	r0, r0, #7
 8009f08:	1ac3      	subs	r3, r0, r3
 8009f0a:	d01b      	beq.n	8009f44 <_malloc_r+0xb0>
 8009f0c:	425a      	negs	r2, r3
 8009f0e:	50e2      	str	r2, [r4, r3]
 8009f10:	bd70      	pop	{r4, r5, r6, pc}
 8009f12:	428c      	cmp	r4, r1
 8009f14:	bf0d      	iteet	eq
 8009f16:	6863      	ldreq	r3, [r4, #4]
 8009f18:	684b      	ldrne	r3, [r1, #4]
 8009f1a:	6063      	strne	r3, [r4, #4]
 8009f1c:	6013      	streq	r3, [r2, #0]
 8009f1e:	bf18      	it	ne
 8009f20:	460c      	movne	r4, r1
 8009f22:	e7e9      	b.n	8009ef8 <_malloc_r+0x64>
 8009f24:	460c      	mov	r4, r1
 8009f26:	6849      	ldr	r1, [r1, #4]
 8009f28:	e7ca      	b.n	8009ec0 <_malloc_r+0x2c>
 8009f2a:	1cc4      	adds	r4, r0, #3
 8009f2c:	f024 0403 	bic.w	r4, r4, #3
 8009f30:	42a0      	cmp	r0, r4
 8009f32:	d005      	beq.n	8009f40 <_malloc_r+0xac>
 8009f34:	1a21      	subs	r1, r4, r0
 8009f36:	4630      	mov	r0, r6
 8009f38:	f000 f812 	bl	8009f60 <_sbrk_r>
 8009f3c:	3001      	adds	r0, #1
 8009f3e:	d0cd      	beq.n	8009edc <_malloc_r+0x48>
 8009f40:	6025      	str	r5, [r4, #0]
 8009f42:	e7d9      	b.n	8009ef8 <_malloc_r+0x64>
 8009f44:	bd70      	pop	{r4, r5, r6, pc}
 8009f46:	bf00      	nop
 8009f48:	200047a8 	.word	0x200047a8
 8009f4c:	200047ac 	.word	0x200047ac

08009f50 <realloc>:
 8009f50:	4b02      	ldr	r3, [pc, #8]	; (8009f5c <realloc+0xc>)
 8009f52:	460a      	mov	r2, r1
 8009f54:	4601      	mov	r1, r0
 8009f56:	6818      	ldr	r0, [r3, #0]
 8009f58:	f000 b814 	b.w	8009f84 <_realloc_r>
 8009f5c:	20000180 	.word	0x20000180

08009f60 <_sbrk_r>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	4c06      	ldr	r4, [pc, #24]	; (8009f7c <_sbrk_r+0x1c>)
 8009f64:	2300      	movs	r3, #0
 8009f66:	4605      	mov	r5, r0
 8009f68:	4608      	mov	r0, r1
 8009f6a:	6023      	str	r3, [r4, #0]
 8009f6c:	f7fd f9ec 	bl	8007348 <_sbrk>
 8009f70:	1c43      	adds	r3, r0, #1
 8009f72:	d102      	bne.n	8009f7a <_sbrk_r+0x1a>
 8009f74:	6823      	ldr	r3, [r4, #0]
 8009f76:	b103      	cbz	r3, 8009f7a <_sbrk_r+0x1a>
 8009f78:	602b      	str	r3, [r5, #0]
 8009f7a:	bd38      	pop	{r3, r4, r5, pc}
 8009f7c:	20005bcc 	.word	0x20005bcc

08009f80 <__malloc_lock>:
 8009f80:	4770      	bx	lr

08009f82 <__malloc_unlock>:
 8009f82:	4770      	bx	lr

08009f84 <_realloc_r>:
 8009f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f86:	4607      	mov	r7, r0
 8009f88:	4614      	mov	r4, r2
 8009f8a:	460e      	mov	r6, r1
 8009f8c:	b921      	cbnz	r1, 8009f98 <_realloc_r+0x14>
 8009f8e:	4611      	mov	r1, r2
 8009f90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009f94:	f7ff bf7e 	b.w	8009e94 <_malloc_r>
 8009f98:	b922      	cbnz	r2, 8009fa4 <_realloc_r+0x20>
 8009f9a:	f7ff ff2d 	bl	8009df8 <_free_r>
 8009f9e:	4625      	mov	r5, r4
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fa4:	f000 f814 	bl	8009fd0 <_malloc_usable_size_r>
 8009fa8:	4284      	cmp	r4, r0
 8009faa:	d90f      	bls.n	8009fcc <_realloc_r+0x48>
 8009fac:	4621      	mov	r1, r4
 8009fae:	4638      	mov	r0, r7
 8009fb0:	f7ff ff70 	bl	8009e94 <_malloc_r>
 8009fb4:	4605      	mov	r5, r0
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d0f2      	beq.n	8009fa0 <_realloc_r+0x1c>
 8009fba:	4631      	mov	r1, r6
 8009fbc:	4622      	mov	r2, r4
 8009fbe:	f7ff feed 	bl	8009d9c <memcpy>
 8009fc2:	4631      	mov	r1, r6
 8009fc4:	4638      	mov	r0, r7
 8009fc6:	f7ff ff17 	bl	8009df8 <_free_r>
 8009fca:	e7e9      	b.n	8009fa0 <_realloc_r+0x1c>
 8009fcc:	4635      	mov	r5, r6
 8009fce:	e7e7      	b.n	8009fa0 <_realloc_r+0x1c>

08009fd0 <_malloc_usable_size_r>:
 8009fd0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	f1a0 0004 	sub.w	r0, r0, #4
 8009fda:	bfbc      	itt	lt
 8009fdc:	580b      	ldrlt	r3, [r1, r0]
 8009fde:	18c0      	addlt	r0, r0, r3
 8009fe0:	4770      	bx	lr

08009fe2 <abort>:
 8009fe2:	b508      	push	{r3, lr}
 8009fe4:	2006      	movs	r0, #6
 8009fe6:	f000 f82b 	bl	800a040 <raise>
 8009fea:	2001      	movs	r0, #1
 8009fec:	f7fd f9a6 	bl	800733c <_exit>

08009ff0 <_raise_r>:
 8009ff0:	291f      	cmp	r1, #31
 8009ff2:	b538      	push	{r3, r4, r5, lr}
 8009ff4:	4604      	mov	r4, r0
 8009ff6:	460d      	mov	r5, r1
 8009ff8:	d904      	bls.n	800a004 <_raise_r+0x14>
 8009ffa:	2316      	movs	r3, #22
 8009ffc:	6003      	str	r3, [r0, #0]
 8009ffe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a002:	bd38      	pop	{r3, r4, r5, pc}
 800a004:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a006:	b112      	cbz	r2, 800a00e <_raise_r+0x1e>
 800a008:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a00c:	b94b      	cbnz	r3, 800a022 <_raise_r+0x32>
 800a00e:	4620      	mov	r0, r4
 800a010:	f000 f830 	bl	800a074 <_getpid_r>
 800a014:	462a      	mov	r2, r5
 800a016:	4601      	mov	r1, r0
 800a018:	4620      	mov	r0, r4
 800a01a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a01e:	f000 b817 	b.w	800a050 <_kill_r>
 800a022:	2b01      	cmp	r3, #1
 800a024:	d00a      	beq.n	800a03c <_raise_r+0x4c>
 800a026:	1c59      	adds	r1, r3, #1
 800a028:	d103      	bne.n	800a032 <_raise_r+0x42>
 800a02a:	2316      	movs	r3, #22
 800a02c:	6003      	str	r3, [r0, #0]
 800a02e:	2001      	movs	r0, #1
 800a030:	bd38      	pop	{r3, r4, r5, pc}
 800a032:	2400      	movs	r4, #0
 800a034:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a038:	4628      	mov	r0, r5
 800a03a:	4798      	blx	r3
 800a03c:	2000      	movs	r0, #0
 800a03e:	bd38      	pop	{r3, r4, r5, pc}

0800a040 <raise>:
 800a040:	4b02      	ldr	r3, [pc, #8]	; (800a04c <raise+0xc>)
 800a042:	4601      	mov	r1, r0
 800a044:	6818      	ldr	r0, [r3, #0]
 800a046:	f7ff bfd3 	b.w	8009ff0 <_raise_r>
 800a04a:	bf00      	nop
 800a04c:	20000180 	.word	0x20000180

0800a050 <_kill_r>:
 800a050:	b538      	push	{r3, r4, r5, lr}
 800a052:	4c07      	ldr	r4, [pc, #28]	; (800a070 <_kill_r+0x20>)
 800a054:	2300      	movs	r3, #0
 800a056:	4605      	mov	r5, r0
 800a058:	4608      	mov	r0, r1
 800a05a:	4611      	mov	r1, r2
 800a05c:	6023      	str	r3, [r4, #0]
 800a05e:	f7fd f965 	bl	800732c <_kill>
 800a062:	1c43      	adds	r3, r0, #1
 800a064:	d102      	bne.n	800a06c <_kill_r+0x1c>
 800a066:	6823      	ldr	r3, [r4, #0]
 800a068:	b103      	cbz	r3, 800a06c <_kill_r+0x1c>
 800a06a:	602b      	str	r3, [r5, #0]
 800a06c:	bd38      	pop	{r3, r4, r5, pc}
 800a06e:	bf00      	nop
 800a070:	20005bcc 	.word	0x20005bcc

0800a074 <_getpid_r>:
 800a074:	f7fd b958 	b.w	8007328 <_getpid>

0800a078 <_init>:
 800a078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a07a:	bf00      	nop
 800a07c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a07e:	bc08      	pop	{r3}
 800a080:	469e      	mov	lr, r3
 800a082:	4770      	bx	lr

0800a084 <_fini>:
 800a084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a086:	bf00      	nop
 800a088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a08a:	bc08      	pop	{r3}
 800a08c:	469e      	mov	lr, r3
 800a08e:	4770      	bx	lr
