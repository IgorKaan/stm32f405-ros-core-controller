
STM32F405VGFULL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  0800997c  0800997c  0001997c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009f20  08009f20  00019f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08009f28  08009f28  00019f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009f30  08009f30  00019f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  20000000  08009f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
  8 .bss          0000640c  200001e8  200001e8  000201e8  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200065f4  200065f4  000201e8  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003fc3a  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000072cc  00000000  00000000  0005fe52  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001e0fb  00000000  00000000  0006711e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001878  00000000  00000000  00085220  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00005030  00000000  00000000  00086a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028acb  00000000  00000000  0008bac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d1b2  00000000  00000000  000b4593  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dc295  00000000  00000000  000d1745  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ad9da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000538c  00000000  00000000  001ada58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009964 	.word	0x08009964

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08009964 	.word	0x08009964

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_Init+0x30>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80004ea:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80004f2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80004fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fc:	2003      	movs	r0, #3
 80004fe:	f000 fb8d 	bl	8000c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000502:	2000      	movs	r0, #0
 8000504:	f006 f854 	bl	80065b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000508:	f005 ff9e 	bl	8006448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800050c:	2000      	movs	r0, #0
 800050e:	bd08      	pop	{r3, pc}
 8000510:	40023c00 	.word	0x40023c00

08000514 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000514:	4a03      	ldr	r2, [pc, #12]	; (8000524 <HAL_IncTick+0x10>)
 8000516:	4b04      	ldr	r3, [pc, #16]	; (8000528 <HAL_IncTick+0x14>)
 8000518:	6811      	ldr	r1, [r2, #0]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	440b      	add	r3, r1
 800051e:	6013      	str	r3, [r2, #0]
}
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	20004b38 	.word	0x20004b38
 8000528:	20000000 	.word	0x20000000

0800052c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800052c:	4b01      	ldr	r3, [pc, #4]	; (8000534 <HAL_GetTick+0x8>)
 800052e:	6818      	ldr	r0, [r3, #0]
}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20004b38 	.word	0x20004b38

08000538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000538:	b538      	push	{r3, r4, r5, lr}
 800053a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800053c:	f7ff fff6 	bl	800052c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000540:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000542:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000544:	d002      	beq.n	800054c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000546:	4b04      	ldr	r3, [pc, #16]	; (8000558 <HAL_Delay+0x20>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800054c:	f7ff ffee 	bl	800052c <HAL_GetTick>
 8000550:	1b40      	subs	r0, r0, r5
 8000552:	42a0      	cmp	r0, r4
 8000554:	d3fa      	bcc.n	800054c <HAL_Delay+0x14>
  {
  }
}
 8000556:	bd38      	pop	{r3, r4, r5, pc}
 8000558:	20000000 	.word	0x20000000

0800055c <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800055c:	2800      	cmp	r0, #0
 800055e:	d07c      	beq.n	800065a <HAL_CAN_Init+0xfe>
{
 8000560:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000562:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000566:	4604      	mov	r4, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d073      	beq.n	8000654 <HAL_CAN_Init+0xf8>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800056c:	6822      	ldr	r2, [r4, #0]
 800056e:	6813      	ldr	r3, [r2, #0]
 8000570:	f023 0302 	bic.w	r3, r3, #2
 8000574:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000576:	f7ff ffd9 	bl	800052c <HAL_GetTick>
 800057a:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800057c:	e004      	b.n	8000588 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800057e:	f7ff ffd5 	bl	800052c <HAL_GetTick>
 8000582:	1b40      	subs	r0, r0, r5
 8000584:	280a      	cmp	r0, #10
 8000586:	d85c      	bhi.n	8000642 <HAL_CAN_Init+0xe6>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000588:	6823      	ldr	r3, [r4, #0]
 800058a:	685a      	ldr	r2, [r3, #4]
 800058c:	0791      	lsls	r1, r2, #30
 800058e:	d4f6      	bmi.n	800057e <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	f042 0201 	orr.w	r2, r2, #1
 8000596:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000598:	f7ff ffc8 	bl	800052c <HAL_GetTick>
 800059c:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800059e:	e004      	b.n	80005aa <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80005a0:	f7ff ffc4 	bl	800052c <HAL_GetTick>
 80005a4:	1b40      	subs	r0, r0, r5
 80005a6:	280a      	cmp	r0, #10
 80005a8:	d84b      	bhi.n	8000642 <HAL_CAN_Init+0xe6>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80005aa:	6823      	ldr	r3, [r4, #0]
 80005ac:	685a      	ldr	r2, [r3, #4]
 80005ae:	07d2      	lsls	r2, r2, #31
 80005b0:	d5f6      	bpl.n	80005a0 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80005b2:	7e22      	ldrb	r2, [r4, #24]
 80005b4:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	bf0c      	ite	eq
 80005ba:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80005be:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80005c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80005c4:	7e62      	ldrb	r2, [r4, #25]
 80005c6:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	bf0c      	ite	eq
 80005cc:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80005d0:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80005d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80005d6:	7ea2      	ldrb	r2, [r4, #26]
 80005d8:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	bf0c      	ite	eq
 80005de:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80005e2:	f022 0220 	bicne.w	r2, r2, #32
 80005e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80005e8:	7ee2      	ldrb	r2, [r4, #27]
 80005ea:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	bf0c      	ite	eq
 80005f0:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80005f4:	f042 0210 	orrne.w	r2, r2, #16
 80005f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80005fa:	7f22      	ldrb	r2, [r4, #28]
 80005fc:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	bf0c      	ite	eq
 8000602:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000606:	f022 0208 	bicne.w	r2, r2, #8
 800060a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800060c:	7f62      	ldrb	r2, [r4, #29]
 800060e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	bf0c      	ite	eq
 8000614:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000618:	f022 0204 	bicne.w	r2, r2, #4
 800061c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800061e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8000622:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
 8000626:	430a      	orrs	r2, r1
 8000628:	6861      	ldr	r1, [r4, #4]
 800062a:	432a      	orrs	r2, r5
 800062c:	4302      	orrs	r2, r0
 800062e:	3901      	subs	r1, #1
 8000630:	430a      	orrs	r2, r1

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000632:	2501      	movs	r5, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000634:	2100      	movs	r1, #0
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000636:	61da      	str	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 8000638:	4608      	mov	r0, r1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800063a:	6261      	str	r1, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800063c:	f884 5020 	strb.w	r5, [r4, #32]
}
 8000640:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000642:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000644:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064a:	6263      	str	r3, [r4, #36]	; 0x24
      return HAL_ERROR;
 800064c:	2001      	movs	r0, #1
      hcan->State = HAL_CAN_STATE_ERROR;
 800064e:	f884 2020 	strb.w	r2, [r4, #32]
}
 8000652:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8000654:	f005 ff24 	bl	80064a0 <HAL_CAN_MspInit>
 8000658:	e788      	b.n	800056c <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 800065a:	2001      	movs	r0, #1
}
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000660:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8000664:	3b01      	subs	r3, #1
 8000666:	2b01      	cmp	r3, #1
 8000668:	d905      	bls.n	8000676 <HAL_CAN_ConfigFilter+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800066a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800066c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000670:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000672:	2001      	movs	r0, #1
  }
}
 8000674:	4770      	bx	lr
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000676:	4b3c      	ldr	r3, [pc, #240]	; (8000768 <HAL_CAN_ConfigFilter+0x108>)
 8000678:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800067c:	f042 0201 	orr.w	r2, r2, #1
{
 8000680:	b4f0      	push	{r4, r5, r6, r7}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000682:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000686:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800068a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800068e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000692:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000696:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8000698:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800069c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80006a0:	694a      	ldr	r2, [r1, #20]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80006a2:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80006a6:	2401      	movs	r4, #1
 80006a8:	f002 001f 	and.w	r0, r2, #31
 80006ac:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80006b0:	43c4      	mvns	r4, r0
 80006b2:	4025      	ands	r5, r4
 80006b4:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80006b8:	69cd      	ldr	r5, [r1, #28]
 80006ba:	2d00      	cmp	r5, #0
 80006bc:	d03a      	beq.n	8000734 <HAL_CAN_ConfigFilter+0xd4>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80006be:	2d01      	cmp	r5, #1
 80006c0:	d115      	bne.n	80006ee <HAL_CAN_ConfigFilter+0x8e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80006c2:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 80006c6:	4305      	orrs	r5, r0
 80006c8:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
 80006cc:	00d2      	lsls	r2, r2, #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80006ce:	680f      	ldr	r7, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80006d0:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80006d2:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80006d4:	898b      	ldrh	r3, [r1, #12]
 80006d6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80006da:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80006de:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80006e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80006e6:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80006ea:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80006ee:	698b      	ldr	r3, [r1, #24]
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80006f0:	4a1d      	ldr	r2, [pc, #116]	; (8000768 <HAL_CAN_ConfigFilter+0x108>)
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80006f2:	bb9b      	cbnz	r3, 800075c <HAL_CAN_ConfigFilter+0xfc>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80006f4:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 80006f8:	4023      	ands	r3, r4
 80006fa:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80006fe:	690b      	ldr	r3, [r1, #16]
 8000700:	bb2b      	cbnz	r3, 800074e <HAL_CAN_ConfigFilter+0xee>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <HAL_CAN_ConfigFilter+0x108>)
 8000704:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000708:	4014      	ands	r4, r2
 800070a:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800070e:	6a0b      	ldr	r3, [r1, #32]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d105      	bne.n	8000720 <HAL_CAN_ConfigFilter+0xc0>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000714:	4a14      	ldr	r2, [pc, #80]	; (8000768 <HAL_CAN_ConfigFilter+0x108>)
 8000716:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
 800071a:	4318      	orrs	r0, r3
 800071c:	f8c2 021c 	str.w	r0, [r2, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000720:	4a11      	ldr	r2, [pc, #68]	; (8000768 <HAL_CAN_ConfigFilter+0x108>)
 8000722:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8000726:	f023 0301 	bic.w	r3, r3, #1
    return HAL_OK;
 800072a:	2000      	movs	r0, #0
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800072c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 8000730:	bcf0      	pop	{r4, r5, r6, r7}
 8000732:	4770      	bx	lr
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000734:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8000738:	4025      	ands	r5, r4
 800073a:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
 800073e:	00d2      	lsls	r2, r2, #3
 8000740:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000744:	68cf      	ldr	r7, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000746:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000748:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800074a:	880b      	ldrh	r3, [r1, #0]
 800074c:	e7c5      	b.n	80006da <HAL_CAN_ConfigFilter+0x7a>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800074e:	4a06      	ldr	r2, [pc, #24]	; (8000768 <HAL_CAN_ConfigFilter+0x108>)
 8000750:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8000754:	4303      	orrs	r3, r0
 8000756:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 800075a:	e7d8      	b.n	800070e <HAL_CAN_ConfigFilter+0xae>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800075c:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8000760:	4303      	orrs	r3, r0
 8000762:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 8000766:	e7ca      	b.n	80006fe <HAL_CAN_ConfigFilter+0x9e>
 8000768:	40006400 	.word	0x40006400

0800076c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800076c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800076e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d005      	beq.n	8000782 <HAL_CAN_Start+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000776:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000778:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800077c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800077e:	2001      	movs	r0, #1
  }
}
 8000780:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000782:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000784:	2302      	movs	r3, #2
 8000786:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800078a:	6813      	ldr	r3, [r2, #0]
 800078c:	f023 0301 	bic.w	r3, r3, #1
 8000790:	6013      	str	r3, [r2, #0]
 8000792:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8000794:	f7ff feca 	bl	800052c <HAL_GetTick>
 8000798:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800079a:	e004      	b.n	80007a6 <HAL_CAN_Start+0x3a>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800079c:	f7ff fec6 	bl	800052c <HAL_GetTick>
 80007a0:	1b40      	subs	r0, r0, r5
 80007a2:	280a      	cmp	r0, #10
 80007a4:	d807      	bhi.n	80007b6 <HAL_CAN_Start+0x4a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80007a6:	6823      	ldr	r3, [r4, #0]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	f013 0301 	ands.w	r3, r3, #1
 80007ae:	d1f5      	bne.n	800079c <HAL_CAN_Start+0x30>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80007b0:	6263      	str	r3, [r4, #36]	; 0x24
    return HAL_OK;
 80007b2:	4618      	mov	r0, r3
}
 80007b4:	bd38      	pop	{r3, r4, r5, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80007b8:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007be:	6263      	str	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 80007c0:	2001      	movs	r0, #1
        hcan->State = HAL_CAN_STATE_ERROR;
 80007c2:	f884 2020 	strb.w	r2, [r4, #32]
}
 80007c6:	bd38      	pop	{r3, r4, r5, pc}

080007c8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80007c8:	b470      	push	{r4, r5, r6}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80007ca:	f890 4020 	ldrb.w	r4, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80007ce:	6805      	ldr	r5, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80007d0:	3c01      	subs	r4, #1
 80007d2:	2c01      	cmp	r4, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80007d4:	68ae      	ldr	r6, [r5, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80007d6:	d906      	bls.n	80007e6 <HAL_CAN_AddTxMessage+0x1e>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80007d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80007da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007de:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80007e0:	2001      	movs	r0, #1
  }
}
 80007e2:	bc70      	pop	{r4, r5, r6}
 80007e4:	4770      	bx	lr
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80007e6:	f016 5fe0 	tst.w	r6, #469762048	; 0x1c000000
 80007ea:	d02e      	beq.n	800084a <HAL_CAN_AddTxMessage+0x82>
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80007ec:	f3c6 6601 	ubfx	r6, r6, #24, #2
      if (transmitmailbox > 2U)
 80007f0:	2e03      	cmp	r6, #3
 80007f2:	d031      	beq.n	8000858 <HAL_CAN_AddTxMessage+0x90>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80007f4:	2001      	movs	r0, #1
 80007f6:	40b0      	lsls	r0, r6
 80007f8:	6018      	str	r0, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 80007fa:	688b      	ldr	r3, [r1, #8]
 80007fc:	bb93      	cbnz	r3, 8000864 <HAL_CAN_AddTxMessage+0x9c>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80007fe:	680c      	ldr	r4, [r1, #0]
 8000800:	68c8      	ldr	r0, [r1, #12]
 8000802:	f106 0318 	add.w	r3, r6, #24
 8000806:	011b      	lsls	r3, r3, #4
 8000808:	ea40 5044 	orr.w	r0, r0, r4, lsl #21
 800080c:	50e8      	str	r0, [r5, r3]
      if (pHeader->TransmitGlobalTime == ENABLE)
 800080e:	7d08      	ldrb	r0, [r1, #20]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000810:	6909      	ldr	r1, [r1, #16]
 8000812:	0136      	lsls	r6, r6, #4
 8000814:	19ab      	adds	r3, r5, r6
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000816:	2801      	cmp	r0, #1
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000818:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 800081c:	d105      	bne.n	800082a <HAL_CAN_AddTxMessage+0x62>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800081e:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
 8000822:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000826:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800082a:	4435      	add	r5, r6
 800082c:	6851      	ldr	r1, [r2, #4]
 800082e:	f8c5 118c 	str.w	r1, [r5, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000832:	6812      	ldr	r2, [r2, #0]
 8000834:	f8c5 2188 	str.w	r2, [r5, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000838:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800083c:	f042 0201 	orr.w	r2, r2, #1
      return HAL_OK;
 8000840:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000842:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
 8000846:	bc70      	pop	{r4, r5, r6}
 8000848:	4770      	bx	lr
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800084a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800084c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000850:	6243      	str	r3, [r0, #36]	; 0x24
}
 8000852:	bc70      	pop	{r4, r5, r6}
      return HAL_ERROR;
 8000854:	2001      	movs	r0, #1
}
 8000856:	4770      	bx	lr
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000858:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800085a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800085e:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8000860:	2001      	movs	r0, #1
 8000862:	e7be      	b.n	80007e2 <HAL_CAN_AddTxMessage+0x1a>
                                                           pHeader->IDE |
 8000864:	68c8      	ldr	r0, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000866:	684c      	ldr	r4, [r1, #4]
                                                           pHeader->IDE |
 8000868:	4303      	orrs	r3, r0
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800086a:	f106 0018 	add.w	r0, r6, #24
 800086e:	0100      	lsls	r0, r0, #4
                                                           pHeader->IDE |
 8000870:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000874:	502b      	str	r3, [r5, r0]
 8000876:	e7ca      	b.n	800080e <HAL_CAN_AddTxMessage+0x46>

08000878 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 800087c:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000880:	3c01      	subs	r4, #1
 8000882:	2c01      	cmp	r4, #1
 8000884:	d906      	bls.n	8000894 <HAL_CAN_GetRxMessage+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000886:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800088c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800088e:	2001      	movs	r0, #1
  }
}
 8000890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000894:	6805      	ldr	r5, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000896:	2900      	cmp	r1, #0
 8000898:	d058      	beq.n	800094c <HAL_CAN_GetRxMessage+0xd4>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800089a:	692c      	ldr	r4, [r5, #16]
 800089c:	07a4      	lsls	r4, r4, #30
 800089e:	d058      	beq.n	8000952 <HAL_CAN_GetRxMessage+0xda>
 80008a0:	010c      	lsls	r4, r1, #4
 80008a2:	192e      	adds	r6, r5, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80008a4:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 80008a8:	f007 0704 	and.w	r7, r7, #4
 80008ac:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80008ae:	2f00      	cmp	r7, #0
 80008b0:	d15c      	bne.n	800096c <HAL_CAN_GetRxMessage+0xf4>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80008b2:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 80008b6:	0d7f      	lsrs	r7, r7, #21
 80008b8:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80008ba:	f8d6 e1b0 	ldr.w	lr, [r6, #432]	; 0x1b0
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80008be:	f8d6 c1b4 	ldr.w	ip, [r6, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80008c2:	f8d6 71b4 	ldr.w	r7, [r6, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80008c6:	f8d6 61b4 	ldr.w	r6, [r6, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80008ca:	4425      	add	r5, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80008cc:	f00e 0e02 	and.w	lr, lr, #2
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80008d0:	f8d5 81b8 	ldr.w	r8, [r5, #440]	; 0x1b8
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80008d4:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80008d8:	f00c 050f 	and.w	r5, ip, #15
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80008dc:	0c36      	lsrs	r6, r6, #16
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80008de:	e9c2 e503 	strd	lr, r5, [r2, #12]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80008e2:	e9c2 6705 	strd	r6, r7, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80008e6:	f883 8000 	strb.w	r8, [r3]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80008ea:	6802      	ldr	r2, [r0, #0]
 80008ec:	4422      	add	r2, r4
 80008ee:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80008f2:	0a12      	lsrs	r2, r2, #8
 80008f4:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80008f6:	6802      	ldr	r2, [r0, #0]
 80008f8:	4422      	add	r2, r4
 80008fa:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80008fe:	0c12      	lsrs	r2, r2, #16
 8000900:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000902:	6802      	ldr	r2, [r0, #0]
 8000904:	4422      	add	r2, r4
 8000906:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800090a:	0e12      	lsrs	r2, r2, #24
 800090c:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800090e:	6802      	ldr	r2, [r0, #0]
 8000910:	4422      	add	r2, r4
 8000912:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000916:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000918:	6802      	ldr	r2, [r0, #0]
 800091a:	4422      	add	r2, r4
 800091c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000920:	0a12      	lsrs	r2, r2, #8
 8000922:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000924:	6802      	ldr	r2, [r0, #0]
 8000926:	4422      	add	r2, r4
 8000928:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800092c:	0c12      	lsrs	r2, r2, #16
 800092e:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000930:	6802      	ldr	r2, [r0, #0]
 8000932:	4414      	add	r4, r2
 8000934:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8000938:	0e12      	lsrs	r2, r2, #24
 800093a:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800093c:	6802      	ldr	r2, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800093e:	b979      	cbnz	r1, 8000960 <HAL_CAN_GetRxMessage+0xe8>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000940:	68d3      	ldr	r3, [r2, #12]
 8000942:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 8000946:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000948:	60d3      	str	r3, [r2, #12]
 800094a:	e7a1      	b.n	8000890 <HAL_CAN_GetRxMessage+0x18>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800094c:	68ec      	ldr	r4, [r5, #12]
 800094e:	07a6      	lsls	r6, r4, #30
 8000950:	d1a6      	bne.n	80008a0 <HAL_CAN_GetRxMessage+0x28>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000952:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000954:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000958:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 800095a:	2001      	movs	r0, #1
}
 800095c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000960:	6913      	ldr	r3, [r2, #16]
 8000962:	f043 0320 	orr.w	r3, r3, #32
 8000966:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 8000968:	2000      	movs	r0, #0
 800096a:	e791      	b.n	8000890 <HAL_CAN_GetRxMessage+0x18>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800096c:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 8000970:	08ff      	lsrs	r7, r7, #3
 8000972:	6057      	str	r7, [r2, #4]
 8000974:	e7a1      	b.n	80008ba <HAL_CAN_GetRxMessage+0x42>
 8000976:	bf00      	nop

08000978 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000978:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800097c:	3b01      	subs	r3, #1
 800097e:	2b01      	cmp	r3, #1
 8000980:	d905      	bls.n	800098e <HAL_CAN_ActivateNotification+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000982:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000988:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800098a:	2001      	movs	r0, #1
  }
}
 800098c:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800098e:	6802      	ldr	r2, [r0, #0]
 8000990:	6953      	ldr	r3, [r2, #20]
 8000992:	4319      	orrs	r1, r3
 8000994:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8000996:	2000      	movs	r0, #0
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <HAL_CAN_TxMailbox0CompleteCallback>:
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop

080009a0 <HAL_CAN_TxMailbox1CompleteCallback>:
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <HAL_CAN_TxMailbox2CompleteCallback>:
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <HAL_CAN_TxMailbox0AbortCallback>:
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <HAL_CAN_TxMailbox1AbortCallback>:
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <HAL_CAN_TxMailbox2AbortCallback>:
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <HAL_CAN_RxFifo0FullCallback>:
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <HAL_CAN_RxFifo1MsgPendingCallback>:
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <HAL_CAN_RxFifo1FullCallback>:
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop

080009c0 <HAL_CAN_SleepCallback>:
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <HAL_CAN_WakeUpFromRxMsgCallback>:
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <HAL_CAN_ErrorCallback>:
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80009cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80009d0:	6803      	ldr	r3, [r0, #0]
 80009d2:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80009d4:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80009d8:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80009da:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80009de:	f8d3 9010 	ldr.w	r9, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80009e2:	f8d3 a018 	ldr.w	sl, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80009e6:	f014 0601 	ands.w	r6, r4, #1
{
 80009ea:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80009ec:	d025      	beq.n	8000a3a <HAL_CAN_IRQHandler+0x6e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80009ee:	f017 0601 	ands.w	r6, r7, #1
 80009f2:	f040 809c 	bne.w	8000b2e <HAL_CAN_IRQHandler+0x162>
 80009f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80009fe:	05f8      	lsls	r0, r7, #23
 8000a00:	d50d      	bpl.n	8000a1e <HAL_CAN_IRQHandler+0x52>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000a02:	682b      	ldr	r3, [r5, #0]
 8000a04:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a08:	6098      	str	r0, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000a0a:	05bb      	lsls	r3, r7, #22
 8000a0c:	f100 80c7 	bmi.w	8000b9e <HAL_CAN_IRQHandler+0x1d2>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000a10:	0578      	lsls	r0, r7, #21
 8000a12:	f100 80d7 	bmi.w	8000bc4 <HAL_CAN_IRQHandler+0x1f8>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000a16:	053a      	lsls	r2, r7, #20
 8000a18:	f140 80e8 	bpl.w	8000bec <HAL_CAN_IRQHandler+0x220>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000a1c:	460e      	mov	r6, r1
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000a1e:	03fb      	lsls	r3, r7, #15
 8000a20:	d50b      	bpl.n	8000a3a <HAL_CAN_IRQHandler+0x6e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000a22:	682b      	ldr	r3, [r5, #0]
 8000a24:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000a28:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000a2a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000a2c:	f100 80b3 	bmi.w	8000b96 <HAL_CAN_IRQHandler+0x1ca>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000a30:	0379      	lsls	r1, r7, #13
 8000a32:	f140 80c9 	bpl.w	8000bc8 <HAL_CAN_IRQHandler+0x1fc>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000a36:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000a3a:	0723      	lsls	r3, r4, #28
 8000a3c:	d502      	bpl.n	8000a44 <HAL_CAN_IRQHandler+0x78>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000a3e:	f01b 0f10 	tst.w	fp, #16
 8000a42:	d16e      	bne.n	8000b22 <HAL_CAN_IRQHandler+0x156>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000a44:	0767      	lsls	r7, r4, #29
 8000a46:	d502      	bpl.n	8000a4e <HAL_CAN_IRQHandler+0x82>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000a48:	f01b 0f08 	tst.w	fp, #8
 8000a4c:	d17f      	bne.n	8000b4e <HAL_CAN_IRQHandler+0x182>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000a4e:	07a0      	lsls	r0, r4, #30
 8000a50:	d504      	bpl.n	8000a5c <HAL_CAN_IRQHandler+0x90>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000a52:	682b      	ldr	r3, [r5, #0]
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	0799      	lsls	r1, r3, #30
 8000a58:	f040 808e 	bne.w	8000b78 <HAL_CAN_IRQHandler+0x1ac>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000a5c:	0662      	lsls	r2, r4, #25
 8000a5e:	d502      	bpl.n	8000a66 <HAL_CAN_IRQHandler+0x9a>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000a60:	f019 0f10 	tst.w	r9, #16
 8000a64:	d157      	bne.n	8000b16 <HAL_CAN_IRQHandler+0x14a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000a66:	06a3      	lsls	r3, r4, #26
 8000a68:	d503      	bpl.n	8000a72 <HAL_CAN_IRQHandler+0xa6>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000a6a:	f019 0f08 	tst.w	r9, #8
 8000a6e:	f040 8087 	bne.w	8000b80 <HAL_CAN_IRQHandler+0x1b4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000a72:	06e7      	lsls	r7, r4, #27
 8000a74:	d504      	bpl.n	8000a80 <HAL_CAN_IRQHandler+0xb4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000a76:	682b      	ldr	r3, [r5, #0]
 8000a78:	691b      	ldr	r3, [r3, #16]
 8000a7a:	0798      	lsls	r0, r3, #30
 8000a7c:	f040 8087 	bne.w	8000b8e <HAL_CAN_IRQHandler+0x1c2>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000a80:	03a1      	lsls	r1, r4, #14
 8000a82:	d502      	bpl.n	8000a8a <HAL_CAN_IRQHandler+0xbe>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000a84:	f018 0f10 	tst.w	r8, #16
 8000a88:	d168      	bne.n	8000b5c <HAL_CAN_IRQHandler+0x190>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000a8a:	03e2      	lsls	r2, r4, #15
 8000a8c:	d502      	bpl.n	8000a94 <HAL_CAN_IRQHandler+0xc8>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000a8e:	f018 0f08 	tst.w	r8, #8
 8000a92:	d16a      	bne.n	8000b6a <HAL_CAN_IRQHandler+0x19e>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000a94:	0423      	lsls	r3, r4, #16
 8000a96:	d535      	bpl.n	8000b04 <HAL_CAN_IRQHandler+0x138>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000a98:	f018 0f04 	tst.w	r8, #4
 8000a9c:	682b      	ldr	r3, [r5, #0]
 8000a9e:	d02f      	beq.n	8000b00 <HAL_CAN_IRQHandler+0x134>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000aa0:	05e7      	lsls	r7, r4, #23
 8000aa2:	d504      	bpl.n	8000aae <HAL_CAN_IRQHandler+0xe2>
 8000aa4:	f01a 0f01 	tst.w	sl, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000aa8:	bf18      	it	ne
 8000aaa:	f046 0601 	orrne.w	r6, r6, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000aae:	05a0      	lsls	r0, r4, #22
 8000ab0:	d504      	bpl.n	8000abc <HAL_CAN_IRQHandler+0xf0>
 8000ab2:	f01a 0f02 	tst.w	sl, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000ab6:	bf18      	it	ne
 8000ab8:	f046 0602 	orrne.w	r6, r6, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000abc:	0561      	lsls	r1, r4, #21
 8000abe:	d504      	bpl.n	8000aca <HAL_CAN_IRQHandler+0xfe>
 8000ac0:	f01a 0f04 	tst.w	sl, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000ac4:	bf18      	it	ne
 8000ac6:	f046 0604 	orrne.w	r6, r6, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000aca:	0522      	lsls	r2, r4, #20
 8000acc:	d518      	bpl.n	8000b00 <HAL_CAN_IRQHandler+0x134>
 8000ace:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 8000ad2:	d015      	beq.n	8000b00 <HAL_CAN_IRQHandler+0x134>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 8000ad4:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8000ad8:	f000 8096 	beq.w	8000c08 <HAL_CAN_IRQHandler+0x23c>
 8000adc:	d979      	bls.n	8000bd2 <HAL_CAN_IRQHandler+0x206>
 8000ade:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 8000ae2:	f000 808e 	beq.w	8000c02 <HAL_CAN_IRQHandler+0x236>
 8000ae6:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 8000aea:	f000 8090 	beq.w	8000c0e <HAL_CAN_IRQHandler+0x242>
 8000aee:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8000af2:	d101      	bne.n	8000af8 <HAL_CAN_IRQHandler+0x12c>
            /* Set CAN error code to Acknowledgement error */
            errorcode |= HAL_CAN_ERROR_ACK;
            break;
          case (CAN_ESR_LEC_2):
            /* Set CAN error code to Bit recessive error */
            errorcode |= HAL_CAN_ERROR_BR;
 8000af4:	f046 0640 	orr.w	r6, r6, #64	; 0x40
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000af8:	699a      	ldr	r2, [r3, #24]
 8000afa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000afe:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000b00:	2204      	movs	r2, #4
 8000b02:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000b04:	b12e      	cbz	r6, 8000b12 <HAL_CAN_IRQHandler+0x146>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000b06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000b08:	431e      	orrs	r6, r3
 8000b0a:	626e      	str	r6, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000b0c:	4628      	mov	r0, r5
 8000b0e:	f7ff ff5b 	bl	80009c8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000b12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000b16:	682b      	ldr	r3, [r5, #0]
 8000b18:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000b1a:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000b1e:	611a      	str	r2, [r3, #16]
 8000b20:	e7a1      	b.n	8000a66 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000b22:	682b      	ldr	r3, [r5, #0]
 8000b24:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000b26:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	e78a      	b.n	8000a44 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000b32:	07bb      	lsls	r3, r7, #30
 8000b34:	d437      	bmi.n	8000ba6 <HAL_CAN_IRQHandler+0x1da>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000b36:	077e      	lsls	r6, r7, #29
 8000b38:	d43d      	bmi.n	8000bb6 <HAL_CAN_IRQHandler+0x1ea>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000b3a:	f017 0608 	ands.w	r6, r7, #8
 8000b3e:	d059      	beq.n	8000bf4 <HAL_CAN_IRQHandler+0x228>
 8000b40:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000b44:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000b48:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8000b4c:	e757      	b.n	80009fe <HAL_CAN_IRQHandler+0x32>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000b4e:	682b      	ldr	r3, [r5, #0]
 8000b50:	2208      	movs	r2, #8
 8000b52:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000b54:	4628      	mov	r0, r5
 8000b56:	f7ff ff2d 	bl	80009b4 <HAL_CAN_RxFifo0FullCallback>
 8000b5a:	e778      	b.n	8000a4e <HAL_CAN_IRQHandler+0x82>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000b5c:	682b      	ldr	r3, [r5, #0]
 8000b5e:	2210      	movs	r2, #16
 8000b60:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000b62:	4628      	mov	r0, r5
 8000b64:	f7ff ff2c 	bl	80009c0 <HAL_CAN_SleepCallback>
 8000b68:	e78f      	b.n	8000a8a <HAL_CAN_IRQHandler+0xbe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000b6a:	682b      	ldr	r3, [r5, #0]
 8000b6c:	2208      	movs	r2, #8
 8000b6e:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000b70:	4628      	mov	r0, r5
 8000b72:	f7ff ff27 	bl	80009c4 <HAL_CAN_WakeUpFromRxMsgCallback>
 8000b76:	e78d      	b.n	8000a94 <HAL_CAN_IRQHandler+0xc8>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000b78:	4628      	mov	r0, r5
 8000b7a:	f005 fad5 	bl	8006128 <HAL_CAN_RxFifo0MsgPendingCallback>
 8000b7e:	e76d      	b.n	8000a5c <HAL_CAN_IRQHandler+0x90>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000b80:	682b      	ldr	r3, [r5, #0]
 8000b82:	2208      	movs	r2, #8
 8000b84:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000b86:	4628      	mov	r0, r5
 8000b88:	f7ff ff18 	bl	80009bc <HAL_CAN_RxFifo1FullCallback>
 8000b8c:	e771      	b.n	8000a72 <HAL_CAN_IRQHandler+0xa6>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000b8e:	4628      	mov	r0, r5
 8000b90:	f7ff ff12 	bl	80009b8 <HAL_CAN_RxFifo1MsgPendingCallback>
 8000b94:	e774      	b.n	8000a80 <HAL_CAN_IRQHandler+0xb4>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000b96:	4628      	mov	r0, r5
 8000b98:	f7ff ff04 	bl	80009a4 <HAL_CAN_TxMailbox2CompleteCallback>
 8000b9c:	e74d      	b.n	8000a3a <HAL_CAN_IRQHandler+0x6e>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000b9e:	4628      	mov	r0, r5
 8000ba0:	f7ff fefe 	bl	80009a0 <HAL_CAN_TxMailbox1CompleteCallback>
 8000ba4:	e73b      	b.n	8000a1e <HAL_CAN_IRQHandler+0x52>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000ba6:	f7ff fef9 	bl	800099c <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000baa:	2600      	movs	r6, #0
 8000bac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bb4:	e723      	b.n	80009fe <HAL_CAN_IRQHandler+0x32>
 8000bb6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8000bba:	f44f 4190 	mov.w	r1, #18432	; 0x4800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000bbe:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8000bc2:	e71c      	b.n	80009fe <HAL_CAN_IRQHandler+0x32>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000bc4:	4616      	mov	r6, r2
 8000bc6:	e72a      	b.n	8000a1e <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000bc8:	033a      	lsls	r2, r7, #12
 8000bca:	d50b      	bpl.n	8000be4 <HAL_CAN_IRQHandler+0x218>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000bcc:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8000bd0:	e733      	b.n	8000a3a <HAL_CAN_IRQHandler+0x6e>
        switch (esrflags & CAN_ESR_LEC)
 8000bd2:	f1ba 0f10 	cmp.w	sl, #16
 8000bd6:	d01d      	beq.n	8000c14 <HAL_CAN_IRQHandler+0x248>
 8000bd8:	f1ba 0f20 	cmp.w	sl, #32
 8000bdc:	d18c      	bne.n	8000af8 <HAL_CAN_IRQHandler+0x12c>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000bde:	f046 0610 	orr.w	r6, r6, #16
            break;
 8000be2:	e789      	b.n	8000af8 <HAL_CAN_IRQHandler+0x12c>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000be4:	4628      	mov	r0, r5
 8000be6:	f7ff fee3 	bl	80009b0 <HAL_CAN_TxMailbox2AbortCallback>
 8000bea:	e726      	b.n	8000a3a <HAL_CAN_IRQHandler+0x6e>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000bec:	4628      	mov	r0, r5
 8000bee:	f7ff fedd 	bl	80009ac <HAL_CAN_TxMailbox1AbortCallback>
 8000bf2:	e714      	b.n	8000a1e <HAL_CAN_IRQHandler+0x52>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000bf4:	f7ff fed8 	bl	80009a8 <HAL_CAN_TxMailbox0AbortCallback>
 8000bf8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c00:	e6fd      	b.n	80009fe <HAL_CAN_IRQHandler+0x32>
            errorcode |= HAL_CAN_ERROR_BD;
 8000c02:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 8000c06:	e777      	b.n	8000af8 <HAL_CAN_IRQHandler+0x12c>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000c08:	f046 0620 	orr.w	r6, r6, #32
            break;
 8000c0c:	e774      	b.n	8000af8 <HAL_CAN_IRQHandler+0x12c>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000c0e:	f446 7680 	orr.w	r6, r6, #256	; 0x100
            break;
 8000c12:	e771      	b.n	8000af8 <HAL_CAN_IRQHandler+0x12c>
            errorcode |= HAL_CAN_ERROR_STF;
 8000c14:	f046 0608 	orr.w	r6, r6, #8
            break;
 8000c18:	e76e      	b.n	8000af8 <HAL_CAN_IRQHandler+0x12c>
 8000c1a:	bf00      	nop

08000c1c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c1c:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c1e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c20:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000c24:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c26:	0200      	lsls	r0, r0, #8
 8000c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c2c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000c34:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000c36:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <HAL_NVIC_SetPriority+0x64>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c48:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c4a:	f1c3 0507 	rsb	r5, r3, #7
 8000c4e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c50:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c54:	bf28      	it	cs
 8000c56:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c58:	2c06      	cmp	r4, #6
 8000c5a:	d919      	bls.n	8000c90 <HAL_NVIC_SetPriority+0x50>
 8000c5c:	3b03      	subs	r3, #3
 8000c5e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000c62:	409c      	lsls	r4, r3
 8000c64:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c6c:	40aa      	lsls	r2, r5
 8000c6e:	ea21 0102 	bic.w	r1, r1, r2
 8000c72:	fa01 f203 	lsl.w	r2, r1, r3
 8000c76:	4322      	orrs	r2, r4
 8000c78:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8000c7a:	2800      	cmp	r0, #0
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	db0a      	blt.n	8000c96 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c80:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000c84:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000c88:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c8c:	bc30      	pop	{r4, r5}
 8000c8e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c90:	2400      	movs	r4, #0
 8000c92:	4623      	mov	r3, r4
 8000c94:	e7e8      	b.n	8000c68 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c96:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <HAL_NVIC_SetPriority+0x68>)
 8000c98:	f000 000f 	and.w	r0, r0, #15
 8000c9c:	4403      	add	r3, r0
 8000c9e:	761a      	strb	r2, [r3, #24]
 8000ca0:	bc30      	pop	{r4, r5}
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00
 8000ca8:	e000ecfc 	.word	0xe000ecfc

08000cac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000cac:	2800      	cmp	r0, #0
 8000cae:	db07      	blt.n	8000cc0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb0:	f000 011f 	and.w	r1, r0, #31
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	0940      	lsrs	r0, r0, #5
 8000cb8:	4a02      	ldr	r2, [pc, #8]	; (8000cc4 <HAL_NVIC_EnableIRQ+0x18>)
 8000cba:	408b      	lsls	r3, r1
 8000cbc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cc8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d003      	beq.n	8000cd8 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cd0:	2380      	movs	r3, #128	; 0x80
 8000cd2:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000cd8:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000cda:	2305      	movs	r3, #5
 8000cdc:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000ce0:	6813      	ldr	r3, [r2, #0]
 8000ce2:	f023 0301 	bic.w	r3, r3, #1
 8000ce6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000ce8:	2000      	movs	r0, #0
}
 8000cea:	4770      	bx	lr

08000cec <HAL_DMA_GetState>:
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  return hdma->State;
 8000cec:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cf8:	f8d1 8000 	ldr.w	r8, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cfc:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 8000ef4 <HAL_GPIO_Init+0x200>
{
 8000d00:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d02:	2400      	movs	r4, #0
 8000d04:	e003      	b.n	8000d0e <HAL_GPIO_Init+0x1a>
 8000d06:	3401      	adds	r4, #1
 8000d08:	2c10      	cmp	r4, #16
 8000d0a:	f000 808c 	beq.w	8000e26 <HAL_GPIO_Init+0x132>
    ioposition = 0x01U << position;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d12:	ea08 0203 	and.w	r2, r8, r3
    if(iocurrent == ioposition)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d1f5      	bne.n	8000d06 <HAL_GPIO_Init+0x12>
 8000d1a:	e9d1 6501 	ldrd	r6, r5, [r1, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d1e:	f026 0910 	bic.w	r9, r6, #16
 8000d22:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 8000d26:	2303      	movs	r3, #3
 8000d28:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8000d2c:	fa03 f30c 	lsl.w	r3, r3, ip
 8000d30:	2f01      	cmp	r7, #1
 8000d32:	ea6f 0303 	mvn.w	r3, r3
 8000d36:	fa05 f50c 	lsl.w	r5, r5, ip
 8000d3a:	d977      	bls.n	8000e2c <HAL_GPIO_Init+0x138>
      temp = GPIOx->PUPDR;
 8000d3c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d3e:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d40:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000d42:	60c5      	str	r5, [r0, #12]
      temp = GPIOx->MODER;
 8000d44:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d46:	f006 0503 	and.w	r5, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d4a:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d4c:	fa05 f30c 	lsl.w	r3, r5, ip
 8000d50:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 8000d52:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d54:	00f3      	lsls	r3, r6, #3
 8000d56:	d5d6      	bpl.n	8000d06 <HAL_GPIO_Init+0x12>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d58:	4d5f      	ldr	r5, [pc, #380]	; (8000ed8 <HAL_GPIO_Init+0x1e4>)
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	9301      	str	r3, [sp, #4]
 8000d5e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d64:	646b      	str	r3, [r5, #68]	; 0x44
 8000d66:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 8000d68:	f024 0303 	bic.w	r3, r4, #3
 8000d6c:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8000d70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d74:	9501      	str	r5, [sp, #4]
 8000d76:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d7a:	f004 0503 	and.w	r5, r4, #3
 8000d7e:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d82:	4d56      	ldr	r5, [pc, #344]	; (8000edc <HAL_GPIO_Init+0x1e8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d84:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000d86:	f8d3 c008 	ldr.w	ip, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d8a:	270f      	movs	r7, #15
 8000d8c:	fa07 f709 	lsl.w	r7, r7, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d90:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d92:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d96:	d01f      	beq.n	8000dd8 <HAL_GPIO_Init+0xe4>
 8000d98:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d9c:	42a8      	cmp	r0, r5
 8000d9e:	d076      	beq.n	8000e8e <HAL_GPIO_Init+0x19a>
 8000da0:	4d4f      	ldr	r5, [pc, #316]	; (8000ee0 <HAL_GPIO_Init+0x1ec>)
 8000da2:	42a8      	cmp	r0, r5
 8000da4:	d079      	beq.n	8000e9a <HAL_GPIO_Init+0x1a6>
 8000da6:	4d4f      	ldr	r5, [pc, #316]	; (8000ee4 <HAL_GPIO_Init+0x1f0>)
 8000da8:	42a8      	cmp	r0, r5
 8000daa:	d07c      	beq.n	8000ea6 <HAL_GPIO_Init+0x1b2>
 8000dac:	4d4e      	ldr	r5, [pc, #312]	; (8000ee8 <HAL_GPIO_Init+0x1f4>)
 8000dae:	42a8      	cmp	r0, r5
 8000db0:	d07f      	beq.n	8000eb2 <HAL_GPIO_Init+0x1be>
 8000db2:	4d4e      	ldr	r5, [pc, #312]	; (8000eec <HAL_GPIO_Init+0x1f8>)
 8000db4:	42a8      	cmp	r0, r5
 8000db6:	f000 8082 	beq.w	8000ebe <HAL_GPIO_Init+0x1ca>
 8000dba:	4d4d      	ldr	r5, [pc, #308]	; (8000ef0 <HAL_GPIO_Init+0x1fc>)
 8000dbc:	42a8      	cmp	r0, r5
 8000dbe:	f000 8084 	beq.w	8000eca <HAL_GPIO_Init+0x1d6>
 8000dc2:	f8df c134 	ldr.w	ip, [pc, #308]	; 8000ef8 <HAL_GPIO_Init+0x204>
 8000dc6:	4560      	cmp	r0, ip
 8000dc8:	bf0c      	ite	eq
 8000dca:	f04f 0c07 	moveq.w	ip, #7
 8000dce:	f04f 0c08 	movne.w	ip, #8
 8000dd2:	fa0c f509 	lsl.w	r5, ip, r9
 8000dd6:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dd8:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 8000dda:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8000dde:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000de0:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 8000de2:	bf54      	ite	pl
 8000de4:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8000de6:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 8000de8:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8000dec:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000df0:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 8000df2:	bf54      	ite	pl
 8000df4:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8000df6:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 8000df8:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dfc:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e00:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 8000e02:	bf54      	ite	pl
 8000e04:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8000e06:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 8000e08:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8000e0c:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e10:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e12:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 8000e16:	bf54      	ite	pl
 8000e18:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8000e1a:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e1c:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 8000e1e:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e22:	f47f af74 	bne.w	8000d0e <HAL_GPIO_Init+0x1a>
      }
    }
  }
}
 8000e26:	b003      	add	sp, #12
 8000e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8000e2c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e2e:	ea07 0a03 	and.w	sl, r7, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e32:	68cf      	ldr	r7, [r1, #12]
 8000e34:	fa07 f70c 	lsl.w	r7, r7, ip
 8000e38:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8000e3c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000e3e:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e42:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e46:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e4a:	40a7      	lsls	r7, r4
 8000e4c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8000e50:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000e52:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e54:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e56:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e58:	f1b9 0f02 	cmp.w	r9, #2
      GPIOx->PUPDR = temp;
 8000e5c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e5e:	f47f af71 	bne.w	8000d44 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3U];
 8000e62:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8000e66:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e6a:	f004 0707 	and.w	r7, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 8000e6e:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e72:	00bf      	lsls	r7, r7, #2
 8000e74:	f04f 0b0f 	mov.w	fp, #15
 8000e78:	fa0b fb07 	lsl.w	fp, fp, r7
 8000e7c:	ea25 0a0b 	bic.w	sl, r5, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e80:	690d      	ldr	r5, [r1, #16]
 8000e82:	40bd      	lsls	r5, r7
 8000e84:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->AFR[position >> 3U] = temp;
 8000e88:	f8c9 5020 	str.w	r5, [r9, #32]
 8000e8c:	e75a      	b.n	8000d44 <HAL_GPIO_Init+0x50>
 8000e8e:	f04f 0c01 	mov.w	ip, #1
 8000e92:	fa0c f509 	lsl.w	r5, ip, r9
 8000e96:	432f      	orrs	r7, r5
 8000e98:	e79e      	b.n	8000dd8 <HAL_GPIO_Init+0xe4>
 8000e9a:	f04f 0c02 	mov.w	ip, #2
 8000e9e:	fa0c f509 	lsl.w	r5, ip, r9
 8000ea2:	432f      	orrs	r7, r5
 8000ea4:	e798      	b.n	8000dd8 <HAL_GPIO_Init+0xe4>
 8000ea6:	f04f 0c03 	mov.w	ip, #3
 8000eaa:	fa0c f509 	lsl.w	r5, ip, r9
 8000eae:	432f      	orrs	r7, r5
 8000eb0:	e792      	b.n	8000dd8 <HAL_GPIO_Init+0xe4>
 8000eb2:	f04f 0c04 	mov.w	ip, #4
 8000eb6:	fa0c f509 	lsl.w	r5, ip, r9
 8000eba:	432f      	orrs	r7, r5
 8000ebc:	e78c      	b.n	8000dd8 <HAL_GPIO_Init+0xe4>
 8000ebe:	f04f 0c05 	mov.w	ip, #5
 8000ec2:	fa0c f509 	lsl.w	r5, ip, r9
 8000ec6:	432f      	orrs	r7, r5
 8000ec8:	e786      	b.n	8000dd8 <HAL_GPIO_Init+0xe4>
 8000eca:	f04f 0c06 	mov.w	ip, #6
 8000ece:	fa0c f509 	lsl.w	r5, ip, r9
 8000ed2:	432f      	orrs	r7, r5
 8000ed4:	e780      	b.n	8000dd8 <HAL_GPIO_Init+0xe4>
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	40020800 	.word	0x40020800
 8000ee4:	40020c00 	.word	0x40020c00
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40021400 	.word	0x40021400
 8000ef0:	40021800 	.word	0x40021800
 8000ef4:	40013c00 	.word	0x40013c00
 8000ef8:	40021c00 	.word	0x40021c00

08000efc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000efc:	b902      	cbnz	r2, 8000f00 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000efe:	0409      	lsls	r1, r1, #16
 8000f00:	6181      	str	r1, [r0, #24]
  }
}
 8000f02:	4770      	bx	lr

08000f04 <I2C_MemoryTransmit_TXE_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->EventCount == 0U)
 8000f04:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000f06:	b95b      	cbnz	r3, 8000f20 <I2C_MemoryTransmit_TXE_BTF+0x1c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8000f08:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000f0a:	6802      	ldr	r2, [r0, #0]
 8000f0c:	2b01      	cmp	r3, #1
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8000f0e:	6c83      	ldr	r3, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8000f10:	d00d      	beq.n	8000f2e <I2C_MemoryTransmit_TXE_BTF+0x2a>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Send MSB of Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8000f12:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8000f16:	6113      	str	r3, [r2, #16]

      hi2c->EventCount++;
 8000f18:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	6503      	str	r3, [r0, #80]	; 0x50
 8000f1e:	4770      	bx	lr
    }
  }
  else if (hi2c->EventCount == 1U)
 8000f20:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d009      	beq.n	8000f3a <I2C_MemoryTransmit_TXE_BTF+0x36>
    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);

    hi2c->EventCount++;
  }
  else if (hi2c->EventCount == 2U)
 8000f26:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d00e      	beq.n	8000f4a <I2C_MemoryTransmit_TXE_BTF+0x46>
  }
  else
  {
    /* Do nothing */
  }
}
 8000f2c:	4770      	bx	lr
 8000f2e:	b2db      	uxtb	r3, r3
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8000f30:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 8000f32:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000f34:	3302      	adds	r3, #2
 8000f36:	6503      	str	r3, [r0, #80]	; 0x50
 8000f38:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8000f3a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000f3c:	6802      	ldr	r2, [r0, #0]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	6113      	str	r3, [r2, #16]
    hi2c->EventCount++;
 8000f42:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000f44:	3301      	adds	r3, #1
 8000f46:	6503      	str	r3, [r0, #80]	; 0x50
 8000f48:	4770      	bx	lr
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000f4a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000f4e:	2b22      	cmp	r3, #34	; 0x22
 8000f50:	d00e      	beq.n	8000f70 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8000f52:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000f56:	2b21      	cmp	r3, #33	; 0x21
 8000f58:	d1e8      	bne.n	8000f2c <I2C_MemoryTransmit_TXE_BTF+0x28>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f5a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000f5c:	6803      	ldr	r3, [r0, #0]
 8000f5e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8000f62:	6119      	str	r1, [r3, #16]
      hi2c->XferCount--;
 8000f64:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8000f66:	6242      	str	r2, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8000f6e:	e7dd      	b.n	8000f2c <I2C_MemoryTransmit_TXE_BTF+0x28>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8000f70:	6802      	ldr	r2, [r0, #0]
 8000f72:	6813      	ldr	r3, [r2, #0]
 8000f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	4770      	bx	lr

08000f7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8000f7c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8000f80:	4604      	mov	r4, r0
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000f82:	6800      	ldr	r0, [r0, #0]
{
 8000f84:	4689      	mov	r9, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000f86:	6801      	ldr	r1, [r0, #0]
 8000f88:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000f8c:	6001      	str	r1, [r0, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000f8e:	6801      	ldr	r1, [r0, #0]
{
 8000f90:	b082      	sub	sp, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000f92:	f441 7180 	orr.w	r1, r1, #256	; 0x100
{
 8000f96:	9d08      	ldr	r5, [sp, #32]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000f98:	6001      	str	r1, [r0, #0]
{
 8000f9a:	4616      	mov	r6, r2
 8000f9c:	461f      	mov	r7, r3
 8000f9e:	1c6b      	adds	r3, r5, #1
 8000fa0:	d15a      	bne.n	8001058 <I2C_RequestMemoryRead+0xdc>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000fa2:	6943      	ldr	r3, [r0, #20]
 8000fa4:	07d9      	lsls	r1, r3, #31
 8000fa6:	d5fc      	bpl.n	8000fa2 <I2C_RequestMemoryRead+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000fa8:	fa5f f989 	uxtb.w	r9, r9
 8000fac:	f009 03fe 	and.w	r3, r9, #254	; 0xfe
 8000fb0:	6103      	str	r3, [r0, #16]
 8000fb2:	1c69      	adds	r1, r5, #1
 8000fb4:	d014      	beq.n	8000fe0 <I2C_RequestMemoryRead+0x64>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000fb6:	6943      	ldr	r3, [r0, #20]
 8000fb8:	0799      	lsls	r1, r3, #30
 8000fba:	d414      	bmi.n	8000fe6 <I2C_RequestMemoryRead+0x6a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000fbc:	6943      	ldr	r3, [r0, #20]
 8000fbe:	055b      	lsls	r3, r3, #21
 8000fc0:	d46e      	bmi.n	80010a0 <I2C_RequestMemoryRead+0x124>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000fc2:	f7ff fab3 	bl	800052c <HAL_GetTick>
 8000fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000fc8:	1ac0      	subs	r0, r0, r3
 8000fca:	4285      	cmp	r5, r0
 8000fcc:	f0c0 80e8 	bcc.w	80011a0 <I2C_RequestMemoryRead+0x224>
 8000fd0:	2d00      	cmp	r5, #0
 8000fd2:	f000 80e5 	beq.w	80011a0 <I2C_RequestMemoryRead+0x224>
 8000fd6:	6820      	ldr	r0, [r4, #0]
 8000fd8:	e7eb      	b.n	8000fb2 <I2C_RequestMemoryRead+0x36>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000fda:	6943      	ldr	r3, [r0, #20]
 8000fdc:	055b      	lsls	r3, r3, #21
 8000fde:	d45f      	bmi.n	80010a0 <I2C_RequestMemoryRead+0x124>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000fe0:	6943      	ldr	r3, [r0, #20]
 8000fe2:	079a      	lsls	r2, r3, #30
 8000fe4:	d5f9      	bpl.n	8000fda <I2C_RequestMemoryRead+0x5e>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	6943      	ldr	r3, [r0, #20]
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	6983      	ldr	r3, [r0, #24]
 8000ff0:	9301      	str	r3, [sp, #4]
 8000ff2:	9b01      	ldr	r3, [sp, #4]
 8000ff4:	1c6b      	adds	r3, r5, #1
 8000ff6:	d003      	beq.n	8001000 <I2C_RequestMemoryRead+0x84>
 8000ff8:	e084      	b.n	8001104 <I2C_RequestMemoryRead+0x188>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000ffa:	6943      	ldr	r3, [r0, #20]
 8000ffc:	055a      	lsls	r2, r3, #21
 8000ffe:	d467      	bmi.n	80010d0 <I2C_RequestMemoryRead+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001000:	6943      	ldr	r3, [r0, #20]
 8001002:	0619      	lsls	r1, r3, #24
 8001004:	d5f9      	bpl.n	8000ffa <I2C_RequestMemoryRead+0x7e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001006:	2f01      	cmp	r7, #1
 8001008:	f040 808d 	bne.w	8001126 <I2C_RequestMemoryRead+0x1aa>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800100c:	b2f6      	uxtb	r6, r6
 800100e:	6106      	str	r6, [r0, #16]
 8001010:	1c6b      	adds	r3, r5, #1
 8001012:	d003      	beq.n	800101c <I2C_RequestMemoryRead+0xa0>
 8001014:	e094      	b.n	8001140 <I2C_RequestMemoryRead+0x1c4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001016:	6943      	ldr	r3, [r0, #20]
 8001018:	055e      	lsls	r6, r3, #21
 800101a:	d459      	bmi.n	80010d0 <I2C_RequestMemoryRead+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800101c:	6943      	ldr	r3, [r0, #20]
 800101e:	061f      	lsls	r7, r3, #24
 8001020:	d5f9      	bpl.n	8001016 <I2C_RequestMemoryRead+0x9a>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001022:	6803      	ldr	r3, [r0, #0]
 8001024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001028:	6003      	str	r3, [r0, #0]
 800102a:	1c6b      	adds	r3, r5, #1
 800102c:	f040 80a8 	bne.w	8001180 <I2C_RequestMemoryRead+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001030:	6943      	ldr	r3, [r0, #20]
 8001032:	07df      	lsls	r7, r3, #31
 8001034:	d5fc      	bpl.n	8001030 <I2C_RequestMemoryRead+0xb4>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001036:	f049 0901 	orr.w	r9, r9, #1
 800103a:	f8c0 9010 	str.w	r9, [r0, #16]
 800103e:	1c6a      	adds	r2, r5, #1
 8001040:	d003      	beq.n	800104a <I2C_RequestMemoryRead+0xce>
 8001042:	e0ca      	b.n	80011da <I2C_RequestMemoryRead+0x25e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001044:	6943      	ldr	r3, [r0, #20]
 8001046:	055b      	lsls	r3, r3, #21
 8001048:	d42a      	bmi.n	80010a0 <I2C_RequestMemoryRead+0x124>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800104a:	6943      	ldr	r3, [r0, #20]
 800104c:	43db      	mvns	r3, r3
 800104e:	f013 0302 	ands.w	r3, r3, #2
 8001052:	d1f7      	bne.n	8001044 <I2C_RequestMemoryRead+0xc8>
  return HAL_OK;
 8001054:	4618      	mov	r0, r3
 8001056:	e01c      	b.n	8001092 <I2C_RequestMemoryRead+0x116>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001058:	6943      	ldr	r3, [r0, #20]
 800105a:	07da      	lsls	r2, r3, #31
 800105c:	d4a4      	bmi.n	8000fa8 <I2C_RequestMemoryRead+0x2c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800105e:	f7ff fa65 	bl	800052c <HAL_GetTick>
 8001062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001064:	1ac0      	subs	r0, r0, r3
 8001066:	4285      	cmp	r5, r0
 8001068:	6820      	ldr	r0, [r4, #0]
 800106a:	d301      	bcc.n	8001070 <I2C_RequestMemoryRead+0xf4>
 800106c:	2d00      	cmp	r5, #0
 800106e:	d196      	bne.n	8000f9e <I2C_RequestMemoryRead+0x22>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001070:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001072:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001074:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001076:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800107a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800107e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001080:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001084:	f043 0320 	orr.w	r3, r3, #32
 8001088:	6423      	str	r3, [r4, #64]	; 0x40
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800108a:	6803      	ldr	r3, [r0, #0]
 800108c:	05da      	lsls	r2, r3, #23
 800108e:	d403      	bmi.n	8001098 <I2C_RequestMemoryRead+0x11c>
    return HAL_TIMEOUT;
 8001090:	2003      	movs	r0, #3
}
 8001092:	b002      	add	sp, #8
 8001094:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001098:	f44f 7300 	mov.w	r3, #512	; 0x200
 800109c:	6423      	str	r3, [r4, #64]	; 0x40
 800109e:	e7f7      	b.n	8001090 <I2C_RequestMemoryRead+0x114>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010a0:	6803      	ldr	r3, [r0, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80010a2:	2200      	movs	r2, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010a8:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 80010ac:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010ae:	6003      	str	r3, [r0, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010b0:	6145      	str	r5, [r0, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80010b2:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80010b4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80010b8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80010bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80010be:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80010c2:	f043 0304 	orr.w	r3, r3, #4
 80010c6:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80010c8:	2001      	movs	r0, #1
}
 80010ca:	b002      	add	sp, #8
 80010cc:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 80010d0:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 80010d2:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010d4:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80010d8:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80010da:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80010dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80010e0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80010e4:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010e6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80010ea:	f043 0304 	orr.w	r3, r3, #4
 80010ee:	6423      	str	r3, [r4, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	d1e8      	bne.n	80010c8 <I2C_RequestMemoryRead+0x14c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010f6:	6822      	ldr	r2, [r4, #0]
 80010f8:	6813      	ldr	r3, [r2, #0]
 80010fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010fe:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8001100:	2001      	movs	r0, #1
 8001102:	e7c6      	b.n	8001092 <I2C_RequestMemoryRead+0x116>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001104:	6943      	ldr	r3, [r0, #20]
 8001106:	061b      	lsls	r3, r3, #24
 8001108:	f53f af7d 	bmi.w	8001006 <I2C_RequestMemoryRead+0x8a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800110c:	6943      	ldr	r3, [r0, #20]
 800110e:	055a      	lsls	r2, r3, #21
 8001110:	d4de      	bmi.n	80010d0 <I2C_RequestMemoryRead+0x154>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001112:	f7ff fa0b 	bl	800052c <HAL_GetTick>
 8001116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001118:	1ac0      	subs	r0, r0, r3
 800111a:	4285      	cmp	r5, r0
 800111c:	d34f      	bcc.n	80011be <I2C_RequestMemoryRead+0x242>
 800111e:	2d00      	cmp	r5, #0
 8001120:	d04d      	beq.n	80011be <I2C_RequestMemoryRead+0x242>
 8001122:	6820      	ldr	r0, [r4, #0]
 8001124:	e766      	b.n	8000ff4 <I2C_RequestMemoryRead+0x78>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001126:	0a33      	lsrs	r3, r6, #8
 8001128:	6103      	str	r3, [r0, #16]
 800112a:	1c6a      	adds	r2, r5, #1
 800112c:	d003      	beq.n	8001136 <I2C_RequestMemoryRead+0x1ba>
 800112e:	e017      	b.n	8001160 <I2C_RequestMemoryRead+0x1e4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001130:	6943      	ldr	r3, [r0, #20]
 8001132:	055f      	lsls	r7, r3, #21
 8001134:	d4cc      	bmi.n	80010d0 <I2C_RequestMemoryRead+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001136:	6943      	ldr	r3, [r0, #20]
 8001138:	061b      	lsls	r3, r3, #24
 800113a:	f53f af67 	bmi.w	800100c <I2C_RequestMemoryRead+0x90>
 800113e:	e7f7      	b.n	8001130 <I2C_RequestMemoryRead+0x1b4>
 8001140:	6943      	ldr	r3, [r0, #20]
 8001142:	0619      	lsls	r1, r3, #24
 8001144:	f53f af6d 	bmi.w	8001022 <I2C_RequestMemoryRead+0xa6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001148:	6943      	ldr	r3, [r0, #20]
 800114a:	055a      	lsls	r2, r3, #21
 800114c:	d4c0      	bmi.n	80010d0 <I2C_RequestMemoryRead+0x154>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800114e:	f7ff f9ed 	bl	800052c <HAL_GetTick>
 8001152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001154:	1ac0      	subs	r0, r0, r3
 8001156:	4285      	cmp	r5, r0
 8001158:	d331      	bcc.n	80011be <I2C_RequestMemoryRead+0x242>
 800115a:	b385      	cbz	r5, 80011be <I2C_RequestMemoryRead+0x242>
 800115c:	6820      	ldr	r0, [r4, #0]
 800115e:	e757      	b.n	8001010 <I2C_RequestMemoryRead+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001160:	6943      	ldr	r3, [r0, #20]
 8001162:	0619      	lsls	r1, r3, #24
 8001164:	f53f af52 	bmi.w	800100c <I2C_RequestMemoryRead+0x90>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001168:	6943      	ldr	r3, [r0, #20]
 800116a:	0559      	lsls	r1, r3, #21
 800116c:	d4b0      	bmi.n	80010d0 <I2C_RequestMemoryRead+0x154>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800116e:	f7ff f9dd 	bl	800052c <HAL_GetTick>
 8001172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001174:	1ac0      	subs	r0, r0, r3
 8001176:	4285      	cmp	r5, r0
 8001178:	d321      	bcc.n	80011be <I2C_RequestMemoryRead+0x242>
 800117a:	b305      	cbz	r5, 80011be <I2C_RequestMemoryRead+0x242>
 800117c:	6820      	ldr	r0, [r4, #0]
 800117e:	e7d4      	b.n	800112a <I2C_RequestMemoryRead+0x1ae>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001180:	6943      	ldr	r3, [r0, #20]
 8001182:	07de      	lsls	r6, r3, #31
 8001184:	f53f af57 	bmi.w	8001036 <I2C_RequestMemoryRead+0xba>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001188:	f7ff f9d0 	bl	800052c <HAL_GetTick>
 800118c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800118e:	1ac0      	subs	r0, r0, r3
 8001190:	4285      	cmp	r5, r0
 8001192:	6820      	ldr	r0, [r4, #0]
 8001194:	f4ff af6c 	bcc.w	8001070 <I2C_RequestMemoryRead+0xf4>
 8001198:	2d00      	cmp	r5, #0
 800119a:	f47f af46 	bne.w	800102a <I2C_RequestMemoryRead+0xae>
 800119e:	e767      	b.n	8001070 <I2C_RequestMemoryRead+0xf4>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80011a0:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80011a2:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80011a4:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80011a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80011aa:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80011ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80011b0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80011b4:	f043 0320 	orr.w	r3, r3, #32
 80011b8:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80011ba:	2001      	movs	r0, #1
 80011bc:	e769      	b.n	8001092 <I2C_RequestMemoryRead+0x116>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80011be:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80011c0:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80011c2:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80011c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80011c8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80011cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80011ce:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80011d2:	f043 0320 	orr.w	r3, r3, #32
 80011d6:	6423      	str	r3, [r4, #64]	; 0x40
 80011d8:	e78a      	b.n	80010f0 <I2C_RequestMemoryRead+0x174>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80011da:	6943      	ldr	r3, [r0, #20]
 80011dc:	43db      	mvns	r3, r3
 80011de:	f013 0302 	ands.w	r3, r3, #2
 80011e2:	f43f af37 	beq.w	8001054 <I2C_RequestMemoryRead+0xd8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80011e6:	6943      	ldr	r3, [r0, #20]
 80011e8:	0559      	lsls	r1, r3, #21
 80011ea:	f53f af59 	bmi.w	80010a0 <I2C_RequestMemoryRead+0x124>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011ee:	f7ff f99d 	bl	800052c <HAL_GetTick>
 80011f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011f4:	1ac0      	subs	r0, r0, r3
 80011f6:	4285      	cmp	r5, r0
 80011f8:	d3d2      	bcc.n	80011a0 <I2C_RequestMemoryRead+0x224>
 80011fa:	2d00      	cmp	r5, #0
 80011fc:	d0d0      	beq.n	80011a0 <I2C_RequestMemoryRead+0x224>
 80011fe:	6820      	ldr	r0, [r4, #0]
 8001200:	e71d      	b.n	800103e <I2C_RequestMemoryRead+0xc2>
 8001202:	bf00      	nop

08001204 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001204:	2800      	cmp	r0, #0
 8001206:	f000 809f 	beq.w	8001348 <HAL_I2C_Init+0x144>
{
 800120a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800120c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001210:	4604      	mov	r4, r0
 8001212:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 808f 	beq.w	800133a <HAL_I2C_Init+0x136>
  __HAL_I2C_DISABLE(hi2c);
 800121c:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800121e:	2224      	movs	r2, #36	; 0x24
 8001220:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	f022 0201 	bic.w	r2, r2, #1
 800122a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001232:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800123a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800123c:	f002 f908 	bl	8003450 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001240:	6861      	ldr	r1, [r4, #4]
 8001242:	4b4b      	ldr	r3, [pc, #300]	; (8001370 <HAL_I2C_Init+0x16c>)
 8001244:	4299      	cmp	r1, r3
 8001246:	d84b      	bhi.n	80012e0 <HAL_I2C_Init+0xdc>
 8001248:	4b4a      	ldr	r3, [pc, #296]	; (8001374 <HAL_I2C_Init+0x170>)
 800124a:	4298      	cmp	r0, r3
 800124c:	d97a      	bls.n	8001344 <HAL_I2C_Init+0x140>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800124e:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001250:	4b49      	ldr	r3, [pc, #292]	; (8001378 <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001252:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001254:	fba3 6300 	umull	r6, r3, r3, r0
 8001258:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800125a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800125e:	431d      	orrs	r5, r3
 8001260:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001262:	6a15      	ldr	r5, [r2, #32]
 8001264:	3301      	adds	r3, #1
 8001266:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800126a:	432b      	orrs	r3, r5
 800126c:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800126e:	69d5      	ldr	r5, [r2, #28]
 8001270:	0049      	lsls	r1, r1, #1
 8001272:	1e43      	subs	r3, r0, #1
 8001274:	fbb3 f3f1 	udiv	r3, r3, r1
 8001278:	3301      	adds	r3, #1
 800127a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800127e:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 8001282:	2b04      	cmp	r3, #4
 8001284:	bf38      	it	cc
 8001286:	2304      	movcc	r3, #4
 8001288:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800128c:	432b      	orrs	r3, r5
 800128e:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001290:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 8001294:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001296:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001298:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 800129c:	432b      	orrs	r3, r5
 800129e:	4303      	orrs	r3, r0
 80012a0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012a2:	6890      	ldr	r0, [r2, #8]
 80012a4:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012a6:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012a8:	f420 4003 	bic.w	r0, r0, #33536	; 0x8300
 80012ac:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80012b0:	4329      	orrs	r1, r5
 80012b2:	4301      	orrs	r1, r0
 80012b4:	6091      	str	r1, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012b6:	68d1      	ldr	r1, [r2, #12]
 80012b8:	69a0      	ldr	r0, [r4, #24]
 80012ba:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80012be:	4303      	orrs	r3, r0
 80012c0:	430b      	orrs	r3, r1
 80012c2:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80012c4:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012c6:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 80012c8:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 80012cc:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 80012ce:	6011      	str	r1, [r2, #0]
  return HAL_OK;
 80012d0:	4618      	mov	r0, r3
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012d2:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012d4:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012d8:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012da:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80012de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012e0:	4b26      	ldr	r3, [pc, #152]	; (800137c <HAL_I2C_Init+0x178>)
 80012e2:	4298      	cmp	r0, r3
 80012e4:	d92e      	bls.n	8001344 <HAL_I2C_Init+0x140>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012e6:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80012e8:	4b23      	ldr	r3, [pc, #140]	; (8001378 <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012ea:	6856      	ldr	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012ec:	4f24      	ldr	r7, [pc, #144]	; (8001380 <HAL_I2C_Init+0x17c>)
  freqrange = I2C_FREQRANGE(pclk1);
 80012ee:	fba3 5300 	umull	r5, r3, r3, r0
 80012f2:	0c9d      	lsrs	r5, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012f4:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 80012f8:	432e      	orrs	r6, r5
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012fa:	f44f 7396 	mov.w	r3, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012fe:	6056      	str	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001300:	fb03 f305 	mul.w	r3, r3, r5
 8001304:	fba7 5303 	umull	r5, r3, r7, r3
 8001308:	6a15      	ldr	r5, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800130a:	68a6      	ldr	r6, [r4, #8]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800130c:	099b      	lsrs	r3, r3, #6
 800130e:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001312:	3301      	adds	r3, #1
 8001314:	432b      	orrs	r3, r5
 8001316:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001318:	69d5      	ldr	r5, [r2, #28]
 800131a:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 800131e:	3801      	subs	r0, #1
 8001320:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8001324:	b996      	cbnz	r6, 800134c <HAL_I2C_Init+0x148>
 8001326:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800132a:	fbb0 f0f1 	udiv	r0, r0, r1
 800132e:	3001      	adds	r0, #1
 8001330:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8001334:	b9c0      	cbnz	r0, 8001368 <HAL_I2C_Init+0x164>
 8001336:	2301      	movs	r3, #1
 8001338:	e7a8      	b.n	800128c <HAL_I2C_Init+0x88>
    hi2c->Lock = HAL_UNLOCKED;
 800133a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800133e:	f005 f8f5 	bl	800652c <HAL_I2C_MspInit>
 8001342:	e76b      	b.n	800121c <HAL_I2C_Init+0x18>
    return HAL_ERROR;
 8001344:	2001      	movs	r0, #1
}
 8001346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001348:	2001      	movs	r0, #1
}
 800134a:	4770      	bx	lr
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800134c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001350:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001354:	fbb0 f0f1 	udiv	r0, r0, r1
 8001358:	3001      	adds	r0, #1
 800135a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800135e:	2800      	cmp	r0, #0
 8001360:	d0e9      	beq.n	8001336 <HAL_I2C_Init+0x132>
 8001362:	f440 4340 	orr.w	r3, r0, #49152	; 0xc000
 8001366:	e791      	b.n	800128c <HAL_I2C_Init+0x88>
 8001368:	f440 4300 	orr.w	r3, r0, #32768	; 0x8000
 800136c:	e78e      	b.n	800128c <HAL_I2C_Init+0x88>
 800136e:	bf00      	nop
 8001370:	000186a0 	.word	0x000186a0
 8001374:	001e847f 	.word	0x001e847f
 8001378:	431bde83 	.word	0x431bde83
 800137c:	003d08ff 	.word	0x003d08ff
 8001380:	10624dd3 	.word	0x10624dd3

08001384 <HAL_I2C_Master_Transmit>:
{
 8001384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001388:	4604      	mov	r4, r0
 800138a:	b082      	sub	sp, #8
 800138c:	4699      	mov	r9, r3
 800138e:	460f      	mov	r7, r1
 8001390:	4690      	mov	r8, r2
 8001392:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  uint32_t tickstart = HAL_GetTick();
 8001394:	f7ff f8ca 	bl	800052c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001398:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800139c:	2b20      	cmp	r3, #32
 800139e:	d003      	beq.n	80013a8 <HAL_I2C_Master_Transmit+0x24>
      return HAL_BUSY;
 80013a0:	2002      	movs	r0, #2
}
 80013a2:	b002      	add	sp, #8
 80013a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013a8:	4606      	mov	r6, r0
 80013aa:	e005      	b.n	80013b8 <HAL_I2C_Master_Transmit+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013ac:	f7ff f8be 	bl	800052c <HAL_GetTick>
 80013b0:	1b80      	subs	r0, r0, r6
 80013b2:	2819      	cmp	r0, #25
 80013b4:	f200 80e1 	bhi.w	800157a <HAL_I2C_Master_Transmit+0x1f6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013b8:	6823      	ldr	r3, [r4, #0]
 80013ba:	699a      	ldr	r2, [r3, #24]
 80013bc:	43d2      	mvns	r2, r2
 80013be:	f012 0a02 	ands.w	sl, r2, #2
 80013c2:	d0f3      	beq.n	80013ac <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 80013c4:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 80013c8:	2a01      	cmp	r2, #1
 80013ca:	d0e9      	beq.n	80013a0 <HAL_I2C_Master_Transmit+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013cc:	681a      	ldr	r2, [r3, #0]
    __HAL_LOCK(hi2c);
 80013ce:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013d0:	07d2      	lsls	r2, r2, #31
    __HAL_LOCK(hi2c);
 80013d2:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013d6:	d402      	bmi.n	80013de <HAL_I2C_Master_Transmit+0x5a>
      __HAL_I2C_ENABLE(hi2c);
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	430a      	orrs	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013de:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013e0:	48a0      	ldr	r0, [pc, #640]	; (8001664 <HAL_I2C_Master_Transmit+0x2e0>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013e6:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80013e8:	2221      	movs	r2, #33	; 0x21
 80013ea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80013ee:	2210      	movs	r2, #16
 80013f0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80013f4:	2200      	movs	r2, #0
 80013f6:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80013f8:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013fc:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013fe:	62e0      	str	r0, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001400:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8001402:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001406:	2a08      	cmp	r2, #8
    hi2c->XferSize    = hi2c->XferCount;
 8001408:	8521      	strh	r1, [r4, #40]	; 0x28
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800140a:	d071      	beq.n	80014f0 <HAL_I2C_Master_Transmit+0x16c>
 800140c:	2a01      	cmp	r2, #1
 800140e:	d06f      	beq.n	80014f0 <HAL_I2C_Master_Transmit+0x16c>
 8001410:	4282      	cmp	r2, r0
 8001412:	d06d      	beq.n	80014f0 <HAL_I2C_Master_Transmit+0x16c>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001414:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001416:	2a12      	cmp	r2, #18
 8001418:	d06a      	beq.n	80014f0 <HAL_I2C_Master_Transmit+0x16c>
 800141a:	1c68      	adds	r0, r5, #1
 800141c:	f040 808b 	bne.w	8001536 <HAL_I2C_Master_Transmit+0x1b2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001420:	695a      	ldr	r2, [r3, #20]
 8001422:	07d1      	lsls	r1, r2, #31
 8001424:	d5fc      	bpl.n	8001420 <HAL_I2C_Master_Transmit+0x9c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001426:	6922      	ldr	r2, [r4, #16]
 8001428:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800142c:	f040 80c9 	bne.w	80015c2 <HAL_I2C_Master_Transmit+0x23e>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001430:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8001434:	611f      	str	r7, [r3, #16]
 8001436:	1c6f      	adds	r7, r5, #1
 8001438:	d004      	beq.n	8001444 <HAL_I2C_Master_Transmit+0xc0>
 800143a:	e0e9      	b.n	8001610 <HAL_I2C_Master_Transmit+0x28c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800143c:	695a      	ldr	r2, [r3, #20]
 800143e:	0551      	lsls	r1, r2, #21
 8001440:	f100 80a9 	bmi.w	8001596 <HAL_I2C_Master_Transmit+0x212>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001444:	695a      	ldr	r2, [r3, #20]
 8001446:	0790      	lsls	r0, r2, #30
 8001448:	d5f8      	bpl.n	800143c <HAL_I2C_Master_Transmit+0xb8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800144a:	2200      	movs	r2, #0
 800144c:	9201      	str	r2, [sp, #4]
 800144e:	695a      	ldr	r2, [r3, #20]
 8001450:	9201      	str	r2, [sp, #4]
 8001452:	699a      	ldr	r2, [r3, #24]
 8001454:	9201      	str	r2, [sp, #4]
 8001456:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8001458:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800145a:	2a00      	cmp	r2, #0
 800145c:	f000 80e7 	beq.w	800162e <HAL_I2C_Master_Transmit+0x2aa>
 8001460:	1c68      	adds	r0, r5, #1
 8001462:	d003      	beq.n	800146c <HAL_I2C_Master_Transmit+0xe8>
 8001464:	e049      	b.n	80014fa <HAL_I2C_Master_Transmit+0x176>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001466:	695a      	ldr	r2, [r3, #20]
 8001468:	0552      	lsls	r2, r2, #21
 800146a:	d42a      	bmi.n	80014c2 <HAL_I2C_Master_Transmit+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800146c:	695a      	ldr	r2, [r3, #20]
 800146e:	0611      	lsls	r1, r2, #24
 8001470:	d5f9      	bpl.n	8001466 <HAL_I2C_Master_Transmit+0xe2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001472:	6a67      	ldr	r7, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001474:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001478:	4638      	mov	r0, r7
      hi2c->XferSize--;
 800147a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800147e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001482:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8001484:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8001486:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001488:	3a01      	subs	r2, #1
 800148a:	b292      	uxth	r2, r2
 800148c:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800148e:	6958      	ldr	r0, [r3, #20]
      hi2c->XferSize--;
 8001490:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001492:	0740      	lsls	r0, r0, #29
      hi2c->XferSize--;
 8001494:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001496:	d50c      	bpl.n	80014b2 <HAL_I2C_Master_Transmit+0x12e>
 8001498:	b159      	cbz	r1, 80014b2 <HAL_I2C_Master_Transmit+0x12e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800149a:	787a      	ldrb	r2, [r7, #1]
 800149c:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 800149e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80014a0:	3a01      	subs	r2, #1
        hi2c->XferSize--;
 80014a2:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->pBuffPtr++;
 80014a6:	3702      	adds	r7, #2
        hi2c->XferCount--;
 80014a8:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 80014aa:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 80014ae:	6267      	str	r7, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80014b0:	8562      	strh	r2, [r4, #42]	; 0x2a
 80014b2:	1c6f      	adds	r7, r5, #1
 80014b4:	d130      	bne.n	8001518 <HAL_I2C_Master_Transmit+0x194>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80014b6:	695a      	ldr	r2, [r3, #20]
 80014b8:	0750      	lsls	r0, r2, #29
 80014ba:	d4cd      	bmi.n	8001458 <HAL_I2C_Master_Transmit+0xd4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014bc:	695a      	ldr	r2, [r3, #20]
 80014be:	0551      	lsls	r1, r2, #21
 80014c0:	d5f9      	bpl.n	80014b6 <HAL_I2C_Master_Transmit+0x132>
    hi2c->PreviousState       = I2C_STATE_NONE;
 80014c2:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014c4:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 80014c8:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014ca:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80014cc:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80014ce:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014d2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80014d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80014d8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80014dc:	f043 0304 	orr.w	r3, r3, #4
 80014e0:	6423      	str	r3, [r4, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014e4:	2b04      	cmp	r3, #4
 80014e6:	d07e      	beq.n	80015e6 <HAL_I2C_Master_Transmit+0x262>
      return HAL_ERROR;
 80014e8:	2001      	movs	r0, #1
}
 80014ea:	b002      	add	sp, #8
 80014ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	e78f      	b.n	800141a <HAL_I2C_Master_Transmit+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014fa:	695a      	ldr	r2, [r3, #20]
 80014fc:	0617      	lsls	r7, r2, #24
 80014fe:	d4b8      	bmi.n	8001472 <HAL_I2C_Master_Transmit+0xee>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001500:	695a      	ldr	r2, [r3, #20]
 8001502:	0557      	lsls	r7, r2, #21
 8001504:	d4dd      	bmi.n	80014c2 <HAL_I2C_Master_Transmit+0x13e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001506:	f7ff f811 	bl	800052c <HAL_GetTick>
 800150a:	1b80      	subs	r0, r0, r6
 800150c:	4285      	cmp	r5, r0
 800150e:	d371      	bcc.n	80015f4 <HAL_I2C_Master_Transmit+0x270>
 8001510:	2d00      	cmp	r5, #0
 8001512:	d06f      	beq.n	80015f4 <HAL_I2C_Master_Transmit+0x270>
 8001514:	6823      	ldr	r3, [r4, #0]
 8001516:	e7a3      	b.n	8001460 <HAL_I2C_Master_Transmit+0xdc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001518:	695a      	ldr	r2, [r3, #20]
 800151a:	0752      	lsls	r2, r2, #29
 800151c:	d49c      	bmi.n	8001458 <HAL_I2C_Master_Transmit+0xd4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800151e:	695a      	ldr	r2, [r3, #20]
 8001520:	0552      	lsls	r2, r2, #21
 8001522:	d4ce      	bmi.n	80014c2 <HAL_I2C_Master_Transmit+0x13e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001524:	f7ff f802 	bl	800052c <HAL_GetTick>
 8001528:	1b80      	subs	r0, r0, r6
 800152a:	4285      	cmp	r5, r0
 800152c:	d362      	bcc.n	80015f4 <HAL_I2C_Master_Transmit+0x270>
 800152e:	2d00      	cmp	r5, #0
 8001530:	d060      	beq.n	80015f4 <HAL_I2C_Master_Transmit+0x270>
 8001532:	6823      	ldr	r3, [r4, #0]
 8001534:	e7bd      	b.n	80014b2 <HAL_I2C_Master_Transmit+0x12e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001536:	695a      	ldr	r2, [r3, #20]
 8001538:	07d2      	lsls	r2, r2, #31
 800153a:	f53f af74 	bmi.w	8001426 <HAL_I2C_Master_Transmit+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800153e:	f7fe fff5 	bl	800052c <HAL_GetTick>
 8001542:	1b80      	subs	r0, r0, r6
 8001544:	4285      	cmp	r5, r0
 8001546:	6823      	ldr	r3, [r4, #0]
 8001548:	d302      	bcc.n	8001550 <HAL_I2C_Master_Transmit+0x1cc>
 800154a:	2d00      	cmp	r5, #0
 800154c:	f47f af65 	bne.w	800141a <HAL_I2C_Master_Transmit+0x96>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001550:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001552:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001554:	6321      	str	r1, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001556:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800155a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800155e:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001560:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001564:	f042 0220 	orr.w	r2, r2, #32
 8001568:	6422      	str	r2, [r4, #64]	; 0x40
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	05dd      	lsls	r5, r3, #23
 800156e:	d5bb      	bpl.n	80014e8 <HAL_I2C_Master_Transmit+0x164>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001574:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001576:	2001      	movs	r0, #1
 8001578:	e713      	b.n	80013a2 <HAL_I2C_Master_Transmit+0x1e>
        hi2c->State             = HAL_I2C_STATE_READY;
 800157a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800157c:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001580:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001584:	f884 a03e 	strb.w	sl, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001588:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800158a:	f884 a03c 	strb.w	sl, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800158e:	f043 0320 	orr.w	r3, r3, #32
 8001592:	6423      	str	r3, [r4, #64]	; 0x40
 8001594:	e704      	b.n	80013a0 <HAL_I2C_Master_Transmit+0x1c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001596:	6819      	ldr	r1, [r3, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001598:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800159a:	2020      	movs	r0, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800159c:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015a0:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80015a4:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015a6:	615d      	str	r5, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80015a8:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80015aa:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015ae:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80015b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80015b4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80015be:	2001      	movs	r0, #1
 80015c0:	e6ef      	b.n	80013a2 <HAL_I2C_Master_Transmit+0x1e>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80015c2:	11fa      	asrs	r2, r7, #7
 80015c4:	f002 0206 	and.w	r2, r2, #6
 80015c8:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 80015cc:	611a      	str	r2, [r3, #16]
 80015ce:	1c69      	adds	r1, r5, #1
 80015d0:	d003      	beq.n	80015da <HAL_I2C_Master_Transmit+0x256>
 80015d2:	e039      	b.n	8001648 <HAL_I2C_Master_Transmit+0x2c4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015d4:	695a      	ldr	r2, [r3, #20]
 80015d6:	0550      	lsls	r0, r2, #21
 80015d8:	d4dd      	bmi.n	8001596 <HAL_I2C_Master_Transmit+0x212>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80015da:	695a      	ldr	r2, [r3, #20]
 80015dc:	0712      	lsls	r2, r2, #28
 80015de:	d5f9      	bpl.n	80015d4 <HAL_I2C_Master_Transmit+0x250>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80015e0:	b2ff      	uxtb	r7, r7
 80015e2:	611f      	str	r7, [r3, #16]
 80015e4:	e727      	b.n	8001436 <HAL_I2C_Master_Transmit+0xb2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015e6:	6822      	ldr	r2, [r4, #0]
 80015e8:	6813      	ldr	r3, [r2, #0]
 80015ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ee:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80015f0:	2001      	movs	r0, #1
 80015f2:	e6d6      	b.n	80013a2 <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80015f4:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80015f6:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80015f8:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80015fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80015fe:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001602:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001604:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001608:	f043 0320 	orr.w	r3, r3, #32
 800160c:	6423      	str	r3, [r4, #64]	; 0x40
 800160e:	e768      	b.n	80014e2 <HAL_I2C_Master_Transmit+0x15e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001610:	695a      	ldr	r2, [r3, #20]
 8001612:	0792      	lsls	r2, r2, #30
 8001614:	f53f af19 	bmi.w	800144a <HAL_I2C_Master_Transmit+0xc6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001618:	695a      	ldr	r2, [r3, #20]
 800161a:	0552      	lsls	r2, r2, #21
 800161c:	d4bb      	bmi.n	8001596 <HAL_I2C_Master_Transmit+0x212>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800161e:	f7fe ff85 	bl	800052c <HAL_GetTick>
 8001622:	1b80      	subs	r0, r0, r6
 8001624:	4285      	cmp	r5, r0
 8001626:	d31f      	bcc.n	8001668 <HAL_I2C_Master_Transmit+0x2e4>
 8001628:	b1f5      	cbz	r5, 8001668 <HAL_I2C_Master_Transmit+0x2e4>
 800162a:	6823      	ldr	r3, [r4, #0]
 800162c:	e703      	b.n	8001436 <HAL_I2C_Master_Transmit+0xb2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800162e:	6819      	ldr	r1, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001630:	2520      	movs	r5, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001632:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8001636:	6019      	str	r1, [r3, #0]
    return HAL_OK;
 8001638:	4610      	mov	r0, r2
    hi2c->State = HAL_I2C_STATE_READY;
 800163a:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800163e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001642:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    return HAL_OK;
 8001646:	e6ac      	b.n	80013a2 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001648:	695a      	ldr	r2, [r3, #20]
 800164a:	0711      	lsls	r1, r2, #28
 800164c:	d4c8      	bmi.n	80015e0 <HAL_I2C_Master_Transmit+0x25c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800164e:	695a      	ldr	r2, [r3, #20]
 8001650:	0550      	lsls	r0, r2, #21
 8001652:	d4a0      	bmi.n	8001596 <HAL_I2C_Master_Transmit+0x212>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001654:	f7fe ff6a 	bl	800052c <HAL_GetTick>
 8001658:	1b80      	subs	r0, r0, r6
 800165a:	4285      	cmp	r5, r0
 800165c:	d304      	bcc.n	8001668 <HAL_I2C_Master_Transmit+0x2e4>
 800165e:	b11d      	cbz	r5, 8001668 <HAL_I2C_Master_Transmit+0x2e4>
 8001660:	6823      	ldr	r3, [r4, #0]
 8001662:	e7b4      	b.n	80015ce <HAL_I2C_Master_Transmit+0x24a>
 8001664:	ffff0000 	.word	0xffff0000
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001668:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800166a:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800166c:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800166e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001672:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001676:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001678:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800167c:	f043 0320 	orr.w	r3, r3, #32
 8001680:	6423      	str	r3, [r4, #64]	; 0x40
 8001682:	e731      	b.n	80014e8 <HAL_I2C_Master_Transmit+0x164>

08001684 <HAL_I2C_Mem_Read>:
{
 8001684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001688:	4604      	mov	r4, r0
 800168a:	b087      	sub	sp, #28
 800168c:	4699      	mov	r9, r3
 800168e:	460f      	mov	r7, r1
 8001690:	4690      	mov	r8, r2
 8001692:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 8001696:	9d12      	ldr	r5, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8001698:	f7fe ff48 	bl	800052c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800169c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80016a0:	2b20      	cmp	r3, #32
 80016a2:	d004      	beq.n	80016ae <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 80016a4:	2702      	movs	r7, #2
}
 80016a6:	4638      	mov	r0, r7
 80016a8:	b007      	add	sp, #28
 80016aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016ae:	4606      	mov	r6, r0
 80016b0:	e004      	b.n	80016bc <HAL_I2C_Mem_Read+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016b2:	f7fe ff3b 	bl	800052c <HAL_GetTick>
 80016b6:	1b80      	subs	r0, r0, r6
 80016b8:	2819      	cmp	r0, #25
 80016ba:	d84a      	bhi.n	8001752 <HAL_I2C_Mem_Read+0xce>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016bc:	6822      	ldr	r2, [r4, #0]
 80016be:	6993      	ldr	r3, [r2, #24]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	f013 0b02 	ands.w	fp, r3, #2
 80016c6:	d0f4      	beq.n	80016b2 <HAL_I2C_Mem_Read+0x2e>
    __HAL_LOCK(hi2c);
 80016c8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d0e9      	beq.n	80016a4 <HAL_I2C_Mem_Read+0x20>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016d0:	6813      	ldr	r3, [r2, #0]
    __HAL_LOCK(hi2c);
 80016d2:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016d4:	07db      	lsls	r3, r3, #31
    __HAL_LOCK(hi2c);
 80016d6:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016da:	d402      	bmi.n	80016e2 <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80016dc:	6813      	ldr	r3, [r2, #0]
 80016de:	430b      	orrs	r3, r1
 80016e0:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016e2:	6813      	ldr	r3, [r2, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016e4:	48a2      	ldr	r0, [pc, #648]	; (8001970 <HAL_I2C_Mem_Read+0x2ec>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016ea:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016ec:	2322      	movs	r3, #34	; 0x22
 80016ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016f2:	2240      	movs	r2, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016f4:	2300      	movs	r3, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016f6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016fa:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80016fc:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001700:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001704:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001706:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001708:	4639      	mov	r1, r7
 800170a:	e9cd 5600 	strd	r5, r6, [sp]
 800170e:	464b      	mov	r3, r9
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001710:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001712:	4642      	mov	r2, r8
    hi2c->XferSize    = hi2c->XferCount;
 8001714:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001718:	4620      	mov	r0, r4
 800171a:	f7ff fc2f 	bl	8000f7c <I2C_RequestMemoryRead>
 800171e:	4607      	mov	r7, r0
 8001720:	b9a8      	cbnz	r0, 800174e <HAL_I2C_Mem_Read+0xca>
    if (hi2c->XferSize == 0U)
 8001722:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001724:	6823      	ldr	r3, [r4, #0]
 8001726:	bb12      	cbnz	r2, 800176e <HAL_I2C_Mem_Read+0xea>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001728:	9002      	str	r0, [sp, #8]
 800172a:	695a      	ldr	r2, [r3, #20]
 800172c:	9202      	str	r2, [sp, #8]
 800172e:	699a      	ldr	r2, [r3, #24]
 8001730:	9202      	str	r2, [sp, #8]
 8001732:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800173a:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800173c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800173e:	2220      	movs	r2, #32
 8001740:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001744:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001748:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800174c:	e7ab      	b.n	80016a6 <HAL_I2C_Mem_Read+0x22>
      return HAL_ERROR;
 800174e:	2701      	movs	r7, #1
 8001750:	e7a9      	b.n	80016a6 <HAL_I2C_Mem_Read+0x22>
        hi2c->State             = HAL_I2C_STATE_READY;
 8001752:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001754:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001758:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800175c:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001760:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001762:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001766:	f043 0320 	orr.w	r3, r3, #32
 800176a:	6423      	str	r3, [r4, #64]	; 0x40
 800176c:	e79a      	b.n	80016a4 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 800176e:	2a01      	cmp	r2, #1
 8001770:	f000 8091 	beq.w	8001896 <HAL_I2C_Mem_Read+0x212>
    else if (hi2c->XferSize == 2U)
 8001774:	2a02      	cmp	r2, #2
 8001776:	f000 80fd 	beq.w	8001974 <HAL_I2C_Mem_Read+0x2f0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800177a:	9005      	str	r0, [sp, #20]
 800177c:	6959      	ldr	r1, [r3, #20]
 800177e:	9105      	str	r1, [sp, #20]
 8001780:	6999      	ldr	r1, [r3, #24]
 8001782:	9105      	str	r1, [sp, #20]
 8001784:	9905      	ldr	r1, [sp, #20]
      if (hi2c->XferSize <= 3U)
 8001786:	2a03      	cmp	r2, #3
 8001788:	d848      	bhi.n	800181c <HAL_I2C_Mem_Read+0x198>
        if (hi2c->XferSize == 1U)
 800178a:	2a01      	cmp	r2, #1
 800178c:	f000 80bc 	beq.w	8001908 <HAL_I2C_Mem_Read+0x284>
        else if (hi2c->XferSize == 2U)
 8001790:	2a02      	cmp	r2, #2
 8001792:	d074      	beq.n	800187e <HAL_I2C_Mem_Read+0x1fa>
 8001794:	1c68      	adds	r0, r5, #1
 8001796:	f040 808d 	bne.w	80018b4 <HAL_I2C_Mem_Read+0x230>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800179a:	695a      	ldr	r2, [r3, #20]
 800179c:	0751      	lsls	r1, r2, #29
 800179e:	d5fc      	bpl.n	800179a <HAL_I2C_Mem_Read+0x116>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017a0:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017a8:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80017ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80017b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80017b2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80017b4:	3b01      	subs	r3, #1
 80017b6:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80017b8:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80017ba:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80017bc:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80017be:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80017c0:	8522      	strh	r2, [r4, #40]	; 0x28
 80017c2:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017c4:	6822      	ldr	r2, [r4, #0]
 80017c6:	f040 8081 	bne.w	80018cc <HAL_I2C_Mem_Read+0x248>
 80017ca:	6953      	ldr	r3, [r2, #20]
 80017cc:	0759      	lsls	r1, r3, #29
 80017ce:	d5fc      	bpl.n	80017ca <HAL_I2C_Mem_Read+0x146>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d0:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017d8:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017da:	6913      	ldr	r3, [r2, #16]
 80017dc:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80017de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80017e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80017e2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017e4:	6822      	ldr	r2, [r4, #0]
          hi2c->XferCount--;
 80017e6:	3b01      	subs	r3, #1
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017ec:	6912      	ldr	r2, [r2, #16]
          hi2c->pBuffPtr++;
 80017ee:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 80017f2:	1e4b      	subs	r3, r1, #1
          hi2c->pBuffPtr++;
 80017f4:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80017f8:	8523      	strh	r3, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017fa:	7042      	strb	r2, [r0, #1]
          hi2c->XferSize--;
 80017fc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80017fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8001800:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001802:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8001804:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 8001806:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8001808:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 800180a:	3101      	adds	r1, #1
          hi2c->XferSize--;
 800180c:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800180e:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8001810:	6261      	str	r1, [r4, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 8001812:	2a00      	cmp	r2, #0
 8001814:	d092      	beq.n	800173c <HAL_I2C_Mem_Read+0xb8>
      if (hi2c->XferSize <= 3U)
 8001816:	2a03      	cmp	r2, #3
 8001818:	6823      	ldr	r3, [r4, #0]
 800181a:	d9b6      	bls.n	800178a <HAL_I2C_Mem_Read+0x106>
 800181c:	b955      	cbnz	r5, 8001834 <HAL_I2C_Mem_Read+0x1b0>
 800181e:	e098      	b.n	8001952 <HAL_I2C_Mem_Read+0x2ce>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001820:	695a      	ldr	r2, [r3, #20]
 8001822:	06d2      	lsls	r2, r2, #27
 8001824:	f100 8082 	bmi.w	800192c <HAL_I2C_Mem_Read+0x2a8>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001828:	f7fe fe80 	bl	800052c <HAL_GetTick>
 800182c:	1b80      	subs	r0, r0, r6
 800182e:	4285      	cmp	r5, r0
 8001830:	d358      	bcc.n	80018e4 <HAL_I2C_Mem_Read+0x260>
 8001832:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001834:	695a      	ldr	r2, [r3, #20]
 8001836:	0651      	lsls	r1, r2, #25
 8001838:	d5f2      	bpl.n	8001820 <HAL_I2C_Mem_Read+0x19c>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800183a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 8001840:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001842:	6823      	ldr	r3, [r4, #0]
        hi2c->XferSize--;
 8001844:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8001846:	6a60      	ldr	r0, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001848:	3901      	subs	r1, #1
 800184a:	b289      	uxth	r1, r1
 800184c:	8561      	strh	r1, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800184e:	6959      	ldr	r1, [r3, #20]
        hi2c->XferSize--;
 8001850:	3a01      	subs	r2, #1
 8001852:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8001854:	f100 0c01 	add.w	ip, r0, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001858:	0749      	lsls	r1, r1, #29
        hi2c->XferSize--;
 800185a:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 800185c:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001860:	d5d7      	bpl.n	8001812 <HAL_I2C_Mem_Read+0x18e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	7043      	strb	r3, [r0, #1]
 8001866:	e7c9      	b.n	80017fc <HAL_I2C_Mem_Read+0x178>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001868:	695a      	ldr	r2, [r3, #20]
 800186a:	0752      	lsls	r2, r2, #29
 800186c:	d40c      	bmi.n	8001888 <HAL_I2C_Mem_Read+0x204>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800186e:	f7fe fe5d 	bl	800052c <HAL_GetTick>
 8001872:	1b80      	subs	r0, r0, r6
 8001874:	4285      	cmp	r5, r0
 8001876:	d335      	bcc.n	80018e4 <HAL_I2C_Mem_Read+0x260>
 8001878:	2d00      	cmp	r5, #0
 800187a:	d033      	beq.n	80018e4 <HAL_I2C_Mem_Read+0x260>
 800187c:	6823      	ldr	r3, [r4, #0]
 800187e:	1c68      	adds	r0, r5, #1
 8001880:	d1f2      	bne.n	8001868 <HAL_I2C_Mem_Read+0x1e4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001882:	695a      	ldr	r2, [r3, #20]
 8001884:	0751      	lsls	r1, r2, #29
 8001886:	d5fc      	bpl.n	8001882 <HAL_I2C_Mem_Read+0x1fe>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001888:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800188a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800188c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001890:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	e7a2      	b.n	80017dc <HAL_I2C_Mem_Read+0x158>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001896:	6819      	ldr	r1, [r3, #0]
 8001898:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800189c:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800189e:	9003      	str	r0, [sp, #12]
 80018a0:	6959      	ldr	r1, [r3, #20]
 80018a2:	9103      	str	r1, [sp, #12]
 80018a4:	6999      	ldr	r1, [r3, #24]
 80018a6:	9103      	str	r1, [sp, #12]
 80018a8:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018aa:	6819      	ldr	r1, [r3, #0]
 80018ac:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80018b0:	6019      	str	r1, [r3, #0]
 80018b2:	e768      	b.n	8001786 <HAL_I2C_Mem_Read+0x102>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018b4:	695a      	ldr	r2, [r3, #20]
 80018b6:	0752      	lsls	r2, r2, #29
 80018b8:	f53f af72 	bmi.w	80017a0 <HAL_I2C_Mem_Read+0x11c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018bc:	f7fe fe36 	bl	800052c <HAL_GetTick>
 80018c0:	1b80      	subs	r0, r0, r6
 80018c2:	4285      	cmp	r5, r0
 80018c4:	d30e      	bcc.n	80018e4 <HAL_I2C_Mem_Read+0x260>
 80018c6:	b16d      	cbz	r5, 80018e4 <HAL_I2C_Mem_Read+0x260>
 80018c8:	6823      	ldr	r3, [r4, #0]
 80018ca:	e763      	b.n	8001794 <HAL_I2C_Mem_Read+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018cc:	6953      	ldr	r3, [r2, #20]
 80018ce:	075b      	lsls	r3, r3, #29
 80018d0:	f53f af7e 	bmi.w	80017d0 <HAL_I2C_Mem_Read+0x14c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018d4:	f7fe fe2a 	bl	800052c <HAL_GetTick>
 80018d8:	1b80      	subs	r0, r0, r6
 80018da:	4285      	cmp	r5, r0
 80018dc:	d302      	bcc.n	80018e4 <HAL_I2C_Mem_Read+0x260>
 80018de:	2d00      	cmp	r5, #0
 80018e0:	f47f af6f 	bne.w	80017c2 <HAL_I2C_Mem_Read+0x13e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80018e4:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80018e6:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80018e8:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80018ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80018ee:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80018f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80018f4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80018f8:	2701      	movs	r7, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80018fa:	f043 0320 	orr.w	r3, r3, #32
}
 80018fe:	4638      	mov	r0, r7
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001900:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001902:	b007      	add	sp, #28
 8001904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001908:	b94d      	cbnz	r5, 800191e <HAL_I2C_Mem_Read+0x29a>
 800190a:	e02c      	b.n	8001966 <HAL_I2C_Mem_Read+0x2e2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800190c:	695a      	ldr	r2, [r3, #20]
 800190e:	06d1      	lsls	r1, r2, #27
 8001910:	d40c      	bmi.n	800192c <HAL_I2C_Mem_Read+0x2a8>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001912:	f7fe fe0b 	bl	800052c <HAL_GetTick>
 8001916:	1b80      	subs	r0, r0, r6
 8001918:	4285      	cmp	r5, r0
 800191a:	d3e3      	bcc.n	80018e4 <HAL_I2C_Mem_Read+0x260>
 800191c:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800191e:	695a      	ldr	r2, [r3, #20]
 8001920:	0650      	lsls	r0, r2, #25
 8001922:	d5f3      	bpl.n	800190c <HAL_I2C_Mem_Read+0x288>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001924:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	7013      	strb	r3, [r2, #0]
 800192a:	e767      	b.n	80017fc <HAL_I2C_Mem_Read+0x178>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800192c:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800192e:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8001932:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001934:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001936:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001938:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800193c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001940:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001942:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001946:	2701      	movs	r7, #1
}
 8001948:	4638      	mov	r0, r7
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800194a:	6423      	str	r3, [r4, #64]	; 0x40
}
 800194c:	b007      	add	sp, #28
 800194e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001952:	695a      	ldr	r2, [r3, #20]
 8001954:	0650      	lsls	r0, r2, #25
 8001956:	f53f af70 	bmi.w	800183a <HAL_I2C_Mem_Read+0x1b6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800195a:	695a      	ldr	r2, [r3, #20]
 800195c:	06d0      	lsls	r0, r2, #27
 800195e:	d4e5      	bmi.n	800192c <HAL_I2C_Mem_Read+0x2a8>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001960:	f7fe fde4 	bl	800052c <HAL_GetTick>
 8001964:	e7be      	b.n	80018e4 <HAL_I2C_Mem_Read+0x260>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001966:	695a      	ldr	r2, [r3, #20]
 8001968:	0652      	lsls	r2, r2, #25
 800196a:	d5f6      	bpl.n	800195a <HAL_I2C_Mem_Read+0x2d6>
 800196c:	e7da      	b.n	8001924 <HAL_I2C_Mem_Read+0x2a0>
 800196e:	bf00      	nop
 8001970:	ffff0000 	.word	0xffff0000
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001974:	6819      	ldr	r1, [r3, #0]
 8001976:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800197a:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800197c:	6819      	ldr	r1, [r3, #0]
 800197e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8001982:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001984:	9004      	str	r0, [sp, #16]
 8001986:	6959      	ldr	r1, [r3, #20]
 8001988:	9104      	str	r1, [sp, #16]
 800198a:	6999      	ldr	r1, [r3, #24]
 800198c:	9104      	str	r1, [sp, #16]
 800198e:	9904      	ldr	r1, [sp, #16]
 8001990:	e6f9      	b.n	8001786 <HAL_I2C_Mem_Read+0x102>
 8001992:	bf00      	nop

08001994 <HAL_I2C_MasterTxCpltCallback>:
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop

08001998 <HAL_I2C_MasterRxCpltCallback>:
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop

0800199c <HAL_I2C_SlaveTxCpltCallback>:
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop

080019a0 <HAL_I2C_SlaveRxCpltCallback>:
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop

080019a4 <HAL_I2C_AddrCallback>:
}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop

080019a8 <HAL_I2C_ListenCpltCallback>:
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop

080019ac <HAL_I2C_MemTxCpltCallback>:
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop

080019b0 <HAL_I2C_MemRxCpltCallback>:
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop

080019b4 <HAL_I2C_ErrorCallback>:
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop

080019b8 <HAL_I2C_AbortCpltCallback>:
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop

080019bc <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80019bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80019be:	e9d3 010d 	ldrd	r0, r1, [r3, #52]	; 0x34
{
 80019c2:	b570      	push	{r4, r5, r6, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80019c4:	f893 403d 	ldrb.w	r4, [r3, #61]	; 0x3d
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	b2e6      	uxtb	r6, r4
  if (hi2c->hdmatx != NULL)
 80019cc:	b340      	cbz	r0, 8001a20 <I2C_DMAAbort+0x64>
    hi2c->hdmatx->XferCpltCallback = NULL;
 80019ce:	2400      	movs	r4, #0
 80019d0:	63c4      	str	r4, [r0, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 80019d2:	b1f1      	cbz	r1, 8001a12 <I2C_DMAAbort+0x56>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019d4:	6815      	ldr	r5, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 80019d6:	63cc      	str	r4, [r1, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019d8:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 80019dc:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 80019de:	855c      	strh	r4, [r3, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 80019e0:	6504      	str	r4, [r0, #80]	; 0x50
    hi2c->hdmarx->XferAbortCallback = NULL;
 80019e2:	2000      	movs	r0, #0
 80019e4:	6508      	str	r0, [r1, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 80019e6:	6811      	ldr	r1, [r2, #0]
 80019e8:	f021 0101 	bic.w	r1, r1, #1
 80019ec:	6011      	str	r1, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80019ee:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
 80019f2:	2960      	cmp	r1, #96	; 0x60
 80019f4:	d029      	beq.n	8001a4a <I2C_DMAAbort+0x8e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80019f6:	f006 0428 	and.w	r4, r6, #40	; 0x28
 80019fa:	2c28      	cmp	r4, #40	; 0x28
 80019fc:	d018      	beq.n	8001a30 <I2C_DMAAbort+0x74>
      hi2c->State = HAL_I2C_STATE_READY;
 80019fe:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a00:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8001a02:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff ffd2 	bl	80019b4 <HAL_I2C_ErrorCallback>
}
 8001a10:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a12:	6814      	ldr	r4, [r2, #0]
 8001a14:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8001a18:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 8001a1a:	8559      	strh	r1, [r3, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 8001a1c:	6501      	str	r1, [r0, #80]	; 0x50
 8001a1e:	e7e2      	b.n	80019e6 <I2C_DMAAbort+0x2a>
  if (hi2c->hdmarx != NULL)
 8001a20:	b1f1      	cbz	r1, 8001a60 <I2C_DMAAbort+0xa4>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a22:	6814      	ldr	r4, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8001a24:	63c8      	str	r0, [r1, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a26:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8001a2a:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 8001a2c:	8558      	strh	r0, [r3, #42]	; 0x2a
 8001a2e:	e7d8      	b.n	80019e2 <I2C_DMAAbort+0x26>
      __HAL_I2C_ENABLE(hi2c);
 8001a30:	6811      	ldr	r1, [r2, #0]
 8001a32:	f041 0101 	orr.w	r1, r1, #1
 8001a36:	6011      	str	r1, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a38:	6811      	ldr	r1, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001a3a:	2000      	movs	r0, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a3c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001a40:	6011      	str	r1, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001a42:	6318      	str	r0, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001a44:	f883 403d 	strb.w	r4, [r3, #61]	; 0x3d
 8001a48:	e7df      	b.n	8001a0a <I2C_DMAAbort+0x4e>
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001a4a:	2200      	movs	r2, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8001a4c:	2120      	movs	r1, #32
 8001a4e:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    HAL_I2C_AbortCpltCallback(hi2c);
 8001a52:	4618      	mov	r0, r3
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001a58:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8001a5a:	f7ff ffad 	bl	80019b8 <HAL_I2C_AbortCpltCallback>
}
 8001a5e:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a60:	6810      	ldr	r0, [r2, #0]
 8001a62:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8001a66:	6010      	str	r0, [r2, #0]
  hi2c->XferCount = 0U;
 8001a68:	8559      	strh	r1, [r3, #42]	; 0x2a
 8001a6a:	e7bc      	b.n	80019e6 <I2C_DMAAbort+0x2a>

08001a6c <HAL_I2C_EV_IRQHandler>:
{
 8001a6c:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001a6e:	6803      	ldr	r3, [r0, #0]
{
 8001a70:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001a72:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001a74:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001a76:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a7a:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001a7e:	b2d2      	uxtb	r2, r2
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001a80:	2a10      	cmp	r2, #16
{
 8001a82:	b08c      	sub	sp, #48	; 0x30
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001a84:	d020      	beq.n	8001ac8 <HAL_I2C_EV_IRQHandler+0x5c>
 8001a86:	2a40      	cmp	r2, #64	; 0x40
 8001a88:	d01e      	beq.n	8001ac8 <HAL_I2C_EV_IRQHandler+0x5c>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001a8a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001a8c:	b2c9      	uxtb	r1, r1
 8001a8e:	2a00      	cmp	r2, #0
 8001a90:	f000 80bb 	beq.w	8001c0a <HAL_I2C_EV_IRQHandler+0x19e>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001a94:	695a      	ldr	r2, [r3, #20]
  uint32_t sr2itflags               = 0U;
 8001a96:	2600      	movs	r6, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a98:	f3c2 0540 	ubfx	r5, r2, #1, #1
 8001a9c:	2d00      	cmp	r5, #0
 8001a9e:	d078      	beq.n	8001b92 <HAL_I2C_EV_IRQHandler+0x126>
 8001aa0:	0585      	lsls	r5, r0, #22
 8001aa2:	d57b      	bpl.n	8001b9c <HAL_I2C_EV_IRQHandler+0x130>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001aa4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001aa6:	b102      	cbz	r2, 8001aaa <HAL_I2C_EV_IRQHandler+0x3e>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001aa8:	699e      	ldr	r6, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001aaa:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001aae:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8001ab2:	2a28      	cmp	r2, #40	; 0x28
 8001ab4:	f000 821c 	beq.w	8001ef0 <HAL_I2C_EV_IRQHandler+0x484>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ab8:	f06f 0102 	mvn.w	r1, #2
    __HAL_UNLOCK(hi2c);
 8001abc:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001abe:	6159      	str	r1, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8001ac0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8001ac4:	b00c      	add	sp, #48	; 0x30
 8001ac6:	bd70      	pop	{r4, r5, r6, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ac8:	6999      	ldr	r1, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001aca:	695a      	ldr	r2, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001acc:	07d6      	lsls	r6, r2, #31
 8001ace:	d43a      	bmi.n	8001b46 <HAL_I2C_EV_IRQHandler+0xda>
 8001ad0:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 8001ad4:	d0f6      	beq.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
 8001ad6:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 8001ada:	d0f3      	beq.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001adc:	0716      	lsls	r6, r2, #28
 8001ade:	f140 809a 	bpl.w	8001c16 <HAL_I2C_EV_IRQHandler+0x1aa>
 8001ae2:	0585      	lsls	r5, r0, #22
 8001ae4:	f100 81f5 	bmi.w	8001ed2 <HAL_I2C_EV_IRQHandler+0x466>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001ae8:	f011 0f04 	tst.w	r1, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001aec:	6859      	ldr	r1, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001aee:	f000 80ff 	beq.w	8001cf0 <HAL_I2C_EV_IRQHandler+0x284>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001af2:	0509      	lsls	r1, r1, #20
 8001af4:	d4e6      	bmi.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001af6:	0616      	lsls	r6, r2, #24
 8001af8:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8001afc:	f140 81a0 	bpl.w	8001e40 <HAL_I2C_EV_IRQHandler+0x3d4>
 8001b00:	0545      	lsls	r5, r0, #21
 8001b02:	f140 819d 	bpl.w	8001e40 <HAL_I2C_EV_IRQHandler+0x3d4>
 8001b06:	2900      	cmp	r1, #0
 8001b08:	f040 819d 	bne.w	8001e46 <HAL_I2C_EV_IRQHandler+0x3da>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b0c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001b10:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001b12:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001b16:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b18:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001b1a:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001b1c:	2800      	cmp	r0, #0
 8001b1e:	f040 8378 	bne.w	8002212 <HAL_I2C_EV_IRQHandler+0x7a6>
 8001b22:	2a21      	cmp	r2, #33	; 0x21
 8001b24:	f000 8418 	beq.w	8002358 <HAL_I2C_EV_IRQHandler+0x8ec>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001b28:	2940      	cmp	r1, #64	; 0x40
 8001b2a:	d1cb      	bne.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001b2c:	2a22      	cmp	r2, #34	; 0x22
 8001b2e:	d1c9      	bne.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
    if (hi2c->XferCount == 0U)
 8001b30:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001b32:	b292      	uxth	r2, r2
 8001b34:	2a00      	cmp	r2, #0
 8001b36:	f000 8409 	beq.w	800234c <HAL_I2C_EV_IRQHandler+0x8e0>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b3a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8001b3e:	2a40      	cmp	r2, #64	; 0x40
 8001b40:	f040 80b6 	bne.w	8001cb0 <HAL_I2C_EV_IRQHandler+0x244>
 8001b44:	e18d      	b.n	8001e62 <HAL_I2C_EV_IRQHandler+0x3f6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b46:	0585      	lsls	r5, r0, #22
 8001b48:	d562      	bpl.n	8001c10 <HAL_I2C_EV_IRQHandler+0x1a4>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8001b4a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b4c:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8001b50:	f000 81e9 	beq.w	8001f26 <HAL_I2C_EV_IRQHandler+0x4ba>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8001b54:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b56:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8001b5a:	bf04      	itt	eq
 8001b5c:	2208      	moveq	r2, #8
 8001b5e:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b60:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8001b64:	2a40      	cmp	r2, #64	; 0x40
 8001b66:	f000 81d7 	beq.w	8001f18 <HAL_I2C_EV_IRQHandler+0x4ac>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b6a:	6922      	ldr	r2, [r4, #16]
 8001b6c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001b70:	f000 8197 	beq.w	8001ea2 <HAL_I2C_EV_IRQHandler+0x436>
      if (hi2c->EventCount == 0U)
 8001b74:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001b76:	2a00      	cmp	r2, #0
 8001b78:	f000 81d8 	beq.w	8001f2c <HAL_I2C_EV_IRQHandler+0x4c0>
      else if (hi2c->EventCount == 1U)
 8001b7c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001b7e:	2a01      	cmp	r2, #1
 8001b80:	d1a0      	bne.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001b82:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001b84:	11d2      	asrs	r2, r2, #7
 8001b86:	f002 0206 	and.w	r2, r2, #6
 8001b8a:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8001b8e:	611a      	str	r2, [r3, #16]
 8001b90:	e798      	b.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b92:	06d6      	lsls	r6, r2, #27
 8001b94:	d502      	bpl.n	8001b9c <HAL_I2C_EV_IRQHandler+0x130>
 8001b96:	0586      	lsls	r6, r0, #22
 8001b98:	f100 80d7 	bmi.w	8001d4a <HAL_I2C_EV_IRQHandler+0x2de>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001b9c:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 8001ba0:	2921      	cmp	r1, #33	; 0x21
 8001ba2:	f3c2 0580 	ubfx	r5, r2, #2, #1
 8001ba6:	d04e      	beq.n	8001c46 <HAL_I2C_EV_IRQHandler+0x1da>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ba8:	0651      	lsls	r1, r2, #25
 8001baa:	f140 808b 	bpl.w	8001cc4 <HAL_I2C_EV_IRQHandler+0x258>
 8001bae:	0542      	lsls	r2, r0, #21
 8001bb0:	f140 8088 	bpl.w	8001cc4 <HAL_I2C_EV_IRQHandler+0x258>
 8001bb4:	2d00      	cmp	r5, #0
 8001bb6:	f040 8088 	bne.w	8001cca <HAL_I2C_EV_IRQHandler+0x25e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001bba:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8001bbe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001bc0:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001bc2:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8001bc4:	2a00      	cmp	r2, #0
 8001bc6:	f43f af7d 	beq.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8001bd0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8001bd2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001bda:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8001bdc:	3201      	adds	r2, #1
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001bde:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8001be0:	6262      	str	r2, [r4, #36]	; 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f47f af6e 	bne.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
 8001be8:	292a      	cmp	r1, #42	; 0x2a
 8001bea:	f47f af6b 	bne.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001bee:	6822      	ldr	r2, [r4, #0]
 8001bf0:	6853      	ldr	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001bf2:	2522      	movs	r5, #34	; 0x22
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001bf4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001bf8:	2128      	movs	r1, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001bfa:	6053      	str	r3, [r2, #4]
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001bfc:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001bfe:	6325      	str	r5, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001c00:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001c04:	f7ff fecc 	bl	80019a0 <HAL_I2C_SlaveRxCpltCallback>
 8001c08:	e75c      	b.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001c0a:	699e      	ldr	r6, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001c0c:	695a      	ldr	r2, [r3, #20]
 8001c0e:	e743      	b.n	8001a98 <HAL_I2C_EV_IRQHandler+0x2c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c10:	0715      	lsls	r5, r2, #28
 8001c12:	f53f af69 	bmi.w	8001ae8 <HAL_I2C_EV_IRQHandler+0x7c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c16:	0796      	lsls	r6, r2, #30
 8001c18:	f57f af66 	bpl.w	8001ae8 <HAL_I2C_EV_IRQHandler+0x7c>
 8001c1c:	0585      	lsls	r5, r0, #22
 8001c1e:	f57f af63 	bpl.w	8001ae8 <HAL_I2C_EV_IRQHandler+0x7c>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001c22:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001c26:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001c28:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c2a:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8001c2e:	2922      	cmp	r1, #34	; 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001c30:	b2d2      	uxtb	r2, r2
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c32:	f000 820b 	beq.w	800204c <HAL_I2C_EV_IRQHandler+0x5e0>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c36:	2200      	movs	r2, #0
 8001c38:	920a      	str	r2, [sp, #40]	; 0x28
 8001c3a:	695a      	ldr	r2, [r3, #20]
 8001c3c:	920a      	str	r2, [sp, #40]	; 0x28
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	930a      	str	r3, [sp, #40]	; 0x28
 8001c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001c44:	e73e      	b.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c46:	0612      	lsls	r2, r2, #24
 8001c48:	d527      	bpl.n	8001c9a <HAL_I2C_EV_IRQHandler+0x22e>
 8001c4a:	0546      	lsls	r6, r0, #21
 8001c4c:	d525      	bpl.n	8001c9a <HAL_I2C_EV_IRQHandler+0x22e>
 8001c4e:	bb3d      	cbnz	r5, 8001ca0 <HAL_I2C_EV_IRQHandler+0x234>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c50:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8001c54:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001c56:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c58:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8001c5a:	2a00      	cmp	r2, #0
 8001c5c:	f43f af32 	beq.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c60:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001c62:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001c66:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 8001c68:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8001c6a:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001c6c:	3a01      	subs	r2, #1
 8001c6e:	b292      	uxth	r2, r2
 8001c70:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001c72:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001c74:	b292      	uxth	r2, r2
 8001c76:	2a00      	cmp	r2, #0
 8001c78:	f47f af24 	bne.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
 8001c7c:	2829      	cmp	r0, #41	; 0x29
 8001c7e:	f47f af21 	bne.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c82:	685a      	ldr	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001c84:	2528      	movs	r5, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c8a:	605a      	str	r2, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001c8c:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001c8e:	6321      	str	r1, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001c90:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001c94:	f7ff fe82 	bl	800199c <HAL_I2C_SlaveTxCpltCallback>
 8001c98:	e714      	b.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c9a:	2d00      	cmp	r5, #0
 8001c9c:	f43f af12 	beq.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
 8001ca0:	0580      	lsls	r0, r0, #22
 8001ca2:	f57f af0f 	bpl.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
  if (hi2c->XferCount != 0U)
 8001ca6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001ca8:	b292      	uxth	r2, r2
 8001caa:	2a00      	cmp	r2, #0
 8001cac:	f43f af0a 	beq.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cb0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001cb2:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001cb6:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 8001cb8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8001cba:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001cc2:	e6ff      	b.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cc4:	2d00      	cmp	r5, #0
 8001cc6:	f43f aefd 	beq.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
 8001cca:	0586      	lsls	r6, r0, #22
 8001ccc:	f57f aefa 	bpl.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
  if (hi2c->XferCount != 0U)
 8001cd0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001cd2:	b292      	uxth	r2, r2
 8001cd4:	2a00      	cmp	r2, #0
 8001cd6:	f43f aef5 	beq.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cda:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8001ce0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8001ce2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8001ce8:	3201      	adds	r2, #1
    hi2c->XferCount--;
 8001cea:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8001cec:	6262      	str	r2, [r4, #36]	; 0x24
 8001cee:	e6e9      	b.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001cf0:	050e      	lsls	r6, r1, #20
 8001cf2:	f53f aee7 	bmi.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001cf6:	0655      	lsls	r5, r2, #25
 8001cf8:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8001cfc:	f140 80b7 	bpl.w	8001e6e <HAL_I2C_EV_IRQHandler+0x402>
 8001d00:	0542      	lsls	r2, r0, #21
 8001d02:	f140 80b4 	bpl.w	8001e6e <HAL_I2C_EV_IRQHandler+0x402>
 8001d06:	2900      	cmp	r1, #0
 8001d08:	f040 80b4 	bne.w	8001e74 <HAL_I2C_EV_IRQHandler+0x408>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d0c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001d10:	2a22      	cmp	r2, #34	; 0x22
 8001d12:	f47f aed7 	bne.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
    tmp = hi2c->XferCount;
 8001d16:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001d18:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8001d1a:	2a03      	cmp	r2, #3
 8001d1c:	f240 82e9 	bls.w	80022f2 <HAL_I2C_EV_IRQHandler+0x886>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d20:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8001d26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8001d28:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8001d30:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d32:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8001d34:	3201      	adds	r2, #1
      if (hi2c->XferCount == (uint16_t)3)
 8001d36:	2b03      	cmp	r3, #3
      hi2c->pBuffPtr++;
 8001d38:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->XferCount == (uint16_t)3)
 8001d3a:	f47f aec3 	bne.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d3e:	6822      	ldr	r2, [r4, #0]
 8001d40:	6853      	ldr	r3, [r2, #4]
 8001d42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d46:	6053      	str	r3, [r2, #4]
 8001d48:	e6bc      	b.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d4a:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d54:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8001d56:	950b      	str	r5, [sp, #44]	; 0x2c
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	920b      	str	r2, [sp, #44]	; 0x2c
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d6c:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001d6e:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d70:	b2cd      	uxtb	r5, r1
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001d72:	0511      	lsls	r1, r2, #20
 8001d74:	d521      	bpl.n	8001dba <HAL_I2C_EV_IRQHandler+0x34e>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001d76:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8001d7a:	2a22      	cmp	r2, #34	; 0x22
 8001d7c:	f000 8141 	beq.w	8002002 <HAL_I2C_EV_IRQHandler+0x596>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8001d80:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001d82:	6802      	ldr	r2, [r0, #0]
 8001d84:	6852      	ldr	r2, [r2, #4]
 8001d86:	b292      	uxth	r2, r2
 8001d88:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8001d8a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001d8c:	b292      	uxth	r2, r2
 8001d8e:	b11a      	cbz	r2, 8001d98 <HAL_I2C_EV_IRQHandler+0x32c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d90:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001d92:	f042 0204 	orr.w	r2, r2, #4
 8001d96:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d9e:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001da0:	f7fe ffa4 	bl	8000cec <HAL_DMA_GetState>
 8001da4:	2801      	cmp	r0, #1
 8001da6:	d008      	beq.n	8001dba <HAL_I2C_EV_IRQHandler+0x34e>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001da8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001daa:	4ba6      	ldr	r3, [pc, #664]	; (8002044 <HAL_I2C_EV_IRQHandler+0x5d8>)
 8001dac:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001dae:	f7fe ff8b 	bl	8000cc8 <HAL_DMA_Abort_IT>
 8001db2:	b110      	cbz	r0, 8001dba <HAL_I2C_EV_IRQHandler+0x34e>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001db4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001db6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001db8:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8001dba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	b313      	cbz	r3, 8001e06 <HAL_I2C_EV_IRQHandler+0x39a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001dc0:	6823      	ldr	r3, [r4, #0]
 8001dc2:	695a      	ldr	r2, [r3, #20]
 8001dc4:	0752      	lsls	r2, r2, #29
 8001dc6:	d50a      	bpl.n	8001dde <HAL_I2C_EV_IRQHandler+0x372>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dc8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8001dce:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8001dd0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001dd2:	6823      	ldr	r3, [r4, #0]
      hi2c->XferCount--;
 8001dd4:	3a01      	subs	r2, #1
 8001dd6:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8001dd8:	3101      	adds	r1, #1
      hi2c->XferCount--;
 8001dda:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8001ddc:	6261      	str	r1, [r4, #36]	; 0x24
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001dde:	695a      	ldr	r2, [r3, #20]
 8001de0:	0656      	lsls	r6, r2, #25
 8001de2:	d509      	bpl.n	8001df8 <HAL_I2C_EV_IRQHandler+0x38c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001de4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8001dea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8001dec:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001dee:	3b01      	subs	r3, #1
 8001df0:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8001df2:	3201      	adds	r2, #1
      hi2c->XferCount--;
 8001df4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8001df6:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount != 0U)
 8001df8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	b11b      	cbz	r3, 8001e06 <HAL_I2C_EV_IRQHandler+0x39a>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001dfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e00:	f043 0304 	orr.w	r3, r3, #4
 8001e04:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f040 809d 	bne.w	8001f48 <HAL_I2C_EV_IRQHandler+0x4dc>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001e0e:	2d2a      	cmp	r5, #42	; 0x2a
 8001e10:	f000 814f 	beq.w	80020b2 <HAL_I2C_EV_IRQHandler+0x646>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001e14:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001e18:	2b28      	cmp	r3, #40	; 0x28
 8001e1a:	f000 80e0 	beq.w	8001fde <HAL_I2C_EV_IRQHandler+0x572>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001e1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e20:	2b22      	cmp	r3, #34	; 0x22
 8001e22:	d002      	beq.n	8001e2a <HAL_I2C_EV_IRQHandler+0x3be>
 8001e24:	2d22      	cmp	r5, #34	; 0x22
 8001e26:	f47f ae4d 	bne.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e2a:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8001e2c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e2e:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001e30:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8001e32:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e36:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001e3a:	f7ff fdb1 	bl	80019a0 <HAL_I2C_SlaveRxCpltCallback>
 8001e3e:	e641      	b.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e40:	2900      	cmp	r1, #0
 8001e42:	f43f ae3f 	beq.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
 8001e46:	0582      	lsls	r2, r0, #22
 8001e48:	f57f ae3c 	bpl.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e4c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e4e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001e52:	2a21      	cmp	r2, #33	; 0x21
 8001e54:	f000 816e 	beq.w	8002134 <HAL_I2C_EV_IRQHandler+0x6c8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e58:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001e5c:	2b40      	cmp	r3, #64	; 0x40
 8001e5e:	f47f ae31 	bne.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001e62:	4620      	mov	r0, r4
}
 8001e64:	b00c      	add	sp, #48	; 0x30
 8001e66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001e6a:	f7ff b84b 	b.w	8000f04 <I2C_MemoryTransmit_TXE_BTF>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e6e:	2900      	cmp	r1, #0
 8001e70:	f43f ae28 	beq.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
 8001e74:	0586      	lsls	r6, r0, #22
 8001e76:	f57f ae25 	bpl.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e7a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8001e7c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001e7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001e80:	b292      	uxth	r2, r2
 8001e82:	2a04      	cmp	r2, #4
 8001e84:	f000 817b 	beq.w	800217e <HAL_I2C_EV_IRQHandler+0x712>
  else if (hi2c->XferCount == 3U)
 8001e88:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001e8a:	b292      	uxth	r2, r2
 8001e8c:	2a03      	cmp	r2, #3
 8001e8e:	f000 81b1 	beq.w	80021f4 <HAL_I2C_EV_IRQHandler+0x788>
  else if (hi2c->XferCount == 2U)
 8001e92:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001e94:	b292      	uxth	r2, r2
 8001e96:	2a02      	cmp	r2, #2
 8001e98:	f000 81d4 	beq.w	8002244 <HAL_I2C_EV_IRQHandler+0x7d8>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	700b      	strb	r3, [r1, #0]
 8001ea0:	e71e      	b.n	8001ce0 <HAL_I2C_EV_IRQHandler+0x274>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001ea2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001ea6:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001ea8:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001eaa:	bf16      	itet	ne
 8001eac:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001eb0:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001eb4:	b2d2      	uxtbne	r2, r2
 8001eb6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001eb8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001eba:	2a00      	cmp	r2, #0
 8001ebc:	f000 80e3 	beq.w	8002086 <HAL_I2C_EV_IRQHandler+0x61a>
 8001ec0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ec2:	2a00      	cmp	r2, #0
 8001ec4:	f000 80df 	beq.w	8002086 <HAL_I2C_EV_IRQHandler+0x61a>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	e5f8      	b.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001ed2:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8001ed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ed6:	b2d2      	uxtb	r2, r2
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001ed8:	611a      	str	r2, [r3, #16]
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8001eda:	2900      	cmp	r1, #0
 8001edc:	f000 808c 	beq.w	8001ff8 <HAL_I2C_EV_IRQHandler+0x58c>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8001ee0:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8001ee2:	2a00      	cmp	r2, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_I2C_EV_IRQHandler+0x45c>
 8001ee6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001ee8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001eea:	2a00      	cmp	r2, #0
 8001eec:	d1ec      	bne.n	8001ec8 <HAL_I2C_EV_IRQHandler+0x45c>
 8001eee:	e5e9      	b.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ef6:	605a      	str	r2, [r3, #4]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8001ef8:	ea6f 0196 	mvn.w	r1, r6, lsr #2
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8001efc:	0633      	lsls	r3, r6, #24
    __HAL_UNLOCK(hi2c);
 8001efe:	f04f 0300 	mov.w	r3, #0
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8001f02:	f001 0101 	and.w	r1, r1, #1
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8001f06:	bf54      	ite	pl
 8001f08:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8001f0a:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8001f0c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8001f10:	4620      	mov	r0, r4
 8001f12:	f7ff fd47 	bl	80019a4 <HAL_I2C_AddrCallback>
 8001f16:	e5d5      	b.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
    if (hi2c->EventCount == 0U)
 8001f18:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001f1a:	b97a      	cbnz	r2, 8001f3c <HAL_I2C_EV_IRQHandler+0x4d0>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001f1c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001f1e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f22:	611a      	str	r2, [r3, #16]
 8001f24:	e5ce      	b.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8001f26:	2201      	movs	r2, #1
 8001f28:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001f2a:	e619      	b.n	8001b60 <HAL_I2C_EV_IRQHandler+0xf4>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001f2c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001f2e:	11d2      	asrs	r2, r2, #7
 8001f30:	f002 0206 	and.w	r2, r2, #6
 8001f34:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8001f38:	611a      	str	r2, [r3, #16]
 8001f3a:	e5c3      	b.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001f3c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	611a      	str	r2, [r3, #16]
 8001f46:	e5bd      	b.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f48:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001f4c:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8001f50:	6823      	ldr	r3, [r4, #0]
 8001f52:	2910      	cmp	r1, #16
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f54:	b2d2      	uxtb	r2, r2
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001f56:	f000 80b9 	beq.w	80020cc <HAL_I2C_EV_IRQHandler+0x660>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001f5a:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8001f5e:	2928      	cmp	r1, #40	; 0x28
 8001f60:	f000 80af 	beq.w	80020c2 <HAL_I2C_EV_IRQHandler+0x656>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8001f64:	6859      	ldr	r1, [r3, #4]
 8001f66:	0509      	lsls	r1, r1, #20
 8001f68:	d404      	bmi.n	8001f74 <HAL_I2C_EV_IRQHandler+0x508>
 8001f6a:	2a60      	cmp	r2, #96	; 0x60
 8001f6c:	d002      	beq.n	8001f74 <HAL_I2C_EV_IRQHandler+0x508>
      hi2c->State = HAL_I2C_STATE_READY;
 8001f6e:	2220      	movs	r2, #32
 8001f70:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f74:	2200      	movs	r2, #0
 8001f76:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f78:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8001f82:	f000 8085 	beq.w	8002090 <HAL_I2C_EV_IRQHandler+0x624>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001f86:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001f88:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001f8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f8e:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001f90:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	f000 810f 	beq.w	80021b8 <HAL_I2C_EV_IRQHandler+0x74c>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001f9a:	4b2a      	ldr	r3, [pc, #168]	; (8002044 <HAL_I2C_EV_IRQHandler+0x5d8>)
 8001f9c:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001f9e:	f7fe fe93 	bl	8000cc8 <HAL_DMA_Abort_IT>
 8001fa2:	b150      	cbz	r0, 8001fba <HAL_I2C_EV_IRQHandler+0x54e>
        __HAL_I2C_DISABLE(hi2c);
 8001fa4:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001fa6:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8001fa8:	6813      	ldr	r3, [r2, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001faa:	6d01      	ldr	r1, [r0, #80]	; 0x50
        __HAL_I2C_DISABLE(hi2c);
 8001fac:	f023 0301 	bic.w	r3, r3, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8001fb0:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE(hi2c);
 8001fb2:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8001fb4:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001fb8:	4788      	blx	r1
  CurrentError = hi2c->ErrorCode;
 8001fba:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8001fbc:	0718      	lsls	r0, r3, #28
 8001fbe:	d004      	beq.n	8001fca <HAL_I2C_EV_IRQHandler+0x55e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fc0:	6822      	ldr	r2, [r4, #0]
 8001fc2:	6853      	ldr	r3, [r2, #4]
 8001fc4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fc8:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8001fca:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8001fce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001fd0:	0751      	lsls	r1, r2, #29
  CurrentState = hi2c->State;
 8001fd2:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8001fd4:	f57f ad76 	bpl.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
 8001fd8:	2b28      	cmp	r3, #40	; 0x28
 8001fda:	f47f ad73 	bne.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fde:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <HAL_I2C_EV_IRQHandler+0x5dc>)
 8001fe0:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8001fe2:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 8001fe8:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 8001fea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8001ff2:	f7ff fcd9 	bl	80019a8 <HAL_I2C_ListenCpltCallback>
 8001ff6:	e565      	b.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8001ff8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001ffa:	2a00      	cmp	r2, #0
 8001ffc:	f47f af70 	bne.w	8001ee0 <HAL_I2C_EV_IRQHandler+0x474>
 8002000:	e560      	b.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002002:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002004:	6802      	ldr	r2, [r0, #0]
 8002006:	6852      	ldr	r2, [r2, #4]
 8002008:	b292      	uxth	r2, r2
 800200a:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 800200c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800200e:	b292      	uxth	r2, r2
 8002010:	b11a      	cbz	r2, 800201a <HAL_I2C_EV_IRQHandler+0x5ae>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002012:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002014:	f042 0204 	orr.w	r2, r2, #4
 8002018:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002020:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002022:	f7fe fe63 	bl	8000cec <HAL_DMA_GetState>
 8002026:	2801      	cmp	r0, #1
 8002028:	f43f aec7 	beq.w	8001dba <HAL_I2C_EV_IRQHandler+0x34e>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800202c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800202e:	4b05      	ldr	r3, [pc, #20]	; (8002044 <HAL_I2C_EV_IRQHandler+0x5d8>)
 8002030:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002032:	f7fe fe49 	bl	8000cc8 <HAL_DMA_Abort_IT>
 8002036:	2800      	cmp	r0, #0
 8002038:	f43f aebf 	beq.w	8001dba <HAL_I2C_EV_IRQHandler+0x34e>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800203c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800203e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002040:	4798      	blx	r3
 8002042:	e6ba      	b.n	8001dba <HAL_I2C_EV_IRQHandler+0x34e>
 8002044:	080019bd 	.word	0x080019bd
 8002048:	ffff0000 	.word	0xffff0000
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800204c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800204e:	b911      	cbnz	r1, 8002056 <HAL_I2C_EV_IRQHandler+0x5ea>
 8002050:	2a40      	cmp	r2, #64	; 0x40
 8002052:	f000 80e2 	beq.w	800221a <HAL_I2C_EV_IRQHandler+0x7ae>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002056:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002058:	b922      	cbnz	r2, 8002064 <HAL_I2C_EV_IRQHandler+0x5f8>
 800205a:	6921      	ldr	r1, [r4, #16]
 800205c:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 8002060:	f000 80e2 	beq.w	8002228 <HAL_I2C_EV_IRQHandler+0x7bc>
      if (hi2c->XferCount == 0U)
 8002064:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002066:	b292      	uxth	r2, r2
 8002068:	2a00      	cmp	r2, #0
 800206a:	d13b      	bne.n	80020e4 <HAL_I2C_EV_IRQHandler+0x678>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800206c:	9203      	str	r2, [sp, #12]
 800206e:	695a      	ldr	r2, [r3, #20]
 8002070:	9203      	str	r2, [sp, #12]
 8002072:	699a      	ldr	r2, [r3, #24]
 8002074:	9203      	str	r2, [sp, #12]
 8002076:	9a03      	ldr	r2, [sp, #12]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800207e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	6523      	str	r3, [r4, #80]	; 0x50
 8002084:	e51e      	b.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002086:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002088:	2a00      	cmp	r2, #0
 800208a:	f47f af2d 	bne.w	8001ee8 <HAL_I2C_EV_IRQHandler+0x47c>
 800208e:	e519      	b.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002090:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8002094:	2960      	cmp	r1, #96	; 0x60
 8002096:	d079      	beq.n	800218c <HAL_I2C_EV_IRQHandler+0x720>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002098:	695a      	ldr	r2, [r3, #20]
 800209a:	0655      	lsls	r5, r2, #25
 800209c:	d505      	bpl.n	80020aa <HAL_I2C_EV_IRQHandler+0x63e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800209e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80020a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020a6:	3301      	adds	r3, #1
 80020a8:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 80020aa:	4620      	mov	r0, r4
 80020ac:	f7ff fc82 	bl	80019b4 <HAL_I2C_ErrorCallback>
 80020b0:	e783      	b.n	8001fba <HAL_I2C_EV_IRQHandler+0x54e>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80020b2:	2228      	movs	r2, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_NONE;
 80020b4:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80020b6:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80020b8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80020bc:	f7ff fc70 	bl	80019a0 <HAL_I2C_SlaveRxCpltCallback>
 80020c0:	e6a8      	b.n	8001e14 <HAL_I2C_EV_IRQHandler+0x3a8>
    hi2c->PreviousState = I2C_STATE_NONE;
 80020c2:	2200      	movs	r2, #0
 80020c4:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80020c6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 80020ca:	e757      	b.n	8001f7c <HAL_I2C_EV_IRQHandler+0x510>
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80020cc:	2a22      	cmp	r2, #34	; 0x22
 80020ce:	f47f af44 	bne.w	8001f5a <HAL_I2C_EV_IRQHandler+0x4ee>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020d8:	601a      	str	r2, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	0510      	lsls	r0, r2, #20
 80020de:	f57f af46 	bpl.w	8001f6e <HAL_I2C_EV_IRQHandler+0x502>
 80020e2:	e747      	b.n	8001f74 <HAL_I2C_EV_IRQHandler+0x508>
      else if (hi2c->XferCount == 1U)
 80020e4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80020e6:	b292      	uxth	r2, r2
 80020e8:	2a01      	cmp	r2, #1
 80020ea:	f000 80e1 	beq.w	80022b0 <HAL_I2C_EV_IRQHandler+0x844>
      else if (hi2c->XferCount == 2U)
 80020ee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80020f0:	b292      	uxth	r2, r2
 80020f2:	2a02      	cmp	r2, #2
 80020f4:	f000 8156 	beq.w	80023a4 <HAL_I2C_EV_IRQHandler+0x938>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020fe:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	0515      	lsls	r5, r2, #20
 8002104:	d50e      	bpl.n	8002124 <HAL_I2C_EV_IRQHandler+0x6b8>
 8002106:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 800210a:	d007      	beq.n	800211c <HAL_I2C_EV_IRQHandler+0x6b0>
 800210c:	3801      	subs	r0, #1
 800210e:	281f      	cmp	r0, #31
 8002110:	d808      	bhi.n	8002124 <HAL_I2C_EV_IRQHandler+0x6b8>
 8002112:	4aa1      	ldr	r2, [pc, #644]	; (8002398 <HAL_I2C_EV_IRQHandler+0x92c>)
 8002114:	fa22 f000 	lsr.w	r0, r2, r0
 8002118:	07c0      	lsls	r0, r0, #31
 800211a:	d503      	bpl.n	8002124 <HAL_I2C_EV_IRQHandler+0x6b8>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002122:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002124:	2200      	movs	r2, #0
 8002126:	9209      	str	r2, [sp, #36]	; 0x24
 8002128:	695a      	ldr	r2, [r3, #20]
 800212a:	9209      	str	r2, [sp, #36]	; 0x24
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	9309      	str	r3, [sp, #36]	; 0x24
 8002130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002132:	e7a5      	b.n	8002080 <HAL_I2C_EV_IRQHandler+0x614>
    if (hi2c->XferCount != 0U)
 8002134:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002136:	b292      	uxth	r2, r2
 8002138:	2a00      	cmp	r2, #0
 800213a:	f47f adb9 	bne.w	8001cb0 <HAL_I2C_EV_IRQHandler+0x244>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800213e:	2908      	cmp	r1, #8
 8002140:	d005      	beq.n	800214e <HAL_I2C_EV_IRQHandler+0x6e2>
 8002142:	2920      	cmp	r1, #32
 8002144:	d003      	beq.n	800214e <HAL_I2C_EV_IRQHandler+0x6e2>
 8002146:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 800214a:	f040 817e 	bne.w	800244a <HAL_I2C_EV_IRQHandler+0x9de>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002154:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002156:	6819      	ldr	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002158:	2200      	movs	r2, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800215a:	2020      	movs	r0, #32
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800215c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8002160:	6019      	str	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002162:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002164:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002168:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800216c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002170:	2b40      	cmp	r3, #64	; 0x40
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002172:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002174:	f000 810b 	beq.w	800238e <HAL_I2C_EV_IRQHandler+0x922>
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002178:	f7ff fc0c 	bl	8001994 <HAL_I2C_MasterTxCpltCallback>
 800217c:	e4a2      	b.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002184:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	700b      	strb	r3, [r1, #0]
 800218a:	e5a9      	b.n	8001ce0 <HAL_I2C_EV_IRQHandler+0x274>
    hi2c->State = HAL_I2C_STATE_READY;
 800218c:	2120      	movs	r1, #32
 800218e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002192:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	0656      	lsls	r6, r2, #25
 8002198:	d506      	bpl.n	80021a8 <HAL_I2C_EV_IRQHandler+0x73c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800219a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80021a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021a2:	6823      	ldr	r3, [r4, #0]
 80021a4:	3201      	adds	r2, #1
 80021a6:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	f022 0201 	bic.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80021b0:	4620      	mov	r0, r4
 80021b2:	f7ff fc01 	bl	80019b8 <HAL_I2C_AbortCpltCallback>
 80021b6:	e700      	b.n	8001fba <HAL_I2C_EV_IRQHandler+0x54e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80021b8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80021ba:	4b78      	ldr	r3, [pc, #480]	; (800239c <HAL_I2C_EV_IRQHandler+0x930>)
 80021bc:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80021be:	f7fe fd83 	bl	8000cc8 <HAL_DMA_Abort_IT>
 80021c2:	2800      	cmp	r0, #0
 80021c4:	f43f aef9 	beq.w	8001fba <HAL_I2C_EV_IRQHandler+0x54e>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80021c8:	6823      	ldr	r3, [r4, #0]
 80021ca:	695a      	ldr	r2, [r3, #20]
 80021cc:	0652      	lsls	r2, r2, #25
 80021ce:	d506      	bpl.n	80021de <HAL_I2C_EV_IRQHandler+0x772>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 80021d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021d8:	6823      	ldr	r3, [r4, #0]
 80021da:	3201      	adds	r2, #1
 80021dc:	6262      	str	r2, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 80021de:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80021e0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 80021e2:	f022 0201 	bic.w	r2, r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 80021e6:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 80021e8:	601a      	str	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80021ea:	6d03      	ldr	r3, [r0, #80]	; 0x50
        hi2c->State = HAL_I2C_STATE_READY;
 80021ec:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80021f0:	4798      	blx	r3
 80021f2:	e6e2      	b.n	8001fba <HAL_I2C_EV_IRQHandler+0x54e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021f4:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80021f6:	2804      	cmp	r0, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021fc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80021fe:	f43f ae4d 	beq.w	8001e9c <HAL_I2C_EV_IRQHandler+0x430>
 8002202:	2802      	cmp	r0, #2
 8002204:	f43f ae4a 	beq.w	8001e9c <HAL_I2C_EV_IRQHandler+0x430>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e644      	b.n	8001e9c <HAL_I2C_EV_IRQHandler+0x430>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002212:	2a21      	cmp	r2, #33	; 0x21
 8002214:	f43f ac8c 	beq.w	8001b30 <HAL_I2C_EV_IRQHandler+0xc4>
 8002218:	e486      	b.n	8001b28 <HAL_I2C_EV_IRQHandler+0xbc>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800221a:	9101      	str	r1, [sp, #4]
 800221c:	695a      	ldr	r2, [r3, #20]
 800221e:	9201      	str	r2, [sp, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	9301      	str	r3, [sp, #4]
 8002224:	9b01      	ldr	r3, [sp, #4]
 8002226:	e44d      	b.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002228:	9202      	str	r2, [sp, #8]
 800222a:	695a      	ldr	r2, [r3, #20]
 800222c:	9202      	str	r2, [sp, #8]
 800222e:	699a      	ldr	r2, [r3, #24]
 8002230:	9202      	str	r2, [sp, #8]
 8002232:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800223a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800223c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800223e:	3301      	adds	r3, #1
 8002240:	6523      	str	r3, [r4, #80]	; 0x50
 8002242:	e43f      	b.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002244:	2801      	cmp	r0, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002246:	681a      	ldr	r2, [r3, #0]
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002248:	d07c      	beq.n	8002344 <HAL_I2C_EV_IRQHandler+0x8d8>
 800224a:	2810      	cmp	r0, #16
 800224c:	d07a      	beq.n	8002344 <HAL_I2C_EV_IRQHandler+0x8d8>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800224e:	2804      	cmp	r0, #4
 8002250:	f000 8108 	beq.w	8002464 <HAL_I2C_EV_IRQHandler+0x9f8>
 8002254:	2802      	cmp	r0, #2
 8002256:	f000 8105 	beq.w	8002464 <HAL_I2C_EV_IRQHandler+0x9f8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800225a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800225e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 8002264:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8002266:	6a62      	ldr	r2, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002268:	6821      	ldr	r1, [r4, #0]
    hi2c->XferCount--;
 800226a:	3b01      	subs	r3, #1
 800226c:	b29b      	uxth	r3, r3
 800226e:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002270:	690b      	ldr	r3, [r1, #16]
    hi2c->pBuffPtr++;
 8002272:	1c51      	adds	r1, r2, #1
 8002274:	6261      	str	r1, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002276:	7053      	strb	r3, [r2, #1]
    hi2c->XferCount--;
 8002278:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800227a:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr++;
 800227c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800227e:	3b01      	subs	r3, #1
 8002280:	b29b      	uxth	r3, r3
 8002282:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002284:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr++;
 8002286:	3201      	adds	r2, #1
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    hi2c->State = HAL_I2C_STATE_READY;
 800228c:	2020      	movs	r0, #32
    hi2c->pBuffPtr++;
 800228e:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002290:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002292:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002296:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800229a:	2b40      	cmp	r3, #64	; 0x40
 800229c:	d049      	beq.n	8002332 <HAL_I2C_EV_IRQHandler+0x8c6>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800229e:	2200      	movs	r2, #0
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80022a0:	2312      	movs	r3, #18
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80022a6:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80022a8:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80022aa:	f7ff fb75 	bl	8001998 <HAL_I2C_MasterRxCpltCallback>
 80022ae:	e409      	b.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80022b0:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 80022b4:	f000 80b5 	beq.w	8002422 <HAL_I2C_EV_IRQHandler+0x9b6>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80022b8:	2808      	cmp	r0, #8
 80022ba:	f000 80a2 	beq.w	8002402 <HAL_I2C_EV_IRQHandler+0x996>
 80022be:	2820      	cmp	r0, #32
 80022c0:	f000 809f 	beq.w	8002402 <HAL_I2C_EV_IRQHandler+0x996>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80022c4:	2d12      	cmp	r5, #18
 80022c6:	f000 8099 	beq.w	80023fc <HAL_I2C_EV_IRQHandler+0x990>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80022ca:	2810      	cmp	r0, #16
 80022cc:	d805      	bhi.n	80022da <HAL_I2C_EV_IRQHandler+0x86e>
 80022ce:	4a34      	ldr	r2, [pc, #208]	; (80023a0 <HAL_I2C_EV_IRQHandler+0x934>)
 80022d0:	fa22 f000 	lsr.w	r0, r2, r0
 80022d4:	07c0      	lsls	r0, r0, #31
 80022d6:	f100 80d4 	bmi.w	8002482 <HAL_I2C_EV_IRQHandler+0xa16>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022e0:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022e2:	2200      	movs	r2, #0
 80022e4:	9206      	str	r2, [sp, #24]
 80022e6:	695a      	ldr	r2, [r3, #20]
 80022e8:	9206      	str	r2, [sp, #24]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	9306      	str	r3, [sp, #24]
 80022ee:	9b06      	ldr	r3, [sp, #24]
 80022f0:	e6c6      	b.n	8002080 <HAL_I2C_EV_IRQHandler+0x614>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80022f2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80022f4:	2902      	cmp	r1, #2
 80022f6:	f43f abe5 	beq.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
 80022fa:	2a01      	cmp	r2, #1
 80022fc:	f63f abe2 	bhi.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002300:	681a      	ldr	r2, [r3, #0]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002302:	6a61      	ldr	r1, [r4, #36]	; 0x24
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002304:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002308:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002310:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	700b      	strb	r3, [r1, #0]
      hi2c->XferCount--;
 8002316:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002318:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800231a:	3b01      	subs	r3, #1
 800231c:	b29b      	uxth	r3, r3
      hi2c->State = HAL_I2C_STATE_READY;
 800231e:	2120      	movs	r1, #32
      hi2c->XferCount--;
 8002320:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8002322:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002326:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
      hi2c->pBuffPtr++;
 800232a:	3201      	adds	r2, #1
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800232c:	2b40      	cmp	r3, #64	; 0x40
      hi2c->pBuffPtr++;
 800232e:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002330:	d1b5      	bne.n	800229e <HAL_I2C_EV_IRQHandler+0x832>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002332:	2300      	movs	r3, #0
 8002334:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002338:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 800233a:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800233c:	f7ff fb38 	bl	80019b0 <HAL_I2C_MemRxCpltCallback>
 8002340:	f7ff bbc0 	b.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002344:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	e789      	b.n	8002260 <HAL_I2C_EV_IRQHandler+0x7f4>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002352:	605a      	str	r2, [r3, #4]
 8002354:	f7ff bbb6 	b.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002358:	2d08      	cmp	r5, #8
 800235a:	f43f aef8 	beq.w	800214e <HAL_I2C_EV_IRQHandler+0x6e2>
 800235e:	2d20      	cmp	r5, #32
 8002360:	f43f aef5 	beq.w	800214e <HAL_I2C_EV_IRQHandler+0x6e2>
 8002364:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8002368:	f43f aef1 	beq.w	800214e <HAL_I2C_EV_IRQHandler+0x6e2>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800236c:	685a      	ldr	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800236e:	2611      	movs	r6, #17
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002370:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002374:	2500      	movs	r5, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8002376:	2120      	movs	r1, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002378:	605a      	str	r2, [r3, #4]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800237a:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800237c:	6326      	str	r6, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800237e:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002382:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002386:	f7ff fb05 	bl	8001994 <HAL_I2C_MasterTxCpltCallback>
 800238a:	f7ff bb9b 	b.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
          HAL_I2C_MemTxCpltCallback(hi2c);
 800238e:	f7ff fb0d 	bl	80019ac <HAL_I2C_MemTxCpltCallback>
 8002392:	f7ff bb97 	b.w	8001ac4 <HAL_I2C_EV_IRQHandler+0x58>
 8002396:	bf00      	nop
 8002398:	80008081 	.word	0x80008081
 800239c:	080019bd 	.word	0x080019bd
 80023a0:	00010014 	.word	0x00010014
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80023a4:	2810      	cmp	r0, #16
 80023a6:	d920      	bls.n	80023ea <HAL_I2C_EV_IRQHandler+0x97e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ae:	601a      	str	r2, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023b6:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	0512      	lsls	r2, r2, #20
 80023bc:	d50d      	bpl.n	80023da <HAL_I2C_EV_IRQHandler+0x96e>
 80023be:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 80023c2:	d006      	beq.n	80023d2 <HAL_I2C_EV_IRQHandler+0x966>
 80023c4:	3801      	subs	r0, #1
 80023c6:	281f      	cmp	r0, #31
 80023c8:	d807      	bhi.n	80023da <HAL_I2C_EV_IRQHandler+0x96e>
 80023ca:	4a30      	ldr	r2, [pc, #192]	; (800248c <HAL_I2C_EV_IRQHandler+0xa20>)
 80023cc:	40c2      	lsrs	r2, r0
 80023ce:	07d6      	lsls	r6, r2, #31
 80023d0:	d503      	bpl.n	80023da <HAL_I2C_EV_IRQHandler+0x96e>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023d8:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023da:	2200      	movs	r2, #0
 80023dc:	9208      	str	r2, [sp, #32]
 80023de:	695a      	ldr	r2, [r3, #20]
 80023e0:	9208      	str	r2, [sp, #32]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	9308      	str	r3, [sp, #32]
 80023e6:	9b08      	ldr	r3, [sp, #32]
 80023e8:	e64a      	b.n	8002080 <HAL_I2C_EV_IRQHandler+0x614>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80023ea:	4a29      	ldr	r2, [pc, #164]	; (8002490 <HAL_I2C_EV_IRQHandler+0xa24>)
 80023ec:	40c2      	lsrs	r2, r0
 80023ee:	07d1      	lsls	r1, r2, #31
 80023f0:	d5da      	bpl.n	80023a8 <HAL_I2C_EV_IRQHandler+0x93c>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	e7dd      	b.n	80023b8 <HAL_I2C_EV_IRQHandler+0x94c>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80023fc:	2801      	cmp	r0, #1
 80023fe:	f43f af6c 	beq.w	80022da <HAL_I2C_EV_IRQHandler+0x86e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002402:	681a      	ldr	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002404:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800240a:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800240c:	9107      	str	r1, [sp, #28]
 800240e:	695a      	ldr	r2, [r3, #20]
 8002410:	9207      	str	r2, [sp, #28]
 8002412:	699a      	ldr	r2, [r3, #24]
 8002414:	9207      	str	r2, [sp, #28]
 8002416:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	e62e      	b.n	8002080 <HAL_I2C_EV_IRQHandler+0x614>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002428:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8002430:	d01c      	beq.n	800246c <HAL_I2C_EV_IRQHandler+0xa00>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002432:	681a      	ldr	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002434:	2100      	movs	r1, #0
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800243a:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800243c:	9104      	str	r1, [sp, #16]
 800243e:	695a      	ldr	r2, [r3, #20]
 8002440:	9204      	str	r2, [sp, #16]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	9304      	str	r3, [sp, #16]
 8002446:	9b04      	ldr	r3, [sp, #16]
 8002448:	e61a      	b.n	8002080 <HAL_I2C_EV_IRQHandler+0x614>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800244a:	6859      	ldr	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800244c:	2611      	movs	r6, #17
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800244e:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
        hi2c->State = HAL_I2C_STATE_READY;
 8002452:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002454:	6059      	str	r1, [r3, #4]
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002456:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002458:	6326      	str	r6, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800245a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800245e:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
 8002462:	e689      	b.n	8002178 <HAL_I2C_EV_IRQHandler+0x70c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002464:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	e6f9      	b.n	8002260 <HAL_I2C_EV_IRQHandler+0x7f4>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800246c:	9205      	str	r2, [sp, #20]
 800246e:	695a      	ldr	r2, [r3, #20]
 8002470:	9205      	str	r2, [sp, #20]
 8002472:	699a      	ldr	r2, [r3, #24]
 8002474:	9205      	str	r2, [sp, #20]
 8002476:	9a05      	ldr	r2, [sp, #20]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e5fe      	b.n	8002080 <HAL_I2C_EV_IRQHandler+0x614>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	e72a      	b.n	80022e2 <HAL_I2C_EV_IRQHandler+0x876>
 800248c:	80008081 	.word	0x80008081
 8002490:	00010014 	.word	0x00010014

08002494 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002496:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002498:	2800      	cmp	r0, #0
 800249a:	f000 8083 	beq.w	80025a4 <HAL_PCD_Init+0x110>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800249e:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 80024a2:	6805      	ldr	r5, [r0, #0]
 80024a4:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80024aa:	b333      	cbz	r3, 80024fa <HAL_PCD_Init+0x66>
 80024ac:	4628      	mov	r0, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024ae:	2303      	movs	r3, #3
 80024b0:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024b4:	6beb      	ldr	r3, [r5, #60]	; 0x3c

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024b6:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024b8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 80024bc:	bf08      	it	eq
 80024be:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 80024c0:	f001 fa32 	bl	8003928 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024c4:	f855 cb10 	ldr.w	ip, [r5], #16
 80024c8:	462f      	mov	r7, r5
 80024ca:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80024cc:	466e      	mov	r6, sp
 80024ce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80024d0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80024d2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80024d4:	e897 0003 	ldmia.w	r7, {r0, r1}
 80024d8:	e886 0003 	stmia.w	r6, {r0, r1}
 80024dc:	1d26      	adds	r6, r4, #4
 80024de:	4660      	mov	r0, ip
 80024e0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80024e4:	f001 f932 	bl	800374c <USB_CoreInit>
 80024e8:	4607      	mov	r7, r0
 80024ea:	b160      	cbz	r0, 8002506 <HAL_PCD_Init+0x72>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024ec:	2302      	movs	r3, #2
 80024ee:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 80024f2:	2501      	movs	r5, #1
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 80024f4:	4628      	mov	r0, r5
 80024f6:	b00b      	add	sp, #44	; 0x2c
 80024f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80024fa:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 80024fe:	f004 f987 	bl	8006810 <HAL_PCD_MspInit>
 8002502:	6820      	ldr	r0, [r4, #0]
 8002504:	e7d3      	b.n	80024ae <HAL_PCD_Init+0x1a>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002506:	4601      	mov	r1, r0
 8002508:	6820      	ldr	r0, [r4, #0]
 800250a:	f001 fa15 	bl	8003938 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800250e:	6860      	ldr	r0, [r4, #4]
 8002510:	b360      	cbz	r0, 800256c <HAL_PCD_Init+0xd8>
 8002512:	4639      	mov	r1, r7
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002514:	463a      	mov	r2, r7
    hpcd->IN_ep[i].is_in = 1U;
 8002516:	f04f 0c01 	mov.w	ip, #1
 800251a:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800251e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002522:	1c4f      	adds	r7, r1, #1
    hpcd->IN_ep[i].num = i;
 8002524:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002528:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800252c:	b2f9      	uxtb	r1, r7
 800252e:	4281      	cmp	r1, r0
    hpcd->IN_ep[i].is_in = 1U;
 8002530:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002538:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_len = 0U;
 800253c:	651a      	str	r2, [r3, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800253e:	d3ec      	bcc.n	800251a <HAL_PCD_Init+0x86>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002540:	2200      	movs	r2, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8002542:	4611      	mov	r1, r2
 8002544:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8002548:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800254c:	1c57      	adds	r7, r2, #1
    hpcd->OUT_ep[i].num = i;
 800254e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002552:	b2fa      	uxtb	r2, r7
 8002554:	4282      	cmp	r2, r0
    hpcd->OUT_ep[i].is_in = 0U;
 8002556:	f883 11fd 	strb.w	r1, [r3, #509]	; 0x1fd
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800255a:	f883 11ff 	strb.w	r1, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 800255e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002562:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002566:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800256a:	d3eb      	bcc.n	8002544 <HAL_PCD_Init+0xb0>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800256c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800256e:	466f      	mov	r7, sp
 8002570:	f8d4 c000 	ldr.w	ip, [r4]
 8002574:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002578:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800257a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800257e:	e887 0003 	stmia.w	r7, {r0, r1}
 8002582:	4660      	mov	r0, ip
 8002584:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002588:	f001 f9ee 	bl	8003968 <USB_DevInit>
 800258c:	4605      	mov	r5, r0
 800258e:	2800      	cmp	r0, #0
 8002590:	d1ac      	bne.n	80024ec <HAL_PCD_Init+0x58>
  hpcd->State = HAL_PCD_STATE_READY;
 8002592:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8002594:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  (void)USB_DevDisconnect(hpcd->Instance);
 8002598:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 800259a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 800259e:	f001 fdc7 	bl	8004130 <USB_DevDisconnect>
  return HAL_OK;
 80025a2:	e7a7      	b.n	80024f4 <HAL_PCD_Init+0x60>
    return HAL_ERROR;
 80025a4:	2501      	movs	r5, #1
}
 80025a6:	4628      	mov	r0, r5
 80025a8:	b00b      	add	sp, #44	; 0x2c
 80025aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025ac <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80025ac:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d01a      	beq.n	80025ea <HAL_PCD_Start+0x3e>
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025b4:	6a82      	ldr	r2, [r0, #40]	; 0x28
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025b6:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hpcd);
 80025b8:	2101      	movs	r1, #1
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025ba:	428a      	cmp	r2, r1
{
 80025bc:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80025be:	f880 13bc 	strb.w	r1, [r0, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025c2:	d00a      	beq.n	80025da <HAL_PCD_Start+0x2e>
 80025c4:	4604      	mov	r4, r0
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80025c6:	4618      	mov	r0, r3
 80025c8:	f001 fda6 	bl	8004118 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80025cc:	6820      	ldr	r0, [r4, #0]
 80025ce:	f001 f9a3 	bl	8003918 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80025d2:	2000      	movs	r0, #0
 80025d4:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
}
 80025d8:	bd10      	pop	{r4, pc}
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025da:	6982      	ldr	r2, [r0, #24]
 80025dc:	428a      	cmp	r2, r1
 80025de:	d0f1      	beq.n	80025c4 <HAL_PCD_Start+0x18>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80025e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80025e6:	639a      	str	r2, [r3, #56]	; 0x38
 80025e8:	e7ec      	b.n	80025c4 <HAL_PCD_Start+0x18>
  __HAL_LOCK(hpcd);
 80025ea:	2002      	movs	r0, #2
}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop

080025f0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025f4:	6806      	ldr	r6, [r0, #0]
{
 80025f6:	b089      	sub	sp, #36	; 0x24
 80025f8:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80025fa:	4630      	mov	r0, r6
 80025fc:	f001 fdd6 	bl	80041ac <USB_GetMode>
 8002600:	b110      	cbz	r0, 8002608 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 8002602:	b009      	add	sp, #36	; 0x24
 8002604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002608:	4605      	mov	r5, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800260a:	6820      	ldr	r0, [r4, #0]
 800260c:	f001 fd9c 	bl	8004148 <USB_ReadInterrupts>
 8002610:	2800      	cmp	r0, #0
 8002612:	d0f6      	beq.n	8002602 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002614:	6820      	ldr	r0, [r4, #0]
 8002616:	f001 fd97 	bl	8004148 <USB_ReadInterrupts>
 800261a:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800261e:	6820      	ldr	r0, [r4, #0]
 8002620:	bf1e      	ittt	ne
 8002622:	6943      	ldrne	r3, [r0, #20]
 8002624:	f003 0302 	andne.w	r3, r3, #2
 8002628:	6143      	strne	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800262a:	f001 fd8d 	bl	8004148 <USB_ReadInterrupts>
 800262e:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002632:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002634:	d011      	beq.n	800265a <HAL_PCD_IRQHandler+0x6a>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002636:	6983      	ldr	r3, [r0, #24]
 8002638:	f023 0310 	bic.w	r3, r3, #16
 800263c:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 800263e:	6a37      	ldr	r7, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002640:	f3c7 4343 	ubfx	r3, r7, #17, #4
 8002644:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002646:	f007 080f 	and.w	r8, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800264a:	d05d      	beq.n	8002708 <HAL_PCD_IRQHandler+0x118>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800264c:	2b06      	cmp	r3, #6
 800264e:	f000 8283 	beq.w	8002b58 <HAL_PCD_IRQHandler+0x568>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002652:	6983      	ldr	r3, [r0, #24]
 8002654:	f043 0310 	orr.w	r3, r3, #16
 8002658:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800265a:	f001 fd75 	bl	8004148 <USB_ReadInterrupts>
 800265e:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002662:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002664:	f040 81c6 	bne.w	80029f4 <HAL_PCD_IRQHandler+0x404>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002668:	f001 fd6e 	bl	8004148 <USB_ReadInterrupts>
 800266c:	f410 2f80 	tst.w	r0, #262144	; 0x40000
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002670:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002672:	f040 810a 	bne.w	800288a <HAL_PCD_IRQHandler+0x29a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002676:	f001 fd67 	bl	8004148 <USB_ReadInterrupts>
 800267a:	2800      	cmp	r0, #0
 800267c:	db64      	blt.n	8002748 <HAL_PCD_IRQHandler+0x158>
 800267e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002680:	f001 fd62 	bl	8004148 <USB_ReadInterrupts>
 8002684:	0501      	lsls	r1, r0, #20
 8002686:	d430      	bmi.n	80026ea <HAL_PCD_IRQHandler+0xfa>
 8002688:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800268a:	f001 fd5d 	bl	8004148 <USB_ReadInterrupts>
 800268e:	04c3      	lsls	r3, r0, #19
 8002690:	d46e      	bmi.n	8002770 <HAL_PCD_IRQHandler+0x180>
 8002692:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002694:	f001 fd58 	bl	8004148 <USB_ReadInterrupts>
 8002698:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 800269c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800269e:	f040 80dd 	bne.w	800285c <HAL_PCD_IRQHandler+0x26c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80026a2:	f001 fd51 	bl	8004148 <USB_ReadInterrupts>
 80026a6:	0707      	lsls	r7, r0, #28
 80026a8:	f100 80cf 	bmi.w	800284a <HAL_PCD_IRQHandler+0x25a>
 80026ac:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026ae:	f001 fd4b 	bl	8004148 <USB_ReadInterrupts>
 80026b2:	02c6      	lsls	r6, r0, #11
 80026b4:	f100 80bf 	bmi.w	8002836 <HAL_PCD_IRQHandler+0x246>
 80026b8:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026ba:	f001 fd45 	bl	8004148 <USB_ReadInterrupts>
 80026be:	0285      	lsls	r5, r0, #10
 80026c0:	f100 80af 	bmi.w	8002822 <HAL_PCD_IRQHandler+0x232>
 80026c4:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80026c6:	f001 fd3f 	bl	8004148 <USB_ReadInterrupts>
 80026ca:	0040      	lsls	r0, r0, #1
 80026cc:	f100 80a0 	bmi.w	8002810 <HAL_PCD_IRQHandler+0x220>
 80026d0:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80026d2:	f001 fd39 	bl	8004148 <USB_ReadInterrupts>
 80026d6:	0741      	lsls	r1, r0, #29
 80026d8:	d593      	bpl.n	8002602 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 80026da:	6823      	ldr	r3, [r4, #0]
 80026dc:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80026de:	076a      	lsls	r2, r5, #29
 80026e0:	d40d      	bmi.n	80026fe <HAL_PCD_IRQHandler+0x10e>
      hpcd->Instance->GOTGINT |= temp;
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	432a      	orrs	r2, r5
 80026e6:	605a      	str	r2, [r3, #4]
 80026e8:	e78b      	b.n	8002602 <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80026ea:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 80026ee:	07da      	lsls	r2, r3, #31
 80026f0:	d426      	bmi.n	8002740 <HAL_PCD_IRQHandler+0x150>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80026f2:	6820      	ldr	r0, [r4, #0]
 80026f4:	6943      	ldr	r3, [r0, #20]
 80026f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026fa:	6143      	str	r3, [r0, #20]
 80026fc:	e7c5      	b.n	800268a <HAL_PCD_IRQHandler+0x9a>
        HAL_PCD_DisconnectCallback(hpcd);
 80026fe:	4620      	mov	r0, r4
 8002700:	f004 f924 	bl	800694c <HAL_PCD_DisconnectCallback>
 8002704:	6823      	ldr	r3, [r4, #0]
 8002706:	e7ec      	b.n	80026e2 <HAL_PCD_IRQHandler+0xf2>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002708:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800270c:	421f      	tst	r7, r3
 800270e:	d0a0      	beq.n	8002652 <HAL_PCD_IRQHandler+0x62>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002710:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8002714:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8002718:	f3c7 170a 	ubfx	r7, r7, #4, #11
 800271c:	f8d8 1208 	ldr.w	r1, [r8, #520]	; 0x208
 8002720:	463a      	mov	r2, r7
 8002722:	4630      	mov	r0, r6
 8002724:	f001 fc7c 	bl	8004020 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002728:	f8d8 1208 	ldr.w	r1, [r8, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800272c:	f8d8 2214 	ldr.w	r2, [r8, #532]	; 0x214
 8002730:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002732:	4439      	add	r1, r7
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002734:	443a      	add	r2, r7
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002736:	f8c8 1208 	str.w	r1, [r8, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800273a:	f8c8 2214 	str.w	r2, [r8, #532]	; 0x214
 800273e:	e788      	b.n	8002652 <HAL_PCD_IRQHandler+0x62>
        HAL_PCD_SuspendCallback(hpcd);
 8002740:	4620      	mov	r0, r4
 8002742:	f004 f8db 	bl	80068fc <HAL_PCD_SuspendCallback>
 8002746:	e7d4      	b.n	80026f2 <HAL_PCD_IRQHandler+0x102>
      if (hpcd->LPM_State == LPM_L1)
 8002748:	f894 13f4 	ldrb.w	r1, [r4, #1012]	; 0x3f4
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800274c:	f8d6 2804 	ldr.w	r2, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8002750:	2901      	cmp	r1, #1
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002752:	f022 0201 	bic.w	r2, r2, #1
 8002756:	f8c6 2804 	str.w	r2, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800275a:	f000 81d1 	beq.w	8002b00 <HAL_PCD_IRQHandler+0x510>
        HAL_PCD_ResumeCallback(hpcd);
 800275e:	4620      	mov	r0, r4
 8002760:	f004 f8e4 	bl	800692c <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002764:	6820      	ldr	r0, [r4, #0]
 8002766:	6943      	ldr	r3, [r0, #20]
 8002768:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800276c:	6143      	str	r3, [r0, #20]
 800276e:	e787      	b.n	8002680 <HAL_PCD_IRQHandler+0x90>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002770:	f506 6700 	add.w	r7, r6, #2048	; 0x800
 8002774:	687b      	ldr	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002776:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002778:	f023 0301 	bic.w	r3, r3, #1
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800277c:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800277e:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002780:	f001 f9de 	bl	8003b40 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002784:	6860      	ldr	r0, [r4, #4]
 8002786:	b1f8      	cbz	r0, 80027c8 <HAL_PCD_IRQHandler+0x1d8>
 8002788:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800278c:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8002790:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002798:	601a      	str	r2, [r3, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80027a0:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80027a2:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027a6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80027aa:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80027ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027b2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b6:	3501      	adds	r5, #1
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027b8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027bc:	4285      	cmp	r5, r0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80027c2:	f103 0320 	add.w	r3, r3, #32
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c6:	d1e3      	bne.n	8002790 <HAL_PCD_IRQHandler+0x1a0>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80027c8:	69fb      	ldr	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80027ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80027cc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80027d0:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80027d2:	2a00      	cmp	r2, #0
 80027d4:	f000 8189 	beq.w	8002aea <HAL_PCD_IRQHandler+0x4fa>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80027d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027dc:	f043 030b 	orr.w	r3, r3, #11
 80027e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80027e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e6:	f043 030b 	orr.w	r3, r3, #11
 80027ea:	647b      	str	r3, [r7, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80027ec:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027f0:	7c21      	ldrb	r1, [r4, #16]
 80027f2:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80027f4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80027f8:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027fc:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002800:	f001 fce8 	bl	80041d4 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002804:	6820      	ldr	r0, [r4, #0]
 8002806:	6943      	ldr	r3, [r0, #20]
 8002808:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800280c:	6143      	str	r3, [r0, #20]
 800280e:	e741      	b.n	8002694 <HAL_PCD_IRQHandler+0xa4>
      HAL_PCD_ConnectCallback(hpcd);
 8002810:	4620      	mov	r0, r4
 8002812:	f004 f897 	bl	8006944 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002816:	6820      	ldr	r0, [r4, #0]
 8002818:	6943      	ldr	r3, [r0, #20]
 800281a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800281e:	6143      	str	r3, [r0, #20]
 8002820:	e757      	b.n	80026d2 <HAL_PCD_IRQHandler+0xe2>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002822:	4620      	mov	r0, r4
 8002824:	2100      	movs	r1, #0
 8002826:	f004 f885 	bl	8006934 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800282a:	6820      	ldr	r0, [r4, #0]
 800282c:	6943      	ldr	r3, [r0, #20]
 800282e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002832:	6143      	str	r3, [r0, #20]
 8002834:	e747      	b.n	80026c6 <HAL_PCD_IRQHandler+0xd6>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002836:	4620      	mov	r0, r4
 8002838:	2100      	movs	r1, #0
 800283a:	f004 f87f 	bl	800693c <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800283e:	6820      	ldr	r0, [r4, #0]
 8002840:	6943      	ldr	r3, [r0, #20]
 8002842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002846:	6143      	str	r3, [r0, #20]
 8002848:	e737      	b.n	80026ba <HAL_PCD_IRQHandler+0xca>
      HAL_PCD_SOFCallback(hpcd);
 800284a:	4620      	mov	r0, r4
 800284c:	f004 f83c 	bl	80068c8 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002850:	6820      	ldr	r0, [r4, #0]
 8002852:	6943      	ldr	r3, [r0, #20]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	6143      	str	r3, [r0, #20]
 800285a:	e728      	b.n	80026ae <HAL_PCD_IRQHandler+0xbe>
      (void)USB_ActivateSetup(hpcd->Instance);
 800285c:	f001 fcaa 	bl	80041b4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002860:	6820      	ldr	r0, [r4, #0]
 8002862:	f001 f97f 	bl	8003b64 <USB_GetDevSpeed>
 8002866:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002868:	6825      	ldr	r5, [r4, #0]
 800286a:	f000 fdeb 	bl	8003444 <HAL_RCC_GetHCLKFreq>
 800286e:	7b22      	ldrb	r2, [r4, #12]
 8002870:	4601      	mov	r1, r0
 8002872:	4628      	mov	r0, r5
 8002874:	f000 ffd4 	bl	8003820 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8002878:	4620      	mov	r0, r4
 800287a:	f004 f829 	bl	80068d0 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800287e:	6820      	ldr	r0, [r4, #0]
 8002880:	6943      	ldr	r3, [r0, #20]
 8002882:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002886:	6143      	str	r3, [r0, #20]
 8002888:	e70b      	b.n	80026a2 <HAL_PCD_IRQHandler+0xb2>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800288a:	f001 fc69 	bl	8004160 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 800288e:	4680      	mov	r8, r0
 8002890:	6820      	ldr	r0, [r4, #0]
 8002892:	f1b8 0f00 	cmp.w	r8, #0
 8002896:	f43f aeee 	beq.w	8002676 <HAL_PCD_IRQHandler+0x86>
 800289a:	f506 6310 	add.w	r3, r6, #2304	; 0x900
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800289e:	e9cd 6503 	strd	r6, r5, [sp, #12]
 80028a2:	46a3      	mov	fp, r4
      epnum = 0U;
 80028a4:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028a8:	461e      	mov	r6, r3
 80028aa:	e007      	b.n	80028bc <HAL_PCD_IRQHandler+0x2cc>
      while (ep_intr != 0U)
 80028ac:	ea5f 0858 	movs.w	r8, r8, lsr #1
        epnum++;
 80028b0:	f10a 0a01 	add.w	sl, sl, #1
 80028b4:	f10b 0b1c 	add.w	fp, fp, #28
      while (ep_intr != 0U)
 80028b8:	f000 80d3 	beq.w	8002a62 <HAL_PCD_IRQHandler+0x472>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80028bc:	f018 0f01 	tst.w	r8, #1
 80028c0:	d0f4      	beq.n	80028ac <HAL_PCD_IRQHandler+0x2bc>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028c2:	fa5f f98a 	uxtb.w	r9, sl
 80028c6:	4649      	mov	r1, r9
 80028c8:	f001 fc5c 	bl	8004184 <USB_ReadDevInEPInterrupt>
 80028cc:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80028ce:	07e8      	lsls	r0, r5, #31
 80028d0:	d517      	bpl.n	8002902 <HAL_PCD_IRQHandler+0x312>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028d2:	9b03      	ldr	r3, [sp, #12]
            if (hpcd->Init.dma_enable == 1U)
 80028d4:	6921      	ldr	r1, [r4, #16]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028d6:	f8d3 0834 	ldr.w	r0, [r3, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028da:	2701      	movs	r7, #1
 80028dc:	f00a 020f 	and.w	r2, sl, #15
 80028e0:	fa07 f202 	lsl.w	r2, r7, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028e4:	ea20 0002 	bic.w	r0, r0, r2
 80028e8:	eb06 124a 	add.w	r2, r6, sl, lsl #5
 80028ec:	f8c3 0834 	str.w	r0, [r3, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80028f0:	4613      	mov	r3, r2
            if (hpcd->Init.dma_enable == 1U)
 80028f2:	42b9      	cmp	r1, r7
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80028f4:	609f      	str	r7, [r3, #8]
            if (hpcd->Init.dma_enable == 1U)
 80028f6:	f000 810a 	beq.w	8002b0e <HAL_PCD_IRQHandler+0x51e>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80028fa:	4649      	mov	r1, r9
 80028fc:	4620      	mov	r0, r4
 80028fe:	f003 ffd9 	bl	80068b4 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002902:	0729      	lsls	r1, r5, #28
 8002904:	d503      	bpl.n	800290e <HAL_PCD_IRQHandler+0x31e>
 8002906:	eb06 134a 	add.w	r3, r6, sl, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800290a:	2208      	movs	r2, #8
 800290c:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800290e:	06ea      	lsls	r2, r5, #27
 8002910:	d503      	bpl.n	800291a <HAL_PCD_IRQHandler+0x32a>
 8002912:	eb06 134a 	add.w	r3, r6, sl, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002916:	2210      	movs	r2, #16
 8002918:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800291a:	066b      	lsls	r3, r5, #25
 800291c:	d503      	bpl.n	8002926 <HAL_PCD_IRQHandler+0x336>
 800291e:	eb06 134a 	add.w	r3, r6, sl, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002922:	2240      	movs	r2, #64	; 0x40
 8002924:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002926:	07af      	lsls	r7, r5, #30
 8002928:	d503      	bpl.n	8002932 <HAL_PCD_IRQHandler+0x342>
 800292a:	eb06 134a 	add.w	r3, r6, sl, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800292e:	2202      	movs	r2, #2
 8002930:	609a      	str	r2, [r3, #8]
 8002932:	6827      	ldr	r7, [r4, #0]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002934:	062d      	lsls	r5, r5, #24
 8002936:	4638      	mov	r0, r7
 8002938:	d5b8      	bpl.n	80028ac <HAL_PCD_IRQHandler+0x2bc>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 800293a:	e9db 1314 	ldrd	r1, r3, [fp, #80]	; 0x50
 800293e:	428b      	cmp	r3, r1
 8002940:	d8b4      	bhi.n	80028ac <HAL_PCD_IRQHandler+0x2bc>
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002942:	f507 6210 	add.w	r2, r7, #2304	; 0x900
 8002946:	eb02 124a 	add.w	r2, r2, sl, lsl #5
 800294a:	4610      	mov	r0, r2
  if (len > ep->maxpacket)
 800294c:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002950:	9005      	str	r0, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 8002952:	1acd      	subs	r5, r1, r3
  len32b = (len + 3U) / 4U;
 8002954:	4295      	cmp	r5, r2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002956:	6980      	ldr	r0, [r0, #24]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002958:	9706      	str	r7, [sp, #24]
  len32b = (len + 3U) / 4U;
 800295a:	46ac      	mov	ip, r5
 800295c:	bf28      	it	cs
 800295e:	4694      	movcs	ip, r2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002960:	b280      	uxth	r0, r0
  len32b = (len + 3U) / 4U;
 8002962:	f10c 0c03 	add.w	ip, ip, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002966:	ebb0 0f9c 	cmp.w	r0, ip, lsr #2
 800296a:	d331      	bcc.n	80029d0 <HAL_PCD_IRQHandler+0x3e0>
 800296c:	428b      	cmp	r3, r1
 800296e:	d233      	bcs.n	80029d8 <HAL_PCD_IRQHandler+0x3e8>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002970:	b391      	cbz	r1, 80029d8 <HAL_PCD_IRQHandler+0x3e8>
 8002972:	f8cd 801c 	str.w	r8, [sp, #28]
 8002976:	f8db 1048 	ldr.w	r1, [fp, #72]	; 0x48
 800297a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800297e:	e007      	b.n	8002990 <HAL_PCD_IRQHandler+0x3a0>
 8002980:	f8db 5050 	ldr.w	r5, [fp, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002984:	429d      	cmp	r5, r3
 8002986:	f240 812b 	bls.w	8002be0 <HAL_PCD_IRQHandler+0x5f0>
 800298a:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 800298e:	1aed      	subs	r5, r5, r3
 8002990:	4295      	cmp	r5, r2
 8002992:	bf28      	it	cs
 8002994:	4615      	movcs	r5, r2
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002996:	7c23      	ldrb	r3, [r4, #16]
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	464a      	mov	r2, r9
 800299c:	b2ab      	uxth	r3, r5
 800299e:	4638      	mov	r0, r7
 80029a0:	f001 fb28 	bl	8003ff4 <USB_WritePacket>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029a4:	f8d8 2018 	ldr.w	r2, [r8, #24]
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 80029a8:	f8db 1048 	ldr.w	r1, [fp, #72]	; 0x48
    ep->xfer_count += len;
 80029ac:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
    ep->xfer_buff  += len;
 80029b0:	4429      	add	r1, r5
    ep->xfer_count += len;
 80029b2:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029b4:	b292      	uxth	r2, r2
    len32b = (len + 3U) / 4U;
 80029b6:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029b8:	ebb2 0f95 	cmp.w	r2, r5, lsr #2
    ep->xfer_buff  += len;
 80029bc:	f8cb 1048 	str.w	r1, [fp, #72]	; 0x48
    ep->xfer_count += len;
 80029c0:	f8cb 3054 	str.w	r3, [fp, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029c4:	d2dc      	bcs.n	8002980 <HAL_PCD_IRQHandler+0x390>
 80029c6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80029ca:	6827      	ldr	r7, [r4, #0]
 80029cc:	f8db 1050 	ldr.w	r1, [fp, #80]	; 0x50
  }

  if (ep->xfer_len <= ep->xfer_count)
 80029d0:	4299      	cmp	r1, r3
 80029d2:	4638      	mov	r0, r7
 80029d4:	f63f af6a 	bhi.w	80028ac <HAL_PCD_IRQHandler+0x2bc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029d8:	9b06      	ldr	r3, [sp, #24]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029da:	2001      	movs	r0, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029dc:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029e0:	f00a 010f 	and.w	r1, sl, #15
 80029e4:	fa00 f101 	lsl.w	r1, r0, r1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029e8:	ea22 0201 	bic.w	r2, r2, r1
 80029ec:	4638      	mov	r0, r7
 80029ee:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 80029f2:	e75b      	b.n	80028ac <HAL_PCD_IRQHandler+0x2bc>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80029f4:	f001 fbac 	bl	8004150 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 80029f8:	4607      	mov	r7, r0
 80029fa:	6820      	ldr	r0, [r4, #0]
 80029fc:	2f00      	cmp	r7, #0
 80029fe:	f43f ae33 	beq.w	8002668 <HAL_PCD_IRQHandler+0x78>
      epnum = 0U;
 8002a02:	f04f 0800 	mov.w	r8, #0
 8002a06:	f506 6a30 	add.w	sl, r6, #2816	; 0xb00
 8002a0a:	e004      	b.n	8002a16 <HAL_PCD_IRQHandler+0x426>
      while (ep_intr != 0U)
 8002a0c:	087f      	lsrs	r7, r7, #1
        epnum++;
 8002a0e:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 8002a12:	f43f ae29 	beq.w	8002668 <HAL_PCD_IRQHandler+0x78>
        if ((ep_intr & 0x1U) != 0U)
 8002a16:	07fb      	lsls	r3, r7, #31
 8002a18:	d5f8      	bpl.n	8002a0c <HAL_PCD_IRQHandler+0x41c>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a1a:	fa5f fb88 	uxtb.w	fp, r8
 8002a1e:	4659      	mov	r1, fp
 8002a20:	f001 fba6 	bl	8004170 <USB_ReadDevOutEPInterrupt>
 8002a24:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a26:	f019 0f01 	tst.w	r9, #1
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a2a:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a2c:	d138      	bne.n	8002aa0 <HAL_PCD_IRQHandler+0x4b0>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a2e:	f019 0f08 	tst.w	r9, #8
 8002a32:	d119      	bne.n	8002a68 <HAL_PCD_IRQHandler+0x478>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a34:	f019 0f10 	tst.w	r9, #16
 8002a38:	d003      	beq.n	8002a42 <HAL_PCD_IRQHandler+0x452>
 8002a3a:	eb0a 1348 	add.w	r3, sl, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a3e:	2210      	movs	r2, #16
 8002a40:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a42:	f019 0f20 	tst.w	r9, #32
 8002a46:	d003      	beq.n	8002a50 <HAL_PCD_IRQHandler+0x460>
 8002a48:	eb0a 1348 	add.w	r3, sl, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a50:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 8002a54:	d0da      	beq.n	8002a0c <HAL_PCD_IRQHandler+0x41c>
 8002a56:	eb0a 1348 	add.w	r3, sl, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	e7d4      	b.n	8002a0c <HAL_PCD_IRQHandler+0x41c>
 8002a62:	e9dd 6503 	ldrd	r6, r5, [sp, #12]
 8002a66:	e606      	b.n	8002676 <HAL_PCD_IRQHandler+0x86>
 8002a68:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002a6c:	eb0a 0302 	add.w	r3, sl, r2
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a70:	2108      	movs	r1, #8
 8002a72:	6099      	str	r1, [r3, #8]
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a74:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8002a78:	4413      	add	r3, r2
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a7a:	6c02      	ldr	r2, [r0, #64]	; 0x40

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a7c:	485f      	ldr	r0, [pc, #380]	; (8002bfc <HAL_PCD_IRQHandler+0x60c>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a7e:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a80:	4282      	cmp	r2, r0
 8002a82:	d957      	bls.n	8002b34 <HAL_PCD_IRQHandler+0x544>
 8002a84:	040a      	lsls	r2, r1, #16
 8002a86:	d502      	bpl.n	8002a8e <HAL_PCD_IRQHandler+0x49e>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a88:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a8c:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f003 ff00 	bl	8006894 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002a94:	6921      	ldr	r1, [r4, #16]
 8002a96:	2901      	cmp	r1, #1
 8002a98:	f000 80a6 	beq.w	8002be8 <HAL_PCD_IRQHandler+0x5f8>
 8002a9c:	6820      	ldr	r0, [r4, #0]
 8002a9e:	e7c9      	b.n	8002a34 <HAL_PCD_IRQHandler+0x444>
 8002aa0:	ea4f 1348 	mov.w	r3, r8, lsl #5
 8002aa4:	eb0a 0203 	add.w	r2, sl, r3
  if (hpcd->Init.dma_enable == 1U)
 8002aa8:	6921      	ldr	r1, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002aaa:	f500 6e30 	add.w	lr, r0, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002aae:	f04f 0c01 	mov.w	ip, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ab2:	4473      	add	r3, lr
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ab4:	f8c2 c008 	str.w	ip, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 8002ab8:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002aba:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002abe:	689a      	ldr	r2, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 8002ac0:	d03d      	beq.n	8002b3e <HAL_PCD_IRQHandler+0x54e>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002ac2:	494f      	ldr	r1, [pc, #316]	; (8002c00 <HAL_PCD_IRQHandler+0x610>)
 8002ac4:	458c      	cmp	ip, r1
 8002ac6:	d05a      	beq.n	8002b7e <HAL_PCD_IRQHandler+0x58e>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ac8:	f1b8 0f00 	cmp.w	r8, #0
 8002acc:	d107      	bne.n	8002ade <HAL_PCD_IRQHandler+0x4ee>
 8002ace:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8002ad2:	b923      	cbnz	r3, 8002ade <HAL_PCD_IRQHandler+0x4ee>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002ad4:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002ad8:	4641      	mov	r1, r8
 8002ada:	f001 fb7b 	bl	80041d4 <USB_EP0_OutStart>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ade:	4620      	mov	r0, r4
 8002ae0:	4659      	mov	r1, fp
 8002ae2:	f003 fedd 	bl	80068a0 <HAL_PCD_DataOutStageCallback>
 8002ae6:	6820      	ldr	r0, [r4, #0]
 8002ae8:	e7a1      	b.n	8002a2e <HAL_PCD_IRQHandler+0x43e>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002af0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002af4:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f043 030b 	orr.w	r3, r3, #11
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	e675      	b.n	80027ec <HAL_PCD_IRQHandler+0x1fc>
        hpcd->LPM_State = LPM_L0;
 8002b00:	2100      	movs	r1, #0
 8002b02:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b06:	4620      	mov	r0, r4
 8002b08:	f000 f9ee 	bl	8002ee8 <HAL_PCDEx_LPM_Callback>
 8002b0c:	e62a      	b.n	8002764 <HAL_PCD_IRQHandler+0x174>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b0e:	e9db 2311 	ldrd	r2, r3, [fp, #68]	; 0x44
 8002b12:	4413      	add	r3, r2
 8002b14:	f8cb 3048 	str.w	r3, [fp, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b18:	f1ba 0f00 	cmp.w	sl, #0
 8002b1c:	f47f aeed 	bne.w	80028fa <HAL_PCD_IRQHandler+0x30a>
 8002b20:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f47f aee9 	bne.w	80028fa <HAL_PCD_IRQHandler+0x30a>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b28:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002b2c:	6820      	ldr	r0, [r4, #0]
 8002b2e:	f001 fb51 	bl	80041d4 <USB_EP0_OutStart>
 8002b32:	e6e2      	b.n	80028fa <HAL_PCD_IRQHandler+0x30a>
  HAL_PCD_SetupStageCallback(hpcd);
 8002b34:	4620      	mov	r0, r4
 8002b36:	f003 fead 	bl	8006894 <HAL_PCD_SetupStageCallback>
 8002b3a:	6820      	ldr	r0, [r4, #0]
 8002b3c:	e77a      	b.n	8002a34 <HAL_PCD_IRQHandler+0x444>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002b3e:	0711      	lsls	r1, r2, #28
 8002b40:	d524      	bpl.n	8002b8c <HAL_PCD_IRQHandler+0x59c>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b42:	492e      	ldr	r1, [pc, #184]	; (8002bfc <HAL_PCD_IRQHandler+0x60c>)
 8002b44:	458c      	cmp	ip, r1
 8002b46:	f67f af72 	bls.w	8002a2e <HAL_PCD_IRQHandler+0x43e>
 8002b4a:	0412      	lsls	r2, r2, #16
 8002b4c:	f57f af6f 	bpl.w	8002a2e <HAL_PCD_IRQHandler+0x43e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b50:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b54:	609a      	str	r2, [r3, #8]
 8002b56:	e76a      	b.n	8002a2e <HAL_PCD_IRQHandler+0x43e>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b58:	2208      	movs	r2, #8
 8002b5a:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8002b5e:	4630      	mov	r0, r6
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b60:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b64:	f001 fa5c 	bl	8004020 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b68:	eb04 0288 	add.w	r2, r4, r8, lsl #2
 8002b6c:	f3c7 130a 	ubfx	r3, r7, #4, #11
 8002b70:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8002b74:	6820      	ldr	r0, [r4, #0]
 8002b76:	440b      	add	r3, r1
 8002b78:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8002b7c:	e569      	b.n	8002652 <HAL_PCD_IRQHandler+0x62>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002b7e:	0411      	lsls	r1, r2, #16
 8002b80:	d4e6      	bmi.n	8002b50 <HAL_PCD_IRQHandler+0x560>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b82:	0691      	lsls	r1, r2, #26
 8002b84:	d5ab      	bpl.n	8002ade <HAL_PCD_IRQHandler+0x4ee>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b86:	2220      	movs	r2, #32
 8002b88:	609a      	str	r2, [r3, #8]
 8002b8a:	e7a8      	b.n	8002ade <HAL_PCD_IRQHandler+0x4ee>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002b8c:	0691      	lsls	r1, r2, #26
 8002b8e:	d431      	bmi.n	8002bf4 <HAL_PCD_IRQHandler+0x604>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002b90:	f012 0f28 	tst.w	r2, #40	; 0x28
 8002b94:	f47f af4b 	bne.w	8002a2e <HAL_PCD_IRQHandler+0x43e>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b98:	4918      	ldr	r1, [pc, #96]	; (8002bfc <HAL_PCD_IRQHandler+0x60c>)
 8002b9a:	458c      	cmp	ip, r1
 8002b9c:	d901      	bls.n	8002ba2 <HAL_PCD_IRQHandler+0x5b2>
 8002b9e:	0412      	lsls	r2, r2, #16
 8002ba0:	d4d6      	bmi.n	8002b50 <HAL_PCD_IRQHandler+0x560>
 8002ba2:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
 8002ba6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002baa:	6919      	ldr	r1, [r3, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 8002bac:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002bb0:	f3c1 0112 	ubfx	r1, r1, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002bb4:	eba3 0c01 	sub.w	ip, r3, r1
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002bb8:	f8d2 1208 	ldr.w	r1, [r2, #520]	; 0x208
        hpcd->OUT_ep[epnum].xfer_count =
 8002bbc:	f8c2 c214 	str.w	ip, [r2, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002bc0:	440b      	add	r3, r1
 8002bc2:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002bc6:	f1b8 0f00 	cmp.w	r8, #0
 8002bca:	d188      	bne.n	8002ade <HAL_PCD_IRQHandler+0x4ee>
 8002bcc:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d184      	bne.n	8002ade <HAL_PCD_IRQHandler+0x4ee>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bd4:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002bd8:	2101      	movs	r1, #1
 8002bda:	f001 fafb 	bl	80041d4 <USB_EP0_OutStart>
 8002bde:	e77e      	b.n	8002ade <HAL_PCD_IRQHandler+0x4ee>
 8002be0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8002be4:	6827      	ldr	r7, [r4, #0]
 8002be6:	e6f7      	b.n	80029d8 <HAL_PCD_IRQHandler+0x3e8>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002be8:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002bec:	6820      	ldr	r0, [r4, #0]
 8002bee:	f001 faf1 	bl	80041d4 <USB_EP0_OutStart>
 8002bf2:	e753      	b.n	8002a9c <HAL_PCD_IRQHandler+0x4ac>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	609a      	str	r2, [r3, #8]
 8002bf8:	e719      	b.n	8002a2e <HAL_PCD_IRQHandler+0x43e>
 8002bfa:	bf00      	nop
 8002bfc:	4f54300a 	.word	0x4f54300a
 8002c00:	4f54310a 	.word	0x4f54310a

08002c04 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8002c04:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8002c08:	2a01      	cmp	r2, #1
 8002c0a:	d00d      	beq.n	8002c28 <HAL_PCD_SetAddress+0x24>
{
 8002c0c:	b510      	push	{r4, lr}
 8002c0e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002c10:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8002c12:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  __HAL_LOCK(hpcd);
 8002c16:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c1a:	6800      	ldr	r0, [r0, #0]
 8002c1c:	f001 fa6c 	bl	80040f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c20:	2000      	movs	r0, #0
 8002c22:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8002c26:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002c28:	2002      	movs	r0, #2
}
 8002c2a:	4770      	bx	lr

08002c2c <HAL_PCD_EP_Open>:
{
 8002c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2e:	f001 050f 	and.w	r5, r1, #15
 8002c32:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
    ep->is_in = 1U;
 8002c36:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 8002c3a:	0609      	lsls	r1, r1, #24
 8002c3c:	ea4f 0484 	mov.w	r4, r4, lsl #2
    ep->is_in = 1U;
 8002c40:	eb00 0686 	add.w	r6, r0, r6, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8002c44:	d41e      	bmi.n	8002c84 <HAL_PCD_EP_Open+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c46:	f504 74fe 	add.w	r4, r4, #508	; 0x1fc
    ep->is_in = 0U;
 8002c4a:	2700      	movs	r7, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c4c:	1901      	adds	r1, r0, r4
    ep->is_in = 0U;
 8002c4e:	f886 71fd 	strb.w	r7, [r6, #509]	; 0x1fd
  if (ep->is_in != 0U)
 8002c52:	784c      	ldrb	r4, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c54:	700d      	strb	r5, [r1, #0]
  ep->maxpacket = ep_mps;
 8002c56:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8002c58:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8002c5a:	b104      	cbz	r4, 8002c5e <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 8002c5c:	80cd      	strh	r5, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8002c5e:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8002c60:	bf04      	itt	eq
 8002c62:	2300      	moveq	r3, #0
 8002c64:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8002c66:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d010      	beq.n	8002c90 <HAL_PCD_EP_Open+0x64>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	4604      	mov	r4, r0
 8002c72:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c76:	6800      	ldr	r0, [r0, #0]
 8002c78:	f000 ff80 	bl	8003b7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8002c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c84:	343c      	adds	r4, #60	; 0x3c
    ep->is_in = 1U;
 8002c86:	2701      	movs	r7, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c88:	1901      	adds	r1, r0, r4
    ep->is_in = 1U;
 8002c8a:	f886 703d 	strb.w	r7, [r6, #61]	; 0x3d
 8002c8e:	e7e0      	b.n	8002c52 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8002c90:	2002      	movs	r0, #2
}
 8002c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c94 <HAL_PCD_EP_Close>:
{
 8002c94:	f001 020f 	and.w	r2, r1, #15
 8002c98:	b538      	push	{r3, r4, r5, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 8002c9a:	0609      	lsls	r1, r1, #24
 8002c9c:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
    ep->is_in = 1U;
 8002ca0:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
 8002ca4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002ca8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8002cac:	d415      	bmi.n	8002cda <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cae:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002cb2:	18c1      	adds	r1, r0, r3
    ep->is_in = 0U;
 8002cb4:	2500      	movs	r5, #0
 8002cb6:	f884 51fd 	strb.w	r5, [r4, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002cba:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002cbc:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d014      	beq.n	8002cee <HAL_PCD_EP_Close+0x5a>
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	4604      	mov	r4, r0
 8002cc8:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ccc:	6800      	ldr	r0, [r0, #0]
 8002cce:	f000 ff99 	bl	8003c04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8002cd8:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cda:	333c      	adds	r3, #60	; 0x3c
 8002cdc:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 8002cde:	2501      	movs	r5, #1
 8002ce0:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ce4:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002ce6:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d1ea      	bne.n	8002cc4 <HAL_PCD_EP_Close+0x30>
 8002cee:	2002      	movs	r0, #2
}
 8002cf0:	bd38      	pop	{r3, r4, r5, pc}
 8002cf2:	bf00      	nop

08002cf4 <HAL_PCD_EP_Receive>:
{
 8002cf4:	b538      	push	{r3, r4, r5, lr}
 8002cf6:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_buff = pBuf;
 8002cfa:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
 8002cfe:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep->xfer_count = 0U;
 8002d02:	2100      	movs	r1, #0
  ep->xfer_buff = pBuf;
 8002d04:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8002d08:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8002d0c:	f884 11fd 	strb.w	r1, [r4, #509]	; 0x1fd
  ep->xfer_len = len;
 8002d10:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d14:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8002d18:	6903      	ldr	r3, [r0, #16]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d1a:	211c      	movs	r1, #28
 8002d1c:	fb01 0105 	mla	r1, r1, r5, r0
  if (hpcd->Init.dma_enable == 1U)
 8002d20:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8002d22:	bf08      	it	eq
 8002d24:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d28:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
 8002d2c:	6800      	ldr	r0, [r0, #0]
 8002d2e:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d30:	b11d      	cbz	r5, 8002d3a <HAL_PCD_EP_Receive+0x46>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d32:	f000 ffc7 	bl	8003cc4 <USB_EPStartXfer>
}
 8002d36:	2000      	movs	r0, #0
 8002d38:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d3a:	f001 f8d5 	bl	8003ee8 <USB_EP0StartXfer>
}
 8002d3e:	2000      	movs	r0, #0
 8002d40:	bd38      	pop	{r3, r4, r5, pc}
 8002d42:	bf00      	nop

08002d44 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d44:	f001 010f 	and.w	r1, r1, #15
 8002d48:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002d4c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8002d50:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop

08002d58 <HAL_PCD_EP_Transmit>:
{
 8002d58:	b570      	push	{r4, r5, r6, lr}
 8002d5a:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_buff = pBuf;
 8002d5e:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
 8002d62:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep->is_in = 1U;
 8002d66:	2101      	movs	r1, #1
  ep->xfer_count = 0U;
 8002d68:	2600      	movs	r6, #0
  ep->xfer_buff = pBuf;
 8002d6a:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 8002d6c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  ep->xfer_len = len;
 8002d70:	6523      	str	r3, [r4, #80]	; 0x50
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d72:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8002d76:	6566      	str	r6, [r4, #84]	; 0x54
  if (hpcd->Init.dma_enable == 1U)
 8002d78:	6903      	ldr	r3, [r0, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d7a:	211c      	movs	r1, #28
 8002d7c:	fb01 0105 	mla	r1, r1, r5, r0
  if (hpcd->Init.dma_enable == 1U)
 8002d80:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8002d82:	bf08      	it	eq
 8002d84:	64e2      	streq	r2, [r4, #76]	; 0x4c
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d86:	313c      	adds	r1, #60	; 0x3c
 8002d88:	6800      	ldr	r0, [r0, #0]
 8002d8a:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d8c:	b11d      	cbz	r5, 8002d96 <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d8e:	f000 ff99 	bl	8003cc4 <USB_EPStartXfer>
}
 8002d92:	2000      	movs	r0, #0
 8002d94:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d96:	f001 f8a7 	bl	8003ee8 <USB_EP0StartXfer>
}
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	bd70      	pop	{r4, r5, r6, pc}
 8002d9e:	bf00      	nop

08002da0 <HAL_PCD_EP_SetStall>:
{
 8002da0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002da2:	6843      	ldr	r3, [r0, #4]
 8002da4:	f001 050f 	and.w	r5, r1, #15
 8002da8:	429d      	cmp	r5, r3
 8002daa:	d81f      	bhi.n	8002dec <HAL_PCD_EP_SetStall+0x4c>
  if ((0x80U & ep_addr) == 0x80U)
 8002dac:	060b      	lsls	r3, r1, #24
 8002dae:	d41f      	bmi.n	8002df0 <HAL_PCD_EP_SetStall+0x50>
    ep->is_in = 0U;
 8002db0:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8002db4:	241c      	movs	r4, #28
 8002db6:	fb04 0101 	mla	r1, r4, r1, r0
    ep->is_in = 0U;
 8002dba:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002dbe:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8002dc0:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8002dc4:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8002dc8:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dca:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8002dcc:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8002dce:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d01e      	beq.n	8002e14 <HAL_PCD_EP_SetStall+0x74>
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ddc:	6800      	ldr	r0, [r0, #0]
 8002dde:	f001 f933 	bl	8004048 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002de2:	b1cd      	cbz	r5, 8002e18 <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 8002de4:	2000      	movs	r0, #0
 8002de6:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8002dea:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002dec:	2001      	movs	r0, #1
}
 8002dee:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8002df0:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002df4:	211c      	movs	r1, #28
 8002df6:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8002dfa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002dfe:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e00:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8002e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 8002e06:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e08:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8002e0a:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8002e0c:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d1e0      	bne.n	8002dd6 <HAL_PCD_EP_SetStall+0x36>
 8002e14:	2002      	movs	r0, #2
}
 8002e16:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e18:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002e1c:	7c21      	ldrb	r1, [r4, #16]
 8002e1e:	6820      	ldr	r0, [r4, #0]
 8002e20:	f001 f9d8 	bl	80041d4 <USB_EP0_OutStart>
 8002e24:	e7de      	b.n	8002de4 <HAL_PCD_EP_SetStall+0x44>
 8002e26:	bf00      	nop

08002e28 <HAL_PCD_EP_ClrStall>:
{
 8002e28:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e2a:	6843      	ldr	r3, [r0, #4]
 8002e2c:	f001 020f 	and.w	r2, r1, #15
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d821      	bhi.n	8002e78 <HAL_PCD_EP_ClrStall+0x50>
 8002e34:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
    ep->is_in = 1U;
 8002e38:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8002e3c:	0609      	lsls	r1, r1, #24
 8002e3e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    ep->is_in = 1U;
 8002e42:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  if ((0x80U & ep_addr) == 0x80U)
 8002e46:	d419      	bmi.n	8002e7c <HAL_PCD_EP_ClrStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e48:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002e4c:	18c1      	adds	r1, r0, r3
    ep->is_in = 0U;
 8002e4e:	2500      	movs	r5, #0
 8002e50:	f884 51fd 	strb.w	r5, [r4, #509]	; 0x1fd
  ep->is_stall = 0U;
 8002e54:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e56:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8002e58:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8002e5a:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d018      	beq.n	8002e94 <HAL_PCD_EP_ClrStall+0x6c>
 8002e62:	4604      	mov	r4, r0
 8002e64:	2301      	movs	r3, #1
 8002e66:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e6a:	6800      	ldr	r0, [r0, #0]
 8002e6c:	f001 f918 	bl	80040a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e70:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8002e74:	4628      	mov	r0, r5
}
 8002e76:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002e78:	2001      	movs	r0, #1
}
 8002e7a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e7c:	333c      	adds	r3, #60	; 0x3c
 8002e7e:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 8002e80:	2501      	movs	r5, #1
 8002e82:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  ep->is_stall = 0U;
 8002e86:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e88:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8002e8a:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8002e8c:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d1e6      	bne.n	8002e62 <HAL_PCD_EP_ClrStall+0x3a>
 8002e94:	2002      	movs	r0, #2
}
 8002e96:	bd38      	pop	{r3, r4, r5, pc}

08002e98 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002e98:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002e9a:	6805      	ldr	r5, [r0, #0]
 8002e9c:	0412      	lsls	r2, r2, #16
 8002e9e:	6a6c      	ldr	r4, [r5, #36]	; 0x24

  if (fifo == 0U)
 8002ea0:	b1c1      	cbz	r1, 8002ed4 <HAL_PCDEx_SetTxFiFo+0x3c>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002ea2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8002ea4:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002ea6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002eaa:	d00b      	beq.n	8002ec4 <HAL_PCDEx_SetTxFiFo+0x2c>
 8002eac:	2300      	movs	r3, #0
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002eae:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8002eb2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8002eb6:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002eb8:	6840      	ldr	r0, [r0, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	428b      	cmp	r3, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002ebe:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002ec2:	d3f4      	bcc.n	8002eae <HAL_PCDEx_SetTxFiFo+0x16>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002ec4:	3140      	adds	r1, #64	; 0x40
 8002ec6:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8002eca:	4314      	orrs	r4, r2
 8002ecc:	604c      	str	r4, [r1, #4]
  }

  return HAL_OK;
}
 8002ece:	2000      	movs	r0, #0
 8002ed0:	bc30      	pop	{r4, r5}
 8002ed2:	4770      	bx	lr
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002ed4:	4314      	orrs	r4, r2
 8002ed6:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8002ed8:	2000      	movs	r0, #0
 8002eda:	bc30      	pop	{r4, r5}
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop

08002ee0 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8002ee0:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8002ee2:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8002ee4:	6259      	str	r1, [r3, #36]	; 0x24
}
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop

08002eec <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eec:	2800      	cmp	r0, #0
 8002eee:	f000 8132 	beq.w	8003156 <HAL_RCC_OscConfig+0x26a>
{
 8002ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ef6:	6803      	ldr	r3, [r0, #0]
 8002ef8:	07dd      	lsls	r5, r3, #31
{
 8002efa:	b082      	sub	sp, #8
 8002efc:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002efe:	d52f      	bpl.n	8002f60 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f00:	49ac      	ldr	r1, [pc, #688]	; (80031b4 <HAL_RCC_OscConfig+0x2c8>)
 8002f02:	688a      	ldr	r2, [r1, #8]
 8002f04:	f002 020c 	and.w	r2, r2, #12
 8002f08:	2a04      	cmp	r2, #4
 8002f0a:	f000 80ea 	beq.w	80030e2 <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f0e:	688a      	ldr	r2, [r1, #8]
 8002f10:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f14:	2a08      	cmp	r2, #8
 8002f16:	f000 80e0 	beq.w	80030da <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f1a:	6863      	ldr	r3, [r4, #4]
 8002f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f20:	f000 80e9 	beq.w	80030f6 <HAL_RCC_OscConfig+0x20a>
 8002f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f28:	f000 8178 	beq.w	800321c <HAL_RCC_OscConfig+0x330>
 8002f2c:	4da1      	ldr	r5, [pc, #644]	; (80031b4 <HAL_RCC_OscConfig+0x2c8>)
 8002f2e:	682a      	ldr	r2, [r5, #0]
 8002f30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f34:	602a      	str	r2, [r5, #0]
 8002f36:	682a      	ldr	r2, [r5, #0]
 8002f38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f3c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f040 80de 	bne.w	8003100 <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f44:	f7fd faf2 	bl	800052c <HAL_GetTick>
 8002f48:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4a:	e005      	b.n	8002f58 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f4c:	f7fd faee 	bl	800052c <HAL_GetTick>
 8002f50:	1b80      	subs	r0, r0, r6
 8002f52:	2864      	cmp	r0, #100	; 0x64
 8002f54:	f200 80f2 	bhi.w	800313c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f58:	682b      	ldr	r3, [r5, #0]
 8002f5a:	039b      	lsls	r3, r3, #14
 8002f5c:	d4f6      	bmi.n	8002f4c <HAL_RCC_OscConfig+0x60>
 8002f5e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f60:	079f      	lsls	r7, r3, #30
 8002f62:	d475      	bmi.n	8003050 <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f64:	071a      	lsls	r2, r3, #28
 8002f66:	d515      	bpl.n	8002f94 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f68:	6963      	ldr	r3, [r4, #20]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 80a5 	beq.w	80030ba <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f70:	4b91      	ldr	r3, [pc, #580]	; (80031b8 <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f72:	4d90      	ldr	r5, [pc, #576]	; (80031b4 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8002f74:	2201      	movs	r2, #1
 8002f76:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002f78:	f7fd fad8 	bl	800052c <HAL_GetTick>
 8002f7c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f7e:	e005      	b.n	8002f8c <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f80:	f7fd fad4 	bl	800052c <HAL_GetTick>
 8002f84:	1b80      	subs	r0, r0, r6
 8002f86:	2802      	cmp	r0, #2
 8002f88:	f200 80d8 	bhi.w	800313c <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f8c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002f8e:	079b      	lsls	r3, r3, #30
 8002f90:	d5f6      	bpl.n	8002f80 <HAL_RCC_OscConfig+0x94>
 8002f92:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f94:	0758      	lsls	r0, r3, #29
 8002f96:	d53b      	bpl.n	8003010 <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f98:	4a86      	ldr	r2, [pc, #536]	; (80031b4 <HAL_RCC_OscConfig+0x2c8>)
 8002f9a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002f9c:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	f040 80db 	bne.w	800315a <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa4:	9301      	str	r3, [sp, #4]
 8002fa6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fac:	6413      	str	r3, [r2, #64]	; 0x40
 8002fae:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	9301      	str	r3, [sp, #4]
 8002fb6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002fb8:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fba:	4d80      	ldr	r5, [pc, #512]	; (80031bc <HAL_RCC_OscConfig+0x2d0>)
 8002fbc:	682a      	ldr	r2, [r5, #0]
 8002fbe:	05d1      	lsls	r1, r2, #23
 8002fc0:	f140 80ac 	bpl.w	800311c <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc4:	68a3      	ldr	r3, [r4, #8]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	f000 80c9 	beq.w	800315e <HAL_RCC_OscConfig+0x272>
 8002fcc:	2b05      	cmp	r3, #5
 8002fce:	f000 812f 	beq.w	8003230 <HAL_RCC_OscConfig+0x344>
 8002fd2:	4d78      	ldr	r5, [pc, #480]	; (80031b4 <HAL_RCC_OscConfig+0x2c8>)
 8002fd4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002fd6:	f022 0201 	bic.w	r2, r2, #1
 8002fda:	672a      	str	r2, [r5, #112]	; 0x70
 8002fdc:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002fde:	f022 0204 	bic.w	r2, r2, #4
 8002fe2:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f040 80bf 	bne.w	8003168 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fea:	f7fd fa9f 	bl	800052c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fee:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002ff2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff4:	e006      	b.n	8003004 <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff6:	f7fd fa99 	bl	800052c <HAL_GetTick>
 8002ffa:	eba0 0008 	sub.w	r0, r0, r8
 8002ffe:	42b8      	cmp	r0, r7
 8003000:	f200 809c 	bhi.w	800313c <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003004:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003006:	0798      	lsls	r0, r3, #30
 8003008:	d4f5      	bmi.n	8002ff6 <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800300a:	2e00      	cmp	r6, #0
 800300c:	f040 80dc 	bne.w	80031c8 <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003010:	69a0      	ldr	r0, [r4, #24]
 8003012:	b1c8      	cbz	r0, 8003048 <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003014:	4d67      	ldr	r5, [pc, #412]	; (80031b4 <HAL_RCC_OscConfig+0x2c8>)
 8003016:	68aa      	ldr	r2, [r5, #8]
 8003018:	f002 020c 	and.w	r2, r2, #12
 800301c:	2a08      	cmp	r2, #8
 800301e:	f000 80d9 	beq.w	80031d4 <HAL_RCC_OscConfig+0x2e8>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003022:	4a67      	ldr	r2, [pc, #412]	; (80031c0 <HAL_RCC_OscConfig+0x2d4>)
 8003024:	2100      	movs	r1, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003026:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003028:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800302a:	f000 810b 	beq.w	8003244 <HAL_RCC_OscConfig+0x358>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302e:	f7fd fa7d 	bl	800052c <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003032:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8003034:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003036:	e004      	b.n	8003042 <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003038:	f7fd fa78 	bl	800052c <HAL_GetTick>
 800303c:	1b40      	subs	r0, r0, r5
 800303e:	2802      	cmp	r0, #2
 8003040:	d87c      	bhi.n	800313c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	019b      	lsls	r3, r3, #6
 8003046:	d4f7      	bmi.n	8003038 <HAL_RCC_OscConfig+0x14c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003048:	2000      	movs	r0, #0
}
 800304a:	b002      	add	sp, #8
 800304c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003050:	4a58      	ldr	r2, [pc, #352]	; (80031b4 <HAL_RCC_OscConfig+0x2c8>)
 8003052:	6891      	ldr	r1, [r2, #8]
 8003054:	f011 0f0c 	tst.w	r1, #12
 8003058:	d024      	beq.n	80030a4 <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800305a:	6891      	ldr	r1, [r2, #8]
 800305c:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003060:	2908      	cmp	r1, #8
 8003062:	d01c      	beq.n	800309e <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003064:	68e3      	ldr	r3, [r4, #12]
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 8092 	beq.w	8003190 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 800306c:	4b55      	ldr	r3, [pc, #340]	; (80031c4 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306e:	4d51      	ldr	r5, [pc, #324]	; (80031b4 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8003070:	2201      	movs	r2, #1
 8003072:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003074:	f7fd fa5a 	bl	800052c <HAL_GetTick>
 8003078:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307a:	e004      	b.n	8003086 <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800307c:	f7fd fa56 	bl	800052c <HAL_GetTick>
 8003080:	1b80      	subs	r0, r0, r6
 8003082:	2802      	cmp	r0, #2
 8003084:	d85a      	bhi.n	800313c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003086:	682b      	ldr	r3, [r5, #0]
 8003088:	0798      	lsls	r0, r3, #30
 800308a:	d5f7      	bpl.n	800307c <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308c:	682b      	ldr	r3, [r5, #0]
 800308e:	6922      	ldr	r2, [r4, #16]
 8003090:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003094:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003098:	602b      	str	r3, [r5, #0]
 800309a:	6823      	ldr	r3, [r4, #0]
 800309c:	e762      	b.n	8002f64 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800309e:	6852      	ldr	r2, [r2, #4]
 80030a0:	0256      	lsls	r6, r2, #9
 80030a2:	d4df      	bmi.n	8003064 <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030a4:	4a43      	ldr	r2, [pc, #268]	; (80031b4 <HAL_RCC_OscConfig+0x2c8>)
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	0795      	lsls	r5, r2, #30
 80030aa:	d54b      	bpl.n	8003144 <HAL_RCC_OscConfig+0x258>
 80030ac:	68e2      	ldr	r2, [r4, #12]
 80030ae:	2a01      	cmp	r2, #1
 80030b0:	d048      	beq.n	8003144 <HAL_RCC_OscConfig+0x258>
        return HAL_ERROR;
 80030b2:	2001      	movs	r0, #1
}
 80030b4:	b002      	add	sp, #8
 80030b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80030ba:	4a3f      	ldr	r2, [pc, #252]	; (80031b8 <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030bc:	4d3d      	ldr	r5, [pc, #244]	; (80031b4 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 80030be:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80030c0:	f7fd fa34 	bl	800052c <HAL_GetTick>
 80030c4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c6:	e004      	b.n	80030d2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c8:	f7fd fa30 	bl	800052c <HAL_GetTick>
 80030cc:	1b80      	subs	r0, r0, r6
 80030ce:	2802      	cmp	r0, #2
 80030d0:	d834      	bhi.n	800313c <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80030d4:	079f      	lsls	r7, r3, #30
 80030d6:	d4f7      	bmi.n	80030c8 <HAL_RCC_OscConfig+0x1dc>
 80030d8:	e75b      	b.n	8002f92 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030da:	684a      	ldr	r2, [r1, #4]
 80030dc:	0250      	lsls	r0, r2, #9
 80030de:	f57f af1c 	bpl.w	8002f1a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e2:	4a34      	ldr	r2, [pc, #208]	; (80031b4 <HAL_RCC_OscConfig+0x2c8>)
 80030e4:	6812      	ldr	r2, [r2, #0]
 80030e6:	0391      	lsls	r1, r2, #14
 80030e8:	f57f af3a 	bpl.w	8002f60 <HAL_RCC_OscConfig+0x74>
 80030ec:	6862      	ldr	r2, [r4, #4]
 80030ee:	2a00      	cmp	r2, #0
 80030f0:	f47f af36 	bne.w	8002f60 <HAL_RCC_OscConfig+0x74>
 80030f4:	e7dd      	b.n	80030b2 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f6:	4a2f      	ldr	r2, [pc, #188]	; (80031b4 <HAL_RCC_OscConfig+0x2c8>)
 80030f8:	6813      	ldr	r3, [r2, #0]
 80030fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030fe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003100:	f7fd fa14 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003104:	4d2b      	ldr	r5, [pc, #172]	; (80031b4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8003106:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003108:	e004      	b.n	8003114 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800310a:	f7fd fa0f 	bl	800052c <HAL_GetTick>
 800310e:	1b80      	subs	r0, r0, r6
 8003110:	2864      	cmp	r0, #100	; 0x64
 8003112:	d813      	bhi.n	800313c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003114:	682b      	ldr	r3, [r5, #0]
 8003116:	039a      	lsls	r2, r3, #14
 8003118:	d5f7      	bpl.n	800310a <HAL_RCC_OscConfig+0x21e>
 800311a:	e720      	b.n	8002f5e <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800311c:	682a      	ldr	r2, [r5, #0]
 800311e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003122:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8003124:	f7fd fa02 	bl	800052c <HAL_GetTick>
 8003128:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312a:	682b      	ldr	r3, [r5, #0]
 800312c:	05da      	lsls	r2, r3, #23
 800312e:	f53f af49 	bmi.w	8002fc4 <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003132:	f7fd f9fb 	bl	800052c <HAL_GetTick>
 8003136:	1bc0      	subs	r0, r0, r7
 8003138:	2802      	cmp	r0, #2
 800313a:	d9f6      	bls.n	800312a <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 800313c:	2003      	movs	r0, #3
}
 800313e:	b002      	add	sp, #8
 8003140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003144:	491b      	ldr	r1, [pc, #108]	; (80031b4 <HAL_RCC_OscConfig+0x2c8>)
 8003146:	6920      	ldr	r0, [r4, #16]
 8003148:	680a      	ldr	r2, [r1, #0]
 800314a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800314e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003152:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003154:	e706      	b.n	8002f64 <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 8003156:	2001      	movs	r0, #1
}
 8003158:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 800315a:	2600      	movs	r6, #0
 800315c:	e72d      	b.n	8002fba <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800315e:	4a15      	ldr	r2, [pc, #84]	; (80031b4 <HAL_RCC_OscConfig+0x2c8>)
 8003160:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003168:	f7fd f9e0 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316c:	4d11      	ldr	r5, [pc, #68]	; (80031b4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800316e:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003170:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003174:	e005      	b.n	8003182 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003176:	f7fd f9d9 	bl	800052c <HAL_GetTick>
 800317a:	eba0 0008 	sub.w	r0, r0, r8
 800317e:	42b8      	cmp	r0, r7
 8003180:	d8dc      	bhi.n	800313c <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003182:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003184:	079b      	lsls	r3, r3, #30
 8003186:	d5f6      	bpl.n	8003176 <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 8003188:	2e00      	cmp	r6, #0
 800318a:	f43f af41 	beq.w	8003010 <HAL_RCC_OscConfig+0x124>
 800318e:	e01b      	b.n	80031c8 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 8003190:	4a0c      	ldr	r2, [pc, #48]	; (80031c4 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003192:	4d08      	ldr	r5, [pc, #32]	; (80031b4 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8003194:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003196:	f7fd f9c9 	bl	800052c <HAL_GetTick>
 800319a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319c:	e004      	b.n	80031a8 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800319e:	f7fd f9c5 	bl	800052c <HAL_GetTick>
 80031a2:	1b80      	subs	r0, r0, r6
 80031a4:	2802      	cmp	r0, #2
 80031a6:	d8c9      	bhi.n	800313c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a8:	682b      	ldr	r3, [r5, #0]
 80031aa:	0799      	lsls	r1, r3, #30
 80031ac:	d4f7      	bmi.n	800319e <HAL_RCC_OscConfig+0x2b2>
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	e6d8      	b.n	8002f64 <HAL_RCC_OscConfig+0x78>
 80031b2:	bf00      	nop
 80031b4:	40023800 	.word	0x40023800
 80031b8:	42470e80 	.word	0x42470e80
 80031bc:	40007000 	.word	0x40007000
 80031c0:	42470060 	.word	0x42470060
 80031c4:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c8:	4a35      	ldr	r2, [pc, #212]	; (80032a0 <HAL_RCC_OscConfig+0x3b4>)
 80031ca:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80031cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d0:	6413      	str	r3, [r2, #64]	; 0x40
 80031d2:	e71d      	b.n	8003010 <HAL_RCC_OscConfig+0x124>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d4:	2801      	cmp	r0, #1
 80031d6:	f43f af6d 	beq.w	80030b4 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 80031da:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031dc:	69e2      	ldr	r2, [r4, #28]
 80031de:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80031e2:	4291      	cmp	r1, r2
 80031e4:	f47f af65 	bne.w	80030b2 <HAL_RCC_OscConfig+0x1c6>
 80031e8:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031ea:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ee:	4291      	cmp	r1, r2
 80031f0:	f47f af5f 	bne.w	80030b2 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80031f4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80031fa:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031fc:	428a      	cmp	r2, r1
 80031fe:	f47f af58 	bne.w	80030b2 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003202:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003204:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003208:	4291      	cmp	r1, r2
 800320a:	f47f af52 	bne.w	80030b2 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800320e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003210:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 8003214:	1a18      	subs	r0, r3, r0
 8003216:	bf18      	it	ne
 8003218:	2001      	movne	r0, #1
 800321a:	e74b      	b.n	80030b4 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800321c:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <HAL_RCC_OscConfig+0x3b4>)
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	e767      	b.n	8003100 <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003230:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <HAL_RCC_OscConfig+0x3b4>)
 8003232:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003234:	f042 0204 	orr.w	r2, r2, #4
 8003238:	671a      	str	r2, [r3, #112]	; 0x70
 800323a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800323c:	f042 0201 	orr.w	r2, r2, #1
 8003240:	671a      	str	r2, [r3, #112]	; 0x70
 8003242:	e791      	b.n	8003168 <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 8003244:	f7fd f972 	bl	800052c <HAL_GetTick>
 8003248:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324a:	e005      	b.n	8003258 <HAL_RCC_OscConfig+0x36c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800324c:	f7fd f96e 	bl	800052c <HAL_GetTick>
 8003250:	1b80      	subs	r0, r0, r6
 8003252:	2802      	cmp	r0, #2
 8003254:	f63f af72 	bhi.w	800313c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003258:	682b      	ldr	r3, [r5, #0]
 800325a:	0199      	lsls	r1, r3, #6
 800325c:	d4f6      	bmi.n	800324c <HAL_RCC_OscConfig+0x360>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800325e:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8003262:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8003266:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003268:	4c0d      	ldr	r4, [pc, #52]	; (80032a0 <HAL_RCC_OscConfig+0x3b4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800326a:	4333      	orrs	r3, r6
 800326c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003270:	0852      	lsrs	r2, r2, #1
 8003272:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003276:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8003278:	490a      	ldr	r1, [pc, #40]	; (80032a4 <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800327a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800327e:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003280:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003282:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8003284:	f7fd f952 	bl	800052c <HAL_GetTick>
 8003288:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328a:	e005      	b.n	8003298 <HAL_RCC_OscConfig+0x3ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800328c:	f7fd f94e 	bl	800052c <HAL_GetTick>
 8003290:	1b40      	subs	r0, r0, r5
 8003292:	2802      	cmp	r0, #2
 8003294:	f63f af52 	bhi.w	800313c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003298:	6823      	ldr	r3, [r4, #0]
 800329a:	019a      	lsls	r2, r3, #6
 800329c:	d5f6      	bpl.n	800328c <HAL_RCC_OscConfig+0x3a0>
 800329e:	e6d3      	b.n	8003048 <HAL_RCC_OscConfig+0x15c>
 80032a0:	40023800 	.word	0x40023800
 80032a4:	42470060 	.word	0x42470060

080032a8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032a8:	4915      	ldr	r1, [pc, #84]	; (8003300 <HAL_RCC_GetSysClockFreq+0x58>)
{
 80032aa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032ac:	688b      	ldr	r3, [r1, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d001      	beq.n	80032ba <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032b6:	4813      	ldr	r0, [pc, #76]	; (8003304 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80032b8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032ba:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032bc:	684b      	ldr	r3, [r1, #4]
 80032be:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032c2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032c6:	d110      	bne.n	80032ea <HAL_RCC_GetSysClockFreq+0x42>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c8:	6849      	ldr	r1, [r1, #4]
 80032ca:	480e      	ldr	r0, [pc, #56]	; (8003304 <HAL_RCC_GetSysClockFreq+0x5c>)
 80032cc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80032d0:	fba1 0100 	umull	r0, r1, r1, r0
 80032d4:	f7fc ff84 	bl	80001e0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032d8:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_RCC_GetSysClockFreq+0x58>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80032e0:	3301      	adds	r3, #1
 80032e2:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80032e4:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80032e8:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ea:	684b      	ldr	r3, [r1, #4]
 80032ec:	4805      	ldr	r0, [pc, #20]	; (8003304 <HAL_RCC_GetSysClockFreq+0x5c>)
 80032ee:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80032f2:	fba3 0100 	umull	r0, r1, r3, r0
 80032f6:	2300      	movs	r3, #0
 80032f8:	f7fc ff72 	bl	80001e0 <__aeabi_uldivmod>
 80032fc:	e7ec      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0x30>
 80032fe:	bf00      	nop
 8003300:	40023800 	.word	0x40023800
 8003304:	00f42400 	.word	0x00f42400

08003308 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003308:	b160      	cbz	r0, 8003324 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800330a:	4a49      	ldr	r2, [pc, #292]	; (8003430 <HAL_RCC_ClockConfig+0x128>)
 800330c:	6813      	ldr	r3, [r2, #0]
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	428b      	cmp	r3, r1
 8003314:	d208      	bcs.n	8003328 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003316:	b2cb      	uxtb	r3, r1
 8003318:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800331a:	6813      	ldr	r3, [r2, #0]
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	428b      	cmp	r3, r1
 8003322:	d001      	beq.n	8003328 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8003324:	2001      	movs	r0, #1
}
 8003326:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003328:	6803      	ldr	r3, [r0, #0]
{
 800332a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800332e:	079d      	lsls	r5, r3, #30
 8003330:	d514      	bpl.n	800335c <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003332:	075c      	lsls	r4, r3, #29
 8003334:	d504      	bpl.n	8003340 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003336:	4c3f      	ldr	r4, [pc, #252]	; (8003434 <HAL_RCC_ClockConfig+0x12c>)
 8003338:	68a2      	ldr	r2, [r4, #8]
 800333a:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800333e:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003340:	071a      	lsls	r2, r3, #28
 8003342:	d504      	bpl.n	800334e <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003344:	4c3b      	ldr	r4, [pc, #236]	; (8003434 <HAL_RCC_ClockConfig+0x12c>)
 8003346:	68a2      	ldr	r2, [r4, #8]
 8003348:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800334c:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800334e:	4c39      	ldr	r4, [pc, #228]	; (8003434 <HAL_RCC_ClockConfig+0x12c>)
 8003350:	6885      	ldr	r5, [r0, #8]
 8003352:	68a2      	ldr	r2, [r4, #8]
 8003354:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003358:	432a      	orrs	r2, r5
 800335a:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800335c:	07df      	lsls	r7, r3, #31
 800335e:	4604      	mov	r4, r0
 8003360:	460d      	mov	r5, r1
 8003362:	d522      	bpl.n	80033aa <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003364:	6842      	ldr	r2, [r0, #4]
 8003366:	2a01      	cmp	r2, #1
 8003368:	d057      	beq.n	800341a <HAL_RCC_ClockConfig+0x112>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800336a:	1e93      	subs	r3, r2, #2
 800336c:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336e:	4b31      	ldr	r3, [pc, #196]	; (8003434 <HAL_RCC_ClockConfig+0x12c>)
 8003370:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003372:	d959      	bls.n	8003428 <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003374:	0799      	lsls	r1, r3, #30
 8003376:	d525      	bpl.n	80033c4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003378:	4e2e      	ldr	r6, [pc, #184]	; (8003434 <HAL_RCC_ClockConfig+0x12c>)
 800337a:	68b3      	ldr	r3, [r6, #8]
 800337c:	f023 0303 	bic.w	r3, r3, #3
 8003380:	4313      	orrs	r3, r2
 8003382:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003384:	f7fd f8d2 	bl	800052c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003388:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800338c:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338e:	e005      	b.n	800339c <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003390:	f7fd f8cc 	bl	800052c <HAL_GetTick>
 8003394:	eba0 0008 	sub.w	r0, r0, r8
 8003398:	42b8      	cmp	r0, r7
 800339a:	d843      	bhi.n	8003424 <HAL_RCC_ClockConfig+0x11c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339c:	68b3      	ldr	r3, [r6, #8]
 800339e:	6862      	ldr	r2, [r4, #4]
 80033a0:	f003 030c 	and.w	r3, r3, #12
 80033a4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80033a8:	d1f2      	bne.n	8003390 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033aa:	4a21      	ldr	r2, [pc, #132]	; (8003430 <HAL_RCC_ClockConfig+0x128>)
 80033ac:	6813      	ldr	r3, [r2, #0]
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	42ab      	cmp	r3, r5
 80033b4:	d909      	bls.n	80033ca <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b6:	b2eb      	uxtb	r3, r5
 80033b8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ba:	6813      	ldr	r3, [r2, #0]
 80033bc:	f003 030f 	and.w	r3, r3, #15
 80033c0:	42ab      	cmp	r3, r5
 80033c2:	d002      	beq.n	80033ca <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 80033c4:	2001      	movs	r0, #1
}
 80033c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ca:	6823      	ldr	r3, [r4, #0]
 80033cc:	075a      	lsls	r2, r3, #29
 80033ce:	d506      	bpl.n	80033de <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d0:	4918      	ldr	r1, [pc, #96]	; (8003434 <HAL_RCC_ClockConfig+0x12c>)
 80033d2:	68e0      	ldr	r0, [r4, #12]
 80033d4:	688a      	ldr	r2, [r1, #8]
 80033d6:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80033da:	4302      	orrs	r2, r0
 80033dc:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033de:	071b      	lsls	r3, r3, #28
 80033e0:	d412      	bmi.n	8003408 <HAL_RCC_ClockConfig+0x100>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033e2:	f7ff ff61 	bl	80032a8 <HAL_RCC_GetSysClockFreq>
 80033e6:	4b13      	ldr	r3, [pc, #76]	; (8003434 <HAL_RCC_ClockConfig+0x12c>)
 80033e8:	4c13      	ldr	r4, [pc, #76]	; (8003438 <HAL_RCC_ClockConfig+0x130>)
 80033ea:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 80033ec:	4913      	ldr	r1, [pc, #76]	; (800343c <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033ee:	4a14      	ldr	r2, [pc, #80]	; (8003440 <HAL_RCC_ClockConfig+0x138>)
 80033f0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80033f4:	5ce3      	ldrb	r3, [r4, r3]
 80033f6:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 80033fa:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033fc:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 80033fe:	f003 f8d7 	bl	80065b0 <HAL_InitTick>
  return HAL_OK;
 8003402:	2000      	movs	r0, #0
}
 8003404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003408:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <HAL_RCC_ClockConfig+0x12c>)
 800340a:	6921      	ldr	r1, [r4, #16]
 800340c:	6893      	ldr	r3, [r2, #8]
 800340e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003412:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003416:	6093      	str	r3, [r2, #8]
 8003418:	e7e3      	b.n	80033e2 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341a:	4b06      	ldr	r3, [pc, #24]	; (8003434 <HAL_RCC_ClockConfig+0x12c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	039e      	lsls	r6, r3, #14
 8003420:	d4aa      	bmi.n	8003378 <HAL_RCC_ClockConfig+0x70>
 8003422:	e7cf      	b.n	80033c4 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8003424:	2003      	movs	r0, #3
 8003426:	e7ed      	b.n	8003404 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003428:	0198      	lsls	r0, r3, #6
 800342a:	d4a5      	bmi.n	8003378 <HAL_RCC_ClockConfig+0x70>
 800342c:	e7ca      	b.n	80033c4 <HAL_RCC_ClockConfig+0xbc>
 800342e:	bf00      	nop
 8003430:	40023c00 	.word	0x40023c00
 8003434:	40023800 	.word	0x40023800
 8003438:	08009a24 	.word	0x08009a24
 800343c:	20000004 	.word	0x20000004
 8003440:	2000011c 	.word	0x2000011c

08003444 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003444:	4b01      	ldr	r3, [pc, #4]	; (800344c <HAL_RCC_GetHCLKFreq+0x8>)
}
 8003446:	6818      	ldr	r0, [r3, #0]
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	2000011c 	.word	0x2000011c

08003450 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003450:	4b04      	ldr	r3, [pc, #16]	; (8003464 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003452:	4a05      	ldr	r2, [pc, #20]	; (8003468 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003454:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003456:	4905      	ldr	r1, [pc, #20]	; (800346c <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003458:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800345c:	6808      	ldr	r0, [r1, #0]
 800345e:	5cd3      	ldrb	r3, [r2, r3]
}
 8003460:	40d8      	lsrs	r0, r3
 8003462:	4770      	bx	lr
 8003464:	40023800 	.word	0x40023800
 8003468:	08009a34 	.word	0x08009a34
 800346c:	2000011c 	.word	0x2000011c

08003470 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003470:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003472:	220f      	movs	r2, #15
 8003474:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	f002 0203 	and.w	r2, r2, #3
 800347c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003484:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800348c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	08db      	lsrs	r3, r3, #3
{
 8003492:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003494:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003498:	4c05      	ldr	r4, [pc, #20]	; (80034b0 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800349a:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800349c:	6823      	ldr	r3, [r4, #0]
}
 800349e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	600b      	str	r3, [r1, #0]
}
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40023800 	.word	0x40023800
 80034b0:	40023c00 	.word	0x40023c00

080034b4 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop

080034b8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d05c      	beq.n	8003576 <HAL_TIM_Base_Init+0xbe>
{
 80034bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80034be:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80034c2:	4604      	mov	r4, r0
 80034c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80034c8:	b3bb      	cbz	r3, 800353a <HAL_TIM_Base_Init+0x82>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ca:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034cc:	4e3a      	ldr	r6, [pc, #232]	; (80035b8 <HAL_TIM_Base_Init+0x100>)
 80034ce:	69a5      	ldr	r5, [r4, #24]
 80034d0:	68e0      	ldr	r0, [r4, #12]
 80034d2:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 80034d4:	2302      	movs	r3, #2
 80034d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034da:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 80034dc:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034de:	d04c      	beq.n	800357a <HAL_TIM_Base_Init+0xc2>
 80034e0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80034e4:	d058      	beq.n	8003598 <HAL_TIM_Base_Init+0xe0>
 80034e6:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80034ea:	42b2      	cmp	r2, r6
 80034ec:	d02a      	beq.n	8003544 <HAL_TIM_Base_Init+0x8c>
 80034ee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80034f2:	42b2      	cmp	r2, r6
 80034f4:	d026      	beq.n	8003544 <HAL_TIM_Base_Init+0x8c>
 80034f6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80034fa:	42b2      	cmp	r2, r6
 80034fc:	d022      	beq.n	8003544 <HAL_TIM_Base_Init+0x8c>
 80034fe:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8003502:	42b2      	cmp	r2, r6
 8003504:	d01e      	beq.n	8003544 <HAL_TIM_Base_Init+0x8c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003506:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 800350a:	42b2      	cmp	r2, r6
 800350c:	d013      	beq.n	8003536 <HAL_TIM_Base_Init+0x7e>
 800350e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003512:	42b2      	cmp	r2, r6
 8003514:	d00f      	beq.n	8003536 <HAL_TIM_Base_Init+0x7e>
 8003516:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800351a:	42b2      	cmp	r2, r6
 800351c:	d00b      	beq.n	8003536 <HAL_TIM_Base_Init+0x7e>
 800351e:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 8003522:	42b2      	cmp	r2, r6
 8003524:	d007      	beq.n	8003536 <HAL_TIM_Base_Init+0x7e>
 8003526:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800352a:	42b2      	cmp	r2, r6
 800352c:	d003      	beq.n	8003536 <HAL_TIM_Base_Init+0x7e>
 800352e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003532:	42b2      	cmp	r2, r6
 8003534:	d138      	bne.n	80035a8 <HAL_TIM_Base_Init+0xf0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003536:	6926      	ldr	r6, [r4, #16]
 8003538:	e033      	b.n	80035a2 <HAL_TIM_Base_Init+0xea>
    htim->Lock = HAL_UNLOCKED;
 800353a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800353e:	f7ff ffb9 	bl	80034b4 <HAL_TIM_Base_MspInit>
 8003542:	e7c2      	b.n	80034ca <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8003544:	68a6      	ldr	r6, [r4, #8]
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003546:	4f1d      	ldr	r7, [pc, #116]	; (80035bc <HAL_TIM_Base_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800354c:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800354e:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003554:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003556:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800355a:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800355c:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 800355e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003560:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003562:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003564:	d101      	bne.n	800356a <HAL_TIM_Base_Init+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003566:	6963      	ldr	r3, [r4, #20]
 8003568:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800356a:	2301      	movs	r3, #1
 800356c:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 800356e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003570:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003576:	2001      	movs	r0, #1
}
 8003578:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800357a:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800357c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800357e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003582:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8003584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003588:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800358a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800358e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003590:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003592:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003594:	6291      	str	r1, [r2, #40]	; 0x28
 8003596:	e7e6      	b.n	8003566 <HAL_TIM_Base_Init+0xae>
    tmpcr1 |= Structure->CounterMode;
 8003598:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800359a:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800359c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80035a0:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80035a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035a6:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035ac:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80035ae:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035b0:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80035b2:	6291      	str	r1, [r2, #40]	; 0x28
 80035b4:	e7d9      	b.n	800356a <HAL_TIM_Base_Init+0xb2>
 80035b6:	bf00      	nop
 80035b8:	40010000 	.word	0x40010000
 80035bc:	40010400 	.word	0x40010400

080035c0 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035c0:	6803      	ldr	r3, [r0, #0]
 80035c2:	68da      	ldr	r2, [r3, #12]
 80035c4:	f042 0201 	orr.w	r2, r2, #1
 80035c8:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035d0:	2a06      	cmp	r2, #6
 80035d2:	d003      	beq.n	80035dc <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]
}
 80035dc:	2000      	movs	r0, #0
 80035de:	4770      	bx	lr

080035e0 <HAL_TIM_OC_DelayElapsedCallback>:
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop

080035e4 <HAL_TIM_IC_CaptureCallback>:
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop

080035e8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop

080035ec <HAL_TIM_TriggerCallback>:
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop

080035f0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035f0:	6803      	ldr	r3, [r0, #0]
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	0791      	lsls	r1, r2, #30
{
 80035f6:	b510      	push	{r4, lr}
 80035f8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035fa:	d502      	bpl.n	8003602 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	0792      	lsls	r2, r2, #30
 8003600:	d45f      	bmi.n	80036c2 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	0750      	lsls	r0, r2, #29
 8003606:	d502      	bpl.n	800360e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	0751      	lsls	r1, r2, #29
 800360c:	d446      	bmi.n	800369c <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	0712      	lsls	r2, r2, #28
 8003612:	d502      	bpl.n	800361a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	0710      	lsls	r0, r2, #28
 8003618:	d42e      	bmi.n	8003678 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	06d2      	lsls	r2, r2, #27
 800361e:	d502      	bpl.n	8003626 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	06d0      	lsls	r0, r2, #27
 8003624:	d418      	bmi.n	8003658 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	07d1      	lsls	r1, r2, #31
 800362a:	d502      	bpl.n	8003632 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	07d2      	lsls	r2, r2, #31
 8003630:	d45d      	bmi.n	80036ee <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	0610      	lsls	r0, r2, #24
 8003636:	d502      	bpl.n	800363e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	0611      	lsls	r1, r2, #24
 800363c:	d45f      	bmi.n	80036fe <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	0652      	lsls	r2, r2, #25
 8003642:	d502      	bpl.n	800364a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	0650      	lsls	r0, r2, #25
 8003648:	d461      	bmi.n	800370e <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	0691      	lsls	r1, r2, #26
 800364e:	d502      	bpl.n	8003656 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	0692      	lsls	r2, r2, #26
 8003654:	d443      	bmi.n	80036de <HAL_TIM_IRQHandler+0xee>
}
 8003656:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003658:	f06f 0210 	mvn.w	r2, #16
 800365c:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800365e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003660:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003662:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003666:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003668:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800366a:	d064      	beq.n	8003736 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800366c:	f7ff ffba 	bl	80035e4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003670:	2200      	movs	r2, #0
 8003672:	6823      	ldr	r3, [r4, #0]
 8003674:	7722      	strb	r2, [r4, #28]
 8003676:	e7d6      	b.n	8003626 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003678:	f06f 0208 	mvn.w	r2, #8
 800367c:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800367e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003680:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003682:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003684:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003686:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003688:	d152      	bne.n	8003730 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368a:	f7ff ffa9 	bl	80035e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800368e:	4620      	mov	r0, r4
 8003690:	f7ff ffaa 	bl	80035e8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003694:	2200      	movs	r2, #0
 8003696:	6823      	ldr	r3, [r4, #0]
 8003698:	7722      	strb	r2, [r4, #28]
 800369a:	e7be      	b.n	800361a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800369c:	f06f 0204 	mvn.w	r2, #4
 80036a0:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036a2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036a4:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036a6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036aa:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80036ac:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036ae:	d13c      	bne.n	800372a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036b0:	f7ff ff96 	bl	80035e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b4:	4620      	mov	r0, r4
 80036b6:	f7ff ff97 	bl	80035e8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ba:	2200      	movs	r2, #0
 80036bc:	6823      	ldr	r3, [r4, #0]
 80036be:	7722      	strb	r2, [r4, #28]
 80036c0:	e7a5      	b.n	800360e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036c2:	f06f 0202 	mvn.w	r2, #2
 80036c6:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036c8:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ca:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036cc:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ce:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036d0:	d025      	beq.n	800371e <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80036d2:	f7ff ff87 	bl	80035e4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d6:	2200      	movs	r2, #0
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	7722      	strb	r2, [r4, #28]
 80036dc:	e791      	b.n	8003602 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036de:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80036e2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036e4:	611a      	str	r2, [r3, #16]
}
 80036e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80036ea:	f000 b82b 	b.w	8003744 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036ee:	f06f 0201 	mvn.w	r2, #1
 80036f2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80036f4:	4620      	mov	r0, r4
 80036f6:	f002 fd6f 	bl	80061d8 <HAL_TIM_PeriodElapsedCallback>
 80036fa:	6823      	ldr	r3, [r4, #0]
 80036fc:	e799      	b.n	8003632 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003702:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003704:	4620      	mov	r0, r4
 8003706:	f000 f81f 	bl	8003748 <HAL_TIMEx_BreakCallback>
 800370a:	6823      	ldr	r3, [r4, #0]
 800370c:	e797      	b.n	800363e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800370e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003712:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003714:	4620      	mov	r0, r4
 8003716:	f7ff ff69 	bl	80035ec <HAL_TIM_TriggerCallback>
 800371a:	6823      	ldr	r3, [r4, #0]
 800371c:	e795      	b.n	800364a <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800371e:	f7ff ff5f 	bl	80035e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003722:	4620      	mov	r0, r4
 8003724:	f7ff ff60 	bl	80035e8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003728:	e7d5      	b.n	80036d6 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 800372a:	f7ff ff5b 	bl	80035e4 <HAL_TIM_IC_CaptureCallback>
 800372e:	e7c4      	b.n	80036ba <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8003730:	f7ff ff58 	bl	80035e4 <HAL_TIM_IC_CaptureCallback>
 8003734:	e7ae      	b.n	8003694 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003736:	f7ff ff53 	bl	80035e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373a:	4620      	mov	r0, r4
 800373c:	f7ff ff54 	bl	80035e8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003740:	e796      	b.n	8003670 <HAL_TIM_IRQHandler+0x80>
 8003742:	bf00      	nop

08003744 <HAL_TIMEx_CommutCallback>:
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop

08003748 <HAL_TIMEx_BreakCallback>:
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop

0800374c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800374c:	b084      	sub	sp, #16
 800374e:	b430      	push	{r4, r5}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003750:	9d08      	ldr	r5, [sp, #32]
{
 8003752:	ac03      	add	r4, sp, #12
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003754:	2d01      	cmp	r5, #1
{
 8003756:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800375a:	d132      	bne.n	80037c2 <USB_CoreInit+0x76>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800375c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 800375e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003764:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003766:	68c3      	ldr	r3, [r0, #12]
 8003768:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800376c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003770:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003772:	68c3      	ldr	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8003774:	2a01      	cmp	r2, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003776:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800377a:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800377c:	d044      	beq.n	8003808 <USB_CoreInit+0xbc>
{
 800377e:	4b27      	ldr	r3, [pc, #156]	; (800381c <USB_CoreInit+0xd0>)
 8003780:	e001      	b.n	8003786 <USB_CoreInit+0x3a>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003782:	3b01      	subs	r3, #1
 8003784:	d045      	beq.n	8003812 <USB_CoreInit+0xc6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003786:	6902      	ldr	r2, [r0, #16]
 8003788:	2a00      	cmp	r2, #0
 800378a:	dafa      	bge.n	8003782 <USB_CoreInit+0x36>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800378c:	6903      	ldr	r3, [r0, #16]
 800378e:	4a23      	ldr	r2, [pc, #140]	; (800381c <USB_CoreInit+0xd0>)
 8003790:	f043 0301 	orr.w	r3, r3, #1
 8003794:	6103      	str	r3, [r0, #16]
 8003796:	e001      	b.n	800379c <USB_CoreInit+0x50>

  do
  {
    if (++count > 200000U)
 8003798:	3a01      	subs	r2, #1
 800379a:	d03a      	beq.n	8003812 <USB_CoreInit+0xc6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800379c:	6903      	ldr	r3, [r0, #16]
 800379e:	f013 0301 	ands.w	r3, r3, #1
 80037a2:	d1f9      	bne.n	8003798 <USB_CoreInit+0x4c>
  if (cfg.dma_enable == 1U)
 80037a4:	9a06      	ldr	r2, [sp, #24]
 80037a6:	2a01      	cmp	r2, #1
 80037a8:	d107      	bne.n	80037ba <USB_CoreInit+0x6e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80037aa:	6882      	ldr	r2, [r0, #8]
 80037ac:	f042 0206 	orr.w	r2, r2, #6
 80037b0:	6082      	str	r2, [r0, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80037b2:	6882      	ldr	r2, [r0, #8]
 80037b4:	f042 0220 	orr.w	r2, r2, #32
 80037b8:	6082      	str	r2, [r0, #8]
}
 80037ba:	bc30      	pop	{r4, r5}
 80037bc:	4618      	mov	r0, r3
 80037be:	b004      	add	sp, #16
 80037c0:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037c2:	68c2      	ldr	r2, [r0, #12]
 80037c4:	4b15      	ldr	r3, [pc, #84]	; (800381c <USB_CoreInit+0xd0>)
 80037c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037ca:	60c2      	str	r2, [r0, #12]
 80037cc:	e001      	b.n	80037d2 <USB_CoreInit+0x86>
    if (++count > 200000U)
 80037ce:	3b01      	subs	r3, #1
 80037d0:	d021      	beq.n	8003816 <USB_CoreInit+0xca>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80037d2:	6902      	ldr	r2, [r0, #16]
 80037d4:	2a00      	cmp	r2, #0
 80037d6:	dafa      	bge.n	80037ce <USB_CoreInit+0x82>
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80037d8:	6903      	ldr	r3, [r0, #16]
 80037da:	4a10      	ldr	r2, [pc, #64]	; (800381c <USB_CoreInit+0xd0>)
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	6103      	str	r3, [r0, #16]
 80037e2:	e001      	b.n	80037e8 <USB_CoreInit+0x9c>
    if (++count > 200000U)
 80037e4:	3a01      	subs	r2, #1
 80037e6:	d016      	beq.n	8003816 <USB_CoreInit+0xca>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80037e8:	6903      	ldr	r3, [r0, #16]
 80037ea:	f013 0301 	ands.w	r3, r3, #1
 80037ee:	d1f9      	bne.n	80037e4 <USB_CoreInit+0x98>
    if (cfg.battery_charging_enable == 0U)
 80037f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80037f2:	b922      	cbnz	r2, 80037fe <USB_CoreInit+0xb2>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037f4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80037f6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80037fa:	6382      	str	r2, [r0, #56]	; 0x38
 80037fc:	e7d2      	b.n	80037a4 <USB_CoreInit+0x58>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037fe:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003800:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003804:	6382      	str	r2, [r0, #56]	; 0x38
 8003806:	e7cd      	b.n	80037a4 <USB_CoreInit+0x58>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003808:	68c3      	ldr	r3, [r0, #12]
 800380a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800380e:	60c3      	str	r3, [r0, #12]
 8003810:	e7b5      	b.n	800377e <USB_CoreInit+0x32>
      return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e7c6      	b.n	80037a4 <USB_CoreInit+0x58>
 8003816:	2303      	movs	r3, #3
 8003818:	e7ea      	b.n	80037f0 <USB_CoreInit+0xa4>
 800381a:	bf00      	nop
 800381c:	00030d40 	.word	0x00030d40

08003820 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8003820:	2a02      	cmp	r2, #2
 8003822:	d00a      	beq.n	800383a <USB_SetTurnaroundTime+0x1a>
 8003824:	f44f 5110 	mov.w	r1, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003828:	68c2      	ldr	r2, [r0, #12]
 800382a:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800382e:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003830:	68c3      	ldr	r3, [r0, #12]
 8003832:	430b      	orrs	r3, r1
 8003834:	60c3      	str	r3, [r0, #12]
}
 8003836:	2000      	movs	r0, #0
 8003838:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800383a:	4b2d      	ldr	r3, [pc, #180]	; (80038f0 <USB_SetTurnaroundTime+0xd0>)
 800383c:	4a2d      	ldr	r2, [pc, #180]	; (80038f4 <USB_SetTurnaroundTime+0xd4>)
 800383e:	440b      	add	r3, r1
 8003840:	4293      	cmp	r3, r2
 8003842:	d943      	bls.n	80038cc <USB_SetTurnaroundTime+0xac>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003844:	4b2c      	ldr	r3, [pc, #176]	; (80038f8 <USB_SetTurnaroundTime+0xd8>)
 8003846:	4a2d      	ldr	r2, [pc, #180]	; (80038fc <USB_SetTurnaroundTime+0xdc>)
 8003848:	440b      	add	r3, r1
 800384a:	4293      	cmp	r3, r2
 800384c:	d93b      	bls.n	80038c6 <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800384e:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 8003852:	4a2b      	ldr	r2, [pc, #172]	; (8003900 <USB_SetTurnaroundTime+0xe0>)
 8003854:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8003858:	4293      	cmp	r3, r2
 800385a:	d93a      	bls.n	80038d2 <USB_SetTurnaroundTime+0xb2>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800385c:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 8003860:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 8003864:	32a0      	adds	r2, #160	; 0xa0
 8003866:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 800386a:	4293      	cmp	r3, r2
 800386c:	d934      	bls.n	80038d8 <USB_SetTurnaroundTime+0xb8>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800386e:	4b25      	ldr	r3, [pc, #148]	; (8003904 <USB_SetTurnaroundTime+0xe4>)
 8003870:	4a25      	ldr	r2, [pc, #148]	; (8003908 <USB_SetTurnaroundTime+0xe8>)
 8003872:	440b      	add	r3, r1
 8003874:	4293      	cmp	r3, r2
 8003876:	d932      	bls.n	80038de <USB_SetTurnaroundTime+0xbe>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003878:	4b24      	ldr	r3, [pc, #144]	; (800390c <USB_SetTurnaroundTime+0xec>)
 800387a:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 800387e:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8003882:	440b      	add	r3, r1
 8003884:	4293      	cmp	r3, r2
 8003886:	d92d      	bls.n	80038e4 <USB_SetTurnaroundTime+0xc4>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003888:	4b21      	ldr	r3, [pc, #132]	; (8003910 <USB_SetTurnaroundTime+0xf0>)
 800388a:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 800388e:	f502 7220 	add.w	r2, r2, #640	; 0x280
 8003892:	440b      	add	r3, r1
 8003894:	4293      	cmp	r3, r2
 8003896:	d9c5      	bls.n	8003824 <USB_SetTurnaroundTime+0x4>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003898:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 800389c:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 80038a0:	f502 7258 	add.w	r2, r2, #864	; 0x360
 80038a4:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d91e      	bls.n	80038ea <USB_SetTurnaroundTime+0xca>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80038ac:	4b19      	ldr	r3, [pc, #100]	; (8003914 <USB_SetTurnaroundTime+0xf4>)
 80038ae:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
 80038b2:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 80038b6:	440b      	add	r3, r1
 80038b8:	4293      	cmp	r3, r2
 80038ba:	bf8c      	ite	hi
 80038bc:	f44f 51c0 	movhi.w	r1, #6144	; 0x1800
 80038c0:	f44f 51e0 	movls.w	r1, #7168	; 0x1c00
 80038c4:	e7b0      	b.n	8003828 <USB_SetTurnaroundTime+0x8>
 80038c6:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80038ca:	e7ad      	b.n	8003828 <USB_SetTurnaroundTime+0x8>
 80038cc:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 80038d0:	e7aa      	b.n	8003828 <USB_SetTurnaroundTime+0x8>
 80038d2:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 80038d6:	e7a7      	b.n	8003828 <USB_SetTurnaroundTime+0x8>
 80038d8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80038dc:	e7a4      	b.n	8003828 <USB_SetTurnaroundTime+0x8>
 80038de:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 80038e2:	e7a1      	b.n	8003828 <USB_SetTurnaroundTime+0x8>
 80038e4:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 80038e8:	e79e      	b.n	8003828 <USB_SetTurnaroundTime+0x8>
 80038ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038ee:	e79b      	b.n	8003828 <USB_SetTurnaroundTime+0x8>
 80038f0:	ff275340 	.word	0xff275340
 80038f4:	000c34ff 	.word	0x000c34ff
 80038f8:	ff1b1e40 	.word	0xff1b1e40
 80038fc:	000f423f 	.word	0x000f423f
 8003900:	00124f7f 	.word	0x00124f7f
 8003904:	fee5b660 	.word	0xfee5b660
 8003908:	0016e35f 	.word	0x0016e35f
 800390c:	feced300 	.word	0xfeced300
 8003910:	feb35bc0 	.word	0xfeb35bc0
 8003914:	fe5954e0 	.word	0xfe5954e0

08003918 <USB_EnableGlobalInt>:
{
 8003918:	4602      	mov	r2, r0
}
 800391a:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800391c:	6893      	ldr	r3, [r2, #8]
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	6093      	str	r3, [r2, #8]
}
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop

08003928 <USB_DisableGlobalInt>:
{
 8003928:	4602      	mov	r2, r0
}
 800392a:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800392c:	6893      	ldr	r3, [r2, #8]
 800392e:	f023 0301 	bic.w	r3, r3, #1
 8003932:	6093      	str	r3, [r2, #8]
}
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop

08003938 <USB_SetCurrentMode>:
{
 8003938:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800393a:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800393c:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800393e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003942:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003944:	d00b      	beq.n	800395e <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 8003946:	b941      	cbnz	r1, 800395a <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003948:	68c3      	ldr	r3, [r0, #12]
 800394a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800394e:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8003950:	2032      	movs	r0, #50	; 0x32
 8003952:	f7fc fdf1 	bl	8000538 <HAL_Delay>
  return HAL_OK;
 8003956:	2000      	movs	r0, #0
}
 8003958:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 800395a:	2001      	movs	r0, #1
}
 800395c:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800395e:	68c3      	ldr	r3, [r0, #12]
 8003960:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003964:	60c3      	str	r3, [r0, #12]
 8003966:	e7f3      	b.n	8003950 <USB_SetCurrentMode+0x18>

08003968 <USB_DevInit>:
{
 8003968:	b084      	sub	sp, #16
 800396a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800396e:	ac08      	add	r4, sp, #32
 8003970:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8003974:	9e12      	ldr	r6, [sp, #72]	; 0x48
    USBx->DIEPTXF[i] = 0U;
 8003976:	2200      	movs	r2, #0
 8003978:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
{
 800397c:	4603      	mov	r3, r0
    USBx->DIEPTXF[i] = 0U;
 800397e:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
 8003982:	460f      	mov	r7, r1
 8003984:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
 8003988:	f500 6500 	add.w	r5, r0, #2048	; 0x800
 800398c:	f8c0 2110 	str.w	r2, [r0, #272]	; 0x110
 8003990:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 8003994:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
 8003998:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
 800399c:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
 80039a0:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
 80039a4:	f8c0 2128 	str.w	r2, [r0, #296]	; 0x128
 80039a8:	f8c0 212c 	str.w	r2, [r0, #300]	; 0x12c
 80039ac:	f8c0 2130 	str.w	r2, [r0, #304]	; 0x130
 80039b0:	f8c0 2134 	str.w	r2, [r0, #308]	; 0x134
 80039b4:	f8c0 2138 	str.w	r2, [r0, #312]	; 0x138
 80039b8:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 80039bc:	2e00      	cmp	r6, #0
 80039be:	f040 809a 	bne.w	8003af6 <USB_DevInit+0x18e>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80039c2:	686a      	ldr	r2, [r5, #4]
 80039c4:	f042 0202 	orr.w	r2, r2, #2
 80039c8:	606a      	str	r2, [r5, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80039ca:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80039cc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80039d0:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80039d2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80039d4:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80039d8:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80039da:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80039dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039e0:	6382      	str	r2, [r0, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80039ea:	f8d3 1800 	ldr.w	r1, [r3, #2048]	; 0x800
 80039ee:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039f2:	2a01      	cmp	r2, #1
 80039f4:	f000 8088 	beq.w	8003b08 <USB_DevInit+0x1a0>
  USBx_DEVICE->DCFG |= speed;
 80039f8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 80039fc:	f042 0203 	orr.w	r2, r2, #3
 8003a00:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a04:	f44f 6284 	mov.w	r2, #1056	; 0x420
 8003a08:	611a      	str	r2, [r3, #16]
 8003a0a:	4a4b      	ldr	r2, [pc, #300]	; (8003b38 <USB_DevInit+0x1d0>)
 8003a0c:	e002      	b.n	8003a14 <USB_DevInit+0xac>
    if (++count > 200000U)
 8003a0e:	3a01      	subs	r2, #1
 8003a10:	f000 8088 	beq.w	8003b24 <USB_DevInit+0x1bc>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a14:	6918      	ldr	r0, [r3, #16]
 8003a16:	f010 0020 	ands.w	r0, r0, #32
 8003a1a:	d1f8      	bne.n	8003a0e <USB_DevInit+0xa6>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003a1c:	2210      	movs	r2, #16
 8003a1e:	611a      	str	r2, [r3, #16]
 8003a20:	4a45      	ldr	r2, [pc, #276]	; (8003b38 <USB_DevInit+0x1d0>)
 8003a22:	e001      	b.n	8003a28 <USB_DevInit+0xc0>
    if (++count > 200000U)
 8003a24:	3a01      	subs	r2, #1
 8003a26:	d07f      	beq.n	8003b28 <USB_DevInit+0x1c0>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003a28:	6919      	ldr	r1, [r3, #16]
 8003a2a:	06c9      	lsls	r1, r1, #27
 8003a2c:	d4fa      	bmi.n	8003a24 <USB_DevInit+0xbc>
  USBx_DEVICE->DIEPMSK = 0U;
 8003a2e:	2100      	movs	r1, #0
 8003a30:	6129      	str	r1, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a32:	6169      	str	r1, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a34:	61e9      	str	r1, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a36:	b1e7      	cbz	r7, 8003a72 <USB_DevInit+0x10a>
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a38:	468c      	mov	ip, r1
 8003a3a:	f503 6210 	add.w	r2, r3, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a3e:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a42:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a46:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8003a4a:	e00a      	b.n	8003a62 <USB_DevInit+0xfa>
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a4c:	f8c2 c000 	str.w	ip, [r2]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a50:	3101      	adds	r1, #1
 8003a52:	42b9      	cmp	r1, r7
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a54:	f8c2 c010 	str.w	ip, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a58:	f8c2 e008 	str.w	lr, [r2, #8]
 8003a5c:	f102 0220 	add.w	r2, r2, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a60:	d02c      	beq.n	8003abc <USB_DevInit+0x154>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a62:	6814      	ldr	r4, [r2, #0]
 8003a64:	2c00      	cmp	r4, #0
 8003a66:	daf1      	bge.n	8003a4c <USB_DevInit+0xe4>
      if (i == 0U)
 8003a68:	2900      	cmp	r1, #0
 8003a6a:	d062      	beq.n	8003b32 <USB_DevInit+0x1ca>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a6c:	f8c2 8000 	str.w	r8, [r2]
 8003a70:	e7ee      	b.n	8003a50 <USB_DevInit+0xe8>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a72:	692a      	ldr	r2, [r5, #16]
  if (cfg.dma_enable == 0U)
 8003a74:	990b      	ldr	r1, [sp, #44]	; 0x2c
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a7a:	612a      	str	r2, [r5, #16]
  USBx->GINTMSK = 0U;
 8003a7c:	2400      	movs	r4, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a7e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 8003a82:	619c      	str	r4, [r3, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a84:	615a      	str	r2, [r3, #20]
  if (cfg.dma_enable == 0U)
 8003a86:	b919      	cbnz	r1, 8003a90 <USB_DevInit+0x128>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	f042 0210 	orr.w	r2, r2, #16
 8003a8e:	619a      	str	r2, [r3, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a90:	699c      	ldr	r4, [r3, #24]
 8003a92:	4a2a      	ldr	r2, [pc, #168]	; (8003b3c <USB_DevInit+0x1d4>)
  if (cfg.Sof_enable != 0U)
 8003a94:	990e      	ldr	r1, [sp, #56]	; 0x38
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a96:	4322      	orrs	r2, r4
 8003a98:	619a      	str	r2, [r3, #24]
  if (cfg.Sof_enable != 0U)
 8003a9a:	b119      	cbz	r1, 8003aa4 <USB_DevInit+0x13c>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a9c:	699a      	ldr	r2, [r3, #24]
 8003a9e:	f042 0208 	orr.w	r2, r2, #8
 8003aa2:	619a      	str	r2, [r3, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8003aa4:	2e01      	cmp	r6, #1
 8003aa6:	d105      	bne.n	8003ab4 <USB_DevInit+0x14c>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003aa8:	699a      	ldr	r2, [r3, #24]
 8003aaa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003aae:	f042 0204 	orr.w	r2, r2, #4
 8003ab2:	619a      	str	r2, [r3, #24]
}
 8003ab4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ab8:	b004      	add	sp, #16
 8003aba:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003abc:	2400      	movs	r4, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003abe:	46a4      	mov	ip, r4
 8003ac0:	f503 6230 	add.w	r2, r3, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ac4:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ac8:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003acc:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8003ad0:	e00a      	b.n	8003ae8 <USB_DevInit+0x180>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ad2:	f8c2 c000 	str.w	ip, [r2]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ad6:	3401      	adds	r4, #1
 8003ad8:	428c      	cmp	r4, r1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ada:	f8c2 c010 	str.w	ip, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ade:	f8c2 e008 	str.w	lr, [r2, #8]
 8003ae2:	f102 0220 	add.w	r2, r2, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ae6:	d0c4      	beq.n	8003a72 <USB_DevInit+0x10a>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ae8:	6817      	ldr	r7, [r2, #0]
 8003aea:	2f00      	cmp	r7, #0
 8003aec:	daf1      	bge.n	8003ad2 <USB_DevInit+0x16a>
      if (i == 0U)
 8003aee:	b1ec      	cbz	r4, 8003b2c <USB_DevInit+0x1c4>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003af0:	f8c2 8000 	str.w	r8, [r2]
 8003af4:	e7ef      	b.n	8003ad6 <USB_DevInit+0x16e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003af6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003af8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003afc:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003afe:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003b00:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003b04:	6382      	str	r2, [r0, #56]	; 0x38
 8003b06:	e76c      	b.n	80039e2 <USB_DevInit+0x7a>
    if (cfg.speed == USBD_HS_SPEED)
 8003b08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b0a:	b922      	cbnz	r2, 8003b16 <USB_DevInit+0x1ae>
  USBx_DEVICE->DCFG |= speed;
 8003b0c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8003b10:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 8003b14:	e776      	b.n	8003a04 <USB_DevInit+0x9c>
 8003b16:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8003b1a:	f042 0201 	orr.w	r2, r2, #1
 8003b1e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 8003b22:	e76f      	b.n	8003a04 <USB_DevInit+0x9c>
    ret = HAL_ERROR;
 8003b24:	2001      	movs	r0, #1
 8003b26:	e779      	b.n	8003a1c <USB_DevInit+0xb4>
    ret = HAL_ERROR;
 8003b28:	2001      	movs	r0, #1
 8003b2a:	e780      	b.n	8003a2e <USB_DevInit+0xc6>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b2c:	f8c2 9000 	str.w	r9, [r2]
 8003b30:	e7d1      	b.n	8003ad6 <USB_DevInit+0x16e>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b32:	f8c2 9000 	str.w	r9, [r2]
 8003b36:	e78b      	b.n	8003a50 <USB_DevInit+0xe8>
 8003b38:	00030d40 	.word	0x00030d40
 8003b3c:	803c3800 	.word	0x803c3800

08003b40 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b40:	0189      	lsls	r1, r1, #6
 8003b42:	f041 0120 	orr.w	r1, r1, #32
 8003b46:	6101      	str	r1, [r0, #16]
 8003b48:	4a05      	ldr	r2, [pc, #20]	; (8003b60 <USB_FlushTxFifo+0x20>)
 8003b4a:	e001      	b.n	8003b50 <USB_FlushTxFifo+0x10>
    if (++count > 200000U)
 8003b4c:	3a01      	subs	r2, #1
 8003b4e:	d005      	beq.n	8003b5c <USB_FlushTxFifo+0x1c>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b50:	6903      	ldr	r3, [r0, #16]
 8003b52:	f013 0320 	ands.w	r3, r3, #32
 8003b56:	d1f9      	bne.n	8003b4c <USB_FlushTxFifo+0xc>
  return HAL_OK;
 8003b58:	4618      	mov	r0, r3
 8003b5a:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003b5c:	2003      	movs	r0, #3
}
 8003b5e:	4770      	bx	lr
 8003b60:	00030d40 	.word	0x00030d40

08003b64 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003b64:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003b68:	f013 0006 	ands.w	r0, r3, #6
 8003b6c:	d004      	beq.n	8003b78 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003b6e:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 8003b72:	bf14      	ite	ne
 8003b74:	2002      	movne	r0, #2
 8003b76:	200f      	moveq	r0, #15
}
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop

08003b7c <USB_ActivateEndpoint>:
{
 8003b7c:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 8003b7e:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8003b80:	784d      	ldrb	r5, [r1, #1]
 8003b82:	f002 040f 	and.w	r4, r2, #15
 8003b86:	2301      	movs	r3, #1
 8003b88:	2d01      	cmp	r5, #1
 8003b8a:	fa03 f304 	lsl.w	r3, r3, r4
 8003b8e:	eb00 1442 	add.w	r4, r0, r2, lsl #5
 8003b92:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8003b96:	d019      	beq.n	8003bcc <USB_ActivateEndpoint+0x50>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003b98:	69c2      	ldr	r2, [r0, #28]
 8003b9a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8003b9e:	61c3      	str	r3, [r0, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003ba0:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8003ba4:	041b      	lsls	r3, r3, #16
 8003ba6:	d40e      	bmi.n	8003bc6 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ba8:	688a      	ldr	r2, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 8003baa:	78c8      	ldrb	r0, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003bac:	f8d4 1b00 	ldr.w	r1, [r4, #2816]	; 0xb00
 8003bb0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003bb4:	f042 5380 	orr.w	r3, r2, #268435456	; 0x10000000
 8003bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bbc:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	bc30      	pop	{r4, r5}
 8003bca:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003bcc:	69c5      	ldr	r5, [r0, #28]
 8003bce:	432b      	orrs	r3, r5
 8003bd0:	61c3      	str	r3, [r0, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003bd2:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8003bd6:	0418      	lsls	r0, r3, #16
 8003bd8:	d4f5      	bmi.n	8003bc6 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bda:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003bdc:	78c8      	ldrb	r0, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bde:	f8d4 1900 	ldr.w	r1, [r4, #2304]	; 0x900
 8003be2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bee:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 8003bf2:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
}
 8003bfc:	2000      	movs	r0, #0
 8003bfe:	bc30      	pop	{r4, r5}
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop

08003c04 <USB_DeactivateEndpoint>:
{
 8003c04:	b410      	push	{r4}
  if (ep->is_in == 1U)
 8003c06:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8003c08:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8003c0a:	2c01      	cmp	r4, #1
 8003c0c:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 8003c10:	d02a      	beq.n	8003c68 <USB_DeactivateEndpoint+0x64>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c12:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 8003c16:	2900      	cmp	r1, #0
 8003c18:	db19      	blt.n	8003c4e <USB_DeactivateEndpoint+0x4a>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c1a:	f003 010f 	and.w	r1, r3, #15
 8003c1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c22:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 8003c26:	408b      	lsls	r3, r1
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	401c      	ands	r4, r3
 8003c2c:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c30:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003c34:	4921      	ldr	r1, [pc, #132]	; (8003cbc <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c36:	4023      	ands	r3, r4
 8003c38:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003c3c:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
}
 8003c40:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003c44:	4019      	ands	r1, r3
}
 8003c46:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003c48:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 8003c4c:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c4e:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 8003c52:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8003c56:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003c5a:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 8003c5e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8003c62:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
 8003c66:	e7d8      	b.n	8003c1a <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c68:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 8003c6c:	2900      	cmp	r1, #0
 8003c6e:	da0b      	bge.n	8003c88 <USB_DeactivateEndpoint+0x84>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c70:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 8003c74:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8003c78:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003c7c:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 8003c80:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8003c84:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c88:	f003 010f 	and.w	r1, r3, #15
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 8003c92:	408b      	lsls	r3, r1
 8003c94:	43db      	mvns	r3, r3
 8003c96:	401c      	ands	r4, r3
 8003c98:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c9c:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003ca0:	4907      	ldr	r1, [pc, #28]	; (8003cc0 <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ca2:	4023      	ands	r3, r4
 8003ca4:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003ca8:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
}
 8003cac:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003cb0:	4019      	ands	r1, r3
}
 8003cb2:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003cb4:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
}
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	eff37800 	.word	0xeff37800
 8003cc0:	ec337800 	.word	0xec337800

08003cc4 <USB_EPStartXfer>:
{
 8003cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 8003cc8:	f891 c001 	ldrb.w	ip, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8003ccc:	780e      	ldrb	r6, [r1, #0]
 8003cce:	694b      	ldr	r3, [r1, #20]
 8003cd0:	78cf      	ldrb	r7, [r1, #3]
  if (ep->is_in == 1U)
 8003cd2:	f1bc 0f01 	cmp.w	ip, #1
 8003cd6:	eb00 1546 	add.w	r5, r0, r6, lsl #5
 8003cda:	d04e      	beq.n	8003d7a <USB_EPStartXfer+0xb6>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cdc:	f505 6430 	add.w	r4, r5, #2816	; 0xb00
 8003ce0:	6926      	ldr	r6, [r4, #16]
 8003ce2:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8003ce6:	0cf6      	lsrs	r6, r6, #19
 8003ce8:	04f6      	lsls	r6, r6, #19
 8003cea:	6126      	str	r6, [r4, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003cec:	6926      	ldr	r6, [r4, #16]
 8003cee:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8003cf2:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8003cf6:	6126      	str	r6, [r4, #16]
    if (ep->xfer_len == 0U)
 8003cf8:	b37b      	cbz	r3, 8003d5a <USB_EPStartXfer+0x96>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003cfa:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 8003ee4 <USB_EPStartXfer+0x220>
 8003cfe:	f8d4 8010 	ldr.w	r8, [r4, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003d02:	eb03 060c 	add.w	r6, r3, ip
 8003d06:	3e01      	subs	r6, #1
 8003d08:	fbb6 f6fc 	udiv	r6, r6, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003d0c:	ea0e 43c6 	and.w	r3, lr, r6, lsl #19
 8003d10:	ea43 0308 	orr.w	r3, r3, r8
 8003d14:	6123      	str	r3, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003d16:	b2b6      	uxth	r6, r6
 8003d18:	fb0c f306 	mul.w	r3, ip, r6
 8003d1c:	6926      	ldr	r6, [r4, #16]
 8003d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d22:	4333      	orrs	r3, r6
    if (dma == 1U)
 8003d24:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003d26:	6123      	str	r3, [r4, #16]
    if (dma == 1U)
 8003d28:	d022      	beq.n	8003d70 <USB_EPStartXfer+0xac>
    if (ep->type == EP_TYPE_ISOC)
 8003d2a:	2f01      	cmp	r7, #1
 8003d2c:	d10c      	bne.n	8003d48 <USB_EPStartXfer+0x84>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d2e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8003d32:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003d36:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 8003d3a:	bf0c      	ite	eq
 8003d3c:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003d40:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8003d44:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003d48:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 8003d4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d50:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
}
 8003d54:	2000      	movs	r0, #0
 8003d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003d5a:	6926      	ldr	r6, [r4, #16]
 8003d5c:	f3cc 0312 	ubfx	r3, ip, #0, #19
 8003d60:	4333      	orrs	r3, r6
 8003d62:	6123      	str	r3, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003d64:	6923      	ldr	r3, [r4, #16]
    if (dma == 1U)
 8003d66:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003d68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d6c:	6123      	str	r3, [r4, #16]
    if (dma == 1U)
 8003d6e:	d1dc      	bne.n	8003d2a <USB_EPStartXfer+0x66>
      if ((uint32_t)ep->xfer_buff != 0U)
 8003d70:	68cb      	ldr	r3, [r1, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0d9      	beq.n	8003d2a <USB_EPStartXfer+0x66>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003d76:	6163      	str	r3, [r4, #20]
 8003d78:	e7d7      	b.n	8003d2a <USB_EPStartXfer+0x66>
 8003d7a:	f505 6410 	add.w	r4, r5, #2304	; 0x900
    if (ep->xfer_len == 0U)
 8003d7e:	b3f3      	cbz	r3, 8003dfe <USB_EPStartXfer+0x13a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d80:	f8d4 8010 	ldr.w	r8, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003d84:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8003d88:	f8df e158 	ldr.w	lr, [pc, #344]	; 8003ee4 <USB_EPStartXfer+0x220>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d8c:	ea4f 48d8 	mov.w	r8, r8, lsr #19
 8003d90:	ea4f 48c8 	mov.w	r8, r8, lsl #19
 8003d94:	f8c4 8010 	str.w	r8, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d98:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8003d9c:	f028 58ff 	bic.w	r8, r8, #534773760	; 0x1fe00000
 8003da0:	f428 18c0 	bic.w	r8, r8, #1572864	; 0x180000
 8003da4:	f8c4 8010 	str.w	r8, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003da8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8003dac:	eb0a 0803 	add.w	r8, sl, r3
 8003db0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003db4:	fbb8 f8fa 	udiv	r8, r8, sl
 8003db8:	ea0e 4ec8 	and.w	lr, lr, r8, lsl #19
 8003dbc:	ea4e 0e09 	orr.w	lr, lr, r9
 8003dc0:	f8c4 e010 	str.w	lr, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003dc4:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8003dc8:	f3c3 0e12 	ubfx	lr, r3, #0, #19
 8003dcc:	ea4e 0e08 	orr.w	lr, lr, r8
      if (ep->type == EP_TYPE_ISOC)
 8003dd0:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003dd2:	f8c4 e010 	str.w	lr, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8003dd6:	d054      	beq.n	8003e82 <USB_EPStartXfer+0x1be>
    if (dma == 1U)
 8003dd8:	2a01      	cmp	r2, #1
 8003dda:	d060      	beq.n	8003e9e <USB_EPStartXfer+0x1da>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ddc:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
 8003de0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003de4:	f8c5 3900 	str.w	r3, [r5, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003de8:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8003dec:	f006 060f 	and.w	r6, r6, #15
 8003df0:	fa0c fc06 	lsl.w	ip, ip, r6
 8003df4:	ea4c 0303 	orr.w	r3, ip, r3
 8003df8:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
  return HAL_OK;
 8003dfc:	e7aa      	b.n	8003d54 <USB_EPStartXfer+0x90>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003dfe:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8003e02:	f02c 5cff 	bic.w	ip, ip, #534773760	; 0x1fe00000
 8003e06:	f42c 1cc0 	bic.w	ip, ip, #1572864	; 0x180000
 8003e0a:	f8c4 c010 	str.w	ip, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e0e:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8003e12:	f44c 2c00 	orr.w	ip, ip, #524288	; 0x80000
 8003e16:	f8c4 c010 	str.w	ip, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e1a:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8003e1e:	ea4f 4cdc 	mov.w	ip, ip, lsr #19
 8003e22:	ea4f 4ccc 	mov.w	ip, ip, lsl #19
    if (dma == 1U)
 8003e26:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e28:	f8c4 c010 	str.w	ip, [r4, #16]
    if (dma == 1U)
 8003e2c:	d037      	beq.n	8003e9e <USB_EPStartXfer+0x1da>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e2e:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8003e32:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e34:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8003e38:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8003e3c:	d18a      	bne.n	8003d54 <USB_EPStartXfer+0x90>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003e3e:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8003e42:	f414 7f80 	tst.w	r4, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003e46:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
 8003e4a:	bf0c      	ite	eq
 8003e4c:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003e50:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 8003e54:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
  if (dma == 0U)
 8003e58:	2a00      	cmp	r2, #0
 8003e5a:	f47f af7b 	bne.w	8003d54 <USB_EPStartXfer+0x90>
    count32b = ((uint32_t)len + 3U) / 4U;
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8003e62:	089a      	lsrs	r2, r3, #2
 8003e64:	f43f af76 	beq.w	8003d54 <USB_EPStartXfer+0x90>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003e68:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003e6a:	eb00 3006 	add.w	r0, r0, r6, lsl #12
 8003e6e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8003e72:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8003e76:	f853 1b04 	ldr.w	r1, [r3], #4
 8003e7a:	6001      	str	r1, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d1fa      	bne.n	8003e76 <USB_EPStartXfer+0x1b2>
 8003e80:	e768      	b.n	8003d54 <USB_EPStartXfer+0x90>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003e82:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8003e86:	f02c 4cc0 	bic.w	ip, ip, #1610612736	; 0x60000000
 8003e8a:	f8c4 c010 	str.w	ip, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003e8e:	f8d4 c010 	ldr.w	ip, [r4, #16]
    if (dma == 1U)
 8003e92:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003e94:	f04c 5c00 	orr.w	ip, ip, #536870912	; 0x20000000
 8003e98:	f8c4 c010 	str.w	ip, [r4, #16]
    if (dma == 1U)
 8003e9c:	d11a      	bne.n	8003ed4 <USB_EPStartXfer+0x210>
      if ((uint32_t)ep->dma_addr != 0U)
 8003e9e:	690b      	ldr	r3, [r1, #16]
 8003ea0:	b103      	cbz	r3, 8003ea4 <USB_EPStartXfer+0x1e0>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003ea2:	6163      	str	r3, [r4, #20]
      if (ep->type == EP_TYPE_ISOC)
 8003ea4:	2f01      	cmp	r7, #1
 8003ea6:	d10c      	bne.n	8003ec2 <USB_EPStartXfer+0x1fe>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ea8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8003eac:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003eb0:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
 8003eb4:	bf0c      	ite	eq
 8003eb6:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003eba:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	f8c5 3900 	str.w	r3, [r5, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ec2:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
 8003ec6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003eca:	f8c5 3900 	str.w	r3, [r5, #2304]	; 0x900
}
 8003ece:	2000      	movs	r0, #0
 8003ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ed4:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
 8003ed8:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8003edc:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
 8003ee0:	e7ad      	b.n	8003e3e <USB_EPStartXfer+0x17a>
 8003ee2:	bf00      	nop
 8003ee4:	1ff80000 	.word	0x1ff80000

08003ee8 <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 8003ee8:	784b      	ldrb	r3, [r1, #1]
{
 8003eea:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t epnum = (uint32_t)ep->num;
 8003eec:	780d      	ldrb	r5, [r1, #0]
 8003eee:	694e      	ldr	r6, [r1, #20]
  if (ep->is_in == 1U)
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	eb00 1445 	add.w	r4, r0, r5, lsl #5
 8003ef6:	d027      	beq.n	8003f48 <USB_EP0StartXfer+0x60>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ef8:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8003efc:	691d      	ldr	r5, [r3, #16]
 8003efe:	6888      	ldr	r0, [r1, #8]
 8003f00:	0ced      	lsrs	r5, r5, #19
 8003f02:	04ed      	lsls	r5, r5, #19
 8003f04:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003f06:	691d      	ldr	r5, [r3, #16]
 8003f08:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8003f0c:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8003f10:	611d      	str	r5, [r3, #16]
    if (ep->xfer_len > 0U)
 8003f12:	b106      	cbz	r6, 8003f16 <USB_EP0StartXfer+0x2e>
      ep->xfer_len = ep->maxpacket;
 8003f14:	6148      	str	r0, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003f16:	691d      	ldr	r5, [r3, #16]
 8003f18:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8003f1c:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003f1e:	691d      	ldr	r5, [r3, #16]
 8003f20:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8003f24:	4328      	orrs	r0, r5
    if (dma == 1U)
 8003f26:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003f28:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 8003f2a:	d008      	beq.n	8003f3e <USB_EP0StartXfer+0x56>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003f2c:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8003f30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f34:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 8003f38:	2000      	movs	r0, #0
 8003f3a:	bcf0      	pop	{r4, r5, r6, r7}
 8003f3c:	4770      	bx	lr
      if ((uint32_t)ep->xfer_buff != 0U)
 8003f3e:	68ca      	ldr	r2, [r1, #12]
 8003f40:	2a00      	cmp	r2, #0
 8003f42:	d0f3      	beq.n	8003f2c <USB_EP0StartXfer+0x44>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003f44:	615a      	str	r2, [r3, #20]
 8003f46:	e7f1      	b.n	8003f2c <USB_EP0StartXfer+0x44>
 8003f48:	f504 6310 	add.w	r3, r4, #2304	; 0x900
    if (ep->xfer_len == 0U)
 8003f4c:	b39e      	cbz	r6, 8003fb6 <USB_EP0StartXfer+0xce>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f4e:	691f      	ldr	r7, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8003f50:	f8d1 c008 	ldr.w	ip, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f54:	0cff      	lsrs	r7, r7, #19
 8003f56:	04ff      	lsls	r7, r7, #19
 8003f58:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f5a:	691f      	ldr	r7, [r3, #16]
 8003f5c:	f027 57ff 	bic.w	r7, r7, #534773760	; 0x1fe00000
 8003f60:	f427 17c0 	bic.w	r7, r7, #1572864	; 0x180000
 8003f64:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f66:	691f      	ldr	r7, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8003f68:	45b4      	cmp	ip, r6
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f6a:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
        ep->xfer_len = ep->maxpacket;
 8003f6e:	bf38      	it	cc
 8003f70:	f8c1 c014 	strcc.w	ip, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f74:	611f      	str	r7, [r3, #16]
        ep->xfer_len = ep->maxpacket;
 8003f76:	bf38      	it	cc
 8003f78:	4666      	movcc	r6, ip
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f7a:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8003f7e:	f3c6 0712 	ubfx	r7, r6, #0, #19
 8003f82:	ea47 070c 	orr.w	r7, r7, ip
    if (dma == 1U)
 8003f86:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f88:	611f      	str	r7, [r3, #16]
    if (dma == 1U)
 8003f8a:	d02d      	beq.n	8003fe8 <USB_EP0StartXfer+0x100>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f8c:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8003f90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f94:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8003f98:	2e00      	cmp	r6, #0
 8003f9a:	d0cd      	beq.n	8003f38 <USB_EP0StartXfer+0x50>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f9c:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8003fa0:	f005 050f 	and.w	r5, r5, #15
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	fa03 f505 	lsl.w	r5, r3, r5
 8003faa:	4315      	orrs	r5, r2
 8003fac:	f8c0 5834 	str.w	r5, [r0, #2100]	; 0x834
}
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	bcf0      	pop	{r4, r5, r6, r7}
 8003fb4:	4770      	bx	lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fb6:	6918      	ldr	r0, [r3, #16]
 8003fb8:	f020 50ff 	bic.w	r0, r0, #534773760	; 0x1fe00000
 8003fbc:	f420 10c0 	bic.w	r0, r0, #1572864	; 0x180000
 8003fc0:	6118      	str	r0, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fc2:	6918      	ldr	r0, [r3, #16]
 8003fc4:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8003fc8:	6118      	str	r0, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fca:	6918      	ldr	r0, [r3, #16]
 8003fcc:	0cc0      	lsrs	r0, r0, #19
 8003fce:	04c0      	lsls	r0, r0, #19
    if (dma == 1U)
 8003fd0:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fd2:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 8003fd4:	d008      	beq.n	8003fe8 <USB_EP0StartXfer+0x100>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003fd6:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8003fda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003fde:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 8003fe2:	2000      	movs	r0, #0
 8003fe4:	bcf0      	pop	{r4, r5, r6, r7}
 8003fe6:	4770      	bx	lr
      if ((uint32_t)ep->dma_addr != 0U)
 8003fe8:	690a      	ldr	r2, [r1, #16]
 8003fea:	2a00      	cmp	r2, #0
 8003fec:	d0f3      	beq.n	8003fd6 <USB_EP0StartXfer+0xee>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003fee:	615a      	str	r2, [r3, #20]
 8003ff0:	e7f1      	b.n	8003fd6 <USB_EP0StartXfer+0xee>
 8003ff2:	bf00      	nop

08003ff4 <USB_WritePacket>:
{
 8003ff4:	b410      	push	{r4}
 8003ff6:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8003ffa:	b96c      	cbnz	r4, 8004018 <USB_WritePacket+0x24>
    count32b = ((uint32_t)len + 3U) / 4U;
 8003ffc:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8003ffe:	089b      	lsrs	r3, r3, #2
 8004000:	d00a      	beq.n	8004018 <USB_WritePacket+0x24>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004002:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8004006:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800400a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800400e:	f851 2b04 	ldr.w	r2, [r1], #4
 8004012:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8004014:	428b      	cmp	r3, r1
 8004016:	d1fa      	bne.n	800400e <USB_WritePacket+0x1a>
}
 8004018:	2000      	movs	r0, #0
 800401a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800401e:	4770      	bx	lr

08004020 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004020:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 8004022:	0892      	lsrs	r2, r2, #2
 8004024:	d00d      	beq.n	8004042 <USB_ReadPacket+0x22>
{
 8004026:	b410      	push	{r4}
 8004028:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800402c:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
  uint32_t *pDest = (uint32_t *)dest;
 8004030:	4608      	mov	r0, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	f840 3b04 	str.w	r3, [r0], #4
  for (i = 0U; i < count32b; i++)
 8004038:	4282      	cmp	r2, r0
 800403a:	d1fa      	bne.n	8004032 <USB_ReadPacket+0x12>
}
 800403c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004040:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 8004042:	4608      	mov	r0, r1
}
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop

08004048 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8004048:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800404a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800404c:	2a01      	cmp	r2, #1
 800404e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004052:	d012      	beq.n	800407a <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004054:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8004058:	2a00      	cmp	r2, #0
 800405a:	db06      	blt.n	800406a <USB_EPSetStall+0x22>
 800405c:	b12b      	cbz	r3, 800406a <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800405e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004062:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004066:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800406a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800406e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004072:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8004076:	2000      	movs	r0, #0
 8004078:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800407a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800407e:	2a00      	cmp	r2, #0
 8004080:	db06      	blt.n	8004090 <USB_EPSetStall+0x48>
 8004082:	b12b      	cbz	r3, 8004090 <USB_EPSetStall+0x48>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004084:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004088:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800408c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004090:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004094:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004098:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800409c:	2000      	movs	r0, #0
 800409e:	4770      	bx	lr

080040a0 <USB_EPClearStall>:
{
 80040a0:	78cb      	ldrb	r3, [r1, #3]
 80040a2:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 80040a4:	7849      	ldrb	r1, [r1, #1]
 80040a6:	3b02      	subs	r3, #2
 80040a8:	2901      	cmp	r1, #1
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 80040b0:	d011      	beq.n	80040d6 <USB_EPClearStall+0x36>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80040b2:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80040b6:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80040b8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80040bc:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80040c0:	d901      	bls.n	80040c6 <USB_EPClearStall+0x26>
}
 80040c2:	2000      	movs	r0, #0
 80040c4:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80040c6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80040ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ce:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80040d2:	2000      	movs	r0, #0
 80040d4:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80040d6:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80040da:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80040dc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80040e0:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80040e4:	d8ed      	bhi.n	80040c2 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80040e6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80040ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ee:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80040f2:	2000      	movs	r0, #0
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop

080040f8 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80040f8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80040fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004100:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004104:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004108:	0109      	lsls	r1, r1, #4
 800410a:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 800410e:	4319      	orrs	r1, r3
 8004110:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8004114:	2000      	movs	r0, #0
 8004116:	4770      	bx	lr

08004118 <USB_DevConnect>:
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004118:	f500 6200 	add.w	r2, r0, #2048	; 0x800
{
 800411c:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800411e:	6853      	ldr	r3, [r2, #4]
 8004120:	f023 0302 	bic.w	r3, r3, #2
  HAL_Delay(3U);
 8004124:	2003      	movs	r0, #3
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004126:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004128:	f7fc fa06 	bl	8000538 <HAL_Delay>
}
 800412c:	2000      	movs	r0, #0
 800412e:	bd08      	pop	{r3, pc}

08004130 <USB_DevDisconnect>:
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004130:	f500 6200 	add.w	r2, r0, #2048	; 0x800
{
 8004134:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004136:	6853      	ldr	r3, [r2, #4]
 8004138:	f043 0302 	orr.w	r3, r3, #2
  HAL_Delay(3U);
 800413c:	2003      	movs	r0, #3
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800413e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004140:	f7fc f9fa 	bl	8000538 <HAL_Delay>
}
 8004144:	2000      	movs	r0, #0
 8004146:	bd08      	pop	{r3, pc}

08004148 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8004148:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800414a:	6980      	ldr	r0, [r0, #24]
}
 800414c:	4010      	ands	r0, r2
 800414e:	4770      	bx	lr

08004150 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8004150:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8004154:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004158:	69c0      	ldr	r0, [r0, #28]
 800415a:	4018      	ands	r0, r3
}
 800415c:	0c00      	lsrs	r0, r0, #16
 800415e:	4770      	bx	lr

08004160 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8004160:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8004164:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004168:	69c0      	ldr	r0, [r0, #28]
 800416a:	4018      	ands	r0, r3
}
 800416c:	b280      	uxth	r0, r0
 800416e:	4770      	bx	lr

08004170 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004170:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004174:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004178:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800417c:	6940      	ldr	r0, [r0, #20]
}
 800417e:	4010      	ands	r0, r2
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop

08004184 <USB_ReadDevInEPInterrupt>:
{
 8004184:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 8004186:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800418a:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800418e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004192:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004196:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800419a:	40cb      	lsrs	r3, r1
 800419c:	01db      	lsls	r3, r3, #7
 800419e:	b2db      	uxtb	r3, r3
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80041a0:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80041a2:	4323      	orrs	r3, r4
}
 80041a4:	4018      	ands	r0, r3
 80041a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80041ac:	6940      	ldr	r0, [r0, #20]
}
 80041ae:	f000 0001 	and.w	r0, r0, #1
 80041b2:	4770      	bx	lr

080041b4 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80041b4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80041b8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80041bc:	f023 0307 	bic.w	r3, r3, #7
 80041c0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80041c4:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80041c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041cc:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 80041d0:	2000      	movs	r0, #0
 80041d2:	4770      	bx	lr

080041d4 <USB_EP0_OutStart>:
{
 80041d4:	b430      	push	{r4, r5}
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80041d6:	4c12      	ldr	r4, [pc, #72]	; (8004220 <USB_EP0_OutStart+0x4c>)
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041d8:	6c05      	ldr	r5, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80041da:	42a5      	cmp	r5, r4
 80041dc:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 80041e0:	d903      	bls.n	80041ea <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041e2:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 80041e6:	2c00      	cmp	r4, #0
 80041e8:	db16      	blt.n	8004218 <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80041ea:	2400      	movs	r4, #0
 80041ec:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041ee:	691c      	ldr	r4, [r3, #16]
 80041f0:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80041f4:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80041f6:	691c      	ldr	r4, [r3, #16]
 80041f8:	f044 0418 	orr.w	r4, r4, #24
 80041fc:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80041fe:	691c      	ldr	r4, [r3, #16]
  if (dma == 1U)
 8004200:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004202:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8004206:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 8004208:	d106      	bne.n	8004218 <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800420a:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800420c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004210:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004214:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8004218:	2000      	movs	r0, #0
 800421a:	bc30      	pop	{r4, r5}
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	4f54300a 	.word	0x4f54300a

08004224 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004224:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8004228:	b183      	cbz	r3, 800424c <USBD_CDC_EP0_RxReady+0x28>
{
 800422a:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800422c:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004230:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8004234:	28ff      	cmp	r0, #255	; 0xff
 8004236:	d007      	beq.n	8004248 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800423e:	4621      	mov	r1, r4
 8004240:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8004242:	23ff      	movs	r3, #255	; 0xff
 8004244:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 8004248:	2000      	movs	r0, #0
 800424a:	bd10      	pop	{r4, pc}
 800424c:	2000      	movs	r0, #0
 800424e:	4770      	bx	lr

08004250 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004250:	2343      	movs	r3, #67	; 0x43
 8004252:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 8004254:	4800      	ldr	r0, [pc, #0]	; (8004258 <USBD_CDC_GetFSCfgDesc+0x8>)
 8004256:	4770      	bx	lr
 8004258:	20000040 	.word	0x20000040

0800425c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800425c:	2343      	movs	r3, #67	; 0x43
 800425e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8004260:	4800      	ldr	r0, [pc, #0]	; (8004264 <USBD_CDC_GetHSCfgDesc+0x8>)
 8004262:	4770      	bx	lr
 8004264:	20000084 	.word	0x20000084

08004268 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004268:	2343      	movs	r3, #67	; 0x43
 800426a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800426c:	4800      	ldr	r0, [pc, #0]	; (8004270 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800426e:	4770      	bx	lr
 8004270:	200000d4 	.word	0x200000d4

08004274 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004274:	230a      	movs	r3, #10
 8004276:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8004278:	4800      	ldr	r0, [pc, #0]	; (800427c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800427a:	4770      	bx	lr
 800427c:	200000c8 	.word	0x200000c8

08004280 <USBD_CDC_DataOut>:
{
 8004280:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004282:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8004286:	b174      	cbz	r4, 80042a6 <USBD_CDC_DataOut+0x26>
 8004288:	4605      	mov	r5, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800428a:	f002 fc1b 	bl	8006ac4 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800428e:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004292:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 800429c:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80042a0:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80042a2:	2000      	movs	r0, #0
}
 80042a4:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80042a6:	2003      	movs	r0, #3
}
 80042a8:	bd38      	pop	{r3, r4, r5, pc}
 80042aa:	bf00      	nop

080042ac <USBD_CDC_DataIn>:
{
 80042ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 80042ae:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
 80042b2:	b1a7      	cbz	r7, 80042de <USBD_CDC_DataIn+0x32>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80042b4:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 80042b8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80042bc:	4603      	mov	r3, r0
 80042be:	69ae      	ldr	r6, [r5, #24]
 80042c0:	460a      	mov	r2, r1
 80042c2:	b976      	cbnz	r6, 80042e2 <USBD_CDC_DataIn+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80042c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80042c8:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 80042cc:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 80042ce:	2400      	movs	r4, #0
 80042d0:	f8c7 4214 	str.w	r4, [r7, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80042d4:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80042d8:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80042da:	4620      	mov	r0, r4
}
 80042dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 80042de:	2003      	movs	r0, #3
}
 80042e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80042e2:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 80042e6:	ebc1 0cc1 	rsb	ip, r1, r1, lsl #3
 80042ea:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 80042ee:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 80042f2:	fbb6 f4fc 	udiv	r4, r6, ip
 80042f6:	fb0c 6414 	mls	r4, ip, r4, r6
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80042fa:	2c00      	cmp	r4, #0
 80042fc:	d1e2      	bne.n	80042c4 <USBD_CDC_DataIn+0x18>
    pdev->ep_in[epnum].total_length = 0U;
 80042fe:	61ac      	str	r4, [r5, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004300:	4623      	mov	r3, r4
 8004302:	4622      	mov	r2, r4
 8004304:	f002 fbc2 	bl	8006a8c <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8004308:	4620      	mov	r0, r4
}
 800430a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800430c <USBD_CDC_Setup>:
{
 800430c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004310:	780b      	ldrb	r3, [r1, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004312:	f8d0 82bc 	ldr.w	r8, [r0, #700]	; 0x2bc
{
 8004316:	b082      	sub	sp, #8
  uint8_t ifalt = 0U;
 8004318:	2700      	movs	r7, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800431a:	f013 0260 	ands.w	r2, r3, #96	; 0x60
{
 800431e:	460c      	mov	r4, r1
 8004320:	4606      	mov	r6, r0
  uint8_t ifalt = 0U;
 8004322:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 8004326:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800432a:	d01c      	beq.n	8004366 <USBD_CDC_Setup+0x5a>
 800432c:	2a20      	cmp	r2, #32
 800432e:	d112      	bne.n	8004356 <USBD_CDC_Setup+0x4a>
    if (req->wLength != 0U)
 8004330:	88cd      	ldrh	r5, [r1, #6]
 8004332:	f891 c001 	ldrb.w	ip, [r1, #1]
 8004336:	2d00      	cmp	r5, #0
 8004338:	d147      	bne.n	80043ca <USBD_CDC_Setup+0xbe>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800433a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800433e:	462a      	mov	r2, r5
 8004340:	4660      	mov	r0, ip
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8004346:	4628      	mov	r0, r5
}
 8004348:	b002      	add	sp, #8
 800434a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800434e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004352:	2b03      	cmp	r3, #3
 8004354:	d049      	beq.n	80043ea <USBD_CDC_Setup+0xde>
      USBD_CtlError(pdev, req);
 8004356:	4630      	mov	r0, r6
 8004358:	4621      	mov	r1, r4
 800435a:	f000 fd01 	bl	8004d60 <USBD_CtlError>
      ret = USBD_FAIL;
 800435e:	2003      	movs	r0, #3
}
 8004360:	b002      	add	sp, #8
 8004362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 8004366:	784b      	ldrb	r3, [r1, #1]
 8004368:	2b0b      	cmp	r3, #11
 800436a:	d8f4      	bhi.n	8004356 <USBD_CDC_Setup+0x4a>
 800436c:	a201      	add	r2, pc, #4	; (adr r2, 8004374 <USBD_CDC_Setup+0x68>)
 800436e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004372:	bf00      	nop
 8004374:	0800434f 	.word	0x0800434f
 8004378:	080043ad 	.word	0x080043ad
 800437c:	08004357 	.word	0x08004357
 8004380:	08004357 	.word	0x08004357
 8004384:	08004357 	.word	0x08004357
 8004388:	08004357 	.word	0x08004357
 800438c:	08004357 	.word	0x08004357
 8004390:	08004357 	.word	0x08004357
 8004394:	08004357 	.word	0x08004357
 8004398:	08004357 	.word	0x08004357
 800439c:	080043b5 	.word	0x080043b5
 80043a0:	080043a5 	.word	0x080043a5
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80043a4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d1d4      	bne.n	8004356 <USBD_CDC_Setup+0x4a>
  USBD_StatusTypeDef ret = USBD_OK;
 80043ac:	2000      	movs	r0, #0
}
 80043ae:	b002      	add	sp, #8
 80043b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80043b4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d1cc      	bne.n	8004356 <USBD_CDC_Setup+0x4a>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80043bc:	2201      	movs	r2, #1
 80043be:	f10d 0105 	add.w	r1, sp, #5
 80043c2:	f000 fcff 	bl	8004dc4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80043c6:	2000      	movs	r0, #0
 80043c8:	e7ca      	b.n	8004360 <USBD_CDC_Setup+0x54>
      if ((req->bmRequest & 0x80U) != 0U)
 80043ca:	061b      	lsls	r3, r3, #24
 80043cc:	d514      	bpl.n	80043f8 <USBD_CDC_Setup+0xec>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80043ce:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80043d2:	462a      	mov	r2, r5
 80043d4:	4660      	mov	r0, ip
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	4641      	mov	r1, r8
 80043da:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80043dc:	88e2      	ldrh	r2, [r4, #6]
 80043de:	4641      	mov	r1, r8
 80043e0:	4630      	mov	r0, r6
 80043e2:	f000 fcef 	bl	8004dc4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80043e6:	4638      	mov	r0, r7
 80043e8:	e7ba      	b.n	8004360 <USBD_CDC_Setup+0x54>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80043ea:	2202      	movs	r2, #2
 80043ec:	f10d 0106 	add.w	r1, sp, #6
 80043f0:	f000 fce8 	bl	8004dc4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80043f4:	2000      	movs	r0, #0
 80043f6:	e7b3      	b.n	8004360 <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 80043f8:	f888 c200 	strb.w	ip, [r8, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80043fc:	f888 5201 	strb.w	r5, [r8, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004400:	462a      	mov	r2, r5
 8004402:	4641      	mov	r1, r8
 8004404:	f000 fcf4 	bl	8004df0 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8004408:	4638      	mov	r0, r7
 800440a:	e7a9      	b.n	8004360 <USBD_CDC_Setup+0x54>

0800440c <USBD_CDC_DeInit>:
{
 800440c:	b538      	push	{r3, r4, r5, lr}
 800440e:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004410:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004412:	2181      	movs	r1, #129	; 0x81
 8004414:	f002 faee 	bl	80069f4 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004418:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800441a:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800441c:	4620      	mov	r0, r4
 800441e:	f002 fae9 	bl	80069f4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004422:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004426:	4620      	mov	r0, r4
 8004428:	2182      	movs	r1, #130	; 0x82
 800442a:	f002 fae3 	bl	80069f4 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800442e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004432:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 8004434:	b14b      	cbz	r3, 800444a <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004436:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800443e:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8004442:	f005 f96b 	bl	800971c <free>
    pdev->pClassData = NULL;
 8004446:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800444a:	2000      	movs	r0, #0
 800444c:	bd38      	pop	{r3, r4, r5, pc}
 800444e:	bf00      	nop

08004450 <USBD_CDC_Init>:
{
 8004450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004454:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004456:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800445a:	f005 f957 	bl	800970c <malloc>
  if (hcdc == NULL)
 800445e:	4605      	mov	r5, r0
 8004460:	2800      	cmp	r0, #0
 8004462:	d04b      	beq.n	80044fc <USBD_CDC_Init+0xac>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004464:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 8004466:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800446a:	b39b      	cbz	r3, 80044d4 <USBD_CDC_Init+0x84>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800446c:	2340      	movs	r3, #64	; 0x40
 800446e:	2181      	movs	r1, #129	; 0x81
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004470:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004472:	2202      	movs	r2, #2
 8004474:	4620      	mov	r0, r4
 8004476:	f002 faad 	bl	80069d4 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800447a:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800447c:	4631      	mov	r1, r6
 800447e:	2340      	movs	r3, #64	; 0x40
 8004480:	2202      	movs	r2, #2
 8004482:	4620      	mov	r0, r4
 8004484:	f002 faa6 	bl	80069d4 <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004488:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800448a:	2203      	movs	r2, #3
 800448c:	2182      	movs	r1, #130	; 0x82
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800448e:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004492:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004496:	4620      	mov	r0, r4
 8004498:	2308      	movs	r3, #8
 800449a:	f002 fa9b 	bl	80069d4 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800449e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80044a2:	2701      	movs	r7, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80044a4:	681b      	ldr	r3, [r3, #0]
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80044a6:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80044aa:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044ac:	f894 8010 	ldrb.w	r8, [r4, #16]
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80044b0:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
  hcdc->TxState = 0U;
 80044b4:	2600      	movs	r6, #0
 80044b6:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80044ba:	4639      	mov	r1, r7
  hcdc->RxState = 0U;
 80044bc:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80044c0:	4620      	mov	r0, r4
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044c2:	f1b8 0f00 	cmp.w	r8, #0
 80044c6:	d012      	beq.n	80044ee <USBD_CDC_Init+0x9e>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80044c8:	2340      	movs	r3, #64	; 0x40
 80044ca:	f002 faed 	bl	8006aa8 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80044ce:	4630      	mov	r0, r6
}
 80044d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80044d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044d8:	2181      	movs	r1, #129	; 0x81
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80044da:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80044dc:	2202      	movs	r2, #2
 80044de:	4620      	mov	r0, r4
 80044e0:	f002 fa78 	bl	80069d4 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80044e4:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80044e6:	4631      	mov	r1, r6
 80044e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044ec:	e7c8      	b.n	8004480 <USBD_CDC_Init+0x30>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80044ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044f2:	f002 fad9 	bl	8006aa8 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80044f6:	4640      	mov	r0, r8
}
 80044f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->pClassData = NULL;
 80044fc:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004500:	2002      	movs	r0, #2
}
 8004502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004506:	bf00      	nop

08004508 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8004508:	b119      	cbz	r1, 8004512 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800450a:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800450e:	2000      	movs	r0, #0
 8004510:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8004512:	2003      	movs	r0, #3
}
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop

08004518 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004518:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 800451c:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800451e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004522:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8004526:	4770      	bx	lr

08004528 <USBD_CDC_SetRxBuffer>:
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8004528:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
}
 800452c:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800452e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8004532:	4770      	bx	lr

08004534 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004534:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 8004538:	b192      	cbz	r2, 8004560 <USBD_CDC_TransmitPacket+0x2c>
{
 800453a:	b538      	push	{r3, r4, r5, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800453c:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8004540:	b10c      	cbz	r4, 8004546 <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004542:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8004544:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004546:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
    hcdc->TxState = 1U;
 800454a:	2501      	movs	r5, #1
 800454c:	f8c2 5214 	str.w	r5, [r2, #532]	; 0x214
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8004550:	2181      	movs	r1, #129	; 0x81
 8004552:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004556:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8004558:	f002 fa98 	bl	8006a8c <USBD_LL_Transmit>
    ret = USBD_OK;
 800455c:	4620      	mov	r0, r4
}
 800455e:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8004560:	2003      	movs	r0, #3
}
 8004562:	4770      	bx	lr

08004564 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004564:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8004568:	b18a      	cbz	r2, 800458e <USBD_CDC_ReceivePacket+0x2a>
{
 800456a:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800456c:	7c04      	ldrb	r4, [r0, #16]
 800456e:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8004572:	b12c      	cbz	r4, 8004580 <USBD_CDC_ReceivePacket+0x1c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004574:	2340      	movs	r3, #64	; 0x40
 8004576:	2101      	movs	r1, #1
 8004578:	f002 fa96 	bl	8006aa8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800457c:	2000      	movs	r0, #0
}
 800457e:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004584:	2101      	movs	r1, #1
 8004586:	f002 fa8f 	bl	8006aa8 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800458a:	4620      	mov	r0, r4
}
 800458c:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800458e:	2003      	movs	r0, #3
}
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop

08004594 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004594:	b1a0      	cbz	r0, 80045c0 <USBD_Init+0x2c>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8004596:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800459a:	b113      	cbz	r3, 80045a2 <USBD_Init+0xe>
  {
    pdev->pClass = NULL;
 800459c:	2300      	movs	r3, #0
 800459e:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80045a2:	f8d0 32cc 	ldr.w	r3, [r0, #716]	; 0x2cc
 80045a6:	b113      	cbz	r3, 80045ae <USBD_Init+0x1a>
  {
    pdev->pConfDesc = NULL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80045ae:	b109      	cbz	r1, 80045b4 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 80045b0:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80045b4:	2301      	movs	r3, #1
  pdev->id = id;
 80045b6:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 80045b8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80045bc:	f002 b9ca 	b.w	8006954 <USBD_LL_Init>

  return ret;
}
 80045c0:	2003      	movs	r0, #3
 80045c2:	4770      	bx	lr

080045c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80045c4:	b530      	push	{r4, r5, lr}
 80045c6:	b083      	sub	sp, #12
  uint16_t len = 0U;
 80045c8:	2400      	movs	r4, #0
 80045ca:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 80045ce:	b159      	cbz	r1, 80045e8 <USBD_RegisterClass+0x24>
 80045d0:	4605      	mov	r5, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80045d2:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80045d6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80045d8:	f10d 0006 	add.w	r0, sp, #6
 80045dc:	4798      	blx	r3
 80045de:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
}
 80045e2:	4620      	mov	r0, r4
 80045e4:	b003      	add	sp, #12
 80045e6:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 80045e8:	2403      	movs	r4, #3
 80045ea:	e7fa      	b.n	80045e2 <USBD_RegisterClass+0x1e>

080045ec <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80045ec:	f002 b9e4 	b.w	80069b8 <USBD_LL_Start>

080045f0 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80045f0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80045f4:	b10b      	cbz	r3, 80045fa <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4718      	bx	r3
  }

  return ret;
}
 80045fa:	2003      	movs	r0, #3
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop

08004600 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004600:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004602:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004606:	b10b      	cbz	r3, 800460c <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	4798      	blx	r3
  }

  return USBD_OK;
}
 800460c:	2000      	movs	r0, #0
 800460e:	bd08      	pop	{r3, pc}

08004610 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004610:	b538      	push	{r3, r4, r5, lr}
 8004612:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004614:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8004618:	4628      	mov	r0, r5
 800461a:	f000 fb8d 	bl	8004d38 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800461e:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 8004622:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8004626:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  pdev->ep0_state = USBD_EP0_SETUP;
 800462a:	2201      	movs	r2, #1
  switch (pdev->request.bmRequest & 0x1FU)
 800462c:	f001 031f 	and.w	r3, r1, #31
 8004630:	4293      	cmp	r3, r2
  pdev->ep0_state = USBD_EP0_SETUP;
 8004632:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8004636:	d015      	beq.n	8004664 <USBD_LL_SetupStage+0x54>
 8004638:	d30e      	bcc.n	8004658 <USBD_LL_SetupStage+0x48>
 800463a:	2b02      	cmp	r3, #2
 800463c:	d105      	bne.n	800464a <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
      break;

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800463e:	4629      	mov	r1, r5
 8004640:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8004642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004646:	f000 badd 	b.w	8004c04 <USBD_StdEPReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800464a:	4620      	mov	r0, r4
 800464c:	f001 0180 	and.w	r1, r1, #128	; 0x80
}
 8004650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004654:	f002 b9dc 	b.w	8006a10 <USBD_LL_StallEP>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004658:	4629      	mov	r1, r5
 800465a:	4620      	mov	r0, r4
}
 800465c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004660:	f000 b900 	b.w	8004864 <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004664:	4629      	mov	r1, r5
 8004666:	4620      	mov	r0, r4
}
 8004668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800466c:	f000 ba9c 	b.w	8004ba8 <USBD_StdItfReq>

08004670 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004670:	b570      	push	{r4, r5, r6, lr}
 8004672:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004674:	b931      	cbnz	r1, 8004684 <USBD_LL_DataOutStage+0x14>
 8004676:	460d      	mov	r5, r1
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004678:	f8d0 1294 	ldr.w	r1, [r0, #660]	; 0x294
 800467c:	2903      	cmp	r1, #3
 800467e:	d00c      	beq.n	800469a <USBD_LL_DataOutStage+0x2a>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004680:	2000      	movs	r0, #0
}
 8004682:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 8004684:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8004688:	6992      	ldr	r2, [r2, #24]
 800468a:	b1da      	cbz	r2, 80046c4 <USBD_LL_DataOutStage+0x54>
 800468c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004690:	2b03      	cmp	r3, #3
 8004692:	d117      	bne.n	80046c4 <USBD_LL_DataOutStage+0x54>
}
 8004694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004698:	4710      	bx	r2
 800469a:	4611      	mov	r1, r2
      if (pep->rem_length > pep->maxpacket)
 800469c:	f8d0 315c 	ldr.w	r3, [r0, #348]	; 0x15c
 80046a0:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d80f      	bhi.n	80046c8 <USBD_LL_DataOutStage+0x58>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80046a8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	b123      	cbz	r3, 80046ba <USBD_LL_DataOutStage+0x4a>
 80046b0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80046b4:	2a03      	cmp	r2, #3
 80046b6:	d100      	bne.n	80046ba <USBD_LL_DataOutStage+0x4a>
          pdev->pClass->EP0_RxReady(pdev);
 80046b8:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 80046ba:	4620      	mov	r0, r4
 80046bc:	f000 fbb0 	bl	8004e20 <USBD_CtlSendStatus>
  return USBD_OK;
 80046c0:	2000      	movs	r0, #0
 80046c2:	e7de      	b.n	8004682 <USBD_LL_DataOutStage+0x12>
    return USBD_FAIL;
 80046c4:	2003      	movs	r0, #3
}
 80046c6:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 80046c8:	1a9b      	subs	r3, r3, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80046ca:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 80046cc:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80046d0:	bf28      	it	cs
 80046d2:	461a      	movcs	r2, r3
 80046d4:	f000 fb9c 	bl	8004e10 <USBD_CtlContinueRx>
  return USBD_OK;
 80046d8:	4628      	mov	r0, r5
}
 80046da:	bd70      	pop	{r4, r5, r6, pc}

080046dc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80046dc:	b570      	push	{r4, r5, r6, lr}
 80046de:	4604      	mov	r4, r0
 80046e0:	b082      	sub	sp, #8
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80046e2:	b961      	cbnz	r1, 80046fe <USBD_LL_DataInStage+0x22>
 80046e4:	4615      	mov	r5, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80046e6:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80046ea:	2a02      	cmp	r2, #2
 80046ec:	d017      	beq.n	800471e <USBD_LL_DataInStage+0x42>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80046ee:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80046f2:	2b01      	cmp	r3, #1
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80046f4:	f04f 0000 	mov.w	r0, #0
    if (pdev->dev_test_mode == 1U)
 80046f8:	d00d      	beq.n	8004716 <USBD_LL_DataInStage+0x3a>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80046fa:	b002      	add	sp, #8
 80046fc:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 80046fe:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	b343      	cbz	r3, 8004758 <USBD_LL_DataInStage+0x7c>
 8004706:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800470a:	2a03      	cmp	r2, #3
 800470c:	d124      	bne.n	8004758 <USBD_LL_DataInStage+0x7c>
}
 800470e:	b002      	add	sp, #8
 8004710:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004714:	4718      	bx	r3
      pdev->dev_test_mode = 0U;
 8004716:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
}
 800471a:	b002      	add	sp, #8
 800471c:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 800471e:	e9d0 2607 	ldrd	r2, r6, [r0, #28]
 8004722:	42b2      	cmp	r2, r6
 8004724:	d81b      	bhi.n	800475e <USBD_LL_DataInStage+0x82>
        if ((pep->maxpacket == pep->rem_length) &&
 8004726:	d027      	beq.n	8004778 <USBD_LL_DataInStage+0x9c>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004728:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	b12b      	cbz	r3, 800473c <USBD_LL_DataInStage+0x60>
 8004730:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8004734:	2a03      	cmp	r2, #3
 8004736:	d101      	bne.n	800473c <USBD_LL_DataInStage+0x60>
            pdev->pClass->EP0_TxSent(pdev);
 8004738:	4620      	mov	r0, r4
 800473a:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800473c:	2180      	movs	r1, #128	; 0x80
 800473e:	4620      	mov	r0, r4
 8004740:	f002 f966 	bl	8006a10 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004744:	4620      	mov	r0, r4
 8004746:	f000 fb77 	bl	8004e38 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 800474a:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800474e:	2b01      	cmp	r3, #1
      pdev->dev_test_mode = 0U;
 8004750:	f04f 0000 	mov.w	r0, #0
    if (pdev->dev_test_mode == 1U)
 8004754:	d1d1      	bne.n	80046fa <USBD_LL_DataInStage+0x1e>
 8004756:	e7de      	b.n	8004716 <USBD_LL_DataInStage+0x3a>
    return USBD_FAIL;
 8004758:	2003      	movs	r0, #3
}
 800475a:	b002      	add	sp, #8
 800475c:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800475e:	1b92      	subs	r2, r2, r6
 8004760:	9101      	str	r1, [sp, #4]
 8004762:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004764:	4629      	mov	r1, r5
 8004766:	f000 fb3b 	bl	8004de0 <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800476a:	9b01      	ldr	r3, [sp, #4]
 800476c:	4620      	mov	r0, r4
 800476e:	461a      	mov	r2, r3
 8004770:	4619      	mov	r1, r3
 8004772:	f002 f999 	bl	8006aa8 <USBD_LL_PrepareReceive>
 8004776:	e7ba      	b.n	80046ee <USBD_LL_DataInStage+0x12>
            (pep->total_length >= pep->maxpacket) &&
 8004778:	6985      	ldr	r5, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800477a:	42aa      	cmp	r2, r5
 800477c:	d8d4      	bhi.n	8004728 <USBD_LL_DataInStage+0x4c>
            (pep->total_length >= pep->maxpacket) &&
 800477e:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8004782:	4295      	cmp	r5, r2
 8004784:	d2d0      	bcs.n	8004728 <USBD_LL_DataInStage+0x4c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004786:	460a      	mov	r2, r1
 8004788:	9101      	str	r1, [sp, #4]
 800478a:	f000 fb29 	bl	8004de0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800478e:	9b01      	ldr	r3, [sp, #4]
 8004790:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004794:	461a      	mov	r2, r3
 8004796:	4619      	mov	r1, r3
 8004798:	4620      	mov	r0, r4
 800479a:	f002 f985 	bl	8006aa8 <USBD_LL_PrepareReceive>
 800479e:	e7a6      	b.n	80046ee <USBD_LL_DataInStage+0x12>

080047a0 <USBD_LL_Reset>:
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 80047a0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
  pdev->ep0_state = USBD_EP0_IDLE;
 80047a4:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 80047a6:	2201      	movs	r2, #1
{
 80047a8:	b570      	push	{r4, r5, r6, lr}
 80047aa:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 80047ac:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80047b0:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 80047b4:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 80047b6:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 80047ba:	b11b      	cbz	r3, 80047c4 <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80047bc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80047c4:	2200      	movs	r2, #0
 80047c6:	2340      	movs	r3, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80047c8:	461d      	mov	r5, r3
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80047ca:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80047cc:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80047ce:	4620      	mov	r0, r4
 80047d0:	f002 f900 	bl	80069d4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80047d4:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80047d8:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80047dc:	462b      	mov	r3, r5
 80047de:	2200      	movs	r2, #0
 80047e0:	2180      	movs	r1, #128	; 0x80
 80047e2:	4620      	mov	r0, r4
 80047e4:	f002 f8f6 	bl	80069d4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80047e8:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80047ea:	6225      	str	r5, [r4, #32]

  return USBD_OK;
}
 80047ec:	2000      	movs	r0, #0
 80047ee:	bd70      	pop	{r4, r5, r6, pc}

080047f0 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80047f0:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80047f2:	2000      	movs	r0, #0
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop

080047f8 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 80047f8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80047fc:	f880 229d 	strb.w	r2, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004800:	2304      	movs	r3, #4
 8004802:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8004806:	2000      	movs	r0, #0
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop

0800480c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800480c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004810:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8004812:	bf04      	itt	eq
 8004814:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8004818:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800481c:	2000      	movs	r0, #0
 800481e:	4770      	bx	lr

08004820 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004820:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004824:	2a03      	cmp	r2, #3
 8004826:	d001      	beq.n	800482c <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8004828:	2000      	movs	r0, #0
 800482a:	4770      	bx	lr
{
 800482c:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 800482e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	b103      	cbz	r3, 8004838 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 8004836:	4798      	blx	r3
}
 8004838:	2000      	movs	r0, #0
 800483a:	bd08      	pop	{r3, pc}

0800483c <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 800483c:	2000      	movs	r0, #0
 800483e:	4770      	bx	lr

08004840 <USBD_LL_IsoOUTIncomplete>:
 8004840:	2000      	movs	r0, #0
 8004842:	4770      	bx	lr

08004844 <USBD_LL_DevConnected>:
 8004844:	2000      	movs	r0, #0
 8004846:	4770      	bx	lr

08004848 <USBD_LL_DevDisconnected>:
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;

  if (pdev->pClass != NULL)
 8004848:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800484c:	2101      	movs	r1, #1
 800484e:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 8004852:	b12a      	cbz	r2, 8004860 <USBD_LL_DevDisconnected+0x18>
{
 8004854:	b508      	push	{r3, lr}
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004856:	6852      	ldr	r2, [r2, #4]
 8004858:	7901      	ldrb	r1, [r0, #4]
 800485a:	4790      	blx	r2
  }

  return USBD_OK;
}
 800485c:	2000      	movs	r0, #0
 800485e:	bd08      	pop	{r3, pc}
 8004860:	2000      	movs	r0, #0
 8004862:	4770      	bx	lr

08004864 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004864:	b570      	push	{r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004866:	780b      	ldrb	r3, [r1, #0]
 8004868:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800486c:	2b20      	cmp	r3, #32
{
 800486e:	b082      	sub	sp, #8
 8004870:	460d      	mov	r5, r1
 8004872:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004874:	d028      	beq.n	80048c8 <USBD_StdDevReq+0x64>
 8004876:	2b40      	cmp	r3, #64	; 0x40
 8004878:	d026      	beq.n	80048c8 <USBD_StdDevReq+0x64>
 800487a:	b15b      	cbz	r3, 8004894 <USBD_StdDevReq+0x30>

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800487c:	2180      	movs	r1, #128	; 0x80
 800487e:	4620      	mov	r0, r4
 8004880:	f002 f8c6 	bl	8006a10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004884:	4620      	mov	r0, r4
 8004886:	2100      	movs	r1, #0
 8004888:	f002 f8c2 	bl	8006a10 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 800488c:	2500      	movs	r5, #0
}
 800488e:	4628      	mov	r0, r5
 8004890:	b002      	add	sp, #8
 8004892:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 8004894:	784b      	ldrb	r3, [r1, #1]
 8004896:	2b09      	cmp	r3, #9
 8004898:	d8f0      	bhi.n	800487c <USBD_StdDevReq+0x18>
 800489a:	a201      	add	r2, pc, #4	; (adr r2, 80048a0 <USBD_StdDevReq+0x3c>)
 800489c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a0:	0800493f 	.word	0x0800493f
 80048a4:	0800496f 	.word	0x0800496f
 80048a8:	0800487d 	.word	0x0800487d
 80048ac:	0800498d 	.word	0x0800498d
 80048b0:	0800487d 	.word	0x0800487d
 80048b4:	08004999 	.word	0x08004999
 80048b8:	080049db 	.word	0x080049db
 80048bc:	0800487d 	.word	0x0800487d
 80048c0:	080049f7 	.word	0x080049f7
 80048c4:	080048dd 	.word	0x080048dd
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80048c8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80048cc:	4629      	mov	r1, r5
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	4620      	mov	r0, r4
 80048d2:	4798      	blx	r3
 80048d4:	4605      	mov	r5, r0
}
 80048d6:	4628      	mov	r0, r5
 80048d8:	b002      	add	sp, #8
 80048da:	bd70      	pop	{r4, r5, r6, pc}
  cfgidx = (uint8_t)(req->wValue);
 80048dc:	788d      	ldrb	r5, [r1, #2]
 80048de:	4eb1      	ldr	r6, [pc, #708]	; (8004ba4 <USBD_StdDevReq+0x340>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80048e0:	2d01      	cmp	r5, #1
  cfgidx = (uint8_t)(req->wValue);
 80048e2:	7035      	strb	r5, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80048e4:	f200 8112 	bhi.w	8004b0c <USBD_StdDevReq+0x2a8>
  switch (pdev->dev_state)
 80048e8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	f000 8116 	beq.w	8004b1e <USBD_StdDevReq+0x2ba>
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	f040 8124 	bne.w	8004b40 <USBD_StdDevReq+0x2dc>
    if (cfgidx == 0U)
 80048f8:	2d00      	cmp	r5, #0
 80048fa:	f000 813c 	beq.w	8004b76 <USBD_StdDevReq+0x312>
    else if (cfgidx != pdev->dev_config)
 80048fe:	6841      	ldr	r1, [r0, #4]
 8004900:	2901      	cmp	r1, #1
 8004902:	f000 80ff 	beq.w	8004b04 <USBD_StdDevReq+0x2a0>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004906:	b2c9      	uxtb	r1, r1
 8004908:	f7ff fe7a 	bl	8004600 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800490c:	7831      	ldrb	r1, [r6, #0]
 800490e:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8004910:	4620      	mov	r0, r4
 8004912:	f7ff fe6d 	bl	80045f0 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8004916:	4605      	mov	r5, r0
 8004918:	2800      	cmp	r0, #0
 800491a:	f000 80f3 	beq.w	8004b04 <USBD_StdDevReq+0x2a0>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800491e:	2180      	movs	r1, #128	; 0x80
 8004920:	4620      	mov	r0, r4
 8004922:	f002 f875 	bl	8006a10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004926:	2100      	movs	r1, #0
 8004928:	4620      	mov	r0, r4
 800492a:	f002 f871 	bl	8006a10 <USBD_LL_StallEP>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800492e:	7921      	ldrb	r1, [r4, #4]
 8004930:	4620      	mov	r0, r4
 8004932:	f7ff fe65 	bl	8004600 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004936:	2302      	movs	r3, #2
 8004938:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800493c:	e7a7      	b.n	800488e <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800493e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004942:	3b01      	subs	r3, #1
 8004944:	2b02      	cmp	r3, #2
 8004946:	f04f 0203 	mov.w	r2, #3
 800494a:	d897      	bhi.n	800487c <USBD_StdDevReq+0x18>
    if (req->wLength != 0x2U)
 800494c:	88cb      	ldrh	r3, [r1, #6]
 800494e:	2b02      	cmp	r3, #2
 8004950:	d194      	bne.n	800487c <USBD_StdDevReq+0x18>
    if (pdev->dev_remote_wakeup != 0U)
 8004952:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004956:	2101      	movs	r1, #1
 8004958:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 800495a:	b103      	cbz	r3, 800495e <USBD_StdDevReq+0xfa>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800495c:	60c2      	str	r2, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800495e:	2202      	movs	r2, #2
 8004960:	f104 010c 	add.w	r1, r4, #12
 8004964:	4620      	mov	r0, r4
 8004966:	f000 fa2d 	bl	8004dc4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800496a:	2500      	movs	r5, #0
 800496c:	e78f      	b.n	800488e <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800496e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004972:	3b01      	subs	r3, #1
 8004974:	2b02      	cmp	r3, #2
 8004976:	d881      	bhi.n	800487c <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004978:	884b      	ldrh	r3, [r1, #2]
 800497a:	2b01      	cmp	r3, #1
        pdev->dev_remote_wakeup = 0U;
 800497c:	f04f 0500 	mov.w	r5, #0
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004980:	d185      	bne.n	800488e <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8004982:	f8c0 52a4 	str.w	r5, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8004986:	f000 fa4b 	bl	8004e20 <USBD_CtlSendStatus>
 800498a:	e780      	b.n	800488e <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800498c:	884b      	ldrh	r3, [r1, #2]
 800498e:	2b01      	cmp	r3, #1
 8004990:	f000 80b6 	beq.w	8004b00 <USBD_StdDevReq+0x29c>
  USBD_StatusTypeDef ret = USBD_OK;
 8004994:	2500      	movs	r5, #0
 8004996:	e77a      	b.n	800488e <USBD_StdDevReq+0x2a>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004998:	888b      	ldrh	r3, [r1, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	f47f af6e 	bne.w	800487c <USBD_StdDevReq+0x18>
 80049a0:	88ce      	ldrh	r6, [r1, #6]
 80049a2:	2e00      	cmp	r6, #0
 80049a4:	f47f af6a 	bne.w	800487c <USBD_StdDevReq+0x18>
 80049a8:	884d      	ldrh	r5, [r1, #2]
 80049aa:	2d7f      	cmp	r5, #127	; 0x7f
 80049ac:	f63f af66 	bhi.w	800487c <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049b0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80049b4:	2b03      	cmp	r3, #3
 80049b6:	f43f af61 	beq.w	800487c <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80049ba:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 80049bc:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80049c0:	f002 f856 	bl	8006a70 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80049c4:	4620      	mov	r0, r4
 80049c6:	f000 fa2b 	bl	8004e20 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80049ca:	2d00      	cmp	r5, #0
 80049cc:	f000 80e5 	beq.w	8004b9a <USBD_StdDevReq+0x336>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80049d0:	2302      	movs	r3, #2
  USBD_StatusTypeDef ret = USBD_OK;
 80049d2:	4635      	mov	r5, r6
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80049d4:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80049d8:	e759      	b.n	800488e <USBD_StdDevReq+0x2a>
      USBD_GetDescriptor(pdev, req);
 80049da:	884a      	ldrh	r2, [r1, #2]
  switch (req->wValue >> 8)
 80049dc:	0a13      	lsrs	r3, r2, #8
  uint16_t len = 0U;
 80049de:	2100      	movs	r1, #0
  switch (req->wValue >> 8)
 80049e0:	3b01      	subs	r3, #1
  uint16_t len = 0U;
 80049e2:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 80049e6:	2b06      	cmp	r3, #6
 80049e8:	d85f      	bhi.n	8004aaa <USBD_StdDevReq+0x246>
 80049ea:	e8df f003 	tbb	[pc, r3]
 80049ee:	3d52      	.short	0x3d52
 80049f0:	495e5e35 	.word	0x495e5e35
 80049f4:	18          	.byte	0x18
 80049f5:	00          	.byte	0x00
  if (req->wLength != 1U)
 80049f6:	88ca      	ldrh	r2, [r1, #6]
 80049f8:	2a01      	cmp	r2, #1
 80049fa:	f47f af3f 	bne.w	800487c <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 80049fe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f43f af3a 	beq.w	800487c <USBD_StdDevReq+0x18>
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	f240 80a6 	bls.w	8004b5a <USBD_StdDevReq+0x2f6>
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	f47f af34 	bne.w	800487c <USBD_StdDevReq+0x18>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8004a14:	1d01      	adds	r1, r0, #4
 8004a16:	f000 f9d5 	bl	8004dc4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004a1a:	2500      	movs	r5, #0
 8004a1c:	e737      	b.n	800488e <USBD_StdDevReq+0x2a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a1e:	7c03      	ldrb	r3, [r0, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d142      	bne.n	8004aaa <USBD_StdDevReq+0x246>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004a24:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004a28:	f10d 0006 	add.w	r0, sp, #6
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004a30:	2307      	movs	r3, #7
 8004a32:	7043      	strb	r3, [r0, #1]
    if (req->wLength != 0U)
 8004a34:	88eb      	ldrh	r3, [r5, #6]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d064      	beq.n	8004b04 <USBD_StdDevReq+0x2a0>
      if (len != 0U)
 8004a3a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004a3e:	2a00      	cmp	r2, #0
 8004a40:	d033      	beq.n	8004aaa <USBD_StdDevReq+0x246>
        len = MIN(len, req->wLength);
 8004a42:	4293      	cmp	r3, r2
 8004a44:	bf28      	it	cs
 8004a46:	4613      	movcs	r3, r2
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8004a48:	4601      	mov	r1, r0
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	4620      	mov	r0, r4
        len = MIN(len, req->wLength);
 8004a4e:	f8ad 3006 	strh.w	r3, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8004a52:	f000 f9b7 	bl	8004dc4 <USBD_CtlSendData>
 8004a56:	e79d      	b.n	8004994 <USBD_StdDevReq+0x130>
    switch ((uint8_t)(req->wValue))
 8004a58:	b2d2      	uxtb	r2, r2
 8004a5a:	2a05      	cmp	r2, #5
 8004a5c:	d825      	bhi.n	8004aaa <USBD_StdDevReq+0x246>
 8004a5e:	e8df f002 	tbb	[pc, r2]
 8004a62:	4920      	.short	0x4920
 8004a64:	2d373d43 	.word	0x2d373d43
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a68:	7c02      	ldrb	r2, [r0, #16]
 8004a6a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004a6e:	2a00      	cmp	r2, #0
 8004a70:	d17a      	bne.n	8004b68 <USBD_StdDevReq+0x304>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a74:	f10d 0006 	add.w	r0, sp, #6
 8004a78:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	7043      	strb	r3, [r0, #1]
 8004a7e:	e7d9      	b.n	8004a34 <USBD_StdDevReq+0x1d0>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a80:	7c03      	ldrb	r3, [r0, #16]
 8004a82:	b993      	cbnz	r3, 8004aaa <USBD_StdDevReq+0x246>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004a84:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004a88:	f10d 0006 	add.w	r0, sp, #6
 8004a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8e:	4798      	blx	r3
 8004a90:	e7d0      	b.n	8004a34 <USBD_StdDevReq+0x1d0>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004a92:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004a96:	7c00      	ldrb	r0, [r0, #16]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f10d 0106 	add.w	r1, sp, #6
 8004a9e:	4798      	blx	r3
 8004aa0:	e7c8      	b.n	8004a34 <USBD_StdDevReq+0x1d0>
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004aa2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	b96b      	cbnz	r3, 8004ac6 <USBD_StdDevReq+0x262>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004aaa:	2180      	movs	r1, #128	; 0x80
 8004aac:	4620      	mov	r0, r4
 8004aae:	f001 ffaf 	bl	8006a10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	f001 ffab 	bl	8006a10 <USBD_LL_StallEP>
 8004aba:	e76b      	b.n	8004994 <USBD_StdDevReq+0x130>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004abc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0f1      	beq.n	8004aaa <USBD_StdDevReq+0x246>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004ac6:	f10d 0106 	add.w	r1, sp, #6
 8004aca:	7c20      	ldrb	r0, [r4, #16]
 8004acc:	4798      	blx	r3
 8004ace:	e7b1      	b.n	8004a34 <USBD_StdDevReq+0x1d0>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004ad0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f5      	bne.n	8004ac6 <USBD_StdDevReq+0x262>
 8004ada:	e7e6      	b.n	8004aaa <USBD_StdDevReq+0x246>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004adc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1ef      	bne.n	8004ac6 <USBD_StdDevReq+0x262>
 8004ae6:	e7e0      	b.n	8004aaa <USBD_StdDevReq+0x246>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004ae8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1e9      	bne.n	8004ac6 <USBD_StdDevReq+0x262>
 8004af2:	e7da      	b.n	8004aaa <USBD_StdDevReq+0x246>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004af4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1e3      	bne.n	8004ac6 <USBD_StdDevReq+0x262>
 8004afe:	e7d4      	b.n	8004aaa <USBD_StdDevReq+0x246>
    pdev->dev_remote_wakeup = 1U;
 8004b00:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8004b04:	4620      	mov	r0, r4
 8004b06:	f000 f98b 	bl	8004e20 <USBD_CtlSendStatus>
 8004b0a:	e743      	b.n	8004994 <USBD_StdDevReq+0x130>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004b0c:	2180      	movs	r1, #128	; 0x80
 8004b0e:	f001 ff7f 	bl	8006a10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004b12:	4620      	mov	r0, r4
 8004b14:	2100      	movs	r1, #0
 8004b16:	f001 ff7b 	bl	8006a10 <USBD_LL_StallEP>
    return USBD_FAIL;
 8004b1a:	2503      	movs	r5, #3
 8004b1c:	e6b7      	b.n	800488e <USBD_StdDevReq+0x2a>
    if (cfgidx != 0U)
 8004b1e:	2d00      	cmp	r5, #0
 8004b20:	d0f0      	beq.n	8004b04 <USBD_StdDevReq+0x2a0>
      pdev->dev_config = cfgidx;
 8004b22:	2101      	movs	r1, #1
 8004b24:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8004b26:	f7ff fd63 	bl	80045f0 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8004b2a:	4605      	mov	r5, r0
 8004b2c:	b370      	cbz	r0, 8004b8c <USBD_StdDevReq+0x328>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004b2e:	2180      	movs	r1, #128	; 0x80
 8004b30:	4620      	mov	r0, r4
 8004b32:	f001 ff6d 	bl	8006a10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004b36:	4620      	mov	r0, r4
 8004b38:	2100      	movs	r1, #0
 8004b3a:	f001 ff69 	bl	8006a10 <USBD_LL_StallEP>
 8004b3e:	e6a6      	b.n	800488e <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004b40:	2180      	movs	r1, #128	; 0x80
 8004b42:	f001 ff65 	bl	8006a10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004b46:	2100      	movs	r1, #0
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f001 ff61 	bl	8006a10 <USBD_LL_StallEP>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004b4e:	7831      	ldrb	r1, [r6, #0]
 8004b50:	4620      	mov	r0, r4
 8004b52:	f7ff fd55 	bl	8004600 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8004b56:	2503      	movs	r5, #3
 8004b58:	e699      	b.n	800488e <USBD_StdDevReq+0x2a>
      pdev->dev_default_config = 0U;
 8004b5a:	4601      	mov	r1, r0
 8004b5c:	2500      	movs	r5, #0
 8004b5e:	f841 5f08 	str.w	r5, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8004b62:	f000 f92f 	bl	8004dc4 <USBD_CtlSendData>
 8004b66:	e692      	b.n	800488e <USBD_StdDevReq+0x2a>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6a:	f10d 0006 	add.w	r0, sp, #6
 8004b6e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004b70:	2302      	movs	r3, #2
 8004b72:	7043      	strb	r3, [r0, #1]
 8004b74:	e75e      	b.n	8004a34 <USBD_StdDevReq+0x1d0>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8004b76:	2302      	movs	r3, #2
      pdev->dev_config = cfgidx;
 8004b78:	6045      	str	r5, [r0, #4]
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8004b7a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004b7e:	4629      	mov	r1, r5
 8004b80:	f7ff fd3e 	bl	8004600 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8004b84:	4620      	mov	r0, r4
 8004b86:	f000 f94b 	bl	8004e20 <USBD_CtlSendStatus>
 8004b8a:	e680      	b.n	800488e <USBD_StdDevReq+0x2a>
        (void)USBD_CtlSendStatus(pdev);
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	f000 f947 	bl	8004e20 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004b92:	2303      	movs	r3, #3
 8004b94:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004b98:	e679      	b.n	800488e <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004ba0:	e675      	b.n	800488e <USBD_StdDevReq+0x2a>
 8004ba2:	bf00      	nop
 8004ba4:	20000204 	.word	0x20000204

08004ba8 <USBD_StdItfReq>:
{
 8004ba8:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004baa:	780b      	ldrb	r3, [r1, #0]
 8004bac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004bb0:	2b20      	cmp	r3, #32
{
 8004bb2:	460d      	mov	r5, r1
 8004bb4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004bb6:	d00d      	beq.n	8004bd4 <USBD_StdItfReq+0x2c>
 8004bb8:	2b40      	cmp	r3, #64	; 0x40
 8004bba:	d00b      	beq.n	8004bd4 <USBD_StdItfReq+0x2c>
 8004bbc:	b153      	cbz	r3, 8004bd4 <USBD_StdItfReq+0x2c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004bbe:	2180      	movs	r1, #128	; 0x80
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	f001 ff25 	bl	8006a10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	2100      	movs	r1, #0
 8004bca:	f001 ff21 	bl	8006a10 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 8004bce:	2600      	movs	r6, #0
}
 8004bd0:	4630      	mov	r0, r6
 8004bd2:	bd70      	pop	{r4, r5, r6, pc}
    switch (pdev->dev_state)
 8004bd4:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d8ef      	bhi.n	8004bbe <USBD_StdItfReq+0x16>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004bde:	792b      	ldrb	r3, [r5, #4]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d8ec      	bhi.n	8004bbe <USBD_StdItfReq+0x16>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004be4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004be8:	4629      	mov	r1, r5
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	4620      	mov	r0, r4
 8004bee:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8004bf0:	88eb      	ldrh	r3, [r5, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004bf2:	4606      	mov	r6, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1eb      	bne.n	8004bd0 <USBD_StdItfReq+0x28>
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	d1e9      	bne.n	8004bd0 <USBD_StdItfReq+0x28>
          (void)USBD_CtlSendStatus(pdev);
 8004bfc:	4620      	mov	r0, r4
 8004bfe:	f000 f90f 	bl	8004e20 <USBD_CtlSendStatus>
 8004c02:	e7e5      	b.n	8004bd0 <USBD_StdItfReq+0x28>

08004c04 <USBD_StdEPReq>:
{
 8004c04:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c06:	780b      	ldrb	r3, [r1, #0]
 8004c08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c0c:	2b20      	cmp	r3, #32
{
 8004c0e:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c10:	d027      	beq.n	8004c62 <USBD_StdEPReq+0x5e>
 8004c12:	2b40      	cmp	r3, #64	; 0x40
 8004c14:	d025      	beq.n	8004c62 <USBD_StdEPReq+0x5e>
 8004c16:	460c      	mov	r4, r1
 8004c18:	b14b      	cbz	r3, 8004c2e <USBD_StdEPReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004c1a:	2180      	movs	r1, #128	; 0x80
 8004c1c:	4628      	mov	r0, r5
 8004c1e:	f001 fef7 	bl	8006a10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004c22:	4628      	mov	r0, r5
 8004c24:	2100      	movs	r1, #0
 8004c26:	f001 fef3 	bl	8006a10 <USBD_LL_StallEP>
}
 8004c2a:	2000      	movs	r0, #0
 8004c2c:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 8004c2e:	784b      	ldrb	r3, [r1, #1]
  ep_addr = LOBYTE(req->wIndex);
 8004c30:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 8004c32:	2b01      	cmp	r3, #1
  ep_addr = LOBYTE(req->wIndex);
 8004c34:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8004c36:	d042      	beq.n	8004cbe <USBD_StdEPReq+0xba>
 8004c38:	d31a      	bcc.n	8004c70 <USBD_StdEPReq+0x6c>
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d1ed      	bne.n	8004c1a <USBD_StdEPReq+0x16>
      switch (pdev->dev_state)
 8004c3e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d052      	beq.n	8004cec <USBD_StdEPReq+0xe8>
 8004c46:	2b03      	cmp	r3, #3
 8004c48:	d1e7      	bne.n	8004c1a <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004c4a:	8863      	ldrh	r3, [r4, #2]
 8004c4c:	b92b      	cbnz	r3, 8004c5a <USBD_StdEPReq+0x56>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004c4e:	064a      	lsls	r2, r1, #25
 8004c50:	d003      	beq.n	8004c5a <USBD_StdEPReq+0x56>
 8004c52:	88e3      	ldrh	r3, [r4, #6]
 8004c54:	b90b      	cbnz	r3, 8004c5a <USBD_StdEPReq+0x56>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8004c56:	f001 fedb 	bl	8006a10 <USBD_LL_StallEP>
        (void)USBD_CtlSendStatus(pdev);
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	f000 f8e0 	bl	8004e20 <USBD_CtlSendStatus>
        break;
 8004c60:	e7e3      	b.n	8004c2a <USBD_StdEPReq+0x26>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004c62:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8004c66:	4628      	mov	r0, r5
 8004c68:	689b      	ldr	r3, [r3, #8]
}
 8004c6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004c6e:	4718      	bx	r3
      switch (pdev->dev_state)
 8004c70:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d042      	beq.n	8004cfe <USBD_StdEPReq+0xfa>
 8004c78:	2b03      	cmp	r3, #3
 8004c7a:	d1ce      	bne.n	8004c1a <USBD_StdEPReq+0x16>
 8004c7c:	f001 030f 	and.w	r3, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004c80:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        if ((ep_addr & 0x80U) == 0x80U)
 8004c84:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004c86:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if ((ep_addr & 0x80U) == 0x80U)
 8004c8a:	d447      	bmi.n	8004d1c <USBD_StdEPReq+0x118>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004c8c:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0c2      	beq.n	8004c1a <USBD_StdEPReq+0x16>
 8004c94:	f001 037f 	and.w	r3, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004c98:	2414      	movs	r4, #20
 8004c9a:	fb04 0403 	mla	r4, r4, r3, r0
 8004c9e:	f504 74aa 	add.w	r4, r4, #340	; 0x154
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004ca2:	b12b      	cbz	r3, 8004cb0 <USBD_StdEPReq+0xac>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	f001 fecf 	bl	8006a48 <USBD_LL_IsStallEP>
 8004caa:	2800      	cmp	r0, #0
 8004cac:	d042      	beq.n	8004d34 <USBD_StdEPReq+0x130>
            pep->status = 0x0001U;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	6023      	str	r3, [r4, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004cb2:	4621      	mov	r1, r4
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f000 f884 	bl	8004dc4 <USBD_CtlSendData>
          break;
 8004cbc:	e7b5      	b.n	8004c2a <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 8004cbe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d012      	beq.n	8004cec <USBD_StdEPReq+0xe8>
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d1a7      	bne.n	8004c1a <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004cca:	8863      	ldrh	r3, [r4, #2]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1ac      	bne.n	8004c2a <USBD_StdEPReq+0x26>
          if ((ep_addr & 0x7FU) != 0x00U)
 8004cd0:	064e      	lsls	r6, r1, #25
 8004cd2:	d001      	beq.n	8004cd8 <USBD_StdEPReq+0xd4>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004cd4:	f001 feaa 	bl	8006a2c <USBD_LL_ClearStallEP>
          (void)USBD_CtlSendStatus(pdev);
 8004cd8:	4628      	mov	r0, r5
 8004cda:	f000 f8a1 	bl	8004e20 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004cde:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	4798      	blx	r3
 8004cea:	e79e      	b.n	8004c2a <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004cec:	064b      	lsls	r3, r1, #25
 8004cee:	d094      	beq.n	8004c1a <USBD_StdEPReq+0x16>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8004cf0:	f001 fe8e 	bl	8006a10 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	2180      	movs	r1, #128	; 0x80
 8004cf8:	f001 fe8a 	bl	8006a10 <USBD_LL_StallEP>
 8004cfc:	e795      	b.n	8004c2a <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004cfe:	0648      	lsls	r0, r1, #25
 8004d00:	d18b      	bne.n	8004c1a <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004d02:	0611      	lsls	r1, r2, #24
 8004d04:	bf4c      	ite	mi
 8004d06:	f105 0114 	addmi.w	r1, r5, #20
 8004d0a:	f505 71aa 	addpl.w	r1, r5, #340	; 0x154
        pep->status = 0x0000U;
 8004d0e:	2300      	movs	r3, #0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004d10:	4628      	mov	r0, r5
        pep->status = 0x0000U;
 8004d12:	600b      	str	r3, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004d14:	2202      	movs	r2, #2
 8004d16:	f000 f855 	bl	8004dc4 <USBD_CtlSendData>
        break;
 8004d1a:	e786      	b.n	8004c2a <USBD_StdEPReq+0x26>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004d1c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	f43f af7b 	beq.w	8004c1a <USBD_StdEPReq+0x16>
 8004d24:	f001 037f 	and.w	r3, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004d28:	1c5c      	adds	r4, r3, #1
 8004d2a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004d2e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8004d32:	e7b6      	b.n	8004ca2 <USBD_StdEPReq+0x9e>
            pep->status = 0x0000U;
 8004d34:	6020      	str	r0, [r4, #0]
 8004d36:	e7bc      	b.n	8004cb2 <USBD_StdEPReq+0xae>

08004d38 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8004d38:	780b      	ldrb	r3, [r1, #0]
 8004d3a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8004d3c:	784b      	ldrb	r3, [r1, #1]
 8004d3e:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004d40:	78ca      	ldrb	r2, [r1, #3]
 8004d42:	788b      	ldrb	r3, [r1, #2]
 8004d44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8004d48:	8043      	strh	r3, [r0, #2]
 8004d4a:	794a      	ldrb	r2, [r1, #5]
 8004d4c:	790b      	ldrb	r3, [r1, #4]
 8004d4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8004d52:	8083      	strh	r3, [r0, #4]
 8004d54:	79ca      	ldrb	r2, [r1, #7]
 8004d56:	798b      	ldrb	r3, [r1, #6]
 8004d58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8004d5c:	80c3      	strh	r3, [r0, #6]
}
 8004d5e:	4770      	bx	lr

08004d60 <USBD_CtlError>:
{
 8004d60:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004d62:	2180      	movs	r1, #128	; 0x80
{
 8004d64:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004d66:	f001 fe53 	bl	8006a10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	2100      	movs	r1, #0
}
 8004d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8004d72:	f001 be4d 	b.w	8006a10 <USBD_LL_StallEP>
 8004d76:	bf00      	nop

08004d78 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8004d78:	b300      	cbz	r0, 8004dbc <USBD_GetString+0x44>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8004d7a:	7803      	ldrb	r3, [r0, #0]
{
 8004d7c:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 8004d7e:	b1f3      	cbz	r3, 8004dbe <USBD_GetString+0x46>
 8004d80:	4604      	mov	r4, r0
  uint8_t  len = 0U;
 8004d82:	2300      	movs	r3, #0
  while (*pbuff != (uint8_t)'\0')
 8004d84:	f814 5f01 	ldrb.w	r5, [r4, #1]!
  {
    len++;
 8004d88:	3301      	adds	r3, #1
 8004d8a:	b2db      	uxtb	r3, r3
  while (*pbuff != (uint8_t)'\0')
 8004d8c:	2d00      	cmp	r5, #0
 8004d8e:	d1f9      	bne.n	8004d84 <USBD_GetString+0xc>
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	3302      	adds	r3, #2
  unicode[idx] = USB_DESC_TYPE_STRING;
 8004d94:	2403      	movs	r4, #3
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8004d96:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 8004d98:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8004d9a:	704c      	strb	r4, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 8004d9c:	7804      	ldrb	r4, [r0, #0]
 8004d9e:	b15c      	cbz	r4, 8004db8 <USBD_GetString+0x40>
  idx++;
 8004da0:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 8004da2:	2500      	movs	r5, #0
    idx++;
 8004da4:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 8004da6:	b2d2      	uxtb	r2, r2
    unicode[idx] = *pdesc;
 8004da8:	54cc      	strb	r4, [r1, r3]
    unicode[idx] = 0U;
 8004daa:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 8004dac:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    idx++;
 8004db0:	3302      	adds	r3, #2
 8004db2:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8004db4:	2c00      	cmp	r4, #0
 8004db6:	d1f5      	bne.n	8004da4 <USBD_GetString+0x2c>
}
 8004db8:	bc30      	pop	{r4, r5}
 8004dba:	4770      	bx	lr
 8004dbc:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e7e8      	b.n	8004d94 <USBD_GetString+0x1c>
 8004dc2:	bf00      	nop

08004dc4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004dc8:	2502      	movs	r5, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004dca:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length = len;
 8004dcc:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004dd0:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	f001 fe59 	bl	8006a8c <USBD_LL_Transmit>

  return USBD_OK;
}
 8004dda:	2000      	movs	r0, #0
 8004ddc:	bd38      	pop	{r3, r4, r5, pc}
 8004dde:	bf00      	nop

08004de0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8004de0:	b508      	push	{r3, lr}
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004de2:	4613      	mov	r3, r2
 8004de4:	460a      	mov	r2, r1
 8004de6:	2100      	movs	r1, #0
 8004de8:	f001 fe50 	bl	8006a8c <USBD_LL_Transmit>

  return USBD_OK;
}
 8004dec:	2000      	movs	r0, #0
 8004dee:	bd08      	pop	{r3, pc}

08004df0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8004df0:	b538      	push	{r3, r4, r5, lr}
 8004df2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004df4:	2503      	movs	r5, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004df6:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
 8004df8:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8004dfc:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004e00:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004e04:	2100      	movs	r1, #0
 8004e06:	f001 fe4f 	bl	8006aa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	bd38      	pop	{r3, r4, r5, pc}
 8004e0e:	bf00      	nop

08004e10 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8004e10:	b508      	push	{r3, lr}
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004e12:	4613      	mov	r3, r2
 8004e14:	460a      	mov	r2, r1
 8004e16:	2100      	movs	r1, #0
 8004e18:	f001 fe46 	bl	8006aa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	bd08      	pop	{r3, pc}

08004e20 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004e20:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004e22:	2204      	movs	r2, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004e24:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004e26:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	f001 fe2d 	bl	8006a8c <USBD_LL_Transmit>

  return USBD_OK;
}
 8004e32:	2000      	movs	r0, #0
 8004e34:	bd08      	pop	{r3, pc}
 8004e36:	bf00      	nop

08004e38 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004e38:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004e3a:	2205      	movs	r2, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004e3c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004e3e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004e42:	4619      	mov	r1, r3
 8004e44:	461a      	mov	r2, r3
 8004e46:	f001 fe2f 	bl	8006aa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	bd08      	pop	{r3, pc}
 8004e4e:	bf00      	nop

08004e50 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004e50:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8004e52:	f000 fb15 	bl	8005480 <vTaskStartScheduler>
  
  return osOK;
}
 8004e56:	2000      	movs	r0, #0
 8004e58:	bd08      	pop	{r3, pc}
 8004e5a:	bf00      	nop

08004e5c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004e5c:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004e5e:	6945      	ldr	r5, [r0, #20]
 8004e60:	6902      	ldr	r2, [r0, #16]
 8004e62:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 8004e66:	460b      	mov	r3, r1
 8004e68:	b086      	sub	sp, #24
 8004e6a:	e9d0 1600 	ldrd	r1, r6, [r0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004e6e:	b16d      	cbz	r5, 8004e8c <osThreadCreate+0x30>
 8004e70:	6980      	ldr	r0, [r0, #24]
 8004e72:	b158      	cbz	r0, 8004e8c <osThreadCreate+0x30>
  if (priority != osPriorityError) {
 8004e74:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8004e76:	bf14      	ite	ne
 8004e78:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004e7a:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e7c:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8004e80:	9400      	str	r4, [sp, #0]
 8004e82:	4630      	mov	r0, r6
 8004e84:	f000 fa18 	bl	80052b8 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 8004e88:	b006      	add	sp, #24
 8004e8a:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8004e8c:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8004e8e:	bf14      	ite	ne
 8004e90:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004e92:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e94:	ad05      	add	r5, sp, #20
 8004e96:	b292      	uxth	r2, r2
 8004e98:	9400      	str	r4, [sp, #0]
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	9501      	str	r5, [sp, #4]
 8004e9e:	f000 fa43 	bl	8005328 <xTaskCreate>
 8004ea2:	2801      	cmp	r0, #1
 8004ea4:	bf0c      	ite	eq
 8004ea6:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 8004ea8:	2000      	movne	r0, #0
}
 8004eaa:	b006      	add	sp, #24
 8004eac:	bd70      	pop	{r4, r5, r6, pc}
 8004eae:	bf00      	nop

08004eb0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004eb0:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	bf08      	it	eq
 8004eb6:	2001      	moveq	r0, #1
 8004eb8:	f000 fc82 	bl	80057c0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	bd08      	pop	{r3, pc}

08004ec0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ec0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ec4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ec8:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004eca:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ecc:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ece:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ed0:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop

08004ed8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop

08004ee0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ee0:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004ee2:	6802      	ldr	r2, [r0, #0]
{
 8004ee4:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ee6:	689c      	ldr	r4, [r3, #8]
 8004ee8:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004eea:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8004eec:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8004eee:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ef0:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ef2:	6099      	str	r1, [r3, #8]
}
 8004ef4:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8004ef8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004efa:	6002      	str	r2, [r0, #0]
}
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop

08004f00 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f00:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f02:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f04:	1c6b      	adds	r3, r5, #1
 8004f06:	d011      	beq.n	8004f2c <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f08:	f100 0208 	add.w	r2, r0, #8
 8004f0c:	e000      	b.n	8004f10 <vListInsert+0x10>
 8004f0e:	461a      	mov	r2, r3
 8004f10:	6853      	ldr	r3, [r2, #4]
 8004f12:	681c      	ldr	r4, [r3, #0]
 8004f14:	42ac      	cmp	r4, r5
 8004f16:	d9fa      	bls.n	8004f0e <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004f18:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f1a:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8004f1c:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f1e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f20:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f22:	6051      	str	r1, [r2, #4]
	pxNewListItem->pxContainer = pxList;
 8004f24:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004f26:	6004      	str	r4, [r0, #0]
}
 8004f28:	bc30      	pop	{r4, r5}
 8004f2a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f2c:	6902      	ldr	r2, [r0, #16]
 8004f2e:	6853      	ldr	r3, [r2, #4]
 8004f30:	e7f2      	b.n	8004f18 <vListInsert+0x18>
 8004f32:	bf00      	nop

08004f34 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f34:	6842      	ldr	r2, [r0, #4]
 8004f36:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = pxItemToRemove->pxContainer;
 8004f38:	6903      	ldr	r3, [r0, #16]
{
 8004f3a:	b410      	push	{r4}
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f3c:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f3e:	6881      	ldr	r1, [r0, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f40:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f42:	604a      	str	r2, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8004f44:	681a      	ldr	r2, [r3, #0]
	if( pxList->pxIndex == pxItemToRemove )
 8004f46:	4284      	cmp	r4, r0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f48:	bf08      	it	eq
 8004f4a:	6059      	streq	r1, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8004f4c:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 8004f4e:	2100      	movs	r1, #0
 8004f50:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004f52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f54:	6818      	ldr	r0, [r3, #0]
}
 8004f56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f60:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f62:	f000 fcf7 	bl	8005954 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f66:	4a35      	ldr	r2, [pc, #212]	; (800503c <prvAddNewTaskToReadyList+0xe0>)
		if( pxCurrentTCB == NULL )
 8004f68:	4d35      	ldr	r5, [pc, #212]	; (8005040 <prvAddNewTaskToReadyList+0xe4>)
		uxCurrentNumberOfTasks++;
 8004f6a:	6813      	ldr	r3, [r2, #0]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f70:	682b      	ldr	r3, [r5, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d034      	beq.n	8004fe0 <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f76:	4f33      	ldr	r7, [pc, #204]	; (8005044 <prvAddNewTaskToReadyList+0xe8>)
 8004f78:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	b343      	cbz	r3, 8004fd0 <prvAddNewTaskToReadyList+0x74>
 8004f7e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8005068 <prvAddNewTaskToReadyList+0x10c>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f82:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 800506c <prvAddNewTaskToReadyList+0x110>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f86:	4e30      	ldr	r6, [pc, #192]	; (8005048 <prvAddNewTaskToReadyList+0xec>)
		uxTaskNumber++;
 8004f88:	f8dc 2000 	ldr.w	r2, [ip]
		prvAddTaskToReadyList( pxNewTCB );
 8004f8c:	6831      	ldr	r1, [r6, #0]
 8004f8e:	2301      	movs	r3, #1
 8004f90:	4083      	lsls	r3, r0
 8004f92:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004f96:	430b      	orrs	r3, r1
		uxTaskNumber++;
 8004f98:	3201      	adds	r2, #1
		prvAddTaskToReadyList( pxNewTCB );
 8004f9a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8004f9e:	1d21      	adds	r1, r4, #4
 8004fa0:	6033      	str	r3, [r6, #0]
		uxTaskNumber++;
 8004fa2:	f8cc 2000 	str.w	r2, [ip]
		prvAddTaskToReadyList( pxNewTCB );
 8004fa6:	f7ff ff9b 	bl	8004ee0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004faa:	f000 fcf5 	bl	8005998 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	b163      	cbz	r3, 8004fcc <prvAddNewTaskToReadyList+0x70>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004fb2:	682a      	ldr	r2, [r5, #0]
 8004fb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004fb6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d207      	bcs.n	8004fcc <prvAddNewTaskToReadyList+0x70>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004fbc:	4b23      	ldr	r3, [pc, #140]	; (800504c <prvAddNewTaskToReadyList+0xf0>)
 8004fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004fd0:	682b      	ldr	r3, [r5, #0]
 8004fd2:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8005068 <prvAddNewTaskToReadyList+0x10c>
 8004fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd8:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8004fda:	bf98      	it	ls
 8004fdc:	602c      	strls	r4, [r5, #0]
 8004fde:	e7d0      	b.n	8004f82 <prvAddNewTaskToReadyList+0x26>
			pxCurrentTCB = pxNewTCB;
 8004fe0:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004fe2:	6813      	ldr	r3, [r2, #0]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d004      	beq.n	8004ff2 <prvAddNewTaskToReadyList+0x96>
 8004fe8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004fea:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8005068 <prvAddNewTaskToReadyList+0x10c>
 8004fee:	4f15      	ldr	r7, [pc, #84]	; (8005044 <prvAddNewTaskToReadyList+0xe8>)
 8004ff0:	e7c7      	b.n	8004f82 <prvAddNewTaskToReadyList+0x26>
 8004ff2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8005068 <prvAddNewTaskToReadyList+0x10c>
 8004ff6:	4646      	mov	r6, r8
 8004ff8:	f108 078c 	add.w	r7, r8, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	3614      	adds	r6, #20
 8005000:	f7ff ff5e 	bl	8004ec0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005004:	42b7      	cmp	r7, r6
 8005006:	d1f9      	bne.n	8004ffc <prvAddNewTaskToReadyList+0xa0>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005008:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8005070 <prvAddNewTaskToReadyList+0x114>
	vListInitialise( &xDelayedTaskList2 );
 800500c:	4e10      	ldr	r6, [pc, #64]	; (8005050 <prvAddNewTaskToReadyList+0xf4>)
 800500e:	4f0d      	ldr	r7, [pc, #52]	; (8005044 <prvAddNewTaskToReadyList+0xe8>)
	vListInitialise( &xDelayedTaskList1 );
 8005010:	4648      	mov	r0, r9
 8005012:	f7ff ff55 	bl	8004ec0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005016:	4630      	mov	r0, r6
 8005018:	f7ff ff52 	bl	8004ec0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800501c:	480d      	ldr	r0, [pc, #52]	; (8005054 <prvAddNewTaskToReadyList+0xf8>)
 800501e:	f7ff ff4f 	bl	8004ec0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005022:	480d      	ldr	r0, [pc, #52]	; (8005058 <prvAddNewTaskToReadyList+0xfc>)
 8005024:	f7ff ff4c 	bl	8004ec0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005028:	480c      	ldr	r0, [pc, #48]	; (800505c <prvAddNewTaskToReadyList+0x100>)
 800502a:	f7ff ff49 	bl	8004ec0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800502e:	4a0c      	ldr	r2, [pc, #48]	; (8005060 <prvAddNewTaskToReadyList+0x104>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005030:	4b0c      	ldr	r3, [pc, #48]	; (8005064 <prvAddNewTaskToReadyList+0x108>)
	pxDelayedTaskList = &xDelayedTaskList1;
 8005032:	f8c2 9000 	str.w	r9, [r2]
 8005036:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005038:	601e      	str	r6, [r3, #0]
 800503a:	e7a2      	b.n	8004f82 <prvAddNewTaskToReadyList+0x26>
 800503c:	200002a0 	.word	0x200002a0
 8005040:	20000208 	.word	0x20000208
 8005044:	200002fc 	.word	0x200002fc
 8005048:	200002b4 	.word	0x200002b4
 800504c:	e000ed04 	.word	0xe000ed04
 8005050:	200002cc 	.word	0x200002cc
 8005054:	200002e8 	.word	0x200002e8
 8005058:	20000314 	.word	0x20000314
 800505c:	20000300 	.word	0x20000300
 8005060:	2000020c 	.word	0x2000020c
 8005064:	20000210 	.word	0x20000210
 8005068:	20000214 	.word	0x20000214
 800506c:	200002b0 	.word	0x200002b0
 8005070:	200002b8 	.word	0x200002b8

08005074 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005078:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800507a:	9d08      	ldr	r5, [sp, #32]
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800507c:	6b26      	ldr	r6, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800507e:	9f09      	ldr	r7, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005080:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005084:	3a01      	subs	r2, #1
 8005086:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800508a:	4680      	mov	r8, r0
 800508c:	469a      	mov	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800508e:	f026 0907 	bic.w	r9, r6, #7
	if( pcName != NULL )
 8005092:	2900      	cmp	r1, #0
 8005094:	d076      	beq.n	8005184 <prvInitialiseNewTask.isra.2+0x110>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005096:	780b      	ldrb	r3, [r1, #0]
 8005098:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800509c:	780b      	ldrb	r3, [r1, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d04d      	beq.n	800513e <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050a2:	784b      	ldrb	r3, [r1, #1]
 80050a4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 80050a8:	784b      	ldrb	r3, [r1, #1]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d047      	beq.n	800513e <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050ae:	788b      	ldrb	r3, [r1, #2]
 80050b0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 80050b4:	788b      	ldrb	r3, [r1, #2]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d041      	beq.n	800513e <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050ba:	78cb      	ldrb	r3, [r1, #3]
 80050bc:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 80050c0:	78cb      	ldrb	r3, [r1, #3]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d03b      	beq.n	800513e <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050c6:	790b      	ldrb	r3, [r1, #4]
 80050c8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 80050cc:	790b      	ldrb	r3, [r1, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d035      	beq.n	800513e <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050d2:	794b      	ldrb	r3, [r1, #5]
 80050d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 80050d8:	794b      	ldrb	r3, [r1, #5]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d02f      	beq.n	800513e <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050de:	798b      	ldrb	r3, [r1, #6]
 80050e0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 80050e4:	798b      	ldrb	r3, [r1, #6]
 80050e6:	b353      	cbz	r3, 800513e <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050e8:	79cb      	ldrb	r3, [r1, #7]
 80050ea:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 80050ee:	79cb      	ldrb	r3, [r1, #7]
 80050f0:	b32b      	cbz	r3, 800513e <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050f2:	7a0b      	ldrb	r3, [r1, #8]
 80050f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 80050f8:	7a0b      	ldrb	r3, [r1, #8]
 80050fa:	b303      	cbz	r3, 800513e <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050fc:	7a4b      	ldrb	r3, [r1, #9]
 80050fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 8005102:	7a4b      	ldrb	r3, [r1, #9]
 8005104:	b1db      	cbz	r3, 800513e <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005106:	7a8b      	ldrb	r3, [r1, #10]
 8005108:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 800510c:	7a8b      	ldrb	r3, [r1, #10]
 800510e:	b1b3      	cbz	r3, 800513e <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005110:	7acb      	ldrb	r3, [r1, #11]
 8005112:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 8005116:	7acb      	ldrb	r3, [r1, #11]
 8005118:	b18b      	cbz	r3, 800513e <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800511a:	7b0b      	ldrb	r3, [r1, #12]
 800511c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 8005120:	7b0b      	ldrb	r3, [r1, #12]
 8005122:	b163      	cbz	r3, 800513e <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005124:	7b4b      	ldrb	r3, [r1, #13]
 8005126:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 800512a:	7b4b      	ldrb	r3, [r1, #13]
 800512c:	b13b      	cbz	r3, 800513e <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800512e:	7b8b      	ldrb	r3, [r1, #14]
 8005130:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
 8005134:	7b8b      	ldrb	r3, [r1, #14]
 8005136:	b113      	cbz	r3, 800513e <prvInitialiseNewTask.isra.2+0xca>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005138:	7bcb      	ldrb	r3, [r1, #15]
 800513a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800513e:	2300      	movs	r3, #0
 8005140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005144:	2d06      	cmp	r5, #6
 8005146:	bf28      	it	cs
 8005148:	2506      	movcs	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 800514a:	2600      	movs	r6, #0
	pxNewTCB->uxPriority = uxPriority;
 800514c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 800514e:	e9c4 5611 	strd	r5, r6, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005152:	1d20      	adds	r0, r4, #4
 8005154:	f7ff fec0 	bl	8004ed8 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005158:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800515c:	f104 0018 	add.w	r0, r4, #24
 8005160:	f7ff feba 	bl	8004ed8 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8005164:	64e6      	str	r6, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005166:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005168:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800516a:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800516e:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005170:	4652      	mov	r2, sl
 8005172:	4641      	mov	r1, r8
 8005174:	4648      	mov	r0, r9
 8005176:	f000 fbc3 	bl	8005900 <pxPortInitialiseStack>
 800517a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800517c:	b107      	cbz	r7, 8005180 <prvInitialiseNewTask.isra.2+0x10c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800517e:	603c      	str	r4, [r7, #0]
}
 8005180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005184:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8005188:	e7dc      	b.n	8005144 <prvInitialiseNewTask.isra.2+0xd0>
 800518a:	bf00      	nop

0800518c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800518e:	4b1b      	ldr	r3, [pc, #108]	; (80051fc <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005190:	4e1b      	ldr	r6, [pc, #108]	; (8005200 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8005192:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005194:	6833      	ldr	r3, [r6, #0]
{
 8005196:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005198:	1d18      	adds	r0, r3, #4
{
 800519a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800519c:	f7ff feca 	bl	8004f34 <uxListRemove>
 80051a0:	b940      	cbnz	r0, 80051b4 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80051a2:	6833      	ldr	r3, [r6, #0]
 80051a4:	4917      	ldr	r1, [pc, #92]	; (8005204 <prvAddCurrentTaskToDelayedList+0x78>)
 80051a6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80051a8:	680b      	ldr	r3, [r1, #0]
 80051aa:	2201      	movs	r2, #1
 80051ac:	4082      	lsls	r2, r0
 80051ae:	ea23 0302 	bic.w	r3, r3, r2
 80051b2:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051b4:	1c6b      	adds	r3, r5, #1
 80051b6:	d017      	beq.n	80051e8 <prvAddCurrentTaskToDelayedList+0x5c>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051b8:	6833      	ldr	r3, [r6, #0]
 80051ba:	1964      	adds	r4, r4, r5
 80051bc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80051be:	d20b      	bcs.n	80051d8 <prvAddCurrentTaskToDelayedList+0x4c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051c0:	4b11      	ldr	r3, [pc, #68]	; (8005208 <prvAddCurrentTaskToDelayedList+0x7c>)
 80051c2:	6818      	ldr	r0, [r3, #0]
 80051c4:	6831      	ldr	r1, [r6, #0]
 80051c6:	3104      	adds	r1, #4
 80051c8:	f7ff fe9a 	bl	8004f00 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80051cc:	4b0f      	ldr	r3, [pc, #60]	; (800520c <prvAddCurrentTaskToDelayedList+0x80>)
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	42a2      	cmp	r2, r4
				{
					xNextTaskUnblockTime = xTimeToWake;
 80051d2:	bf88      	it	hi
 80051d4:	601c      	strhi	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051d8:	4b0d      	ldr	r3, [pc, #52]	; (8005210 <prvAddCurrentTaskToDelayedList+0x84>)
 80051da:	6818      	ldr	r0, [r3, #0]
 80051dc:	6831      	ldr	r1, [r6, #0]
}
 80051de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051e2:	3104      	adds	r1, #4
 80051e4:	f7ff be8c 	b.w	8004f00 <vListInsert>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051e8:	2f00      	cmp	r7, #0
 80051ea:	d0e5      	beq.n	80051b8 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051ec:	6831      	ldr	r1, [r6, #0]
 80051ee:	4809      	ldr	r0, [pc, #36]	; (8005214 <prvAddCurrentTaskToDelayedList+0x88>)
 80051f0:	3104      	adds	r1, #4
}
 80051f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051f6:	f7ff be73 	b.w	8004ee0 <vListInsertEnd>
 80051fa:	bf00      	nop
 80051fc:	20000328 	.word	0x20000328
 8005200:	20000208 	.word	0x20000208
 8005204:	200002b4 	.word	0x200002b4
 8005208:	2000020c 	.word	0x2000020c
 800520c:	200002e0 	.word	0x200002e0
 8005210:	20000210 	.word	0x20000210
 8005214:	20000300 	.word	0x20000300

08005218 <prvIdleTask>:
{
 8005218:	f8df a090 	ldr.w	sl, [pc, #144]	; 80052ac <prvIdleTask+0x94>
 800521c:	4e21      	ldr	r6, [pc, #132]	; (80052a4 <prvIdleTask+0x8c>)
 800521e:	4d22      	ldr	r5, [pc, #136]	; (80052a8 <prvIdleTask+0x90>)
 8005220:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80052b0 <prvIdleTask+0x98>
				taskYIELD();
 8005224:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80052b4 <prvIdleTask+0x9c>
{
 8005228:	b580      	push	{r7, lr}
				taskYIELD();
 800522a:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800522e:	682b      	ldr	r3, [r5, #0]
 8005230:	b343      	cbz	r3, 8005284 <prvIdleTask+0x6c>
			taskENTER_CRITICAL();
 8005232:	f000 fb8f 	bl	8005954 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005236:	f8da 300c 	ldr.w	r3, [sl, #12]
 800523a:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800523c:	1d20      	adds	r0, r4, #4
 800523e:	f7ff fe79 	bl	8004f34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005242:	6833      	ldr	r3, [r6, #0]
 8005244:	3b01      	subs	r3, #1
 8005246:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005248:	682b      	ldr	r3, [r5, #0]
 800524a:	3b01      	subs	r3, #1
 800524c:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 800524e:	f000 fba3 	bl	8005998 <vPortExitCritical>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005252:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8005256:	b163      	cbz	r3, 8005272 <prvIdleTask+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005258:	2b01      	cmp	r3, #1
 800525a:	d01e      	beq.n	800529a <prvIdleTask+0x82>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800525c:	2b02      	cmp	r3, #2
 800525e:	d0e6      	beq.n	800522e <prvIdleTask+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	e7fe      	b.n	8005270 <prvIdleTask+0x58>
				vPortFree( pxTCB->pxStack );
 8005272:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005274:	f000 fd46 	bl	8005d04 <vPortFree>
				vPortFree( pxTCB );
 8005278:	4620      	mov	r0, r4
 800527a:	f000 fd43 	bl	8005d04 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800527e:	682b      	ldr	r3, [r5, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1d6      	bne.n	8005232 <prvIdleTask+0x1a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005284:	f8d9 3000 	ldr.w	r3, [r9]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d9d0      	bls.n	800522e <prvIdleTask+0x16>
				taskYIELD();
 800528c:	f8c8 7000 	str.w	r7, [r8]
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	e7c9      	b.n	800522e <prvIdleTask+0x16>
				vPortFree( pxTCB );
 800529a:	4620      	mov	r0, r4
 800529c:	f000 fd32 	bl	8005d04 <vPortFree>
 80052a0:	e7c5      	b.n	800522e <prvIdleTask+0x16>
 80052a2:	bf00      	nop
 80052a4:	200002a0 	.word	0x200002a0
 80052a8:	200002a4 	.word	0x200002a4
 80052ac:	20000314 	.word	0x20000314
 80052b0:	20000214 	.word	0x20000214
 80052b4:	e000ed04 	.word	0xe000ed04

080052b8 <xTaskCreateStatic>:
	{
 80052b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ba:	b087      	sub	sp, #28
 80052bc:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 80052c0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
		configASSERT( puxStackBuffer != NULL );
 80052c2:	b1bd      	cbz	r5, 80052f4 <xTaskCreateStatic+0x3c>
		configASSERT( pxTaskBuffer != NULL );
 80052c4:	b16c      	cbz	r4, 80052e2 <xTaskCreateStatic+0x2a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80052c6:	2754      	movs	r7, #84	; 0x54
 80052c8:	9705      	str	r7, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052ca:	9f05      	ldr	r7, [sp, #20]
 80052cc:	2f54      	cmp	r7, #84	; 0x54
 80052ce:	d01a      	beq.n	8005306 <xTaskCreateStatic+0x4e>
 80052d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	e7fe      	b.n	80052e0 <xTaskCreateStatic+0x28>
 80052e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	e7fe      	b.n	80052f2 <xTaskCreateStatic+0x3a>
 80052f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f8:	f383 8811 	msr	BASEPRI, r3
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	e7fe      	b.n	8005304 <xTaskCreateStatic+0x4c>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005306:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005308:	2702      	movs	r7, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800530a:	ad04      	add	r5, sp, #16
 800530c:	9402      	str	r4, [sp, #8]
 800530e:	9600      	str	r6, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005310:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005314:	9501      	str	r5, [sp, #4]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005316:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005318:	f7ff feac 	bl	8005074 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800531c:	4620      	mov	r0, r4
 800531e:	f7ff fe1d 	bl	8004f5c <prvAddNewTaskToReadyList>
	}
 8005322:	9804      	ldr	r0, [sp, #16]
 8005324:	b007      	add	sp, #28
 8005326:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005328 <xTaskCreate>:
	{
 8005328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800532c:	0096      	lsls	r6, r2, #2
	{
 800532e:	4680      	mov	r8, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005330:	4630      	mov	r0, r6
	{
 8005332:	460d      	mov	r5, r1
 8005334:	4699      	mov	r9, r3
 8005336:	9f09      	ldr	r7, [sp, #36]	; 0x24
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005338:	f000 fc58 	bl	8005bec <pvPortMalloc>
			if( pxStack != NULL )
 800533c:	2800      	cmp	r0, #0
 800533e:	f000 809b 	beq.w	8005478 <xTaskCreate+0x150>
 8005342:	4682      	mov	sl, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005344:	2054      	movs	r0, #84	; 0x54
 8005346:	f000 fc51 	bl	8005bec <pvPortMalloc>
				if( pxNewTCB != NULL )
 800534a:	4604      	mov	r4, r0
 800534c:	2800      	cmp	r0, #0
 800534e:	f000 808c 	beq.w	800546a <xTaskCreate+0x142>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005352:	3e04      	subs	r6, #4
 8005354:	4456      	add	r6, sl
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005356:	2300      	movs	r3, #0
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005358:	f026 0607 	bic.w	r6, r6, #7
					pxNewTCB->pxStack = pxStack;
 800535c:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005360:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
	if( pcName != NULL )
 8005364:	2d00      	cmp	r5, #0
 8005366:	d07d      	beq.n	8005464 <xTaskCreate+0x13c>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005368:	782b      	ldrb	r3, [r5, #0]
 800536a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800536e:	782b      	ldrb	r3, [r5, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d04d      	beq.n	8005410 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005374:	786b      	ldrb	r3, [r5, #1]
 8005376:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 800537a:	786b      	ldrb	r3, [r5, #1]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d047      	beq.n	8005410 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005380:	78ab      	ldrb	r3, [r5, #2]
 8005382:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 8005386:	78ab      	ldrb	r3, [r5, #2]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d041      	beq.n	8005410 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800538c:	78eb      	ldrb	r3, [r5, #3]
 800538e:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 8005392:	78eb      	ldrb	r3, [r5, #3]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d03b      	beq.n	8005410 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005398:	792b      	ldrb	r3, [r5, #4]
 800539a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 800539e:	792b      	ldrb	r3, [r5, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d035      	beq.n	8005410 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053a4:	796b      	ldrb	r3, [r5, #5]
 80053a6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 80053aa:	796b      	ldrb	r3, [r5, #5]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d02f      	beq.n	8005410 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053b0:	79ab      	ldrb	r3, [r5, #6]
 80053b2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 80053b6:	79ab      	ldrb	r3, [r5, #6]
 80053b8:	b353      	cbz	r3, 8005410 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053ba:	79eb      	ldrb	r3, [r5, #7]
 80053bc:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 80053c0:	79eb      	ldrb	r3, [r5, #7]
 80053c2:	b32b      	cbz	r3, 8005410 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053c4:	7a2b      	ldrb	r3, [r5, #8]
 80053c6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 80053ca:	7a2b      	ldrb	r3, [r5, #8]
 80053cc:	b303      	cbz	r3, 8005410 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053ce:	7a6b      	ldrb	r3, [r5, #9]
 80053d0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 80053d4:	7a6b      	ldrb	r3, [r5, #9]
 80053d6:	b1db      	cbz	r3, 8005410 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053d8:	7aab      	ldrb	r3, [r5, #10]
 80053da:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 80053de:	7aab      	ldrb	r3, [r5, #10]
 80053e0:	b1b3      	cbz	r3, 8005410 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053e2:	7aeb      	ldrb	r3, [r5, #11]
 80053e4:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 80053e8:	7aeb      	ldrb	r3, [r5, #11]
 80053ea:	b18b      	cbz	r3, 8005410 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053ec:	7b2b      	ldrb	r3, [r5, #12]
 80053ee:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 80053f2:	7b2b      	ldrb	r3, [r5, #12]
 80053f4:	b163      	cbz	r3, 8005410 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053f6:	7b6b      	ldrb	r3, [r5, #13]
 80053f8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 80053fc:	7b6b      	ldrb	r3, [r5, #13]
 80053fe:	b13b      	cbz	r3, 8005410 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005400:	7bab      	ldrb	r3, [r5, #14]
 8005402:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
 8005406:	7bab      	ldrb	r3, [r5, #14]
 8005408:	b113      	cbz	r3, 8005410 <xTaskCreate+0xe8>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800540a:	7beb      	ldrb	r3, [r5, #15]
 800540c:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005410:	2300      	movs	r3, #0
 8005412:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005416:	9d08      	ldr	r5, [sp, #32]
 8005418:	2d06      	cmp	r5, #6
 800541a:	bf28      	it	cs
 800541c:	2506      	movcs	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 800541e:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8005422:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 8005424:	e9c4 5a11 	strd	r5, sl, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005428:	1d20      	adds	r0, r4, #4
 800542a:	f7ff fd55 	bl	8004ed8 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800542e:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005432:	f104 0018 	add.w	r0, r4, #24
 8005436:	f7ff fd4f 	bl	8004ed8 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800543a:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800543e:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005440:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005442:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005446:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005448:	464a      	mov	r2, r9
 800544a:	4641      	mov	r1, r8
 800544c:	4630      	mov	r0, r6
 800544e:	f000 fa57 	bl	8005900 <pxPortInitialiseStack>
 8005452:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8005454:	b107      	cbz	r7, 8005458 <xTaskCreate+0x130>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005456:	603c      	str	r4, [r7, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 8005458:	4620      	mov	r0, r4
 800545a:	f7ff fd7f 	bl	8004f5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800545e:	2001      	movs	r0, #1
	}
 8005460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005464:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
 8005468:	e7d5      	b.n	8005416 <xTaskCreate+0xee>
					vPortFree( pxStack );
 800546a:	4650      	mov	r0, sl
 800546c:	f000 fc4a 	bl	8005d04 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 8005474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 800547c:	e7f0      	b.n	8005460 <xTaskCreate+0x138>
 800547e:	bf00      	nop

08005480 <vTaskStartScheduler>:
{
 8005480:	b570      	push	{r4, r5, r6, lr}
 8005482:	b08a      	sub	sp, #40	; 0x28
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005484:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005486:	aa07      	add	r2, sp, #28
 8005488:	a906      	add	r1, sp, #24
 800548a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800548c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005490:	f000 fc70 	bl	8005d74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005494:	e9dd 5305 	ldrd	r5, r3, [sp, #20]
		configASSERT( puxStackBuffer != NULL );
 8005498:	b1c3      	cbz	r3, 80054cc <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
 800549a:	b175      	cbz	r5, 80054ba <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800549c:	2254      	movs	r2, #84	; 0x54
 800549e:	9209      	str	r2, [sp, #36]	; 0x24
			configASSERT( xSize == sizeof( TCB_t ) );
 80054a0:	9909      	ldr	r1, [sp, #36]	; 0x24
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80054a2:	9a07      	ldr	r2, [sp, #28]
			configASSERT( xSize == sizeof( TCB_t ) );
 80054a4:	2954      	cmp	r1, #84	; 0x54
 80054a6:	d01a      	beq.n	80054de <vTaskStartScheduler+0x5e>
 80054a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ac:	f383 8811 	msr	BASEPRI, r3
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	e7fe      	b.n	80054b8 <vTaskStartScheduler+0x38>
 80054ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054be:	f383 8811 	msr	BASEPRI, r3
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	e7fe      	b.n	80054ca <vTaskStartScheduler+0x4a>
 80054cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d0:	f383 8811 	msr	BASEPRI, r3
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	e7fe      	b.n	80054dc <vTaskStartScheduler+0x5c>
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054de:	2002      	movs	r0, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054e0:	a908      	add	r1, sp, #32
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054e2:	632b      	str	r3, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054e4:	f885 0051 	strb.w	r0, [r5, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054e8:	4623      	mov	r3, r4
 80054ea:	e9cd 4100 	strd	r4, r1, [sp]
 80054ee:	4810      	ldr	r0, [pc, #64]	; (8005530 <vTaskStartScheduler+0xb0>)
 80054f0:	4910      	ldr	r1, [pc, #64]	; (8005534 <vTaskStartScheduler+0xb4>)
 80054f2:	9502      	str	r5, [sp, #8]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80054f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054f6:	f7ff fdbd 	bl	8005074 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054fa:	4628      	mov	r0, r5
 80054fc:	f7ff fd2e 	bl	8004f5c <prvAddNewTaskToReadyList>
		return xReturn;
 8005500:	9b08      	ldr	r3, [sp, #32]
		if( xIdleTaskHandle != NULL )
 8005502:	b193      	cbz	r3, 800552a <vTaskStartScheduler+0xaa>
 8005504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005508:	f383 8811 	msr	BASEPRI, r3
 800550c:	f3bf 8f6f 	isb	sy
 8005510:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8005514:	4808      	ldr	r0, [pc, #32]	; (8005538 <vTaskStartScheduler+0xb8>)
		xSchedulerRunning = pdTRUE;
 8005516:	4a09      	ldr	r2, [pc, #36]	; (800553c <vTaskStartScheduler+0xbc>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005518:	4b09      	ldr	r3, [pc, #36]	; (8005540 <vTaskStartScheduler+0xc0>)
		xNextTaskUnblockTime = portMAX_DELAY;
 800551a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		xSchedulerRunning = pdTRUE;
 800551e:	2101      	movs	r1, #1
		xNextTaskUnblockTime = portMAX_DELAY;
 8005520:	6005      	str	r5, [r0, #0]
		xSchedulerRunning = pdTRUE;
 8005522:	6011      	str	r1, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005524:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8005526:	f000 fab1 	bl	8005a8c <xPortStartScheduler>
}
 800552a:	b00a      	add	sp, #40	; 0x28
 800552c:	bd70      	pop	{r4, r5, r6, pc}
 800552e:	bf00      	nop
 8005530:	08005219 	.word	0x08005219
 8005534:	080099ec 	.word	0x080099ec
 8005538:	200002e0 	.word	0x200002e0
 800553c:	200002fc 	.word	0x200002fc
 8005540:	20000328 	.word	0x20000328

08005544 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005544:	4a02      	ldr	r2, [pc, #8]	; (8005550 <vTaskSuspendAll+0xc>)
 8005546:	6813      	ldr	r3, [r2, #0]
 8005548:	3301      	adds	r3, #1
 800554a:	6013      	str	r3, [r2, #0]
}
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	200002ac 	.word	0x200002ac

08005554 <xTaskIncrementTick>:
{
 8005554:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005558:	4b49      	ldr	r3, [pc, #292]	; (8005680 <xTaskIncrementTick+0x12c>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	b9cb      	cbnz	r3, 8005592 <xTaskIncrementTick+0x3e>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800555e:	4b49      	ldr	r3, [pc, #292]	; (8005684 <xTaskIncrementTick+0x130>)
 8005560:	681e      	ldr	r6, [r3, #0]
 8005562:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8005564:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005566:	b30e      	cbz	r6, 80055ac <xTaskIncrementTick+0x58>
 8005568:	f8df b138 	ldr.w	fp, [pc, #312]	; 80056a4 <xTaskIncrementTick+0x150>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800556c:	f8db 2000 	ldr.w	r2, [fp]
 8005570:	42b2      	cmp	r2, r6
 8005572:	d929      	bls.n	80055c8 <xTaskIncrementTick+0x74>
 8005574:	4f44      	ldr	r7, [pc, #272]	; (8005688 <xTaskIncrementTick+0x134>)
 8005576:	f8df 8130 	ldr.w	r8, [pc, #304]	; 80056a8 <xTaskIncrementTick+0x154>
BaseType_t xSwitchRequired = pdFALSE;
 800557a:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800557c:	f8d8 3000 	ldr.w	r3, [r8]
 8005580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005582:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800558a:	2b02      	cmp	r3, #2
 800558c:	bf28      	it	cs
 800558e:	2501      	movcs	r5, #1
 8005590:	e004      	b.n	800559c <xTaskIncrementTick+0x48>
		++uxPendedTicks;
 8005592:	4a3e      	ldr	r2, [pc, #248]	; (800568c <xTaskIncrementTick+0x138>)
 8005594:	6813      	ldr	r3, [r2, #0]
 8005596:	3301      	adds	r3, #1
 8005598:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800559a:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
 800559c:	4b3c      	ldr	r3, [pc, #240]	; (8005690 <xTaskIncrementTick+0x13c>)
 800559e:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 80055a0:	2b00      	cmp	r3, #0
}
 80055a2:	bf0c      	ite	eq
 80055a4:	4628      	moveq	r0, r5
 80055a6:	2001      	movne	r0, #1
 80055a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80055ac:	4c39      	ldr	r4, [pc, #228]	; (8005694 <xTaskIncrementTick+0x140>)
 80055ae:	6823      	ldr	r3, [r4, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d048      	beq.n	8005648 <xTaskIncrementTick+0xf4>
 80055b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ba:	f383 8811 	msr	BASEPRI, r3
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	e7fe      	b.n	80055c6 <xTaskIncrementTick+0x72>
 80055c8:	4c32      	ldr	r4, [pc, #200]	; (8005694 <xTaskIncrementTick+0x140>)
 80055ca:	4f2f      	ldr	r7, [pc, #188]	; (8005688 <xTaskIncrementTick+0x134>)
 80055cc:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80056a8 <xTaskIncrementTick+0x154>
BaseType_t xSwitchRequired = pdFALSE;
 80055d0:	2500      	movs	r5, #0
 80055d2:	e02d      	b.n	8005630 <xTaskIncrementTick+0xdc>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055d4:	6822      	ldr	r2, [r4, #0]
 80055d6:	68d2      	ldr	r2, [r2, #12]
 80055d8:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055e0:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 80055e4:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055e6:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 80055e8:	d32b      	bcc.n	8005642 <xTaskIncrementTick+0xee>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055ea:	f7ff fca3 	bl	8004f34 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055ee:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055f2:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055f6:	b109      	cbz	r1, 80055fc <xTaskIncrementTick+0xa8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055f8:	f7ff fc9c 	bl	8004f34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055fc:	4a26      	ldr	r2, [pc, #152]	; (8005698 <xTaskIncrementTick+0x144>)
 80055fe:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8005602:	6813      	ldr	r3, [r2, #0]
 8005604:	2101      	movs	r1, #1
 8005606:	fa01 fc00 	lsl.w	ip, r1, r0
 800560a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800560e:	4651      	mov	r1, sl
 8005610:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8005614:	ea4c 0c03 	orr.w	ip, ip, r3
 8005618:	f8c2 c000 	str.w	ip, [r2]
 800561c:	f7ff fc60 	bl	8004ee0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005620:	f8d8 0000 	ldr.w	r0, [r8]
 8005624:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 8005628:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800562a:	4291      	cmp	r1, r2
 800562c:	bf28      	it	cs
 800562e:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005630:	6822      	ldr	r2, [r4, #0]
 8005632:	6812      	ldr	r2, [r2, #0]
 8005634:	2a00      	cmp	r2, #0
 8005636:	d1cd      	bne.n	80055d4 <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005638:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800563c:	f8cb 2000 	str.w	r2, [fp]
					break;
 8005640:	e79c      	b.n	800557c <xTaskIncrementTick+0x28>
						xNextTaskUnblockTime = xItemValue;
 8005642:	f8cb 1000 	str.w	r1, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005646:	e799      	b.n	800557c <xTaskIncrementTick+0x28>
			taskSWITCH_DELAYED_LISTS();
 8005648:	4b14      	ldr	r3, [pc, #80]	; (800569c <xTaskIncrementTick+0x148>)
 800564a:	6821      	ldr	r1, [r4, #0]
 800564c:	4a14      	ldr	r2, [pc, #80]	; (80056a0 <xTaskIncrementTick+0x14c>)
 800564e:	6818      	ldr	r0, [r3, #0]
 8005650:	6020      	str	r0, [r4, #0]
 8005652:	6019      	str	r1, [r3, #0]
 8005654:	6813      	ldr	r3, [r2, #0]
 8005656:	3301      	adds	r3, #1
 8005658:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	b933      	cbnz	r3, 800566e <xTaskIncrementTick+0x11a>
		xNextTaskUnblockTime = portMAX_DELAY;
 8005660:	f8df b040 	ldr.w	fp, [pc, #64]	; 80056a4 <xTaskIncrementTick+0x150>
 8005664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005668:	f8cb 2000 	str.w	r2, [fp]
 800566c:	e77e      	b.n	800556c <xTaskIncrementTick+0x18>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800566e:	6822      	ldr	r2, [r4, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005670:	f8df b030 	ldr.w	fp, [pc, #48]	; 80056a4 <xTaskIncrementTick+0x150>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005674:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005676:	68d2      	ldr	r2, [r2, #12]
 8005678:	6852      	ldr	r2, [r2, #4]
 800567a:	f8cb 2000 	str.w	r2, [fp]
 800567e:	e775      	b.n	800556c <xTaskIncrementTick+0x18>
 8005680:	200002ac 	.word	0x200002ac
 8005684:	20000328 	.word	0x20000328
 8005688:	20000214 	.word	0x20000214
 800568c:	200002a8 	.word	0x200002a8
 8005690:	2000032c 	.word	0x2000032c
 8005694:	2000020c 	.word	0x2000020c
 8005698:	200002b4 	.word	0x200002b4
 800569c:	20000210 	.word	0x20000210
 80056a0:	200002e4 	.word	0x200002e4
 80056a4:	200002e0 	.word	0x200002e0
 80056a8:	20000208 	.word	0x20000208

080056ac <xTaskResumeAll>:
{
 80056ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 80056b0:	4c38      	ldr	r4, [pc, #224]	; (8005794 <xTaskResumeAll+0xe8>)
 80056b2:	6823      	ldr	r3, [r4, #0]
 80056b4:	b943      	cbnz	r3, 80056c8 <xTaskResumeAll+0x1c>
 80056b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ba:	f383 8811 	msr	BASEPRI, r3
 80056be:	f3bf 8f6f 	isb	sy
 80056c2:	f3bf 8f4f 	dsb	sy
 80056c6:	e7fe      	b.n	80056c6 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80056c8:	f000 f944 	bl	8005954 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80056cc:	6823      	ldr	r3, [r4, #0]
 80056ce:	3b01      	subs	r3, #1
 80056d0:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056d2:	6824      	ldr	r4, [r4, #0]
 80056d4:	bb7c      	cbnz	r4, 8005736 <xTaskResumeAll+0x8a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056d6:	4b30      	ldr	r3, [pc, #192]	; (8005798 <xTaskResumeAll+0xec>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	b363      	cbz	r3, 8005736 <xTaskResumeAll+0x8a>
 80056dc:	4d2f      	ldr	r5, [pc, #188]	; (800579c <xTaskResumeAll+0xf0>)
 80056de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80057b4 <xTaskResumeAll+0x108>
					prvAddTaskToReadyList( pxTCB );
 80056e2:	4e2f      	ldr	r6, [pc, #188]	; (80057a0 <xTaskResumeAll+0xf4>)
 80056e4:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80057b8 <xTaskResumeAll+0x10c>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056e8:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 80057bc <xTaskResumeAll+0x110>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056ec:	f8da 3000 	ldr.w	r3, [sl]
					prvAddTaskToReadyList( pxTCB );
 80056f0:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056f2:	b333      	cbz	r3, 8005742 <xTaskResumeAll+0x96>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056f4:	f8da 300c 	ldr.w	r3, [sl, #12]
 80056f8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056fa:	f104 0804 	add.w	r8, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056fe:	f104 0018 	add.w	r0, r4, #24
 8005702:	f7ff fc17 	bl	8004f34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005706:	4640      	mov	r0, r8
 8005708:	f7ff fc14 	bl	8004f34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800570c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800570e:	6832      	ldr	r2, [r6, #0]
 8005710:	fa07 f300 	lsl.w	r3, r7, r0
 8005714:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005718:	4313      	orrs	r3, r2
 800571a:	4641      	mov	r1, r8
 800571c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8005720:	6033      	str	r3, [r6, #0]
 8005722:	f7ff fbdd 	bl	8004ee0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005726:	f8db 3000 	ldr.w	r3, [fp]
 800572a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800572c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572e:	429a      	cmp	r2, r3
 8005730:	d3dc      	bcc.n	80056ec <xTaskResumeAll+0x40>
						xYieldPending = pdTRUE;
 8005732:	602f      	str	r7, [r5, #0]
 8005734:	e7da      	b.n	80056ec <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 8005736:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005738:	f000 f92e 	bl	8005998 <vPortExitCritical>
}
 800573c:	4620      	mov	r0, r4
 800573e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxTCB != NULL )
 8005742:	b13c      	cbz	r4, 8005754 <xTaskResumeAll+0xa8>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005744:	4b17      	ldr	r3, [pc, #92]	; (80057a4 <xTaskResumeAll+0xf8>)
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	6812      	ldr	r2, [r2, #0]
 800574a:	b9da      	cbnz	r2, 8005784 <xTaskResumeAll+0xd8>
		xNextTaskUnblockTime = portMAX_DELAY;
 800574c:	4b16      	ldr	r3, [pc, #88]	; (80057a8 <xTaskResumeAll+0xfc>)
 800574e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005752:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005754:	4e15      	ldr	r6, [pc, #84]	; (80057ac <xTaskResumeAll+0x100>)
 8005756:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005758:	b13c      	cbz	r4, 800576a <xTaskResumeAll+0xbe>
								xYieldPending = pdTRUE;
 800575a:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800575c:	f7ff fefa 	bl	8005554 <xTaskIncrementTick>
 8005760:	b100      	cbz	r0, 8005764 <xTaskResumeAll+0xb8>
								xYieldPending = pdTRUE;
 8005762:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005764:	3c01      	subs	r4, #1
 8005766:	d1f9      	bne.n	800575c <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 8005768:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 800576a:	682b      	ldr	r3, [r5, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0e2      	beq.n	8005736 <xTaskResumeAll+0x8a>
					taskYIELD_IF_USING_PREEMPTION();
 8005770:	4b0f      	ldr	r3, [pc, #60]	; (80057b0 <xTaskResumeAll+0x104>)
 8005772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005780:	2401      	movs	r4, #1
 8005782:	e7d9      	b.n	8005738 <xTaskResumeAll+0x8c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005784:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005786:	4b08      	ldr	r3, [pc, #32]	; (80057a8 <xTaskResumeAll+0xfc>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005788:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800578a:	68d2      	ldr	r2, [r2, #12]
 800578c:	6852      	ldr	r2, [r2, #4]
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	e7e0      	b.n	8005754 <xTaskResumeAll+0xa8>
 8005792:	bf00      	nop
 8005794:	200002ac 	.word	0x200002ac
 8005798:	200002a0 	.word	0x200002a0
 800579c:	2000032c 	.word	0x2000032c
 80057a0:	200002b4 	.word	0x200002b4
 80057a4:	2000020c 	.word	0x2000020c
 80057a8:	200002e0 	.word	0x200002e0
 80057ac:	200002a8 	.word	0x200002a8
 80057b0:	e000ed04 	.word	0xe000ed04
 80057b4:	200002e8 	.word	0x200002e8
 80057b8:	20000214 	.word	0x20000214
 80057bc:	20000208 	.word	0x20000208

080057c0 <vTaskDelay>:
	{
 80057c0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80057c2:	b198      	cbz	r0, 80057ec <vTaskDelay+0x2c>
			configASSERT( uxSchedulerSuspended == 0 );
 80057c4:	4b0e      	ldr	r3, [pc, #56]	; (8005800 <vTaskDelay+0x40>)
 80057c6:	6819      	ldr	r1, [r3, #0]
 80057c8:	b141      	cbz	r1, 80057dc <vTaskDelay+0x1c>
 80057ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	e7fe      	b.n	80057da <vTaskDelay+0x1a>
	++uxSchedulerSuspended;
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	3201      	adds	r2, #1
 80057e0:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057e2:	f7ff fcd3 	bl	800518c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80057e6:	f7ff ff61 	bl	80056ac <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80057ea:	b938      	cbnz	r0, 80057fc <vTaskDelay+0x3c>
			portYIELD_WITHIN_API();
 80057ec:	4b05      	ldr	r3, [pc, #20]	; (8005804 <vTaskDelay+0x44>)
 80057ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	f3bf 8f6f 	isb	sy
	}
 80057fc:	bd08      	pop	{r3, pc}
 80057fe:	bf00      	nop
 8005800:	200002ac 	.word	0x200002ac
 8005804:	e000ed04 	.word	0xe000ed04

08005808 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005808:	4b19      	ldr	r3, [pc, #100]	; (8005870 <vTaskSwitchContext+0x68>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	b9eb      	cbnz	r3, 800584a <vTaskSwitchContext+0x42>
		xYieldPending = pdFALSE;
 800580e:	4919      	ldr	r1, [pc, #100]	; (8005874 <vTaskSwitchContext+0x6c>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005810:	4a19      	ldr	r2, [pc, #100]	; (8005878 <vTaskSwitchContext+0x70>)
{
 8005812:	b410      	push	{r4}
		xYieldPending = pdFALSE;
 8005814:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005816:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005818:	fab3 f383 	clz	r3, r3
 800581c:	b2db      	uxtb	r3, r3
 800581e:	f1c3 031f 	rsb	r3, r3, #31
 8005822:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005826:	0092      	lsls	r2, r2, #2
 8005828:	4814      	ldr	r0, [pc, #80]	; (800587c <vTaskSwitchContext+0x74>)
 800582a:	5881      	ldr	r1, [r0, r2]
 800582c:	1884      	adds	r4, r0, r2
 800582e:	b181      	cbz	r1, 8005852 <vTaskSwitchContext+0x4a>
 8005830:	6861      	ldr	r1, [r4, #4]
 8005832:	3208      	adds	r2, #8
 8005834:	6849      	ldr	r1, [r1, #4]
 8005836:	6061      	str	r1, [r4, #4]
 8005838:	4402      	add	r2, r0
 800583a:	4291      	cmp	r1, r2
 800583c:	d012      	beq.n	8005864 <vTaskSwitchContext+0x5c>
 800583e:	4b10      	ldr	r3, [pc, #64]	; (8005880 <vTaskSwitchContext+0x78>)
 8005840:	68ca      	ldr	r2, [r1, #12]
 8005842:	601a      	str	r2, [r3, #0]
}
 8005844:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005848:	4770      	bx	lr
		xYieldPending = pdTRUE;
 800584a:	4b0a      	ldr	r3, [pc, #40]	; (8005874 <vTaskSwitchContext+0x6c>)
 800584c:	2201      	movs	r2, #1
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	4770      	bx	lr
	__asm volatile
 8005852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005856:	f383 8811 	msr	BASEPRI, r3
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	e7fe      	b.n	8005862 <vTaskSwitchContext+0x5a>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005864:	2214      	movs	r2, #20
 8005866:	fb02 0303 	mla	r3, r2, r3, r0
 800586a:	6849      	ldr	r1, [r1, #4]
 800586c:	6059      	str	r1, [r3, #4]
 800586e:	e7e6      	b.n	800583e <vTaskSwitchContext+0x36>
 8005870:	200002ac 	.word	0x200002ac
 8005874:	2000032c 	.word	0x2000032c
 8005878:	200002b4 	.word	0x200002b4
 800587c:	20000214 	.word	0x20000214
 8005880:	20000208 	.word	0x20000208

08005884 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005884:	4b0e      	ldr	r3, [pc, #56]	; (80058c0 <prvTaskExitError+0x3c>)
 8005886:	681b      	ldr	r3, [r3, #0]
{
 8005888:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800588a:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 800588c:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 800588e:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8005890:	d008      	beq.n	80058a4 <prvTaskExitError+0x20>
 8005892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	e7fe      	b.n	80058a2 <prvTaskExitError+0x1e>
 80058a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a8:	f383 8811 	msr	BASEPRI, r3
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80058b4:	9b01      	ldr	r3, [sp, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d0fc      	beq.n	80058b4 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80058ba:	b002      	add	sp, #8
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	20000118 	.word	0x20000118

080058c4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80058c4:	4808      	ldr	r0, [pc, #32]	; (80058e8 <prvPortStartFirstTask+0x24>)
 80058c6:	6800      	ldr	r0, [r0, #0]
 80058c8:	6800      	ldr	r0, [r0, #0]
 80058ca:	f380 8808 	msr	MSP, r0
 80058ce:	f04f 0000 	mov.w	r0, #0
 80058d2:	f380 8814 	msr	CONTROL, r0
 80058d6:	b662      	cpsie	i
 80058d8:	b661      	cpsie	f
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	df00      	svc	0
 80058e4:	bf00      	nop
 80058e6:	0000      	.short	0x0000
 80058e8:	e000ed08 	.word	0xe000ed08

080058ec <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80058ec:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80058fc <vPortEnableVFP+0x10>
 80058f0:	6801      	ldr	r1, [r0, #0]
 80058f2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80058f6:	6001      	str	r1, [r0, #0]
 80058f8:	4770      	bx	lr
 80058fa:	0000      	.short	0x0000
 80058fc:	e000ed88 	.word	0xe000ed88

08005900 <pxPortInitialiseStack>:
{
 8005900:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005902:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005906:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800590a:	4c07      	ldr	r4, [pc, #28]	; (8005928 <pxPortInitialiseStack+0x28>)
 800590c:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005910:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005914:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005918:	e940 1502 	strd	r1, r5, [r0, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800591c:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8005920:	bc30      	pop	{r4, r5}
 8005922:	3844      	subs	r0, #68	; 0x44
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	08005885 	.word	0x08005885
 800592c:	00000000 	.word	0x00000000

08005930 <SVC_Handler>:
	__asm volatile (
 8005930:	4b07      	ldr	r3, [pc, #28]	; (8005950 <pxCurrentTCBConst2>)
 8005932:	6819      	ldr	r1, [r3, #0]
 8005934:	6808      	ldr	r0, [r1, #0]
 8005936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800593a:	f380 8809 	msr	PSP, r0
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f04f 0000 	mov.w	r0, #0
 8005946:	f380 8811 	msr	BASEPRI, r0
 800594a:	4770      	bx	lr
 800594c:	f3af 8000 	nop.w

08005950 <pxCurrentTCBConst2>:
 8005950:	20000208 	.word	0x20000208

08005954 <vPortEnterCritical>:
 8005954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8005964:	4a0a      	ldr	r2, [pc, #40]	; (8005990 <vPortEnterCritical+0x3c>)
 8005966:	6813      	ldr	r3, [r2, #0]
 8005968:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800596a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800596c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800596e:	d000      	beq.n	8005972 <vPortEnterCritical+0x1e>
}
 8005970:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005972:	4b08      	ldr	r3, [pc, #32]	; (8005994 <vPortEnterCritical+0x40>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f013 0fff 	tst.w	r3, #255	; 0xff
 800597a:	d0f9      	beq.n	8005970 <vPortEnterCritical+0x1c>
 800597c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	e7fe      	b.n	800598c <vPortEnterCritical+0x38>
 800598e:	bf00      	nop
 8005990:	20000118 	.word	0x20000118
 8005994:	e000ed04 	.word	0xe000ed04

08005998 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005998:	4a08      	ldr	r2, [pc, #32]	; (80059bc <vPortExitCritical+0x24>)
 800599a:	6813      	ldr	r3, [r2, #0]
 800599c:	b943      	cbnz	r3, 80059b0 <vPortExitCritical+0x18>
 800599e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	e7fe      	b.n	80059ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80059b0:	3b01      	subs	r3, #1
 80059b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059b4:	b90b      	cbnz	r3, 80059ba <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059b6:	f383 8811 	msr	BASEPRI, r3
}
 80059ba:	4770      	bx	lr
 80059bc:	20000118 	.word	0x20000118

080059c0 <PendSV_Handler>:
	__asm volatile
 80059c0:	f3ef 8009 	mrs	r0, PSP
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	4b15      	ldr	r3, [pc, #84]	; (8005a20 <pxCurrentTCBConst>)
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	f01e 0f10 	tst.w	lr, #16
 80059d0:	bf08      	it	eq
 80059d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80059d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059da:	6010      	str	r0, [r2, #0]
 80059dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80059e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80059e4:	f380 8811 	msr	BASEPRI, r0
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f7ff ff0a 	bl	8005808 <vTaskSwitchContext>
 80059f4:	f04f 0000 	mov.w	r0, #0
 80059f8:	f380 8811 	msr	BASEPRI, r0
 80059fc:	bc09      	pop	{r0, r3}
 80059fe:	6819      	ldr	r1, [r3, #0]
 8005a00:	6808      	ldr	r0, [r1, #0]
 8005a02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a06:	f01e 0f10 	tst.w	lr, #16
 8005a0a:	bf08      	it	eq
 8005a0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a10:	f380 8809 	msr	PSP, r0
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	f3af 8000 	nop.w

08005a20 <pxCurrentTCBConst>:
 8005a20:	20000208 	.word	0x20000208

08005a24 <SysTick_Handler>:
{
 8005a24:	b508      	push	{r3, lr}
	__asm volatile
 8005a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2a:	f383 8811 	msr	BASEPRI, r3
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8005a36:	f7ff fd8d 	bl	8005554 <xTaskIncrementTick>
 8005a3a:	b118      	cbz	r0, 8005a44 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a3c:	4b03      	ldr	r3, [pc, #12]	; (8005a4c <SysTick_Handler+0x28>)
 8005a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a42:	601a      	str	r2, [r3, #0]
	__asm volatile
 8005a44:	2300      	movs	r3, #0
 8005a46:	f383 8811 	msr	BASEPRI, r3
}
 8005a4a:	bd08      	pop	{r3, pc}
 8005a4c:	e000ed04 	.word	0xe000ed04

08005a50 <vPortSetupTimerInterrupt>:
{
 8005a50:	b430      	push	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a52:	4a09      	ldr	r2, [pc, #36]	; (8005a78 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a54:	4d09      	ldr	r5, [pc, #36]	; (8005a7c <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a56:	4b0a      	ldr	r3, [pc, #40]	; (8005a80 <vPortSetupTimerInterrupt+0x30>)
 8005a58:	4c0a      	ldr	r4, [pc, #40]	; (8005a84 <vPortSetupTimerInterrupt+0x34>)
 8005a5a:	480b      	ldr	r0, [pc, #44]	; (8005a88 <vPortSetupTimerInterrupt+0x38>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a60:	6029      	str	r1, [r5, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	fba4 1303 	umull	r1, r3, r4, r3
 8005a68:	099b      	lsrs	r3, r3, #6
 8005a6a:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a6c:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a6e:	6003      	str	r3, [r0, #0]
}
 8005a70:	bc30      	pop	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a72:	6011      	str	r1, [r2, #0]
}
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	e000e010 	.word	0xe000e010
 8005a7c:	e000e018 	.word	0xe000e018
 8005a80:	2000011c 	.word	0x2000011c
 8005a84:	10624dd3 	.word	0x10624dd3
 8005a88:	e000e014 	.word	0xe000e014

08005a8c <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a8c:	4b3a      	ldr	r3, [pc, #232]	; (8005b78 <xPortStartScheduler+0xec>)
 8005a8e:	4a3b      	ldr	r2, [pc, #236]	; (8005b7c <xPortStartScheduler+0xf0>)
 8005a90:	6819      	ldr	r1, [r3, #0]
 8005a92:	4291      	cmp	r1, r2
 8005a94:	d040      	beq.n	8005b18 <xPortStartScheduler+0x8c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	4b39      	ldr	r3, [pc, #228]	; (8005b80 <xPortStartScheduler+0xf4>)
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d033      	beq.n	8005b06 <xPortStartScheduler+0x7a>
{
 8005a9e:	b510      	push	{r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005aa0:	4b38      	ldr	r3, [pc, #224]	; (8005b84 <xPortStartScheduler+0xf8>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005aa2:	4839      	ldr	r0, [pc, #228]	; (8005b88 <xPortStartScheduler+0xfc>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005aa4:	781a      	ldrb	r2, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005aa6:	4c39      	ldr	r4, [pc, #228]	; (8005b8c <xPortStartScheduler+0x100>)
{
 8005aa8:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005aaa:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005aac:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005aae:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ab0:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005aba:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005abe:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ac2:	2107      	movs	r1, #7
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ac4:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ac8:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005aca:	0611      	lsls	r1, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005acc:	7023      	strb	r3, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ace:	d511      	bpl.n	8005af4 <xPortStartScheduler+0x68>
 8005ad0:	2306      	movs	r3, #6
 8005ad2:	e000      	b.n	8005ad6 <xPortStartScheduler+0x4a>
 8005ad4:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ad6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8005ada:	0052      	lsls	r2, r2, #1
 8005adc:	b2d2      	uxtb	r2, r2
 8005ade:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ae2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8005ae6:	0612      	lsls	r2, r2, #24
 8005ae8:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8005aec:	d4f2      	bmi.n	8005ad4 <xPortStartScheduler+0x48>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005aee:	2b03      	cmp	r3, #3
 8005af0:	6003      	str	r3, [r0, #0]
 8005af2:	d01a      	beq.n	8005b2a <xPortStartScheduler+0x9e>
	__asm volatile
 8005af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	e7fe      	b.n	8005b04 <xPortStartScheduler+0x78>
 8005b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0a:	f383 8811 	msr	BASEPRI, r3
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	f3bf 8f4f 	dsb	sy
 8005b16:	e7fe      	b.n	8005b16 <xPortStartScheduler+0x8a>
 8005b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	e7fe      	b.n	8005b28 <xPortStartScheduler+0x9c>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b2a:	9901      	ldr	r1, [sp, #4]
 8005b2c:	4c15      	ldr	r4, [pc, #84]	; (8005b84 <xPortStartScheduler+0xf8>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b2e:	4a18      	ldr	r2, [pc, #96]	; (8005b90 <xPortStartScheduler+0x104>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b30:	021b      	lsls	r3, r3, #8
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b32:	b2c9      	uxtb	r1, r1
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b38:	6003      	str	r3, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b3a:	7021      	strb	r1, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b3c:	6813      	ldr	r3, [r2, #0]
 8005b3e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b42:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b44:	6813      	ldr	r3, [r2, #0]
 8005b46:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b4a:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 8005b4c:	f7ff ff80 	bl	8005a50 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005b50:	4b10      	ldr	r3, [pc, #64]	; (8005b94 <xPortStartScheduler+0x108>)
 8005b52:	2400      	movs	r4, #0
 8005b54:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8005b56:	f7ff fec9 	bl	80058ec <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b5a:	4a0f      	ldr	r2, [pc, #60]	; (8005b98 <xPortStartScheduler+0x10c>)
 8005b5c:	6813      	ldr	r3, [r2, #0]
 8005b5e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005b62:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8005b64:	f7ff feae 	bl	80058c4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8005b68:	f7ff fe4e 	bl	8005808 <vTaskSwitchContext>
	prvTaskExitError();
 8005b6c:	f7ff fe8a 	bl	8005884 <prvTaskExitError>
}
 8005b70:	4620      	mov	r0, r4
 8005b72:	b002      	add	sp, #8
 8005b74:	bd10      	pop	{r4, pc}
 8005b76:	bf00      	nop
 8005b78:	e000ed00 	.word	0xe000ed00
 8005b7c:	410fc271 	.word	0x410fc271
 8005b80:	410fc270 	.word	0x410fc270
 8005b84:	e000e400 	.word	0xe000e400
 8005b88:	20000334 	.word	0x20000334
 8005b8c:	20000330 	.word	0x20000330
 8005b90:	e000ed20 	.word	0xe000ed20
 8005b94:	20000118 	.word	0x20000118
 8005b98:	e000ef34 	.word	0xe000ef34

08005b9c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b9c:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b9e:	4b11      	ldr	r3, [pc, #68]	; (8005be4 <prvInsertBlockIntoFreeList+0x48>)
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	4282      	cmp	r2, r0
 8005ba4:	d201      	bcs.n	8005baa <prvInsertBlockIntoFreeList+0xe>
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	e7fa      	b.n	8005ba0 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005baa:	685c      	ldr	r4, [r3, #4]
 8005bac:	1919      	adds	r1, r3, r4
 8005bae:	4288      	cmp	r0, r1
 8005bb0:	d103      	bne.n	8005bba <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005bb2:	6841      	ldr	r1, [r0, #4]
 8005bb4:	4421      	add	r1, r4
 8005bb6:	6059      	str	r1, [r3, #4]
 8005bb8:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005bba:	6844      	ldr	r4, [r0, #4]
 8005bbc:	1901      	adds	r1, r0, r4
 8005bbe:	428a      	cmp	r2, r1
 8005bc0:	d109      	bne.n	8005bd6 <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005bc2:	4909      	ldr	r1, [pc, #36]	; (8005be8 <prvInsertBlockIntoFreeList+0x4c>)
 8005bc4:	6809      	ldr	r1, [r1, #0]
 8005bc6:	428a      	cmp	r2, r1
 8005bc8:	d005      	beq.n	8005bd6 <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005bca:	e9d2 2100 	ldrd	r2, r1, [r2]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005bce:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005bd0:	6002      	str	r2, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005bd2:	6041      	str	r1, [r0, #4]
 8005bd4:	e000      	b.n	8005bd8 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005bd6:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005bd8:	4298      	cmp	r0, r3
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005bda:	bf18      	it	ne
 8005bdc:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	20003f48 	.word	0x20003f48
 8005be8:	20000338 	.word	0x20000338

08005bec <pvPortMalloc>:
{
 8005bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxEnd == NULL )
 8005bee:	4d3e      	ldr	r5, [pc, #248]	; (8005ce8 <pvPortMalloc+0xfc>)
{
 8005bf0:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005bf2:	f7ff fca7 	bl	8005544 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005bf6:	682a      	ldr	r2, [r5, #0]
 8005bf8:	2a00      	cmp	r2, #0
 8005bfa:	d056      	beq.n	8005caa <pvPortMalloc+0xbe>
 8005bfc:	4b3b      	ldr	r3, [pc, #236]	; (8005cec <pvPortMalloc+0x100>)
 8005bfe:	681d      	ldr	r5, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c00:	422c      	tst	r4, r5
 8005c02:	d14d      	bne.n	8005ca0 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 8005c04:	2c00      	cmp	r4, #0
 8005c06:	d04b      	beq.n	8005ca0 <pvPortMalloc+0xb4>
				xWantedSize += xHeapStructSize;
 8005c08:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c0c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c0e:	bf1c      	itt	ne
 8005c10:	f023 0307 	bicne.w	r3, r3, #7
 8005c14:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d042      	beq.n	8005ca0 <pvPortMalloc+0xb4>
 8005c1a:	4f35      	ldr	r7, [pc, #212]	; (8005cf0 <pvPortMalloc+0x104>)
 8005c1c:	683e      	ldr	r6, [r7, #0]
 8005c1e:	429e      	cmp	r6, r3
 8005c20:	d33e      	bcc.n	8005ca0 <pvPortMalloc+0xb4>
				pxBlock = xStart.pxNextFreeBlock;
 8005c22:	4834      	ldr	r0, [pc, #208]	; (8005cf4 <pvPortMalloc+0x108>)
 8005c24:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c26:	e006      	b.n	8005c36 <pvPortMalloc+0x4a>
 8005c28:	f8d4 c000 	ldr.w	ip, [r4]
 8005c2c:	f1bc 0f00 	cmp.w	ip, #0
 8005c30:	d004      	beq.n	8005c3c <pvPortMalloc+0x50>
 8005c32:	4620      	mov	r0, r4
 8005c34:	4664      	mov	r4, ip
 8005c36:	6861      	ldr	r1, [r4, #4]
 8005c38:	4299      	cmp	r1, r3
 8005c3a:	d3f5      	bcc.n	8005c28 <pvPortMalloc+0x3c>
				if( pxBlock != pxEnd )
 8005c3c:	4294      	cmp	r4, r2
 8005c3e:	d02f      	beq.n	8005ca0 <pvPortMalloc+0xb4>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c40:	6822      	ldr	r2, [r4, #0]
 8005c42:	6002      	str	r2, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c44:	1aca      	subs	r2, r1, r3
 8005c46:	2a10      	cmp	r2, #16
 8005c48:	d910      	bls.n	8005c6c <pvPortMalloc+0x80>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c4a:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c4c:	0741      	lsls	r1, r0, #29
 8005c4e:	d008      	beq.n	8005c62 <pvPortMalloc+0x76>
 8005c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c54:	f383 8811 	msr	BASEPRI, r3
 8005c58:	f3bf 8f6f 	isb	sy
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	e7fe      	b.n	8005c60 <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c62:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c64:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c66:	f7ff ff99 	bl	8005b9c <prvInsertBlockIntoFreeList>
 8005c6a:	6861      	ldr	r1, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c6c:	4a22      	ldr	r2, [pc, #136]	; (8005cf8 <pvPortMalloc+0x10c>)
 8005c6e:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c70:	1a76      	subs	r6, r6, r1
					pxBlock->pxNextFreeBlock = NULL;
 8005c72:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c74:	4329      	orrs	r1, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c76:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8005c78:	e9c4 3100 	strd	r3, r1, [r4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c7c:	f104 0408 	add.w	r4, r4, #8
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c80:	bf38      	it	cc
 8005c82:	6016      	strcc	r6, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c84:	603e      	str	r6, [r7, #0]
	( void ) xTaskResumeAll();
 8005c86:	f7ff fd11 	bl	80056ac <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c8a:	0763      	lsls	r3, r4, #29
 8005c8c:	d00b      	beq.n	8005ca6 <pvPortMalloc+0xba>
 8005c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	e7fe      	b.n	8005c9e <pvPortMalloc+0xb2>
	( void ) xTaskResumeAll();
 8005ca0:	f7ff fd04 	bl	80056ac <xTaskResumeAll>
 8005ca4:	2400      	movs	r4, #0
}
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uxAddress = ( size_t ) ucHeap;
 8005caa:	4b14      	ldr	r3, [pc, #80]	; (8005cfc <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 8005cac:	4a14      	ldr	r2, [pc, #80]	; (8005d00 <pvPortMalloc+0x114>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005cae:	4911      	ldr	r1, [pc, #68]	; (8005cf4 <pvPortMalloc+0x108>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cb0:	4f11      	ldr	r7, [pc, #68]	; (8005cf8 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005cb2:	075e      	lsls	r6, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005cb4:	bf18      	it	ne
 8005cb6:	3307      	addne	r3, #7
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cb8:	f022 0207 	bic.w	r2, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cbc:	bf18      	it	ne
 8005cbe:	f023 0307 	bicne.w	r3, r3, #7
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cc2:	4e0b      	ldr	r6, [pc, #44]	; (8005cf0 <pvPortMalloc+0x104>)
	pxEnd = ( void * ) uxAddress;
 8005cc4:	602a      	str	r2, [r5, #0]
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005cc6:	4618      	mov	r0, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005cc8:	1ad3      	subs	r3, r2, r3
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005cca:	4d08      	ldr	r5, [pc, #32]	; (8005cec <pvPortMalloc+0x100>)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ccc:	6033      	str	r3, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cce:	2600      	movs	r6, #0
 8005cd0:	e9c1 0600 	strd	r0, r6, [r1]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005cd4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
	pxEnd->pxNextFreeBlock = NULL;
 8005cd8:	e9c2 6600 	strd	r6, r6, [r2]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005cdc:	6029      	str	r1, [r5, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cde:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ce0:	e9c0 2300 	strd	r2, r3, [r0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ce4:	460d      	mov	r5, r1
 8005ce6:	e78b      	b.n	8005c00 <pvPortMalloc+0x14>
 8005ce8:	20000338 	.word	0x20000338
 8005cec:	20003f3c 	.word	0x20003f3c
 8005cf0:	20003f40 	.word	0x20003f40
 8005cf4:	20003f48 	.word	0x20003f48
 8005cf8:	20003f44 	.word	0x20003f44
 8005cfc:	2000033c 	.word	0x2000033c
 8005d00:	20003f34 	.word	0x20003f34

08005d04 <vPortFree>:
	if( pv != NULL )
 8005d04:	b1d0      	cbz	r0, 8005d3c <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d06:	4a19      	ldr	r2, [pc, #100]	; (8005d6c <vPortFree+0x68>)
 8005d08:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005d0c:	6812      	ldr	r2, [r2, #0]
 8005d0e:	4213      	tst	r3, r2
 8005d10:	d108      	bne.n	8005d24 <vPortFree+0x20>
 8005d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d16:	f383 8811 	msr	BASEPRI, r3
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	e7fe      	b.n	8005d22 <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d24:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005d28:	b149      	cbz	r1, 8005d3e <vPortFree+0x3a>
 8005d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	e7fe      	b.n	8005d3a <vPortFree+0x36>
 8005d3c:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d3e:	ea23 0302 	bic.w	r3, r3, r2
{
 8005d42:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d44:	f840 3c04 	str.w	r3, [r0, #-4]
 8005d48:	4604      	mov	r4, r0
				vTaskSuspendAll();
 8005d4a:	f7ff fbfb 	bl	8005544 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d4e:	4a08      	ldr	r2, [pc, #32]	; (8005d70 <vPortFree+0x6c>)
 8005d50:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005d54:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d56:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d5a:	440b      	add	r3, r1
 8005d5c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d5e:	f7ff ff1d 	bl	8005b9c <prvInsertBlockIntoFreeList>
}
 8005d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8005d66:	f7ff bca1 	b.w	80056ac <xTaskResumeAll>
 8005d6a:	bf00      	nop
 8005d6c:	20003f3c 	.word	0x20003f3c
 8005d70:	20003f40 	.word	0x20003f40

08005d74 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8005d74:	4b04      	ldr	r3, [pc, #16]	; (8005d88 <vApplicationGetIdleTaskMemory+0x14>)
 8005d76:	6003      	str	r3, [r0, #0]
{
 8005d78:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8005d7a:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8005d7c:	4c03      	ldr	r4, [pc, #12]	; (8005d8c <vApplicationGetIdleTaskMemory+0x18>)
 8005d7e:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8005d80:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 8005d82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	20004150 	.word	0x20004150
 8005d8c:	20003f50 	.word	0x20003f50

08005d90 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8005d90:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8005d92:	f000 fcad 	bl	80066f0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  gyro_handler();
 8005d96:	f001 fff1 	bl	8007d7c <gyro_handler>
	  osDelay(5);
 8005d9a:	2005      	movs	r0, #5
 8005d9c:	f7ff f888 	bl	8004eb0 <osDelay>
	  accel_handler();
 8005da0:	f002 f8d2 	bl	8007f48 <accel_handler>
	  osDelay(5);
 8005da4:	2005      	movs	r0, #5
 8005da6:	f7ff f883 	bl	8004eb0 <osDelay>
 8005daa:	e7f4      	b.n	8005d96 <StartDefaultTask+0x6>

08005dac <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8005dac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  MPU6050_getAllData(allData);
 8005dae:	4c04      	ldr	r4, [pc, #16]	; (8005dc0 <StartTask02+0x14>)
 8005db0:	4620      	mov	r0, r4
 8005db2:	f000 fa47 	bl	8006244 <MPU6050_getAllData>
	  osDelay(20);
 8005db6:	2014      	movs	r0, #20
 8005db8:	f7ff f87a 	bl	8004eb0 <osDelay>
 8005dbc:	e7f8      	b.n	8005db0 <StartTask02+0x4>
 8005dbe:	bf00      	nop
 8005dc0:	20005074 	.word	0x20005074

08005dc4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8005dc4:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 8005dc8:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8005e58 <StartTask03+0x94>
 8005dcc:	4f1c      	ldr	r7, [pc, #112]	; (8005e40 <StartTask03+0x7c>)
//		l_wheel_data[1] = speedDataLeft;
	  	r_wheel_data[0] = 0;
	  	r_wheel_data[1] = 30;
	  	l_wheel_data[0] = 1;
	  	l_wheel_data[1] = 30;
		HAL_CAN_AddTxMessage(&hcan1, &l_wheelHeader, r_wheel_data, &TxMailbox);
 8005dce:	4d1d      	ldr	r5, [pc, #116]	; (8005e44 <StartTask03+0x80>)
 8005dd0:	f8df b088 	ldr.w	fp, [pc, #136]	; 8005e5c <StartTask03+0x98>
 8005dd4:	4c1c      	ldr	r4, [pc, #112]	; (8005e48 <StartTask03+0x84>)
 8005dd6:	46c2      	mov	sl, r8
		osDelay(2);
		HAL_CAN_AddTxMessage(&hcan1, &r_wheelHeader, r_wheel_data, &TxMailbox);
		osDelay(2);
		HAL_CAN_AddTxMessage(&hcan1, &l_wheelHeader1, l_wheel_data, &TxMailbox);
 8005dd8:	46b9      	mov	r9, r7
	  	r_wheel_data[0] = 0;
 8005dda:	f04f 0e00 	mov.w	lr, #0
	  	l_wheel_data[0] = 1;
 8005dde:	f04f 0c01 	mov.w	ip, #1
		HAL_CAN_AddTxMessage(&hcan1, &l_wheelHeader, r_wheel_data, &TxMailbox);
 8005de2:	462b      	mov	r3, r5
 8005de4:	4652      	mov	r2, sl
 8005de6:	4659      	mov	r1, fp
	  	r_wheel_data[1] = 30;
 8005de8:	261e      	movs	r6, #30
		HAL_CAN_AddTxMessage(&hcan1, &l_wheelHeader, r_wheel_data, &TxMailbox);
 8005dea:	4620      	mov	r0, r4
	  	r_wheel_data[0] = 0;
 8005dec:	f888 e000 	strb.w	lr, [r8]
	  	l_wheel_data[0] = 1;
 8005df0:	f887 c000 	strb.w	ip, [r7]
	  	r_wheel_data[1] = 30;
 8005df4:	f888 6001 	strb.w	r6, [r8, #1]
	  	l_wheel_data[1] = 30;
 8005df8:	707e      	strb	r6, [r7, #1]
		HAL_CAN_AddTxMessage(&hcan1, &l_wheelHeader, r_wheel_data, &TxMailbox);
 8005dfa:	f7fa fce5 	bl	80007c8 <HAL_CAN_AddTxMessage>
		osDelay(2);
 8005dfe:	2002      	movs	r0, #2
 8005e00:	f7ff f856 	bl	8004eb0 <osDelay>
		HAL_CAN_AddTxMessage(&hcan1, &r_wheelHeader, r_wheel_data, &TxMailbox);
 8005e04:	462b      	mov	r3, r5
 8005e06:	4652      	mov	r2, sl
 8005e08:	4910      	ldr	r1, [pc, #64]	; (8005e4c <StartTask03+0x88>)
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	f7fa fcdc 	bl	80007c8 <HAL_CAN_AddTxMessage>
		osDelay(2);
 8005e10:	2002      	movs	r0, #2
 8005e12:	f7ff f84d 	bl	8004eb0 <osDelay>
		HAL_CAN_AddTxMessage(&hcan1, &l_wheelHeader1, l_wheel_data, &TxMailbox);
 8005e16:	462b      	mov	r3, r5
 8005e18:	464a      	mov	r2, r9
 8005e1a:	490d      	ldr	r1, [pc, #52]	; (8005e50 <StartTask03+0x8c>)
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	f7fa fcd3 	bl	80007c8 <HAL_CAN_AddTxMessage>
		osDelay(2);
 8005e22:	2002      	movs	r0, #2
 8005e24:	f7ff f844 	bl	8004eb0 <osDelay>
		HAL_CAN_AddTxMessage(&hcan1, &r_wheelHeader1, l_wheel_data, &TxMailbox);
 8005e28:	462b      	mov	r3, r5
 8005e2a:	464a      	mov	r2, r9
 8005e2c:	4909      	ldr	r1, [pc, #36]	; (8005e54 <StartTask03+0x90>)
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f7fa fcca 	bl	80007c8 <HAL_CAN_AddTxMessage>
		osDelay(2);
 8005e34:	2002      	movs	r0, #2
 8005e36:	f7ff f83b 	bl	8004eb0 <osDelay>
//		osDelay(2);
//		rpm_right_handler();
//		osDelay(5);
//		rpm_left_handler();
//		osDelay(5);
		spinOnce();
 8005e3a:	f002 feb9 	bl	8008bb0 <spinOnce>
 8005e3e:	e7cc      	b.n	8005dda <StartTask03+0x16>
 8005e40:	20004c08 	.word	0x20004c08
 8005e44:	2000506c 	.word	0x2000506c
 8005e48:	20005084 	.word	0x20005084
 8005e4c:	20004c10 	.word	0x20004c10
 8005e50:	20004c48 	.word	0x20004c48
 8005e54:	20004c30 	.word	0x20004c30
 8005e58:	200050b8 	.word	0x200050b8
 8005e5c:	200050bc 	.word	0x200050bc

08005e60 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8005e60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {

	laser_sensor_handler_1();
 8005e62:	f001 fe45 	bl	8007af0 <laser_sensor_handler_1>
	osDelay(50);
 8005e66:	2032      	movs	r0, #50	; 0x32
 8005e68:	f7ff f822 	bl	8004eb0 <osDelay>
 8005e6c:	e7f9      	b.n	8005e62 <StartTask04+0x2>
 8005e6e:	bf00      	nop

08005e70 <SystemClock_Config>:
{
 8005e70:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005e72:	2400      	movs	r4, #0
{
 8005e74:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005e76:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8005e7a:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e7e:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8005e82:	e9cd 4406 	strd	r4, r4, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e86:	4a1d      	ldr	r2, [pc, #116]	; (8005efc <SystemClock_Config+0x8c>)
 8005e88:	9401      	str	r4, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e8a:	9403      	str	r4, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e8c:	6c11      	ldr	r1, [r2, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e8e:	4b1c      	ldr	r3, [pc, #112]	; (8005f00 <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e90:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8005e94:	6411      	str	r1, [r2, #64]	; 0x40
 8005e96:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005e98:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8005e9c:	9201      	str	r2, [sp, #4]
 8005e9e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ea0:	9402      	str	r4, [sp, #8]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ea8:	601a      	str	r2, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eb0:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005eb2:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005eb4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005eb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005ebc:	2502      	movs	r5, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ebe:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005ec0:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005ec2:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005ec4:	2108      	movs	r1, #8
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005ec6:	22a8      	movs	r2, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005ec8:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005eca:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005ecc:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005ece:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005ed0:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005ed2:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005ed4:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005ed6:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005ed8:	260f      	movs	r6, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005eda:	f7fd f807 	bl	8002eec <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005ede:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005ee6:	a803      	add	r0, sp, #12
 8005ee8:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005eea:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005eec:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005eee:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005ef0:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005ef4:	f7fd fa08 	bl	8003308 <HAL_RCC_ClockConfig>
}
 8005ef8:	b014      	add	sp, #80	; 0x50
 8005efa:	bd70      	pop	{r4, r5, r6, pc}
 8005efc:	40023800 	.word	0x40023800
 8005f00:	40007000 	.word	0x40007000

08005f04 <main>:
{
 8005f04:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f06:	2400      	movs	r4, #0
{
 8005f08:	b0a2      	sub	sp, #136	; 0x88
  HAL_Init();
 8005f0a:	f7fa fae9 	bl	80004e0 <HAL_Init>
  SystemClock_Config();
 8005f0e:	f7ff ffaf 	bl	8005e70 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f12:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
 8005f16:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005f1a:	4b73      	ldr	r3, [pc, #460]	; (80060e8 <main+0x1e4>)
 8005f1c:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f1e:	941f      	str	r4, [sp, #124]	; 0x7c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hcan1.Instance = CAN1;
 8005f22:	4e72      	ldr	r6, [pc, #456]	; (80060ec <main+0x1e8>)
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8005f24:	4872      	ldr	r0, [pc, #456]	; (80060f0 <main+0x1ec>)
  hcan1.Instance = CAN1;
 8005f26:	4f73      	ldr	r7, [pc, #460]	; (80060f4 <main+0x1f0>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8005f28:	4d73      	ldr	r5, [pc, #460]	; (80060f8 <main+0x1f4>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005f2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f2e:	631a      	str	r2, [r3, #48]	; 0x30
 8005f30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f32:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005f36:	9201      	str	r2, [sp, #4]
 8005f38:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f3a:	9402      	str	r4, [sp, #8]
 8005f3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f3e:	f042 0210 	orr.w	r2, r2, #16
 8005f42:	631a      	str	r2, [r3, #48]	; 0x30
 8005f44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f46:	f002 0210 	and.w	r2, r2, #16
 8005f4a:	9202      	str	r2, [sp, #8]
 8005f4c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f4e:	9403      	str	r4, [sp, #12]
 8005f50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f52:	f042 0201 	orr.w	r2, r2, #1
 8005f56:	631a      	str	r2, [r3, #48]	; 0x30
 8005f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f5a:	f002 0201 	and.w	r2, r2, #1
 8005f5e:	9203      	str	r2, [sp, #12]
 8005f60:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005f62:	9404      	str	r4, [sp, #16]
 8005f64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f66:	f042 0208 	orr.w	r2, r2, #8
 8005f6a:	631a      	str	r2, [r3, #48]	; 0x30
 8005f6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f6e:	f002 0208 	and.w	r2, r2, #8
 8005f72:	9204      	str	r2, [sp, #16]
 8005f74:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f76:	9405      	str	r4, [sp, #20]
 8005f78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f7a:	f042 0202 	orr.w	r2, r2, #2
 8005f7e:	631a      	str	r2, [r3, #48]	; 0x30
 8005f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f82:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8005f86:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f88:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8005f8a:	f44f 7180 	mov.w	r1, #256	; 0x100
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f8e:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f90:	f04f 0801 	mov.w	r8, #1
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8005f94:	f7fa ffb2 	bl	8000efc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005f98:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005f9c:	a91b      	add	r1, sp, #108	; 0x6c
 8005f9e:	4854      	ldr	r0, [pc, #336]	; (80060f0 <main+0x1ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005fa0:	e9cd 381b 	strd	r3, r8, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fa4:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005fa8:	f7fa fea4 	bl	8000cf4 <HAL_GPIO_Init>
  hcan1.Init.Prescaler = 3;
 8005fac:	2103      	movs	r1, #3
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8005fae:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8005fb2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8005fb6:	4630      	mov	r0, r6
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8005fb8:	61b4      	str	r4, [r6, #24]
  hcan1.Init.Prescaler = 3;
 8005fba:	e9c6 7100 	strd	r7, r1, [r6]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8005fbe:	e9c6 2304 	strd	r2, r3, [r6, #16]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8005fc2:	60b4      	str	r4, [r6, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8005fc4:	60f4      	str	r4, [r6, #12]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8005fc6:	7734      	strb	r4, [r6, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8005fc8:	7774      	strb	r4, [r6, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8005fca:	f7fa fac7 	bl	800055c <HAL_CAN_Init>
  hi2c1.Instance = I2C1;
 8005fce:	4b4b      	ldr	r3, [pc, #300]	; (80060fc <main+0x1f8>)
  hi2c1.Init.ClockSpeed = 100000;
 8005fd0:	494b      	ldr	r1, [pc, #300]	; (8006100 <main+0x1fc>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005fd2:	609c      	str	r4, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005fd4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005fd8:	4618      	mov	r0, r3
  hi2c1.Instance = I2C1;
 8005fda:	f5a7 5780 	sub.w	r7, r7, #4096	; 0x1000
  hi2c1.Init.ClockSpeed = 100000;
 8005fde:	e9c3 7100 	strd	r7, r1, [r3]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005fe2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress1 = 0;
 8005fe4:	60dc      	str	r4, [r3, #12]
  hi2c1.Init.OwnAddress2 = 0;
 8005fe6:	e9c3 4405 	strd	r4, r4, [r3, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005fea:	e9c3 4407 	strd	r4, r4, [r3, #28]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005fee:	f7fb f909 	bl	8001204 <HAL_I2C_Init>
  MPU6050_init();
 8005ff2:	f000 f8fd 	bl	80061f0 <MPU6050_init>
  HAL_Delay(1000);
 8005ff6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ffa:	f7fa fa9d 	bl	8000538 <HAL_Delay>
  init_ROS();
 8005ffe:	f001 fc7b 	bl	80078f8 <init_ROS>
  HAL_Delay(1000);
 8006002:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006006:	f7fa fa97 	bl	8000538 <HAL_Delay>
  r_wheelHeader.DLC = 2;
 800600a:	f8df c118 	ldr.w	ip, [pc, #280]	; 8006124 <main+0x220>
  l_wheelHeader.DLC = 2;
 800600e:	493d      	ldr	r1, [pc, #244]	; (8006104 <main+0x200>)
  r_wheelHeader1.DLC = 2;
 8006010:	4a3d      	ldr	r2, [pc, #244]	; (8006108 <main+0x204>)
  r_wheelHeader.IDE = CAN_ID_STD;
 8006012:	f8cc 4008 	str.w	r4, [ip, #8]
  r_wheelHeader.StdId = 0xF;
 8006016:	270f      	movs	r7, #15
 8006018:	f8cc 7000 	str.w	r7, [ip]
  r_wheelHeader.DLC = 2;
 800601c:	2702      	movs	r7, #2
 800601e:	f8cc 7010 	str.w	r7, [ip, #16]
  r_wheelHeader.RTR = CAN_RTR_DATA;
 8006022:	f8cc 400c 	str.w	r4, [ip, #12]
  l_wheelHeader.StdId = 0x1F;
 8006026:	f04f 0c1f 	mov.w	ip, #31
 800602a:	f8c1 c000 	str.w	ip, [r1]
  l_wheelHeader.DLC = 2;
 800602e:	610f      	str	r7, [r1, #16]
  l_wheelHeader.RTR = CAN_RTR_DATA;
 8006030:	e9c1 4402 	strd	r4, r4, [r1, #8]
  r_wheelHeader1.StdId = 0x2F;
 8006034:	212f      	movs	r1, #47	; 0x2f
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8006036:	4b35      	ldr	r3, [pc, #212]	; (800610c <main+0x208>)
  r_wheelHeader1.DLC = 2;
 8006038:	6117      	str	r7, [r2, #16]
  r_wheelHeader1.StdId = 0x2F;
 800603a:	6011      	str	r1, [r2, #0]
  r_wheelHeader1.RTR = CAN_RTR_DATA;
 800603c:	e9c2 4402 	strd	r4, r4, [r2, #8]
  l_wheelHeader1.DLC = 2;
 8006040:	4a33      	ldr	r2, [pc, #204]	; (8006110 <main+0x20c>)
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8006042:	611c      	str	r4, [r3, #16]
  l_wheelHeader1.StdId = 0x3F;
 8006044:	213f      	movs	r1, #63	; 0x3f
 8006046:	6011      	str	r1, [r2, #0]
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8006048:	4630      	mov	r0, r6
 800604a:	4619      	mov	r1, r3
  l_wheelHeader1.DLC = 2;
 800604c:	6117      	str	r7, [r2, #16]
  l_wheelHeader1.RTR = CAN_RTR_DATA;
 800604e:	e9c2 4402 	strd	r4, r4, [r2, #8]
  sFilterConfig.FilterIdLow = 0;
 8006052:	e9c3 4400 	strd	r4, r4, [r3]
  sFilterConfig.FilterMaskIdLow = 0;
 8006056:	e9c3 4402 	strd	r4, r4, [r3, #8]
  sFilterConfig.FilterActivation = ENABLE;
 800605a:	e9c3 8807 	strd	r8, r8, [r3, #28]
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 800605e:	f7fa faff 	bl	8000660 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 8006062:	4630      	mov	r0, r6
 8006064:	f7fa fb82 	bl	800076c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8006068:	4639      	mov	r1, r7
 800606a:	4630      	mov	r0, r6
 800606c:	f7fa fc84 	bl	8000978 <HAL_CAN_ActivateNotification>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8006070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006072:	ae06      	add	r6, sp, #24
 8006074:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006076:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800607a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800607e:	4621      	mov	r1, r4
 8006080:	a806      	add	r0, sp, #24
 8006082:	f7fe feeb 	bl	8004e5c <osThreadCreate>
 8006086:	4b23      	ldr	r3, [pc, #140]	; (8006114 <main+0x210>)
  osThreadDef(IMUtask, StartTask02, osPriorityNormal, 0, 128);
 8006088:	f105 070c 	add.w	r7, r5, #12
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800608c:	6018      	str	r0, [r3, #0]
  osThreadDef(IMUtask, StartTask02, osPriorityNormal, 0, 128);
 800608e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006090:	ae0d      	add	r6, sp, #52	; 0x34
 8006092:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006094:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8006098:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  IMUtaskHandle = osThreadCreate(osThread(IMUtask), NULL);
 800609c:	4621      	mov	r1, r4
 800609e:	a80d      	add	r0, sp, #52	; 0x34
 80060a0:	f7fe fedc 	bl	8004e5c <osThreadCreate>
 80060a4:	4b1c      	ldr	r3, [pc, #112]	; (8006118 <main+0x214>)
  osThreadDef(wheelControltas, StartTask03, osPriorityHigh, 0, 128);
 80060a6:	f105 0728 	add.w	r7, r5, #40	; 0x28
  IMUtaskHandle = osThreadCreate(osThread(IMUtask), NULL);
 80060aa:	6018      	str	r0, [r3, #0]
  osThreadDef(wheelControltas, StartTask03, osPriorityHigh, 0, 128);
 80060ac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80060ae:	ae14      	add	r6, sp, #80	; 0x50
 80060b0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80060b2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80060b6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  wheelControltasHandle = osThreadCreate(osThread(wheelControltas), NULL);
 80060ba:	4621      	mov	r1, r4
 80060bc:	a814      	add	r0, sp, #80	; 0x50
 80060be:	f7fe fecd 	bl	8004e5c <osThreadCreate>
 80060c2:	4b16      	ldr	r3, [pc, #88]	; (800611c <main+0x218>)
  osThreadDef(sensorsTask, StartTask04, osPriorityNormal, 0, 128);
 80060c4:	3544      	adds	r5, #68	; 0x44
  wheelControltasHandle = osThreadCreate(osThread(wheelControltas), NULL);
 80060c6:	6018      	str	r0, [r3, #0]
  osThreadDef(sensorsTask, StartTask04, osPriorityNormal, 0, 128);
 80060c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060ca:	ae1b      	add	r6, sp, #108	; 0x6c
 80060cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80060ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80060d2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  sensorsTaskHandle = osThreadCreate(osThread(sensorsTask), NULL);
 80060d6:	4621      	mov	r1, r4
 80060d8:	a81b      	add	r0, sp, #108	; 0x6c
 80060da:	f7fe febf 	bl	8004e5c <osThreadCreate>
 80060de:	4b10      	ldr	r3, [pc, #64]	; (8006120 <main+0x21c>)
 80060e0:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80060e2:	f7fe feb5 	bl	8004e50 <osKernelStart>
 80060e6:	e7fe      	b.n	80060e6 <main+0x1e2>
 80060e8:	40023800 	.word	0x40023800
 80060ec:	20005084 	.word	0x20005084
 80060f0:	40021000 	.word	0x40021000
 80060f4:	40006400 	.word	0x40006400
 80060f8:	0800997c 	.word	0x0800997c
 80060fc:	20004b78 	.word	0x20004b78
 8006100:	000186a0 	.word	0x000186a0
 8006104:	200050bc 	.word	0x200050bc
 8006108:	20004c30 	.word	0x20004c30
 800610c:	20004b3c 	.word	0x20004b3c
 8006110:	20004c48 	.word	0x20004c48
 8006114:	20004b68 	.word	0x20004b68
 8006118:	20004b6c 	.word	0x20004b6c
 800611c:	20004bd4 	.word	0x20004bd4
 8006120:	20004bd8 	.word	0x20004bd8
 8006124:	20004c10 	.word	0x20004c10

08006128 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8006128:	b538      	push	{r3, r4, r5, lr}
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &wheel_RxHeader, canRXData);
 800612a:	4c1e      	ldr	r4, [pc, #120]	; (80061a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800612c:	4d1e      	ldr	r5, [pc, #120]	; (80061a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800612e:	481f      	ldr	r0, [pc, #124]	; (80061ac <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8006130:	462b      	mov	r3, r5
 8006132:	4622      	mov	r2, r4
 8006134:	2100      	movs	r1, #0
 8006136:	f7fa fb9f 	bl	8000878 <HAL_CAN_GetRxMessage>
	if (wheel_RxHeader.StdId == 0xFFF) {
 800613a:	6823      	ldr	r3, [r4, #0]
 800613c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006140:	4293      	cmp	r3, r2
 8006142:	d005      	beq.n	8006150 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
	else if (wheel_RxHeader.StdId == 0x7F) {
 8006144:	2b7f      	cmp	r3, #127	; 0x7f
 8006146:	d006      	beq.n	8006156 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
	else if (wheel_RxHeader.StdId == 0x3F) {
 8006148:	2b3f      	cmp	r3, #63	; 0x3f
 800614a:	d022      	beq.n	8006192 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
	else if (wheel_RxHeader.StdId == 0x3D) {
 800614c:	2b3d      	cmp	r3, #61	; 0x3d
 800614e:	d00b      	beq.n	8006168 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
	wheel_RxHeader.StdId = 0x000;
 8006150:	2300      	movs	r3, #0
 8006152:	6023      	str	r3, [r4, #0]
}
 8006154:	bd38      	pop	{r3, r4, r5, pc}
		sideRXDataLeft = canRXData[1];
 8006156:	4b16      	ldr	r3, [pc, #88]	; (80061b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
		speedRXDataLeft = canRXData[0];
 8006158:	4916      	ldr	r1, [pc, #88]	; (80061b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 800615a:	7828      	ldrb	r0, [r5, #0]
		sideRXDataLeft = canRXData[1];
 800615c:	786a      	ldrb	r2, [r5, #1]
		speedRXDataLeft = canRXData[0];
 800615e:	7008      	strb	r0, [r1, #0]
		sideRXDataLeft = canRXData[1];
 8006160:	701a      	strb	r2, [r3, #0]
	wheel_RxHeader.StdId = 0x000;
 8006162:	2300      	movs	r3, #0
 8006164:	6023      	str	r3, [r4, #0]
}
 8006166:	bd38      	pop	{r3, r4, r5, pc}
		sensorData1 = canRXData[0];
 8006168:	4a13      	ldr	r2, [pc, #76]	; (80061b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 800616a:	7828      	ldrb	r0, [r5, #0]
		sensorData2 = canRXData[1];
 800616c:	4913      	ldr	r1, [pc, #76]	; (80061bc <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
		sensorData1 = canRXData[0];
 800616e:	7010      	strb	r0, [r2, #0]
		sensorData3 = canRXData[2];
 8006170:	4b13      	ldr	r3, [pc, #76]	; (80061c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
		sensorData2 = canRXData[1];
 8006172:	7868      	ldrb	r0, [r5, #1]
 8006174:	7008      	strb	r0, [r1, #0]
		sensorData4 = canRXData[3];
 8006176:	4a13      	ldr	r2, [pc, #76]	; (80061c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
		sensorData3 = canRXData[2];
 8006178:	78a8      	ldrb	r0, [r5, #2]
 800617a:	7018      	strb	r0, [r3, #0]
		sensorData5 = canRXData[4];
 800617c:	4912      	ldr	r1, [pc, #72]	; (80061c8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
		sensorData4 = canRXData[3];
 800617e:	78e8      	ldrb	r0, [r5, #3]
		sensorData6 = canRXData[5];
 8006180:	4b12      	ldr	r3, [pc, #72]	; (80061cc <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
		sensorData4 = canRXData[3];
 8006182:	7010      	strb	r0, [r2, #0]
		sensorData5 = canRXData[4];
 8006184:	7928      	ldrb	r0, [r5, #4]
		sensorData6 = canRXData[5];
 8006186:	796a      	ldrb	r2, [r5, #5]
		sensorData5 = canRXData[4];
 8006188:	7008      	strb	r0, [r1, #0]
		sensorData6 = canRXData[5];
 800618a:	701a      	strb	r2, [r3, #0]
	wheel_RxHeader.StdId = 0x000;
 800618c:	2300      	movs	r3, #0
 800618e:	6023      	str	r3, [r4, #0]
}
 8006190:	bd38      	pop	{r3, r4, r5, pc}
		sideRXDataRight = canRXData[1];
 8006192:	4b0f      	ldr	r3, [pc, #60]	; (80061d0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
		speedRXDataRight = canRXData[0];
 8006194:	490f      	ldr	r1, [pc, #60]	; (80061d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8006196:	7828      	ldrb	r0, [r5, #0]
		sideRXDataRight = canRXData[1];
 8006198:	786a      	ldrb	r2, [r5, #1]
		speedRXDataRight = canRXData[0];
 800619a:	7008      	strb	r0, [r1, #0]
		sideRXDataRight = canRXData[1];
 800619c:	701a      	strb	r2, [r3, #0]
	wheel_RxHeader.StdId = 0x000;
 800619e:	2300      	movs	r3, #0
 80061a0:	6023      	str	r3, [r4, #0]
}
 80061a2:	bd38      	pop	{r3, r4, r5, pc}
 80061a4:	20004be0 	.word	0x20004be0
 80061a8:	20005060 	.word	0x20005060
 80061ac:	20005084 	.word	0x20005084
 80061b0:	200050b0 	.word	0x200050b0
 80061b4:	20004bdc 	.word	0x20004bdc
 80061b8:	200041a5 	.word	0x200041a5
 80061bc:	200041a6 	.word	0x200041a6
 80061c0:	200041a7 	.word	0x200041a7
 80061c4:	200041a8 	.word	0x200041a8
 80061c8:	200041a9 	.word	0x200041a9
 80061cc:	200041aa 	.word	0x200041aa
 80061d0:	20005069 	.word	0x20005069
 80061d4:	20005068 	.word	0x20005068

080061d8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80061d8:	6802      	ldr	r2, [r0, #0]
 80061da:	4b03      	ldr	r3, [pc, #12]	; (80061e8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80061dc:	429a      	cmp	r2, r3
 80061de:	d000      	beq.n	80061e2 <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80061e0:	4770      	bx	lr
    HAL_IncTick();
 80061e2:	f7fa b997 	b.w	8000514 <HAL_IncTick>
 80061e6:	bf00      	nop
 80061e8:	40000400 	.word	0x40000400

080061ec <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop

080061f0 <MPU6050_init>:
	ctrl = sensor_io_read(0x68, 0x75);
	return ctrl;
}

void MPU6050_init(void)
{
 80061f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061f2:	b085      	sub	sp, #20
}

void MPU6050_writeReg(uint16_t Addr, uint8_t reg, uint8_t value)
{
	uint8_t buf[2];
	buf[0] = reg;
 80061f4:	ac04      	add	r4, sp, #16
 80061f6:	236b      	movs	r3, #107	; 0x6b
 80061f8:	f824 3d04 	strh.w	r3, [r4, #-4]!
	buf[1] = value;
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 80061fc:	4d10      	ldr	r5, [pc, #64]	; (8006240 <MPU6050_init+0x50>)
 80061fe:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8006202:	4622      	mov	r2, r4
 8006204:	4628      	mov	r0, r5
 8006206:	9600      	str	r6, [sp, #0]
 8006208:	2302      	movs	r3, #2
 800620a:	21d0      	movs	r1, #208	; 0xd0
 800620c:	f7fb f8ba 	bl	8001384 <HAL_I2C_Master_Transmit>
	buf[0] = reg;
 8006210:	f640 071b 	movw	r7, #2075	; 0x81b
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 8006214:	4622      	mov	r2, r4
 8006216:	9600      	str	r6, [sp, #0]
 8006218:	4628      	mov	r0, r5
 800621a:	2302      	movs	r3, #2
 800621c:	21d0      	movs	r1, #208	; 0xd0
	buf[0] = reg;
 800621e:	f8ad 700c 	strh.w	r7, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 8006222:	f7fb f8af 	bl	8001384 <HAL_I2C_Master_Transmit>
 8006226:	4622      	mov	r2, r4
 8006228:	9600      	str	r6, [sp, #0]
 800622a:	4628      	mov	r0, r5
	buf[0] = reg;
 800622c:	f241 041c 	movw	r4, #4124	; 0x101c
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 8006230:	2302      	movs	r3, #2
 8006232:	21d0      	movs	r1, #208	; 0xd0
	buf[0] = reg;
 8006234:	f8ad 400c 	strh.w	r4, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 8006238:	f7fb f8a4 	bl	8001384 <HAL_I2C_Master_Transmit>
}
 800623c:	b005      	add	sp, #20
 800623e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006240:	20004b78 	.word	0x20004b78

08006244 <MPU6050_getAllData>:
{
 8006244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006248:	b08d      	sub	sp, #52	; 0x34

// Read an 8-bit register
uint8_t MPU6050_readReg(uint16_t Addr, uint8_t reg)
{
  uint8_t value;
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 800624a:	2401      	movs	r4, #1
 800624c:	f10d 062f 	add.w	r6, sp, #47	; 0x2f
 8006250:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 8006254:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8006258:	4623      	mov	r3, r4
 800625a:	9600      	str	r6, [sp, #0]
 800625c:	2243      	movs	r2, #67	; 0x43
 800625e:	21d0      	movs	r1, #208	; 0xd0
 8006260:	4870      	ldr	r0, [pc, #448]	; (8006424 <MPU6050_getAllData+0x1e0>)
 8006262:	f7fb fa0f 	bl	8001684 <HAL_I2C_Mem_Read>
 8006266:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800626a:	9600      	str	r6, [sp, #0]
 800626c:	4623      	mov	r3, r4
 800626e:	2244      	movs	r2, #68	; 0x44
 8006270:	21d0      	movs	r1, #208	; 0xd0
 8006272:	486c      	ldr	r0, [pc, #432]	; (8006424 <MPU6050_getAllData+0x1e0>)
  return value;
 8006274:	f89d a02f 	ldrb.w	sl, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8006278:	f7fb fa04 	bl	8001684 <HAL_I2C_Mem_Read>
 800627c:	e9cd 4701 	strd	r4, r7, [sp, #4]
  return value;
 8006280:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8006284:	9600      	str	r6, [sp, #0]
 8006286:	4623      	mov	r3, r4
 8006288:	2245      	movs	r2, #69	; 0x45
 800628a:	21d0      	movs	r1, #208	; 0xd0
 800628c:	4865      	ldr	r0, [pc, #404]	; (8006424 <MPU6050_getAllData+0x1e0>)
  return value;
 800628e:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8006290:	f7fb f9f8 	bl	8001684 <HAL_I2C_Mem_Read>
 8006294:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8006298:	9600      	str	r6, [sp, #0]
 800629a:	4623      	mov	r3, r4
 800629c:	2246      	movs	r2, #70	; 0x46
 800629e:	21d0      	movs	r1, #208	; 0xd0
 80062a0:	4860      	ldr	r0, [pc, #384]	; (8006424 <MPU6050_getAllData+0x1e0>)
  return value;
 80062a2:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 80062a6:	f7fb f9ed 	bl	8001684 <HAL_I2C_Mem_Read>
 80062aa:	e9cd 4701 	strd	r4, r7, [sp, #4]
  return value;
 80062ae:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 80062b2:	9600      	str	r6, [sp, #0]
 80062b4:	4623      	mov	r3, r4
 80062b6:	2247      	movs	r2, #71	; 0x47
 80062b8:	21d0      	movs	r1, #208	; 0xd0
 80062ba:	485a      	ldr	r0, [pc, #360]	; (8006424 <MPU6050_getAllData+0x1e0>)
  return value;
 80062bc:	9508      	str	r5, [sp, #32]
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 80062be:	f7fb f9e1 	bl	8001684 <HAL_I2C_Mem_Read>
 80062c2:	e9cd 4701 	strd	r4, r7, [sp, #4]
  return value;
 80062c6:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 80062ca:	9600      	str	r6, [sp, #0]
 80062cc:	4623      	mov	r3, r4
 80062ce:	2248      	movs	r2, #72	; 0x48
 80062d0:	21d0      	movs	r1, #208	; 0xd0
 80062d2:	4854      	ldr	r0, [pc, #336]	; (8006424 <MPU6050_getAllData+0x1e0>)
  return value;
 80062d4:	f8cd c01c 	str.w	ip, [sp, #28]
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 80062d8:	f7fb f9d4 	bl	8001684 <HAL_I2C_Mem_Read>
 80062dc:	e9cd 4701 	strd	r4, r7, [sp, #4]
  return value;
 80062e0:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 80062e4:	9600      	str	r6, [sp, #0]
 80062e6:	4623      	mov	r3, r4
 80062e8:	223b      	movs	r2, #59	; 0x3b
 80062ea:	21d0      	movs	r1, #208	; 0xd0
 80062ec:	484d      	ldr	r0, [pc, #308]	; (8006424 <MPU6050_getAllData+0x1e0>)
  return value;
 80062ee:	f8cd c018 	str.w	ip, [sp, #24]
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 80062f2:	f7fb f9c7 	bl	8001684 <HAL_I2C_Mem_Read>
 80062f6:	e9cd 4701 	strd	r4, r7, [sp, #4]
  return value;
 80062fa:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 80062fe:	9600      	str	r6, [sp, #0]
 8006300:	4623      	mov	r3, r4
 8006302:	223c      	movs	r2, #60	; 0x3c
 8006304:	21d0      	movs	r1, #208	; 0xd0
 8006306:	4847      	ldr	r0, [pc, #284]	; (8006424 <MPU6050_getAllData+0x1e0>)
  return value;
 8006308:	f8cd c014 	str.w	ip, [sp, #20]
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 800630c:	f7fb f9ba 	bl	8001684 <HAL_I2C_Mem_Read>
  return value;
 8006310:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8006314:	9600      	str	r6, [sp, #0]
 8006316:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800631a:	4623      	mov	r3, r4
 800631c:	223d      	movs	r2, #61	; 0x3d
 800631e:	21d0      	movs	r1, #208	; 0xd0
 8006320:	4840      	ldr	r0, [pc, #256]	; (8006424 <MPU6050_getAllData+0x1e0>)
  return value;
 8006322:	f8cd c010 	str.w	ip, [sp, #16]
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8006326:	f7fb f9ad 	bl	8001684 <HAL_I2C_Mem_Read>
 800632a:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800632e:	9600      	str	r6, [sp, #0]
 8006330:	4623      	mov	r3, r4
 8006332:	223e      	movs	r2, #62	; 0x3e
 8006334:	21d0      	movs	r1, #208	; 0xd0
 8006336:	483b      	ldr	r0, [pc, #236]	; (8006424 <MPU6050_getAllData+0x1e0>)
  return value;
 8006338:	f89d 802f 	ldrb.w	r8, [sp, #47]	; 0x2f
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 800633c:	4d3a      	ldr	r5, [pc, #232]	; (8006428 <MPU6050_getAllData+0x1e4>)
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 800633e:	f7fb f9a1 	bl	8001684 <HAL_I2C_Mem_Read>
 8006342:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8006346:	9600      	str	r6, [sp, #0]
 8006348:	4623      	mov	r3, r4
 800634a:	223f      	movs	r2, #63	; 0x3f
 800634c:	21d0      	movs	r1, #208	; 0xd0
 800634e:	4835      	ldr	r0, [pc, #212]	; (8006424 <MPU6050_getAllData+0x1e0>)
  return value;
 8006350:	f89d b02f 	ldrb.w	fp, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8006354:	f7fb f996 	bl	8001684 <HAL_I2C_Mem_Read>
 8006358:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800635c:	9600      	str	r6, [sp, #0]
 800635e:	4623      	mov	r3, r4
 8006360:	2240      	movs	r2, #64	; 0x40
 8006362:	21d0      	movs	r1, #208	; 0xd0
 8006364:	482f      	ldr	r0, [pc, #188]	; (8006424 <MPU6050_getAllData+0x1e0>)
  return value;
 8006366:	f89d 402f 	ldrb.w	r4, [sp, #47]	; 0x2f
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 800636a:	4e30      	ldr	r6, [pc, #192]	; (800642c <MPU6050_getAllData+0x1e8>)
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 800636c:	f7fb f98a 	bl	8001684 <HAL_I2C_Mem_Read>
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 8006370:	9b07      	ldr	r3, [sp, #28]
  return value;
 8006372:	f89d 702f 	ldrb.w	r7, [sp, #47]	; 0x2f
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 8006376:	ed9f 4a2e 	vldr	s8, [pc, #184]	; 8006430 <MPU6050_getAllData+0x1ec>
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 800637a:	eddf 4a2e 	vldr	s9, [pc, #184]	; 8006434 <MPU6050_getAllData+0x1f0>
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 800637e:	482e      	ldr	r0, [pc, #184]	; (8006438 <MPU6050_getAllData+0x1f4>)
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 8006380:	492e      	ldr	r1, [pc, #184]	; (800643c <MPU6050_getAllData+0x1f8>)
	accelY=(((int16_t)((uint16_t)buffer[8] << 8) + buffer[9]))/4096.0f*9.8f;
 8006382:	4a2f      	ldr	r2, [pc, #188]	; (8006440 <MPU6050_getAllData+0x1fc>)
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 8006384:	ea4f 2c03 	mov.w	ip, r3, lsl #8
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 8006388:	9b05      	ldr	r3, [sp, #20]
 800638a:	ea4f 2e03 	mov.w	lr, r3, lsl #8
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 800638e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006390:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 8006394:	fa03 fa8a 	sxtah	sl, r3, sl
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 8006398:	9b08      	ldr	r3, [sp, #32]
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 800639a:	ee07 aa90 	vmov	s15, sl
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 800639e:	ea4f 2909 	mov.w	r9, r9, lsl #8
 80063a2:	fa03 f989 	sxtah	r9, r3, r9
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 80063a6:	9b06      	ldr	r3, [sp, #24]
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 80063a8:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
	accelY=(((int16_t)((uint16_t)buffer[8] << 8) + buffer[9]))/4096.0f*9.8f;
 80063ac:	ea4f 2808 	mov.w	r8, r8, lsl #8
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 80063b0:	ee07 9a90 	vmov	s15, r9
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 80063b4:	fa03 fc8c 	sxtah	ip, r3, ip
	accelY=(((int16_t)((uint16_t)buffer[8] << 8) + buffer[9]))/4096.0f*9.8f;
 80063b8:	fa0b f888 	sxtah	r8, fp, r8
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 80063bc:	9b04      	ldr	r3, [sp, #16]
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 80063be:	eef8 5ae7 	vcvt.f32.s32	s11, s15
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 80063c2:	0224      	lsls	r4, r4, #8
	accelY=(((int16_t)((uint16_t)buffer[8] << 8) + buffer[9]))/4096.0f*9.8f;
 80063c4:	ee07 8a90 	vmov	s15, r8
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 80063c8:	fa03 f38e 	sxtah	r3, r3, lr
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 80063cc:	fa07 f484 	sxtah	r4, r7, r4
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 80063d0:	ee06 ca10 	vmov	s12, ip
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 80063d4:	ee06 3a90 	vmov	s13, r3
	accelY=(((int16_t)((uint16_t)buffer[8] << 8) + buffer[9]))/4096.0f*9.8f;
 80063d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 80063dc:	ee07 4a90 	vmov	s15, r4
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 80063e0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 80063e4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 80063e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 80063ec:	ee25 5a04 	vmul.f32	s10, s10, s8
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 80063f0:	ee65 5a84 	vmul.f32	s11, s11, s8
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 80063f4:	ee26 6a04 	vmul.f32	s12, s12, s8
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 80063f8:	ee66 6aa4 	vmul.f32	s13, s13, s9
	accelY=(((int16_t)((uint16_t)buffer[8] << 8) + buffer[9]))/4096.0f*9.8f;
 80063fc:	ee27 7a24 	vmul.f32	s14, s14, s9
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 8006400:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8006404:	4b0f      	ldr	r3, [pc, #60]	; (8006444 <MPU6050_getAllData+0x200>)
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 8006406:	ed86 5a00 	vstr	s10, [r6]
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 800640a:	edc5 5a00 	vstr	s11, [r5]
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 800640e:	ed80 6a00 	vstr	s12, [r0]
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 8006412:	edc1 6a00 	vstr	s13, [r1]
	accelY=(((int16_t)((uint16_t)buffer[8] << 8) + buffer[9]))/4096.0f*9.8f;
 8006416:	ed82 7a00 	vstr	s14, [r2]
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 800641a:	edc3 7a00 	vstr	s15, [r3]
}
 800641e:	b00d      	add	sp, #52	; 0x34
 8006420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006424:	20004b78 	.word	0x20004b78
 8006428:	200050ac 	.word	0x200050ac
 800642c:	20004bcc 	.word	0x20004bcc
 8006430:	398ba1dc 	.word	0x398ba1dc
 8006434:	3b1ccccd 	.word	0x3b1ccccd
 8006438:	20004c00 	.word	0x20004c00
 800643c:	20004b70 	.word	0x20004b70
 8006440:	20004b64 	.word	0x20004b64
 8006444:	20005070 	.word	0x20005070

08006448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006448:	b510      	push	{r4, lr}
 800644a:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800644c:	4b13      	ldr	r3, [pc, #76]	; (800649c <HAL_MspInit+0x54>)
 800644e:	2400      	movs	r4, #0
 8006450:	9400      	str	r4, [sp, #0]
 8006452:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006454:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006458:	645a      	str	r2, [r3, #68]	; 0x44
 800645a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800645c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006460:	9200      	str	r2, [sp, #0]
 8006462:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006464:	9401      	str	r4, [sp, #4]
 8006466:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006468:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800646c:	641a      	str	r2, [r3, #64]	; 0x40
 800646e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006474:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006476:	4622      	mov	r2, r4
 8006478:	210f      	movs	r1, #15
 800647a:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800647e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006480:	f7fa fbde 	bl	8000c40 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8006484:	2105      	movs	r1, #5
 8006486:	4608      	mov	r0, r1
 8006488:	4622      	mov	r2, r4
 800648a:	f7fa fbd9 	bl	8000c40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800648e:	2005      	movs	r0, #5

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006490:	b002      	add	sp, #8
 8006492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8006496:	f7fa bc09 	b.w	8000cac <HAL_NVIC_EnableIRQ>
 800649a:	bf00      	nop
 800649c:	40023800 	.word	0x40023800

080064a0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80064a0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcan->Instance==CAN1)
 80064a2:	6802      	ldr	r2, [r0, #0]
 80064a4:	4b1f      	ldr	r3, [pc, #124]	; (8006524 <HAL_CAN_MspInit+0x84>)
{
 80064a6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064a8:	2400      	movs	r4, #0
  if(hcan->Instance==CAN1)
 80064aa:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064ac:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80064b0:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80064b4:	9407      	str	r4, [sp, #28]
  if(hcan->Instance==CAN1)
 80064b6:	d001      	beq.n	80064bc <HAL_CAN_MspInit+0x1c>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80064b8:	b008      	add	sp, #32
 80064ba:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 80064bc:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80064c0:	9401      	str	r4, [sp, #4]
 80064c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80064c4:	4818      	ldr	r0, [pc, #96]	; (8006528 <HAL_CAN_MspInit+0x88>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80064c6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80064ca:	641a      	str	r2, [r3, #64]	; 0x40
 80064cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064ce:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80064d2:	9201      	str	r2, [sp, #4]
 80064d4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80064d6:	9402      	str	r4, [sp, #8]
 80064d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064da:	f042 0208 	orr.w	r2, r2, #8
 80064de:	631a      	str	r2, [r3, #48]	; 0x30
 80064e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e2:	f003 0308 	and.w	r3, r3, #8
 80064e6:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80064e8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80064ea:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80064ec:	2209      	movs	r2, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064ee:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80064f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064f2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80064f4:	9207      	str	r2, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80064f6:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064f8:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80064fa:	f7fa fbfb 	bl	8000cf4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80064fe:	4622      	mov	r2, r4
 8006500:	2105      	movs	r1, #5
 8006502:	2014      	movs	r0, #20
 8006504:	f7fa fb9c 	bl	8000c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8006508:	2014      	movs	r0, #20
 800650a:	f7fa fbcf 	bl	8000cac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800650e:	4622      	mov	r2, r4
 8006510:	2105      	movs	r1, #5
 8006512:	2015      	movs	r0, #21
 8006514:	f7fa fb94 	bl	8000c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8006518:	2015      	movs	r0, #21
 800651a:	f7fa fbc7 	bl	8000cac <HAL_NVIC_EnableIRQ>
}
 800651e:	b008      	add	sp, #32
 8006520:	bd70      	pop	{r4, r5, r6, pc}
 8006522:	bf00      	nop
 8006524:	40006400 	.word	0x40006400
 8006528:	40020c00 	.word	0x40020c00

0800652c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800652c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 800652e:	6802      	ldr	r2, [r0, #0]
 8006530:	4b1c      	ldr	r3, [pc, #112]	; (80065a4 <HAL_I2C_MspInit+0x78>)
{
 8006532:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006534:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 8006536:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006538:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800653c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8006540:	9407      	str	r4, [sp, #28]
  if(hi2c->Instance==I2C1)
 8006542:	d001      	beq.n	8006548 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006544:	b008      	add	sp, #32
 8006546:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006548:	4d17      	ldr	r5, [pc, #92]	; (80065a8 <HAL_I2C_MspInit+0x7c>)
 800654a:	9401      	str	r4, [sp, #4]
 800654c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800654e:	4817      	ldr	r0, [pc, #92]	; (80065ac <HAL_I2C_MspInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006550:	f043 0302 	orr.w	r3, r3, #2
 8006554:	632b      	str	r3, [r5, #48]	; 0x30
 8006556:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800655e:	23c0      	movs	r3, #192	; 0xc0
 8006560:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006562:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006564:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006566:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006568:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800656a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800656c:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800656e:	2304      	movs	r3, #4
 8006570:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006574:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006576:	f7fa fbbd 	bl	8000cf4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800657a:	9402      	str	r4, [sp, #8]
 800657c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800657e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006582:	642b      	str	r3, [r5, #64]	; 0x40
 8006584:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8006586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800658a:	4622      	mov	r2, r4
    __HAL_RCC_I2C1_CLK_ENABLE();
 800658c:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800658e:	2105      	movs	r1, #5
 8006590:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006592:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8006594:	f7fa fb54 	bl	8000c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8006598:	201f      	movs	r0, #31
 800659a:	f7fa fb87 	bl	8000cac <HAL_NVIC_EnableIRQ>
}
 800659e:	b008      	add	sp, #32
 80065a0:	bd70      	pop	{r4, r5, r6, pc}
 80065a2:	bf00      	nop
 80065a4:	40005400 	.word	0x40005400
 80065a8:	40023800 	.word	0x40023800
 80065ac:	40020400 	.word	0x40020400

080065b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80065b0:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 80065b2:	4601      	mov	r1, r0
{
 80065b4:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 80065b6:	2200      	movs	r2, #0
 80065b8:	201d      	movs	r0, #29
 80065ba:	f7fa fb41 	bl	8000c40 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 80065be:	201d      	movs	r0, #29
 80065c0:	f7fa fb74 	bl	8000cac <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80065c4:	2500      	movs	r5, #0
 80065c6:	4b16      	ldr	r3, [pc, #88]	; (8006620 <HAL_InitTick+0x70>)
 80065c8:	9502      	str	r5, [sp, #8]
 80065ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80065cc:	4c15      	ldr	r4, [pc, #84]	; (8006624 <HAL_InitTick+0x74>)
  __HAL_RCC_TIM3_CLK_ENABLE();
 80065ce:	f042 0202 	orr.w	r2, r2, #2
 80065d2:	641a      	str	r2, [r3, #64]	; 0x40
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	f003 0302 	and.w	r3, r3, #2
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80065da:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM3_CLK_ENABLE();
 80065dc:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80065de:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM3_CLK_ENABLE();
 80065e0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80065e2:	f7fc ff45 	bl	8003470 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80065e6:	f7fc ff33 	bl	8003450 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80065ea:	4a0f      	ldr	r2, [pc, #60]	; (8006628 <HAL_InitTick+0x78>)
  htim3.Instance = TIM3;
 80065ec:	490f      	ldr	r1, [pc, #60]	; (800662c <HAL_InitTick+0x7c>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
  htim3.Init.Prescaler = uwPrescalerValue;
  htim3.Init.ClockDivision = 0;
 80065ee:	6125      	str	r5, [r4, #16]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80065f0:	0043      	lsls	r3, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80065f2:	fba2 2303 	umull	r2, r3, r2, r3
 80065f6:	0c9b      	lsrs	r3, r3, #18
 80065f8:	3b01      	subs	r3, #1
  htim3.Init.Period = (1000000 / 1000) - 1;
 80065fa:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80065fe:	4620      	mov	r0, r4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006600:	e9c4 3501 	strd	r3, r5, [r4, #4]
  htim3.Instance = TIM3;
 8006604:	6021      	str	r1, [r4, #0]
  htim3.Init.Period = (1000000 / 1000) - 1;
 8006606:	60e2      	str	r2, [r4, #12]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8006608:	f7fc ff56 	bl	80034b8 <HAL_TIM_Base_Init>
 800660c:	b110      	cbz	r0, 8006614 <HAL_InitTick+0x64>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800660e:	2001      	movs	r0, #1
}
 8006610:	b009      	add	sp, #36	; 0x24
 8006612:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim3);
 8006614:	4620      	mov	r0, r4
 8006616:	f7fc ffd3 	bl	80035c0 <HAL_TIM_Base_Start_IT>
}
 800661a:	b009      	add	sp, #36	; 0x24
 800661c:	bd30      	pop	{r4, r5, pc}
 800661e:	bf00      	nop
 8006620:	40023800 	.word	0x40023800
 8006624:	200050d8 	.word	0x200050d8
 8006628:	431bde83 	.word	0x431bde83
 800662c:	40000400 	.word	0x40000400

08006630 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop

08006634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006634:	e7fe      	b.n	8006634 <HardFault_Handler>
 8006636:	bf00      	nop

08006638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006638:	e7fe      	b.n	8006638 <MemManage_Handler>
 800663a:	bf00      	nop

0800663c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800663c:	e7fe      	b.n	800663c <BusFault_Handler>
 800663e:	bf00      	nop

08006640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006640:	e7fe      	b.n	8006640 <UsageFault_Handler>
 8006642:	bf00      	nop

08006644 <DebugMon_Handler>:
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop

08006648 <RCC_IRQHandler>:
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop

0800664c <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800664c:	4801      	ldr	r0, [pc, #4]	; (8006654 <CAN1_RX0_IRQHandler+0x8>)
 800664e:	f7fa b9bd 	b.w	80009cc <HAL_CAN_IRQHandler>
 8006652:	bf00      	nop
 8006654:	20005084 	.word	0x20005084

08006658 <CAN1_RX1_IRQHandler>:
 8006658:	4801      	ldr	r0, [pc, #4]	; (8006660 <CAN1_RX1_IRQHandler+0x8>)
 800665a:	f7fa b9b7 	b.w	80009cc <HAL_CAN_IRQHandler>
 800665e:	bf00      	nop
 8006660:	20005084 	.word	0x20005084

08006664 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006664:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006666:	4804      	ldr	r0, [pc, #16]	; (8006678 <TIM3_IRQHandler+0x14>)
 8006668:	f7fc ffc2 	bl	80035f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  f++;
 800666c:	4a03      	ldr	r2, [pc, #12]	; (800667c <TIM3_IRQHandler+0x18>)
 800666e:	6813      	ldr	r3, [r2, #0]
 8006670:	3301      	adds	r3, #1
 8006672:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM3_IRQn 1 */
}
 8006674:	bd08      	pop	{r3, pc}
 8006676:	bf00      	nop
 8006678:	200050d8 	.word	0x200050d8
 800667c:	20004b74 	.word	0x20004b74

08006680 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006680:	4801      	ldr	r0, [pc, #4]	; (8006688 <I2C1_EV_IRQHandler+0x8>)
 8006682:	f7fb b9f3 	b.w	8001a6c <HAL_I2C_EV_IRQHandler>
 8006686:	bf00      	nop
 8006688:	20004b78 	.word	0x20004b78

0800668c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800668c:	4801      	ldr	r0, [pc, #4]	; (8006694 <OTG_FS_IRQHandler+0x8>)
 800668e:	f7fb bfaf 	b.w	80025f0 <HAL_PCD_IRQHandler>
 8006692:	bf00      	nop
 8006694:	20005fe8 	.word	0x20005fe8

08006698 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006698:	4a0c      	ldr	r2, [pc, #48]	; (80066cc <_sbrk+0x34>)
{
 800669a:	b508      	push	{r3, lr}
	if (heap_end == 0)
 800669c:	6813      	ldr	r3, [r2, #0]
 800669e:	b133      	cbz	r3, 80066ae <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80066a0:	4418      	add	r0, r3
 80066a2:	4669      	mov	r1, sp
 80066a4:	4288      	cmp	r0, r1
 80066a6:	d808      	bhi.n	80066ba <_sbrk+0x22>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80066a8:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80066ae:	4b08      	ldr	r3, [pc, #32]	; (80066d0 <_sbrk+0x38>)
 80066b0:	6013      	str	r3, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80066b2:	4418      	add	r0, r3
 80066b4:	4669      	mov	r1, sp
 80066b6:	4288      	cmp	r0, r1
 80066b8:	d9f6      	bls.n	80066a8 <_sbrk+0x10>
		errno = ENOMEM;
 80066ba:	f002 fffd 	bl	80096b8 <__errno>
 80066be:	230c      	movs	r3, #12
 80066c0:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80066c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	bd08      	pop	{r3, pc}
 80066ca:	bf00      	nop
 80066cc:	200041ac 	.word	0x200041ac
 80066d0:	200065f4 	.word	0x200065f4

080066d4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80066d4:	4b05      	ldr	r3, [pc, #20]	; (80066ec <SystemInit+0x18>)
 80066d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80066da:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80066de:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80066e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80066e6:	6099      	str	r1, [r3, #8]
#endif
}
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	e000ed00 	.word	0xe000ed00

080066f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80066f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80066f2:	2200      	movs	r2, #0
 80066f4:	4910      	ldr	r1, [pc, #64]	; (8006738 <MX_USB_DEVICE_Init+0x48>)
 80066f6:	4811      	ldr	r0, [pc, #68]	; (800673c <MX_USB_DEVICE_Init+0x4c>)
 80066f8:	f7fd ff4c 	bl	8004594 <USBD_Init>
 80066fc:	b9c0      	cbnz	r0, 8006730 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80066fe:	4910      	ldr	r1, [pc, #64]	; (8006740 <MX_USB_DEVICE_Init+0x50>)
 8006700:	480e      	ldr	r0, [pc, #56]	; (800673c <MX_USB_DEVICE_Init+0x4c>)
 8006702:	f7fd ff5f 	bl	80045c4 <USBD_RegisterClass>
 8006706:	b980      	cbnz	r0, 800672a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006708:	490e      	ldr	r1, [pc, #56]	; (8006744 <MX_USB_DEVICE_Init+0x54>)
 800670a:	480c      	ldr	r0, [pc, #48]	; (800673c <MX_USB_DEVICE_Init+0x4c>)
 800670c:	f7fd fefc 	bl	8004508 <USBD_CDC_RegisterInterface>
 8006710:	b940      	cbnz	r0, 8006724 <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006712:	480a      	ldr	r0, [pc, #40]	; (800673c <MX_USB_DEVICE_Init+0x4c>)
 8006714:	f7fd ff6a 	bl	80045ec <USBD_Start>
 8006718:	b900      	cbnz	r0, 800671c <MX_USB_DEVICE_Init+0x2c>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800671a:	bd08      	pop	{r3, pc}
 800671c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006720:	f7ff bd64 	b.w	80061ec <Error_Handler>
    Error_Handler();
 8006724:	f7ff fd62 	bl	80061ec <Error_Handler>
 8006728:	e7f3      	b.n	8006712 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800672a:	f7ff fd5f 	bl	80061ec <Error_Handler>
 800672e:	e7eb      	b.n	8006708 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8006730:	f7ff fd5c 	bl	80061ec <Error_Handler>
 8006734:	e7e3      	b.n	80066fe <MX_USB_DEVICE_Init+0xe>
 8006736:	bf00      	nop
 8006738:	20000134 	.word	0x20000134
 800673c:	20005118 	.word	0x20005118
 8006740:	20000008 	.word	0x20000008
 8006744:	20000120 	.word	0x20000120

08006748 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8006748:	2000      	movs	r0, #0
 800674a:	4770      	bx	lr

0800674c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800674c:	2000      	movs	r0, #0
 800674e:	4770      	bx	lr

08006750 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8006750:	2000      	movs	r0, #0
 8006752:	4770      	bx	lr

08006754 <CDC_Receive_FS>:
{
 8006754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006756:	b083      	sub	sp, #12
  volatile uint32_t counter = 0;
 8006758:	2300      	movs	r3, #0
{
 800675a:	4605      	mov	r5, r0
 800675c:	460f      	mov	r7, r1
  volatile uint32_t counter = 0;
 800675e:	9301      	str	r3, [sp, #4]
       RxBuffer[RxFifoIndex ] = Buf[counter];
 8006760:	4e12      	ldr	r6, [pc, #72]	; (80067ac <CDC_Receive_FS+0x58>)
 8006762:	4c13      	ldr	r4, [pc, #76]	; (80067b0 <CDC_Receive_FS+0x5c>)
  while(counter < *Len)
 8006764:	e014      	b.n	8006790 <CDC_Receive_FS+0x3c>
       RxBuffer[RxFifoIndex ] = Buf[counter];
 8006766:	9a01      	ldr	r2, [sp, #4]
 8006768:	6823      	ldr	r3, [r4, #0]
 800676a:	5caa      	ldrb	r2, [r5, r2]
 800676c:	54f2      	strb	r2, [r6, r3]
       cdc_receive_put(Buf[counter]);
 800676e:	9b01      	ldr	r3, [sp, #4]
 8006770:	5ce8      	ldrb	r0, [r5, r3]
 8006772:	f001 f8bb 	bl	80078ec <cdc_receive_put>
       counter++, RxFifoIndex++;
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	9a01      	ldr	r2, [sp, #4]
 800677a:	3301      	adds	r3, #1
       if(RxFifoIndex  == RxBufferSize)
 800677c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
       counter++, RxFifoIndex++;
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	f102 0201 	add.w	r2, r2, #1
            RxFifoIndex  = 0;
 8006786:	bf08      	it	eq
 8006788:	2300      	moveq	r3, #0
       counter++, RxFifoIndex++;
 800678a:	9201      	str	r2, [sp, #4]
            RxFifoIndex  = 0;
 800678c:	bf08      	it	eq
 800678e:	6023      	streq	r3, [r4, #0]
  while(counter < *Len)
 8006790:	9b01      	ldr	r3, [sp, #4]
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	429a      	cmp	r2, r3
 8006796:	d8e6      	bhi.n	8006766 <CDC_Receive_FS+0x12>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006798:	4629      	mov	r1, r5
 800679a:	4806      	ldr	r0, [pc, #24]	; (80067b4 <CDC_Receive_FS+0x60>)
 800679c:	f7fd fec4 	bl	8004528 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80067a0:	4804      	ldr	r0, [pc, #16]	; (80067b4 <CDC_Receive_FS+0x60>)
 80067a2:	f7fd fedf 	bl	8004564 <USBD_CDC_ReceivePacket>
}
 80067a6:	2000      	movs	r0, #0
 80067a8:	b003      	add	sp, #12
 80067aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067ac:	20005be8 	.word	0x20005be8
 80067b0:	200041b0 	.word	0x200041b0
 80067b4:	20005118 	.word	0x20005118

080067b8 <CDC_Init_FS>:
{
 80067b8:	b510      	push	{r4, lr}
	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80067ba:	4c07      	ldr	r4, [pc, #28]	; (80067d8 <CDC_Init_FS+0x20>)
 80067bc:	4907      	ldr	r1, [pc, #28]	; (80067dc <CDC_Init_FS+0x24>)
 80067be:	2200      	movs	r2, #0
 80067c0:	4620      	mov	r0, r4
 80067c2:	f7fd fea9 	bl	8004518 <USBD_CDC_SetTxBuffer>
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80067c6:	4906      	ldr	r1, [pc, #24]	; (80067e0 <CDC_Init_FS+0x28>)
 80067c8:	4620      	mov	r0, r4
 80067ca:	f7fd fead 	bl	8004528 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);                                         //This is new to the function, the rest is standard HAL
 80067ce:	4620      	mov	r0, r4
 80067d0:	f7fd fec8 	bl	8004564 <USBD_CDC_ReceivePacket>
}
 80067d4:	2000      	movs	r0, #0
 80067d6:	bd10      	pop	{r4, pc}
 80067d8:	20005118 	.word	0x20005118
 80067dc:	200057e8 	.word	0x200057e8
 80067e0:	200053e8 	.word	0x200053e8

080067e4 <CDC_Transmit_FS>:
{
 80067e4:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80067e6:	4c09      	ldr	r4, [pc, #36]	; (800680c <CDC_Transmit_FS+0x28>)
 80067e8:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 80067ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80067f0:	b10b      	cbz	r3, 80067f6 <CDC_Transmit_FS+0x12>
}
 80067f2:	2001      	movs	r0, #1
 80067f4:	bd10      	pop	{r4, pc}
 80067f6:	460a      	mov	r2, r1
 80067f8:	4601      	mov	r1, r0
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80067fa:	4620      	mov	r0, r4
 80067fc:	f7fd fe8c 	bl	8004518 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006800:	4620      	mov	r0, r4
}
 8006802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006806:	f7fd be95 	b.w	8004534 <USBD_CDC_TransmitPacket>
 800680a:	bf00      	nop
 800680c:	20005118 	.word	0x20005118

08006810 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006810:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 8006812:	6803      	ldr	r3, [r0, #0]
{
 8006814:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006816:	2400      	movs	r4, #0
  if(pcdHandle->Instance==USB_OTG_FS)
 8006818:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800681c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8006820:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8006824:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006826:	d001      	beq.n	800682c <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006828:	b008      	add	sp, #32
 800682a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800682c:	4d17      	ldr	r5, [pc, #92]	; (800688c <HAL_PCD_MspInit+0x7c>)
 800682e:	9401      	str	r4, [sp, #4]
 8006830:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006832:	4817      	ldr	r0, [pc, #92]	; (8006890 <HAL_PCD_MspInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006834:	f043 0301 	orr.w	r3, r3, #1
 8006838:	632b      	str	r3, [r5, #48]	; 0x30
 800683a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006842:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006846:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006848:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800684a:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800684c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800684e:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006850:	230a      	movs	r3, #10
 8006852:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006856:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006858:	f7fa fa4c 	bl	8000cf4 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800685c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800685e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006862:	636b      	str	r3, [r5, #52]	; 0x34
 8006864:	9402      	str	r4, [sp, #8]
 8006866:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8006868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800686c:	646b      	str	r3, [r5, #68]	; 0x44
 800686e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8006870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8006874:	4622      	mov	r2, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006876:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8006878:	2105      	movs	r1, #5
 800687a:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800687c:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800687e:	f7fa f9df 	bl	8000c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006882:	2043      	movs	r0, #67	; 0x43
 8006884:	f7fa fa12 	bl	8000cac <HAL_NVIC_EnableIRQ>
}
 8006888:	b008      	add	sp, #32
 800688a:	bd70      	pop	{r4, r5, r6, pc}
 800688c:	40023800 	.word	0x40023800
 8006890:	40020000 	.word	0x40020000

08006894 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006894:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8006898:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800689c:	f7fd beb8 	b.w	8004610 <USBD_LL_SetupStage>

080068a0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80068a0:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80068a4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80068a8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80068ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80068b0:	f7fd bede 	b.w	8004670 <USBD_LL_DataOutStage>

080068b4 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80068b4:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80068b8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80068bc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80068c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068c2:	f7fd bf0b 	b.w	80046dc <USBD_LL_DataInStage>
 80068c6:	bf00      	nop

080068c8 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80068c8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80068cc:	f7fd bfa8 	b.w	8004820 <USBD_LL_SOF>

080068d0 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80068d0:	68c1      	ldr	r1, [r0, #12]
{ 
 80068d2:	b510      	push	{r4, lr}
 80068d4:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80068d6:	b121      	cbz	r1, 80068e2 <HAL_PCD_ResetCallback+0x12>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80068d8:	2902      	cmp	r1, #2
 80068da:	d00c      	beq.n	80068f6 <HAL_PCD_ResetCallback+0x26>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 80068dc:	f7ff fc86 	bl	80061ec <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80068e0:	2101      	movs	r1, #1
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80068e2:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 80068e6:	f7fd ff83 	bl	80047f0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80068ea:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 80068ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80068f2:	f7fd bf55 	b.w	80047a0 <USBD_LL_Reset>
    speed = USBD_SPEED_FULL;
 80068f6:	2101      	movs	r1, #1
 80068f8:	e7f3      	b.n	80068e2 <HAL_PCD_ResetCallback+0x12>
 80068fa:	bf00      	nop

080068fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068fc:	b510      	push	{r4, lr}
 80068fe:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006900:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006904:	f7fd ff78 	bl	80047f8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006908:	6822      	ldr	r2, [r4, #0]
 800690a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800690e:	f043 0301 	orr.w	r3, r3, #1
 8006912:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006916:	6a23      	ldr	r3, [r4, #32]
 8006918:	b123      	cbz	r3, 8006924 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800691a:	4a03      	ldr	r2, [pc, #12]	; (8006928 <HAL_PCD_SuspendCallback+0x2c>)
 800691c:	6913      	ldr	r3, [r2, #16]
 800691e:	f043 0306 	orr.w	r3, r3, #6
 8006922:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006924:	bd10      	pop	{r4, pc}
 8006926:	bf00      	nop
 8006928:	e000ed00 	.word	0xe000ed00

0800692c <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800692c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006930:	f7fd bf6c 	b.w	800480c <USBD_LL_Resume>

08006934 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006934:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006938:	f7fd bf82 	b.w	8004840 <USBD_LL_IsoOUTIncomplete>

0800693c <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800693c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006940:	f7fd bf7c 	b.w	800483c <USBD_LL_IsoINIncomplete>

08006944 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006944:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006948:	f7fd bf7c 	b.w	8004844 <USBD_LL_DevConnected>

0800694c <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800694c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006950:	f7fd bf7a 	b.w	8004848 <USBD_LL_DevDisconnected>

08006954 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006954:	7802      	ldrb	r2, [r0, #0]
 8006956:	b10a      	cbz	r2, 800695c <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8006958:	2000      	movs	r0, #0
 800695a:	4770      	bx	lr
{
 800695c:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_OTG_FS.pData = pdev;
 800695e:	4b15      	ldr	r3, [pc, #84]	; (80069b4 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006960:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.pData = pdev;
 8006962:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006966:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800696a:	2404      	movs	r4, #4
  pdev->pData = &hpcd_USB_OTG_FS;
 800696c:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006970:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006972:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006974:	e9c3 2207 	strd	r2, r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006978:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800697a:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800697e:	e9c3 5400 	strd	r5, r4, [r3]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006982:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006984:	6199      	str	r1, [r3, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006986:	f7fb fd85 	bl	8002494 <HAL_PCD_Init>
 800698a:	b978      	cbnz	r0, 80069ac <USBD_LL_Init+0x58>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800698c:	2180      	movs	r1, #128	; 0x80
 800698e:	4809      	ldr	r0, [pc, #36]	; (80069b4 <USBD_LL_Init+0x60>)
 8006990:	f7fc faa6 	bl	8002ee0 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006994:	2240      	movs	r2, #64	; 0x40
 8006996:	2100      	movs	r1, #0
 8006998:	4806      	ldr	r0, [pc, #24]	; (80069b4 <USBD_LL_Init+0x60>)
 800699a:	f7fc fa7d 	bl	8002e98 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800699e:	2280      	movs	r2, #128	; 0x80
 80069a0:	2101      	movs	r1, #1
 80069a2:	4804      	ldr	r0, [pc, #16]	; (80069b4 <USBD_LL_Init+0x60>)
 80069a4:	f7fc fa78 	bl	8002e98 <HAL_PCDEx_SetTxFiFo>
}
 80069a8:	2000      	movs	r0, #0
 80069aa:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 80069ac:	f7ff fc1e 	bl	80061ec <Error_Handler>
 80069b0:	e7ec      	b.n	800698c <USBD_LL_Init+0x38>
 80069b2:	bf00      	nop
 80069b4:	20005fe8 	.word	0x20005fe8

080069b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80069b8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80069ba:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80069be:	f7fb fdf5 	bl	80025ac <HAL_PCD_Start>
 80069c2:	2803      	cmp	r0, #3
 80069c4:	bf96      	itet	ls
 80069c6:	4b02      	ldrls	r3, [pc, #8]	; (80069d0 <USBD_LL_Start+0x18>)
 80069c8:	2003      	movhi	r0, #3
 80069ca:	5c18      	ldrbls	r0, [r3, r0]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
  
  return usb_status;
}
 80069cc:	bd08      	pop	{r3, pc}
 80069ce:	bf00      	nop
 80069d0:	08009a3c 	.word	0x08009a3c

080069d4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80069d4:	b510      	push	{r4, lr}
 80069d6:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80069d8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80069dc:	4613      	mov	r3, r2
 80069de:	4622      	mov	r2, r4
 80069e0:	f7fc f924 	bl	8002c2c <HAL_PCD_EP_Open>
 80069e4:	2803      	cmp	r0, #3
 80069e6:	bf96      	itet	ls
 80069e8:	4b01      	ldrls	r3, [pc, #4]	; (80069f0 <USBD_LL_OpenEP+0x1c>)
 80069ea:	2003      	movhi	r0, #3
 80069ec:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 80069ee:	bd10      	pop	{r4, pc}
 80069f0:	08009a3c 	.word	0x08009a3c

080069f4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80069f4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80069f6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80069fa:	f7fc f94b 	bl	8002c94 <HAL_PCD_EP_Close>
 80069fe:	2803      	cmp	r0, #3
 8006a00:	bf96      	itet	ls
 8006a02:	4b02      	ldrls	r3, [pc, #8]	; (8006a0c <USBD_LL_CloseEP+0x18>)
 8006a04:	2003      	movhi	r0, #3
 8006a06:	5c18      	ldrbls	r0, [r3, r0]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 
  return usb_status;  
}
 8006a08:	bd08      	pop	{r3, pc}
 8006a0a:	bf00      	nop
 8006a0c:	08009a3c 	.word	0x08009a3c

08006a10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a10:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006a12:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006a16:	f7fc f9c3 	bl	8002da0 <HAL_PCD_EP_SetStall>
 8006a1a:	2803      	cmp	r0, #3
 8006a1c:	bf96      	itet	ls
 8006a1e:	4b02      	ldrls	r3, [pc, #8]	; (8006a28 <USBD_LL_StallEP+0x18>)
 8006a20:	2003      	movhi	r0, #3
 8006a22:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 8006a24:	bd08      	pop	{r3, pc}
 8006a26:	bf00      	nop
 8006a28:	08009a3c 	.word	0x08009a3c

08006a2c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a2c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006a2e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006a32:	f7fc f9f9 	bl	8002e28 <HAL_PCD_EP_ClrStall>
 8006a36:	2803      	cmp	r0, #3
 8006a38:	bf96      	itet	ls
 8006a3a:	4b02      	ldrls	r3, [pc, #8]	; (8006a44 <USBD_LL_ClearStallEP+0x18>)
 8006a3c:	2003      	movhi	r0, #3
 8006a3e:	5c18      	ldrbls	r0, [r3, r0]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
  
  return usb_status; 
}
 8006a40:	bd08      	pop	{r3, pc}
 8006a42:	bf00      	nop
 8006a44:	08009a3c 	.word	0x08009a3c

08006a48 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8006a48:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006a4a:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 8006a4e:	d406      	bmi.n	8006a5e <USBD_LL_IsStallEP+0x16>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006a50:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006a54:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006a58:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 8006a5c:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006a5e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006a62:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006a66:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006a6a:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 8006a6e:	4770      	bx	lr

08006a70 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006a70:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006a72:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006a76:	f7fc f8c5 	bl	8002c04 <HAL_PCD_SetAddress>
 8006a7a:	2803      	cmp	r0, #3
 8006a7c:	bf96      	itet	ls
 8006a7e:	4b02      	ldrls	r3, [pc, #8]	; (8006a88 <USBD_LL_SetUSBAddress+0x18>)
 8006a80:	2003      	movhi	r0, #3
 8006a82:	5c18      	ldrbls	r0, [r3, r0]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 8006a84:	bd08      	pop	{r3, pc}
 8006a86:	bf00      	nop
 8006a88:	08009a3c 	.word	0x08009a3c

08006a8c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006a8c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006a8e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006a92:	f7fc f961 	bl	8002d58 <HAL_PCD_EP_Transmit>
 8006a96:	2803      	cmp	r0, #3
 8006a98:	bf96      	itet	ls
 8006a9a:	4b02      	ldrls	r3, [pc, #8]	; (8006aa4 <USBD_LL_Transmit+0x18>)
 8006a9c:	2003      	movhi	r0, #3
 8006a9e:	5c18      	ldrbls	r0, [r3, r0]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
  
  return usb_status;    
}
 8006aa0:	bd08      	pop	{r3, pc}
 8006aa2:	bf00      	nop
 8006aa4:	08009a3c 	.word	0x08009a3c

08006aa8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006aa8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006aaa:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006aae:	f7fc f921 	bl	8002cf4 <HAL_PCD_EP_Receive>
 8006ab2:	2803      	cmp	r0, #3
 8006ab4:	bf96      	itet	ls
 8006ab6:	4b02      	ldrls	r3, [pc, #8]	; (8006ac0 <USBD_LL_PrepareReceive+0x18>)
 8006ab8:	2003      	movhi	r0, #3
 8006aba:	5c18      	ldrbls	r0, [r3, r0]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
  
  return usb_status; 
}
 8006abc:	bd08      	pop	{r3, pc}
 8006abe:	bf00      	nop
 8006ac0:	08009a3c 	.word	0x08009a3c

08006ac4 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006ac4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006ac8:	f7fc b93c 	b.w	8002d44 <HAL_PCD_EP_GetRxCount>

08006acc <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006acc:	2312      	movs	r3, #18
 8006ace:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8006ad0:	4800      	ldr	r0, [pc, #0]	; (8006ad4 <USBD_FS_DeviceDescriptor+0x8>)
 8006ad2:	4770      	bx	lr
 8006ad4:	20000150 	.word	0x20000150

08006ad8 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006ad8:	2304      	movs	r3, #4
 8006ada:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8006adc:	4800      	ldr	r0, [pc, #0]	; (8006ae0 <USBD_FS_LangIDStrDescriptor+0x8>)
 8006ade:	4770      	bx	lr
 8006ae0:	20000164 	.word	0x20000164

08006ae4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ae4:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006ae6:	4c04      	ldr	r4, [pc, #16]	; (8006af8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8006ae8:	4804      	ldr	r0, [pc, #16]	; (8006afc <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8006aea:	460a      	mov	r2, r1
 8006aec:	4621      	mov	r1, r4
 8006aee:	f7fe f943 	bl	8004d78 <USBD_GetString>
  return USBD_StrDesc;
}
 8006af2:	4620      	mov	r0, r4
 8006af4:	bd10      	pop	{r4, pc}
 8006af6:	bf00      	nop
 8006af8:	200063f0 	.word	0x200063f0
 8006afc:	08009a5c 	.word	0x08009a5c

08006b00 <USBD_FS_ProductStrDescriptor>:
{
 8006b00:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b02:	4c04      	ldr	r4, [pc, #16]	; (8006b14 <USBD_FS_ProductStrDescriptor+0x14>)
 8006b04:	4804      	ldr	r0, [pc, #16]	; (8006b18 <USBD_FS_ProductStrDescriptor+0x18>)
 8006b06:	460a      	mov	r2, r1
 8006b08:	4621      	mov	r1, r4
 8006b0a:	f7fe f935 	bl	8004d78 <USBD_GetString>
}
 8006b0e:	4620      	mov	r0, r4
 8006b10:	bd10      	pop	{r4, pc}
 8006b12:	bf00      	nop
 8006b14:	200063f0 	.word	0x200063f0
 8006b18:	08009a70 	.word	0x08009a70

08006b1c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b1c:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b1e:	4c04      	ldr	r4, [pc, #16]	; (8006b30 <USBD_FS_ConfigStrDescriptor+0x14>)
 8006b20:	4804      	ldr	r0, [pc, #16]	; (8006b34 <USBD_FS_ConfigStrDescriptor+0x18>)
 8006b22:	460a      	mov	r2, r1
 8006b24:	4621      	mov	r1, r4
 8006b26:	f7fe f927 	bl	8004d78 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	bd10      	pop	{r4, pc}
 8006b2e:	bf00      	nop
 8006b30:	200063f0 	.word	0x200063f0
 8006b34:	08009a40 	.word	0x08009a40

08006b38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b38:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b3a:	4c04      	ldr	r4, [pc, #16]	; (8006b4c <USBD_FS_InterfaceStrDescriptor+0x14>)
 8006b3c:	4804      	ldr	r0, [pc, #16]	; (8006b50 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8006b3e:	460a      	mov	r2, r1
 8006b40:	4621      	mov	r1, r4
 8006b42:	f7fe f919 	bl	8004d78 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8006b46:	4620      	mov	r0, r4
 8006b48:	bd10      	pop	{r4, pc}
 8006b4a:	bf00      	nop
 8006b4c:	200063f0 	.word	0x200063f0
 8006b50:	08009a4c 	.word	0x08009a4c

08006b54 <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006b54:	4a44      	ldr	r2, [pc, #272]	; (8006c68 <USBD_FS_SerialStrDescriptor+0x114>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006b56:	4b45      	ldr	r3, [pc, #276]	; (8006c6c <USBD_FS_SerialStrDescriptor+0x118>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006b58:	6812      	ldr	r2, [r2, #0]

  deviceserial0 += deviceserial2;
 8006b5a:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 8006b5c:	201a      	movs	r0, #26

  if (deviceserial0 != 0)
 8006b5e:	18d2      	adds	r2, r2, r3
  *length = USB_SIZ_STRING_SERIAL;
 8006b60:	8008      	strh	r0, [r1, #0]
  if (deviceserial0 != 0)
 8006b62:	d101      	bne.n	8006b68 <USBD_FS_SerialStrDescriptor+0x14>
}
 8006b64:	4842      	ldr	r0, [pc, #264]	; (8006c70 <USBD_FS_SerialStrDescriptor+0x11c>)
 8006b66:	4770      	bx	lr
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 8006b68:	0f13      	lsrs	r3, r2, #28
 8006b6a:	b2d8      	uxtb	r0, r3
 8006b6c:	2b09      	cmp	r3, #9
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006b6e:	4941      	ldr	r1, [pc, #260]	; (8006c74 <USBD_FS_SerialStrDescriptor+0x120>)
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b70:	4b3f      	ldr	r3, [pc, #252]	; (8006c70 <USBD_FS_SerialStrDescriptor+0x11c>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006b72:	6809      	ldr	r1, [r1, #0]
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b74:	bf94      	ite	ls
 8006b76:	3030      	addls	r0, #48	; 0x30
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006b78:	3037      	addhi	r0, #55	; 0x37
{
 8006b7a:	b410      	push	{r4}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006b7c:	7098      	strb	r0, [r3, #2]
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8006b7e:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8006b80:	f3c2 6003 	ubfx	r0, r2, #24, #4
 8006b84:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8006b86:	70dc      	strb	r4, [r3, #3]
 8006b88:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b8a:	bf94      	ite	ls
 8006b8c:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006b8e:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8006b90:	f3c2 5003 	ubfx	r0, r2, #20, #4
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006b94:	711c      	strb	r4, [r3, #4]
    pbuf[2 * idx + 1] = 0;
 8006b96:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8006b98:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8006b9a:	715c      	strb	r4, [r3, #5]
 8006b9c:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b9e:	bf94      	ite	ls
 8006ba0:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ba2:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8006ba4:	f3c2 4003 	ubfx	r0, r2, #16, #4
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ba8:	719c      	strb	r4, [r3, #6]
    pbuf[2 * idx + 1] = 0;
 8006baa:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8006bac:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8006bae:	71dc      	strb	r4, [r3, #7]
 8006bb0:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8006bb2:	bf94      	ite	ls
 8006bb4:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006bb6:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8006bb8:	f3c2 3003 	ubfx	r0, r2, #12, #4
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006bbc:	721c      	strb	r4, [r3, #8]
    pbuf[2 * idx + 1] = 0;
 8006bbe:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8006bc0:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8006bc2:	725c      	strb	r4, [r3, #9]
 8006bc4:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8006bc6:	bf94      	ite	ls
 8006bc8:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006bca:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8006bcc:	f3c2 2003 	ubfx	r0, r2, #8, #4
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006bd0:	729c      	strb	r4, [r3, #10]
    pbuf[2 * idx + 1] = 0;
 8006bd2:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8006bd4:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8006bd6:	72dc      	strb	r4, [r3, #11]
 8006bd8:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8006bda:	bf94      	ite	ls
 8006bdc:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006bde:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8006be0:	f3c2 1003 	ubfx	r0, r2, #4, #4
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006be4:	731c      	strb	r4, [r3, #12]
    pbuf[2 * idx + 1] = 0;
 8006be6:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8006be8:	2809      	cmp	r0, #9
 8006bea:	f002 020f 	and.w	r2, r2, #15
    pbuf[2 * idx + 1] = 0;
 8006bee:	735c      	strb	r4, [r3, #13]
 8006bf0:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8006bf2:	bf98      	it	ls
 8006bf4:	3430      	addls	r4, #48	; 0x30
 8006bf6:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006bf8:	bf88      	it	hi
 8006bfa:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8006bfc:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8006bfe:	bf94      	ite	ls
 8006c00:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006c02:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8006c04:	0f0a      	lsrs	r2, r1, #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006c06:	7418      	strb	r0, [r3, #16]
    pbuf[2 * idx + 1] = 0;
 8006c08:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 8006c0a:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 8006c0c:	7458      	strb	r0, [r3, #17]
 8006c0e:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 8006c10:	bf94      	ite	ls
 8006c12:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006c14:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8006c16:	f3c1 6203 	ubfx	r2, r1, #24, #4
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006c1a:	7498      	strb	r0, [r3, #18]
    pbuf[2 * idx + 1] = 0;
 8006c1c:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 8006c1e:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 8006c20:	74d8      	strb	r0, [r3, #19]
 8006c22:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 8006c24:	bf94      	ite	ls
 8006c26:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006c28:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8006c2a:	f3c1 5203 	ubfx	r2, r1, #20, #4
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006c2e:	7518      	strb	r0, [r3, #20]
    pbuf[2 * idx + 1] = 0;
 8006c30:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 8006c32:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 8006c34:	7558      	strb	r0, [r3, #21]
    if (((value >> 28)) < 0xA)
 8006c36:	f3c1 4103 	ubfx	r1, r1, #16, #4
 8006c3a:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 8006c3c:	bf98      	it	ls
 8006c3e:	3030      	addls	r0, #48	; 0x30
 8006c40:	b2ca      	uxtb	r2, r1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006c42:	bf88      	it	hi
 8006c44:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8006c46:	2909      	cmp	r1, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8006c48:	bf94      	ite	ls
 8006c4a:	3230      	addls	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006c4c:	3237      	addhi	r2, #55	; 0x37
 8006c4e:	739c      	strb	r4, [r3, #14]
 8006c50:	7598      	strb	r0, [r3, #22]
    pbuf[2 * idx + 1] = 0;
 8006c52:	2400      	movs	r4, #0
 8006c54:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006c56:	761a      	strb	r2, [r3, #24]
    pbuf[2 * idx + 1] = 0;
 8006c58:	2200      	movs	r2, #0
 8006c5a:	75d8      	strb	r0, [r3, #23]
 8006c5c:	73dc      	strb	r4, [r3, #15]
 8006c5e:	765a      	strb	r2, [r3, #25]
}
 8006c60:	4803      	ldr	r0, [pc, #12]	; (8006c70 <USBD_FS_SerialStrDescriptor+0x11c>)
 8006c62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	1fff7a10 	.word	0x1fff7a10
 8006c6c:	1fff7a18 	.word	0x1fff7a18
 8006c70:	20000168 	.word	0x20000168
 8006c74:	1fff7a14 	.word	0x1fff7a14

08006c78 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8006c78:	b470      	push	{r4, r5, r6}
  uint32_t nsec_part = nsec % 1000000000UL;
 8006c7a:	680d      	ldr	r5, [r1, #0]
  uint32_t sec_part = nsec / 1000000000UL;
 8006c7c:	4b06      	ldr	r3, [pc, #24]	; (8006c98 <_ZN3ros16normalizeSecNSecERmS0_+0x20>)
  sec += sec_part;
 8006c7e:	6804      	ldr	r4, [r0, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8006c80:	4e06      	ldr	r6, [pc, #24]	; (8006c9c <_ZN3ros16normalizeSecNSecERmS0_+0x24>)
  uint32_t sec_part = nsec / 1000000000UL;
 8006c82:	0a6a      	lsrs	r2, r5, #9
 8006c84:	fba3 3202 	umull	r3, r2, r3, r2
 8006c88:	09d3      	lsrs	r3, r2, #7
  sec += sec_part;
 8006c8a:	441c      	add	r4, r3
  uint32_t nsec_part = nsec % 1000000000UL;
 8006c8c:	fb06 5313 	mls	r3, r6, r3, r5
  sec += sec_part;
 8006c90:	6004      	str	r4, [r0, #0]
  nsec = nsec_part;
 8006c92:	600b      	str	r3, [r1, #0]
}
 8006c94:	bc70      	pop	{r4, r5, r6}
 8006c96:	4770      	bx	lr
 8006c98:	00044b83 	.word	0x00044b83
 8006c9c:	3b9aca00 	.word	0x3b9aca00

08006ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006cd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006ca4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006ca6:	e003      	b.n	8006cb0 <LoopCopyDataInit>

08006ca8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006ca8:	4b0c      	ldr	r3, [pc, #48]	; (8006cdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006caa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006cac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006cae:	3104      	adds	r1, #4

08006cb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006cb0:	480b      	ldr	r0, [pc, #44]	; (8006ce0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006cb2:	4b0c      	ldr	r3, [pc, #48]	; (8006ce4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006cb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006cb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006cb8:	d3f6      	bcc.n	8006ca8 <CopyDataInit>
  ldr  r2, =_sbss
 8006cba:	4a0b      	ldr	r2, [pc, #44]	; (8006ce8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006cbc:	e002      	b.n	8006cc4 <LoopFillZerobss>

08006cbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006cbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006cc0:	f842 3b04 	str.w	r3, [r2], #4

08006cc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006cc4:	4b09      	ldr	r3, [pc, #36]	; (8006cec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006cc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006cc8:	d3f9      	bcc.n	8006cbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006cca:	f7ff fd03 	bl	80066d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006cce:	f002 fcf9 	bl	80096c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006cd2:	f7ff f917 	bl	8005f04 <main>
  bx  lr    
 8006cd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006cd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006cdc:	08009f34 	.word	0x08009f34
  ldr  r0, =_sdata
 8006ce0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006ce4:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8006ce8:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8006cec:	200065f4 	.word	0x200065f4

08006cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006cf0:	e7fe      	b.n	8006cf0 <ADC_IRQHandler>
	...

08006cf4 <_ZNK8std_msgs4Time9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8006cf4:	6843      	ldr	r3, [r0, #4]
 8006cf6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8006cf8:	6843      	ldr	r3, [r0, #4]
 8006cfa:	0a1b      	lsrs	r3, r3, #8
 8006cfc:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8006cfe:	88c3      	ldrh	r3, [r0, #6]
 8006d00:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8006d02:	79c3      	ldrb	r3, [r0, #7]
 8006d04:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->data.sec);
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8006d06:	6883      	ldr	r3, [r0, #8]
 8006d08:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8006d0a:	6883      	ldr	r3, [r0, #8]
 8006d0c:	0a1b      	lsrs	r3, r3, #8
 8006d0e:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8006d10:	8943      	ldrh	r3, [r0, #10]
 8006d12:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8006d14:	7ac3      	ldrb	r3, [r0, #11]
 8006d16:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->data.nsec);
      return offset;
    }
 8006d18:	2008      	movs	r0, #8
 8006d1a:	4770      	bx	lr

08006d1c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8006d1c:	780b      	ldrb	r3, [r1, #0]
 8006d1e:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006d20:	784a      	ldrb	r2, [r1, #1]
 8006d22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006d26:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006d28:	788a      	ldrb	r2, [r1, #2]
 8006d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d2e:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006d30:	78ca      	ldrb	r2, [r1, #3]
 8006d32:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006d36:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->data.sec);
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8006d38:	790b      	ldrb	r3, [r1, #4]
 8006d3a:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006d3c:	794a      	ldrb	r2, [r1, #5]
 8006d3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006d42:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006d44:	798a      	ldrb	r2, [r1, #6]
 8006d46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d4a:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006d4c:	79ca      	ldrb	r2, [r1, #7]
 8006d4e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006d52:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->data.nsec);
     return offset;
    }
 8006d54:	2008      	movs	r0, #8
 8006d56:	4770      	bx	lr

08006d58 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8006d58:	4800      	ldr	r0, [pc, #0]	; (8006d5c <_ZN8std_msgs4Time7getTypeEv+0x4>)
 8006d5a:	4770      	bx	lr
 8006d5c:	08009e94 	.word	0x08009e94

08006d60 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8006d60:	4800      	ldr	r0, [pc, #0]	; (8006d64 <_ZN8std_msgs4Time6getMD5Ev+0x4>)
 8006d62:	4770      	bx	lr
 8006d64:	08009e70 	.word	0x08009e70

08006d68 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8006d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8006d6c:	780b      	ldrb	r3, [r1, #0]
 8006d6e:	8083      	strh	r3, [r0, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006d70:	784a      	ldrb	r2, [r1, #1]
 8006d72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006d76:	8083      	strh	r3, [r0, #4]
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
  {
    var = 0;
    for (size_t i = 0; i < sizeof(V); i++)
      var |= (arr[i] << (8 * i));
 8006d78:	790d      	ldrb	r5, [r1, #4]
 8006d7a:	78ca      	ldrb	r2, [r1, #3]
 8006d7c:	794b      	ldrb	r3, [r1, #5]
 8006d7e:	042d      	lsls	r5, r5, #16
    virtual int deserialize(unsigned char *inbuffer)
 8006d80:	4607      	mov	r7, r0
 8006d82:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8006d86:	7888      	ldrb	r0, [r1, #2]
 8006d88:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 8006d8c:	4305      	orrs	r5, r0
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8006d8e:	f105 0806 	add.w	r8, r5, #6
 8006d92:	f1b8 0f06 	cmp.w	r8, #6
    virtual int deserialize(unsigned char *inbuffer)
 8006d96:	460e      	mov	r6, r1
 8006d98:	f101 0405 	add.w	r4, r1, #5
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8006d9c:	d904      	bls.n	8006da8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x40>
 8006d9e:	462a      	mov	r2, r5
 8006da0:	3106      	adds	r1, #6
 8006da2:	4620      	mov	r0, r4
 8006da4:	f002 fccd 	bl	8009742 <memmove>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_topic_name-1]=0;
 8006da8:	1973      	adds	r3, r6, r5
 8006daa:	2200      	movs	r2, #0
 8006dac:	715a      	strb	r2, [r3, #5]
      this->topic_name = (char *)(inbuffer + offset-1);
 8006dae:	60bc      	str	r4, [r7, #8]
 8006db0:	79dc      	ldrb	r4, [r3, #7]
 8006db2:	7a1a      	ldrb	r2, [r3, #8]
 8006db4:	7a5b      	ldrb	r3, [r3, #9]
 8006db6:	f816 0008 	ldrb.w	r0, [r6, r8]
 8006dba:	0224      	lsls	r4, r4, #8
 8006dbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006dc0:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
      offset += length_topic_name;
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
      offset += 4;
 8006dc4:	f108 0804 	add.w	r8, r8, #4
 8006dc8:	4304      	orrs	r4, r0
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8006dca:	4444      	add	r4, r8
 8006dcc:	4544      	cmp	r4, r8
 8006dce:	d90f      	bls.n	8006df0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x88>
          inbuffer[k-1]=inbuffer[k];
 8006dd0:	1b63      	subs	r3, r4, r5
 8006dd2:	3b0a      	subs	r3, #10
 8006dd4:	f105 020b 	add.w	r2, r5, #11
 8006dd8:	f105 010a 	add.w	r1, r5, #10
 8006ddc:	f105 0009 	add.w	r0, r5, #9
 8006de0:	4294      	cmp	r4, r2
 8006de2:	bf2c      	ite	cs
 8006de4:	461a      	movcs	r2, r3
 8006de6:	2201      	movcc	r2, #1
 8006de8:	4431      	add	r1, r6
 8006dea:	4430      	add	r0, r6
 8006dec:	f002 fca9 	bl	8009742 <memmove>
      }
      inbuffer[offset+length_message_type-1]=0;
 8006df0:	1932      	adds	r2, r6, r4
      this->message_type = (char *)(inbuffer + offset-1);
 8006df2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006df6:	eb06 0308 	add.w	r3, r6, r8
      inbuffer[offset+length_message_type-1]=0;
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	f802 1c01 	strb.w	r1, [r2, #-1]
      this->message_type = (char *)(inbuffer + offset-1);
 8006e00:	60fb      	str	r3, [r7, #12]
 8006e02:	7855      	ldrb	r5, [r2, #1]
 8006e04:	7891      	ldrb	r1, [r2, #2]
 8006e06:	78d2      	ldrb	r2, [r2, #3]
 8006e08:	5d33      	ldrb	r3, [r6, r4]
 8006e0a:	022d      	lsls	r5, r5, #8
 8006e0c:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8006e10:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
      offset += length_message_type;
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
      offset += 4;
 8006e14:	f104 0804 	add.w	r8, r4, #4
 8006e18:	431d      	orrs	r5, r3
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8006e1a:	4445      	add	r5, r8
 8006e1c:	45a8      	cmp	r8, r5
 8006e1e:	d20c      	bcs.n	8006e3a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xd2>
          inbuffer[k-1]=inbuffer[k];
 8006e20:	1b2b      	subs	r3, r5, r4
 8006e22:	3b04      	subs	r3, #4
 8006e24:	1d62      	adds	r2, r4, #5
 8006e26:	1ce0      	adds	r0, r4, #3
 8006e28:	4295      	cmp	r5, r2
 8006e2a:	bf2c      	ite	cs
 8006e2c:	461a      	movcs	r2, r3
 8006e2e:	2201      	movcc	r2, #1
 8006e30:	4430      	add	r0, r6
 8006e32:	eb06 0108 	add.w	r1, r6, r8
 8006e36:	f002 fc84 	bl	8009742 <memmove>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8006e3a:	1972      	adds	r2, r6, r5
      this->md5sum = (char *)(inbuffer + offset-1);
 8006e3c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006e40:	eb06 0308 	add.w	r3, r6, r8
      inbuffer[offset+length_md5sum-1]=0;
 8006e44:	2100      	movs	r1, #0
 8006e46:	f802 1c01 	strb.w	r1, [r2, #-1]
      this->md5sum = (char *)(inbuffer + offset-1);
 8006e4a:	613b      	str	r3, [r7, #16]
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006e4c:	7893      	ldrb	r3, [r2, #2]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006e4e:	7850      	ldrb	r0, [r2, #1]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006e50:	5d71      	ldrb	r1, [r6, r5]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006e52:	78d2      	ldrb	r2, [r2, #3]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006e54:	041b      	lsls	r3, r3, #16
 8006e56:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8006e5a:	430b      	orrs	r3, r1
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006e5c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      this->buffer_size = u_buffer_size.real;
      offset += sizeof(this->buffer_size);
     return offset;
    }
 8006e60:	1d28      	adds	r0, r5, #4
      this->buffer_size = u_buffer_size.real;
 8006e62:	617b      	str	r3, [r7, #20]
    }
 8006e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006e68 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8006e68:	4800      	ldr	r0, [pc, #0]	; (8006e6c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x4>)
 8006e6a:	4770      	bx	lr
 8006e6c:	08009dc8 	.word	0x08009dc8

08006e70 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8006e70:	4800      	ldr	r0, [pc, #0]	; (8006e74 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x4>)
 8006e72:	4770      	bx	lr
 8006e74:	08009da4 	.word	0x08009da4

08006e78 <_ZN14rosserial_msgs3Log11deserializeEPh>:
      memcpy(outbuffer + offset, this->msg, length_msg);
      offset += length_msg;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8006e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8006e7a:	460b      	mov	r3, r1
    virtual int deserialize(unsigned char *inbuffer)
 8006e7c:	460d      	mov	r5, r1
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8006e7e:	f813 2b04 	ldrb.w	r2, [r3], #4
 8006e82:	7102      	strb	r2, [r0, #4]
 8006e84:	78cc      	ldrb	r4, [r1, #3]
 8006e86:	788a      	ldrb	r2, [r1, #2]
 8006e88:	7909      	ldrb	r1, [r1, #4]
 8006e8a:	0424      	lsls	r4, r4, #16
 8006e8c:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8006e90:	786a      	ldrb	r2, [r5, #1]
 8006e92:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8006e96:	4314      	orrs	r4, r2
      offset += sizeof(this->level);
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8006e98:	1d67      	adds	r7, r4, #5
 8006e9a:	2f05      	cmp	r7, #5
    virtual int deserialize(unsigned char *inbuffer)
 8006e9c:	4606      	mov	r6, r0
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8006e9e:	d905      	bls.n	8006eac <_ZN14rosserial_msgs3Log11deserializeEPh+0x34>
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	4622      	mov	r2, r4
 8006ea4:	1d69      	adds	r1, r5, #5
 8006ea6:	f002 fc4c 	bl	8009742 <memmove>
 8006eaa:	4603      	mov	r3, r0
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_msg-1]=0;
 8006eac:	442c      	add	r4, r5
 8006eae:	2200      	movs	r2, #0
 8006eb0:	7122      	strb	r2, [r4, #4]
      this->msg = (char *)(inbuffer + offset-1);
      offset += length_msg;
     return offset;
    }
 8006eb2:	4638      	mov	r0, r7
      this->msg = (char *)(inbuffer + offset-1);
 8006eb4:	60b3      	str	r3, [r6, #8]
    }
 8006eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006eb8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8006eb8:	4800      	ldr	r0, [pc, #0]	; (8006ebc <_ZN14rosserial_msgs3Log7getTypeEv+0x4>)
 8006eba:	4770      	bx	lr
 8006ebc:	08009d90 	.word	0x08009d90

08006ec0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8006ec0:	4800      	ldr	r0, [pc, #0]	; (8006ec4 <_ZN14rosserial_msgs3Log6getMD5Ev+0x4>)
 8006ec2:	4770      	bx	lr
 8006ec4:	08009d6c 	.word	0x08009d6c

08006ec8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }

    const char * getType(){ return REQUESTPARAM; };
 8006ec8:	4800      	ldr	r0, [pc, #0]	; (8006ecc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x4>)
 8006eca:	4770      	bx	lr
 8006ecc:	08009de4 	.word	0x08009de4

08006ed0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8006ed0:	4800      	ldr	r0, [pc, #0]	; (8006ed4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x4>)
 8006ed2:	4770      	bx	lr
 8006ed4:	08009d48 	.word	0x08009d48

08006ed8 <_ZNK8std_msgs4Int89serializeEPh>:
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8006ed8:	7903      	ldrb	r3, [r0, #4]
 8006eda:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
      return offset;
    }
 8006edc:	2001      	movs	r0, #1
 8006ede:	4770      	bx	lr

08006ee0 <_ZN8std_msgs4Int811deserializeEPh>:
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
      this->data = u_data.real;
 8006ee0:	780b      	ldrb	r3, [r1, #0]
 8006ee2:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
 8006ee4:	2001      	movs	r0, #1
 8006ee6:	4770      	bx	lr

08006ee8 <_ZN8std_msgs4Int87getTypeEv>:

    const char * getType(){ return "std_msgs/Int8"; };
 8006ee8:	4800      	ldr	r0, [pc, #0]	; (8006eec <_ZN8std_msgs4Int87getTypeEv+0x4>)
 8006eea:	4770      	bx	lr
 8006eec:	08009e60 	.word	0x08009e60

08006ef0 <_ZN8std_msgs4Int86getMD5Ev>:
    const char * getMD5(){ return "27ffa0c9c4b8fb8492252bcad9e5c57b"; };
 8006ef0:	4800      	ldr	r0, [pc, #0]	; (8006ef4 <_ZN8std_msgs4Int86getMD5Ev+0x4>)
 8006ef2:	4770      	bx	lr
 8006ef4:	08009e3c 	.word	0x08009e3c

08006ef8 <_ZNK8std_msgs5UInt89serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 8006ef8:	7903      	ldrb	r3, [r0, #4]
 8006efa:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
      return offset;
    }
 8006efc:	2001      	movs	r0, #1
 8006efe:	4770      	bx	lr

08006f00 <_ZN8std_msgs5UInt811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 8006f00:	780b      	ldrb	r3, [r1, #0]
 8006f02:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
 8006f04:	2001      	movs	r0, #1
 8006f06:	4770      	bx	lr

08006f08 <_ZN8std_msgs5UInt87getTypeEv>:

    const char * getType(){ return "std_msgs/UInt8"; };
 8006f08:	4800      	ldr	r0, [pc, #0]	; (8006f0c <_ZN8std_msgs5UInt87getTypeEv+0x4>)
 8006f0a:	4770      	bx	lr
 8006f0c:	08009ec8 	.word	0x08009ec8

08006f10 <_ZN8std_msgs5UInt86getMD5Ev>:
    const char * getMD5(){ return "7c8164229e7d2c17eb95e9231617fdee"; };
 8006f10:	4800      	ldr	r0, [pc, #0]	; (8006f14 <_ZN8std_msgs5UInt86getMD5Ev+0x4>)
 8006f12:	4770      	bx	lr
 8006f14:	08009ea4 	.word	0x08009ea4

08006f18 <_ZN13geometry_msgs7Vector37getTypeEv>:
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
     return offset;
    }

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8006f18:	4800      	ldr	r0, [pc, #0]	; (8006f1c <_ZN13geometry_msgs7Vector37getTypeEv+0x4>)
 8006f1a:	4770      	bx	lr
 8006f1c:	08009d30 	.word	0x08009d30

08006f20 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8006f20:	4800      	ldr	r0, [pc, #0]	; (8006f24 <_ZN13geometry_msgs7Vector36getMD5Ev+0x4>)
 8006f22:	4770      	bx	lr
 8006f24:	08009d0c 	.word	0x08009d0c

08006f28 <_ZN8std_msgs6Header11deserializeEPh>:
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
      offset += length_frame_id;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8006f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    {
      int offset = 0;
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 8006f2a:	780b      	ldrb	r3, [r1, #0]
 8006f2c:	6043      	str	r3, [r0, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006f2e:	784a      	ldrb	r2, [r1, #1]
 8006f30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006f34:	6043      	str	r3, [r0, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006f36:	788a      	ldrb	r2, [r1, #2]
 8006f38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f3c:	6043      	str	r3, [r0, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006f3e:	78ca      	ldrb	r2, [r1, #3]
 8006f40:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006f44:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->seq);
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8006f46:	790b      	ldrb	r3, [r1, #4]
 8006f48:	6083      	str	r3, [r0, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006f4a:	794a      	ldrb	r2, [r1, #5]
 8006f4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006f50:	6083      	str	r3, [r0, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006f52:	798a      	ldrb	r2, [r1, #6]
 8006f54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f58:	6083      	str	r3, [r0, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006f5a:	79ca      	ldrb	r2, [r1, #7]
 8006f5c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006f60:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8006f62:	7a0b      	ldrb	r3, [r1, #8]
 8006f64:	60c3      	str	r3, [r0, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006f66:	7a4a      	ldrb	r2, [r1, #9]
 8006f68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006f6c:	60c3      	str	r3, [r0, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006f6e:	7a8a      	ldrb	r2, [r1, #10]
 8006f70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f74:	60c3      	str	r3, [r0, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006f76:	7aca      	ldrb	r2, [r1, #11]
 8006f78:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006f7c:	60c3      	str	r3, [r0, #12]
    virtual int deserialize(unsigned char *inbuffer)
 8006f7e:	460c      	mov	r4, r1
 8006f80:	7b8e      	ldrb	r6, [r1, #14]
 8006f82:	7b49      	ldrb	r1, [r1, #13]
 8006f84:	7be2      	ldrb	r2, [r4, #15]
 8006f86:	7b23      	ldrb	r3, [r4, #12]
 8006f88:	0436      	lsls	r6, r6, #16
 8006f8a:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
 8006f8e:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
 8006f92:	431e      	orrs	r6, r3
      offset += sizeof(this->stamp.nsec);
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8006f94:	f106 0710 	add.w	r7, r6, #16
 8006f98:	2f10      	cmp	r7, #16
    virtual int deserialize(unsigned char *inbuffer)
 8006f9a:	4605      	mov	r5, r0
 8006f9c:	f104 030f 	add.w	r3, r4, #15
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8006fa0:	d906      	bls.n	8006fb0 <_ZN8std_msgs6Header11deserializeEPh+0x88>
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	4632      	mov	r2, r6
 8006fa6:	f104 0110 	add.w	r1, r4, #16
 8006faa:	f002 fbca 	bl	8009742 <memmove>
 8006fae:	4603      	mov	r3, r0
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_frame_id-1]=0;
 8006fb0:	4434      	add	r4, r6
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	73e2      	strb	r2, [r4, #15]
      this->frame_id = (char *)(inbuffer + offset-1);
      offset += length_frame_id;
     return offset;
    }
 8006fb6:	4638      	mov	r0, r7
      this->frame_id = (char *)(inbuffer + offset-1);
 8006fb8:	612b      	str	r3, [r5, #16]
    }
 8006fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006fbc <_ZN8std_msgs6Header7getTypeEv>:

    const char * getType(){ return "std_msgs/Header"; };
 8006fbc:	4800      	ldr	r0, [pc, #0]	; (8006fc0 <_ZN8std_msgs6Header7getTypeEv+0x4>)
 8006fbe:	4770      	bx	lr
 8006fc0:	08009efc 	.word	0x08009efc

08006fc4 <_ZN8std_msgs6Header6getMD5Ev>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 8006fc4:	4800      	ldr	r0, [pc, #0]	; (8006fc8 <_ZN8std_msgs6Header6getMD5Ev+0x4>)
 8006fc6:	4770      	bx	lr
 8006fc8:	08009ed8 	.word	0x08009ed8

08006fcc <_ZN11sensor_msgs5Range7getTypeEv>:
      this->range = u_range.real;
      offset += sizeof(this->range);
     return offset;
    }

    const char * getType(){ return "sensor_msgs/Range"; };
 8006fcc:	4800      	ldr	r0, [pc, #0]	; (8006fd0 <_ZN11sensor_msgs5Range7getTypeEv+0x4>)
 8006fce:	4770      	bx	lr
 8006fd0:	08009cf8 	.word	0x08009cf8

08006fd4 <_ZN11sensor_msgs5Range6getMD5Ev>:
    const char * getMD5(){ return "c005c34273dc426c67a020a87bc24148"; };
 8006fd4:	4800      	ldr	r0, [pc, #0]	; (8006fd8 <_ZN11sensor_msgs5Range6getMD5Ev+0x4>)
 8006fd6:	4770      	bx	lr
 8006fd8:	08009cd4 	.word	0x08009cd4

08006fdc <rpm_right_subCb>:
static nbt_t sensor11_data_nbt;
static nbt_t sensor12_data_nbt;

extern "C" void rpm_right_subCb(const std_msgs::Int8& msg)
{
	if (msg.data >= 6) {
 8006fdc:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8006fe0:	2b05      	cmp	r3, #5
 8006fe2:	dc0c      	bgt.n	8006ffe <rpm_right_subCb+0x22>
		speedDataRight = msg.data;
		sideDataRight = 1;
	}
	else if (msg.data <= -6) {
 8006fe4:	1d5a      	adds	r2, r3, #5
 8006fe6:	db03      	blt.n	8006ff0 <rpm_right_subCb+0x14>
		speedDataRight = -(msg.data);
		sideDataRight = 0;
	}
	else {
		speedDataRight = 0;
 8006fe8:	4b08      	ldr	r3, [pc, #32]	; (800700c <rpm_right_subCb+0x30>)
 8006fea:	2200      	movs	r2, #0
 8006fec:	701a      	strb	r2, [r3, #0]
	}
}
 8006fee:	4770      	bx	lr
		speedDataRight = -(msg.data);
 8006ff0:	4806      	ldr	r0, [pc, #24]	; (800700c <rpm_right_subCb+0x30>)
		sideDataRight = 0;
 8006ff2:	4a07      	ldr	r2, [pc, #28]	; (8007010 <rpm_right_subCb+0x34>)
		speedDataRight = -(msg.data);
 8006ff4:	425b      	negs	r3, r3
		sideDataRight = 0;
 8006ff6:	2100      	movs	r1, #0
		speedDataRight = -(msg.data);
 8006ff8:	7003      	strb	r3, [r0, #0]
		sideDataRight = 0;
 8006ffa:	7011      	strb	r1, [r2, #0]
 8006ffc:	4770      	bx	lr
		speedDataRight = msg.data;
 8006ffe:	4903      	ldr	r1, [pc, #12]	; (800700c <rpm_right_subCb+0x30>)
		sideDataRight = 1;
 8007000:	4a03      	ldr	r2, [pc, #12]	; (8007010 <rpm_right_subCb+0x34>)
		speedDataRight = msg.data;
 8007002:	700b      	strb	r3, [r1, #0]
		sideDataRight = 1;
 8007004:	2301      	movs	r3, #1
 8007006:	7013      	strb	r3, [r2, #0]
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	20005080 	.word	0x20005080
 8007010:	20004bd0 	.word	0x20004bd0

08007014 <rpm_left_subCb>:

extern "C" void rpm_left_subCb(const std_msgs::Int8& msg)
{
	if (msg.data >= 6) {
 8007014:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8007018:	2b05      	cmp	r3, #5
 800701a:	dc0c      	bgt.n	8007036 <rpm_left_subCb+0x22>
		speedDataLeft = msg.data;
		sideDataLeft = 0;
	}
	else if (msg.data <= -6) {
 800701c:	1d5a      	adds	r2, r3, #5
 800701e:	db03      	blt.n	8007028 <rpm_left_subCb+0x14>
		speedDataLeft = -(msg.data);
		sideDataLeft = 1;
	}
	else {
		speedDataLeft = 0;
 8007020:	4b08      	ldr	r3, [pc, #32]	; (8007044 <rpm_left_subCb+0x30>)
 8007022:	2200      	movs	r2, #0
 8007024:	701a      	strb	r2, [r3, #0]
	}
}
 8007026:	4770      	bx	lr
		speedDataLeft = -(msg.data);
 8007028:	4806      	ldr	r0, [pc, #24]	; (8007044 <rpm_left_subCb+0x30>)
		sideDataLeft = 1;
 800702a:	4a07      	ldr	r2, [pc, #28]	; (8007048 <rpm_left_subCb+0x34>)
		speedDataLeft = -(msg.data);
 800702c:	425b      	negs	r3, r3
		sideDataLeft = 1;
 800702e:	2101      	movs	r1, #1
		speedDataLeft = -(msg.data);
 8007030:	7003      	strb	r3, [r0, #0]
		sideDataLeft = 1;
 8007032:	7011      	strb	r1, [r2, #0]
 8007034:	4770      	bx	lr
		speedDataLeft = msg.data;
 8007036:	4903      	ldr	r1, [pc, #12]	; (8007044 <rpm_left_subCb+0x30>)
		sideDataLeft = 0;
 8007038:	4a03      	ldr	r2, [pc, #12]	; (8007048 <rpm_left_subCb+0x34>)
		speedDataLeft = msg.data;
 800703a:	700b      	strb	r3, [r1, #0]
		sideDataLeft = 0;
 800703c:	2300      	movs	r3, #0
 800703e:	7013      	strb	r3, [r2, #0]
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	20004c28 	.word	0x20004c28
 8007048:	200050b6 	.word	0x200050b6

0800704c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:

  /* Are we connected to the PC? */
  virtual bool connected()
  {
    return configured_;
  };
 800704c:	f890 04f4 	ldrb.w	r0, [r0, #1268]	; 0x4f4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop

08007054 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE8callbackEPh>:
      this->data = u_data.real;
 8007054:	780b      	ldrb	r3, [r1, #0]
 8007056:	7403      	strb	r3, [r0, #16]
  };

  virtual void callback(unsigned char* data)
  {
    msg.deserialize(data);
    this->cb_(msg);
 8007058:	6943      	ldr	r3, [r0, #20]
 800705a:	300c      	adds	r0, #12
 800705c:	4718      	bx	r3
 800705e:	bf00      	nop

08007060 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE15getEndpointTypeEv>:
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
  {
    return endpoint_;
  }
 8007060:	6980      	ldr	r0, [r0, #24]
 8007062:	4770      	bx	lr

08007064 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE10getMsgTypeEv>:
  }
 8007064:	4800      	ldr	r0, [pc, #0]	; (8007068 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE10getMsgTypeEv+0x4>)
 8007066:	4770      	bx	lr
 8007068:	08009e60 	.word	0x08009e60

0800706c <_ZN3ros10SubscriberIN8std_msgs4Int8EvE9getMsgMD5Ev>:
  }
 800706c:	4800      	ldr	r0, [pc, #0]	; (8007070 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE9getMsgMD5Ev+0x4>)
 800706e:	4770      	bx	lr
 8007070:	08009e3c 	.word	0x08009e3c

08007074 <_ZNK8std_msgs6Header9serializeEPh>:
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 8007074:	6843      	ldr	r3, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const
 8007076:	b570      	push	{r4, r5, r6, lr}
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 8007078:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 800707a:	6843      	ldr	r3, [r0, #4]
 800707c:	0a1b      	lsrs	r3, r3, #8
 800707e:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8007080:	88c3      	ldrh	r3, [r0, #6]
 8007082:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8007084:	79c3      	ldrb	r3, [r0, #7]
 8007086:	70cb      	strb	r3, [r1, #3]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8007088:	6883      	ldr	r3, [r0, #8]
 800708a:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 800708c:	6883      	ldr	r3, [r0, #8]
 800708e:	0a1b      	lsrs	r3, r3, #8
 8007090:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8007092:	8943      	ldrh	r3, [r0, #10]
 8007094:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8007096:	7ac3      	ldrb	r3, [r0, #11]
 8007098:	71cb      	strb	r3, [r1, #7]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 800709a:	68c3      	ldr	r3, [r0, #12]
 800709c:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 800709e:	68c3      	ldr	r3, [r0, #12]
 80070a0:	0a1b      	lsrs	r3, r3, #8
 80070a2:	724b      	strb	r3, [r1, #9]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 80070a4:	89c3      	ldrh	r3, [r0, #14]
 80070a6:	728b      	strb	r3, [r1, #10]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 80070a8:	7bc3      	ldrb	r3, [r0, #15]
 80070aa:	72cb      	strb	r3, [r1, #11]
    virtual int serialize(unsigned char *outbuffer) const
 80070ac:	4605      	mov	r5, r0
      uint32_t length_frame_id = strlen(this->frame_id);
 80070ae:	6900      	ldr	r0, [r0, #16]
    virtual int serialize(unsigned char *outbuffer) const
 80070b0:	460c      	mov	r4, r1
      uint32_t length_frame_id = strlen(this->frame_id);
 80070b2:	f7f9 f88d 	bl	80001d0 <strlen>
      arr[i] = (var >> (8 * i));
 80070b6:	0e03      	lsrs	r3, r0, #24
 80070b8:	0a01      	lsrs	r1, r0, #8
 80070ba:	0c02      	lsrs	r2, r0, #16
 80070bc:	4606      	mov	r6, r0
 80070be:	7320      	strb	r0, [r4, #12]
 80070c0:	73a2      	strb	r2, [r4, #14]
 80070c2:	7361      	strb	r1, [r4, #13]
 80070c4:	73e3      	strb	r3, [r4, #15]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 80070c6:	6929      	ldr	r1, [r5, #16]
 80070c8:	f104 0010 	add.w	r0, r4, #16
 80070cc:	4632      	mov	r2, r6
 80070ce:	f002 fb2d 	bl	800972c <memcpy>
    }
 80070d2:	f106 0010 	add.w	r0, r6, #16
 80070d6:	bd70      	pop	{r4, r5, r6, pc}

080070d8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80070d8:	6843      	ldr	r3, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const
 80070da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80070de:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80070e0:	6843      	ldr	r3, [r0, #4]
 80070e2:	0a1b      	lsrs	r3, r3, #8
 80070e4:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80070e6:	88c3      	ldrh	r3, [r0, #6]
 80070e8:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80070ea:	79c3      	ldrb	r3, [r0, #7]
 80070ec:	70cb      	strb	r3, [r1, #3]
      for( uint32_t i = 0; i < ints_length; i++){
 80070ee:	6843      	ldr	r3, [r0, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 8083 	beq.w	80071fc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x124>
 80070f6:	460a      	mov	r2, r1
 80070f8:	2500      	movs	r5, #0
      offset += sizeof(this->ints_length);
 80070fa:	2704      	movs	r7, #4
      u_intsi.real = this->ints[i];
 80070fc:	68c3      	ldr	r3, [r0, #12]
 80070fe:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8007102:	7113      	strb	r3, [r2, #4]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8007104:	0a1e      	lsrs	r6, r3, #8
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8007106:	0c1c      	lsrs	r4, r3, #16
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8007108:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800710a:	7156      	strb	r6, [r2, #5]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800710c:	7194      	strb	r4, [r2, #6]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800710e:	71d3      	strb	r3, [r2, #7]
      for( uint32_t i = 0; i < ints_length; i++){
 8007110:	6843      	ldr	r3, [r0, #4]
 8007112:	3501      	adds	r5, #1
 8007114:	1d3e      	adds	r6, r7, #4
 8007116:	42ab      	cmp	r3, r5
 8007118:	463c      	mov	r4, r7
 800711a:	f102 0204 	add.w	r2, r2, #4
 800711e:	4637      	mov	r7, r6
 8007120:	d8ec      	bhi.n	80070fc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x24>
 8007122:	f104 0308 	add.w	r3, r4, #8
 8007126:	f104 0a05 	add.w	sl, r4, #5
 800712a:	f104 0906 	add.w	r9, r4, #6
 800712e:	f104 0807 	add.w	r8, r4, #7
 8007132:	f104 0e09 	add.w	lr, r4, #9
 8007136:	f104 0c0a 	add.w	ip, r4, #10
 800713a:	f104 070b 	add.w	r7, r4, #11
 800713e:	461d      	mov	r5, r3
 8007140:	340c      	adds	r4, #12
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8007142:	6902      	ldr	r2, [r0, #16]
 8007144:	558a      	strb	r2, [r1, r6]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8007146:	6902      	ldr	r2, [r0, #16]
 8007148:	0a12      	lsrs	r2, r2, #8
 800714a:	f801 200a 	strb.w	r2, [r1, sl]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800714e:	8a42      	ldrh	r2, [r0, #18]
 8007150:	f801 2009 	strb.w	r2, [r1, r9]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8007154:	7cc2      	ldrb	r2, [r0, #19]
 8007156:	f801 2008 	strb.w	r2, [r1, r8]
      for( uint32_t i = 0; i < floats_length; i++){
 800715a:	6902      	ldr	r2, [r0, #16]
 800715c:	b1ea      	cbz	r2, 800719a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xc2>
 800715e:	2600      	movs	r6, #0
      u_floatsi.real = this->floats[i];
 8007160:	6983      	ldr	r3, [r0, #24]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8007162:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8007166:	2200      	movs	r2, #0
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8007168:	0a1c      	lsrs	r4, r3, #8
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800716a:	f363 0207 	bfi	r2, r3, #0, #8
 800716e:	f364 220f 	bfi	r2, r4, #8, #8
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8007172:	0c1c      	lsrs	r4, r3, #16
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8007174:	f364 4217 	bfi	r2, r4, #16, #8
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8007178:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800717a:	f363 621f 	bfi	r2, r3, #24, #8
 800717e:	514a      	str	r2, [r1, r5]
      for( uint32_t i = 0; i < floats_length; i++){
 8007180:	6902      	ldr	r2, [r0, #16]
 8007182:	3601      	adds	r6, #1
 8007184:	1d2b      	adds	r3, r5, #4
 8007186:	42b2      	cmp	r2, r6
 8007188:	462c      	mov	r4, r5
 800718a:	461d      	mov	r5, r3
 800718c:	d8e8      	bhi.n	8007160 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x88>
 800718e:	f104 0e05 	add.w	lr, r4, #5
 8007192:	f104 0c06 	add.w	ip, r4, #6
 8007196:	1de7      	adds	r7, r4, #7
 8007198:	3408      	adds	r4, #8
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800719a:	69c2      	ldr	r2, [r0, #28]
 800719c:	54ca      	strb	r2, [r1, r3]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800719e:	69c3      	ldr	r3, [r0, #28]
 80071a0:	0a1b      	lsrs	r3, r3, #8
 80071a2:	f801 300e 	strb.w	r3, [r1, lr]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80071a6:	8bc3      	ldrh	r3, [r0, #30]
 80071a8:	f801 300c 	strb.w	r3, [r1, ip]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80071ac:	7fc3      	ldrb	r3, [r0, #31]
 80071ae:	55cb      	strb	r3, [r1, r7]
      for( uint32_t i = 0; i < strings_length; i++){
 80071b0:	69c3      	ldr	r3, [r0, #28]
 80071b2:	b303      	cbz	r3, 80071f6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x11e>
 80071b4:	4688      	mov	r8, r1
 80071b6:	4607      	mov	r7, r0
 80071b8:	2600      	movs	r6, #0
      uint32_t length_stringsi = strlen(this->strings[i]);
 80071ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071bc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80071c0:	f7f9 f806 	bl	80001d0 <strlen>
 80071c4:	eb08 0304 	add.w	r3, r8, r4
 80071c8:	4605      	mov	r5, r0
 80071ca:	f808 0004 	strb.w	r0, [r8, r4]
 80071ce:	0c29      	lsrs	r1, r5, #16
 80071d0:	0a00      	lsrs	r0, r0, #8
 80071d2:	0e2a      	lsrs	r2, r5, #24
 80071d4:	7058      	strb	r0, [r3, #1]
 80071d6:	70da      	strb	r2, [r3, #3]
 80071d8:	7099      	strb	r1, [r3, #2]
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80071da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      offset += 4;
 80071dc:	3404      	adds	r4, #4
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80071de:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80071e2:	eb08 0004 	add.w	r0, r8, r4
 80071e6:	462a      	mov	r2, r5
 80071e8:	f002 faa0 	bl	800972c <memcpy>
      for( uint32_t i = 0; i < strings_length; i++){
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	3601      	adds	r6, #1
 80071f0:	42b3      	cmp	r3, r6
      offset += length_stringsi;
 80071f2:	442c      	add	r4, r5
      for( uint32_t i = 0; i < strings_length; i++){
 80071f4:	d8e1      	bhi.n	80071ba <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xe2>
    }
 80071f6:	4620      	mov	r0, r4
 80071f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      for( uint32_t i = 0; i < ints_length; i++){
 80071fc:	2308      	movs	r3, #8
 80071fe:	461d      	mov	r5, r3
 8007200:	240c      	movs	r4, #12
 8007202:	270b      	movs	r7, #11
 8007204:	f04f 0c0a 	mov.w	ip, #10
 8007208:	f04f 0e09 	mov.w	lr, #9
 800720c:	f04f 0807 	mov.w	r8, #7
 8007210:	f04f 0906 	mov.w	r9, #6
 8007214:	f04f 0a05 	mov.w	sl, #5
 8007218:	2604      	movs	r6, #4
 800721a:	e792      	b.n	8007142 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x6a>

0800721c <_ZNK14rosserial_msgs3Log9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 800721c:	b570      	push	{r4, r5, r6, lr}
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800721e:	7903      	ldrb	r3, [r0, #4]
 8007220:	700b      	strb	r3, [r1, #0]
    virtual int serialize(unsigned char *outbuffer) const
 8007222:	4606      	mov	r6, r0
      uint32_t length_msg = strlen(this->msg);
 8007224:	6880      	ldr	r0, [r0, #8]
    virtual int serialize(unsigned char *outbuffer) const
 8007226:	460d      	mov	r5, r1
      uint32_t length_msg = strlen(this->msg);
 8007228:	f7f8 ffd2 	bl	80001d0 <strlen>
 800722c:	2300      	movs	r3, #0
 800722e:	0a02      	lsrs	r2, r0, #8
 8007230:	f360 0307 	bfi	r3, r0, #0, #8
 8007234:	f362 230f 	bfi	r3, r2, #8, #8
 8007238:	0c02      	lsrs	r2, r0, #16
 800723a:	f362 4317 	bfi	r3, r2, #16, #8
 800723e:	0e02      	lsrs	r2, r0, #24
 8007240:	f362 631f 	bfi	r3, r2, #24, #8
 8007244:	4604      	mov	r4, r0
 8007246:	f8c5 3001 	str.w	r3, [r5, #1]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800724a:	68b1      	ldr	r1, [r6, #8]
 800724c:	1d68      	adds	r0, r5, #5
 800724e:	4622      	mov	r2, r4
 8007250:	f002 fa6c 	bl	800972c <memcpy>
    }
 8007254:	1d60      	adds	r0, r4, #5
 8007256:	bd70      	pop	{r4, r5, r6, pc}

08007258 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8007258:	8883      	ldrh	r3, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const
 800725a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800725e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8007260:	8883      	ldrh	r3, [r0, #4]
 8007262:	0a1b      	lsrs	r3, r3, #8
 8007264:	704b      	strb	r3, [r1, #1]
    virtual int serialize(unsigned char *outbuffer) const
 8007266:	4606      	mov	r6, r0
      uint32_t length_topic_name = strlen(this->topic_name);
 8007268:	6880      	ldr	r0, [r0, #8]
    virtual int serialize(unsigned char *outbuffer) const
 800726a:	460d      	mov	r5, r1
      uint32_t length_topic_name = strlen(this->topic_name);
 800726c:	f7f8 ffb0 	bl	80001d0 <strlen>
 8007270:	0e03      	lsrs	r3, r0, #24
 8007272:	0a01      	lsrs	r1, r0, #8
 8007274:	0c02      	lsrs	r2, r0, #16
 8007276:	716b      	strb	r3, [r5, #5]
 8007278:	70a8      	strb	r0, [r5, #2]
 800727a:	712a      	strb	r2, [r5, #4]
 800727c:	70e9      	strb	r1, [r5, #3]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800727e:	68b1      	ldr	r1, [r6, #8]
 8007280:	4602      	mov	r2, r0
      uint32_t length_topic_name = strlen(this->topic_name);
 8007282:	4604      	mov	r4, r0
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8007284:	1da8      	adds	r0, r5, #6
 8007286:	f002 fa51 	bl	800972c <memcpy>
      uint32_t length_message_type = strlen(this->message_type);
 800728a:	68f0      	ldr	r0, [r6, #12]
 800728c:	f7f8 ffa0 	bl	80001d0 <strlen>
 8007290:	2300      	movs	r3, #0
 8007292:	0a02      	lsrs	r2, r0, #8
 8007294:	f360 0307 	bfi	r3, r0, #0, #8
 8007298:	f362 230f 	bfi	r3, r2, #8, #8
 800729c:	0c02      	lsrs	r2, r0, #16
 800729e:	0e01      	lsrs	r1, r0, #24
 80072a0:	f362 4317 	bfi	r3, r2, #16, #8
      offset += length_topic_name;
 80072a4:	1da2      	adds	r2, r4, #6
 80072a6:	f361 631f 	bfi	r3, r1, #24, #8
 80072aa:	50ab      	str	r3, [r5, r2]
      uint32_t length_message_type = strlen(this->message_type);
 80072ac:	4680      	mov	r8, r0
      offset += 4;
 80072ae:	340a      	adds	r4, #10
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80072b0:	68f1      	ldr	r1, [r6, #12]
 80072b2:	4642      	mov	r2, r8
 80072b4:	1928      	adds	r0, r5, r4
 80072b6:	f002 fa39 	bl	800972c <memcpy>
      uint32_t length_md5sum = strlen(this->md5sum);
 80072ba:	6930      	ldr	r0, [r6, #16]
 80072bc:	f7f8 ff88 	bl	80001d0 <strlen>
 80072c0:	2300      	movs	r3, #0
 80072c2:	0a02      	lsrs	r2, r0, #8
 80072c4:	f360 0307 	bfi	r3, r0, #0, #8
 80072c8:	f362 230f 	bfi	r3, r2, #8, #8
 80072cc:	0c02      	lsrs	r2, r0, #16
      offset += length_message_type;
 80072ce:	4444      	add	r4, r8
 80072d0:	f362 4317 	bfi	r3, r2, #16, #8
 80072d4:	0e02      	lsrs	r2, r0, #24
 80072d6:	f362 631f 	bfi	r3, r2, #24, #8
 80072da:	512b      	str	r3, [r5, r4]
      uint32_t length_md5sum = strlen(this->md5sum);
 80072dc:	4607      	mov	r7, r0
      offset += 4;
 80072de:	3404      	adds	r4, #4
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80072e0:	6931      	ldr	r1, [r6, #16]
 80072e2:	1928      	adds	r0, r5, r4
 80072e4:	463a      	mov	r2, r7
 80072e6:	f002 fa21 	bl	800972c <memcpy>
      offset += length_md5sum;
 80072ea:	19e0      	adds	r0, r4, r7
      u_buffer_size.real = this->buffer_size;
 80072ec:	6973      	ldr	r3, [r6, #20]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80072ee:	542b      	strb	r3, [r5, r0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80072f0:	4405      	add	r5, r0
 80072f2:	0a19      	lsrs	r1, r3, #8
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80072f4:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80072f6:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80072f8:	7069      	strb	r1, [r5, #1]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80072fa:	70aa      	strb	r2, [r5, #2]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80072fc:	70eb      	strb	r3, [r5, #3]
    }
 80072fe:	3004      	adds	r0, #4
 8007300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007304 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
 8007304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if(ints_lengthT > ints_length)
 8007308:	6843      	ldr	r3, [r0, #4]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800730a:	680c      	ldr	r4, [r1, #0]
      if(ints_lengthT > ints_length)
 800730c:	42a3      	cmp	r3, r4
    virtual int deserialize(unsigned char *inbuffer)
 800730e:	b083      	sub	sp, #12
 8007310:	4606      	mov	r6, r0
 8007312:	460f      	mov	r7, r1
      if(ints_lengthT > ints_length)
 8007314:	f0c0 80b0 	bcc.w	8007478 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x174>
      ints_length = ints_lengthT;
 8007318:	6074      	str	r4, [r6, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 800731a:	2c00      	cmp	r4, #0
 800731c:	f000 80b5 	beq.w	800748a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x186>
 8007320:	4639      	mov	r1, r7
 8007322:	2000      	movs	r0, #0
      offset += sizeof(this->ints_length);
 8007324:	2404      	movs	r4, #4
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007326:	798b      	ldrb	r3, [r1, #6]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007328:	f891 e005 	ldrb.w	lr, [r1, #5]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800732c:	f891 c004 	ldrb.w	ip, [r1, #4]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007330:	79cd      	ldrb	r5, [r1, #7]
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8007332:	68f2      	ldr	r2, [r6, #12]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007334:	041b      	lsls	r3, r3, #16
 8007336:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 800733a:	ea43 030c 	orr.w	r3, r3, ip
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800733e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
      this->st_ints = u_st_ints.real;
 8007342:	60b3      	str	r3, [r6, #8]
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8007344:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
      for( uint32_t i = 0; i < ints_length; i++){
 8007348:	6872      	ldr	r2, [r6, #4]
 800734a:	3001      	adds	r0, #1
 800734c:	1d23      	adds	r3, r4, #4
 800734e:	4282      	cmp	r2, r0
 8007350:	4625      	mov	r5, r4
 8007352:	f101 0104 	add.w	r1, r1, #4
 8007356:	461c      	mov	r4, r3
 8007358:	d8e5      	bhi.n	8007326 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x22>
 800735a:	f105 0808 	add.w	r8, r5, #8
 800735e:	1d69      	adds	r1, r5, #5
 8007360:	1da8      	adds	r0, r5, #6
 8007362:	1dea      	adds	r2, r5, #7
 8007364:	f105 0a09 	add.w	sl, r5, #9
 8007368:	f105 0b0a 	add.w	fp, r5, #10
 800736c:	f105 090b 	add.w	r9, r5, #11
 8007370:	4644      	mov	r4, r8
 8007372:	350c      	adds	r5, #12
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8007374:	f817 e000 	ldrb.w	lr, [r7, r0]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8007378:	f817 c001 	ldrb.w	ip, [r7, r1]
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800737c:	5cf8      	ldrb	r0, [r7, r3]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800737e:	5cb9      	ldrb	r1, [r7, r2]
      if(floats_lengthT > floats_length)
 8007380:	6932      	ldr	r2, [r6, #16]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8007382:	ea4f 430e 	mov.w	r3, lr, lsl #16
 8007386:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800738a:	4303      	orrs	r3, r0
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800738c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      if(floats_lengthT > floats_length)
 8007390:	429a      	cmp	r2, r3
 8007392:	f0c0 808f 	bcc.w	80074b4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1b0>
      floats_length = floats_lengthT;
 8007396:	6133      	str	r3, [r6, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8007398:	b31b      	cbz	r3, 80073e2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xde>
 800739a:	1939      	adds	r1, r7, r4
 800739c:	2000      	movs	r0, #0
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800739e:	788b      	ldrb	r3, [r1, #2]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80073a0:	f891 e001 	ldrb.w	lr, [r1, #1]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80073a4:	f891 c000 	ldrb.w	ip, [r1]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80073a8:	78cd      	ldrb	r5, [r1, #3]
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80073aa:	69b2      	ldr	r2, [r6, #24]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80073ac:	041b      	lsls	r3, r3, #16
 80073ae:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80073b2:	ea43 030c 	orr.w	r3, r3, ip
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80073b6:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
      this->st_floats = u_st_floats.real;
 80073ba:	6173      	str	r3, [r6, #20]
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80073bc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
      for( uint32_t i = 0; i < floats_length; i++){
 80073c0:	6933      	ldr	r3, [r6, #16]
 80073c2:	3001      	adds	r0, #1
 80073c4:	f104 0804 	add.w	r8, r4, #4
 80073c8:	4283      	cmp	r3, r0
 80073ca:	4625      	mov	r5, r4
 80073cc:	f101 0104 	add.w	r1, r1, #4
 80073d0:	4644      	mov	r4, r8
 80073d2:	d8e4      	bhi.n	800739e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x9a>
 80073d4:	f105 0a05 	add.w	sl, r5, #5
 80073d8:	f105 0b06 	add.w	fp, r5, #6
 80073dc:	f105 0907 	add.w	r9, r5, #7
 80073e0:	3508      	adds	r5, #8
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80073e2:	f817 400b 	ldrb.w	r4, [r7, fp]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80073e6:	f817 000a 	ldrb.w	r0, [r7, sl]
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80073ea:	f817 1008 	ldrb.w	r1, [r7, r8]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80073ee:	f817 2009 	ldrb.w	r2, [r7, r9]
      if(strings_lengthT > strings_length)
 80073f2:	69f3      	ldr	r3, [r6, #28]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80073f4:	0424      	lsls	r4, r4, #16
 80073f6:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 80073fa:	430c      	orrs	r4, r1
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80073fc:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
      if(strings_lengthT > strings_length)
 8007400:	42a3      	cmp	r3, r4
 8007402:	d351      	bcc.n	80074a8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1a4>
      strings_length = strings_lengthT;
 8007404:	61f4      	str	r4, [r6, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8007406:	b39c      	cbz	r4, 8007470 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x16c>
 8007408:	f04f 0a00 	mov.w	sl, #0
      inbuffer[offset+length_st_strings-1]=0;
 800740c:	46d1      	mov	r9, sl
          inbuffer[k-1]=inbuffer[k];
 800740e:	f06f 0803 	mvn.w	r8, #3
      var |= (arr[i] << (8 * i));
 8007412:	197b      	adds	r3, r7, r5
 8007414:	1ce8      	adds	r0, r5, #3
 8007416:	789c      	ldrb	r4, [r3, #2]
 8007418:	7859      	ldrb	r1, [r3, #1]
 800741a:	5d7a      	ldrb	r2, [r7, r5]
 800741c:	5c3b      	ldrb	r3, [r7, r0]
 800741e:	0424      	lsls	r4, r4, #16
 8007420:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
 8007424:	4314      	orrs	r4, r2
      offset += 4;
 8007426:	f105 0b04 	add.w	fp, r5, #4
 800742a:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800742e:	445c      	add	r4, fp
          inbuffer[k-1]=inbuffer[k];
 8007430:	eba8 0305 	sub.w	r3, r8, r5
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8007434:	45a3      	cmp	fp, r4
          inbuffer[k-1]=inbuffer[k];
 8007436:	f105 0205 	add.w	r2, r5, #5
 800743a:	4423      	add	r3, r4
 800743c:	4438      	add	r0, r7
      offset += length_st_strings;
 800743e:	4625      	mov	r5, r4
 8007440:	eb07 010b 	add.w	r1, r7, fp
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8007444:	d205      	bcs.n	8007452 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x14e>
 8007446:	42a2      	cmp	r2, r4
 8007448:	bf94      	ite	ls
 800744a:	461a      	movls	r2, r3
 800744c:	2201      	movhi	r2, #1
 800744e:	f002 f978 	bl	8009742 <memmove>
      inbuffer[offset+length_st_strings-1]=0;
 8007452:	443c      	add	r4, r7
      this->st_strings = (char *)(inbuffer + offset-1);
 8007454:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
      inbuffer[offset+length_st_strings-1]=0;
 8007458:	f804 9c01 	strb.w	r9, [r4, #-1]
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800745c:	6a72      	ldr	r2, [r6, #36]	; 0x24
      this->st_strings = (char *)(inbuffer + offset-1);
 800745e:	443b      	add	r3, r7
 8007460:	6233      	str	r3, [r6, #32]
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8007462:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
      for( uint32_t i = 0; i < strings_length; i++){
 8007466:	69f3      	ldr	r3, [r6, #28]
 8007468:	f10a 0a01 	add.w	sl, sl, #1
 800746c:	4553      	cmp	r3, sl
 800746e:	d8d0      	bhi.n	8007412 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x10e>
    }
 8007470:	4628      	mov	r0, r5
 8007472:	b003      	add	sp, #12
 8007474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8007478:	00a1      	lsls	r1, r4, #2
 800747a:	68c0      	ldr	r0, [r0, #12]
 800747c:	f002 fa2a 	bl	80098d4 <realloc>
      ints_length = ints_lengthT;
 8007480:	6074      	str	r4, [r6, #4]
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8007482:	60f0      	str	r0, [r6, #12]
      for( uint32_t i = 0; i < ints_length; i++){
 8007484:	2c00      	cmp	r4, #0
 8007486:	f47f af4b 	bne.w	8007320 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1c>
 800748a:	f04f 0808 	mov.w	r8, #8
 800748e:	4644      	mov	r4, r8
 8007490:	250c      	movs	r5, #12
 8007492:	f04f 090b 	mov.w	r9, #11
 8007496:	f04f 0b0a 	mov.w	fp, #10
 800749a:	f04f 0a09 	mov.w	sl, #9
 800749e:	2207      	movs	r2, #7
 80074a0:	2006      	movs	r0, #6
 80074a2:	2105      	movs	r1, #5
 80074a4:	2304      	movs	r3, #4
 80074a6:	e765      	b.n	8007374 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x70>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80074a8:	00a1      	lsls	r1, r4, #2
 80074aa:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80074ac:	f002 fa12 	bl	80098d4 <realloc>
 80074b0:	6270      	str	r0, [r6, #36]	; 0x24
 80074b2:	e7a7      	b.n	8007404 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x100>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80074b4:	0099      	lsls	r1, r3, #2
 80074b6:	69b0      	ldr	r0, [r6, #24]
 80074b8:	9301      	str	r3, [sp, #4]
 80074ba:	f002 fa0b 	bl	80098d4 <realloc>
 80074be:	9b01      	ldr	r3, [sp, #4]
 80074c0:	61b0      	str	r0, [r6, #24]
 80074c2:	e768      	b.n	8007396 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x92>

080074c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
      }
    }
    configured_ = true;
  }

  virtual int publish(int id, const Msg * msg)
 80074c4:	b570      	push	{r4, r5, r6, lr}
  {
    if (id >= 100 && !configured_)
 80074c6:	2963      	cmp	r1, #99	; 0x63
  virtual int publish(int id, const Msg * msg)
 80074c8:	b084      	sub	sp, #16
    if (id >= 100 && !configured_)
 80074ca:	dd02      	ble.n	80074d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xe>
 80074cc:	f890 54f4 	ldrb.w	r5, [r0, #1268]	; 0x4f4
 80074d0:	b3c5      	cbz	r5, 8007544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x80>
      return 0;

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80074d2:	6813      	ldr	r3, [r2, #0]
 80074d4:	4604      	mov	r4, r0
 80074d6:	460d      	mov	r5, r1
 80074d8:	4610      	mov	r0, r2
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f204 211f 	addw	r1, r4, #543	; 0x21f
 80074e0:	4798      	blx	r3

    /* setup the header */
    message_out[0] = 0xff;
    message_out[1] = PROTOCOL_VER;
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80074e2:	b2c6      	uxtb	r6, r0
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80074e4:	f3c0 2207 	ubfx	r2, r0, #8, #8
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80074e8:	18b3      	adds	r3, r6, r2
 80074ea:	43db      	mvns	r3, r3
    message_out[5] = (uint8_t)((int16_t)id & 255);
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80074ec:	f345 2107 	sbfx	r1, r5, #8, #8
 80074f0:	f884 121e 	strb.w	r1, [r4, #542]	; 0x21e
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80074f4:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
    message_out[0] = 0xff;
 80074f8:	f64f 61ff 	movw	r1, #65279	; 0xfeff

    /* calculate checksum */
    int chk = 0;
    for (int i = 5; i < l + 7; i++)
 80074fc:	1c43      	adds	r3, r0, #1
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80074fe:	f884 521d 	strb.w	r5, [r4, #541]	; 0x21d
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8007502:	f884 621a 	strb.w	r6, [r4, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8007506:	f884 221b 	strb.w	r2, [r4, #539]	; 0x21b
    message_out[0] = 0xff;
 800750a:	f8a4 1218 	strh.w	r1, [r4, #536]	; 0x218
    for (int i = 5; i < l + 7; i++)
 800750e:	db1c      	blt.n	800754a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x86>
 8007510:	f204 251e 	addw	r5, r4, #542	; 0x21e
 8007514:	4405      	add	r5, r0
 8007516:	f504 7307 	add.w	r3, r4, #540	; 0x21c
    int chk = 0;
 800751a:	2200      	movs	r2, #0
      chk += message_out[i];
 800751c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 8007520:	429d      	cmp	r5, r3
      chk += message_out[i];
 8007522:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
 8007524:	d1fa      	bne.n	800751c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x58>
 8007526:	43d2      	mvns	r2, r2
 8007528:	b2d2      	uxtb	r2, r2
    l += 7;
    message_out[l++] = 255 - (chk % 256);
 800752a:	1823      	adds	r3, r4, r0
 800752c:	f100 0508 	add.w	r5, r0, #8

    if (l <= OUTPUT_SIZE)
 8007530:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    message_out[l++] = 255 - (chk % 256);
 8007534:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
    if (l <= OUTPUT_SIZE)
 8007538:	dc09      	bgt.n	800754e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x8a>


	// Send a byte of data to ROS connection
	void write(uint8_t* data, int length)
	{
		CDC_Transmit_FS(data, length);
 800753a:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800753e:	b2a9      	uxth	r1, r5
 8007540:	f7ff f950 	bl	80067e4 <CDC_Transmit_FS>
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
      return -1;
    }
  }
 8007544:	4628      	mov	r0, r5
 8007546:	b004      	add	sp, #16
 8007548:	bd70      	pop	{r4, r5, r6, pc}
    for (int i = 5; i < l + 7; i++)
 800754a:	22ff      	movs	r2, #255	; 0xff
 800754c:	e7ed      	b.n	800752a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x66>

private:
  void log(char byte, const char * msg)
  {
    rosserial_msgs::Log l;
    l.level = byte;
 800754e:	2203      	movs	r2, #3
    l.msg = (char*)msg;
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8007550:	6823      	ldr	r3, [r4, #0]
    l.level = byte;
 8007552:	f88d 2008 	strb.w	r2, [sp, #8]
      msg("")
 8007556:	4906      	ldr	r1, [pc, #24]	; (8007570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xac>)
    l.msg = (char*)msg;
 8007558:	4a06      	ldr	r2, [pc, #24]	; (8007574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xb0>)
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	9101      	str	r1, [sp, #4]
    l.msg = (char*)msg;
 800755e:	9203      	str	r2, [sp, #12]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8007560:	4620      	mov	r0, r4
 8007562:	aa01      	add	r2, sp, #4
 8007564:	2107      	movs	r1, #7
 8007566:	4798      	blx	r3
 8007568:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800756c:	e7ea      	b.n	8007544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x80>
 800756e:	bf00      	nop
 8007570:	08009ac0 	.word	0x08009ac0
 8007574:	08009e00 	.word	0x08009e00

08007578 <_ZN13geometry_msgs7Vector311deserializeEPh>:
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 8007578:	78cb      	ldrb	r3, [r1, #3]
 800757a:	095b      	lsrs	r3, r3, #5
    virtual int deserialize(unsigned char *inbuffer)
 800757c:	b430      	push	{r4, r5}
 800757e:	6043      	str	r3, [r0, #4]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 8007580:	790a      	ldrb	r2, [r1, #4]
 8007582:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007586:	6043      	str	r3, [r0, #4]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 8007588:	794a      	ldrb	r2, [r1, #5]
 800758a:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 800758e:	6043      	str	r3, [r0, #4]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 8007590:	798a      	ldrb	r2, [r1, #6]
 8007592:	04d2      	lsls	r2, r2, #19
 8007594:	f402 02f0 	and.w	r2, r2, #7864320	; 0x780000
 8007598:	4313      	orrs	r3, r2
 800759a:	6043      	str	r3, [r0, #4]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 800759c:	79ca      	ldrb	r2, [r1, #7]
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 800759e:	798d      	ldrb	r5, [r1, #6]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 80075a0:	0114      	lsls	r4, r2, #4
 80075a2:	f404 64fe 	and.w	r4, r4, #2032	; 0x7f0
    if (exp != 0)
 80075a6:	ea54 1415 	orrs.w	r4, r4, r5, lsr #4
 80075aa:	d005      	beq.n	80075b8 <_ZN13geometry_msgs7Vector311deserializeEPh+0x40>
      *val |= ((exp) - 1023 + 127) << 23;
 80075ac:	f5a4 7460 	sub.w	r4, r4, #896	; 0x380
 80075b0:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
 80075b4:	6043      	str	r3, [r0, #4]
 80075b6:	79ca      	ldrb	r2, [r1, #7]
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 80075b8:	0612      	lsls	r2, r2, #24
 80075ba:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80075be:	4313      	orrs	r3, r2
 80075c0:	6043      	str	r3, [r0, #4]
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 80075c2:	7acb      	ldrb	r3, [r1, #11]
 80075c4:	095b      	lsrs	r3, r3, #5
 80075c6:	6083      	str	r3, [r0, #8]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 80075c8:	7b0a      	ldrb	r2, [r1, #12]
 80075ca:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80075ce:	6083      	str	r3, [r0, #8]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 80075d0:	7b4a      	ldrb	r2, [r1, #13]
 80075d2:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80075d6:	6083      	str	r3, [r0, #8]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 80075d8:	7b8a      	ldrb	r2, [r1, #14]
 80075da:	04d2      	lsls	r2, r2, #19
 80075dc:	f402 02f0 	and.w	r2, r2, #7864320	; 0x780000
 80075e0:	4313      	orrs	r3, r2
 80075e2:	6083      	str	r3, [r0, #8]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 80075e4:	7bca      	ldrb	r2, [r1, #15]
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 80075e6:	7b8d      	ldrb	r5, [r1, #14]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 80075e8:	0114      	lsls	r4, r2, #4
 80075ea:	f404 64fe 	and.w	r4, r4, #2032	; 0x7f0
    if (exp != 0)
 80075ee:	ea54 1415 	orrs.w	r4, r4, r5, lsr #4
 80075f2:	d005      	beq.n	8007600 <_ZN13geometry_msgs7Vector311deserializeEPh+0x88>
      *val |= ((exp) - 1023 + 127) << 23;
 80075f4:	f5a4 7460 	sub.w	r4, r4, #896	; 0x380
 80075f8:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
 80075fc:	6083      	str	r3, [r0, #8]
 80075fe:	7bca      	ldrb	r2, [r1, #15]
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 8007600:	0612      	lsls	r2, r2, #24
 8007602:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007606:	4313      	orrs	r3, r2
 8007608:	6083      	str	r3, [r0, #8]
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 800760a:	7ccb      	ldrb	r3, [r1, #19]
 800760c:	095b      	lsrs	r3, r3, #5
 800760e:	60c3      	str	r3, [r0, #12]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 8007610:	7d0a      	ldrb	r2, [r1, #20]
 8007612:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007616:	60c3      	str	r3, [r0, #12]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 8007618:	7d4a      	ldrb	r2, [r1, #21]
 800761a:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 800761e:	60c3      	str	r3, [r0, #12]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 8007620:	7d8a      	ldrb	r2, [r1, #22]
 8007622:	04d2      	lsls	r2, r2, #19
 8007624:	f402 02f0 	and.w	r2, r2, #7864320	; 0x780000
 8007628:	4313      	orrs	r3, r2
 800762a:	60c3      	str	r3, [r0, #12]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 800762c:	7dca      	ldrb	r2, [r1, #23]
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 800762e:	7d8d      	ldrb	r5, [r1, #22]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8007630:	0114      	lsls	r4, r2, #4
 8007632:	f404 64fe 	and.w	r4, r4, #2032	; 0x7f0
    if (exp != 0)
 8007636:	ea54 1415 	orrs.w	r4, r4, r5, lsr #4
 800763a:	d005      	beq.n	8007648 <_ZN13geometry_msgs7Vector311deserializeEPh+0xd0>
      *val |= ((exp) - 1023 + 127) << 23;
 800763c:	f5a4 7460 	sub.w	r4, r4, #896	; 0x380
 8007640:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
 8007644:	60c3      	str	r3, [r0, #12]
 8007646:	7dca      	ldrb	r2, [r1, #23]
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 8007648:	0612      	lsls	r2, r2, #24
 800764a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800764e:	4313      	orrs	r3, r2
 8007650:	60c3      	str	r3, [r0, #12]
    }
 8007652:	bc30      	pop	{r4, r5}
 8007654:	2018      	movs	r0, #24
 8007656:	4770      	bx	lr

08007658 <_ZNK11sensor_msgs5Range9serializeEPh>:
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 8007658:	6883      	ldr	r3, [r0, #8]
    virtual int serialize(unsigned char *outbuffer) const
 800765a:	b570      	push	{r4, r5, r6, lr}
 800765c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 800765e:	6883      	ldr	r3, [r0, #8]
 8007660:	0a1b      	lsrs	r3, r3, #8
 8007662:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8007664:	8943      	ldrh	r3, [r0, #10]
 8007666:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8007668:	7ac3      	ldrb	r3, [r0, #11]
 800766a:	70cb      	strb	r3, [r1, #3]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 800766c:	68c3      	ldr	r3, [r0, #12]
 800766e:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8007670:	68c3      	ldr	r3, [r0, #12]
 8007672:	0a1b      	lsrs	r3, r3, #8
 8007674:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8007676:	89c3      	ldrh	r3, [r0, #14]
 8007678:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 800767a:	7bc3      	ldrb	r3, [r0, #15]
 800767c:	71cb      	strb	r3, [r1, #7]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 800767e:	6903      	ldr	r3, [r0, #16]
 8007680:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8007682:	6903      	ldr	r3, [r0, #16]
 8007684:	0a1b      	lsrs	r3, r3, #8
 8007686:	724b      	strb	r3, [r1, #9]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8007688:	8a43      	ldrh	r3, [r0, #18]
 800768a:	728b      	strb	r3, [r1, #10]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 800768c:	7cc3      	ldrb	r3, [r0, #19]
 800768e:	72cb      	strb	r3, [r1, #11]
 8007690:	4605      	mov	r5, r0
      uint32_t length_frame_id = strlen(this->frame_id);
 8007692:	6940      	ldr	r0, [r0, #20]
 8007694:	460c      	mov	r4, r1
 8007696:	f7f8 fd9b 	bl	80001d0 <strlen>
      arr[i] = (var >> (8 * i));
 800769a:	0e03      	lsrs	r3, r0, #24
 800769c:	0a01      	lsrs	r1, r0, #8
 800769e:	0c02      	lsrs	r2, r0, #16
 80076a0:	4606      	mov	r6, r0
 80076a2:	7320      	strb	r0, [r4, #12]
 80076a4:	73a2      	strb	r2, [r4, #14]
 80076a6:	73e3      	strb	r3, [r4, #15]
 80076a8:	7361      	strb	r1, [r4, #13]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 80076aa:	6969      	ldr	r1, [r5, #20]
 80076ac:	4602      	mov	r2, r0
 80076ae:	f104 0010 	add.w	r0, r4, #16
      *(outbuffer + offset + 0) = (this->radiation_type >> (8 * 0)) & 0xFF;
 80076b2:	4434      	add	r4, r6
 80076b4:	f002 f83a 	bl	800972c <memcpy>
 80076b8:	7e2b      	ldrb	r3, [r5, #24]
 80076ba:	7423      	strb	r3, [r4, #16]
      *(outbuffer + offset + 0) = (u_field_of_view.base >> (8 * 0)) & 0xFF;
 80076bc:	69eb      	ldr	r3, [r5, #28]
 80076be:	7463      	strb	r3, [r4, #17]
      *(outbuffer + offset + 1) = (u_field_of_view.base >> (8 * 1)) & 0xFF;
 80076c0:	0a19      	lsrs	r1, r3, #8
      *(outbuffer + offset + 2) = (u_field_of_view.base >> (8 * 2)) & 0xFF;
 80076c2:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_field_of_view.base >> (8 * 3)) & 0xFF;
 80076c4:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 1) = (u_field_of_view.base >> (8 * 1)) & 0xFF;
 80076c6:	74a1      	strb	r1, [r4, #18]
      *(outbuffer + offset + 2) = (u_field_of_view.base >> (8 * 2)) & 0xFF;
 80076c8:	74e2      	strb	r2, [r4, #19]
      *(outbuffer + offset + 3) = (u_field_of_view.base >> (8 * 3)) & 0xFF;
 80076ca:	7523      	strb	r3, [r4, #20]
      *(outbuffer + offset + 0) = (u_min_range.base >> (8 * 0)) & 0xFF;
 80076cc:	6a2b      	ldr	r3, [r5, #32]
 80076ce:	7563      	strb	r3, [r4, #21]
      *(outbuffer + offset + 1) = (u_min_range.base >> (8 * 1)) & 0xFF;
 80076d0:	0a19      	lsrs	r1, r3, #8
      *(outbuffer + offset + 2) = (u_min_range.base >> (8 * 2)) & 0xFF;
 80076d2:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_min_range.base >> (8 * 3)) & 0xFF;
 80076d4:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 1) = (u_min_range.base >> (8 * 1)) & 0xFF;
 80076d6:	75a1      	strb	r1, [r4, #22]
      *(outbuffer + offset + 2) = (u_min_range.base >> (8 * 2)) & 0xFF;
 80076d8:	75e2      	strb	r2, [r4, #23]
      *(outbuffer + offset + 3) = (u_min_range.base >> (8 * 3)) & 0xFF;
 80076da:	7623      	strb	r3, [r4, #24]
      *(outbuffer + offset + 0) = (u_max_range.base >> (8 * 0)) & 0xFF;
 80076dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80076de:	7663      	strb	r3, [r4, #25]
      *(outbuffer + offset + 1) = (u_max_range.base >> (8 * 1)) & 0xFF;
 80076e0:	0a19      	lsrs	r1, r3, #8
      *(outbuffer + offset + 2) = (u_max_range.base >> (8 * 2)) & 0xFF;
 80076e2:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_max_range.base >> (8 * 3)) & 0xFF;
 80076e4:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 1) = (u_max_range.base >> (8 * 1)) & 0xFF;
 80076e6:	76a1      	strb	r1, [r4, #26]
      *(outbuffer + offset + 2) = (u_max_range.base >> (8 * 2)) & 0xFF;
 80076e8:	76e2      	strb	r2, [r4, #27]
      *(outbuffer + offset + 3) = (u_max_range.base >> (8 * 3)) & 0xFF;
 80076ea:	7723      	strb	r3, [r4, #28]
      *(outbuffer + offset + 0) = (u_range.base >> (8 * 0)) & 0xFF;
 80076ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80076ee:	7763      	strb	r3, [r4, #29]
      *(outbuffer + offset + 1) = (u_range.base >> (8 * 1)) & 0xFF;
 80076f0:	0a19      	lsrs	r1, r3, #8
      *(outbuffer + offset + 2) = (u_range.base >> (8 * 2)) & 0xFF;
 80076f2:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_range.base >> (8 * 3)) & 0xFF;
 80076f4:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 1) = (u_range.base >> (8 * 1)) & 0xFF;
 80076f6:	77a1      	strb	r1, [r4, #30]
      *(outbuffer + offset + 2) = (u_range.base >> (8 * 2)) & 0xFF;
 80076f8:	77e2      	strb	r2, [r4, #31]
      *(outbuffer + offset + 3) = (u_range.base >> (8 * 3)) & 0xFF;
 80076fa:	f884 3020 	strb.w	r3, [r4, #32]
    }
 80076fe:	f106 0021 	add.w	r0, r6, #33	; 0x21
 8007702:	bd70      	pop	{r4, r5, r6, pc}

08007704 <_ZNK13geometry_msgs7Vector39serializeEPh>:
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 8007704:	edd0 7a01 	vldr	s15, [r0, #4]
    int32_t exp = ((*val >> 23) & 255);
 8007708:	ee17 3a90 	vmov	r3, s15
 800770c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    virtual int serialize(unsigned char *outbuffer) const
 8007710:	b470      	push	{r4, r5, r6}
    if (exp != 0)
 8007712:	2a00      	cmp	r2, #0
 8007714:	d068      	beq.n	80077e8 <_ZNK13geometry_msgs7Vector39serializeEPh+0xe4>
      exp += 1023 - 127;
 8007716:	f502 7260 	add.w	r2, r2, #896	; 0x380
 800771a:	0114      	lsls	r4, r2, #4
 800771c:	b264      	sxtb	r4, r4
 800771e:	0912      	lsrs	r2, r2, #4
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007720:	f3c3 45c3 	ubfx	r5, r3, #19, #4
    if (f < 0)
 8007724:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007728:	432c      	orrs	r4, r5
    if (f < 0)
 800772a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    *(outbuffer++) = 0;
 800772e:	f04f 0500 	mov.w	r5, #0
    *(outbuffer++) = (sig << 5) & 0xff;
 8007732:	ea4f 1643 	mov.w	r6, r3, lsl #5
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007736:	718c      	strb	r4, [r1, #6]
      *(outbuffer - 1) |= 0x80;
 8007738:	bf48      	it	mi
 800773a:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = (sig >> 3) & 0xff;
 800773e:	10dc      	asrs	r4, r3, #3
    *(outbuffer++) = (sig >> 11) & 0xff;
 8007740:	12db      	asrs	r3, r3, #11
 8007742:	714b      	strb	r3, [r1, #5]
      *(outbuffer - 1) |= 0x80;
 8007744:	71ca      	strb	r2, [r1, #7]
    *(outbuffer++) = 0;
 8007746:	700d      	strb	r5, [r1, #0]
    *(outbuffer++) = 0;
 8007748:	704d      	strb	r5, [r1, #1]
    *(outbuffer++) = 0;
 800774a:	708d      	strb	r5, [r1, #2]
    *(outbuffer++) = (sig << 5) & 0xff;
 800774c:	70ce      	strb	r6, [r1, #3]
    *(outbuffer++) = (sig >> 3) & 0xff;
 800774e:	710c      	strb	r4, [r1, #4]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 8007750:	edd0 7a02 	vldr	s15, [r0, #8]
    int32_t exp = ((*val >> 23) & 255);
 8007754:	ee17 3a90 	vmov	r3, s15
 8007758:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    if (exp != 0)
 800775c:	2a00      	cmp	r2, #0
 800775e:	d047      	beq.n	80077f0 <_ZNK13geometry_msgs7Vector39serializeEPh+0xec>
      exp += 1023 - 127;
 8007760:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8007764:	0114      	lsls	r4, r2, #4
 8007766:	b264      	sxtb	r4, r4
 8007768:	0912      	lsrs	r2, r2, #4
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800776a:	f3c3 45c3 	ubfx	r5, r3, #19, #4
    if (f < 0)
 800776e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007772:	432c      	orrs	r4, r5
    if (f < 0)
 8007774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    *(outbuffer++) = 0;
 8007778:	f04f 0500 	mov.w	r5, #0
    *(outbuffer++) = (sig << 5) & 0xff;
 800777c:	ea4f 1643 	mov.w	r6, r3, lsl #5
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007780:	738c      	strb	r4, [r1, #14]
      *(outbuffer - 1) |= 0x80;
 8007782:	bf48      	it	mi
 8007784:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = (sig >> 3) & 0xff;
 8007788:	10dc      	asrs	r4, r3, #3
    *(outbuffer++) = (sig >> 11) & 0xff;
 800778a:	12db      	asrs	r3, r3, #11
 800778c:	734b      	strb	r3, [r1, #13]
      *(outbuffer - 1) |= 0x80;
 800778e:	73ca      	strb	r2, [r1, #15]
    *(outbuffer++) = 0;
 8007790:	720d      	strb	r5, [r1, #8]
    *(outbuffer++) = 0;
 8007792:	724d      	strb	r5, [r1, #9]
    *(outbuffer++) = 0;
 8007794:	728d      	strb	r5, [r1, #10]
    *(outbuffer++) = (sig << 5) & 0xff;
 8007796:	72ce      	strb	r6, [r1, #11]
    *(outbuffer++) = (sig >> 3) & 0xff;
 8007798:	730c      	strb	r4, [r1, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 800779a:	edd0 7a03 	vldr	s15, [r0, #12]
    int32_t exp = ((*val >> 23) & 255);
 800779e:	ee17 3a90 	vmov	r3, s15
 80077a2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    if (exp != 0)
 80077a6:	b30a      	cbz	r2, 80077ec <_ZNK13geometry_msgs7Vector39serializeEPh+0xe8>
      exp += 1023 - 127;
 80077a8:	f502 7260 	add.w	r2, r2, #896	; 0x380
 80077ac:	0110      	lsls	r0, r2, #4
 80077ae:	b240      	sxtb	r0, r0
 80077b0:	0912      	lsrs	r2, r2, #4
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 80077b2:	f3c3 44c3 	ubfx	r4, r3, #19, #4
    if (f < 0)
 80077b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 80077ba:	4320      	orrs	r0, r4
    if (f < 0)
 80077bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    *(outbuffer++) = 0;
 80077c0:	f04f 0400 	mov.w	r4, #0
    *(outbuffer++) = (sig << 5) & 0xff;
 80077c4:	ea4f 1543 	mov.w	r5, r3, lsl #5
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 80077c8:	7588      	strb	r0, [r1, #22]
      *(outbuffer - 1) |= 0x80;
 80077ca:	bf48      	it	mi
 80077cc:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = (sig >> 3) & 0xff;
 80077d0:	10d8      	asrs	r0, r3, #3
    *(outbuffer++) = (sig >> 11) & 0xff;
 80077d2:	12db      	asrs	r3, r3, #11
    *(outbuffer++) = 0;
 80077d4:	740c      	strb	r4, [r1, #16]
    *(outbuffer++) = 0;
 80077d6:	744c      	strb	r4, [r1, #17]
    *(outbuffer++) = 0;
 80077d8:	748c      	strb	r4, [r1, #18]
    *(outbuffer++) = (sig << 5) & 0xff;
 80077da:	74cd      	strb	r5, [r1, #19]
    *(outbuffer++) = (sig >> 3) & 0xff;
 80077dc:	7508      	strb	r0, [r1, #20]
    *(outbuffer++) = (sig >> 11) & 0xff;
 80077de:	754b      	strb	r3, [r1, #21]
    }
 80077e0:	2018      	movs	r0, #24
      *(outbuffer - 1) |= 0x80;
 80077e2:	75ca      	strb	r2, [r1, #23]
 80077e4:	bc70      	pop	{r4, r5, r6}
 80077e6:	4770      	bx	lr
    if (exp != 0)
 80077e8:	4614      	mov	r4, r2
 80077ea:	e799      	b.n	8007720 <_ZNK13geometry_msgs7Vector39serializeEPh+0x1c>
 80077ec:	4610      	mov	r0, r2
 80077ee:	e7e0      	b.n	80077b2 <_ZNK13geometry_msgs7Vector39serializeEPh+0xae>
 80077f0:	4614      	mov	r4, r2
 80077f2:	e7ba      	b.n	800776a <_ZNK13geometry_msgs7Vector39serializeEPh+0x66>

080077f4 <_ZN11sensor_msgs5Range11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
 80077f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 80077f8:	780b      	ldrb	r3, [r1, #0]
 80077fa:	6083      	str	r3, [r0, #8]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80077fc:	784a      	ldrb	r2, [r1, #1]
 80077fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007802:	6083      	str	r3, [r0, #8]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007804:	788a      	ldrb	r2, [r1, #2]
 8007806:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800780a:	6083      	str	r3, [r0, #8]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800780c:	78ca      	ldrb	r2, [r1, #3]
 800780e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007812:	6083      	str	r3, [r0, #8]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8007814:	790b      	ldrb	r3, [r1, #4]
 8007816:	60c3      	str	r3, [r0, #12]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007818:	794a      	ldrb	r2, [r1, #5]
 800781a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800781e:	60c3      	str	r3, [r0, #12]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007820:	798a      	ldrb	r2, [r1, #6]
 8007822:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007826:	60c3      	str	r3, [r0, #12]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007828:	79ca      	ldrb	r2, [r1, #7]
 800782a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800782e:	60c3      	str	r3, [r0, #12]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8007830:	7a0b      	ldrb	r3, [r1, #8]
 8007832:	6103      	str	r3, [r0, #16]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007834:	7a4a      	ldrb	r2, [r1, #9]
 8007836:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800783a:	6103      	str	r3, [r0, #16]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800783c:	7a8a      	ldrb	r2, [r1, #10]
 800783e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007842:	6103      	str	r3, [r0, #16]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007844:	7aca      	ldrb	r2, [r1, #11]
 8007846:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800784a:	6103      	str	r3, [r0, #16]
 800784c:	460c      	mov	r4, r1
      var |= (arr[i] << (8 * i));
 800784e:	7b4e      	ldrb	r6, [r1, #13]
 8007850:	7b89      	ldrb	r1, [r1, #14]
 8007852:	7be2      	ldrb	r2, [r4, #15]
 8007854:	7b23      	ldrb	r3, [r4, #12]
 8007856:	0236      	lsls	r6, r6, #8
 8007858:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
 800785c:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
 8007860:	431e      	orrs	r6, r3
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8007862:	f106 0710 	add.w	r7, r6, #16
 8007866:	2f10      	cmp	r7, #16
 8007868:	4605      	mov	r5, r0
 800786a:	f104 080f 	add.w	r8, r4, #15
 800786e:	d905      	bls.n	800787c <_ZN11sensor_msgs5Range11deserializeEPh+0x88>
 8007870:	4632      	mov	r2, r6
 8007872:	f104 0110 	add.w	r1, r4, #16
 8007876:	4640      	mov	r0, r8
 8007878:	f001 ff63 	bl	8009742 <memmove>
      inbuffer[offset+length_frame_id-1]=0;
 800787c:	19a3      	adds	r3, r4, r6
 800787e:	2200      	movs	r2, #0
 8007880:	73da      	strb	r2, [r3, #15]
      this->frame_id = (char *)(inbuffer + offset-1);
 8007882:	f8c5 8014 	str.w	r8, [r5, #20]
      this->radiation_type =  ((uint8_t) (*(inbuffer + offset)));
 8007886:	5de2      	ldrb	r2, [r4, r7]
 8007888:	762a      	strb	r2, [r5, #24]
      u_field_of_view.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800788a:	7cda      	ldrb	r2, [r3, #19]
      u_field_of_view.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800788c:	7c9c      	ldrb	r4, [r3, #18]
      u_field_of_view.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800788e:	7c58      	ldrb	r0, [r3, #17]
      u_field_of_view.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007890:	7d19      	ldrb	r1, [r3, #20]
      u_field_of_view.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007892:	0412      	lsls	r2, r2, #16
 8007894:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8007898:	4302      	orrs	r2, r0
      this->field_of_view = u_field_of_view.real;
 800789a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800789e:	61ea      	str	r2, [r5, #28]
      u_min_range.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80078a0:	7dda      	ldrb	r2, [r3, #23]
      u_min_range.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80078a2:	7d9c      	ldrb	r4, [r3, #22]
      u_min_range.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80078a4:	7d58      	ldrb	r0, [r3, #21]
      u_min_range.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80078a6:	7e19      	ldrb	r1, [r3, #24]
      u_min_range.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80078a8:	0412      	lsls	r2, r2, #16
 80078aa:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80078ae:	4302      	orrs	r2, r0
      this->min_range = u_min_range.real;
 80078b0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80078b4:	622a      	str	r2, [r5, #32]
      u_max_range.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80078b6:	7eda      	ldrb	r2, [r3, #27]
      u_max_range.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80078b8:	7e9c      	ldrb	r4, [r3, #26]
      u_max_range.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80078ba:	7e58      	ldrb	r0, [r3, #25]
      u_max_range.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80078bc:	7f19      	ldrb	r1, [r3, #28]
      u_max_range.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80078be:	0412      	lsls	r2, r2, #16
 80078c0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80078c4:	4302      	orrs	r2, r0
      this->max_range = u_max_range.real;
 80078c6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80078ca:	626a      	str	r2, [r5, #36]	; 0x24
      u_range.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80078cc:	7fda      	ldrb	r2, [r3, #31]
      u_range.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80078ce:	7f9c      	ldrb	r4, [r3, #30]
      u_range.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80078d0:	7f58      	ldrb	r0, [r3, #29]
      u_range.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80078d2:	f893 1020 	ldrb.w	r1, [r3, #32]
      u_range.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80078d6:	0413      	lsls	r3, r2, #16
 80078d8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80078dc:	4303      	orrs	r3, r0
      this->range = u_range.real;
 80078de:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    }
 80078e2:	f106 0021 	add.w	r0, r6, #33	; 0x21
      this->range = u_range.real;
 80078e6:	62ab      	str	r3, [r5, #40]	; 0x28
    }
 80078e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080078ec <cdc_receive_put>:

extern "C" void cdc_receive_put(uint8_t value)
	{
		ringbuffer_putchar(&rb, value);
 80078ec:	4601      	mov	r1, r0
 80078ee:	4801      	ldr	r0, [pc, #4]	; (80078f4 <cdc_receive_put+0x8>)
 80078f0:	f001 be5a 	b.w	80095a8 <_Z18ringbuffer_putcharP10ringbufferh>
 80078f4:	20004a84 	.word	0x20004a84

080078f8 <init_ROS>:
	}
extern "C" void init_ROS(void)
{
	ringbuffer_init(&rb, RxBuffer, RxBufferSize);
 80078f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80078fc:	4965      	ldr	r1, [pc, #404]	; (8007a94 <init_ROS+0x19c>)
 80078fe:	4866      	ldr	r0, [pc, #408]	; (8007a98 <init_ROS+0x1a0>)
{
 8007900:	b510      	push	{r4, lr}
	ringbuffer_init(&rb, RxBuffer, RxBufferSize);
 8007902:	f001 fed3 	bl	80096ac <_Z15ringbuffer_initP10ringbufferPhs>
    mode_ = 0;
 8007906:	4a65      	ldr	r2, [pc, #404]	; (8007a9c <init_ROS+0x1a4>)
 8007908:	2300      	movs	r3, #0
 800790a:	f502 618f 	add.w	r1, r2, #1144	; 0x478
    topic_ = 0;
 800790e:	4608      	mov	r0, r1
    mode_ = 0;
 8007910:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
    bytes_ = 0;
 8007914:	f8c2 34e4 	str.w	r3, [r2, #1252]	; 0x4e4
    index_ = 0;
 8007918:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    topic_ = 0;
 800791c:	f8c2 34e8 	str.w	r3, [r2, #1256]	; 0x4e8
 8007920:	e002      	b.n	8007928 <init_ROS+0x30>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8007922:	3301      	adds	r3, #1
 8007924:	2b19      	cmp	r3, #25
 8007926:	d00a      	beq.n	800793e <init_ROS+0x46>
      if (subscribers[i] == 0) // empty slot
 8007928:	f850 4f04 	ldr.w	r4, [r0, #4]!
 800792c:	2c00      	cmp	r4, #0
 800792e:	d1f8      	bne.n	8007922 <init_ROS+0x2a>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8007930:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 8007934:	485a      	ldr	r0, [pc, #360]	; (8007aa0 <init_ROS+0x1a8>)
 8007936:	f8c4 047c 	str.w	r0, [r4, #1148]	; 0x47c
        s.id_ = i + 100;
 800793a:	3364      	adds	r3, #100	; 0x64
 800793c:	6043      	str	r3, [r0, #4]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800793e:	2300      	movs	r3, #0
 8007940:	e002      	b.n	8007948 <init_ROS+0x50>
 8007942:	3301      	adds	r3, #1
 8007944:	2b19      	cmp	r3, #25
 8007946:	d00a      	beq.n	800795e <init_ROS+0x66>
      if (subscribers[i] == 0) // empty slot
 8007948:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800794c:	2800      	cmp	r0, #0
 800794e:	d1f8      	bne.n	8007942 <init_ROS+0x4a>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8007950:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 8007954:	4953      	ldr	r1, [pc, #332]	; (8007aa4 <init_ROS+0x1ac>)
 8007956:	f8c0 147c 	str.w	r1, [r0, #1148]	; 0x47c
        s.id_ = i + 100;
 800795a:	3364      	adds	r3, #100	; 0x64
 800795c:	604b      	str	r3, [r1, #4]
 800795e:	4952      	ldr	r1, [pc, #328]	; (8007aa8 <init_ROS+0x1b0>)
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8007960:	2300      	movs	r3, #0
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8007962:	4608      	mov	r0, r1
 8007964:	e002      	b.n	800796c <init_ROS+0x74>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8007966:	3301      	adds	r3, #1
 8007968:	2b19      	cmp	r3, #25
 800796a:	d00b      	beq.n	8007984 <init_ROS+0x8c>
      if (publishers[i] == 0) // empty slot
 800796c:	f850 4f04 	ldr.w	r4, [r0, #4]!
 8007970:	2c00      	cmp	r4, #0
 8007972:	d1f8      	bne.n	8007966 <init_ROS+0x6e>
        publishers[i] = &p;
 8007974:	484d      	ldr	r0, [pc, #308]	; (8007aac <init_ROS+0x1b4>)
 8007976:	f503 7483 	add.w	r4, r3, #262	; 0x106
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800797a:	337d      	adds	r3, #125	; 0x7d
        p.nh_ = this;
 800797c:	e9c0 3202 	strd	r3, r2, [r0, #8]
        publishers[i] = &p;
 8007980:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8007984:	4608      	mov	r0, r1
 8007986:	2300      	movs	r3, #0
 8007988:	e002      	b.n	8007990 <init_ROS+0x98>
 800798a:	3301      	adds	r3, #1
 800798c:	2b19      	cmp	r3, #25
 800798e:	d00b      	beq.n	80079a8 <init_ROS+0xb0>
      if (publishers[i] == 0) // empty slot
 8007990:	f850 4f04 	ldr.w	r4, [r0, #4]!
 8007994:	2c00      	cmp	r4, #0
 8007996:	d1f8      	bne.n	800798a <init_ROS+0x92>
        publishers[i] = &p;
 8007998:	4845      	ldr	r0, [pc, #276]	; (8007ab0 <init_ROS+0x1b8>)
 800799a:	f503 7483 	add.w	r4, r3, #262	; 0x106
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800799e:	337d      	adds	r3, #125	; 0x7d
        p.nh_ = this;
 80079a0:	e9c0 3202 	strd	r3, r2, [r0, #8]
        publishers[i] = &p;
 80079a4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80079a8:	4608      	mov	r0, r1
 80079aa:	2300      	movs	r3, #0
 80079ac:	e002      	b.n	80079b4 <init_ROS+0xbc>
 80079ae:	3301      	adds	r3, #1
 80079b0:	2b19      	cmp	r3, #25
 80079b2:	d00b      	beq.n	80079cc <init_ROS+0xd4>
      if (publishers[i] == 0) // empty slot
 80079b4:	f850 4f04 	ldr.w	r4, [r0, #4]!
 80079b8:	2c00      	cmp	r4, #0
 80079ba:	d1f8      	bne.n	80079ae <init_ROS+0xb6>
        publishers[i] = &p;
 80079bc:	483d      	ldr	r0, [pc, #244]	; (8007ab4 <init_ROS+0x1bc>)
 80079be:	f503 7483 	add.w	r4, r3, #262	; 0x106
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80079c2:	337d      	adds	r3, #125	; 0x7d
        p.nh_ = this;
 80079c4:	e9c0 3202 	strd	r3, r2, [r0, #8]
        publishers[i] = &p;
 80079c8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80079cc:	4608      	mov	r0, r1
 80079ce:	2300      	movs	r3, #0
 80079d0:	e002      	b.n	80079d8 <init_ROS+0xe0>
 80079d2:	3301      	adds	r3, #1
 80079d4:	2b19      	cmp	r3, #25
 80079d6:	d00b      	beq.n	80079f0 <init_ROS+0xf8>
      if (publishers[i] == 0) // empty slot
 80079d8:	f850 4f04 	ldr.w	r4, [r0, #4]!
 80079dc:	2c00      	cmp	r4, #0
 80079de:	d1f8      	bne.n	80079d2 <init_ROS+0xda>
        publishers[i] = &p;
 80079e0:	4835      	ldr	r0, [pc, #212]	; (8007ab8 <init_ROS+0x1c0>)
 80079e2:	f503 7483 	add.w	r4, r3, #262	; 0x106
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80079e6:	337d      	adds	r3, #125	; 0x7d
        p.nh_ = this;
 80079e8:	e9c0 3202 	strd	r3, r2, [r0, #8]
        publishers[i] = &p;
 80079ec:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80079f0:	4608      	mov	r0, r1
 80079f2:	2300      	movs	r3, #0
 80079f4:	e002      	b.n	80079fc <init_ROS+0x104>
 80079f6:	3301      	adds	r3, #1
 80079f8:	2b19      	cmp	r3, #25
 80079fa:	d00b      	beq.n	8007a14 <init_ROS+0x11c>
      if (publishers[i] == 0) // empty slot
 80079fc:	f850 4f04 	ldr.w	r4, [r0, #4]!
 8007a00:	2c00      	cmp	r4, #0
 8007a02:	d1f8      	bne.n	80079f6 <init_ROS+0xfe>
        publishers[i] = &p;
 8007a04:	482d      	ldr	r0, [pc, #180]	; (8007abc <init_ROS+0x1c4>)
 8007a06:	f503 7483 	add.w	r4, r3, #262	; 0x106
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8007a0a:	337d      	adds	r3, #125	; 0x7d
        p.nh_ = this;
 8007a0c:	e9c0 3202 	strd	r3, r2, [r0, #8]
        publishers[i] = &p;
 8007a10:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8007a14:	2300      	movs	r3, #0
 8007a16:	e002      	b.n	8007a1e <init_ROS+0x126>
 8007a18:	3301      	adds	r3, #1
 8007a1a:	2b19      	cmp	r3, #25
 8007a1c:	d00b      	beq.n	8007a36 <init_ROS+0x13e>
      if (publishers[i] == 0) // empty slot
 8007a1e:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8007a22:	2800      	cmp	r0, #0
 8007a24:	d1f8      	bne.n	8007a18 <init_ROS+0x120>
        publishers[i] = &p;
 8007a26:	4926      	ldr	r1, [pc, #152]	; (8007ac0 <init_ROS+0x1c8>)
 8007a28:	f503 7083 	add.w	r0, r3, #262	; 0x106
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8007a2c:	337d      	adds	r3, #125	; 0x7d
        p.nh_ = this;
 8007a2e:	e9c1 3202 	strd	r3, r2, [r1, #8]
        publishers[i] = &p;
 8007a32:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
//	nh.advertise(laser_sensor_data_9);
//	nh.advertise(laser_sensor_data_10);
//	nh.advertise(laser_sensor_data_11);
//	nh.advertise(laser_sensor_data_12);

	NBT_init(&rpm_left_nbt, 9);
 8007a36:	2109      	movs	r1, #9
 8007a38:	4822      	ldr	r0, [pc, #136]	; (8007ac4 <init_ROS+0x1cc>)
 8007a3a:	f001 fd9b 	bl	8009574 <_Z8NBT_initP5nbt_tm>
	NBT_init(&rpm_right_nbt, 9);
 8007a3e:	2109      	movs	r1, #9
 8007a40:	4821      	ldr	r0, [pc, #132]	; (8007ac8 <init_ROS+0x1d0>)
 8007a42:	f001 fd97 	bl	8009574 <_Z8NBT_initP5nbt_tm>
	NBT_init(&gyro_nbt, 9);
 8007a46:	2109      	movs	r1, #9
 8007a48:	4820      	ldr	r0, [pc, #128]	; (8007acc <init_ROS+0x1d4>)
 8007a4a:	f001 fd93 	bl	8009574 <_Z8NBT_initP5nbt_tm>
	NBT_init(&accel_nbt, 9);
 8007a4e:	2109      	movs	r1, #9
 8007a50:	481f      	ldr	r0, [pc, #124]	; (8007ad0 <init_ROS+0x1d8>)
 8007a52:	f001 fd8f 	bl	8009574 <_Z8NBT_initP5nbt_tm>
	NBT_init(&ros_nbt, 1);
 8007a56:	2101      	movs	r1, #1
 8007a58:	481e      	ldr	r0, [pc, #120]	; (8007ad4 <init_ROS+0x1dc>)
 8007a5a:	f001 fd8b 	bl	8009574 <_Z8NBT_initP5nbt_tm>
	NBT_init(&sensor1_data_nbt, 9);
 8007a5e:	2109      	movs	r1, #9
 8007a60:	481d      	ldr	r0, [pc, #116]	; (8007ad8 <init_ROS+0x1e0>)
 8007a62:	f001 fd87 	bl	8009574 <_Z8NBT_initP5nbt_tm>
	NBT_init(&sensor2_data_nbt, 9);
 8007a66:	2109      	movs	r1, #9
 8007a68:	481c      	ldr	r0, [pc, #112]	; (8007adc <init_ROS+0x1e4>)
 8007a6a:	f001 fd83 	bl	8009574 <_Z8NBT_initP5nbt_tm>
	NBT_init(&sensor3_data_nbt, 9);
 8007a6e:	2109      	movs	r1, #9
 8007a70:	481b      	ldr	r0, [pc, #108]	; (8007ae0 <init_ROS+0x1e8>)
 8007a72:	f001 fd7f 	bl	8009574 <_Z8NBT_initP5nbt_tm>
	NBT_init(&sensor4_data_nbt, 9);
 8007a76:	2109      	movs	r1, #9
 8007a78:	481a      	ldr	r0, [pc, #104]	; (8007ae4 <init_ROS+0x1ec>)
 8007a7a:	f001 fd7b 	bl	8009574 <_Z8NBT_initP5nbt_tm>
	NBT_init(&sensor5_data_nbt, 9);
 8007a7e:	2109      	movs	r1, #9
 8007a80:	4819      	ldr	r0, [pc, #100]	; (8007ae8 <init_ROS+0x1f0>)
 8007a82:	f001 fd77 	bl	8009574 <_Z8NBT_initP5nbt_tm>
	NBT_init(&sensor6_data_nbt, 9);
 8007a86:	2109      	movs	r1, #9
 8007a88:	4818      	ldr	r0, [pc, #96]	; (8007aec <init_ROS+0x1f4>)
}
 8007a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	NBT_init(&sensor6_data_nbt, 9);
 8007a8e:	f001 bd71 	b.w	8009574 <_Z8NBT_initP5nbt_tm>
 8007a92:	bf00      	nop
 8007a94:	20005be8 	.word	0x20005be8
 8007a98:	20004a84 	.word	0x20004a84
 8007a9c:	20004554 	.word	0x20004554
 8007aa0:	20004aa4 	.word	0x20004aa4
 8007aa4:	20004ad4 	.word	0x20004ad4
 8007aa8:	20004968 	.word	0x20004968
 8007aac:	20004b0c 	.word	0x20004b0c
 8007ab0:	20004230 	.word	0x20004230
 8007ab4:	2000420c 	.word	0x2000420c
 8007ab8:	20004a90 	.word	0x20004a90
 8007abc:	20004ac0 	.word	0x20004ac0
 8007ac0:	20004254 	.word	0x20004254
 8007ac4:	200041b4 	.word	0x200041b4
 8007ac8:	200041bc 	.word	0x200041bc
 8007acc:	200041fc 	.word	0x200041fc
 8007ad0:	20004204 	.word	0x20004204
 8007ad4:	200041f4 	.word	0x200041f4
 8007ad8:	200041c4 	.word	0x200041c4
 8007adc:	200041cc 	.word	0x200041cc
 8007ae0:	200041d4 	.word	0x200041d4
 8007ae4:	200041dc 	.word	0x200041dc
 8007ae8:	200041e4 	.word	0x200041e4
 8007aec:	200041ec 	.word	0x200041ec

08007af0 <laser_sensor_handler_1>:

extern "C" void laser_sensor_handler_1(void)
{
 8007af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (NBT_handler(&sensor1_data_nbt)) {
 8007af4:	4896      	ldr	r0, [pc, #600]	; (8007d50 <laser_sensor_handler_1+0x260>)
{
 8007af6:	b08d      	sub	sp, #52	; 0x34
	if (NBT_handler(&sensor1_data_nbt)) {
 8007af8:	f001 fd44 	bl	8009584 <_Z11NBT_handlerP5nbt_t>
 8007afc:	b308      	cbz	r0, 8007b42 <laser_sensor_handler_1+0x52>
		char frame_id_1[] = "sensor_frame_fr_0";
		laser_sensor_msg_1.min_range = 0.0;
		laser_sensor_msg_1.max_range = 2.0;
		laser_sensor_msg_1.field_of_view = 0.436332;
		laser_sensor_msg_1.radiation_type = 1;
		laser_sensor_msg_1.range = (float)(sensorData1)/100;
 8007afe:	4b95      	ldr	r3, [pc, #596]	; (8007d54 <laser_sensor_handler_1+0x264>)
		laser_sensor_msg_1.min_range = 0.0;
 8007b00:	4c95      	ldr	r4, [pc, #596]	; (8007d58 <laser_sensor_handler_1+0x268>)
		laser_sensor_msg_1.range = (float)(sensorData1)/100;
 8007b02:	781b      	ldrb	r3, [r3, #0]
		char frame_id_1[] = "sensor_frame_fr_0";
 8007b04:	4e95      	ldr	r6, [pc, #596]	; (8007d5c <laser_sensor_handler_1+0x26c>)
		laser_sensor_msg_1.range = (float)(sensorData1)/100;
 8007b06:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8007d60 <laser_sensor_handler_1+0x270>
		laser_sensor_msg_1.field_of_view = 0.436332;
 8007b0a:	4f96      	ldr	r7, [pc, #600]	; (8007d64 <laser_sensor_handler_1+0x274>)
 8007b0c:	61e7      	str	r7, [r4, #28]
		laser_sensor_msg_1.range = (float)(sensorData1)/100;
 8007b0e:	ee07 3a90 	vmov	s15, r3
		laser_sensor_msg_1.min_range = 0.0;
 8007b12:	2300      	movs	r3, #0
 8007b14:	6223      	str	r3, [r4, #32]
		char frame_id_1[] = "sensor_frame_fr_0";
 8007b16:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007b18:	ad07      	add	r5, sp, #28
 8007b1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
		laser_sensor_msg_1.range = (float)(sensorData1)/100;
 8007b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    return configured_;
 8007b20:	4b91      	ldr	r3, [pc, #580]	; (8007d68 <laser_sensor_handler_1+0x278>)
		char frame_id_1[] = "sensor_frame_fr_0";
 8007b22:	6832      	ldr	r2, [r6, #0]
		laser_sensor_msg_1.header.frame_id = frame_id_1;
    	if (nh.connected()) {
 8007b24:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
		char frame_id_1[] = "sensor_frame_fr_0";
 8007b28:	802a      	strh	r2, [r5, #0]
		laser_sensor_msg_1.range = (float)(sensorData1)/100;
 8007b2a:	ee67 7a87 	vmul.f32	s15, s15, s14
		laser_sensor_msg_1.max_range = 2.0;
 8007b2e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		laser_sensor_msg_1.radiation_type = 1;
 8007b32:	2101      	movs	r1, #1
		laser_sensor_msg_1.header.frame_id = frame_id_1;
 8007b34:	af07      	add	r7, sp, #28
		laser_sensor_msg_1.range = (float)(sensorData1)/100;
 8007b36:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
		laser_sensor_msg_1.max_range = 2.0;
 8007b3a:	6260      	str	r0, [r4, #36]	; 0x24
		laser_sensor_msg_1.radiation_type = 1;
 8007b3c:	7621      	strb	r1, [r4, #24]
		laser_sensor_msg_1.header.frame_id = frame_id_1;
 8007b3e:	6167      	str	r7, [r4, #20]
    	if (nh.connected()) {
 8007b40:	b913      	cbnz	r3, 8007b48 <laser_sensor_handler_1+0x58>
    		laser_sensor_data_1.publish(&laser_sensor_msg_1);
    	}
	}
}
 8007b42:	b00d      	add	sp, #52	; 0x34
 8007b44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    		laser_sensor_data_1.publish(&laser_sensor_msg_1);
 8007b48:	4b88      	ldr	r3, [pc, #544]	; (8007d6c <laser_sensor_handler_1+0x27c>)
 8007b4a:	4e89      	ldr	r6, [pc, #548]	; (8007d70 <laser_sensor_handler_1+0x280>)
 8007b4c:	e9d3 9502 	ldrd	r9, r5, [r3, #8]
    msg_(msg),
    endpoint_(endpoint) {};

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
 8007b50:	682b      	ldr	r3, [r5, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	42b3      	cmp	r3, r6
 8007b56:	f040 80a6 	bne.w	8007ca6 <laser_sensor_handler_1+0x1b6>
    if (id >= 100 && !configured_)
 8007b5a:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 8007b5e:	dd03      	ble.n	8007b68 <laser_sensor_handler_1+0x78>
 8007b60:	f895 34f4 	ldrb.w	r3, [r5, #1268]	; 0x4f4
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d0ec      	beq.n	8007b42 <laser_sensor_handler_1+0x52>
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8007b68:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8007b6c:	6922      	ldr	r2, [r4, #16]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 8007b6e:	f885 321f 	strb.w	r3, [r5, #543]	; 0x21f
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8007b72:	ea4f 2c13 	mov.w	ip, r3, lsr #8
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8007b76:	0c18      	lsrs	r0, r3, #16
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8007b78:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8007b7a:	ea4f 4e11 	mov.w	lr, r1, lsr #16
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8007b7e:	ea4f 2811 	mov.w	r8, r1, lsr #8
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8007b82:	f885 c220 	strb.w	ip, [r5, #544]	; 0x220
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8007b86:	f885 0221 	strb.w	r0, [r5, #545]	; 0x221
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8007b8a:	ea4f 6c11 	mov.w	ip, r1, lsr #24
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8007b8e:	0a10      	lsrs	r0, r2, #8
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8007b90:	f885 3222 	strb.w	r3, [r5, #546]	; 0x222
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8007b94:	f885 1223 	strb.w	r1, [r5, #547]	; 0x223
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8007b98:	0e13      	lsrs	r3, r2, #24
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8007b9a:	0c11      	lsrs	r1, r2, #16
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8007b9c:	f885 c226 	strb.w	ip, [r5, #550]	; 0x226
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8007ba0:	f885 8224 	strb.w	r8, [r5, #548]	; 0x224
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8007ba4:	f885 e225 	strb.w	lr, [r5, #549]	; 0x225
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8007ba8:	f885 2227 	strb.w	r2, [r5, #551]	; 0x227
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8007bac:	f885 0228 	strb.w	r0, [r5, #552]	; 0x228
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8007bb0:	f885 1229 	strb.w	r1, [r5, #553]	; 0x229
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8007bb4:	f885 322a 	strb.w	r3, [r5, #554]	; 0x22a
      uint32_t length_frame_id = strlen(this->frame_id);
 8007bb8:	4638      	mov	r0, r7
 8007bba:	f7f8 fb09 	bl	80001d0 <strlen>
 8007bbe:	4680      	mov	r8, r0
      arr[i] = (var >> (8 * i));
 8007bc0:	ea4f 6318 	mov.w	r3, r8, lsr #24
 8007bc4:	0a00      	lsrs	r0, r0, #8
 8007bc6:	ea4f 4218 	mov.w	r2, r8, lsr #16
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8007bca:	4639      	mov	r1, r7
 8007bcc:	f885 022c 	strb.w	r0, [r5, #556]	; 0x22c
 8007bd0:	f885 222d 	strb.w	r2, [r5, #557]	; 0x22d
 8007bd4:	f885 322e 	strb.w	r3, [r5, #558]	; 0x22e
 8007bd8:	4642      	mov	r2, r8
 8007bda:	f885 822b 	strb.w	r8, [r5, #555]	; 0x22b
 8007bde:	f205 202f 	addw	r0, r5, #559	; 0x22f
    int l = msg->serialize(message_out + 7);
 8007be2:	f205 271f 	addw	r7, r5, #543	; 0x21f
 8007be6:	f001 fda1 	bl	800972c <memcpy>
      *(outbuffer + offset + 0) = (this->radiation_type >> (8 * 0)) & 0xFF;
 8007bea:	eb07 0308 	add.w	r3, r7, r8
 8007bee:	2201      	movs	r2, #1
 8007bf0:	741a      	strb	r2, [r3, #16]
      *(outbuffer + offset + 0) = (u_field_of_view.base >> (8 * 0)) & 0xFF;
 8007bf2:	69e2      	ldr	r2, [r4, #28]
 8007bf4:	745a      	strb	r2, [r3, #17]
      *(outbuffer + offset + 1) = (u_field_of_view.base >> (8 * 1)) & 0xFF;
 8007bf6:	0a10      	lsrs	r0, r2, #8
      *(outbuffer + offset + 2) = (u_field_of_view.base >> (8 * 2)) & 0xFF;
 8007bf8:	0c11      	lsrs	r1, r2, #16
      *(outbuffer + offset + 3) = (u_field_of_view.base >> (8 * 3)) & 0xFF;
 8007bfa:	0e12      	lsrs	r2, r2, #24
      *(outbuffer + offset + 1) = (u_field_of_view.base >> (8 * 1)) & 0xFF;
 8007bfc:	7498      	strb	r0, [r3, #18]
      *(outbuffer + offset + 2) = (u_field_of_view.base >> (8 * 2)) & 0xFF;
 8007bfe:	74d9      	strb	r1, [r3, #19]
      *(outbuffer + offset + 3) = (u_field_of_view.base >> (8 * 3)) & 0xFF;
 8007c00:	751a      	strb	r2, [r3, #20]
      *(outbuffer + offset + 0) = (u_min_range.base >> (8 * 0)) & 0xFF;
 8007c02:	6a22      	ldr	r2, [r4, #32]
 8007c04:	755a      	strb	r2, [r3, #21]
      *(outbuffer + offset + 1) = (u_min_range.base >> (8 * 1)) & 0xFF;
 8007c06:	0a10      	lsrs	r0, r2, #8
      *(outbuffer + offset + 2) = (u_min_range.base >> (8 * 2)) & 0xFF;
 8007c08:	0c11      	lsrs	r1, r2, #16
      *(outbuffer + offset + 3) = (u_min_range.base >> (8 * 3)) & 0xFF;
 8007c0a:	0e12      	lsrs	r2, r2, #24
      *(outbuffer + offset + 1) = (u_min_range.base >> (8 * 1)) & 0xFF;
 8007c0c:	7598      	strb	r0, [r3, #22]
      *(outbuffer + offset + 2) = (u_min_range.base >> (8 * 2)) & 0xFF;
 8007c0e:	75d9      	strb	r1, [r3, #23]
      *(outbuffer + offset + 3) = (u_min_range.base >> (8 * 3)) & 0xFF;
 8007c10:	761a      	strb	r2, [r3, #24]
      *(outbuffer + offset + 0) = (u_max_range.base >> (8 * 0)) & 0xFF;
 8007c12:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007c14:	765a      	strb	r2, [r3, #25]
      *(outbuffer + offset + 1) = (u_max_range.base >> (8 * 1)) & 0xFF;
 8007c16:	0a10      	lsrs	r0, r2, #8
      *(outbuffer + offset + 2) = (u_max_range.base >> (8 * 2)) & 0xFF;
 8007c18:	0c11      	lsrs	r1, r2, #16
      *(outbuffer + offset + 3) = (u_max_range.base >> (8 * 3)) & 0xFF;
 8007c1a:	0e12      	lsrs	r2, r2, #24
      *(outbuffer + offset + 1) = (u_max_range.base >> (8 * 1)) & 0xFF;
 8007c1c:	7698      	strb	r0, [r3, #26]
      *(outbuffer + offset + 2) = (u_max_range.base >> (8 * 2)) & 0xFF;
 8007c1e:	76d9      	strb	r1, [r3, #27]
      *(outbuffer + offset + 3) = (u_max_range.base >> (8 * 3)) & 0xFF;
 8007c20:	771a      	strb	r2, [r3, #28]
      *(outbuffer + offset + 0) = (u_range.base >> (8 * 0)) & 0xFF;
 8007c22:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007c24:	775a      	strb	r2, [r3, #29]
      offset += sizeof(this->range);
 8007c26:	f108 0121 	add.w	r1, r8, #33	; 0x21
      *(outbuffer + offset + 1) = (u_range.base >> (8 * 1)) & 0xFF;
 8007c2a:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8007c2e:	f883 c01e 	strb.w	ip, [r3, #30]
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8007c32:	b2cc      	uxtb	r4, r1
      *(outbuffer + offset + 2) = (u_range.base >> (8 * 2)) & 0xFF;
 8007c34:	ea4f 4c12 	mov.w	ip, r2, lsr #16
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8007c38:	f3c1 2007 	ubfx	r0, r1, #8, #8
      *(outbuffer + offset + 3) = (u_range.base >> (8 * 3)) & 0xFF;
 8007c3c:	0e12      	lsrs	r2, r2, #24
      *(outbuffer + offset + 2) = (u_range.base >> (8 * 2)) & 0xFF;
 8007c3e:	f883 c01f 	strb.w	ip, [r3, #31]
      *(outbuffer + offset + 3) = (u_range.base >> (8 * 3)) & 0xFF;
 8007c42:	f883 2020 	strb.w	r2, [r3, #32]
    message_out[0] = 0xff;
 8007c46:	f64f 62ff 	movw	r2, #65279	; 0xfeff
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8007c4a:	1823      	adds	r3, r4, r0
 8007c4c:	43db      	mvns	r3, r3
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8007c4e:	f349 2c07 	sbfx	ip, r9, #8, #8
    message_out[0] = 0xff;
 8007c52:	f8a5 2218 	strh.w	r2, [r5, #536]	; 0x218
    for (int i = 5; i < l + 7; i++)
 8007c56:	1c4a      	adds	r2, r1, #1
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8007c58:	f885 921d 	strb.w	r9, [r5, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8007c5c:	f885 c21e 	strb.w	ip, [r5, #542]	; 0x21e
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8007c60:	f885 421a 	strb.w	r4, [r5, #538]	; 0x21a
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8007c64:	f885 321c 	strb.w	r3, [r5, #540]	; 0x21c
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8007c68:	f885 021b 	strb.w	r0, [r5, #539]	; 0x21b
    for (int i = 5; i < l + 7; i++)
 8007c6c:	db20      	blt.n	8007cb0 <laser_sensor_handler_1+0x1c0>
 8007c6e:	f205 233f 	addw	r3, r5, #575	; 0x23f
 8007c72:	4498      	add	r8, r3
    int chk = 0;
 8007c74:	2200      	movs	r2, #0
 8007c76:	f505 7307 	add.w	r3, r5, #540	; 0x21c
      chk += message_out[i];
 8007c7a:	f813 4f01 	ldrb.w	r4, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 8007c7e:	4598      	cmp	r8, r3
      chk += message_out[i];
 8007c80:	4422      	add	r2, r4
    for (int i = 5; i < l + 7; i++)
 8007c82:	d1fa      	bne.n	8007c7a <laser_sensor_handler_1+0x18a>
 8007c84:	43d2      	mvns	r2, r2
 8007c86:	b2d2      	uxtb	r2, r2
    message_out[l++] = 255 - (chk % 256);
 8007c88:	186b      	adds	r3, r5, r1
 8007c8a:	3108      	adds	r1, #8
    if (l <= OUTPUT_SIZE)
 8007c8c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    message_out[l++] = 255 - (chk % 256);
 8007c90:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
    if (l <= OUTPUT_SIZE)
 8007c94:	dc0e      	bgt.n	8007cb4 <laser_sensor_handler_1+0x1c4>
 8007c96:	b289      	uxth	r1, r1
 8007c98:	f505 7006 	add.w	r0, r5, #536	; 0x218
 8007c9c:	f7fe fda2 	bl	80067e4 <CDC_Transmit_FS>
}
 8007ca0:	b00d      	add	sp, #52	; 0x34
 8007ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ca6:	4622      	mov	r2, r4
 8007ca8:	4649      	mov	r1, r9
 8007caa:	4628      	mov	r0, r5
 8007cac:	4798      	blx	r3
 8007cae:	e748      	b.n	8007b42 <laser_sensor_handler_1+0x52>
    for (int i = 5; i < l + 7; i++)
 8007cb0:	22ff      	movs	r2, #255	; 0xff
 8007cb2:	e7e9      	b.n	8007c88 <laser_sensor_handler_1+0x198>
    l.level = byte;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8007d78 <laser_sensor_handler_1+0x288>
    l.msg = (char*)msg;
 8007cba:	4c2e      	ldr	r4, [pc, #184]	; (8007d74 <laser_sensor_handler_1+0x284>)
    l.level = byte;
 8007cbc:	f88d 3008 	strb.w	r3, [sp, #8]
 8007cc0:	f8cd 8004 	str.w	r8, [sp, #4]
    l.msg = (char*)msg;
 8007cc4:	9403      	str	r4, [sp, #12]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8007cc6:	682b      	ldr	r3, [r5, #0]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	42b3      	cmp	r3, r6
 8007ccc:	d13a      	bne.n	8007d44 <laser_sensor_handler_1+0x254>
    int l = msg->serialize(message_out + 7);
 8007cce:	4639      	mov	r1, r7
 8007cd0:	a801      	add	r0, sp, #4
 8007cd2:	f7ff faa3 	bl	800721c <_ZNK14rosserial_msgs3Log9serializeEPh>
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8007cd6:	b2c1      	uxtb	r1, r0
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8007cd8:	f3c0 2207 	ubfx	r2, r0, #8, #8
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8007cdc:	188b      	adds	r3, r1, r2
 8007cde:	43db      	mvns	r3, r3
 8007ce0:	f885 321c 	strb.w	r3, [r5, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8007ce4:	2307      	movs	r3, #7
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8007ce6:	f885 121a 	strb.w	r1, [r5, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8007cea:	f885 221b 	strb.w	r2, [r5, #539]	; 0x21b
    message_out[0] = 0xff;
 8007cee:	f64f 61ff 	movw	r1, #65279	; 0xfeff
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8007cf2:	2200      	movs	r2, #0
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8007cf4:	f885 321d 	strb.w	r3, [r5, #541]	; 0x21d
    for (int i = 5; i < l + 7; i++)
 8007cf8:	1c43      	adds	r3, r0, #1
    message_out[0] = 0xff;
 8007cfa:	f8a5 1218 	strh.w	r1, [r5, #536]	; 0x218
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8007cfe:	f885 221e 	strb.w	r2, [r5, #542]	; 0x21e
    for (int i = 5; i < l + 7; i++)
 8007d02:	db09      	blt.n	8007d18 <laser_sensor_handler_1+0x228>
 8007d04:	f205 261e 	addw	r6, r5, #542	; 0x21e
 8007d08:	4406      	add	r6, r0
 8007d0a:	f505 7307 	add.w	r3, r5, #540	; 0x21c
      chk += message_out[i];
 8007d0e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 8007d12:	42b3      	cmp	r3, r6
      chk += message_out[i];
 8007d14:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
 8007d16:	d1fa      	bne.n	8007d0e <laser_sensor_handler_1+0x21e>
    message_out[l++] = 255 - (chk % 256);
 8007d18:	182b      	adds	r3, r5, r0
 8007d1a:	f100 0108 	add.w	r1, r0, #8
 8007d1e:	43d2      	mvns	r2, r2
    if (l <= OUTPUT_SIZE)
 8007d20:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    message_out[l++] = 255 - (chk % 256);
 8007d24:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
    if (l <= OUTPUT_SIZE)
 8007d28:	ddb5      	ble.n	8007c96 <laser_sensor_handler_1+0x1a6>
    l.level = byte;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	f88d 3014 	strb.w	r3, [sp, #20]
 8007d30:	f8cd 8010 	str.w	r8, [sp, #16]
    l.msg = (char*)msg;
 8007d34:	9406      	str	r4, [sp, #24]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8007d36:	682b      	ldr	r3, [r5, #0]
 8007d38:	4628      	mov	r0, r5
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	aa04      	add	r2, sp, #16
 8007d3e:	2107      	movs	r1, #7
 8007d40:	4798      	blx	r3
 8007d42:	e6fe      	b.n	8007b42 <laser_sensor_handler_1+0x52>
 8007d44:	4628      	mov	r0, r5
 8007d46:	aa01      	add	r2, sp, #4
 8007d48:	2107      	movs	r1, #7
 8007d4a:	4798      	blx	r3
 8007d4c:	e6f9      	b.n	8007b42 <laser_sensor_handler_1+0x52>
 8007d4e:	bf00      	nop
 8007d50:	200041c4 	.word	0x200041c4
 8007d54:	200041a5 	.word	0x200041a5
 8007d58:	20004344 	.word	0x20004344
 8007d5c:	08009f0c 	.word	0x08009f0c
 8007d60:	3c23d70a 	.word	0x3c23d70a
 8007d64:	3edf66e8 	.word	0x3edf66e8
 8007d68:	20004554 	.word	0x20004554
 8007d6c:	20004254 	.word	0x20004254
 8007d70:	080074c5 	.word	0x080074c5
 8007d74:	08009e00 	.word	0x08009e00
 8007d78:	08009ac0 	.word	0x08009ac0

08007d7c <gyro_handler>:
		  }
		}
}

extern "C" void gyro_handler(void)
{
 8007d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return configured_;
 8007d80:	4b68      	ldr	r3, [pc, #416]	; (8007f24 <gyro_handler+0x1a8>)

    	gyro_msg.x = gyroX;
 8007d82:	4869      	ldr	r0, [pc, #420]	; (8007f28 <gyro_handler+0x1ac>)
    	gyro_msg.y = gyroY;
 8007d84:	4969      	ldr	r1, [pc, #420]	; (8007f2c <gyro_handler+0x1b0>)
    	gyro_msg.z = gyroZ;
 8007d86:	4a6a      	ldr	r2, [pc, #424]	; (8007f30 <gyro_handler+0x1b4>)
    	gyro_msg.x = gyroX;
 8007d88:	4c6a      	ldr	r4, [pc, #424]	; (8007f34 <gyro_handler+0x1b8>)
    	if (nh.connected()) {
 8007d8a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
    	gyro_msg.x = gyroX;
 8007d8e:	6800      	ldr	r0, [r0, #0]
    	gyro_msg.y = gyroY;
 8007d90:	6809      	ldr	r1, [r1, #0]
    	gyro_msg.z = gyroZ;
 8007d92:	6812      	ldr	r2, [r2, #0]
    	gyro_msg.x = gyroX;
 8007d94:	6060      	str	r0, [r4, #4]
    	gyro_msg.y = gyroY;
 8007d96:	60a1      	str	r1, [r4, #8]
    	gyro_msg.z = gyroZ;
 8007d98:	60e2      	str	r2, [r4, #12]
    	if (nh.connected()) {
 8007d9a:	b90b      	cbnz	r3, 8007da0 <gyro_handler+0x24>
    		if (NBT_handler(&gyro_nbt))
    		{
    			gyro.publish(&gyro_msg);
    		}
    	}
}
 8007d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    		if (NBT_handler(&gyro_nbt))
 8007da0:	4865      	ldr	r0, [pc, #404]	; (8007f38 <gyro_handler+0x1bc>)
 8007da2:	f001 fbef 	bl	8009584 <_Z11NBT_handlerP5nbt_t>
 8007da6:	2800      	cmp	r0, #0
 8007da8:	d0f8      	beq.n	8007d9c <gyro_handler+0x20>
    			gyro.publish(&gyro_msg);
 8007daa:	4b64      	ldr	r3, [pc, #400]	; (8007f3c <gyro_handler+0x1c0>)
 8007dac:	4a64      	ldr	r2, [pc, #400]	; (8007f40 <gyro_handler+0x1c4>)
 8007dae:	e9d3 1002 	ldrd	r1, r0, [r3, #8]
 8007db2:	6803      	ldr	r3, [r0, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4293      	cmp	r3, r2
 8007db8:	f040 80af 	bne.w	8007f1a <gyro_handler+0x19e>
    if (id >= 100 && !configured_)
 8007dbc:	2963      	cmp	r1, #99	; 0x63
 8007dbe:	dd03      	ble.n	8007dc8 <gyro_handler+0x4c>
 8007dc0:	f890 34f4 	ldrb.w	r3, [r0, #1268]	; 0x4f4
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d0e9      	beq.n	8007d9c <gyro_handler+0x20>
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 8007dc8:	edd4 7a01 	vldr	s15, [r4, #4]
    int32_t exp = ((*val >> 23) & 255);
 8007dcc:	ee17 3a90 	vmov	r3, s15
 8007dd0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    if (exp != 0)
 8007dd4:	2a00      	cmp	r2, #0
 8007dd6:	f040 8096 	bne.w	8007f06 <gyro_handler+0x18a>
 8007dda:	4615      	mov	r5, r2
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007ddc:	f3c3 46c3 	ubfx	r6, r3, #19, #4
 8007de0:	4335      	orrs	r5, r6
    if (f < 0)
 8007de2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 8007de6:	edd4 7a02 	vldr	s15, [r4, #8]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007dea:	f880 5225 	strb.w	r5, [r0, #549]	; 0x225
    *(outbuffer++) = (sig << 5) & 0xff;
 8007dee:	015f      	lsls	r7, r3, #5
    *(outbuffer++) = (sig >> 3) & 0xff;
 8007df0:	10dd      	asrs	r5, r3, #3
    *(outbuffer++) = (sig >> 11) & 0xff;
 8007df2:	12db      	asrs	r3, r3, #11
 8007df4:	f880 3224 	strb.w	r3, [r0, #548]	; 0x224
    if (f < 0)
 8007df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    int32_t exp = ((*val >> 23) & 255);
 8007dfc:	ee17 3a90 	vmov	r3, s15
      *(outbuffer - 1) |= 0x80;
 8007e00:	bf48      	it	mi
 8007e02:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = 0;
 8007e06:	2600      	movs	r6, #0
      *(outbuffer - 1) |= 0x80;
 8007e08:	f880 2226 	strb.w	r2, [r0, #550]	; 0x226
    int32_t exp = ((*val >> 23) & 255);
 8007e0c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    *(outbuffer++) = 0;
 8007e10:	f880 621f 	strb.w	r6, [r0, #543]	; 0x21f
    *(outbuffer++) = 0;
 8007e14:	f880 6220 	strb.w	r6, [r0, #544]	; 0x220
    *(outbuffer++) = 0;
 8007e18:	f880 6221 	strb.w	r6, [r0, #545]	; 0x221
    *(outbuffer++) = (sig << 5) & 0xff;
 8007e1c:	f880 7222 	strb.w	r7, [r0, #546]	; 0x222
    *(outbuffer++) = (sig >> 3) & 0xff;
 8007e20:	f880 5223 	strb.w	r5, [r0, #547]	; 0x223
    if (exp != 0)
 8007e24:	2a00      	cmp	r2, #0
 8007e26:	d076      	beq.n	8007f16 <gyro_handler+0x19a>
      exp += 1023 - 127;
 8007e28:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8007e2c:	0115      	lsls	r5, r2, #4
 8007e2e:	b26d      	sxtb	r5, r5
 8007e30:	0912      	lsrs	r2, r2, #4
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007e32:	f3c3 46c3 	ubfx	r6, r3, #19, #4
 8007e36:	4335      	orrs	r5, r6
    if (f < 0)
 8007e38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 8007e3c:	edd4 7a03 	vldr	s15, [r4, #12]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007e40:	f880 522d 	strb.w	r5, [r0, #557]	; 0x22d
    *(outbuffer++) = (sig << 5) & 0xff;
 8007e44:	015f      	lsls	r7, r3, #5
    *(outbuffer++) = (sig >> 3) & 0xff;
 8007e46:	10dd      	asrs	r5, r3, #3
    *(outbuffer++) = (sig >> 11) & 0xff;
 8007e48:	12db      	asrs	r3, r3, #11
 8007e4a:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
    if (f < 0)
 8007e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    int32_t exp = ((*val >> 23) & 255);
 8007e52:	ee17 3a90 	vmov	r3, s15
      *(outbuffer - 1) |= 0x80;
 8007e56:	bf48      	it	mi
 8007e58:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = 0;
 8007e5c:	2600      	movs	r6, #0
      *(outbuffer - 1) |= 0x80;
 8007e5e:	f880 222e 	strb.w	r2, [r0, #558]	; 0x22e
    int32_t exp = ((*val >> 23) & 255);
 8007e62:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    *(outbuffer++) = 0;
 8007e66:	f880 6227 	strb.w	r6, [r0, #551]	; 0x227
    *(outbuffer++) = 0;
 8007e6a:	f880 6228 	strb.w	r6, [r0, #552]	; 0x228
    *(outbuffer++) = 0;
 8007e6e:	f880 6229 	strb.w	r6, [r0, #553]	; 0x229
    *(outbuffer++) = (sig << 5) & 0xff;
 8007e72:	f880 722a 	strb.w	r7, [r0, #554]	; 0x22a
    *(outbuffer++) = (sig >> 3) & 0xff;
 8007e76:	f880 522b 	strb.w	r5, [r0, #555]	; 0x22b
    if (exp != 0)
 8007e7a:	2a00      	cmp	r2, #0
 8007e7c:	d049      	beq.n	8007f12 <gyro_handler+0x196>
      exp += 1023 - 127;
 8007e7e:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8007e82:	0114      	lsls	r4, r2, #4
 8007e84:	b264      	sxtb	r4, r4
 8007e86:	0912      	lsrs	r2, r2, #4
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007e88:	f3c3 45c3 	ubfx	r5, r3, #19, #4
    if (f < 0)
 8007e8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007e90:	432c      	orrs	r4, r5
    if (f < 0)
 8007e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    *(outbuffer++) = (sig << 5) & 0xff;
 8007e96:	ea4f 1643 	mov.w	r6, r3, lsl #5
      *(outbuffer - 1) |= 0x80;
 8007e9a:	bf48      	it	mi
 8007e9c:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007ea0:	f880 4235 	strb.w	r4, [r0, #565]	; 0x235
    *(outbuffer++) = (sig >> 3) & 0xff;
 8007ea4:	10dc      	asrs	r4, r3, #3
    *(outbuffer++) = (sig >> 11) & 0xff;
 8007ea6:	12db      	asrs	r3, r3, #11
    *(outbuffer++) = 0;
 8007ea8:	2500      	movs	r5, #0
    *(outbuffer++) = (sig >> 3) & 0xff;
 8007eaa:	f880 4233 	strb.w	r4, [r0, #563]	; 0x233
    *(outbuffer++) = (sig >> 11) & 0xff;
 8007eae:	f880 3234 	strb.w	r3, [r0, #564]	; 0x234
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8007eb2:	f341 2407 	sbfx	r4, r1, #8, #8
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8007eb6:	23e7      	movs	r3, #231	; 0xe7
      *(outbuffer - 1) |= 0x80;
 8007eb8:	f880 2236 	strb.w	r2, [r0, #566]	; 0x236
    message_out[0] = 0xff;
 8007ebc:	4a21      	ldr	r2, [pc, #132]	; (8007f44 <gyro_handler+0x1c8>)
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8007ebe:	f880 421e 	strb.w	r4, [r0, #542]	; 0x21e
    message_out[0] = 0xff;
 8007ec2:	f8c0 2218 	str.w	r2, [r0, #536]	; 0x218
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8007ec6:	f880 321c 	strb.w	r3, [r0, #540]	; 0x21c
    *(outbuffer++) = 0;
 8007eca:	f880 522f 	strb.w	r5, [r0, #559]	; 0x22f
    *(outbuffer++) = 0;
 8007ece:	f880 5230 	strb.w	r5, [r0, #560]	; 0x230
    *(outbuffer++) = 0;
 8007ed2:	f880 5231 	strb.w	r5, [r0, #561]	; 0x231
    *(outbuffer++) = (sig << 5) & 0xff;
 8007ed6:	f880 6232 	strb.w	r6, [r0, #562]	; 0x232
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8007eda:	f880 121d 	strb.w	r1, [r0, #541]	; 0x21d
 8007ede:	f500 7307 	add.w	r3, r0, #540	; 0x21c
 8007ee2:	f200 2436 	addw	r4, r0, #566	; 0x236
    int chk = 0;
 8007ee6:	2200      	movs	r2, #0
      chk += message_out[i];
 8007ee8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 8007eec:	429c      	cmp	r4, r3
      chk += message_out[i];
 8007eee:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
 8007ef0:	d1fa      	bne.n	8007ee8 <gyro_handler+0x16c>
    message_out[l++] = 255 - (chk % 256);
 8007ef2:	43d2      	mvns	r2, r2
 8007ef4:	f880 2237 	strb.w	r2, [r0, #567]	; 0x237
 8007ef8:	2120      	movs	r1, #32
 8007efa:	f500 7006 	add.w	r0, r0, #536	; 0x218
}
 8007efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f02:	f7fe bc6f 	b.w	80067e4 <CDC_Transmit_FS>
      exp += 1023 - 127;
 8007f06:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8007f0a:	0115      	lsls	r5, r2, #4
 8007f0c:	b26d      	sxtb	r5, r5
 8007f0e:	0912      	lsrs	r2, r2, #4
 8007f10:	e764      	b.n	8007ddc <gyro_handler+0x60>
    if (exp != 0)
 8007f12:	4614      	mov	r4, r2
 8007f14:	e7b8      	b.n	8007e88 <gyro_handler+0x10c>
 8007f16:	4615      	mov	r5, r2
 8007f18:	e78b      	b.n	8007e32 <gyro_handler+0xb6>
 8007f1a:	4622      	mov	r2, r4
 8007f1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f20:	4718      	bx	r3
 8007f22:	bf00      	nop
 8007f24:	20004554 	.word	0x20004554
 8007f28:	20004bcc 	.word	0x20004bcc
 8007f2c:	200050ac 	.word	0x200050ac
 8007f30:	20004c00 	.word	0x20004c00
 8007f34:	20004244 	.word	0x20004244
 8007f38:	200041fc 	.word	0x200041fc
 8007f3c:	20004230 	.word	0x20004230
 8007f40:	080074c5 	.word	0x080074c5
 8007f44:	0018feff 	.word	0x0018feff

08007f48 <accel_handler>:

extern "C" void accel_handler(void)
{
 8007f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return configured_;
 8007f4c:	4b68      	ldr	r3, [pc, #416]	; (80080f0 <accel_handler+0x1a8>)
    	accel_msg.x = accelX;
 8007f4e:	4869      	ldr	r0, [pc, #420]	; (80080f4 <accel_handler+0x1ac>)
    	accel_msg.y = accelY;
 8007f50:	4969      	ldr	r1, [pc, #420]	; (80080f8 <accel_handler+0x1b0>)
    	accel_msg.z = accelZ;
 8007f52:	4a6a      	ldr	r2, [pc, #424]	; (80080fc <accel_handler+0x1b4>)
    	accel_msg.x = accelX;
 8007f54:	4c6a      	ldr	r4, [pc, #424]	; (8008100 <accel_handler+0x1b8>)
    	if (nh.connected()) {
 8007f56:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
    	accel_msg.x = accelX;
 8007f5a:	6800      	ldr	r0, [r0, #0]
    	accel_msg.y = accelY;
 8007f5c:	6809      	ldr	r1, [r1, #0]
    	accel_msg.z = accelZ;
 8007f5e:	6812      	ldr	r2, [r2, #0]
    	accel_msg.x = accelX;
 8007f60:	6060      	str	r0, [r4, #4]
    	accel_msg.y = accelY;
 8007f62:	60a1      	str	r1, [r4, #8]
    	accel_msg.z = accelZ;
 8007f64:	60e2      	str	r2, [r4, #12]
    	if (nh.connected()) {
 8007f66:	b90b      	cbnz	r3, 8007f6c <accel_handler+0x24>
    		if (NBT_handler(&accel_nbt))
    		{
    			accel.publish(&accel_msg);
    		}
    	}
}
 8007f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    		if (NBT_handler(&accel_nbt))
 8007f6c:	4865      	ldr	r0, [pc, #404]	; (8008104 <accel_handler+0x1bc>)
 8007f6e:	f001 fb09 	bl	8009584 <_Z11NBT_handlerP5nbt_t>
 8007f72:	2800      	cmp	r0, #0
 8007f74:	d0f8      	beq.n	8007f68 <accel_handler+0x20>
    			accel.publish(&accel_msg);
 8007f76:	4b64      	ldr	r3, [pc, #400]	; (8008108 <accel_handler+0x1c0>)
 8007f78:	4a64      	ldr	r2, [pc, #400]	; (800810c <accel_handler+0x1c4>)
 8007f7a:	e9d3 1002 	ldrd	r1, r0, [r3, #8]
 8007f7e:	6803      	ldr	r3, [r0, #0]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4293      	cmp	r3, r2
 8007f84:	f040 80af 	bne.w	80080e6 <accel_handler+0x19e>
    if (id >= 100 && !configured_)
 8007f88:	2963      	cmp	r1, #99	; 0x63
 8007f8a:	dd03      	ble.n	8007f94 <accel_handler+0x4c>
 8007f8c:	f890 34f4 	ldrb.w	r3, [r0, #1268]	; 0x4f4
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d0e9      	beq.n	8007f68 <accel_handler+0x20>
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 8007f94:	edd4 7a01 	vldr	s15, [r4, #4]
    int32_t exp = ((*val >> 23) & 255);
 8007f98:	ee17 3a90 	vmov	r3, s15
 8007f9c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    if (exp != 0)
 8007fa0:	2a00      	cmp	r2, #0
 8007fa2:	f040 8096 	bne.w	80080d2 <accel_handler+0x18a>
 8007fa6:	4615      	mov	r5, r2
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007fa8:	f3c3 46c3 	ubfx	r6, r3, #19, #4
 8007fac:	4335      	orrs	r5, r6
    if (f < 0)
 8007fae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 8007fb2:	edd4 7a02 	vldr	s15, [r4, #8]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007fb6:	f880 5225 	strb.w	r5, [r0, #549]	; 0x225
    *(outbuffer++) = (sig << 5) & 0xff;
 8007fba:	015f      	lsls	r7, r3, #5
    *(outbuffer++) = (sig >> 3) & 0xff;
 8007fbc:	10dd      	asrs	r5, r3, #3
    *(outbuffer++) = (sig >> 11) & 0xff;
 8007fbe:	12db      	asrs	r3, r3, #11
 8007fc0:	f880 3224 	strb.w	r3, [r0, #548]	; 0x224
    if (f < 0)
 8007fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    int32_t exp = ((*val >> 23) & 255);
 8007fc8:	ee17 3a90 	vmov	r3, s15
      *(outbuffer - 1) |= 0x80;
 8007fcc:	bf48      	it	mi
 8007fce:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = 0;
 8007fd2:	2600      	movs	r6, #0
      *(outbuffer - 1) |= 0x80;
 8007fd4:	f880 2226 	strb.w	r2, [r0, #550]	; 0x226
    int32_t exp = ((*val >> 23) & 255);
 8007fd8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    *(outbuffer++) = 0;
 8007fdc:	f880 621f 	strb.w	r6, [r0, #543]	; 0x21f
    *(outbuffer++) = 0;
 8007fe0:	f880 6220 	strb.w	r6, [r0, #544]	; 0x220
    *(outbuffer++) = 0;
 8007fe4:	f880 6221 	strb.w	r6, [r0, #545]	; 0x221
    *(outbuffer++) = (sig << 5) & 0xff;
 8007fe8:	f880 7222 	strb.w	r7, [r0, #546]	; 0x222
    *(outbuffer++) = (sig >> 3) & 0xff;
 8007fec:	f880 5223 	strb.w	r5, [r0, #547]	; 0x223
    if (exp != 0)
 8007ff0:	2a00      	cmp	r2, #0
 8007ff2:	d076      	beq.n	80080e2 <accel_handler+0x19a>
      exp += 1023 - 127;
 8007ff4:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8007ff8:	0115      	lsls	r5, r2, #4
 8007ffa:	b26d      	sxtb	r5, r5
 8007ffc:	0912      	lsrs	r2, r2, #4
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007ffe:	f3c3 46c3 	ubfx	r6, r3, #19, #4
 8008002:	4335      	orrs	r5, r6
    if (f < 0)
 8008004:	eef5 7ac0 	vcmpe.f32	s15, #0.0
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 8008008:	edd4 7a03 	vldr	s15, [r4, #12]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800800c:	f880 522d 	strb.w	r5, [r0, #557]	; 0x22d
    *(outbuffer++) = (sig << 5) & 0xff;
 8008010:	015f      	lsls	r7, r3, #5
    *(outbuffer++) = (sig >> 3) & 0xff;
 8008012:	10dd      	asrs	r5, r3, #3
    *(outbuffer++) = (sig >> 11) & 0xff;
 8008014:	12db      	asrs	r3, r3, #11
 8008016:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
    if (f < 0)
 800801a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    int32_t exp = ((*val >> 23) & 255);
 800801e:	ee17 3a90 	vmov	r3, s15
      *(outbuffer - 1) |= 0x80;
 8008022:	bf48      	it	mi
 8008024:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = 0;
 8008028:	2600      	movs	r6, #0
      *(outbuffer - 1) |= 0x80;
 800802a:	f880 222e 	strb.w	r2, [r0, #558]	; 0x22e
    int32_t exp = ((*val >> 23) & 255);
 800802e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    *(outbuffer++) = 0;
 8008032:	f880 6227 	strb.w	r6, [r0, #551]	; 0x227
    *(outbuffer++) = 0;
 8008036:	f880 6228 	strb.w	r6, [r0, #552]	; 0x228
    *(outbuffer++) = 0;
 800803a:	f880 6229 	strb.w	r6, [r0, #553]	; 0x229
    *(outbuffer++) = (sig << 5) & 0xff;
 800803e:	f880 722a 	strb.w	r7, [r0, #554]	; 0x22a
    *(outbuffer++) = (sig >> 3) & 0xff;
 8008042:	f880 522b 	strb.w	r5, [r0, #555]	; 0x22b
    if (exp != 0)
 8008046:	2a00      	cmp	r2, #0
 8008048:	d049      	beq.n	80080de <accel_handler+0x196>
      exp += 1023 - 127;
 800804a:	f502 7260 	add.w	r2, r2, #896	; 0x380
 800804e:	0114      	lsls	r4, r2, #4
 8008050:	b264      	sxtb	r4, r4
 8008052:	0912      	lsrs	r2, r2, #4
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008054:	f3c3 45c3 	ubfx	r5, r3, #19, #4
    if (f < 0)
 8008058:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800805c:	432c      	orrs	r4, r5
    if (f < 0)
 800805e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    *(outbuffer++) = (sig << 5) & 0xff;
 8008062:	ea4f 1643 	mov.w	r6, r3, lsl #5
      *(outbuffer - 1) |= 0x80;
 8008066:	bf48      	it	mi
 8008068:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800806c:	f880 4235 	strb.w	r4, [r0, #565]	; 0x235
    *(outbuffer++) = (sig >> 3) & 0xff;
 8008070:	10dc      	asrs	r4, r3, #3
    *(outbuffer++) = (sig >> 11) & 0xff;
 8008072:	12db      	asrs	r3, r3, #11
    *(outbuffer++) = 0;
 8008074:	2500      	movs	r5, #0
    *(outbuffer++) = (sig >> 3) & 0xff;
 8008076:	f880 4233 	strb.w	r4, [r0, #563]	; 0x233
    *(outbuffer++) = (sig >> 11) & 0xff;
 800807a:	f880 3234 	strb.w	r3, [r0, #564]	; 0x234
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800807e:	f341 2407 	sbfx	r4, r1, #8, #8
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8008082:	23e7      	movs	r3, #231	; 0xe7
      *(outbuffer - 1) |= 0x80;
 8008084:	f880 2236 	strb.w	r2, [r0, #566]	; 0x236
    message_out[0] = 0xff;
 8008088:	4a21      	ldr	r2, [pc, #132]	; (8008110 <accel_handler+0x1c8>)
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800808a:	f880 421e 	strb.w	r4, [r0, #542]	; 0x21e
    message_out[0] = 0xff;
 800808e:	f8c0 2218 	str.w	r2, [r0, #536]	; 0x218
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8008092:	f880 321c 	strb.w	r3, [r0, #540]	; 0x21c
    *(outbuffer++) = 0;
 8008096:	f880 522f 	strb.w	r5, [r0, #559]	; 0x22f
    *(outbuffer++) = 0;
 800809a:	f880 5230 	strb.w	r5, [r0, #560]	; 0x230
    *(outbuffer++) = 0;
 800809e:	f880 5231 	strb.w	r5, [r0, #561]	; 0x231
    *(outbuffer++) = (sig << 5) & 0xff;
 80080a2:	f880 6232 	strb.w	r6, [r0, #562]	; 0x232
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80080a6:	f880 121d 	strb.w	r1, [r0, #541]	; 0x21d
 80080aa:	f500 7307 	add.w	r3, r0, #540	; 0x21c
 80080ae:	f200 2436 	addw	r4, r0, #566	; 0x236
    int chk = 0;
 80080b2:	2200      	movs	r2, #0
      chk += message_out[i];
 80080b4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 80080b8:	429c      	cmp	r4, r3
      chk += message_out[i];
 80080ba:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
 80080bc:	d1fa      	bne.n	80080b4 <accel_handler+0x16c>
    message_out[l++] = 255 - (chk % 256);
 80080be:	43d2      	mvns	r2, r2
 80080c0:	f880 2237 	strb.w	r2, [r0, #567]	; 0x237
 80080c4:	2120      	movs	r1, #32
 80080c6:	f500 7006 	add.w	r0, r0, #536	; 0x218
}
 80080ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080ce:	f7fe bb89 	b.w	80067e4 <CDC_Transmit_FS>
      exp += 1023 - 127;
 80080d2:	f502 7260 	add.w	r2, r2, #896	; 0x380
 80080d6:	0115      	lsls	r5, r2, #4
 80080d8:	b26d      	sxtb	r5, r5
 80080da:	0912      	lsrs	r2, r2, #4
 80080dc:	e764      	b.n	8007fa8 <accel_handler+0x60>
    if (exp != 0)
 80080de:	4614      	mov	r4, r2
 80080e0:	e7b8      	b.n	8008054 <accel_handler+0x10c>
 80080e2:	4615      	mov	r5, r2
 80080e4:	e78b      	b.n	8007ffe <accel_handler+0xb6>
 80080e6:	4622      	mov	r2, r4
 80080e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080ec:	4718      	bx	r3
 80080ee:	bf00      	nop
 80080f0:	20004554 	.word	0x20004554
 80080f4:	20004b70 	.word	0x20004b70
 80080f8:	20004b64 	.word	0x20004b64
 80080fc:	20005070 	.word	0x20005070
 8008100:	20004220 	.word	0x20004220
 8008104:	20004204 	.word	0x20004204
 8008108:	2000420c 	.word	0x2000420c
 800810c:	080074c5 	.word	0x080074c5
 8008110:	0018feff 	.word	0x0018feff

08008114 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8008114:	b530      	push	{r4, r5, lr}
    publish(TopicInfo::ID_TIME, &t);
 8008116:	6801      	ldr	r1, [r0, #0]
 8008118:	4a17      	ldr	r2, [pc, #92]	; (8008178 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv+0x64>)
 800811a:	680d      	ldr	r5, [r1, #0]
      data()
 800811c:	4b17      	ldr	r3, [pc, #92]	; (800817c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv+0x68>)
  void requestSyncTime()
 800811e:	b085      	sub	sp, #20
 8008120:	4295      	cmp	r5, r2
 8008122:	9301      	str	r3, [sp, #4]
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8008124:	f04f 0300 	mov.w	r3, #0
 8008128:	4604      	mov	r4, r0
 800812a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800812e:	d11a      	bne.n	8008166 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv+0x52>
    message_out[l++] = 255 - (chk % 256);
 8008130:	f06f 020a 	mvn.w	r2, #10
    message_out[0] = 0xff;
 8008134:	4812      	ldr	r0, [pc, #72]	; (8008180 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv+0x6c>)
 8008136:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
 800813a:	f640 21f7 	movw	r1, #2807	; 0xaf7
 800813e:	f8a4 3224 	strh.w	r3, [r4, #548]	; 0x224
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8008142:	f884 3226 	strb.w	r3, [r4, #550]	; 0x226
 8008146:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
 800814a:	f8c4 121c 	str.w	r1, [r4, #540]	; 0x21c
    message_out[l++] = 255 - (chk % 256);
 800814e:	f884 2227 	strb.w	r2, [r4, #551]	; 0x227
 8008152:	2110      	movs	r1, #16
 8008154:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8008158:	f7fe fb44 	bl	80067e4 <CDC_Transmit_FS>
	}

	// Returns milliseconds since start of program
	unsigned long time(void)
	{
		return HAL_GetTick();
 800815c:	f7f8 f9e6 	bl	800052c <HAL_GetTick>
    rt_time = hardware_.time();
 8008160:	60a0      	str	r0, [r4, #8]
  }
 8008162:	b005      	add	sp, #20
 8008164:	bd30      	pop	{r4, r5, pc}
    publish(TopicInfo::ID_TIME, &t);
 8008166:	aa01      	add	r2, sp, #4
 8008168:	210a      	movs	r1, #10
 800816a:	47a8      	blx	r5
 800816c:	f7f8 f9de 	bl	800052c <HAL_GetTick>
    rt_time = hardware_.time();
 8008170:	60a0      	str	r0, [r4, #8]
  }
 8008172:	b005      	add	sp, #20
 8008174:	bd30      	pop	{r4, r5, pc}
 8008176:	bf00      	nop
 8008178:	080074c5 	.word	0x080074c5
 800817c:	08009a90 	.word	0x08009a90
 8008180:	0008feff 	.word	0x0008feff

08008184 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
  void negotiateTopics()
 8008184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      buffer_size(0)
 8008188:	4bd5      	ldr	r3, [pc, #852]	; (80084e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x35c>)
 800818a:	4ad6      	ldr	r2, [pc, #856]	; (80084e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x360>)
 800818c:	b08d      	sub	sp, #52	; 0x34
 800818e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8008192:	9206      	str	r2, [sp, #24]
 8008194:	2200      	movs	r2, #0
 8008196:	4604      	mov	r4, r0
 8008198:	f200 4914 	addw	r9, r0, #1044	; 0x414
 800819c:	f500 688f 	add.w	r8, r0, #1144	; 0x478
 80081a0:	f8ad 201c 	strh.w	r2, [sp, #28]
 80081a4:	920b      	str	r2, [sp, #44]	; 0x2c
 80081a6:	930a      	str	r3, [sp, #40]	; 0x28
      if (publishers[i] != 0) // non-empty slot
 80081a8:	f859 3f04 	ldr.w	r3, [r9, #4]!
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 80ae 	beq.w	800830e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18a>
        ti.topic_id = publishers[i]->id_;
 80081b2:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80081b6:	6805      	ldr	r5, [r0, #0]
        ti.topic_name = (char *) publishers[i]->topic_;
 80081b8:	681a      	ldr	r2, [r3, #0]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80081ba:	68ab      	ldr	r3, [r5, #8]
        ti.topic_id = publishers[i]->id_;
 80081bc:	f8ad 101c 	strh.w	r1, [sp, #28]
        ti.topic_name = (char *) publishers[i]->topic_;
 80081c0:	9208      	str	r2, [sp, #32]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80081c2:	4798      	blx	r3
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80081c4:	f8d9 3000 	ldr.w	r3, [r9]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80081c8:	9009      	str	r0, [sp, #36]	; 0x24
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80081ca:	6858      	ldr	r0, [r3, #4]
 80081cc:	6803      	ldr	r3, [r0, #0]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	4798      	blx	r3
        publish(publishers[i]->getEndpointType(), &ti);
 80081d2:	6823      	ldr	r3, [r4, #0]
 80081d4:	f8d9 1000 	ldr.w	r1, [r9]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f8d1 a010 	ldr.w	sl, [r1, #16]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80081de:	900a      	str	r0, [sp, #40]	; 0x28
        ti.buffer_size = OUTPUT_SIZE;
 80081e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081e4:	920b      	str	r2, [sp, #44]	; 0x2c
 80081e6:	4ac0      	ldr	r2, [pc, #768]	; (80084e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x364>)
 80081e8:	4293      	cmp	r3, r2
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80081ea:	4683      	mov	fp, r0
 80081ec:	f040 8165 	bne.w	80084ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x336>
    if (id >= 100 && !configured_)
 80081f0:	f1ba 0f63 	cmp.w	sl, #99	; 0x63
 80081f4:	dd04      	ble.n	8008200 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x7c>
 80081f6:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 8084 	beq.w	8008308 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x184>
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8008200:	f8bd 301c 	ldrh.w	r3, [sp, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8008204:	9e08      	ldr	r6, [sp, #32]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8008206:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800820a:	0a1b      	lsrs	r3, r3, #8
 800820c:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
      uint32_t length_topic_name = strlen(this->topic_name);
 8008210:	4630      	mov	r0, r6
 8008212:	f7f7 ffdd 	bl	80001d0 <strlen>
 8008216:	4605      	mov	r5, r0
      arr[i] = (var >> (8 * i));
 8008218:	0e2b      	lsrs	r3, r5, #24
 800821a:	0c2a      	lsrs	r2, r5, #16
 800821c:	0a00      	lsrs	r0, r0, #8
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800821e:	4631      	mov	r1, r6
 8008220:	f884 3224 	strb.w	r3, [r4, #548]	; 0x224
 8008224:	f884 5221 	strb.w	r5, [r4, #545]	; 0x221
 8008228:	f884 0222 	strb.w	r0, [r4, #546]	; 0x222
 800822c:	f884 2223 	strb.w	r2, [r4, #547]	; 0x223
 8008230:	f204 2025 	addw	r0, r4, #549	; 0x225
 8008234:	462a      	mov	r2, r5
 8008236:	f001 fa79 	bl	800972c <memcpy>
      uint32_t length_message_type = strlen(this->message_type);
 800823a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800823c:	4638      	mov	r0, r7
 800823e:	f7f7 ffc7 	bl	80001d0 <strlen>
    int l = msg->serialize(message_out + 7);
 8008242:	f204 261f 	addw	r6, r4, #543	; 0x21f
 8008246:	1973      	adds	r3, r6, r5
      offset += length_topic_name;
 8008248:	f105 0c06 	add.w	ip, r5, #6
      uint32_t length_message_type = strlen(this->message_type);
 800824c:	4602      	mov	r2, r0
 800824e:	0a00      	lsrs	r0, r0, #8
 8008250:	f806 200c 	strb.w	r2, [r6, ip]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8008254:	4639      	mov	r1, r7
 8008256:	71d8      	strb	r0, [r3, #7]
 8008258:	0c17      	lsrs	r7, r2, #16
 800825a:	0e10      	lsrs	r0, r2, #24
      offset += 4;
 800825c:	350a      	adds	r5, #10
 800825e:	721f      	strb	r7, [r3, #8]
 8008260:	7258      	strb	r0, [r3, #9]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8008262:	1970      	adds	r0, r6, r5
      offset += length_message_type;
 8008264:	4415      	add	r5, r2
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8008266:	f001 fa61 	bl	800972c <memcpy>
      uint32_t length_md5sum = strlen(this->md5sum);
 800826a:	4658      	mov	r0, fp
 800826c:	f7f7 ffb0 	bl	80001d0 <strlen>
 8008270:	1972      	adds	r2, r6, r5
 8008272:	5570      	strb	r0, [r6, r5]
      offset += 4;
 8008274:	1d2b      	adds	r3, r5, #4
 8008276:	ea4f 4c10 	mov.w	ip, r0, lsr #16
      uint32_t length_md5sum = strlen(this->md5sum);
 800827a:	4607      	mov	r7, r0
 800827c:	ea4f 2e10 	mov.w	lr, r0, lsr #8
 8008280:	0e00      	lsrs	r0, r0, #24
 8008282:	f882 c002 	strb.w	ip, [r2, #2]
 8008286:	70d0      	strb	r0, [r2, #3]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8008288:	4659      	mov	r1, fp
 800828a:	f882 e001 	strb.w	lr, [r2, #1]
 800828e:	18f0      	adds	r0, r6, r3
 8008290:	463a      	mov	r2, r7
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	f001 fa4a 	bl	800972c <memcpy>
      offset += length_md5sum;
 8008298:	9b00      	ldr	r3, [sp, #0]
 800829a:	441f      	add	r7, r3
      offset += sizeof(this->buffer_size);
 800829c:	1d39      	adds	r1, r7, #4
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800829e:	b2c8      	uxtb	r0, r1
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80082a0:	f3c1 2307 	ubfx	r3, r1, #8, #8
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80082a4:	18c2      	adds	r2, r0, r3
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80082a6:	f44f 7500 	mov.w	r5, #512	; 0x200
 80082aa:	43d2      	mvns	r2, r2
 80082ac:	51f5      	str	r5, [r6, r7]
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80082ae:	f34a 2c07 	sbfx	ip, sl, #8, #8
    message_out[0] = 0xff;
 80082b2:	f64f 65ff 	movw	r5, #65279	; 0xfeff
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80082b6:	f884 221c 	strb.w	r2, [r4, #540]	; 0x21c
    for (int i = 5; i < l + 7; i++)
 80082ba:	1c4a      	adds	r2, r1, #1
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80082bc:	f884 a21d 	strb.w	sl, [r4, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80082c0:	f884 c21e 	strb.w	ip, [r4, #542]	; 0x21e
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80082c4:	f884 021a 	strb.w	r0, [r4, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80082c8:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
    message_out[0] = 0xff;
 80082cc:	f8a4 5218 	strh.w	r5, [r4, #536]	; 0x218
    for (int i = 5; i < l + 7; i++)
 80082d0:	f2c0 811e 	blt.w	8008510 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x38c>
 80082d4:	f204 2522 	addw	r5, r4, #546	; 0x222
 80082d8:	443d      	add	r5, r7
 80082da:	f504 7307 	add.w	r3, r4, #540	; 0x21c
    int chk = 0;
 80082de:	2200      	movs	r2, #0
      chk += message_out[i];
 80082e0:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 80082e4:	429d      	cmp	r5, r3
      chk += message_out[i];
 80082e6:	4402      	add	r2, r0
    for (int i = 5; i < l + 7; i++)
 80082e8:	d1fa      	bne.n	80082e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x15c>
 80082ea:	43d2      	mvns	r2, r2
 80082ec:	b2d2      	uxtb	r2, r2
    message_out[l++] = 255 - (chk % 256);
 80082ee:	1863      	adds	r3, r4, r1
 80082f0:	3108      	adds	r1, #8
    if (l <= OUTPUT_SIZE)
 80082f2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    message_out[l++] = 255 - (chk % 256);
 80082f6:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
    if (l <= OUTPUT_SIZE)
 80082fa:	f300 810b 	bgt.w	8008514 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x390>
		CDC_Transmit_FS(data, length);
 80082fe:	b289      	uxth	r1, r1
 8008300:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8008304:	f7fe fa6e 	bl	80067e4 <CDC_Transmit_FS>
        HAL_Delay(10);
 8008308:	200a      	movs	r0, #10
 800830a:	f7f8 f915 	bl	8000538 <HAL_Delay>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800830e:	45c8      	cmp	r8, r9
 8008310:	f47f af4a 	bne.w	80081a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x24>
 8008314:	f204 43dc 	addw	r3, r4, #1244	; 0x4dc
 8008318:	9300      	str	r3, [sp, #0]
      if (subscribers[i] != 0) // non-empty slot
 800831a:	f858 0f04 	ldr.w	r0, [r8, #4]!
 800831e:	2800      	cmp	r0, #0
 8008320:	f000 80c1 	beq.w	80084a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x322>
        ti.topic_id = subscribers[i]->id_;
 8008324:	e9d0 3500 	ldrd	r3, r5, [r0]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8008328:	6881      	ldr	r1, [r0, #8]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800832a:	689a      	ldr	r2, [r3, #8]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800832c:	9108      	str	r1, [sp, #32]
 800832e:	496f      	ldr	r1, [pc, #444]	; (80084ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x368>)
        ti.topic_id = subscribers[i]->id_;
 8008330:	f8ad 501c 	strh.w	r5, [sp, #28]
 8008334:	428a      	cmp	r2, r1
 8008336:	f040 80e3 	bne.w	8008500 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x37c>
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800833a:	496d      	ldr	r1, [pc, #436]	; (80084f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x36c>)
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800833c:	68da      	ldr	r2, [r3, #12]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800833e:	9109      	str	r1, [sp, #36]	; 0x24
 8008340:	496c      	ldr	r1, [pc, #432]	; (80084f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x370>)
 8008342:	428a      	cmp	r2, r1
 8008344:	f040 80c6 	bne.w	80084d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x350>
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8008348:	496b      	ldr	r1, [pc, #428]	; (80084f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x374>)
        publish(subscribers[i]->getEndpointType(), &ti);
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	4a6b      	ldr	r2, [pc, #428]	; (80084fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x378>)
 800834e:	6825      	ldr	r5, [r4, #0]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8008350:	910a      	str	r1, [sp, #40]	; 0x28
 8008352:	4293      	cmp	r3, r2
        ti.buffer_size = INPUT_SIZE;
 8008354:	f44f 7100 	mov.w	r1, #512	; 0x200
        publish(subscribers[i]->getEndpointType(), &ti);
 8008358:	682d      	ldr	r5, [r5, #0]
        ti.buffer_size = INPUT_SIZE;
 800835a:	910b      	str	r1, [sp, #44]	; 0x2c
 800835c:	f040 80b7 	bne.w	80084ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x34a>
    return endpoint_;
 8008360:	f8d0 a018 	ldr.w	sl, [r0, #24]
 8008364:	f8df b180 	ldr.w	fp, [pc, #384]	; 80084e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x364>
 8008368:	455d      	cmp	r5, fp
 800836a:	f040 80ab 	bne.w	80084c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x340>
    if (id >= 100 && !configured_)
 800836e:	f1ba 0f63 	cmp.w	sl, #99	; 0x63
 8008372:	dd04      	ble.n	800837e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1fa>
 8008374:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 8008378:	2b00      	cmp	r3, #0
 800837a:	f000 8091 	beq.w	80084a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x31c>
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800837e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8008382:	9d08      	ldr	r5, [sp, #32]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8008384:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8008388:	0a1b      	lsrs	r3, r3, #8
 800838a:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
      uint32_t length_topic_name = strlen(this->topic_name);
 800838e:	4628      	mov	r0, r5
 8008390:	f7f7 ff1e 	bl	80001d0 <strlen>
 8008394:	4607      	mov	r7, r0
 8008396:	0e3b      	lsrs	r3, r7, #24
 8008398:	0c3a      	lsrs	r2, r7, #16
 800839a:	0a00      	lsrs	r0, r0, #8
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800839c:	4629      	mov	r1, r5
 800839e:	f884 3224 	strb.w	r3, [r4, #548]	; 0x224
 80083a2:	f884 7221 	strb.w	r7, [r4, #545]	; 0x221
 80083a6:	f884 0222 	strb.w	r0, [r4, #546]	; 0x222
 80083aa:	f884 2223 	strb.w	r2, [r4, #547]	; 0x223
 80083ae:	f204 2025 	addw	r0, r4, #549	; 0x225
 80083b2:	463a      	mov	r2, r7
 80083b4:	f001 f9ba 	bl	800972c <memcpy>
      uint32_t length_message_type = strlen(this->message_type);
 80083b8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80083bc:	4648      	mov	r0, r9
 80083be:	f7f7 ff07 	bl	80001d0 <strlen>
    int l = msg->serialize(message_out + 7);
 80083c2:	f204 251f 	addw	r5, r4, #543	; 0x21f
 80083c6:	19eb      	adds	r3, r5, r7
 80083c8:	4606      	mov	r6, r0
      offset += length_topic_name;
 80083ca:	f107 0c06 	add.w	ip, r7, #6
 80083ce:	ea4f 2e10 	mov.w	lr, r0, lsr #8
      offset += 4;
 80083d2:	370a      	adds	r7, #10
 80083d4:	0e32      	lsrs	r2, r6, #24
 80083d6:	0c00      	lsrs	r0, r0, #16
 80083d8:	f805 600c 	strb.w	r6, [r5, ip]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80083dc:	4649      	mov	r1, r9
 80083de:	f883 e007 	strb.w	lr, [r3, #7]
 80083e2:	7218      	strb	r0, [r3, #8]
 80083e4:	725a      	strb	r2, [r3, #9]
 80083e6:	19e8      	adds	r0, r5, r7
 80083e8:	4632      	mov	r2, r6
 80083ea:	f001 f99f 	bl	800972c <memcpy>
      uint32_t length_md5sum = strlen(this->md5sum);
 80083ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80083f0:	9101      	str	r1, [sp, #4]
 80083f2:	4608      	mov	r0, r1
 80083f4:	f7f7 feec 	bl	80001d0 <strlen>
      offset += length_message_type;
 80083f8:	443e      	add	r6, r7
 80083fa:	19ab      	adds	r3, r5, r6
      uint32_t length_md5sum = strlen(this->md5sum);
 80083fc:	4681      	mov	r9, r0
 80083fe:	ea4f 2c10 	mov.w	ip, r0, lsr #8
      offset += 4;
 8008402:	1d37      	adds	r7, r6, #4
 8008404:	0c00      	lsrs	r0, r0, #16
 8008406:	ea4f 6219 	mov.w	r2, r9, lsr #24
 800840a:	f805 9006 	strb.w	r9, [r5, r6]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800840e:	9901      	ldr	r1, [sp, #4]
 8008410:	f883 c001 	strb.w	ip, [r3, #1]
 8008414:	7098      	strb	r0, [r3, #2]
 8008416:	70da      	strb	r2, [r3, #3]
 8008418:	19e8      	adds	r0, r5, r7
 800841a:	464a      	mov	r2, r9
      offset += length_md5sum;
 800841c:	444f      	add	r7, r9
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800841e:	f001 f985 	bl	800972c <memcpy>
      u_buffer_size.real = this->buffer_size;
 8008422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8008424:	55eb      	strb	r3, [r5, r7]
      offset += sizeof(this->buffer_size);
 8008426:	1d39      	adds	r1, r7, #4
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8008428:	443d      	add	r5, r7
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800842a:	b2ce      	uxtb	r6, r1
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800842c:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8008430:	ea4f 2e13 	mov.w	lr, r3, lsr #8
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8008434:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8008438:	1832      	adds	r2, r6, r0
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800843a:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800843c:	f885 e001 	strb.w	lr, [r5, #1]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8008440:	f885 c002 	strb.w	ip, [r5, #2]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8008444:	70eb      	strb	r3, [r5, #3]
 8008446:	43d2      	mvns	r2, r2
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8008448:	f34a 2e07 	sbfx	lr, sl, #8, #8
    message_out[0] = 0xff;
 800844c:	f64f 6cff 	movw	ip, #65279	; 0xfeff
    for (int i = 5; i < l + 7; i++)
 8008450:	1c4b      	adds	r3, r1, #1
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8008452:	f884 221c 	strb.w	r2, [r4, #540]	; 0x21c
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8008456:	f884 621a 	strb.w	r6, [r4, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800845a:	f884 021b 	strb.w	r0, [r4, #539]	; 0x21b
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800845e:	f884 a21d 	strb.w	sl, [r4, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8008462:	f884 e21e 	strb.w	lr, [r4, #542]	; 0x21e
    message_out[0] = 0xff;
 8008466:	f8a4 c218 	strh.w	ip, [r4, #536]	; 0x218
    for (int i = 5; i < l + 7; i++)
 800846a:	db4f      	blt.n	800850c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x388>
 800846c:	f204 2322 	addw	r3, r4, #546	; 0x222
 8008470:	441f      	add	r7, r3
    int chk = 0;
 8008472:	2200      	movs	r2, #0
 8008474:	f504 7307 	add.w	r3, r4, #540	; 0x21c
      chk += message_out[i];
 8008478:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 800847c:	429f      	cmp	r7, r3
      chk += message_out[i];
 800847e:	4402      	add	r2, r0
    for (int i = 5; i < l + 7; i++)
 8008480:	d1fa      	bne.n	8008478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x2f4>
 8008482:	43d2      	mvns	r2, r2
 8008484:	b2d2      	uxtb	r2, r2
    message_out[l++] = 255 - (chk % 256);
 8008486:	1863      	adds	r3, r4, r1
 8008488:	3108      	adds	r1, #8
    if (l <= OUTPUT_SIZE)
 800848a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    message_out[l++] = 255 - (chk % 256);
 800848e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
    if (l <= OUTPUT_SIZE)
 8008492:	f300 8081 	bgt.w	8008598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x414>
 8008496:	b289      	uxth	r1, r1
 8008498:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800849c:	f7fe f9a2 	bl	80067e4 <CDC_Transmit_FS>
        HAL_Delay(10);
 80084a0:	200a      	movs	r0, #10
 80084a2:	f7f8 f849 	bl	8000538 <HAL_Delay>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80084a6:	9b00      	ldr	r3, [sp, #0]
 80084a8:	4598      	cmp	r8, r3
 80084aa:	f47f af36 	bne.w	800831a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x196>
    configured_ = true;
 80084ae:	2301      	movs	r3, #1
 80084b0:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
  }
 80084b4:	b00d      	add	sp, #52	; 0x34
 80084b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        publish(publishers[i]->getEndpointType(), &ti);
 80084ba:	4651      	mov	r1, sl
 80084bc:	aa06      	add	r2, sp, #24
 80084be:	4620      	mov	r0, r4
 80084c0:	4798      	blx	r3
 80084c2:	e721      	b.n	8008308 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x184>
        publish(subscribers[i]->getEndpointType(), &ti);
 80084c4:	4651      	mov	r1, sl
 80084c6:	aa06      	add	r2, sp, #24
 80084c8:	4620      	mov	r0, r4
 80084ca:	47a8      	blx	r5
 80084cc:	e7e8      	b.n	80084a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x31c>
 80084ce:	4798      	blx	r3
 80084d0:	4682      	mov	sl, r0
 80084d2:	e747      	b.n	8008364 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1e0>
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80084d4:	4790      	blx	r2
 80084d6:	4601      	mov	r1, r0
 80084d8:	f8d8 0000 	ldr.w	r0, [r8]
 80084dc:	6803      	ldr	r3, [r0, #0]
 80084de:	e734      	b.n	800834a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1c6>
 80084e0:	08009e38 	.word	0x08009e38
 80084e4:	08009aa8 	.word	0x08009aa8
 80084e8:	080074c5 	.word	0x080074c5
 80084ec:	08007065 	.word	0x08007065
 80084f0:	08009e60 	.word	0x08009e60
 80084f4:	0800706d 	.word	0x0800706d
 80084f8:	08009e3c 	.word	0x08009e3c
 80084fc:	08007061 	.word	0x08007061
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8008500:	4790      	blx	r2
 8008502:	4601      	mov	r1, r0
 8008504:	f8d8 0000 	ldr.w	r0, [r8]
 8008508:	6803      	ldr	r3, [r0, #0]
 800850a:	e717      	b.n	800833c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1b8>
    for (int i = 5; i < l + 7; i++)
 800850c:	22ff      	movs	r2, #255	; 0xff
 800850e:	e7ba      	b.n	8008486 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x302>
 8008510:	22ff      	movs	r2, #255	; 0xff
 8008512:	e6ec      	b.n	80082ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16a>
    l.level = byte;
 8008514:	2203      	movs	r2, #3
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8008516:	6823      	ldr	r3, [r4, #0]
    l.level = byte;
 8008518:	f88d 2010 	strb.w	r2, [sp, #16]
 800851c:	4a44      	ldr	r2, [pc, #272]	; (8008630 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x4ac>)
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	9203      	str	r2, [sp, #12]
 8008522:	4a44      	ldr	r2, [pc, #272]	; (8008634 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x4b0>)
    l.msg = (char*)msg;
 8008524:	4d44      	ldr	r5, [pc, #272]	; (8008638 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x4b4>)
 8008526:	9505      	str	r5, [sp, #20]
 8008528:	4293      	cmp	r3, r2
 800852a:	d17b      	bne.n	8008624 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x4a0>
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800852c:	f643 0203 	movw	r2, #14339	; 0x3803
 8008530:	2300      	movs	r3, #0
      memcpy(outbuffer + offset, this->msg, length_msg);
 8008532:	f105 0c30 	add.w	ip, r5, #48	; 0x30
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8008536:	f8c4 221f 	str.w	r2, [r4, #543]	; 0x21f
 800853a:	f884 3223 	strb.w	r3, [r4, #547]	; 0x223
      memcpy(outbuffer + offset, this->msg, length_msg);
 800853e:	f504 7709 	add.w	r7, r4, #548	; 0x224
 8008542:	462e      	mov	r6, r5
 8008544:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008546:	4566      	cmp	r6, ip
 8008548:	6038      	str	r0, [r7, #0]
 800854a:	6079      	str	r1, [r7, #4]
 800854c:	60ba      	str	r2, [r7, #8]
 800854e:	60fb      	str	r3, [r7, #12]
 8008550:	4635      	mov	r5, r6
 8008552:	f107 0710 	add.w	r7, r7, #16
 8008556:	d1f4      	bne.n	8008542 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x3be>
 8008558:	cd03      	ldmia	r5!, {r0, r1}
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800855a:	2300      	movs	r3, #0
 800855c:	6079      	str	r1, [r7, #4]
    message_out[0] = 0xff;
 800855e:	f240 75c2 	movw	r5, #1986	; 0x7c2
 8008562:	4936      	ldr	r1, [pc, #216]	; (800863c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x4b8>)
 8008564:	6038      	str	r0, [r7, #0]
    int chk = 0;
 8008566:	461a      	mov	r2, r3
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8008568:	f884 321e 	strb.w	r3, [r4, #542]	; 0x21e
    message_out[0] = 0xff;
 800856c:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
 8008570:	f8a4 521c 	strh.w	r5, [r4, #540]	; 0x21c
 8008574:	f504 7307 	add.w	r3, r4, #540	; 0x21c
 8008578:	f204 205b 	addw	r0, r4, #603	; 0x25b
      chk += message_out[i];
 800857c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 8008580:	4298      	cmp	r0, r3
      chk += message_out[i];
 8008582:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
 8008584:	d1fa      	bne.n	800857c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x3f8>
    message_out[l++] = 255 - (chk % 256);
 8008586:	43d2      	mvns	r2, r2
 8008588:	f884 225c 	strb.w	r2, [r4, #604]	; 0x25c
 800858c:	2145      	movs	r1, #69	; 0x45
 800858e:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8008592:	f7fe f927 	bl	80067e4 <CDC_Transmit_FS>
 8008596:	e6b7      	b.n	8008308 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x184>
    l.level = byte;
 8008598:	2203      	movs	r2, #3
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800859a:	6823      	ldr	r3, [r4, #0]
    l.level = byte;
 800859c:	f88d 2010 	strb.w	r2, [sp, #16]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80085a0:	681b      	ldr	r3, [r3, #0]
      msg("")
 80085a2:	4a23      	ldr	r2, [pc, #140]	; (8008630 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x4ac>)
    l.msg = (char*)msg;
 80085a4:	4d24      	ldr	r5, [pc, #144]	; (8008638 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x4b4>)
 80085a6:	9203      	str	r2, [sp, #12]
 80085a8:	455b      	cmp	r3, fp
 80085aa:	9505      	str	r5, [sp, #20]
 80085ac:	d135      	bne.n	800861a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x496>
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80085ae:	f643 0203 	movw	r2, #14339	; 0x3803
 80085b2:	2300      	movs	r3, #0
      memcpy(outbuffer + offset, this->msg, length_msg);
 80085b4:	f105 0c30 	add.w	ip, r5, #48	; 0x30
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80085b8:	f8c4 221f 	str.w	r2, [r4, #543]	; 0x21f
 80085bc:	f884 3223 	strb.w	r3, [r4, #547]	; 0x223
      memcpy(outbuffer + offset, this->msg, length_msg);
 80085c0:	f504 7709 	add.w	r7, r4, #548	; 0x224
 80085c4:	462e      	mov	r6, r5
 80085c6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80085c8:	4566      	cmp	r6, ip
 80085ca:	6038      	str	r0, [r7, #0]
 80085cc:	6079      	str	r1, [r7, #4]
 80085ce:	60ba      	str	r2, [r7, #8]
 80085d0:	60fb      	str	r3, [r7, #12]
 80085d2:	4635      	mov	r5, r6
 80085d4:	f107 0710 	add.w	r7, r7, #16
 80085d8:	d1f4      	bne.n	80085c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x440>
 80085da:	cd03      	ldmia	r5!, {r0, r1}
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80085dc:	2300      	movs	r3, #0
 80085de:	6079      	str	r1, [r7, #4]
    message_out[0] = 0xff;
 80085e0:	f240 75c2 	movw	r5, #1986	; 0x7c2
 80085e4:	4915      	ldr	r1, [pc, #84]	; (800863c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x4b8>)
 80085e6:	6038      	str	r0, [r7, #0]
    int chk = 0;
 80085e8:	461a      	mov	r2, r3
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80085ea:	f884 321e 	strb.w	r3, [r4, #542]	; 0x21e
    message_out[0] = 0xff;
 80085ee:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
 80085f2:	f8a4 521c 	strh.w	r5, [r4, #540]	; 0x21c
 80085f6:	f504 7307 	add.w	r3, r4, #540	; 0x21c
 80085fa:	f204 205b 	addw	r0, r4, #603	; 0x25b
      chk += message_out[i];
 80085fe:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 8008602:	4298      	cmp	r0, r3
      chk += message_out[i];
 8008604:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
 8008606:	d1fa      	bne.n	80085fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x47a>
    message_out[l++] = 255 - (chk % 256);
 8008608:	43d2      	mvns	r2, r2
 800860a:	f884 225c 	strb.w	r2, [r4, #604]	; 0x25c
 800860e:	2145      	movs	r1, #69	; 0x45
 8008610:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8008614:	f7fe f8e6 	bl	80067e4 <CDC_Transmit_FS>
 8008618:	e742      	b.n	80084a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x31c>
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800861a:	aa03      	add	r2, sp, #12
 800861c:	2107      	movs	r1, #7
 800861e:	4620      	mov	r0, r4
 8008620:	4798      	blx	r3
 8008622:	e73d      	b.n	80084a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x31c>
 8008624:	aa03      	add	r2, sp, #12
 8008626:	2107      	movs	r1, #7
 8008628:	4620      	mov	r0, r4
 800862a:	4798      	blx	r3
 800862c:	e66c      	b.n	8008308 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x184>
 800862e:	bf00      	nop
 8008630:	08009ac0 	.word	0x08009ac0
 8008634:	080074c5 	.word	0x080074c5
 8008638:	08009e00 	.word	0x08009e00
 800863c:	003dfeff 	.word	0x003dfeff

08008640 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8008640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008644:	4604      	mov	r4, r0
 8008646:	b08b      	sub	sp, #44	; 0x2c
		return HAL_GetTick();
 8008648:	f7f7 ff70 	bl	800052c <HAL_GetTick>
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800864c:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
 8008650:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8008654:	1ac3      	subs	r3, r0, r3
 8008656:	4293      	cmp	r3, r2
      configured_ = false;
 8008658:	bf84      	itt	hi
 800865a:	2300      	movhi	r3, #0
 800865c:	f884 34f4 	strbhi.w	r3, [r4, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8008660:	f8d4 34e0 	ldr.w	r3, [r4, #1248]	; 0x4e0
 8008664:	4607      	mov	r7, r0
 8008666:	b133      	cbz	r3, 8008676 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      if (c_time > last_msg_timeout_time)
 8008668:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
 800866c:	4283      	cmp	r3, r0
        mode_ = MODE_FIRST_FF;
 800866e:	bf3c      	itt	cc
 8008670:	2300      	movcc	r3, #0
 8008672:	f8c4 34e0 	strcc.w	r3, [r4, #1248]	; 0x4e0
		r = ringbuffer_getchar(&rb, &ch);
 8008676:	4ebf      	ldr	r6, [pc, #764]	; (8008974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x334>)
 8008678:	f8df a30c 	ldr.w	sl, [pc, #780]	; 8008988 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x348>
    t.data.sec += offset / 1000;
 800867c:	f8df b30c 	ldr.w	fp, [pc, #780]	; 800898c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x34c>
      if (spin_timeout_ > 0)
 8008680:	6963      	ldr	r3, [r4, #20]
 8008682:	b12b      	cbz	r3, 8008690 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x50>
		return HAL_GetTick();
 8008684:	f7f7 ff52 	bl	800052c <HAL_GetTick>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8008688:	6963      	ldr	r3, [r4, #20]
 800868a:	1bc0      	subs	r0, r0, r7
 800868c:	4298      	cmp	r0, r3
 800868e:	d828      	bhi.n	80086e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xa2>
		uint8_t ch = -1;
 8008690:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8008694:	23ff      	movs	r3, #255	; 0xff
 8008696:	f808 3d0c 	strb.w	r3, [r8, #-12]!
		r = ringbuffer_getchar(&rb, &ch);
 800869a:	4630      	mov	r0, r6
 800869c:	4641      	mov	r1, r8
 800869e:	f000 ffc3 	bl	8009628 <_Z18ringbuffer_getcharP10ringbufferPh>
		if (1 == r)
 80086a2:	2801      	cmp	r0, #1
 80086a4:	f040 80bc 	bne.w	8008820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e0>
      checksum_ += data;
 80086a8:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
			return ch;
 80086ac:	f89d 201c 	ldrb.w	r2, [sp, #28]
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80086b0:	f8d4 54e0 	ldr.w	r5, [r4, #1248]	; 0x4e0
      checksum_ += data;
 80086b4:	4413      	add	r3, r2
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80086b6:	2d07      	cmp	r5, #7
      checksum_ += data;
 80086b8:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80086bc:	d016      	beq.n	80086ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xac>
      else if (mode_ == MODE_FIRST_FF)
 80086be:	bb3d      	cbnz	r5, 8008710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xd0>
        if (data == 0xff)
 80086c0:	2aff      	cmp	r2, #255	; 0xff
 80086c2:	d161      	bne.n	8008788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80086c4:	f107 0314 	add.w	r3, r7, #20
 80086c8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
      if (spin_timeout_ > 0)
 80086cc:	6963      	ldr	r3, [r4, #20]
          mode_++;
 80086ce:	f8c4 04e0 	str.w	r0, [r4, #1248]	; 0x4e0
      if (spin_timeout_ > 0)
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d0dc      	beq.n	8008690 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x50>
		return HAL_GetTick();
 80086d6:	f7f7 ff29 	bl	800052c <HAL_GetTick>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80086da:	6963      	ldr	r3, [r4, #20]
 80086dc:	1bc0      	subs	r0, r0, r7
 80086de:	4298      	cmp	r0, r3
 80086e0:	d9d6      	bls.n	8008690 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x50>
          return SPIN_TIMEOUT;
 80086e2:	f06f 0001 	mvn.w	r0, #1
  }
 80086e6:	b00b      	add	sp, #44	; 0x2c
 80086e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        message_in[index_++] = data;
 80086ec:	f8d4 34ec 	ldr.w	r3, [r4, #1260]	; 0x4ec
 80086f0:	18e1      	adds	r1, r4, r3
 80086f2:	3301      	adds	r3, #1
 80086f4:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
 80086f8:	760a      	strb	r2, [r1, #24]
        bytes_--;
 80086fa:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
 80086fe:	3b01      	subs	r3, #1
 8008700:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8008704:	2b00      	cmp	r3, #0
 8008706:	d1bb      	bne.n	8008680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
          mode_ = MODE_MSG_CHECKSUM;
 8008708:	2308      	movs	r3, #8
 800870a:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 800870e:	e7b7      	b.n	8008680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
      else if (mode_ == MODE_PROTOCOL_VER)
 8008710:	2d01      	cmp	r5, #1
 8008712:	d046      	beq.n	80087a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8008714:	2d02      	cmp	r5, #2
 8008716:	d06e      	beq.n	80087f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8008718:	2d03      	cmp	r5, #3
 800871a:	d077      	beq.n	800880c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800871c:	2d04      	cmp	r5, #4
 800871e:	f000 80a2 	beq.w	8008866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x226>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8008722:	2d05      	cmp	r5, #5
 8008724:	f000 80ab 	beq.w	800887e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x23e>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8008728:	2d06      	cmp	r5, #6
 800872a:	f000 808d 	beq.w	8008848 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x208>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800872e:	2d08      	cmp	r5, #8
 8008730:	d1a6      	bne.n	8008680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
        if ((checksum_ % 256) == 255)
 8008732:	425a      	negs	r2, r3
 8008734:	b2d2      	uxtb	r2, r2
 8008736:	b2db      	uxtb	r3, r3
 8008738:	bf58      	it	pl
 800873a:	4253      	negpl	r3, r2
 800873c:	2bff      	cmp	r3, #255	; 0xff
        mode_ = MODE_FIRST_FF;
 800873e:	f04f 0200 	mov.w	r2, #0
 8008742:	f8c4 24e0 	str.w	r2, [r4, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 8008746:	d19b      	bne.n	8008680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8008748:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 800874c:	2b00      	cmp	r3, #0
 800874e:	f000 80cd 	beq.w	80088ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ac>
          else if (topic_ == TopicInfo::ID_TIME)
 8008752:	2b0a      	cmp	r3, #10
 8008754:	f000 80df 	beq.w	8008916 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d6>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8008758:	2b06      	cmp	r3, #6
 800875a:	f000 811b 	beq.w	8008994 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x354>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800875e:	2b0b      	cmp	r3, #11
 8008760:	f000 80d6 	beq.w	8008910 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
            if (subscribers[topic_ - 100])
 8008764:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008768:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800876c:	2800      	cmp	r0, #0
 800876e:	d087      	beq.n	8008680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
              subscribers[topic_ - 100]->callback(message_in);
 8008770:	6803      	ldr	r3, [r0, #0]
 8008772:	4a81      	ldr	r2, [pc, #516]	; (8008978 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x338>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4293      	cmp	r3, r2
 8008778:	f040 8205 	bne.w	8008b86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x546>
 800877c:	7e23      	ldrb	r3, [r4, #24]
 800877e:	7403      	strb	r3, [r0, #16]
    this->cb_(msg);
 8008780:	6943      	ldr	r3, [r0, #20]
 8008782:	300c      	adds	r0, #12
 8008784:	4798      	blx	r3
 8008786:	e77b      	b.n	8008680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
 8008788:	f7f7 fed0 	bl	800052c <HAL_GetTick>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800878c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008790:	1bc0      	subs	r0, r0, r7
 8008792:	4298      	cmp	r0, r3
 8008794:	f67f af74 	bls.w	8008680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
          configured_ = false;
 8008798:	f884 54f4 	strb.w	r5, [r4, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 800879c:	f06f 0001 	mvn.w	r0, #1
 80087a0:	e7a1      	b.n	80086e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xa6>
        if (data == PROTOCOL_VER)
 80087a2:	2afe      	cmp	r2, #254	; 0xfe
 80087a4:	d04c      	beq.n	8008840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x200>
          if (configured_ == false)
 80087a6:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
          mode_ = MODE_FIRST_FF;
 80087aa:	2200      	movs	r2, #0
 80087ac:	f8c4 24e0 	str.w	r2, [r4, #1248]	; 0x4e0
          if (configured_ == false)
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f47f af65 	bne.w	8008680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
    publish(TopicInfo::ID_TIME, &t);
 80087b6:	6821      	ldr	r1, [r4, #0]
 80087b8:	4a70      	ldr	r2, [pc, #448]	; (800897c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x33c>)
 80087ba:	680d      	ldr	r5, [r1, #0]
      data()
 80087bc:	4970      	ldr	r1, [pc, #448]	; (8008980 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x340>)
 80087be:	9107      	str	r1, [sp, #28]
 80087c0:	4295      	cmp	r5, r2
 80087c2:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80087c6:	f040 808c 	bne.w	80088e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2a2>
    message_out[0] = 0xff;
 80087ca:	496e      	ldr	r1, [pc, #440]	; (8008984 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x344>)
 80087cc:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
 80087d0:	f640 22f7 	movw	r2, #2807	; 0xaf7
 80087d4:	f04f 4375 	mov.w	r3, #4110417920	; 0xf5000000
 80087d8:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
 80087dc:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
 80087e0:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
		CDC_Transmit_FS(data, length);
 80087e4:	2110      	movs	r1, #16
 80087e6:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80087ea:	f7fd fffb 	bl	80067e4 <CDC_Transmit_FS>
		return HAL_GetTick();
 80087ee:	f7f7 fe9d 	bl	800052c <HAL_GetTick>
    rt_time = hardware_.time();
 80087f2:	60a0      	str	r0, [r4, #8]
 80087f4:	e744      	b.n	8008680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
        index_ = 0;
 80087f6:	2100      	movs	r1, #0
        mode_++;
 80087f8:	2303      	movs	r3, #3
        bytes_ = data;
 80087fa:	f8c4 24e4 	str.w	r2, [r4, #1252]	; 0x4e4
        checksum_ = data;               /* first byte for calculating size checksum */
 80087fe:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
        index_ = 0;
 8008802:	f8c4 14ec 	str.w	r1, [r4, #1260]	; 0x4ec
        mode_++;
 8008806:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 800880a:	e739      	b.n	8008680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
        bytes_ += data << 8;
 800880c:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
 8008810:	eb03 2202 	add.w	r2, r3, r2, lsl #8
        mode_++;
 8008814:	2304      	movs	r3, #4
        bytes_ += data << 8;
 8008816:	f8c4 24e4 	str.w	r2, [r4, #1252]	; 0x4e4
        mode_++;
 800881a:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 800881e:	e72f      	b.n	8008680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8008820:	f894 04f4 	ldrb.w	r0, [r4, #1268]	; 0x4f4
 8008824:	2800      	cmp	r0, #0
 8008826:	f43f af5e 	beq.w	80086e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xa6>
 800882a:	f8d4 34f8 	ldr.w	r3, [r4, #1272]	; 0x4f8
 800882e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008832:	1afb      	subs	r3, r7, r3
 8008834:	4293      	cmp	r3, r2
 8008836:	d82a      	bhi.n	800888e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24e>
    return SPIN_OK;
 8008838:	2000      	movs	r0, #0
  }
 800883a:	b00b      	add	sp, #44	; 0x2c
 800883c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          mode_++;
 8008840:	2302      	movs	r3, #2
 8008842:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 8008846:	e71b      	b.n	8008680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
        topic_ += data << 8;
 8008848:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
        if (bytes_ == 0)
 800884c:	f8d4 14e4 	ldr.w	r1, [r4, #1252]	; 0x4e4
        topic_ += data << 8;
 8008850:	eb03 2302 	add.w	r3, r3, r2, lsl #8
        mode_ = MODE_MESSAGE;
 8008854:	2207      	movs	r2, #7
        topic_ += data << 8;
 8008856:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 800885a:	f8c4 24e0 	str.w	r2, [r4, #1248]	; 0x4e0
        if (bytes_ == 0)
 800885e:	2900      	cmp	r1, #0
 8008860:	f43f af52 	beq.w	8008708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xc8>
 8008864:	e70c      	b.n	8008680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
        if ((checksum_ % 256) == 255)
 8008866:	425a      	negs	r2, r3
 8008868:	b2d2      	uxtb	r2, r2
 800886a:	b2db      	uxtb	r3, r3
 800886c:	bf58      	it	pl
 800886e:	4253      	negpl	r3, r2
 8008870:	2bff      	cmp	r3, #255	; 0xff
          mode_++;
 8008872:	bf0c      	ite	eq
 8008874:	2305      	moveq	r3, #5
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8008876:	2300      	movne	r3, #0
 8008878:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 800887c:	e700      	b.n	8008680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
        mode_++;
 800887e:	2306      	movs	r3, #6
        topic_ = data;
 8008880:	f8c4 24e8 	str.w	r2, [r4, #1256]	; 0x4e8
        checksum_ = data;               /* first byte included in checksum */
 8008884:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
        mode_++;
 8008888:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 800888c:	e6f8      	b.n	8008680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
    publish(TopicInfo::ID_TIME, &t);
 800888e:	6823      	ldr	r3, [r4, #0]
 8008890:	4a3a      	ldr	r2, [pc, #232]	; (800897c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x33c>)
 8008892:	681d      	ldr	r5, [r3, #0]
 8008894:	4b3a      	ldr	r3, [pc, #232]	; (8008980 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x340>)
 8008896:	9307      	str	r3, [sp, #28]
 8008898:	4295      	cmp	r5, r2
 800889a:	f04f 0300 	mov.w	r3, #0
 800889e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80088a2:	d130      	bne.n	8008906 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c6>
    message_out[0] = 0xff;
 80088a4:	4837      	ldr	r0, [pc, #220]	; (8008984 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x344>)
 80088a6:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
 80088aa:	f640 21f7 	movw	r1, #2807	; 0xaf7
    message_out[l++] = 255 - (chk % 256);
 80088ae:	f06f 020a 	mvn.w	r2, #10
    message_out[0] = 0xff;
 80088b2:	f8c4 121c 	str.w	r1, [r4, #540]	; 0x21c
 80088b6:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
 80088ba:	f8a4 3224 	strh.w	r3, [r4, #548]	; 0x224
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80088be:	f884 3226 	strb.w	r3, [r4, #550]	; 0x226
    message_out[l++] = 255 - (chk % 256);
 80088c2:	f884 2227 	strb.w	r2, [r4, #551]	; 0x227
		CDC_Transmit_FS(data, length);
 80088c6:	2110      	movs	r1, #16
 80088c8:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80088cc:	f7fd ff8a 	bl	80067e4 <CDC_Transmit_FS>
		return HAL_GetTick();
 80088d0:	f7f7 fe2c 	bl	800052c <HAL_GetTick>
    rt_time = hardware_.time();
 80088d4:	60a0      	str	r0, [r4, #8]
    return SPIN_OK;
 80088d6:	2000      	movs	r0, #0
      last_sync_time = c_time;
 80088d8:	f8c4 74f8 	str.w	r7, [r4, #1272]	; 0x4f8
  }
 80088dc:	b00b      	add	sp, #44	; 0x2c
 80088de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    publish(TopicInfo::ID_TIME, &t);
 80088e2:	4642      	mov	r2, r8
 80088e4:	210a      	movs	r1, #10
 80088e6:	4620      	mov	r0, r4
 80088e8:	47a8      	blx	r5
 80088ea:	e780      	b.n	80087ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1ae>
            requestSyncTime();
 80088ec:	4620      	mov	r0, r4
 80088ee:	f7ff fc11 	bl	8008114 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80088f2:	4620      	mov	r0, r4
 80088f4:	f7ff fc46 	bl	8008184 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80088f8:	f8c4 74f8 	str.w	r7, [r4, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 80088fc:	f8c4 74fc 	str.w	r7, [r4, #1276]	; 0x4fc
            return SPIN_ERR;
 8008900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008904:	e6ef      	b.n	80086e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xa6>
    publish(TopicInfo::ID_TIME, &t);
 8008906:	4642      	mov	r2, r8
 8008908:	210a      	movs	r1, #10
 800890a:	4620      	mov	r0, r4
 800890c:	47a8      	blx	r5
 800890e:	e7df      	b.n	80088d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x290>
            configured_ = false;
 8008910:	f884 24f4 	strb.w	r2, [r4, #1268]	; 0x4f4
 8008914:	e6b4      	b.n	8008680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
 8008916:	f7f7 fe09 	bl	800052c <HAL_GetTick>
    uint32_t offset = hardware_.time() - rt_time;
 800891a:	68a5      	ldr	r5, [r4, #8]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800891c:	f8d4 9018 	ldr.w	r9, [r4, #24]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008920:	f8d4 801c 	ldr.w	r8, [r4, #28]
 8008924:	1b45      	subs	r5, r0, r5
 8008926:	f7f7 fe01 	bl	800052c <HAL_GetTick>
    t.data.sec += offset / 1000;
 800892a:	fbab 3205 	umull	r3, r2, fp, r5
 800892e:	0992      	lsrs	r2, r2, #6
    t.data.nsec += (offset % 1000) * 1000000UL;
 8008930:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008934:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008938:	fb03 5112 	mls	r1, r3, r2, r5
 800893c:	f8df c050 	ldr.w	ip, [pc, #80]	; 8008990 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x350>
    sec_offset = new_now.sec - ms / 1000 - 1;
 8008940:	eb02 0509 	add.w	r5, r2, r9
 8008944:	fbab e200 	umull	lr, r2, fp, r0
 8008948:	0992      	lsrs	r2, r2, #6
 800894a:	44d0      	add	r8, sl
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800894c:	fb0c 8801 	mla	r8, ip, r1, r8
 8008950:	fb03 0312 	mls	r3, r3, r2, r0
 8008954:	4621      	mov	r1, r4
 8008956:	fb0c 8313 	mls	r3, ip, r3, r8
    sec_offset = new_now.sec - ms / 1000 - 1;
 800895a:	1aaa      	subs	r2, r5, r2
 800895c:	60e2      	str	r2, [r4, #12]
    normalizeSecNSec(sec_offset, nsec_offset);
 800895e:	f104 000c 	add.w	r0, r4, #12
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8008962:	f841 3f10 	str.w	r3, [r1, #16]!
    normalizeSecNSec(sec_offset, nsec_offset);
 8008966:	f7fe f987 	bl	8006c78 <_ZN3ros16normalizeSecNSecERmS0_>
 800896a:	f7f7 fddf 	bl	800052c <HAL_GetTick>
    last_sync_receive_time = hardware_.time();
 800896e:	f8c4 04fc 	str.w	r0, [r4, #1276]	; 0x4fc
 8008972:	e685      	b.n	8008680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
 8008974:	20004a84 	.word	0x20004a84
 8008978:	08007055 	.word	0x08007055
 800897c:	080074c5 	.word	0x080074c5
 8008980:	08009a90 	.word	0x08009a90
 8008984:	0008feff 	.word	0x0008feff
 8008988:	3b9aca00 	.word	0x3b9aca00
 800898c:	10624dd3 	.word	0x10624dd3
 8008990:	000f4240 	.word	0x000f4240
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8008994:	f8d4 8018 	ldr.w	r8, [r4, #24]
      if(ints_lengthT > ints_length)
 8008998:	f8d4 350c 	ldr.w	r3, [r4, #1292]	; 0x50c
 800899c:	4598      	cmp	r8, r3
            req_param_resp.deserialize(message_in);
 800899e:	f104 0918 	add.w	r9, r4, #24
 80089a2:	d907      	bls.n	80089b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x374>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80089a4:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80089a8:	f8d4 0514 	ldr.w	r0, [r4, #1300]	; 0x514
 80089ac:	f000 ff92 	bl	80098d4 <realloc>
 80089b0:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
      ints_length = ints_lengthT;
 80089b4:	f8c4 850c 	str.w	r8, [r4, #1292]	; 0x50c
      for( uint32_t i = 0; i < ints_length; i++){
 80089b8:	f1b8 0f00 	cmp.w	r8, #0
 80089bc:	f000 80e7 	beq.w	8008b8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54e>
 80089c0:	464a      	mov	r2, r9
      offset += sizeof(this->ints_length);
 80089c2:	2504      	movs	r5, #4
      for( uint32_t i = 0; i < ints_length; i++){
 80089c4:	2000      	movs	r0, #0
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80089c6:	7993      	ldrb	r3, [r2, #6]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80089c8:	f892 e005 	ldrb.w	lr, [r2, #5]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80089cc:	7911      	ldrb	r1, [r2, #4]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80089ce:	f892 c007 	ldrb.w	ip, [r2, #7]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80089d2:	041b      	lsls	r3, r3, #16
 80089d4:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80089d8:	430b      	orrs	r3, r1
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80089da:	f8d4 1514 	ldr.w	r1, [r4, #1300]	; 0x514
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80089de:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
      this->st_ints = u_st_ints.real;
 80089e2:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80089e6:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
      for( uint32_t i = 0; i < ints_length; i++){
 80089ea:	f8d4 350c 	ldr.w	r3, [r4, #1292]	; 0x50c
 80089ee:	3001      	adds	r0, #1
 80089f0:	1d29      	adds	r1, r5, #4
 80089f2:	4283      	cmp	r3, r0
 80089f4:	46a8      	mov	r8, r5
 80089f6:	f102 0204 	add.w	r2, r2, #4
 80089fa:	460d      	mov	r5, r1
 80089fc:	d8e3      	bhi.n	80089c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x386>
 80089fe:	f108 0209 	add.w	r2, r8, #9
 8008a02:	9201      	str	r2, [sp, #4]
 8008a04:	f108 020a 	add.w	r2, r8, #10
 8008a08:	f108 0308 	add.w	r3, r8, #8
 8008a0c:	9202      	str	r2, [sp, #8]
 8008a0e:	f108 020b 	add.w	r2, r8, #11
 8008a12:	f108 0005 	add.w	r0, r8, #5
 8008a16:	f108 0c06 	add.w	ip, r8, #6
 8008a1a:	f108 0e07 	add.w	lr, r8, #7
 8008a1e:	461d      	mov	r5, r3
 8008a20:	9203      	str	r2, [sp, #12]
 8008a22:	f108 080c 	add.w	r8, r8, #12
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8008a26:	f819 c00c 	ldrb.w	ip, [r9, ip]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8008a2a:	f819 0000 	ldrb.w	r0, [r9, r0]
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8008a2e:	f819 2001 	ldrb.w	r2, [r9, r1]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8008a32:	f819 e00e 	ldrb.w	lr, [r9, lr]
      if(floats_lengthT > floats_length)
 8008a36:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8008a3a:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8008a3e:	ea4c 2c00 	orr.w	ip, ip, r0, lsl #8
 8008a42:	ea4c 0202 	orr.w	r2, ip, r2
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8008a46:	ea42 620e 	orr.w	r2, r2, lr, lsl #24
      if(floats_lengthT > floats_length)
 8008a4a:	428a      	cmp	r2, r1
 8008a4c:	d90a      	bls.n	8008a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x424>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8008a4e:	0091      	lsls	r1, r2, #2
 8008a50:	f8d4 0520 	ldr.w	r0, [r4, #1312]	; 0x520
 8008a54:	9305      	str	r3, [sp, #20]
 8008a56:	9204      	str	r2, [sp, #16]
 8008a58:	f000 ff3c 	bl	80098d4 <realloc>
 8008a5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a60:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
      floats_length = floats_lengthT;
 8008a64:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
      for( uint32_t i = 0; i < floats_length; i++){
 8008a68:	b362      	cbz	r2, 8008ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x484>
 8008a6a:	eb09 0205 	add.w	r2, r9, r5
 8008a6e:	2000      	movs	r0, #0
 8008a70:	f504 6ca1 	add.w	ip, r4, #1288	; 0x508
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008a74:	7893      	ldrb	r3, [r2, #2]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008a76:	f892 8001 	ldrb.w	r8, [r2, #1]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8008a7a:	f892 e000 	ldrb.w	lr, [r2]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008a7e:	78d1      	ldrb	r1, [r2, #3]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008a80:	041b      	lsls	r3, r3, #16
 8008a82:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
 8008a86:	ea43 030e 	orr.w	r3, r3, lr
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008a8a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8008a8e:	f8d4 1520 	ldr.w	r1, [r4, #1312]	; 0x520
      this->st_floats = u_st_floats.real;
 8008a92:	f8cc 3014 	str.w	r3, [ip, #20]
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8008a96:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
      for( uint32_t i = 0; i < floats_length; i++){
 8008a9a:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
 8008a9e:	3001      	adds	r0, #1
 8008aa0:	1d2b      	adds	r3, r5, #4
 8008aa2:	4281      	cmp	r1, r0
 8008aa4:	46a8      	mov	r8, r5
 8008aa6:	f102 0204 	add.w	r2, r2, #4
 8008aaa:	461d      	mov	r5, r3
 8008aac:	d8e2      	bhi.n	8008a74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x434>
 8008aae:	f108 0205 	add.w	r2, r8, #5
 8008ab2:	9201      	str	r2, [sp, #4]
 8008ab4:	f108 0206 	add.w	r2, r8, #6
 8008ab8:	9202      	str	r2, [sp, #8]
 8008aba:	f108 0207 	add.w	r2, r8, #7
 8008abe:	9203      	str	r2, [sp, #12]
 8008ac0:	f108 0808 	add.w	r8, r8, #8
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8008ac4:	9a02      	ldr	r2, [sp, #8]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8008ac6:	9901      	ldr	r1, [sp, #4]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8008ac8:	f819 2002 	ldrb.w	r2, [r9, r2]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8008acc:	f819 5001 	ldrb.w	r5, [r9, r1]
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8008ad0:	f819 0003 	ldrb.w	r0, [r9, r3]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8008ad4:	9b03      	ldr	r3, [sp, #12]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8008ad6:	0412      	lsls	r2, r2, #16
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8008ad8:	f819 1003 	ldrb.w	r1, [r9, r3]
      if(strings_lengthT > strings_length)
 8008adc:	f8d4 3524 	ldr.w	r3, [r4, #1316]	; 0x524
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8008ae0:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
 8008ae4:	4305      	orrs	r5, r0
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8008ae6:	ea45 6501 	orr.w	r5, r5, r1, lsl #24
      if(strings_lengthT > strings_length)
 8008aea:	429d      	cmp	r5, r3
 8008aec:	d906      	bls.n	8008afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4bc>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8008aee:	00a9      	lsls	r1, r5, #2
 8008af0:	f8d4 052c 	ldr.w	r0, [r4, #1324]	; 0x52c
 8008af4:	f000 feee 	bl	80098d4 <realloc>
 8008af8:	f8c4 052c 	str.w	r0, [r4, #1324]	; 0x52c
      strings_length = strings_lengthT;
 8008afc:	f8c4 5524 	str.w	r5, [r4, #1316]	; 0x524
      for( uint32_t i = 0; i < strings_length; i++){
 8008b00:	2d00      	cmp	r5, #0
 8008b02:	d03c      	beq.n	8008b7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x53e>
 8008b04:	2300      	movs	r3, #0
          inbuffer[k-1]=inbuffer[k];
 8008b06:	9702      	str	r7, [sp, #8]
      var |= (arr[i] << (8 * i));
 8008b08:	eb09 0208 	add.w	r2, r9, r8
 8008b0c:	f819 1008 	ldrb.w	r1, [r9, r8]
 8008b10:	7855      	ldrb	r5, [r2, #1]
 8008b12:	7890      	ldrb	r0, [r2, #2]
 8008b14:	78d2      	ldrb	r2, [r2, #3]
 8008b16:	022d      	lsls	r5, r5, #8
 8008b18:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8008b1c:	430d      	orrs	r5, r1
      offset += 4;
 8008b1e:	f108 0704 	add.w	r7, r8, #4
 8008b22:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8008b26:	443d      	add	r5, r7
          inbuffer[k-1]=inbuffer[k];
 8008b28:	f06f 0c03 	mvn.w	ip, #3
 8008b2c:	ebac 0c08 	sub.w	ip, ip, r8
 8008b30:	f108 011c 	add.w	r1, r8, #28
 8008b34:	f108 001b 	add.w	r0, r8, #27
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8008b38:	42bd      	cmp	r5, r7
          inbuffer[k-1]=inbuffer[k];
 8008b3a:	f108 0205 	add.w	r2, r8, #5
 8008b3e:	44ac      	add	ip, r5
      offset += length_st_strings;
 8008b40:	46a8      	mov	r8, r5
 8008b42:	4421      	add	r1, r4
 8008b44:	4420      	add	r0, r4
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8008b46:	d907      	bls.n	8008b58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x518>
 8008b48:	4295      	cmp	r5, r2
 8008b4a:	bf2c      	ite	cs
 8008b4c:	4662      	movcs	r2, ip
 8008b4e:	2201      	movcc	r2, #1
 8008b50:	9301      	str	r3, [sp, #4]
 8008b52:	f000 fdf6 	bl	8009742 <memmove>
 8008b56:	9b01      	ldr	r3, [sp, #4]
      inbuffer[offset+length_st_strings-1]=0;
 8008b58:	444d      	add	r5, r9
 8008b5a:	f04f 0100 	mov.w	r1, #0
 8008b5e:	f805 1c01 	strb.w	r1, [r5, #-1]
      this->st_strings = (char *)(inbuffer + offset-1);
 8008b62:	1e7a      	subs	r2, r7, #1
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8008b64:	f8d4 152c 	ldr.w	r1, [r4, #1324]	; 0x52c
      this->st_strings = (char *)(inbuffer + offset-1);
 8008b68:	444a      	add	r2, r9
 8008b6a:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8008b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      for( uint32_t i = 0; i < strings_length; i++){
 8008b72:	f8d4 2524 	ldr.w	r2, [r4, #1316]	; 0x524
 8008b76:	3301      	adds	r3, #1
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d8c5      	bhi.n	8008b08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c8>
 8008b7c:	9f02      	ldr	r7, [sp, #8]
            param_recieved = true;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	f884 3504 	strb.w	r3, [r4, #1284]	; 0x504
 8008b84:	e57c      	b.n	8008680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
              subscribers[topic_ - 100]->callback(message_in);
 8008b86:	f104 0118 	add.w	r1, r4, #24
 8008b8a:	4798      	blx	r3
 8008b8c:	e578      	b.n	8008680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
      for( uint32_t i = 0; i < ints_length; i++){
 8008b8e:	230a      	movs	r3, #10
 8008b90:	220b      	movs	r2, #11
 8008b92:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8008b96:	2309      	movs	r3, #9
 8008b98:	9301      	str	r3, [sp, #4]
 8008b9a:	f04f 080c 	mov.w	r8, #12
 8008b9e:	2308      	movs	r3, #8
 8008ba0:	f04f 0e07 	mov.w	lr, #7
 8008ba4:	f04f 0c06 	mov.w	ip, #6
 8008ba8:	2005      	movs	r0, #5
 8008baa:	2104      	movs	r1, #4
 8008bac:	e73b      	b.n	8008a26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3e6>
 8008bae:	bf00      	nop

08008bb0 <spinOnce>:


extern "C" void spinOnce(void)
{
 8008bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (NBT_handler(&ros_nbt))
 8008bb4:	48b2      	ldr	r0, [pc, #712]	; (8008e80 <spinOnce+0x2d0>)
{
 8008bb6:	b089      	sub	sp, #36	; 0x24
	if (NBT_handler(&ros_nbt))
 8008bb8:	f000 fce4 	bl	8009584 <_Z11NBT_handlerP5nbt_t>
 8008bbc:	b910      	cbnz	r0, 8008bc4 <spinOnce+0x14>
	{
		nh_connected = nh.connected();
		nh.spinOnce();
	}
}
 8008bbe:	b009      	add	sp, #36	; 0x24
 8008bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return configured_;
 8008bc4:	4caf      	ldr	r4, [pc, #700]	; (8008e84 <spinOnce+0x2d4>)
		nh_connected = nh.connected();
 8008bc6:	4bb0      	ldr	r3, [pc, #704]	; (8008e88 <spinOnce+0x2d8>)
 8008bc8:	f894 24f4 	ldrb.w	r2, [r4, #1268]	; 0x4f4
 8008bcc:	701a      	strb	r2, [r3, #0]
 8008bce:	f7f7 fcad 	bl	800052c <HAL_GetTick>
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8008bd2:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
 8008bd6:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8008bda:	1ac3      	subs	r3, r0, r3
 8008bdc:	4293      	cmp	r3, r2
      configured_ = false;
 8008bde:	bf84      	itt	hi
 8008be0:	2300      	movhi	r3, #0
 8008be2:	f884 34f4 	strbhi.w	r3, [r4, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8008be6:	f8d4 34e0 	ldr.w	r3, [r4, #1248]	; 0x4e0
 8008bea:	4606      	mov	r6, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f040 80eb 	bne.w	8008dc8 <spinOnce+0x218>
		r = ringbuffer_getchar(&rb, &ch);
 8008bf2:	4da6      	ldr	r5, [pc, #664]	; (8008e8c <spinOnce+0x2dc>)
 8008bf4:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8008e9c <spinOnce+0x2ec>
 8008bf8:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 8008ea0 <spinOnce+0x2f0>
    t.data.sec += offset / 1000;
 8008bfc:	f8df a2a4 	ldr.w	sl, [pc, #676]	; 8008ea4 <spinOnce+0x2f4>
    normalizeSecNSec(sec_offset, nsec_offset);
 8008c00:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 8008ea8 <spinOnce+0x2f8>
      if (spin_timeout_ > 0)
 8008c04:	6963      	ldr	r3, [r4, #20]
 8008c06:	b12b      	cbz	r3, 8008c14 <spinOnce+0x64>
		return HAL_GetTick();
 8008c08:	f7f7 fc90 	bl	800052c <HAL_GetTick>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8008c0c:	6963      	ldr	r3, [r4, #20]
 8008c0e:	1b80      	subs	r0, r0, r6
 8008c10:	4298      	cmp	r0, r3
 8008c12:	d8d4      	bhi.n	8008bbe <spinOnce+0xe>
		uint8_t ch = -1;
 8008c14:	a908      	add	r1, sp, #32
 8008c16:	23ff      	movs	r3, #255	; 0xff
 8008c18:	f801 3d01 	strb.w	r3, [r1, #-1]!
		r = ringbuffer_getchar(&rb, &ch);
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	f000 fd03 	bl	8009628 <_Z18ringbuffer_getcharP10ringbufferPh>
		if (1 == r)
 8008c22:	2801      	cmp	r0, #1
 8008c24:	f040 80a3 	bne.w	8008d6e <spinOnce+0x1be>
      checksum_ += data;
 8008c28:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
			return ch;
 8008c2c:	f89d 201f 	ldrb.w	r2, [sp, #31]
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8008c30:	f8d4 74e0 	ldr.w	r7, [r4, #1248]	; 0x4e0
      checksum_ += data;
 8008c34:	4413      	add	r3, r2
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8008c36:	2f07      	cmp	r7, #7
      checksum_ += data;
 8008c38:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8008c3c:	d00c      	beq.n	8008c58 <spinOnce+0xa8>
      else if (mode_ == MODE_FIRST_FF)
 8008c3e:	b9ef      	cbnz	r7, 8008c7c <spinOnce+0xcc>
        if (data == 0xff)
 8008c40:	2aff      	cmp	r2, #255	; 0xff
 8008c42:	d156      	bne.n	8008cf2 <spinOnce+0x142>
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8008c44:	f106 0314 	add.w	r3, r6, #20
 8008c48:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
      if (spin_timeout_ > 0)
 8008c4c:	6963      	ldr	r3, [r4, #20]
          mode_++;
 8008c4e:	f8c4 04e0 	str.w	r0, [r4, #1248]	; 0x4e0
      if (spin_timeout_ > 0)
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1d8      	bne.n	8008c08 <spinOnce+0x58>
 8008c56:	e7dd      	b.n	8008c14 <spinOnce+0x64>
        message_in[index_++] = data;
 8008c58:	f8d4 14ec 	ldr.w	r1, [r4, #1260]	; 0x4ec
        bytes_--;
 8008c5c:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
        message_in[index_++] = data;
 8008c60:	1860      	adds	r0, r4, r1
        bytes_--;
 8008c62:	3b01      	subs	r3, #1
        message_in[index_++] = data;
 8008c64:	3101      	adds	r1, #1
 8008c66:	7602      	strb	r2, [r0, #24]
 8008c68:	f8c4 14ec 	str.w	r1, [r4, #1260]	; 0x4ec
        bytes_--;
 8008c6c:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d1c7      	bne.n	8008c04 <spinOnce+0x54>
          mode_ = MODE_MSG_CHECKSUM;
 8008c74:	2308      	movs	r3, #8
 8008c76:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 8008c7a:	e7c3      	b.n	8008c04 <spinOnce+0x54>
      else if (mode_ == MODE_PROTOCOL_VER)
 8008c7c:	2f01      	cmp	r7, #1
 8008c7e:	d042      	beq.n	8008d06 <spinOnce+0x156>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8008c80:	2f02      	cmp	r7, #2
 8008c82:	d05f      	beq.n	8008d44 <spinOnce+0x194>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8008c84:	2f03      	cmp	r7, #3
 8008c86:	d068      	beq.n	8008d5a <spinOnce+0x1aa>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8008c88:	2f04      	cmp	r7, #4
 8008c8a:	f000 80b4 	beq.w	8008df6 <spinOnce+0x246>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8008c8e:	2f05      	cmp	r7, #5
 8008c90:	f000 80bd 	beq.w	8008e0e <spinOnce+0x25e>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8008c94:	2f06      	cmp	r7, #6
 8008c96:	f000 809f 	beq.w	8008dd8 <spinOnce+0x228>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8008c9a:	2f08      	cmp	r7, #8
 8008c9c:	d1b2      	bne.n	8008c04 <spinOnce+0x54>
        if ((checksum_ % 256) == 255)
 8008c9e:	425a      	negs	r2, r3
 8008ca0:	b2d2      	uxtb	r2, r2
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	bf58      	it	pl
 8008ca6:	4253      	negpl	r3, r2
 8008ca8:	2bff      	cmp	r3, #255	; 0xff
        mode_ = MODE_FIRST_FF;
 8008caa:	f04f 0200 	mov.w	r2, #0
 8008cae:	f8c4 24e0 	str.w	r2, [r4, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 8008cb2:	d1a7      	bne.n	8008c04 <spinOnce+0x54>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8008cb4:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f000 8208 	beq.w	80090ce <spinOnce+0x51e>
          else if (topic_ == TopicInfo::ID_TIME)
 8008cbe:	2b0a      	cmp	r3, #10
 8008cc0:	f000 80ad 	beq.w	8008e1e <spinOnce+0x26e>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8008cc4:	2b06      	cmp	r3, #6
 8008cc6:	f000 80f3 	beq.w	8008eb0 <spinOnce+0x300>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8008cca:	2b0b      	cmp	r3, #11
 8008ccc:	f000 80d4 	beq.w	8008e78 <spinOnce+0x2c8>
            if (subscribers[topic_ - 100])
 8008cd0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008cd4:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	d093      	beq.n	8008c04 <spinOnce+0x54>
              subscribers[topic_ - 100]->callback(message_in);
 8008cdc:	6803      	ldr	r3, [r0, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4543      	cmp	r3, r8
 8008ce2:	f040 81e1 	bne.w	80090a8 <spinOnce+0x4f8>
 8008ce6:	7e23      	ldrb	r3, [r4, #24]
 8008ce8:	7403      	strb	r3, [r0, #16]
 8008cea:	6943      	ldr	r3, [r0, #20]
 8008cec:	300c      	adds	r0, #12
 8008cee:	4798      	blx	r3
 8008cf0:	e788      	b.n	8008c04 <spinOnce+0x54>
		return HAL_GetTick();
 8008cf2:	f7f7 fc1b 	bl	800052c <HAL_GetTick>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8008cf6:	f241 3388 	movw	r3, #5000	; 0x1388
 8008cfa:	1b80      	subs	r0, r0, r6
 8008cfc:	4298      	cmp	r0, r3
 8008cfe:	d981      	bls.n	8008c04 <spinOnce+0x54>
          configured_ = false;
 8008d00:	f884 74f4 	strb.w	r7, [r4, #1268]	; 0x4f4
 8008d04:	e75b      	b.n	8008bbe <spinOnce+0xe>
        if (data == PROTOCOL_VER)
 8008d06:	2afe      	cmp	r2, #254	; 0xfe
 8008d08:	d05a      	beq.n	8008dc0 <spinOnce+0x210>
          if (configured_ == false)
 8008d0a:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
          mode_ = MODE_FIRST_FF;
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f8c4 24e0 	str.w	r2, [r4, #1248]	; 0x4e0
          if (configured_ == false)
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f47f af75 	bne.w	8008c04 <spinOnce+0x54>
    message_out[0] = 0xff;
 8008d1a:	495d      	ldr	r1, [pc, #372]	; (8008e90 <spinOnce+0x2e0>)
 8008d1c:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
 8008d20:	f640 22f7 	movw	r2, #2807	; 0xaf7
 8008d24:	f04f 4375 	mov.w	r3, #4110417920	; 0xf5000000
 8008d28:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
		CDC_Transmit_FS(data, length);
 8008d2c:	4859      	ldr	r0, [pc, #356]	; (8008e94 <spinOnce+0x2e4>)
 8008d2e:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
 8008d32:	2110      	movs	r1, #16
 8008d34:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
 8008d38:	f7fd fd54 	bl	80067e4 <CDC_Transmit_FS>
		return HAL_GetTick();
 8008d3c:	f7f7 fbf6 	bl	800052c <HAL_GetTick>
    rt_time = hardware_.time();
 8008d40:	60a0      	str	r0, [r4, #8]
 8008d42:	e75f      	b.n	8008c04 <spinOnce+0x54>
        index_ = 0;
 8008d44:	2100      	movs	r1, #0
        mode_++;
 8008d46:	2303      	movs	r3, #3
        bytes_ = data;
 8008d48:	f8c4 24e4 	str.w	r2, [r4, #1252]	; 0x4e4
        checksum_ = data;               /* first byte for calculating size checksum */
 8008d4c:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
        index_ = 0;
 8008d50:	f8c4 14ec 	str.w	r1, [r4, #1260]	; 0x4ec
        mode_++;
 8008d54:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 8008d58:	e754      	b.n	8008c04 <spinOnce+0x54>
        bytes_ += data << 8;
 8008d5a:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
 8008d5e:	eb03 2202 	add.w	r2, r3, r2, lsl #8
        mode_++;
 8008d62:	2304      	movs	r3, #4
        bytes_ += data << 8;
 8008d64:	f8c4 24e4 	str.w	r2, [r4, #1252]	; 0x4e4
        mode_++;
 8008d68:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 8008d6c:	e74a      	b.n	8008c04 <spinOnce+0x54>
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8008d6e:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f43f af23 	beq.w	8008bbe <spinOnce+0xe>
 8008d78:	f8d4 34f8 	ldr.w	r3, [r4, #1272]	; 0x4f8
 8008d7c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008d80:	1af3      	subs	r3, r6, r3
 8008d82:	4293      	cmp	r3, r2
 8008d84:	f67f af1b 	bls.w	8008bbe <spinOnce+0xe>
    message_out[0] = 0xff;
 8008d88:	4b41      	ldr	r3, [pc, #260]	; (8008e90 <spinOnce+0x2e0>)
 8008d8a:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
 8008d8e:	f640 21f7 	movw	r1, #2807	; 0xaf7
 8008d92:	2300      	movs	r3, #0
    message_out[l++] = 255 - (chk % 256);
 8008d94:	f06f 020a 	mvn.w	r2, #10
    message_out[0] = 0xff;
 8008d98:	f8c4 121c 	str.w	r1, [r4, #540]	; 0x21c
		CDC_Transmit_FS(data, length);
 8008d9c:	483d      	ldr	r0, [pc, #244]	; (8008e94 <spinOnce+0x2e4>)
 8008d9e:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
 8008da2:	2110      	movs	r1, #16
 8008da4:	f8a4 3224 	strh.w	r3, [r4, #548]	; 0x224
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8008da8:	f884 3226 	strb.w	r3, [r4, #550]	; 0x226
    message_out[l++] = 255 - (chk % 256);
 8008dac:	f884 2227 	strb.w	r2, [r4, #551]	; 0x227
 8008db0:	f7fd fd18 	bl	80067e4 <CDC_Transmit_FS>
		return HAL_GetTick();
 8008db4:	f7f7 fbba 	bl	800052c <HAL_GetTick>
      last_sync_time = c_time;
 8008db8:	f8c4 64f8 	str.w	r6, [r4, #1272]	; 0x4f8
    rt_time = hardware_.time();
 8008dbc:	60a0      	str	r0, [r4, #8]
}
 8008dbe:	e6fe      	b.n	8008bbe <spinOnce+0xe>
          mode_++;
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 8008dc6:	e71d      	b.n	8008c04 <spinOnce+0x54>
      if (c_time > last_msg_timeout_time)
 8008dc8:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
 8008dcc:	4298      	cmp	r0, r3
        mode_ = MODE_FIRST_FF;
 8008dce:	bf84      	itt	hi
 8008dd0:	2300      	movhi	r3, #0
 8008dd2:	f8c4 34e0 	strhi.w	r3, [r4, #1248]	; 0x4e0
 8008dd6:	e70c      	b.n	8008bf2 <spinOnce+0x42>
        topic_ += data << 8;
 8008dd8:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
        if (bytes_ == 0)
 8008ddc:	f8d4 14e4 	ldr.w	r1, [r4, #1252]	; 0x4e4
        topic_ += data << 8;
 8008de0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
        mode_ = MODE_MESSAGE;
 8008de4:	2207      	movs	r2, #7
        topic_ += data << 8;
 8008de6:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 8008dea:	f8c4 24e0 	str.w	r2, [r4, #1248]	; 0x4e0
        if (bytes_ == 0)
 8008dee:	2900      	cmp	r1, #0
 8008df0:	f43f af40 	beq.w	8008c74 <spinOnce+0xc4>
 8008df4:	e706      	b.n	8008c04 <spinOnce+0x54>
        if ((checksum_ % 256) == 255)
 8008df6:	425a      	negs	r2, r3
 8008df8:	b2d2      	uxtb	r2, r2
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	bf58      	it	pl
 8008dfe:	4253      	negpl	r3, r2
 8008e00:	2bff      	cmp	r3, #255	; 0xff
          mode_++;
 8008e02:	bf0c      	ite	eq
 8008e04:	2305      	moveq	r3, #5
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8008e06:	2300      	movne	r3, #0
 8008e08:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 8008e0c:	e6fa      	b.n	8008c04 <spinOnce+0x54>
        mode_++;
 8008e0e:	2306      	movs	r3, #6
        topic_ = data;
 8008e10:	f8c4 24e8 	str.w	r2, [r4, #1256]	; 0x4e8
        checksum_ = data;               /* first byte included in checksum */
 8008e14:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
        mode_++;
 8008e18:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 8008e1c:	e6f2      	b.n	8008c04 <spinOnce+0x54>
 8008e1e:	f7f7 fb85 	bl	800052c <HAL_GetTick>
 8008e22:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
    uint32_t offset = hardware_.time() - rt_time;
 8008e26:	68a7      	ldr	r7, [r4, #8]
 8008e28:	444a      	add	r2, r9
 8008e2a:	3901      	subs	r1, #1
 8008e2c:	9200      	str	r2, [sp, #0]
 8008e2e:	1bc7      	subs	r7, r0, r7
 8008e30:	9101      	str	r1, [sp, #4]
 8008e32:	f7f7 fb7b 	bl	800052c <HAL_GetTick>
    t.data.sec += offset / 1000;
 8008e36:	fbaa 2307 	umull	r2, r3, sl, r7
    sec_offset = new_now.sec - ms / 1000 - 1;
 8008e3a:	9901      	ldr	r1, [sp, #4]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8008e3c:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8008eac <spinOnce+0x2fc>
 8008e40:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    t.data.sec += offset / 1000;
 8008e44:	099b      	lsrs	r3, r3, #6
    t.data.nsec += (offset % 1000) * 1000000UL;
 8008e46:	fb0c 7713 	mls	r7, ip, r3, r7
    sec_offset = new_now.sec - ms / 1000 - 1;
 8008e4a:	440b      	add	r3, r1
 8008e4c:	fbaa 2100 	umull	r2, r1, sl, r0
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8008e50:	9a00      	ldr	r2, [sp, #0]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8008e52:	0989      	lsrs	r1, r1, #6
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8008e54:	fb0e 2707 	mla	r7, lr, r7, r2
 8008e58:	fb0c 0211 	mls	r2, ip, r1, r0
    sec_offset = new_now.sec - ms / 1000 - 1;
 8008e5c:	1a5b      	subs	r3, r3, r1
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8008e5e:	fb0e 7212 	mls	r2, lr, r2, r7
    normalizeSecNSec(sec_offset, nsec_offset);
 8008e62:	490d      	ldr	r1, [pc, #52]	; (8008e98 <spinOnce+0x2e8>)
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8008e64:	6122      	str	r2, [r4, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8008e66:	4658      	mov	r0, fp
    sec_offset = new_now.sec - ms / 1000 - 1;
 8008e68:	60e3      	str	r3, [r4, #12]
    normalizeSecNSec(sec_offset, nsec_offset);
 8008e6a:	f7fd ff05 	bl	8006c78 <_ZN3ros16normalizeSecNSecERmS0_>
 8008e6e:	f7f7 fb5d 	bl	800052c <HAL_GetTick>
    last_sync_receive_time = hardware_.time();
 8008e72:	f8c4 04fc 	str.w	r0, [r4, #1276]	; 0x4fc
 8008e76:	e6c5      	b.n	8008c04 <spinOnce+0x54>
            configured_ = false;
 8008e78:	f884 24f4 	strb.w	r2, [r4, #1268]	; 0x4f4
 8008e7c:	e6c2      	b.n	8008c04 <spinOnce+0x54>
 8008e7e:	bf00      	nop
 8008e80:	200041f4 	.word	0x200041f4
 8008e84:	20004554 	.word	0x20004554
 8008e88:	200041a4 	.word	0x200041a4
 8008e8c:	20004a84 	.word	0x20004a84
 8008e90:	0008feff 	.word	0x0008feff
 8008e94:	2000476c 	.word	0x2000476c
 8008e98:	20004564 	.word	0x20004564
 8008e9c:	08007055 	.word	0x08007055
 8008ea0:	3b9aca00 	.word	0x3b9aca00
 8008ea4:	10624dd3 	.word	0x10624dd3
 8008ea8:	20004560 	.word	0x20004560
 8008eac:	000f4240 	.word	0x000f4240
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8008eb0:	69a3      	ldr	r3, [r4, #24]
      if(ints_lengthT > ints_length)
 8008eb2:	f8d4 250c 	ldr.w	r2, [r4, #1292]	; 0x50c
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d908      	bls.n	8008ecc <spinOnce+0x31c>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8008eba:	0099      	lsls	r1, r3, #2
 8008ebc:	f8d4 0514 	ldr.w	r0, [r4, #1300]	; 0x514
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	f000 fd07 	bl	80098d4 <realloc>
 8008ec6:	9b00      	ldr	r3, [sp, #0]
 8008ec8:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
      ints_length = ints_lengthT;
 8008ecc:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
      for( uint32_t i = 0; i < ints_length; i++){
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	f000 80ec 	beq.w	80090ae <spinOnce+0x4fe>
 8008ed6:	4a83      	ldr	r2, [pc, #524]	; (80090e4 <spinOnce+0x534>)
      offset += sizeof(this->ints_length);
 8008ed8:	2704      	movs	r7, #4
      for( uint32_t i = 0; i < ints_length; i++){
 8008eda:	2100      	movs	r1, #0
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008edc:	7f93      	ldrb	r3, [r2, #30]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008ede:	f892 e01d 	ldrb.w	lr, [r2, #29]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8008ee2:	7f10      	ldrb	r0, [r2, #28]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008ee4:	f892 c01f 	ldrb.w	ip, [r2, #31]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008ee8:	041b      	lsls	r3, r3, #16
 8008eea:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 8008eee:	4303      	orrs	r3, r0
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8008ef0:	f8d4 0514 	ldr.w	r0, [r4, #1300]	; 0x514
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008ef4:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
      this->st_ints = u_st_ints.real;
 8008ef8:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8008efc:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
      for( uint32_t i = 0; i < ints_length; i++){
 8008f00:	f8d4 350c 	ldr.w	r3, [r4, #1292]	; 0x50c
 8008f04:	3101      	adds	r1, #1
 8008f06:	1d38      	adds	r0, r7, #4
 8008f08:	428b      	cmp	r3, r1
 8008f0a:	46be      	mov	lr, r7
 8008f0c:	f102 0204 	add.w	r2, r2, #4
 8008f10:	4607      	mov	r7, r0
 8008f12:	d8e3      	bhi.n	8008edc <spinOnce+0x32c>
 8008f14:	f10e 0306 	add.w	r3, lr, #6
 8008f18:	9304      	str	r3, [sp, #16]
 8008f1a:	f10e 0309 	add.w	r3, lr, #9
 8008f1e:	9300      	str	r3, [sp, #0]
 8008f20:	f10e 030a 	add.w	r3, lr, #10
 8008f24:	9302      	str	r3, [sp, #8]
 8008f26:	f10e 030b 	add.w	r3, lr, #11
 8008f2a:	9303      	str	r3, [sp, #12]
 8008f2c:	f10e 030c 	add.w	r3, lr, #12
 8008f30:	f10e 0208 	add.w	r2, lr, #8
 8008f34:	9301      	str	r3, [sp, #4]
 8008f36:	9b04      	ldr	r3, [sp, #16]
 8008f38:	4617      	mov	r7, r2
 8008f3a:	f10e 0105 	add.w	r1, lr, #5
 8008f3e:	f10e 0c07 	add.w	ip, lr, #7
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8008f42:	4423      	add	r3, r4
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8008f44:	4421      	add	r1, r4
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8008f46:	7e1b      	ldrb	r3, [r3, #24]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8008f48:	f891 e018 	ldrb.w	lr, [r1, #24]
      if(floats_lengthT > floats_length)
 8008f4c:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8008f50:	4420      	add	r0, r4
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8008f52:	44a4      	add	ip, r4
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8008f54:	041b      	lsls	r3, r3, #16
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8008f56:	7e00      	ldrb	r0, [r0, #24]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8008f58:	f89c c018 	ldrb.w	ip, [ip, #24]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8008f5c:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 8008f60:	4303      	orrs	r3, r0
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8008f62:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
      if(floats_lengthT > floats_length)
 8008f66:	428b      	cmp	r3, r1
 8008f68:	d90a      	bls.n	8008f80 <spinOnce+0x3d0>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8008f6a:	0099      	lsls	r1, r3, #2
 8008f6c:	f8d4 0520 	ldr.w	r0, [r4, #1312]	; 0x520
 8008f70:	9205      	str	r2, [sp, #20]
 8008f72:	9304      	str	r3, [sp, #16]
 8008f74:	f000 fcae 	bl	80098d4 <realloc>
 8008f78:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8008f7c:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
      floats_length = floats_lengthT;
 8008f80:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
      for( uint32_t i = 0; i < floats_length; i++){
 8008f84:	b35b      	cbz	r3, 8008fde <spinOnce+0x42e>
 8008f86:	eb04 0c07 	add.w	ip, r4, r7
 8008f8a:	f04f 0e00 	mov.w	lr, #0
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008f8e:	f89c 301a 	ldrb.w	r3, [ip, #26]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008f92:	f89c 0019 	ldrb.w	r0, [ip, #25]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8008f96:	f89c 1018 	ldrb.w	r1, [ip, #24]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008f9a:	f89c 201b 	ldrb.w	r2, [ip, #27]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008f9e:	041b      	lsls	r3, r3, #16
 8008fa0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8008fa4:	430b      	orrs	r3, r1
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008fa6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      this->st_floats = u_st_floats.real;
 8008faa:	484f      	ldr	r0, [pc, #316]	; (80090e8 <spinOnce+0x538>)
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8008fac:	f8d4 2520 	ldr.w	r2, [r4, #1312]	; 0x520
      this->st_floats = u_st_floats.real;
 8008fb0:	6003      	str	r3, [r0, #0]
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8008fb2:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
      for( uint32_t i = 0; i < floats_length; i++){
 8008fb6:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
 8008fba:	f10e 0e01 	add.w	lr, lr, #1
 8008fbe:	1d3a      	adds	r2, r7, #4
 8008fc0:	4573      	cmp	r3, lr
 8008fc2:	4639      	mov	r1, r7
 8008fc4:	f10c 0c04 	add.w	ip, ip, #4
 8008fc8:	4617      	mov	r7, r2
 8008fca:	d8e0      	bhi.n	8008f8e <spinOnce+0x3de>
 8008fcc:	1d4b      	adds	r3, r1, #5
 8008fce:	9300      	str	r3, [sp, #0]
 8008fd0:	1d8b      	adds	r3, r1, #6
 8008fd2:	9302      	str	r3, [sp, #8]
 8008fd4:	1dcb      	adds	r3, r1, #7
 8008fd6:	9303      	str	r3, [sp, #12]
 8008fd8:	f101 0308 	add.w	r3, r1, #8
 8008fdc:	9301      	str	r3, [sp, #4]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8008fde:	9b02      	ldr	r3, [sp, #8]
 8008fe0:	4423      	add	r3, r4
 8008fe2:	4619      	mov	r1, r3
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8008fe4:	9b00      	ldr	r3, [sp, #0]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8008fe6:	7e09      	ldrb	r1, [r1, #24]
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8008fe8:	18a7      	adds	r7, r4, r2
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8008fea:	9a03      	ldr	r2, [sp, #12]
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8008fec:	7e3f      	ldrb	r7, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8008fee:	4423      	add	r3, r4
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8008ff0:	4422      	add	r2, r4
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8008ff2:	7e18      	ldrb	r0, [r3, #24]
      if(strings_lengthT > strings_length)
 8008ff4:	f8d4 3524 	ldr.w	r3, [r4, #1316]	; 0x524
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8008ff8:	4694      	mov	ip, r2
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8008ffa:	040a      	lsls	r2, r1, #16
 8008ffc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8009000:	f89c 1018 	ldrb.w	r1, [ip, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8009004:	4317      	orrs	r7, r2
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8009006:	ea47 6701 	orr.w	r7, r7, r1, lsl #24
      if(strings_lengthT > strings_length)
 800900a:	429f      	cmp	r7, r3
 800900c:	d906      	bls.n	800901c <spinOnce+0x46c>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800900e:	00b9      	lsls	r1, r7, #2
 8009010:	f8d4 052c 	ldr.w	r0, [r4, #1324]	; 0x52c
 8009014:	f000 fc5e 	bl	80098d4 <realloc>
 8009018:	f8c4 052c 	str.w	r0, [r4, #1324]	; 0x52c
      strings_length = strings_lengthT;
 800901c:	f8c4 7524 	str.w	r7, [r4, #1316]	; 0x524
      for( uint32_t i = 0; i < strings_length; i++){
 8009020:	2f00      	cmp	r7, #0
 8009022:	d03d      	beq.n	80090a0 <spinOnce+0x4f0>
 8009024:	2300      	movs	r3, #0
 8009026:	9300      	str	r3, [sp, #0]
          inbuffer[k-1]=inbuffer[k];
 8009028:	9b01      	ldr	r3, [sp, #4]
 800902a:	9602      	str	r6, [sp, #8]
 800902c:	18e2      	adds	r2, r4, r3
      offset += 4;
 800902e:	1d1f      	adds	r7, r3, #4
 8009030:	7e96      	ldrb	r6, [r2, #26]
 8009032:	7e50      	ldrb	r0, [r2, #25]
 8009034:	7e11      	ldrb	r1, [r2, #24]
 8009036:	7ed2      	ldrb	r2, [r2, #27]
 8009038:	0436      	lsls	r6, r6, #16
 800903a:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
 800903e:	430e      	orrs	r6, r1
 8009040:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8009044:	443e      	add	r6, r7
          inbuffer[k-1]=inbuffer[k];
 8009046:	f06f 0c03 	mvn.w	ip, #3
 800904a:	ebac 0c03 	sub.w	ip, ip, r3
 800904e:	f103 011c 	add.w	r1, r3, #28
 8009052:	f103 001b 	add.w	r0, r3, #27
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8009056:	42b7      	cmp	r7, r6
          inbuffer[k-1]=inbuffer[k];
 8009058:	f103 0205 	add.w	r2, r3, #5
 800905c:	44b4      	add	ip, r6
      offset += length_st_strings;
 800905e:	4633      	mov	r3, r6
 8009060:	4421      	add	r1, r4
 8009062:	4420      	add	r0, r4
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8009064:	d207      	bcs.n	8009076 <spinOnce+0x4c6>
 8009066:	4296      	cmp	r6, r2
 8009068:	bf2c      	ite	cs
 800906a:	4662      	movcs	r2, ip
 800906c:	2201      	movcc	r2, #1
 800906e:	9601      	str	r6, [sp, #4]
 8009070:	f000 fb67 	bl	8009742 <memmove>
 8009074:	9b01      	ldr	r3, [sp, #4]
      this->st_strings = (char *)(inbuffer + offset-1);
 8009076:	481d      	ldr	r0, [pc, #116]	; (80090ec <spinOnce+0x53c>)
      inbuffer[offset+length_st_strings-1]=0;
 8009078:	4426      	add	r6, r4
 800907a:	f04f 0100 	mov.w	r1, #0
 800907e:	75f1      	strb	r1, [r6, #23]
      this->st_strings = (char *)(inbuffer + offset-1);
 8009080:	1e7a      	subs	r2, r7, #1
 8009082:	4402      	add	r2, r0
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8009084:	f8d4 152c 	ldr.w	r1, [r4, #1324]	; 0x52c
 8009088:	9800      	ldr	r0, [sp, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800908a:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800908e:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
      for( uint32_t i = 0; i < strings_length; i++){
 8009092:	f8d4 2524 	ldr.w	r2, [r4, #1316]	; 0x524
 8009096:	1c41      	adds	r1, r0, #1
 8009098:	428a      	cmp	r2, r1
 800909a:	9100      	str	r1, [sp, #0]
 800909c:	d8c6      	bhi.n	800902c <spinOnce+0x47c>
 800909e:	9e02      	ldr	r6, [sp, #8]
            param_recieved = true;
 80090a0:	2301      	movs	r3, #1
 80090a2:	f884 3504 	strb.w	r3, [r4, #1284]	; 0x504
 80090a6:	e5ad      	b.n	8008c04 <spinOnce+0x54>
              subscribers[topic_ - 100]->callback(message_in);
 80090a8:	4910      	ldr	r1, [pc, #64]	; (80090ec <spinOnce+0x53c>)
 80090aa:	4798      	blx	r3
 80090ac:	e5aa      	b.n	8008c04 <spinOnce+0x54>
      for( uint32_t i = 0; i < ints_length; i++){
 80090ae:	230c      	movs	r3, #12
 80090b0:	210b      	movs	r1, #11
 80090b2:	9301      	str	r3, [sp, #4]
 80090b4:	230a      	movs	r3, #10
 80090b6:	e9cd 3102 	strd	r3, r1, [sp, #8]
 80090ba:	2309      	movs	r3, #9
 80090bc:	9300      	str	r3, [sp, #0]
 80090be:	2306      	movs	r3, #6
 80090c0:	2208      	movs	r2, #8
 80090c2:	f04f 0c07 	mov.w	ip, #7
 80090c6:	9304      	str	r3, [sp, #16]
 80090c8:	2105      	movs	r1, #5
 80090ca:	2004      	movs	r0, #4
 80090cc:	e739      	b.n	8008f42 <spinOnce+0x392>
            requestSyncTime();
 80090ce:	4805      	ldr	r0, [pc, #20]	; (80090e4 <spinOnce+0x534>)
 80090d0:	f7ff f820 	bl	8008114 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80090d4:	4803      	ldr	r0, [pc, #12]	; (80090e4 <spinOnce+0x534>)
 80090d6:	f7ff f855 	bl	8008184 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80090da:	f8c4 64f8 	str.w	r6, [r4, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 80090de:	f8c4 64fc 	str.w	r6, [r4, #1276]	; 0x4fc
 80090e2:	e56c      	b.n	8008bbe <spinOnce+0xe>
 80090e4:	20004554 	.word	0x20004554
 80090e8:	20004a70 	.word	0x20004a70
 80090ec:	2000456c 	.word	0x2000456c

080090f0 <_GLOBAL__sub_I_rb>:
 80090f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NodeHandle_() : configured_(false)
 80090f4:	4dc6      	ldr	r5, [pc, #792]	; (8009410 <_GLOBAL__sub_I_rb+0x320>)
      strings_length(0), strings(NULL)
 80090f6:	4bc7      	ldr	r3, [pc, #796]	; (8009414 <_GLOBAL__sub_I_rb+0x324>)
 80090f8:	4ac7      	ldr	r2, [pc, #796]	; (8009418 <_GLOBAL__sub_I_rb+0x328>)
 80090fa:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
 80090fe:	2400      	movs	r4, #0
 8009100:	2764      	movs	r7, #100	; 0x64
 8009102:	602a      	str	r2, [r5, #0]
 8009104:	f505 6083 	add.w	r0, r5, #1048	; 0x418
 8009108:	463a      	mov	r2, r7
 800910a:	4621      	mov	r1, r4
 800910c:	f8c5 4524 	str.w	r4, [r5, #1316]	; 0x524
 8009110:	f8c5 452c 	str.w	r4, [r5, #1324]	; 0x52c
 8009114:	f44f 7600 	mov.w	r6, #512	; 0x200
 8009118:	f885 44f4 	strb.w	r4, [r5, #1268]	; 0x4f4
 800911c:	f000 fb2a 	bl	8009774 <memset>
 8009120:	463a      	mov	r2, r7
 8009122:	4621      	mov	r1, r4
 8009124:	f205 407c 	addw	r0, r5, #1148	; 0x47c
 8009128:	f000 fb24 	bl	8009774 <memset>
 800912c:	4632      	mov	r2, r6
 800912e:	4621      	mov	r1, r4
 8009130:	f105 0018 	add.w	r0, r5, #24
 8009134:	f000 fb1e 	bl	8009774 <memset>
 8009138:	4632      	mov	r2, r6
 800913a:	4621      	mov	r1, r4
 800913c:	f505 7006 	add.w	r0, r5, #536	; 0x218
 8009140:	f000 fb18 	bl	8009774 <memset>
      data(0)
 8009144:	49b5      	ldr	r1, [pc, #724]	; (800941c <_GLOBAL__sub_I_rb+0x32c>)
    req_param_resp.ints_length = 0;
 8009146:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 800914a:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
    req_param_resp.floats_length = 0;
 800914e:	f8c5 4518 	str.w	r4, [r5, #1304]	; 0x518
    req_param_resp.floats = NULL;
 8009152:	f8c5 4520 	str.w	r4, [r5, #1312]	; 0x520
    spin_timeout_ = 0;
 8009156:	616c      	str	r4, [r5, #20]
 8009158:	460d      	mov	r5, r1
 800915a:	710c      	strb	r4, [r1, #4]
 800915c:	49b0      	ldr	r1, [pc, #704]	; (8009420 <_GLOBAL__sub_I_rb+0x330>)
 800915e:	6029      	str	r1, [r5, #0]
 8009160:	4db0      	ldr	r5, [pc, #704]	; (8009424 <_GLOBAL__sub_I_rb+0x334>)
      range(0)
 8009162:	4bb1      	ldr	r3, [pc, #708]	; (8009428 <_GLOBAL__sub_I_rb+0x338>)
 8009164:	6029      	str	r1, [r5, #0]
      data(0)
 8009166:	49b1      	ldr	r1, [pc, #708]	; (800942c <_GLOBAL__sub_I_rb+0x33c>)
 8009168:	712c      	strb	r4, [r5, #4]
 800916a:	4db1      	ldr	r5, [pc, #708]	; (8009430 <_GLOBAL__sub_I_rb+0x340>)
 800916c:	600d      	str	r5, [r1, #0]
 800916e:	710c      	strb	r4, [r1, #4]
      z(0)
 8009170:	49b0      	ldr	r1, [pc, #704]	; (8009434 <_GLOBAL__sub_I_rb+0x344>)
 8009172:	4db1      	ldr	r5, [pc, #708]	; (8009438 <_GLOBAL__sub_I_rb+0x348>)
      frame_id("")
 8009174:	4eb1      	ldr	r6, [pc, #708]	; (800943c <_GLOBAL__sub_I_rb+0x34c>)
 8009176:	48b2      	ldr	r0, [pc, #712]	; (8009440 <_GLOBAL__sub_I_rb+0x350>)
 8009178:	f8df 9360 	ldr.w	r9, [pc, #864]	; 80094dc <_GLOBAL__sub_I_rb+0x3ec>
 800917c:	4ab1      	ldr	r2, [pc, #708]	; (8009444 <_GLOBAL__sub_I_rb+0x354>)
 800917e:	600d      	str	r5, [r1, #0]
 8009180:	f04f 0a00 	mov.w	sl, #0
 8009184:	f8c1 a004 	str.w	sl, [r1, #4]
 8009188:	f8c1 a008 	str.w	sl, [r1, #8]
 800918c:	f8c1 a00c 	str.w	sl, [r1, #12]
 8009190:	49ad      	ldr	r1, [pc, #692]	; (8009448 <_GLOBAL__sub_I_rb+0x358>)
 8009192:	4fae      	ldr	r7, [pc, #696]	; (800944c <_GLOBAL__sub_I_rb+0x35c>)
 8009194:	f8df c348 	ldr.w	ip, [pc, #840]	; 80094e0 <_GLOBAL__sub_I_rb+0x3f0>
 8009198:	6015      	str	r5, [r2, #0]
 800919a:	e9c9 3600 	strd	r3, r6, [r9]
 800919e:	4dac      	ldr	r5, [pc, #688]	; (8009450 <_GLOBAL__sub_I_rb+0x360>)
 80091a0:	f8c2 a004 	str.w	sl, [r2, #4]
 80091a4:	e9c1 3600 	strd	r3, r6, [r1]
 80091a8:	f8c2 a008 	str.w	sl, [r2, #8]
 80091ac:	f8c2 a00c 	str.w	sl, [r2, #12]
 80091b0:	e9c9 4004 	strd	r4, r0, [r9, #16]
 80091b4:	f8c9 a01c 	str.w	sl, [r9, #28]
 80091b8:	f8c9 a020 	str.w	sl, [r9, #32]
 80091bc:	f8c9 a024 	str.w	sl, [r9, #36]	; 0x24
 80091c0:	f8c9 a028 	str.w	sl, [r9, #40]	; 0x28
 80091c4:	e9c9 4402 	strd	r4, r4, [r9, #8]
 80091c8:	f889 4018 	strb.w	r4, [r9, #24]
 80091cc:	e9c1 4402 	strd	r4, r4, [r1, #8]
 80091d0:	e9c1 4004 	strd	r4, r0, [r1, #16]
 80091d4:	f8c1 a01c 	str.w	sl, [r1, #28]
 80091d8:	f8c1 a020 	str.w	sl, [r1, #32]
 80091dc:	f8c1 a024 	str.w	sl, [r1, #36]	; 0x24
 80091e0:	f8c1 a028 	str.w	sl, [r1, #40]	; 0x28
 80091e4:	760c      	strb	r4, [r1, #24]
 80091e6:	499b      	ldr	r1, [pc, #620]	; (8009454 <_GLOBAL__sub_I_rb+0x364>)
 80091e8:	f8c7 a01c 	str.w	sl, [r7, #28]
 80091ec:	e9c7 3600 	strd	r3, r6, [r7]
 80091f0:	e9c5 3600 	strd	r3, r6, [r5]
 80091f4:	e9cc 3600 	strd	r3, r6, [ip]
 80091f8:	e9c7 4004 	strd	r4, r0, [r7, #16]
 80091fc:	f8c7 a020 	str.w	sl, [r7, #32]
 8009200:	f8c7 a024 	str.w	sl, [r7, #36]	; 0x24
 8009204:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
 8009208:	e9c5 4004 	strd	r4, r0, [r5, #16]
 800920c:	f8c5 a01c 	str.w	sl, [r5, #28]
 8009210:	f8c5 a020 	str.w	sl, [r5, #32]
 8009214:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8009218:	f8c5 a028 	str.w	sl, [r5, #40]	; 0x28
 800921c:	e9c7 4402 	strd	r4, r4, [r7, #8]
 8009220:	763c      	strb	r4, [r7, #24]
 8009222:	e9c5 4402 	strd	r4, r4, [r5, #8]
 8009226:	762c      	strb	r4, [r5, #24]
 8009228:	e9cc 4402 	strd	r4, r4, [ip, #8]
 800922c:	e9c1 3600 	strd	r3, r6, [r1]
 8009230:	e9c1 4004 	strd	r4, r0, [r1, #16]
 8009234:	f8c1 a01c 	str.w	sl, [r1, #28]
 8009238:	f8c1 a020 	str.w	sl, [r1, #32]
 800923c:	f8c1 a024 	str.w	sl, [r1, #36]	; 0x24
 8009240:	f8c1 a028 	str.w	sl, [r1, #40]	; 0x28
 8009244:	e9c1 4402 	strd	r4, r4, [r1, #8]
 8009248:	760c      	strb	r4, [r1, #24]
 800924a:	4983      	ldr	r1, [pc, #524]	; (8009458 <_GLOBAL__sub_I_rb+0x368>)
 800924c:	4d83      	ldr	r5, [pc, #524]	; (800945c <_GLOBAL__sub_I_rb+0x36c>)
 800924e:	f8c1 a01c 	str.w	sl, [r1, #28]
 8009252:	e9c1 3600 	strd	r3, r6, [r1]
 8009256:	e9c1 4004 	strd	r4, r0, [r1, #16]
 800925a:	f8c1 a020 	str.w	sl, [r1, #32]
 800925e:	f8c1 a024 	str.w	sl, [r1, #36]	; 0x24
 8009262:	f8c1 a028 	str.w	sl, [r1, #40]	; 0x28
 8009266:	e9c1 4402 	strd	r4, r4, [r1, #8]
 800926a:	760c      	strb	r4, [r1, #24]
 800926c:	497c      	ldr	r1, [pc, #496]	; (8009460 <_GLOBAL__sub_I_rb+0x370>)
 800926e:	f8df e274 	ldr.w	lr, [pc, #628]	; 80094e4 <_GLOBAL__sub_I_rb+0x3f4>
 8009272:	f8df b274 	ldr.w	fp, [pc, #628]	; 80094e8 <_GLOBAL__sub_I_rb+0x3f8>
 8009276:	f8df 8274 	ldr.w	r8, [pc, #628]	; 80094ec <_GLOBAL__sub_I_rb+0x3fc>
 800927a:	f8cc a01c 	str.w	sl, [ip, #28]
 800927e:	e9c5 3600 	strd	r3, r6, [r5]
 8009282:	e9cc 4004 	strd	r4, r0, [ip, #16]
 8009286:	f8cc a020 	str.w	sl, [ip, #32]
 800928a:	f8cc a024 	str.w	sl, [ip, #36]	; 0x24
 800928e:	f8cc a028 	str.w	sl, [ip, #40]	; 0x28
 8009292:	f88c 4018 	strb.w	r4, [ip, #24]
 8009296:	e9c5 4402 	strd	r4, r4, [r5, #8]
 800929a:	e9c5 4004 	strd	r4, r0, [r5, #16]
 800929e:	f8c5 a01c 	str.w	sl, [r5, #28]
 80092a2:	f8c5 a020 	str.w	sl, [r5, #32]
 80092a6:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 80092aa:	f8c5 a028 	str.w	sl, [r5, #40]	; 0x28
 80092ae:	762c      	strb	r4, [r5, #24]
    endpoint_(endpoint) {};
 80092b0:	4d6c      	ldr	r5, [pc, #432]	; (8009464 <_GLOBAL__sub_I_rb+0x374>)
 80092b2:	f8c1 a01c 	str.w	sl, [r1, #28]
 80092b6:	e9c1 3600 	strd	r3, r6, [r1]
 80092ba:	e9c1 4004 	strd	r4, r0, [r1, #16]
 80092be:	f8c1 a020 	str.w	sl, [r1, #32]
 80092c2:	f8c1 a024 	str.w	sl, [r1, #36]	; 0x24
 80092c6:	f8c1 a028 	str.w	sl, [r1, #40]	; 0x28
 80092ca:	e9c1 4402 	strd	r4, r4, [r1, #8]
 80092ce:	760c      	strb	r4, [r1, #24]
 80092d0:	4965      	ldr	r1, [pc, #404]	; (8009468 <_GLOBAL__sub_I_rb+0x378>)
 80092d2:	f8c8 a01c 	str.w	sl, [r8, #28]
 80092d6:	e9c8 3600 	strd	r3, r6, [r8]
 80092da:	e9ce 3600 	strd	r3, r6, [lr]
 80092de:	e9c8 4004 	strd	r4, r0, [r8, #16]
 80092e2:	f8c8 a020 	str.w	sl, [r8, #32]
 80092e6:	f8c8 a024 	str.w	sl, [r8, #36]	; 0x24
 80092ea:	f8c8 a028 	str.w	sl, [r8, #40]	; 0x28
 80092ee:	e9c8 4402 	strd	r4, r4, [r8, #8]
 80092f2:	f888 4018 	strb.w	r4, [r8, #24]
 80092f6:	f8ce 4008 	str.w	r4, [lr, #8]
 80092fa:	606a      	str	r2, [r5, #4]
 80092fc:	f8ce 0014 	str.w	r0, [lr, #20]
 8009300:	4a5a      	ldr	r2, [pc, #360]	; (800946c <_GLOBAL__sub_I_rb+0x37c>)
 8009302:	f8cb 0014 	str.w	r0, [fp, #20]
 8009306:	4845      	ldr	r0, [pc, #276]	; (800941c <_GLOBAL__sub_I_rb+0x32c>)
 8009308:	602a      	str	r2, [r5, #0]
 800930a:	6048      	str	r0, [r1, #4]
 800930c:	4a58      	ldr	r2, [pc, #352]	; (8009470 <_GLOBAL__sub_I_rb+0x380>)
 800930e:	4859      	ldr	r0, [pc, #356]	; (8009474 <_GLOBAL__sub_I_rb+0x384>)
 8009310:	6008      	str	r0, [r1, #0]
 8009312:	f8cb 3000 	str.w	r3, [fp]
 8009316:	e9cb 6401 	strd	r6, r4, [fp, #4]
 800931a:	4b57      	ldr	r3, [pc, #348]	; (8009478 <_GLOBAL__sub_I_rb+0x388>)
 800931c:	610c      	str	r4, [r1, #16]
 800931e:	4e57      	ldr	r6, [pc, #348]	; (800947c <_GLOBAL__sub_I_rb+0x38c>)
 8009320:	4944      	ldr	r1, [pc, #272]	; (8009434 <_GLOBAL__sub_I_rb+0x344>)
 8009322:	6051      	str	r1, [r2, #4]
 8009324:	6016      	str	r6, [r2, #0]
 8009326:	6114      	str	r4, [r2, #16]
 8009328:	4e55      	ldr	r6, [pc, #340]	; (8009480 <_GLOBAL__sub_I_rb+0x390>)
 800932a:	4a56      	ldr	r2, [pc, #344]	; (8009484 <_GLOBAL__sub_I_rb+0x394>)
 800932c:	6059      	str	r1, [r3, #4]
 800932e:	601a      	str	r2, [r3, #0]
 8009330:	612c      	str	r4, [r5, #16]
 8009332:	611c      	str	r4, [r3, #16]
 8009334:	4d54      	ldr	r5, [pc, #336]	; (8009488 <_GLOBAL__sub_I_rb+0x398>)
 8009336:	4b55      	ldr	r3, [pc, #340]	; (800948c <_GLOBAL__sub_I_rb+0x39c>)
 8009338:	6033      	str	r3, [r6, #0]
 800933a:	493c      	ldr	r1, [pc, #240]	; (800942c <_GLOBAL__sub_I_rb+0x33c>)
 800933c:	4b39      	ldr	r3, [pc, #228]	; (8009424 <_GLOBAL__sub_I_rb+0x334>)
 800933e:	4854      	ldr	r0, [pc, #336]	; (8009490 <_GLOBAL__sub_I_rb+0x3a0>)
 8009340:	f8ce a01c 	str.w	sl, [lr, #28]
 8009344:	f8ce a020 	str.w	sl, [lr, #32]
 8009348:	f8ce a024 	str.w	sl, [lr, #36]	; 0x24
 800934c:	f8ce a028 	str.w	sl, [lr, #40]	; 0x28
 8009350:	f8cb a01c 	str.w	sl, [fp, #28]
 8009354:	f8cb a020 	str.w	sl, [fp, #32]
 8009358:	f8cb a024 	str.w	sl, [fp, #36]	; 0x24
 800935c:	f8cb a028 	str.w	sl, [fp, #40]	; 0x28
 8009360:	e9ce 4403 	strd	r4, r4, [lr, #12]
 8009364:	f88e 4018 	strb.w	r4, [lr, #24]
 8009368:	e9cb 4403 	strd	r4, r4, [fp, #12]
 800936c:	f88b 4018 	strb.w	r4, [fp, #24]
 8009370:	6073      	str	r3, [r6, #4]
 8009372:	6069      	str	r1, [r5, #4]
 8009374:	4947      	ldr	r1, [pc, #284]	; (8009494 <_GLOBAL__sub_I_rb+0x3a4>)
 8009376:	6029      	str	r1, [r5, #0]
 8009378:	4933      	ldr	r1, [pc, #204]	; (8009448 <_GLOBAL__sub_I_rb+0x358>)
 800937a:	6041      	str	r1, [r0, #4]
 800937c:	4946      	ldr	r1, [pc, #280]	; (8009498 <_GLOBAL__sub_I_rb+0x3a8>)
 800937e:	6001      	str	r1, [r0, #0]
 8009380:	6104      	str	r4, [r0, #16]
 8009382:	4846      	ldr	r0, [pc, #280]	; (800949c <_GLOBAL__sub_I_rb+0x3ac>)
    endpoint_(endpoint)
 8009384:	4a46      	ldr	r2, [pc, #280]	; (80094a0 <_GLOBAL__sub_I_rb+0x3b0>)
 8009386:	6047      	str	r7, [r0, #4]
 8009388:	4f46      	ldr	r7, [pc, #280]	; (80094a4 <_GLOBAL__sub_I_rb+0x3b4>)
 800938a:	6007      	str	r7, [r0, #0]
 800938c:	6104      	str	r4, [r0, #16]
 800938e:	4846      	ldr	r0, [pc, #280]	; (80094a8 <_GLOBAL__sub_I_rb+0x3b8>)
 8009390:	4f2f      	ldr	r7, [pc, #188]	; (8009450 <_GLOBAL__sub_I_rb+0x360>)
 8009392:	6047      	str	r7, [r0, #4]
 8009394:	4f45      	ldr	r7, [pc, #276]	; (80094ac <_GLOBAL__sub_I_rb+0x3bc>)
 8009396:	6007      	str	r7, [r0, #0]
 8009398:	6104      	str	r4, [r0, #16]
 800939a:	4845      	ldr	r0, [pc, #276]	; (80094b0 <_GLOBAL__sub_I_rb+0x3c0>)
 800939c:	4f45      	ldr	r7, [pc, #276]	; (80094b4 <_GLOBAL__sub_I_rb+0x3c4>)
 800939e:	f8c0 c004 	str.w	ip, [r0, #4]
 80093a2:	6007      	str	r7, [r0, #0]
 80093a4:	6104      	str	r4, [r0, #16]
 80093a6:	481e      	ldr	r0, [pc, #120]	; (8009420 <_GLOBAL__sub_I_rb+0x330>)
 80093a8:	60d0      	str	r0, [r2, #12]
 80093aa:	4843      	ldr	r0, [pc, #268]	; (80094b8 <_GLOBAL__sub_I_rb+0x3c8>)
 80093ac:	4b43      	ldr	r3, [pc, #268]	; (80094bc <_GLOBAL__sub_I_rb+0x3cc>)
 80093ae:	6150      	str	r0, [r2, #20]
    topic_ = topic_name;
 80093b0:	4843      	ldr	r0, [pc, #268]	; (80094c0 <_GLOBAL__sub_I_rb+0x3d0>)
 80093b2:	6090      	str	r0, [r2, #8]
 80093b4:	481a      	ldr	r0, [pc, #104]	; (8009420 <_GLOBAL__sub_I_rb+0x330>)
 80093b6:	f8df a138 	ldr.w	sl, [pc, #312]	; 80094f0 <_GLOBAL__sub_I_rb+0x400>
 80093ba:	60d8      	str	r0, [r3, #12]
    endpoint_(endpoint)
 80093bc:	4841      	ldr	r0, [pc, #260]	; (80094c4 <_GLOBAL__sub_I_rb+0x3d4>)
 80093be:	f8df c134 	ldr.w	ip, [pc, #308]	; 80094f4 <_GLOBAL__sub_I_rb+0x404>
 80093c2:	6158      	str	r0, [r3, #20]
 80093c4:	6134      	str	r4, [r6, #16]
 80093c6:	2701      	movs	r7, #1
 80093c8:	4e3f      	ldr	r6, [pc, #252]	; (80094c8 <_GLOBAL__sub_I_rb+0x3d8>)
    topic_ = topic_name;
 80093ca:	4840      	ldr	r0, [pc, #256]	; (80094cc <_GLOBAL__sub_I_rb+0x3dc>)
 80093cc:	f8ca 9004 	str.w	r9, [sl, #4]
 80093d0:	6098      	str	r0, [r3, #8]
    endpoint_(endpoint)
 80093d2:	f8c3 c000 	str.w	ip, [r3]
 80093d6:	612c      	str	r4, [r5, #16]
 80093d8:	f8df 911c 	ldr.w	r9, [pc, #284]	; 80094f8 <_GLOBAL__sub_I_rb+0x408>
 80093dc:	4d3c      	ldr	r5, [pc, #240]	; (80094d0 <_GLOBAL__sub_I_rb+0x3e0>)
 80093de:	741c      	strb	r4, [r3, #16]
 80093e0:	619f      	str	r7, [r3, #24]
 80093e2:	483c      	ldr	r0, [pc, #240]	; (80094d4 <_GLOBAL__sub_I_rb+0x3e4>)
 80093e4:	4b1b      	ldr	r3, [pc, #108]	; (8009454 <_GLOBAL__sub_I_rb+0x364>)
 80093e6:	f8ca 9000 	str.w	r9, [sl]
 80093ea:	f8c2 c000 	str.w	ip, [r2]
 80093ee:	f8ca 4010 	str.w	r4, [sl, #16]
 80093f2:	7414      	strb	r4, [r2, #16]
 80093f4:	f8df a104 	ldr.w	sl, [pc, #260]	; 80094fc <_GLOBAL__sub_I_rb+0x40c>
 80093f8:	6197      	str	r7, [r2, #24]
 80093fa:	6030      	str	r0, [r6, #0]
 80093fc:	6073      	str	r3, [r6, #4]
 80093fe:	4b16      	ldr	r3, [pc, #88]	; (8009458 <_GLOBAL__sub_I_rb+0x368>)
 8009400:	606b      	str	r3, [r5, #4]
 8009402:	4b17      	ldr	r3, [pc, #92]	; (8009460 <_GLOBAL__sub_I_rb+0x370>)
 8009404:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8009500 <_GLOBAL__sub_I_rb+0x410>
 8009408:	4833      	ldr	r0, [pc, #204]	; (80094d8 <_GLOBAL__sub_I_rb+0x3e8>)
 800940a:	f8ca 3004 	str.w	r3, [sl, #4]
 800940e:	e079      	b.n	8009504 <_GLOBAL__sub_I_rb+0x414>
 8009410:	20004554 	.word	0x20004554
 8009414:	08009ad8 	.word	0x08009ad8
 8009418:	08009b68 	.word	0x08009b68
 800941c:	20004b28 	.word	0x20004b28
 8009420:	08009af0 	.word	0x08009af0
 8009424:	20004b20 	.word	0x20004b20
 8009428:	08009b50 	.word	0x08009b50
 800942c:	20004b04 	.word	0x20004b04
 8009430:	08009b08 	.word	0x08009b08
 8009434:	20004244 	.word	0x20004244
 8009438:	08009b20 	.word	0x08009b20
 800943c:	08009b38 	.word	0x08009b38
 8009440:	08009e38 	.word	0x08009e38
 8009444:	20004220 	.word	0x20004220
 8009448:	200043f4 	.word	0x200043f4
 800944c:	20004420 	.word	0x20004420
 8009450:	2000444c 	.word	0x2000444c
 8009454:	200044a4 	.word	0x200044a4
 8009458:	200044d0 	.word	0x200044d0
 800945c:	200044fc 	.word	0x200044fc
 8009460:	20004528 	.word	0x20004528
 8009464:	2000420c 	.word	0x2000420c
 8009468:	20004ac0 	.word	0x20004ac0
 800946c:	08009b98 	.word	0x08009b98
 8009470:	20004b0c 	.word	0x20004b0c
 8009474:	08009ba0 	.word	0x08009ba0
 8009478:	20004230 	.word	0x20004230
 800947c:	08009b8c 	.word	0x08009b8c
 8009480:	20004a90 	.word	0x20004a90
 8009484:	08009b90 	.word	0x08009b90
 8009488:	20004af0 	.word	0x20004af0
 800948c:	08009bac 	.word	0x08009bac
 8009490:	200042a4 	.word	0x200042a4
 8009494:	08009bd8 	.word	0x08009bd8
 8009498:	08009bf8 	.word	0x08009bf8
 800949c:	200042b8 	.word	0x200042b8
 80094a0:	20004ad4 	.word	0x20004ad4
 80094a4:	08009c0c 	.word	0x08009c0c
 80094a8:	200042cc 	.word	0x200042cc
 80094ac:	08009c20 	.word	0x08009c20
 80094b0:	200042e0 	.word	0x200042e0
 80094b4:	08009c34 	.word	0x08009c34
 80094b8:	08006fdd 	.word	0x08006fdd
 80094bc:	20004aa4 	.word	0x20004aa4
 80094c0:	08009bb8 	.word	0x08009bb8
 80094c4:	08007015 	.word	0x08007015
 80094c8:	200042f4 	.word	0x200042f4
 80094cc:	08009bc8 	.word	0x08009bc8
 80094d0:	20004308 	.word	0x20004308
 80094d4:	08009c48 	.word	0x08009c48
 80094d8:	08009c5c 	.word	0x08009c5c
 80094dc:	20004344 	.word	0x20004344
 80094e0:	20004478 	.word	0x20004478
 80094e4:	2000439c 	.word	0x2000439c
 80094e8:	200043c8 	.word	0x200043c8
 80094ec:	20004370 	.word	0x20004370
 80094f0:	20004254 	.word	0x20004254
 80094f4:	08009b7c 	.word	0x08009b7c
 80094f8:	08009be4 	.word	0x08009be4
 80094fc:	20004330 	.word	0x20004330
 8009500:	20004268 	.word	0x20004268
 8009504:	4b12      	ldr	r3, [pc, #72]	; (8009550 <_GLOBAL__sub_I_rb+0x460>)
 8009506:	6028      	str	r0, [r5, #0]
 8009508:	f8ca 3000 	str.w	r3, [sl]
 800950c:	4811      	ldr	r0, [pc, #68]	; (8009554 <_GLOBAL__sub_I_rb+0x464>)
 800950e:	4b12      	ldr	r3, [pc, #72]	; (8009558 <_GLOBAL__sub_I_rb+0x468>)
 8009510:	4912      	ldr	r1, [pc, #72]	; (800955c <_GLOBAL__sub_I_rb+0x46c>)
 8009512:	612c      	str	r4, [r5, #16]
 8009514:	f8c9 3000 	str.w	r3, [r9]
 8009518:	4d11      	ldr	r5, [pc, #68]	; (8009560 <_GLOBAL__sub_I_rb+0x470>)
 800951a:	4b12      	ldr	r3, [pc, #72]	; (8009564 <_GLOBAL__sub_I_rb+0x474>)
 800951c:	f8df c050 	ldr.w	ip, [pc, #80]	; 8009570 <_GLOBAL__sub_I_rb+0x480>
 8009520:	4a11      	ldr	r2, [pc, #68]	; (8009568 <_GLOBAL__sub_I_rb+0x478>)
 8009522:	6045      	str	r5, [r0, #4]
 8009524:	4d11      	ldr	r5, [pc, #68]	; (800956c <_GLOBAL__sub_I_rb+0x47c>)
 8009526:	6134      	str	r4, [r6, #16]
 8009528:	6104      	str	r4, [r0, #16]
 800952a:	6005      	str	r5, [r0, #0]
 800952c:	f8ca 4010 	str.w	r4, [sl, #16]
 8009530:	f8c9 8004 	str.w	r8, [r9, #4]
 8009534:	f8c9 4010 	str.w	r4, [r9, #16]
 8009538:	f8c3 e004 	str.w	lr, [r3, #4]
 800953c:	611c      	str	r4, [r3, #16]
 800953e:	f8c3 c000 	str.w	ip, [r3]
 8009542:	f8c1 b004 	str.w	fp, [r1, #4]
 8009546:	610c      	str	r4, [r1, #16]
 8009548:	600a      	str	r2, [r1, #0]
 800954a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800954e:	bf00      	nop
 8009550:	08009c84 	.word	0x08009c84
 8009554:	2000431c 	.word	0x2000431c
 8009558:	08009c98 	.word	0x08009c98
 800955c:	20004290 	.word	0x20004290
 8009560:	200044fc 	.word	0x200044fc
 8009564:	2000427c 	.word	0x2000427c
 8009568:	08009cc0 	.word	0x08009cc0
 800956c:	08009c70 	.word	0x08009c70
 8009570:	08009cac 	.word	0x08009cac

08009574 <_Z8NBT_initP5nbt_tm>:
#include "stm32f4xx_hal.h"
#include "nbt.h"

//NBT - Non Blocking Timer
void NBT_init(nbt_t * nbt, uint32_t interval)
{
 8009574:	b510      	push	{r4, lr}
	nbt->timeout = interval;
 8009576:	6001      	str	r1, [r0, #0]
{
 8009578:	4604      	mov	r4, r0
	nbt->previousMillis = HAL_GetTick();
 800957a:	f7f6 ffd7 	bl	800052c <HAL_GetTick>
 800957e:	6060      	str	r0, [r4, #4]
}
 8009580:	bd10      	pop	{r4, pc}
 8009582:	bf00      	nop

08009584 <_Z11NBT_handlerP5nbt_t>:

bool NBT_handler(nbt_t * nbt)
{
 8009584:	b510      	push	{r4, lr}
 8009586:	4604      	mov	r4, r0
	if(HAL_GetTick()-nbt->previousMillis>nbt->timeout){
 8009588:	f7f6 ffd0 	bl	800052c <HAL_GetTick>
 800958c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009590:	1ac0      	subs	r0, r0, r3
 8009592:	4290      	cmp	r0, r2
 8009594:	d802      	bhi.n	800959c <_Z11NBT_handlerP5nbt_t+0x18>
		nbt->previousMillis = HAL_GetTick();
		return true;
	}

	return false;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	bd10      	pop	{r4, pc}
		nbt->previousMillis = HAL_GetTick();
 800959c:	f7f6 ffc6 	bl	800052c <HAL_GetTick>
		return true;
 80095a0:	2301      	movs	r3, #1
		nbt->previousMillis = HAL_GetTick();
 80095a2:	6060      	str	r0, [r4, #4]
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	bd10      	pop	{r4, pc}

080095a8 <_Z18ringbuffer_putcharP10ringbufferh>:

#define ASSERT(EX)                                                         \

__inline enum ringbuffer_state  ringbuffer_status(struct  ringbuffer *rb)
{
	if (rb->read_index == rb->write_index) {
 80095a8:	8882      	ldrh	r2, [r0, #4]
 80095aa:	88c3      	ldrh	r3, [r0, #6]
 80095ac:	0852      	lsrs	r2, r2, #1
 80095ae:	085b      	lsrs	r3, r3, #1
 80095b0:	429a      	cmp	r2, r3

/**
 * put a character into ring buffer
 */
uint32_t  ringbuffer_putchar(struct  ringbuffer *rb, const uint8_t ch)
{
 80095b2:	b430      	push	{r4, r5}
    ASSERT(rb != NULL);

    /* whether has enough space */
	if (! ringbuffer_empty_space(rb))
 80095b4:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
	if (rb->read_index == rb->write_index) {
 80095b8:	d01c      	beq.n	80095f4 <_Z18ringbuffer_putcharP10ringbufferh+0x4c>
		if (rb->write_index > rb->read_index)
 80095ba:	d314      	bcc.n	80095e6 <_Z18ringbuffer_putcharP10ringbufferh+0x3e>
			return rb->buffer_size - (rb->read_index - rb->write_index);
 80095bc:	195c      	adds	r4, r3, r5
 80095be:	1aa2      	subs	r2, r4, r2
 80095c0:	b292      	uxth	r2, r2
	if (! ringbuffer_empty_space(rb))
 80095c2:	4295      	cmp	r5, r2
 80095c4:	d013      	beq.n	80095ee <_Z18ringbuffer_putcharP10ringbufferh+0x46>
		return 0;

	rb->buffer_ptr[rb->write_index] = ch;
 80095c6:	6802      	ldr	r2, [r0, #0]
 80095c8:	54d1      	strb	r1, [r2, r3]

	/* flip mirror */
	if (rb->write_index == rb->buffer_size - 1) {
 80095ca:	88c3      	ldrh	r3, [r0, #6]
 80095cc:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80095d0:	085a      	lsrs	r2, r3, #1
 80095d2:	3901      	subs	r1, #1
 80095d4:	428a      	cmp	r2, r1
 80095d6:	d017      	beq.n	8009608 <_Z18ringbuffer_putcharP10ringbufferh+0x60>
		rb->write_mirror = ~rb->write_mirror;
		rb->write_index = 0;
	} else {
		rb->write_index++;
 80095d8:	3201      	adds	r2, #1
 80095da:	f362 034f 	bfi	r3, r2, #1, #15
 80095de:	80c3      	strh	r3, [r0, #6]
	}

	return 1;
}
 80095e0:	bc30      	pop	{r4, r5}
	return 1;
 80095e2:	2001      	movs	r0, #1
}
 80095e4:	4770      	bx	lr
			return rb->write_index - rb->read_index;
 80095e6:	1a9a      	subs	r2, r3, r2
 80095e8:	b292      	uxth	r2, r2
	if (! ringbuffer_empty_space(rb))
 80095ea:	4295      	cmp	r5, r2
 80095ec:	d1eb      	bne.n	80095c6 <_Z18ringbuffer_putcharP10ringbufferh+0x1e>
		return 0;
 80095ee:	2000      	movs	r0, #0
}
 80095f0:	bc30      	pop	{r4, r5}
 80095f2:	4770      	bx	lr
		if (rb->read_mirror == rb->write_mirror)
 80095f4:	7904      	ldrb	r4, [r0, #4]
 80095f6:	7982      	ldrb	r2, [r0, #6]
 80095f8:	f004 0401 	and.w	r4, r4, #1
 80095fc:	f002 0201 	and.w	r2, r2, #1
 8009600:	4294      	cmp	r4, r2
 8009602:	d00f      	beq.n	8009624 <_Z18ringbuffer_putcharP10ringbufferh+0x7c>
 8009604:	b2aa      	uxth	r2, r5
 8009606:	e7dc      	b.n	80095c2 <_Z18ringbuffer_putcharP10ringbufferh+0x1a>
		rb->write_mirror = ~rb->write_mirror;
 8009608:	7983      	ldrb	r3, [r0, #6]
 800960a:	f3c3 0200 	ubfx	r2, r3, #0, #1
 800960e:	43d2      	mvns	r2, r2
 8009610:	f362 0300 	bfi	r3, r2, #0, #1
 8009614:	7183      	strb	r3, [r0, #6]
		rb->write_index = 0;
 8009616:	88c3      	ldrh	r3, [r0, #6]
 8009618:	f36f 034f 	bfc	r3, #1, #15
 800961c:	80c3      	strh	r3, [r0, #6]
}
 800961e:	bc30      	pop	{r4, r5}
	return 1;
 8009620:	2001      	movs	r0, #1
}
 8009622:	4770      	bx	lr
		if (rb->read_mirror == rb->write_mirror)
 8009624:	2200      	movs	r2, #0
 8009626:	e7cc      	b.n	80095c2 <_Z18ringbuffer_putcharP10ringbufferh+0x1a>

08009628 <_Z18ringbuffer_getcharP10ringbufferPh>:
	if (rb->read_index == rb->write_index) {
 8009628:	8882      	ldrh	r2, [r0, #4]
 800962a:	88c3      	ldrh	r3, [r0, #6]
 800962c:	0852      	lsrs	r2, r2, #1
 800962e:	085b      	lsrs	r3, r3, #1
 8009630:	429a      	cmp	r2, r3

/**
 * get a character from a ringbuffer
 */
uint32_t  ringbuffer_getchar(struct  ringbuffer *rb, uint8_t *ch)
{
 8009632:	b410      	push	{r4}
	if (rb->read_index == rb->write_index) {
 8009634:	d017      	beq.n	8009666 <_Z18ringbuffer_getcharP10ringbufferPh+0x3e>
		if (rb->write_index > rb->read_index)
 8009636:	d301      	bcc.n	800963c <_Z18ringbuffer_getcharP10ringbufferPh+0x14>
			return rb->buffer_size - (rb->read_index - rb->write_index);
 8009638:	8904      	ldrh	r4, [r0, #8]
 800963a:	4423      	add	r3, r4
 800963c:	1a9b      	subs	r3, r3, r2
 800963e:	b29b      	uxth	r3, r3
    ASSERT(rb != NULL);

    /* ringbuffer is empty */
    if (! ringbuffer_data_len(rb))
 8009640:	b1e3      	cbz	r3, 800967c <_Z18ringbuffer_getcharP10ringbufferPh+0x54>
        return 0;

    /* put character */
    *ch = rb->buffer_ptr[rb->read_index];
 8009642:	6803      	ldr	r3, [r0, #0]
 8009644:	5c9b      	ldrb	r3, [r3, r2]
 8009646:	700b      	strb	r3, [r1, #0]

    if (rb->read_index == rb->buffer_size-1)
 8009648:	8883      	ldrh	r3, [r0, #4]
 800964a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800964e:	085a      	lsrs	r2, r3, #1
 8009650:	3901      	subs	r1, #1
 8009652:	428a      	cmp	r2, r1
 8009654:	d016      	beq.n	8009684 <_Z18ringbuffer_getcharP10ringbufferPh+0x5c>
        rb->read_mirror = ~rb->read_mirror;
        rb->read_index = 0;
    }
    else
    {
        rb->read_index++;
 8009656:	3201      	adds	r2, #1
 8009658:	f362 034f 	bfi	r3, r2, #1, #15
 800965c:	8083      	strh	r3, [r0, #4]
    }

    return 1;
}
 800965e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return 1;
 8009662:	2001      	movs	r0, #1
}
 8009664:	4770      	bx	lr
		if (rb->read_mirror == rb->write_mirror)
 8009666:	7904      	ldrb	r4, [r0, #4]
 8009668:	7983      	ldrb	r3, [r0, #6]
 800966a:	f004 0401 	and.w	r4, r4, #1
 800966e:	f003 0301 	and.w	r3, r3, #1
 8009672:	429c      	cmp	r4, r3
 8009674:	d015      	beq.n	80096a2 <_Z18ringbuffer_getcharP10ringbufferPh+0x7a>
		return rb->buffer_size;
 8009676:	8903      	ldrh	r3, [r0, #8]
    if (! ringbuffer_data_len(rb))
 8009678:	2b00      	cmp	r3, #0
 800967a:	d1e2      	bne.n	8009642 <_Z18ringbuffer_getcharP10ringbufferPh+0x1a>
        return 0;
 800967c:	4618      	mov	r0, r3
}
 800967e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009682:	4770      	bx	lr
        rb->read_mirror = ~rb->read_mirror;
 8009684:	7903      	ldrb	r3, [r0, #4]
}
 8009686:	f85d 4b04 	ldr.w	r4, [sp], #4
        rb->read_mirror = ~rb->read_mirror;
 800968a:	f3c3 0200 	ubfx	r2, r3, #0, #1
 800968e:	43d2      	mvns	r2, r2
 8009690:	f362 0300 	bfi	r3, r2, #0, #1
 8009694:	7103      	strb	r3, [r0, #4]
        rb->read_index = 0;
 8009696:	8883      	ldrh	r3, [r0, #4]
 8009698:	f36f 034f 	bfc	r3, #1, #15
 800969c:	8083      	strh	r3, [r0, #4]
    return 1;
 800969e:	2001      	movs	r0, #1
}
 80096a0:	4770      	bx	lr
        return 0;
 80096a2:	2000      	movs	r0, #0
}
 80096a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop

080096ac <_Z15ringbuffer_initP10ringbufferPhs>:
{
    ASSERT(rb != NULL);
    ASSERT(size > 0);

    /* initialize read and write index */
    rb->read_mirror = rb->read_index = 0;
 80096ac:	2300      	movs	r3, #0
    rb->write_mirror = rb->write_index = 0;

    /* set buffer pool and size */
    rb->buffer_ptr = pool;
 80096ae:	6001      	str	r1, [r0, #0]
    rb->buffer_size = size; //ALIGN_DOWN(size, ALIGN_SIZE);
 80096b0:	8102      	strh	r2, [r0, #8]
    rb->read_mirror = rb->read_index = 0;
 80096b2:	6043      	str	r3, [r0, #4]
}
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop

080096b8 <__errno>:
 80096b8:	4b01      	ldr	r3, [pc, #4]	; (80096c0 <__errno+0x8>)
 80096ba:	6818      	ldr	r0, [r3, #0]
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	20000184 	.word	0x20000184

080096c4 <__libc_init_array>:
 80096c4:	b570      	push	{r4, r5, r6, lr}
 80096c6:	4e0d      	ldr	r6, [pc, #52]	; (80096fc <__libc_init_array+0x38>)
 80096c8:	4c0d      	ldr	r4, [pc, #52]	; (8009700 <__libc_init_array+0x3c>)
 80096ca:	1ba4      	subs	r4, r4, r6
 80096cc:	10a4      	asrs	r4, r4, #2
 80096ce:	2500      	movs	r5, #0
 80096d0:	42a5      	cmp	r5, r4
 80096d2:	d109      	bne.n	80096e8 <__libc_init_array+0x24>
 80096d4:	4e0b      	ldr	r6, [pc, #44]	; (8009704 <__libc_init_array+0x40>)
 80096d6:	4c0c      	ldr	r4, [pc, #48]	; (8009708 <__libc_init_array+0x44>)
 80096d8:	f000 f944 	bl	8009964 <_init>
 80096dc:	1ba4      	subs	r4, r4, r6
 80096de:	10a4      	asrs	r4, r4, #2
 80096e0:	2500      	movs	r5, #0
 80096e2:	42a5      	cmp	r5, r4
 80096e4:	d105      	bne.n	80096f2 <__libc_init_array+0x2e>
 80096e6:	bd70      	pop	{r4, r5, r6, pc}
 80096e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80096ec:	4798      	blx	r3
 80096ee:	3501      	adds	r5, #1
 80096f0:	e7ee      	b.n	80096d0 <__libc_init_array+0xc>
 80096f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80096f6:	4798      	blx	r3
 80096f8:	3501      	adds	r5, #1
 80096fa:	e7f2      	b.n	80096e2 <__libc_init_array+0x1e>
 80096fc:	08009f28 	.word	0x08009f28
 8009700:	08009f28 	.word	0x08009f28
 8009704:	08009f28 	.word	0x08009f28
 8009708:	08009f30 	.word	0x08009f30

0800970c <malloc>:
 800970c:	4b02      	ldr	r3, [pc, #8]	; (8009718 <malloc+0xc>)
 800970e:	4601      	mov	r1, r0
 8009710:	6818      	ldr	r0, [r3, #0]
 8009712:	f000 b885 	b.w	8009820 <_malloc_r>
 8009716:	bf00      	nop
 8009718:	20000184 	.word	0x20000184

0800971c <free>:
 800971c:	4b02      	ldr	r3, [pc, #8]	; (8009728 <free+0xc>)
 800971e:	4601      	mov	r1, r0
 8009720:	6818      	ldr	r0, [r3, #0]
 8009722:	f000 b82f 	b.w	8009784 <_free_r>
 8009726:	bf00      	nop
 8009728:	20000184 	.word	0x20000184

0800972c <memcpy>:
 800972c:	b510      	push	{r4, lr}
 800972e:	1e43      	subs	r3, r0, #1
 8009730:	440a      	add	r2, r1
 8009732:	4291      	cmp	r1, r2
 8009734:	d100      	bne.n	8009738 <memcpy+0xc>
 8009736:	bd10      	pop	{r4, pc}
 8009738:	f811 4b01 	ldrb.w	r4, [r1], #1
 800973c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009740:	e7f7      	b.n	8009732 <memcpy+0x6>

08009742 <memmove>:
 8009742:	4288      	cmp	r0, r1
 8009744:	b510      	push	{r4, lr}
 8009746:	eb01 0302 	add.w	r3, r1, r2
 800974a:	d807      	bhi.n	800975c <memmove+0x1a>
 800974c:	1e42      	subs	r2, r0, #1
 800974e:	4299      	cmp	r1, r3
 8009750:	d00a      	beq.n	8009768 <memmove+0x26>
 8009752:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009756:	f802 4f01 	strb.w	r4, [r2, #1]!
 800975a:	e7f8      	b.n	800974e <memmove+0xc>
 800975c:	4283      	cmp	r3, r0
 800975e:	d9f5      	bls.n	800974c <memmove+0xa>
 8009760:	1881      	adds	r1, r0, r2
 8009762:	1ad2      	subs	r2, r2, r3
 8009764:	42d3      	cmn	r3, r2
 8009766:	d100      	bne.n	800976a <memmove+0x28>
 8009768:	bd10      	pop	{r4, pc}
 800976a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800976e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009772:	e7f7      	b.n	8009764 <memmove+0x22>

08009774 <memset>:
 8009774:	4402      	add	r2, r0
 8009776:	4603      	mov	r3, r0
 8009778:	4293      	cmp	r3, r2
 800977a:	d100      	bne.n	800977e <memset+0xa>
 800977c:	4770      	bx	lr
 800977e:	f803 1b01 	strb.w	r1, [r3], #1
 8009782:	e7f9      	b.n	8009778 <memset+0x4>

08009784 <_free_r>:
 8009784:	b538      	push	{r3, r4, r5, lr}
 8009786:	4605      	mov	r5, r0
 8009788:	2900      	cmp	r1, #0
 800978a:	d045      	beq.n	8009818 <_free_r+0x94>
 800978c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009790:	1f0c      	subs	r4, r1, #4
 8009792:	2b00      	cmp	r3, #0
 8009794:	bfb8      	it	lt
 8009796:	18e4      	addlt	r4, r4, r3
 8009798:	f000 f8b4 	bl	8009904 <__malloc_lock>
 800979c:	4a1f      	ldr	r2, [pc, #124]	; (800981c <_free_r+0x98>)
 800979e:	6813      	ldr	r3, [r2, #0]
 80097a0:	4610      	mov	r0, r2
 80097a2:	b933      	cbnz	r3, 80097b2 <_free_r+0x2e>
 80097a4:	6063      	str	r3, [r4, #4]
 80097a6:	6014      	str	r4, [r2, #0]
 80097a8:	4628      	mov	r0, r5
 80097aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097ae:	f000 b8aa 	b.w	8009906 <__malloc_unlock>
 80097b2:	42a3      	cmp	r3, r4
 80097b4:	d90c      	bls.n	80097d0 <_free_r+0x4c>
 80097b6:	6821      	ldr	r1, [r4, #0]
 80097b8:	1862      	adds	r2, r4, r1
 80097ba:	4293      	cmp	r3, r2
 80097bc:	bf04      	itt	eq
 80097be:	681a      	ldreq	r2, [r3, #0]
 80097c0:	685b      	ldreq	r3, [r3, #4]
 80097c2:	6063      	str	r3, [r4, #4]
 80097c4:	bf04      	itt	eq
 80097c6:	1852      	addeq	r2, r2, r1
 80097c8:	6022      	streq	r2, [r4, #0]
 80097ca:	6004      	str	r4, [r0, #0]
 80097cc:	e7ec      	b.n	80097a8 <_free_r+0x24>
 80097ce:	4613      	mov	r3, r2
 80097d0:	685a      	ldr	r2, [r3, #4]
 80097d2:	b10a      	cbz	r2, 80097d8 <_free_r+0x54>
 80097d4:	42a2      	cmp	r2, r4
 80097d6:	d9fa      	bls.n	80097ce <_free_r+0x4a>
 80097d8:	6819      	ldr	r1, [r3, #0]
 80097da:	1858      	adds	r0, r3, r1
 80097dc:	42a0      	cmp	r0, r4
 80097de:	d10b      	bne.n	80097f8 <_free_r+0x74>
 80097e0:	6820      	ldr	r0, [r4, #0]
 80097e2:	4401      	add	r1, r0
 80097e4:	1858      	adds	r0, r3, r1
 80097e6:	4282      	cmp	r2, r0
 80097e8:	6019      	str	r1, [r3, #0]
 80097ea:	d1dd      	bne.n	80097a8 <_free_r+0x24>
 80097ec:	6810      	ldr	r0, [r2, #0]
 80097ee:	6852      	ldr	r2, [r2, #4]
 80097f0:	605a      	str	r2, [r3, #4]
 80097f2:	4401      	add	r1, r0
 80097f4:	6019      	str	r1, [r3, #0]
 80097f6:	e7d7      	b.n	80097a8 <_free_r+0x24>
 80097f8:	d902      	bls.n	8009800 <_free_r+0x7c>
 80097fa:	230c      	movs	r3, #12
 80097fc:	602b      	str	r3, [r5, #0]
 80097fe:	e7d3      	b.n	80097a8 <_free_r+0x24>
 8009800:	6820      	ldr	r0, [r4, #0]
 8009802:	1821      	adds	r1, r4, r0
 8009804:	428a      	cmp	r2, r1
 8009806:	bf04      	itt	eq
 8009808:	6811      	ldreq	r1, [r2, #0]
 800980a:	6852      	ldreq	r2, [r2, #4]
 800980c:	6062      	str	r2, [r4, #4]
 800980e:	bf04      	itt	eq
 8009810:	1809      	addeq	r1, r1, r0
 8009812:	6021      	streq	r1, [r4, #0]
 8009814:	605c      	str	r4, [r3, #4]
 8009816:	e7c7      	b.n	80097a8 <_free_r+0x24>
 8009818:	bd38      	pop	{r3, r4, r5, pc}
 800981a:	bf00      	nop
 800981c:	20004b30 	.word	0x20004b30

08009820 <_malloc_r>:
 8009820:	b570      	push	{r4, r5, r6, lr}
 8009822:	1ccd      	adds	r5, r1, #3
 8009824:	f025 0503 	bic.w	r5, r5, #3
 8009828:	3508      	adds	r5, #8
 800982a:	2d0c      	cmp	r5, #12
 800982c:	bf38      	it	cc
 800982e:	250c      	movcc	r5, #12
 8009830:	2d00      	cmp	r5, #0
 8009832:	4606      	mov	r6, r0
 8009834:	db01      	blt.n	800983a <_malloc_r+0x1a>
 8009836:	42a9      	cmp	r1, r5
 8009838:	d903      	bls.n	8009842 <_malloc_r+0x22>
 800983a:	230c      	movs	r3, #12
 800983c:	6033      	str	r3, [r6, #0]
 800983e:	2000      	movs	r0, #0
 8009840:	bd70      	pop	{r4, r5, r6, pc}
 8009842:	f000 f85f 	bl	8009904 <__malloc_lock>
 8009846:	4a21      	ldr	r2, [pc, #132]	; (80098cc <_malloc_r+0xac>)
 8009848:	6814      	ldr	r4, [r2, #0]
 800984a:	4621      	mov	r1, r4
 800984c:	b991      	cbnz	r1, 8009874 <_malloc_r+0x54>
 800984e:	4c20      	ldr	r4, [pc, #128]	; (80098d0 <_malloc_r+0xb0>)
 8009850:	6823      	ldr	r3, [r4, #0]
 8009852:	b91b      	cbnz	r3, 800985c <_malloc_r+0x3c>
 8009854:	4630      	mov	r0, r6
 8009856:	f000 f845 	bl	80098e4 <_sbrk_r>
 800985a:	6020      	str	r0, [r4, #0]
 800985c:	4629      	mov	r1, r5
 800985e:	4630      	mov	r0, r6
 8009860:	f000 f840 	bl	80098e4 <_sbrk_r>
 8009864:	1c43      	adds	r3, r0, #1
 8009866:	d124      	bne.n	80098b2 <_malloc_r+0x92>
 8009868:	230c      	movs	r3, #12
 800986a:	6033      	str	r3, [r6, #0]
 800986c:	4630      	mov	r0, r6
 800986e:	f000 f84a 	bl	8009906 <__malloc_unlock>
 8009872:	e7e4      	b.n	800983e <_malloc_r+0x1e>
 8009874:	680b      	ldr	r3, [r1, #0]
 8009876:	1b5b      	subs	r3, r3, r5
 8009878:	d418      	bmi.n	80098ac <_malloc_r+0x8c>
 800987a:	2b0b      	cmp	r3, #11
 800987c:	d90f      	bls.n	800989e <_malloc_r+0x7e>
 800987e:	600b      	str	r3, [r1, #0]
 8009880:	50cd      	str	r5, [r1, r3]
 8009882:	18cc      	adds	r4, r1, r3
 8009884:	4630      	mov	r0, r6
 8009886:	f000 f83e 	bl	8009906 <__malloc_unlock>
 800988a:	f104 000b 	add.w	r0, r4, #11
 800988e:	1d23      	adds	r3, r4, #4
 8009890:	f020 0007 	bic.w	r0, r0, #7
 8009894:	1ac3      	subs	r3, r0, r3
 8009896:	d0d3      	beq.n	8009840 <_malloc_r+0x20>
 8009898:	425a      	negs	r2, r3
 800989a:	50e2      	str	r2, [r4, r3]
 800989c:	e7d0      	b.n	8009840 <_malloc_r+0x20>
 800989e:	428c      	cmp	r4, r1
 80098a0:	684b      	ldr	r3, [r1, #4]
 80098a2:	bf16      	itet	ne
 80098a4:	6063      	strne	r3, [r4, #4]
 80098a6:	6013      	streq	r3, [r2, #0]
 80098a8:	460c      	movne	r4, r1
 80098aa:	e7eb      	b.n	8009884 <_malloc_r+0x64>
 80098ac:	460c      	mov	r4, r1
 80098ae:	6849      	ldr	r1, [r1, #4]
 80098b0:	e7cc      	b.n	800984c <_malloc_r+0x2c>
 80098b2:	1cc4      	adds	r4, r0, #3
 80098b4:	f024 0403 	bic.w	r4, r4, #3
 80098b8:	42a0      	cmp	r0, r4
 80098ba:	d005      	beq.n	80098c8 <_malloc_r+0xa8>
 80098bc:	1a21      	subs	r1, r4, r0
 80098be:	4630      	mov	r0, r6
 80098c0:	f000 f810 	bl	80098e4 <_sbrk_r>
 80098c4:	3001      	adds	r0, #1
 80098c6:	d0cf      	beq.n	8009868 <_malloc_r+0x48>
 80098c8:	6025      	str	r5, [r4, #0]
 80098ca:	e7db      	b.n	8009884 <_malloc_r+0x64>
 80098cc:	20004b30 	.word	0x20004b30
 80098d0:	20004b34 	.word	0x20004b34

080098d4 <realloc>:
 80098d4:	4b02      	ldr	r3, [pc, #8]	; (80098e0 <realloc+0xc>)
 80098d6:	460a      	mov	r2, r1
 80098d8:	4601      	mov	r1, r0
 80098da:	6818      	ldr	r0, [r3, #0]
 80098dc:	f000 b814 	b.w	8009908 <_realloc_r>
 80098e0:	20000184 	.word	0x20000184

080098e4 <_sbrk_r>:
 80098e4:	b538      	push	{r3, r4, r5, lr}
 80098e6:	4c06      	ldr	r4, [pc, #24]	; (8009900 <_sbrk_r+0x1c>)
 80098e8:	2300      	movs	r3, #0
 80098ea:	4605      	mov	r5, r0
 80098ec:	4608      	mov	r0, r1
 80098ee:	6023      	str	r3, [r4, #0]
 80098f0:	f7fc fed2 	bl	8006698 <_sbrk>
 80098f4:	1c43      	adds	r3, r0, #1
 80098f6:	d102      	bne.n	80098fe <_sbrk_r+0x1a>
 80098f8:	6823      	ldr	r3, [r4, #0]
 80098fa:	b103      	cbz	r3, 80098fe <_sbrk_r+0x1a>
 80098fc:	602b      	str	r3, [r5, #0]
 80098fe:	bd38      	pop	{r3, r4, r5, pc}
 8009900:	200065f0 	.word	0x200065f0

08009904 <__malloc_lock>:
 8009904:	4770      	bx	lr

08009906 <__malloc_unlock>:
 8009906:	4770      	bx	lr

08009908 <_realloc_r>:
 8009908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800990a:	4607      	mov	r7, r0
 800990c:	4614      	mov	r4, r2
 800990e:	460e      	mov	r6, r1
 8009910:	b921      	cbnz	r1, 800991c <_realloc_r+0x14>
 8009912:	4611      	mov	r1, r2
 8009914:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009918:	f7ff bf82 	b.w	8009820 <_malloc_r>
 800991c:	b922      	cbnz	r2, 8009928 <_realloc_r+0x20>
 800991e:	f7ff ff31 	bl	8009784 <_free_r>
 8009922:	4625      	mov	r5, r4
 8009924:	4628      	mov	r0, r5
 8009926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009928:	f000 f814 	bl	8009954 <_malloc_usable_size_r>
 800992c:	42a0      	cmp	r0, r4
 800992e:	d20f      	bcs.n	8009950 <_realloc_r+0x48>
 8009930:	4621      	mov	r1, r4
 8009932:	4638      	mov	r0, r7
 8009934:	f7ff ff74 	bl	8009820 <_malloc_r>
 8009938:	4605      	mov	r5, r0
 800993a:	2800      	cmp	r0, #0
 800993c:	d0f2      	beq.n	8009924 <_realloc_r+0x1c>
 800993e:	4631      	mov	r1, r6
 8009940:	4622      	mov	r2, r4
 8009942:	f7ff fef3 	bl	800972c <memcpy>
 8009946:	4631      	mov	r1, r6
 8009948:	4638      	mov	r0, r7
 800994a:	f7ff ff1b 	bl	8009784 <_free_r>
 800994e:	e7e9      	b.n	8009924 <_realloc_r+0x1c>
 8009950:	4635      	mov	r5, r6
 8009952:	e7e7      	b.n	8009924 <_realloc_r+0x1c>

08009954 <_malloc_usable_size_r>:
 8009954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009958:	1f18      	subs	r0, r3, #4
 800995a:	2b00      	cmp	r3, #0
 800995c:	bfbc      	itt	lt
 800995e:	580b      	ldrlt	r3, [r1, r0]
 8009960:	18c0      	addlt	r0, r0, r3
 8009962:	4770      	bx	lr

08009964 <_init>:
 8009964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009966:	bf00      	nop
 8009968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800996a:	bc08      	pop	{r3}
 800996c:	469e      	mov	lr, r3
 800996e:	4770      	bx	lr

08009970 <_fini>:
 8009970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009972:	bf00      	nop
 8009974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009976:	bc08      	pop	{r3}
 8009978:	469e      	mov	lr, r3
 800997a:	4770      	bx	lr
