
STM32F405VGFULL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  0800968c  0800968c  0001968c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009b94  08009b94  00019b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08009b9c  08009b9c  00019b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009ba4  08009ba4  00019ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000000  08009ba8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
  8 .bss          00005b28  200001e4  200001e4  000201e4  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20005d0c  20005d0c  000201e4  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 11 .debug_info   00039df1  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00006ed3  00000000  00000000  0005a005  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001cd76  00000000  00000000  00060ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018a8  00000000  00000000  0007dc50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00004820  00000000  00000000  0007f4f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028097  00000000  00000000  00083d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c4e1  00000000  00000000  000abdaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4f3d  00000000  00000000  000c8290  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019d1cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052e0  00000000  00000000  0019d248  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009674 	.word	0x08009674

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08009674 	.word	0x08009674

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_Init+0x30>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80004ea:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80004f2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80004fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fc:	2003      	movs	r0, #3
 80004fe:	f000 fb8d 	bl	8000c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000502:	2000      	movs	r0, #0
 8000504:	f006 f90c 	bl	8006720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000508:	f006 f862 	bl	80065d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800050c:	2000      	movs	r0, #0
 800050e:	bd08      	pop	{r3, pc}
 8000510:	40023c00 	.word	0x40023c00

08000514 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000514:	4a03      	ldr	r2, [pc, #12]	; (8000524 <HAL_IncTick+0x10>)
 8000516:	4b04      	ldr	r3, [pc, #16]	; (8000528 <HAL_IncTick+0x14>)
 8000518:	6811      	ldr	r1, [r2, #0]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	440b      	add	r3, r1
 800051e:	6013      	str	r3, [r2, #0]
}
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	200048c0 	.word	0x200048c0
 8000528:	20000000 	.word	0x20000000

0800052c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800052c:	4b01      	ldr	r3, [pc, #4]	; (8000534 <HAL_GetTick+0x8>)
 800052e:	6818      	ldr	r0, [r3, #0]
}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	200048c0 	.word	0x200048c0

08000538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000538:	b538      	push	{r3, r4, r5, lr}
 800053a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800053c:	f7ff fff6 	bl	800052c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000540:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000542:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000544:	d002      	beq.n	800054c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000546:	4b04      	ldr	r3, [pc, #16]	; (8000558 <HAL_Delay+0x20>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800054c:	f7ff ffee 	bl	800052c <HAL_GetTick>
 8000550:	1b40      	subs	r0, r0, r5
 8000552:	42a0      	cmp	r0, r4
 8000554:	d3fa      	bcc.n	800054c <HAL_Delay+0x14>
  {
  }
}
 8000556:	bd38      	pop	{r3, r4, r5, pc}
 8000558:	20000000 	.word	0x20000000

0800055c <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800055c:	2800      	cmp	r0, #0
 800055e:	d07c      	beq.n	800065a <HAL_CAN_Init+0xfe>
{
 8000560:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000562:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000566:	4604      	mov	r4, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d073      	beq.n	8000654 <HAL_CAN_Init+0xf8>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800056c:	6822      	ldr	r2, [r4, #0]
 800056e:	6813      	ldr	r3, [r2, #0]
 8000570:	f023 0302 	bic.w	r3, r3, #2
 8000574:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000576:	f7ff ffd9 	bl	800052c <HAL_GetTick>
 800057a:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800057c:	e004      	b.n	8000588 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800057e:	f7ff ffd5 	bl	800052c <HAL_GetTick>
 8000582:	1b40      	subs	r0, r0, r5
 8000584:	280a      	cmp	r0, #10
 8000586:	d85c      	bhi.n	8000642 <HAL_CAN_Init+0xe6>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000588:	6823      	ldr	r3, [r4, #0]
 800058a:	685a      	ldr	r2, [r3, #4]
 800058c:	0791      	lsls	r1, r2, #30
 800058e:	d4f6      	bmi.n	800057e <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	f042 0201 	orr.w	r2, r2, #1
 8000596:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000598:	f7ff ffc8 	bl	800052c <HAL_GetTick>
 800059c:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800059e:	e004      	b.n	80005aa <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80005a0:	f7ff ffc4 	bl	800052c <HAL_GetTick>
 80005a4:	1b40      	subs	r0, r0, r5
 80005a6:	280a      	cmp	r0, #10
 80005a8:	d84b      	bhi.n	8000642 <HAL_CAN_Init+0xe6>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80005aa:	6823      	ldr	r3, [r4, #0]
 80005ac:	685a      	ldr	r2, [r3, #4]
 80005ae:	07d2      	lsls	r2, r2, #31
 80005b0:	d5f6      	bpl.n	80005a0 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80005b2:	7e22      	ldrb	r2, [r4, #24]
 80005b4:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	bf0c      	ite	eq
 80005ba:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80005be:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80005c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80005c4:	7e62      	ldrb	r2, [r4, #25]
 80005c6:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	bf0c      	ite	eq
 80005cc:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80005d0:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80005d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80005d6:	7ea2      	ldrb	r2, [r4, #26]
 80005d8:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	bf0c      	ite	eq
 80005de:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80005e2:	f022 0220 	bicne.w	r2, r2, #32
 80005e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80005e8:	7ee2      	ldrb	r2, [r4, #27]
 80005ea:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	bf0c      	ite	eq
 80005f0:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80005f4:	f042 0210 	orrne.w	r2, r2, #16
 80005f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80005fa:	7f22      	ldrb	r2, [r4, #28]
 80005fc:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	bf0c      	ite	eq
 8000602:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000606:	f022 0208 	bicne.w	r2, r2, #8
 800060a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800060c:	7f62      	ldrb	r2, [r4, #29]
 800060e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	bf0c      	ite	eq
 8000614:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000618:	f022 0204 	bicne.w	r2, r2, #4
 800061c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800061e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8000622:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
 8000626:	430a      	orrs	r2, r1
 8000628:	6861      	ldr	r1, [r4, #4]
 800062a:	432a      	orrs	r2, r5
 800062c:	4302      	orrs	r2, r0
 800062e:	3901      	subs	r1, #1
 8000630:	430a      	orrs	r2, r1

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000632:	2501      	movs	r5, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000634:	2100      	movs	r1, #0
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000636:	61da      	str	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 8000638:	4608      	mov	r0, r1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800063a:	6261      	str	r1, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800063c:	f884 5020 	strb.w	r5, [r4, #32]
}
 8000640:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000642:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000644:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064a:	6263      	str	r3, [r4, #36]	; 0x24
      return HAL_ERROR;
 800064c:	2001      	movs	r0, #1
      hcan->State = HAL_CAN_STATE_ERROR;
 800064e:	f884 2020 	strb.w	r2, [r4, #32]
}
 8000652:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8000654:	f005 ffdc 	bl	8006610 <HAL_CAN_MspInit>
 8000658:	e788      	b.n	800056c <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 800065a:	2001      	movs	r0, #1
}
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000660:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8000664:	3b01      	subs	r3, #1
 8000666:	2b01      	cmp	r3, #1
 8000668:	d905      	bls.n	8000676 <HAL_CAN_ConfigFilter+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800066a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800066c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000670:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000672:	2001      	movs	r0, #1
  }
}
 8000674:	4770      	bx	lr
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000676:	4b3c      	ldr	r3, [pc, #240]	; (8000768 <HAL_CAN_ConfigFilter+0x108>)
 8000678:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800067c:	f042 0201 	orr.w	r2, r2, #1
{
 8000680:	b4f0      	push	{r4, r5, r6, r7}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000682:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000686:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800068a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800068e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000692:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000696:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8000698:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800069c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80006a0:	694a      	ldr	r2, [r1, #20]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80006a2:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80006a6:	2401      	movs	r4, #1
 80006a8:	f002 001f 	and.w	r0, r2, #31
 80006ac:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80006b0:	43c4      	mvns	r4, r0
 80006b2:	4025      	ands	r5, r4
 80006b4:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80006b8:	69cd      	ldr	r5, [r1, #28]
 80006ba:	2d00      	cmp	r5, #0
 80006bc:	d03a      	beq.n	8000734 <HAL_CAN_ConfigFilter+0xd4>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80006be:	2d01      	cmp	r5, #1
 80006c0:	d115      	bne.n	80006ee <HAL_CAN_ConfigFilter+0x8e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80006c2:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 80006c6:	4305      	orrs	r5, r0
 80006c8:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
 80006cc:	00d2      	lsls	r2, r2, #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80006ce:	680f      	ldr	r7, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80006d0:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80006d2:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80006d4:	898b      	ldrh	r3, [r1, #12]
 80006d6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80006da:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80006de:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80006e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80006e6:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80006ea:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80006ee:	698b      	ldr	r3, [r1, #24]
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80006f0:	4a1d      	ldr	r2, [pc, #116]	; (8000768 <HAL_CAN_ConfigFilter+0x108>)
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80006f2:	bb9b      	cbnz	r3, 800075c <HAL_CAN_ConfigFilter+0xfc>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80006f4:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 80006f8:	4023      	ands	r3, r4
 80006fa:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80006fe:	690b      	ldr	r3, [r1, #16]
 8000700:	bb2b      	cbnz	r3, 800074e <HAL_CAN_ConfigFilter+0xee>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <HAL_CAN_ConfigFilter+0x108>)
 8000704:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000708:	4014      	ands	r4, r2
 800070a:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800070e:	6a0b      	ldr	r3, [r1, #32]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d105      	bne.n	8000720 <HAL_CAN_ConfigFilter+0xc0>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000714:	4a14      	ldr	r2, [pc, #80]	; (8000768 <HAL_CAN_ConfigFilter+0x108>)
 8000716:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
 800071a:	4318      	orrs	r0, r3
 800071c:	f8c2 021c 	str.w	r0, [r2, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000720:	4a11      	ldr	r2, [pc, #68]	; (8000768 <HAL_CAN_ConfigFilter+0x108>)
 8000722:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8000726:	f023 0301 	bic.w	r3, r3, #1
    return HAL_OK;
 800072a:	2000      	movs	r0, #0
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800072c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 8000730:	bcf0      	pop	{r4, r5, r6, r7}
 8000732:	4770      	bx	lr
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000734:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8000738:	4025      	ands	r5, r4
 800073a:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
 800073e:	00d2      	lsls	r2, r2, #3
 8000740:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000744:	68cf      	ldr	r7, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000746:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000748:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800074a:	880b      	ldrh	r3, [r1, #0]
 800074c:	e7c5      	b.n	80006da <HAL_CAN_ConfigFilter+0x7a>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800074e:	4a06      	ldr	r2, [pc, #24]	; (8000768 <HAL_CAN_ConfigFilter+0x108>)
 8000750:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8000754:	4303      	orrs	r3, r0
 8000756:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 800075a:	e7d8      	b.n	800070e <HAL_CAN_ConfigFilter+0xae>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800075c:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8000760:	4303      	orrs	r3, r0
 8000762:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 8000766:	e7ca      	b.n	80006fe <HAL_CAN_ConfigFilter+0x9e>
 8000768:	40006400 	.word	0x40006400

0800076c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800076c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800076e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d005      	beq.n	8000782 <HAL_CAN_Start+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000776:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000778:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800077c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800077e:	2001      	movs	r0, #1
  }
}
 8000780:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000782:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000784:	2302      	movs	r3, #2
 8000786:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800078a:	6813      	ldr	r3, [r2, #0]
 800078c:	f023 0301 	bic.w	r3, r3, #1
 8000790:	6013      	str	r3, [r2, #0]
 8000792:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8000794:	f7ff feca 	bl	800052c <HAL_GetTick>
 8000798:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800079a:	e004      	b.n	80007a6 <HAL_CAN_Start+0x3a>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800079c:	f7ff fec6 	bl	800052c <HAL_GetTick>
 80007a0:	1b40      	subs	r0, r0, r5
 80007a2:	280a      	cmp	r0, #10
 80007a4:	d807      	bhi.n	80007b6 <HAL_CAN_Start+0x4a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80007a6:	6823      	ldr	r3, [r4, #0]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	f013 0301 	ands.w	r3, r3, #1
 80007ae:	d1f5      	bne.n	800079c <HAL_CAN_Start+0x30>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80007b0:	6263      	str	r3, [r4, #36]	; 0x24
    return HAL_OK;
 80007b2:	4618      	mov	r0, r3
}
 80007b4:	bd38      	pop	{r3, r4, r5, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80007b8:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007be:	6263      	str	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 80007c0:	2001      	movs	r0, #1
        hcan->State = HAL_CAN_STATE_ERROR;
 80007c2:	f884 2020 	strb.w	r2, [r4, #32]
}
 80007c6:	bd38      	pop	{r3, r4, r5, pc}

080007c8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80007c8:	b470      	push	{r4, r5, r6}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80007ca:	f890 4020 	ldrb.w	r4, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80007ce:	6805      	ldr	r5, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80007d0:	3c01      	subs	r4, #1
 80007d2:	2c01      	cmp	r4, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80007d4:	68ae      	ldr	r6, [r5, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80007d6:	d906      	bls.n	80007e6 <HAL_CAN_AddTxMessage+0x1e>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80007d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80007da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007de:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80007e0:	2001      	movs	r0, #1
  }
}
 80007e2:	bc70      	pop	{r4, r5, r6}
 80007e4:	4770      	bx	lr
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80007e6:	f016 5fe0 	tst.w	r6, #469762048	; 0x1c000000
 80007ea:	d02e      	beq.n	800084a <HAL_CAN_AddTxMessage+0x82>
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80007ec:	f3c6 6601 	ubfx	r6, r6, #24, #2
      if (transmitmailbox > 2U)
 80007f0:	2e03      	cmp	r6, #3
 80007f2:	d031      	beq.n	8000858 <HAL_CAN_AddTxMessage+0x90>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80007f4:	2001      	movs	r0, #1
 80007f6:	40b0      	lsls	r0, r6
 80007f8:	6018      	str	r0, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 80007fa:	688b      	ldr	r3, [r1, #8]
 80007fc:	bb93      	cbnz	r3, 8000864 <HAL_CAN_AddTxMessage+0x9c>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80007fe:	680c      	ldr	r4, [r1, #0]
 8000800:	68c8      	ldr	r0, [r1, #12]
 8000802:	f106 0318 	add.w	r3, r6, #24
 8000806:	011b      	lsls	r3, r3, #4
 8000808:	ea40 5044 	orr.w	r0, r0, r4, lsl #21
 800080c:	50e8      	str	r0, [r5, r3]
      if (pHeader->TransmitGlobalTime == ENABLE)
 800080e:	7d08      	ldrb	r0, [r1, #20]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000810:	6909      	ldr	r1, [r1, #16]
 8000812:	0136      	lsls	r6, r6, #4
 8000814:	19ab      	adds	r3, r5, r6
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000816:	2801      	cmp	r0, #1
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000818:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 800081c:	d105      	bne.n	800082a <HAL_CAN_AddTxMessage+0x62>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800081e:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
 8000822:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000826:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800082a:	4435      	add	r5, r6
 800082c:	6851      	ldr	r1, [r2, #4]
 800082e:	f8c5 118c 	str.w	r1, [r5, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000832:	6812      	ldr	r2, [r2, #0]
 8000834:	f8c5 2188 	str.w	r2, [r5, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000838:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800083c:	f042 0201 	orr.w	r2, r2, #1
      return HAL_OK;
 8000840:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000842:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
 8000846:	bc70      	pop	{r4, r5, r6}
 8000848:	4770      	bx	lr
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800084a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800084c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000850:	6243      	str	r3, [r0, #36]	; 0x24
}
 8000852:	bc70      	pop	{r4, r5, r6}
      return HAL_ERROR;
 8000854:	2001      	movs	r0, #1
}
 8000856:	4770      	bx	lr
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000858:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800085a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800085e:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8000860:	2001      	movs	r0, #1
 8000862:	e7be      	b.n	80007e2 <HAL_CAN_AddTxMessage+0x1a>
                                                           pHeader->IDE |
 8000864:	68c8      	ldr	r0, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000866:	684c      	ldr	r4, [r1, #4]
                                                           pHeader->IDE |
 8000868:	4303      	orrs	r3, r0
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800086a:	f106 0018 	add.w	r0, r6, #24
 800086e:	0100      	lsls	r0, r0, #4
                                                           pHeader->IDE |
 8000870:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000874:	502b      	str	r3, [r5, r0]
 8000876:	e7ca      	b.n	800080e <HAL_CAN_AddTxMessage+0x46>

08000878 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 800087c:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000880:	3c01      	subs	r4, #1
 8000882:	2c01      	cmp	r4, #1
 8000884:	d906      	bls.n	8000894 <HAL_CAN_GetRxMessage+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000886:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800088c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800088e:	2001      	movs	r0, #1
  }
}
 8000890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000894:	6805      	ldr	r5, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000896:	2900      	cmp	r1, #0
 8000898:	d058      	beq.n	800094c <HAL_CAN_GetRxMessage+0xd4>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800089a:	692c      	ldr	r4, [r5, #16]
 800089c:	07a4      	lsls	r4, r4, #30
 800089e:	d058      	beq.n	8000952 <HAL_CAN_GetRxMessage+0xda>
 80008a0:	010c      	lsls	r4, r1, #4
 80008a2:	192e      	adds	r6, r5, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80008a4:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 80008a8:	f007 0704 	and.w	r7, r7, #4
 80008ac:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80008ae:	2f00      	cmp	r7, #0
 80008b0:	d15c      	bne.n	800096c <HAL_CAN_GetRxMessage+0xf4>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80008b2:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 80008b6:	0d7f      	lsrs	r7, r7, #21
 80008b8:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80008ba:	f8d6 e1b0 	ldr.w	lr, [r6, #432]	; 0x1b0
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80008be:	f8d6 c1b4 	ldr.w	ip, [r6, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80008c2:	f8d6 71b4 	ldr.w	r7, [r6, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80008c6:	f8d6 61b4 	ldr.w	r6, [r6, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80008ca:	4425      	add	r5, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80008cc:	f00e 0e02 	and.w	lr, lr, #2
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80008d0:	f8d5 81b8 	ldr.w	r8, [r5, #440]	; 0x1b8
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80008d4:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80008d8:	f00c 050f 	and.w	r5, ip, #15
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80008dc:	0c36      	lsrs	r6, r6, #16
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80008de:	e9c2 e503 	strd	lr, r5, [r2, #12]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80008e2:	e9c2 6705 	strd	r6, r7, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80008e6:	f883 8000 	strb.w	r8, [r3]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80008ea:	6802      	ldr	r2, [r0, #0]
 80008ec:	4422      	add	r2, r4
 80008ee:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80008f2:	0a12      	lsrs	r2, r2, #8
 80008f4:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80008f6:	6802      	ldr	r2, [r0, #0]
 80008f8:	4422      	add	r2, r4
 80008fa:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80008fe:	0c12      	lsrs	r2, r2, #16
 8000900:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000902:	6802      	ldr	r2, [r0, #0]
 8000904:	4422      	add	r2, r4
 8000906:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800090a:	0e12      	lsrs	r2, r2, #24
 800090c:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800090e:	6802      	ldr	r2, [r0, #0]
 8000910:	4422      	add	r2, r4
 8000912:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000916:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000918:	6802      	ldr	r2, [r0, #0]
 800091a:	4422      	add	r2, r4
 800091c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000920:	0a12      	lsrs	r2, r2, #8
 8000922:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000924:	6802      	ldr	r2, [r0, #0]
 8000926:	4422      	add	r2, r4
 8000928:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800092c:	0c12      	lsrs	r2, r2, #16
 800092e:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000930:	6802      	ldr	r2, [r0, #0]
 8000932:	4414      	add	r4, r2
 8000934:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8000938:	0e12      	lsrs	r2, r2, #24
 800093a:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800093c:	6802      	ldr	r2, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800093e:	b979      	cbnz	r1, 8000960 <HAL_CAN_GetRxMessage+0xe8>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000940:	68d3      	ldr	r3, [r2, #12]
 8000942:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 8000946:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000948:	60d3      	str	r3, [r2, #12]
 800094a:	e7a1      	b.n	8000890 <HAL_CAN_GetRxMessage+0x18>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800094c:	68ec      	ldr	r4, [r5, #12]
 800094e:	07a6      	lsls	r6, r4, #30
 8000950:	d1a6      	bne.n	80008a0 <HAL_CAN_GetRxMessage+0x28>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000952:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000954:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000958:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 800095a:	2001      	movs	r0, #1
}
 800095c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000960:	6913      	ldr	r3, [r2, #16]
 8000962:	f043 0320 	orr.w	r3, r3, #32
 8000966:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 8000968:	2000      	movs	r0, #0
 800096a:	e791      	b.n	8000890 <HAL_CAN_GetRxMessage+0x18>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800096c:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 8000970:	08ff      	lsrs	r7, r7, #3
 8000972:	6057      	str	r7, [r2, #4]
 8000974:	e7a1      	b.n	80008ba <HAL_CAN_GetRxMessage+0x42>
 8000976:	bf00      	nop

08000978 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000978:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800097c:	3b01      	subs	r3, #1
 800097e:	2b01      	cmp	r3, #1
 8000980:	d905      	bls.n	800098e <HAL_CAN_ActivateNotification+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000982:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000988:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800098a:	2001      	movs	r0, #1
  }
}
 800098c:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800098e:	6802      	ldr	r2, [r0, #0]
 8000990:	6953      	ldr	r3, [r2, #20]
 8000992:	4319      	orrs	r1, r3
 8000994:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8000996:	2000      	movs	r0, #0
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <HAL_CAN_TxMailbox0CompleteCallback>:
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop

080009a0 <HAL_CAN_TxMailbox1CompleteCallback>:
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <HAL_CAN_TxMailbox2CompleteCallback>:
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <HAL_CAN_TxMailbox0AbortCallback>:
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <HAL_CAN_TxMailbox1AbortCallback>:
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <HAL_CAN_TxMailbox2AbortCallback>:
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <HAL_CAN_RxFifo0FullCallback>:
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <HAL_CAN_RxFifo1MsgPendingCallback>:
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <HAL_CAN_RxFifo1FullCallback>:
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop

080009c0 <HAL_CAN_SleepCallback>:
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <HAL_CAN_WakeUpFromRxMsgCallback>:
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <HAL_CAN_ErrorCallback>:
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80009cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80009d0:	6803      	ldr	r3, [r0, #0]
 80009d2:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80009d4:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80009d8:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80009da:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80009de:	f8d3 9010 	ldr.w	r9, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80009e2:	f8d3 a018 	ldr.w	sl, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80009e6:	f014 0601 	ands.w	r6, r4, #1
{
 80009ea:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80009ec:	d025      	beq.n	8000a3a <HAL_CAN_IRQHandler+0x6e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80009ee:	f017 0601 	ands.w	r6, r7, #1
 80009f2:	f040 809c 	bne.w	8000b2e <HAL_CAN_IRQHandler+0x162>
 80009f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80009fe:	05f8      	lsls	r0, r7, #23
 8000a00:	d50d      	bpl.n	8000a1e <HAL_CAN_IRQHandler+0x52>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000a02:	682b      	ldr	r3, [r5, #0]
 8000a04:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a08:	6098      	str	r0, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000a0a:	05bb      	lsls	r3, r7, #22
 8000a0c:	f100 80c7 	bmi.w	8000b9e <HAL_CAN_IRQHandler+0x1d2>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000a10:	0578      	lsls	r0, r7, #21
 8000a12:	f100 80d7 	bmi.w	8000bc4 <HAL_CAN_IRQHandler+0x1f8>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000a16:	053a      	lsls	r2, r7, #20
 8000a18:	f140 80e8 	bpl.w	8000bec <HAL_CAN_IRQHandler+0x220>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000a1c:	460e      	mov	r6, r1
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000a1e:	03fb      	lsls	r3, r7, #15
 8000a20:	d50b      	bpl.n	8000a3a <HAL_CAN_IRQHandler+0x6e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000a22:	682b      	ldr	r3, [r5, #0]
 8000a24:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000a28:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000a2a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000a2c:	f100 80b3 	bmi.w	8000b96 <HAL_CAN_IRQHandler+0x1ca>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000a30:	0379      	lsls	r1, r7, #13
 8000a32:	f140 80c9 	bpl.w	8000bc8 <HAL_CAN_IRQHandler+0x1fc>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000a36:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000a3a:	0723      	lsls	r3, r4, #28
 8000a3c:	d502      	bpl.n	8000a44 <HAL_CAN_IRQHandler+0x78>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000a3e:	f01b 0f10 	tst.w	fp, #16
 8000a42:	d16e      	bne.n	8000b22 <HAL_CAN_IRQHandler+0x156>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000a44:	0767      	lsls	r7, r4, #29
 8000a46:	d502      	bpl.n	8000a4e <HAL_CAN_IRQHandler+0x82>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000a48:	f01b 0f08 	tst.w	fp, #8
 8000a4c:	d17f      	bne.n	8000b4e <HAL_CAN_IRQHandler+0x182>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000a4e:	07a0      	lsls	r0, r4, #30
 8000a50:	d504      	bpl.n	8000a5c <HAL_CAN_IRQHandler+0x90>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000a52:	682b      	ldr	r3, [r5, #0]
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	0799      	lsls	r1, r3, #30
 8000a58:	f040 808e 	bne.w	8000b78 <HAL_CAN_IRQHandler+0x1ac>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000a5c:	0662      	lsls	r2, r4, #25
 8000a5e:	d502      	bpl.n	8000a66 <HAL_CAN_IRQHandler+0x9a>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000a60:	f019 0f10 	tst.w	r9, #16
 8000a64:	d157      	bne.n	8000b16 <HAL_CAN_IRQHandler+0x14a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000a66:	06a3      	lsls	r3, r4, #26
 8000a68:	d503      	bpl.n	8000a72 <HAL_CAN_IRQHandler+0xa6>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000a6a:	f019 0f08 	tst.w	r9, #8
 8000a6e:	f040 8087 	bne.w	8000b80 <HAL_CAN_IRQHandler+0x1b4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000a72:	06e7      	lsls	r7, r4, #27
 8000a74:	d504      	bpl.n	8000a80 <HAL_CAN_IRQHandler+0xb4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000a76:	682b      	ldr	r3, [r5, #0]
 8000a78:	691b      	ldr	r3, [r3, #16]
 8000a7a:	0798      	lsls	r0, r3, #30
 8000a7c:	f040 8087 	bne.w	8000b8e <HAL_CAN_IRQHandler+0x1c2>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000a80:	03a1      	lsls	r1, r4, #14
 8000a82:	d502      	bpl.n	8000a8a <HAL_CAN_IRQHandler+0xbe>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000a84:	f018 0f10 	tst.w	r8, #16
 8000a88:	d168      	bne.n	8000b5c <HAL_CAN_IRQHandler+0x190>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000a8a:	03e2      	lsls	r2, r4, #15
 8000a8c:	d502      	bpl.n	8000a94 <HAL_CAN_IRQHandler+0xc8>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000a8e:	f018 0f08 	tst.w	r8, #8
 8000a92:	d16a      	bne.n	8000b6a <HAL_CAN_IRQHandler+0x19e>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000a94:	0423      	lsls	r3, r4, #16
 8000a96:	d535      	bpl.n	8000b04 <HAL_CAN_IRQHandler+0x138>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000a98:	f018 0f04 	tst.w	r8, #4
 8000a9c:	682b      	ldr	r3, [r5, #0]
 8000a9e:	d02f      	beq.n	8000b00 <HAL_CAN_IRQHandler+0x134>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000aa0:	05e7      	lsls	r7, r4, #23
 8000aa2:	d504      	bpl.n	8000aae <HAL_CAN_IRQHandler+0xe2>
 8000aa4:	f01a 0f01 	tst.w	sl, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000aa8:	bf18      	it	ne
 8000aaa:	f046 0601 	orrne.w	r6, r6, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000aae:	05a0      	lsls	r0, r4, #22
 8000ab0:	d504      	bpl.n	8000abc <HAL_CAN_IRQHandler+0xf0>
 8000ab2:	f01a 0f02 	tst.w	sl, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000ab6:	bf18      	it	ne
 8000ab8:	f046 0602 	orrne.w	r6, r6, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000abc:	0561      	lsls	r1, r4, #21
 8000abe:	d504      	bpl.n	8000aca <HAL_CAN_IRQHandler+0xfe>
 8000ac0:	f01a 0f04 	tst.w	sl, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000ac4:	bf18      	it	ne
 8000ac6:	f046 0604 	orrne.w	r6, r6, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000aca:	0522      	lsls	r2, r4, #20
 8000acc:	d518      	bpl.n	8000b00 <HAL_CAN_IRQHandler+0x134>
 8000ace:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 8000ad2:	d015      	beq.n	8000b00 <HAL_CAN_IRQHandler+0x134>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 8000ad4:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8000ad8:	f000 8096 	beq.w	8000c08 <HAL_CAN_IRQHandler+0x23c>
 8000adc:	d979      	bls.n	8000bd2 <HAL_CAN_IRQHandler+0x206>
 8000ade:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 8000ae2:	f000 808e 	beq.w	8000c02 <HAL_CAN_IRQHandler+0x236>
 8000ae6:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 8000aea:	f000 8090 	beq.w	8000c0e <HAL_CAN_IRQHandler+0x242>
 8000aee:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8000af2:	d101      	bne.n	8000af8 <HAL_CAN_IRQHandler+0x12c>
            /* Set CAN error code to Acknowledgement error */
            errorcode |= HAL_CAN_ERROR_ACK;
            break;
          case (CAN_ESR_LEC_2):
            /* Set CAN error code to Bit recessive error */
            errorcode |= HAL_CAN_ERROR_BR;
 8000af4:	f046 0640 	orr.w	r6, r6, #64	; 0x40
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000af8:	699a      	ldr	r2, [r3, #24]
 8000afa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000afe:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000b00:	2204      	movs	r2, #4
 8000b02:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000b04:	b12e      	cbz	r6, 8000b12 <HAL_CAN_IRQHandler+0x146>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000b06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000b08:	431e      	orrs	r6, r3
 8000b0a:	626e      	str	r6, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000b0c:	4628      	mov	r0, r5
 8000b0e:	f7ff ff5b 	bl	80009c8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000b12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000b16:	682b      	ldr	r3, [r5, #0]
 8000b18:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000b1a:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000b1e:	611a      	str	r2, [r3, #16]
 8000b20:	e7a1      	b.n	8000a66 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000b22:	682b      	ldr	r3, [r5, #0]
 8000b24:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000b26:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	e78a      	b.n	8000a44 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000b32:	07bb      	lsls	r3, r7, #30
 8000b34:	d437      	bmi.n	8000ba6 <HAL_CAN_IRQHandler+0x1da>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000b36:	077e      	lsls	r6, r7, #29
 8000b38:	d43d      	bmi.n	8000bb6 <HAL_CAN_IRQHandler+0x1ea>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000b3a:	f017 0608 	ands.w	r6, r7, #8
 8000b3e:	d059      	beq.n	8000bf4 <HAL_CAN_IRQHandler+0x228>
 8000b40:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000b44:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000b48:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8000b4c:	e757      	b.n	80009fe <HAL_CAN_IRQHandler+0x32>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000b4e:	682b      	ldr	r3, [r5, #0]
 8000b50:	2208      	movs	r2, #8
 8000b52:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000b54:	4628      	mov	r0, r5
 8000b56:	f7ff ff2d 	bl	80009b4 <HAL_CAN_RxFifo0FullCallback>
 8000b5a:	e778      	b.n	8000a4e <HAL_CAN_IRQHandler+0x82>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000b5c:	682b      	ldr	r3, [r5, #0]
 8000b5e:	2210      	movs	r2, #16
 8000b60:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000b62:	4628      	mov	r0, r5
 8000b64:	f7ff ff2c 	bl	80009c0 <HAL_CAN_SleepCallback>
 8000b68:	e78f      	b.n	8000a8a <HAL_CAN_IRQHandler+0xbe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000b6a:	682b      	ldr	r3, [r5, #0]
 8000b6c:	2208      	movs	r2, #8
 8000b6e:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000b70:	4628      	mov	r0, r5
 8000b72:	f7ff ff27 	bl	80009c4 <HAL_CAN_WakeUpFromRxMsgCallback>
 8000b76:	e78d      	b.n	8000a94 <HAL_CAN_IRQHandler+0xc8>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000b78:	4628      	mov	r0, r5
 8000b7a:	f005 fa99 	bl	80060b0 <HAL_CAN_RxFifo0MsgPendingCallback>
 8000b7e:	e76d      	b.n	8000a5c <HAL_CAN_IRQHandler+0x90>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000b80:	682b      	ldr	r3, [r5, #0]
 8000b82:	2208      	movs	r2, #8
 8000b84:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000b86:	4628      	mov	r0, r5
 8000b88:	f7ff ff18 	bl	80009bc <HAL_CAN_RxFifo1FullCallback>
 8000b8c:	e771      	b.n	8000a72 <HAL_CAN_IRQHandler+0xa6>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000b8e:	4628      	mov	r0, r5
 8000b90:	f7ff ff12 	bl	80009b8 <HAL_CAN_RxFifo1MsgPendingCallback>
 8000b94:	e774      	b.n	8000a80 <HAL_CAN_IRQHandler+0xb4>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000b96:	4628      	mov	r0, r5
 8000b98:	f7ff ff04 	bl	80009a4 <HAL_CAN_TxMailbox2CompleteCallback>
 8000b9c:	e74d      	b.n	8000a3a <HAL_CAN_IRQHandler+0x6e>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000b9e:	4628      	mov	r0, r5
 8000ba0:	f7ff fefe 	bl	80009a0 <HAL_CAN_TxMailbox1CompleteCallback>
 8000ba4:	e73b      	b.n	8000a1e <HAL_CAN_IRQHandler+0x52>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000ba6:	f7ff fef9 	bl	800099c <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000baa:	2600      	movs	r6, #0
 8000bac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bb4:	e723      	b.n	80009fe <HAL_CAN_IRQHandler+0x32>
 8000bb6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8000bba:	f44f 4190 	mov.w	r1, #18432	; 0x4800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000bbe:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8000bc2:	e71c      	b.n	80009fe <HAL_CAN_IRQHandler+0x32>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000bc4:	4616      	mov	r6, r2
 8000bc6:	e72a      	b.n	8000a1e <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000bc8:	033a      	lsls	r2, r7, #12
 8000bca:	d50b      	bpl.n	8000be4 <HAL_CAN_IRQHandler+0x218>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000bcc:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8000bd0:	e733      	b.n	8000a3a <HAL_CAN_IRQHandler+0x6e>
        switch (esrflags & CAN_ESR_LEC)
 8000bd2:	f1ba 0f10 	cmp.w	sl, #16
 8000bd6:	d01d      	beq.n	8000c14 <HAL_CAN_IRQHandler+0x248>
 8000bd8:	f1ba 0f20 	cmp.w	sl, #32
 8000bdc:	d18c      	bne.n	8000af8 <HAL_CAN_IRQHandler+0x12c>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000bde:	f046 0610 	orr.w	r6, r6, #16
            break;
 8000be2:	e789      	b.n	8000af8 <HAL_CAN_IRQHandler+0x12c>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000be4:	4628      	mov	r0, r5
 8000be6:	f7ff fee3 	bl	80009b0 <HAL_CAN_TxMailbox2AbortCallback>
 8000bea:	e726      	b.n	8000a3a <HAL_CAN_IRQHandler+0x6e>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000bec:	4628      	mov	r0, r5
 8000bee:	f7ff fedd 	bl	80009ac <HAL_CAN_TxMailbox1AbortCallback>
 8000bf2:	e714      	b.n	8000a1e <HAL_CAN_IRQHandler+0x52>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000bf4:	f7ff fed8 	bl	80009a8 <HAL_CAN_TxMailbox0AbortCallback>
 8000bf8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c00:	e6fd      	b.n	80009fe <HAL_CAN_IRQHandler+0x32>
            errorcode |= HAL_CAN_ERROR_BD;
 8000c02:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 8000c06:	e777      	b.n	8000af8 <HAL_CAN_IRQHandler+0x12c>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000c08:	f046 0620 	orr.w	r6, r6, #32
            break;
 8000c0c:	e774      	b.n	8000af8 <HAL_CAN_IRQHandler+0x12c>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000c0e:	f446 7680 	orr.w	r6, r6, #256	; 0x100
            break;
 8000c12:	e771      	b.n	8000af8 <HAL_CAN_IRQHandler+0x12c>
            errorcode |= HAL_CAN_ERROR_STF;
 8000c14:	f046 0608 	orr.w	r6, r6, #8
            break;
 8000c18:	e76e      	b.n	8000af8 <HAL_CAN_IRQHandler+0x12c>
 8000c1a:	bf00      	nop

08000c1c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c1c:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c1e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c20:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000c24:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c26:	0200      	lsls	r0, r0, #8
 8000c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c2c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000c34:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000c36:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <HAL_NVIC_SetPriority+0x64>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c48:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c4a:	f1c3 0507 	rsb	r5, r3, #7
 8000c4e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c50:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c54:	bf28      	it	cs
 8000c56:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c58:	2c06      	cmp	r4, #6
 8000c5a:	d919      	bls.n	8000c90 <HAL_NVIC_SetPriority+0x50>
 8000c5c:	3b03      	subs	r3, #3
 8000c5e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000c62:	409c      	lsls	r4, r3
 8000c64:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c6c:	40aa      	lsls	r2, r5
 8000c6e:	ea21 0102 	bic.w	r1, r1, r2
 8000c72:	fa01 f203 	lsl.w	r2, r1, r3
 8000c76:	4322      	orrs	r2, r4
 8000c78:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8000c7a:	2800      	cmp	r0, #0
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	db0a      	blt.n	8000c96 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c80:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000c84:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000c88:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c8c:	bc30      	pop	{r4, r5}
 8000c8e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c90:	2400      	movs	r4, #0
 8000c92:	4623      	mov	r3, r4
 8000c94:	e7e8      	b.n	8000c68 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c96:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <HAL_NVIC_SetPriority+0x68>)
 8000c98:	f000 000f 	and.w	r0, r0, #15
 8000c9c:	4403      	add	r3, r0
 8000c9e:	761a      	strb	r2, [r3, #24]
 8000ca0:	bc30      	pop	{r4, r5}
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00
 8000ca8:	e000ecfc 	.word	0xe000ecfc

08000cac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000cac:	2800      	cmp	r0, #0
 8000cae:	db07      	blt.n	8000cc0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb0:	f000 011f 	and.w	r1, r0, #31
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	0940      	lsrs	r0, r0, #5
 8000cb8:	4a02      	ldr	r2, [pc, #8]	; (8000cc4 <HAL_NVIC_EnableIRQ+0x18>)
 8000cba:	408b      	lsls	r3, r1
 8000cbc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cc8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d003      	beq.n	8000cd8 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cd0:	2380      	movs	r3, #128	; 0x80
 8000cd2:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000cd8:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000cda:	2305      	movs	r3, #5
 8000cdc:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000ce0:	6813      	ldr	r3, [r2, #0]
 8000ce2:	f023 0301 	bic.w	r3, r3, #1
 8000ce6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000ce8:	2000      	movs	r0, #0
}
 8000cea:	4770      	bx	lr

08000cec <HAL_DMA_GetState>:
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  return hdma->State;
 8000cec:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cf8:	f8d1 8000 	ldr.w	r8, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cfc:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 8000ef4 <HAL_GPIO_Init+0x200>
{
 8000d00:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d02:	2400      	movs	r4, #0
 8000d04:	e003      	b.n	8000d0e <HAL_GPIO_Init+0x1a>
 8000d06:	3401      	adds	r4, #1
 8000d08:	2c10      	cmp	r4, #16
 8000d0a:	f000 808c 	beq.w	8000e26 <HAL_GPIO_Init+0x132>
    ioposition = 0x01U << position;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d12:	ea08 0203 	and.w	r2, r8, r3
    if(iocurrent == ioposition)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d1f5      	bne.n	8000d06 <HAL_GPIO_Init+0x12>
 8000d1a:	e9d1 6501 	ldrd	r6, r5, [r1, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d1e:	f026 0910 	bic.w	r9, r6, #16
 8000d22:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 8000d26:	2303      	movs	r3, #3
 8000d28:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8000d2c:	fa03 f30c 	lsl.w	r3, r3, ip
 8000d30:	2f01      	cmp	r7, #1
 8000d32:	ea6f 0303 	mvn.w	r3, r3
 8000d36:	fa05 f50c 	lsl.w	r5, r5, ip
 8000d3a:	d977      	bls.n	8000e2c <HAL_GPIO_Init+0x138>
      temp = GPIOx->PUPDR;
 8000d3c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d3e:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d40:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000d42:	60c5      	str	r5, [r0, #12]
      temp = GPIOx->MODER;
 8000d44:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d46:	f006 0503 	and.w	r5, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d4a:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d4c:	fa05 f30c 	lsl.w	r3, r5, ip
 8000d50:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 8000d52:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d54:	00f3      	lsls	r3, r6, #3
 8000d56:	d5d6      	bpl.n	8000d06 <HAL_GPIO_Init+0x12>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d58:	4d5f      	ldr	r5, [pc, #380]	; (8000ed8 <HAL_GPIO_Init+0x1e4>)
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	9301      	str	r3, [sp, #4]
 8000d5e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d64:	646b      	str	r3, [r5, #68]	; 0x44
 8000d66:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 8000d68:	f024 0303 	bic.w	r3, r4, #3
 8000d6c:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8000d70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d74:	9501      	str	r5, [sp, #4]
 8000d76:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d7a:	f004 0503 	and.w	r5, r4, #3
 8000d7e:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d82:	4d56      	ldr	r5, [pc, #344]	; (8000edc <HAL_GPIO_Init+0x1e8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d84:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000d86:	f8d3 c008 	ldr.w	ip, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d8a:	270f      	movs	r7, #15
 8000d8c:	fa07 f709 	lsl.w	r7, r7, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d90:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d92:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d96:	d01f      	beq.n	8000dd8 <HAL_GPIO_Init+0xe4>
 8000d98:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d9c:	42a8      	cmp	r0, r5
 8000d9e:	d076      	beq.n	8000e8e <HAL_GPIO_Init+0x19a>
 8000da0:	4d4f      	ldr	r5, [pc, #316]	; (8000ee0 <HAL_GPIO_Init+0x1ec>)
 8000da2:	42a8      	cmp	r0, r5
 8000da4:	d079      	beq.n	8000e9a <HAL_GPIO_Init+0x1a6>
 8000da6:	4d4f      	ldr	r5, [pc, #316]	; (8000ee4 <HAL_GPIO_Init+0x1f0>)
 8000da8:	42a8      	cmp	r0, r5
 8000daa:	d07c      	beq.n	8000ea6 <HAL_GPIO_Init+0x1b2>
 8000dac:	4d4e      	ldr	r5, [pc, #312]	; (8000ee8 <HAL_GPIO_Init+0x1f4>)
 8000dae:	42a8      	cmp	r0, r5
 8000db0:	d07f      	beq.n	8000eb2 <HAL_GPIO_Init+0x1be>
 8000db2:	4d4e      	ldr	r5, [pc, #312]	; (8000eec <HAL_GPIO_Init+0x1f8>)
 8000db4:	42a8      	cmp	r0, r5
 8000db6:	f000 8082 	beq.w	8000ebe <HAL_GPIO_Init+0x1ca>
 8000dba:	4d4d      	ldr	r5, [pc, #308]	; (8000ef0 <HAL_GPIO_Init+0x1fc>)
 8000dbc:	42a8      	cmp	r0, r5
 8000dbe:	f000 8084 	beq.w	8000eca <HAL_GPIO_Init+0x1d6>
 8000dc2:	f8df c134 	ldr.w	ip, [pc, #308]	; 8000ef8 <HAL_GPIO_Init+0x204>
 8000dc6:	4560      	cmp	r0, ip
 8000dc8:	bf0c      	ite	eq
 8000dca:	f04f 0c07 	moveq.w	ip, #7
 8000dce:	f04f 0c08 	movne.w	ip, #8
 8000dd2:	fa0c f509 	lsl.w	r5, ip, r9
 8000dd6:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dd8:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 8000dda:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8000dde:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000de0:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 8000de2:	bf54      	ite	pl
 8000de4:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8000de6:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 8000de8:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8000dec:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000df0:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 8000df2:	bf54      	ite	pl
 8000df4:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8000df6:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 8000df8:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dfc:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e00:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 8000e02:	bf54      	ite	pl
 8000e04:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8000e06:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 8000e08:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8000e0c:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e10:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e12:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 8000e16:	bf54      	ite	pl
 8000e18:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8000e1a:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e1c:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 8000e1e:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e22:	f47f af74 	bne.w	8000d0e <HAL_GPIO_Init+0x1a>
      }
    }
  }
}
 8000e26:	b003      	add	sp, #12
 8000e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8000e2c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e2e:	ea07 0a03 	and.w	sl, r7, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e32:	68cf      	ldr	r7, [r1, #12]
 8000e34:	fa07 f70c 	lsl.w	r7, r7, ip
 8000e38:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8000e3c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000e3e:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e42:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e46:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e4a:	40a7      	lsls	r7, r4
 8000e4c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8000e50:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000e52:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e54:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e56:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e58:	f1b9 0f02 	cmp.w	r9, #2
      GPIOx->PUPDR = temp;
 8000e5c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e5e:	f47f af71 	bne.w	8000d44 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3U];
 8000e62:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8000e66:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e6a:	f004 0707 	and.w	r7, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 8000e6e:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e72:	00bf      	lsls	r7, r7, #2
 8000e74:	f04f 0b0f 	mov.w	fp, #15
 8000e78:	fa0b fb07 	lsl.w	fp, fp, r7
 8000e7c:	ea25 0a0b 	bic.w	sl, r5, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e80:	690d      	ldr	r5, [r1, #16]
 8000e82:	40bd      	lsls	r5, r7
 8000e84:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->AFR[position >> 3U] = temp;
 8000e88:	f8c9 5020 	str.w	r5, [r9, #32]
 8000e8c:	e75a      	b.n	8000d44 <HAL_GPIO_Init+0x50>
 8000e8e:	f04f 0c01 	mov.w	ip, #1
 8000e92:	fa0c f509 	lsl.w	r5, ip, r9
 8000e96:	432f      	orrs	r7, r5
 8000e98:	e79e      	b.n	8000dd8 <HAL_GPIO_Init+0xe4>
 8000e9a:	f04f 0c02 	mov.w	ip, #2
 8000e9e:	fa0c f509 	lsl.w	r5, ip, r9
 8000ea2:	432f      	orrs	r7, r5
 8000ea4:	e798      	b.n	8000dd8 <HAL_GPIO_Init+0xe4>
 8000ea6:	f04f 0c03 	mov.w	ip, #3
 8000eaa:	fa0c f509 	lsl.w	r5, ip, r9
 8000eae:	432f      	orrs	r7, r5
 8000eb0:	e792      	b.n	8000dd8 <HAL_GPIO_Init+0xe4>
 8000eb2:	f04f 0c04 	mov.w	ip, #4
 8000eb6:	fa0c f509 	lsl.w	r5, ip, r9
 8000eba:	432f      	orrs	r7, r5
 8000ebc:	e78c      	b.n	8000dd8 <HAL_GPIO_Init+0xe4>
 8000ebe:	f04f 0c05 	mov.w	ip, #5
 8000ec2:	fa0c f509 	lsl.w	r5, ip, r9
 8000ec6:	432f      	orrs	r7, r5
 8000ec8:	e786      	b.n	8000dd8 <HAL_GPIO_Init+0xe4>
 8000eca:	f04f 0c06 	mov.w	ip, #6
 8000ece:	fa0c f509 	lsl.w	r5, ip, r9
 8000ed2:	432f      	orrs	r7, r5
 8000ed4:	e780      	b.n	8000dd8 <HAL_GPIO_Init+0xe4>
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	40020800 	.word	0x40020800
 8000ee4:	40020c00 	.word	0x40020c00
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40021400 	.word	0x40021400
 8000ef0:	40021800 	.word	0x40021800
 8000ef4:	40013c00 	.word	0x40013c00
 8000ef8:	40021c00 	.word	0x40021c00

08000efc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000efc:	b902      	cbnz	r2, 8000f00 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000efe:	0409      	lsls	r1, r1, #16
 8000f00:	6181      	str	r1, [r0, #24]
  }
}
 8000f02:	4770      	bx	lr

08000f04 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000f04:	6943      	ldr	r3, [r0, #20]
 8000f06:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f0a:	bf08      	it	eq
 8000f0c:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f0e:	6181      	str	r1, [r0, #24]
  }
}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <I2C_MemoryTransmit_TXE_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->EventCount == 0U)
 8000f14:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000f16:	b95b      	cbnz	r3, 8000f30 <I2C_MemoryTransmit_TXE_BTF+0x1c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8000f18:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000f1a:	6802      	ldr	r2, [r0, #0]
 8000f1c:	2b01      	cmp	r3, #1
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8000f1e:	6c83      	ldr	r3, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8000f20:	d00d      	beq.n	8000f3e <I2C_MemoryTransmit_TXE_BTF+0x2a>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Send MSB of Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8000f22:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8000f26:	6113      	str	r3, [r2, #16]

      hi2c->EventCount++;
 8000f28:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	6503      	str	r3, [r0, #80]	; 0x50
 8000f2e:	4770      	bx	lr
    }
  }
  else if (hi2c->EventCount == 1U)
 8000f30:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d009      	beq.n	8000f4a <I2C_MemoryTransmit_TXE_BTF+0x36>
    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);

    hi2c->EventCount++;
  }
  else if (hi2c->EventCount == 2U)
 8000f36:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d00e      	beq.n	8000f5a <I2C_MemoryTransmit_TXE_BTF+0x46>
  }
  else
  {
    /* Do nothing */
  }
}
 8000f3c:	4770      	bx	lr
 8000f3e:	b2db      	uxtb	r3, r3
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8000f40:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 8000f42:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000f44:	3302      	adds	r3, #2
 8000f46:	6503      	str	r3, [r0, #80]	; 0x50
 8000f48:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8000f4a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000f4c:	6802      	ldr	r2, [r0, #0]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	6113      	str	r3, [r2, #16]
    hi2c->EventCount++;
 8000f52:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000f54:	3301      	adds	r3, #1
 8000f56:	6503      	str	r3, [r0, #80]	; 0x50
 8000f58:	4770      	bx	lr
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000f5a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000f5e:	2b22      	cmp	r3, #34	; 0x22
 8000f60:	d00e      	beq.n	8000f80 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8000f62:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000f66:	2b21      	cmp	r3, #33	; 0x21
 8000f68:	d1e8      	bne.n	8000f3c <I2C_MemoryTransmit_TXE_BTF+0x28>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f6a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000f6c:	6803      	ldr	r3, [r0, #0]
 8000f6e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8000f72:	6119      	str	r1, [r3, #16]
      hi2c->XferCount--;
 8000f74:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8000f76:	6242      	str	r2, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8000f7e:	e7dd      	b.n	8000f3c <I2C_MemoryTransmit_TXE_BTF+0x28>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8000f80:	6802      	ldr	r2, [r0, #0]
 8000f82:	6813      	ldr	r3, [r2, #0]
 8000f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	4770      	bx	lr

08000f8c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8000f8c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8000f90:	4604      	mov	r4, r0
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000f92:	6800      	ldr	r0, [r0, #0]
{
 8000f94:	4689      	mov	r9, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000f96:	6801      	ldr	r1, [r0, #0]
 8000f98:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000f9c:	6001      	str	r1, [r0, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000f9e:	6801      	ldr	r1, [r0, #0]
{
 8000fa0:	b082      	sub	sp, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000fa2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
{
 8000fa6:	9d08      	ldr	r5, [sp, #32]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000fa8:	6001      	str	r1, [r0, #0]
{
 8000faa:	4616      	mov	r6, r2
 8000fac:	461f      	mov	r7, r3
 8000fae:	1c6b      	adds	r3, r5, #1
 8000fb0:	d15a      	bne.n	8001068 <I2C_RequestMemoryRead+0xdc>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000fb2:	6943      	ldr	r3, [r0, #20]
 8000fb4:	07d9      	lsls	r1, r3, #31
 8000fb6:	d5fc      	bpl.n	8000fb2 <I2C_RequestMemoryRead+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000fb8:	fa5f f989 	uxtb.w	r9, r9
 8000fbc:	f009 03fe 	and.w	r3, r9, #254	; 0xfe
 8000fc0:	6103      	str	r3, [r0, #16]
 8000fc2:	1c69      	adds	r1, r5, #1
 8000fc4:	d014      	beq.n	8000ff0 <I2C_RequestMemoryRead+0x64>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000fc6:	6943      	ldr	r3, [r0, #20]
 8000fc8:	0799      	lsls	r1, r3, #30
 8000fca:	d414      	bmi.n	8000ff6 <I2C_RequestMemoryRead+0x6a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000fcc:	6943      	ldr	r3, [r0, #20]
 8000fce:	055b      	lsls	r3, r3, #21
 8000fd0:	d46e      	bmi.n	80010b0 <I2C_RequestMemoryRead+0x124>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000fd2:	f7ff faab 	bl	800052c <HAL_GetTick>
 8000fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000fd8:	1ac0      	subs	r0, r0, r3
 8000fda:	4285      	cmp	r5, r0
 8000fdc:	f0c0 80e8 	bcc.w	80011b0 <I2C_RequestMemoryRead+0x224>
 8000fe0:	2d00      	cmp	r5, #0
 8000fe2:	f000 80e5 	beq.w	80011b0 <I2C_RequestMemoryRead+0x224>
 8000fe6:	6820      	ldr	r0, [r4, #0]
 8000fe8:	e7eb      	b.n	8000fc2 <I2C_RequestMemoryRead+0x36>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000fea:	6943      	ldr	r3, [r0, #20]
 8000fec:	055b      	lsls	r3, r3, #21
 8000fee:	d45f      	bmi.n	80010b0 <I2C_RequestMemoryRead+0x124>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000ff0:	6943      	ldr	r3, [r0, #20]
 8000ff2:	079a      	lsls	r2, r3, #30
 8000ff4:	d5f9      	bpl.n	8000fea <I2C_RequestMemoryRead+0x5e>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	6943      	ldr	r3, [r0, #20]
 8000ffc:	9301      	str	r3, [sp, #4]
 8000ffe:	6983      	ldr	r3, [r0, #24]
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	9b01      	ldr	r3, [sp, #4]
 8001004:	1c6b      	adds	r3, r5, #1
 8001006:	d003      	beq.n	8001010 <I2C_RequestMemoryRead+0x84>
 8001008:	e084      	b.n	8001114 <I2C_RequestMemoryRead+0x188>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800100a:	6943      	ldr	r3, [r0, #20]
 800100c:	055a      	lsls	r2, r3, #21
 800100e:	d467      	bmi.n	80010e0 <I2C_RequestMemoryRead+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001010:	6943      	ldr	r3, [r0, #20]
 8001012:	0619      	lsls	r1, r3, #24
 8001014:	d5f9      	bpl.n	800100a <I2C_RequestMemoryRead+0x7e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001016:	2f01      	cmp	r7, #1
 8001018:	f040 808d 	bne.w	8001136 <I2C_RequestMemoryRead+0x1aa>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800101c:	b2f6      	uxtb	r6, r6
 800101e:	6106      	str	r6, [r0, #16]
 8001020:	1c6b      	adds	r3, r5, #1
 8001022:	d003      	beq.n	800102c <I2C_RequestMemoryRead+0xa0>
 8001024:	e094      	b.n	8001150 <I2C_RequestMemoryRead+0x1c4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001026:	6943      	ldr	r3, [r0, #20]
 8001028:	055e      	lsls	r6, r3, #21
 800102a:	d459      	bmi.n	80010e0 <I2C_RequestMemoryRead+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800102c:	6943      	ldr	r3, [r0, #20]
 800102e:	061f      	lsls	r7, r3, #24
 8001030:	d5f9      	bpl.n	8001026 <I2C_RequestMemoryRead+0x9a>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001032:	6803      	ldr	r3, [r0, #0]
 8001034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001038:	6003      	str	r3, [r0, #0]
 800103a:	1c6b      	adds	r3, r5, #1
 800103c:	f040 80a8 	bne.w	8001190 <I2C_RequestMemoryRead+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001040:	6943      	ldr	r3, [r0, #20]
 8001042:	07df      	lsls	r7, r3, #31
 8001044:	d5fc      	bpl.n	8001040 <I2C_RequestMemoryRead+0xb4>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001046:	f049 0901 	orr.w	r9, r9, #1
 800104a:	f8c0 9010 	str.w	r9, [r0, #16]
 800104e:	1c6a      	adds	r2, r5, #1
 8001050:	d003      	beq.n	800105a <I2C_RequestMemoryRead+0xce>
 8001052:	e0ca      	b.n	80011ea <I2C_RequestMemoryRead+0x25e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001054:	6943      	ldr	r3, [r0, #20]
 8001056:	055b      	lsls	r3, r3, #21
 8001058:	d42a      	bmi.n	80010b0 <I2C_RequestMemoryRead+0x124>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800105a:	6943      	ldr	r3, [r0, #20]
 800105c:	43db      	mvns	r3, r3
 800105e:	f013 0302 	ands.w	r3, r3, #2
 8001062:	d1f7      	bne.n	8001054 <I2C_RequestMemoryRead+0xc8>
  return HAL_OK;
 8001064:	4618      	mov	r0, r3
 8001066:	e01c      	b.n	80010a2 <I2C_RequestMemoryRead+0x116>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001068:	6943      	ldr	r3, [r0, #20]
 800106a:	07da      	lsls	r2, r3, #31
 800106c:	d4a4      	bmi.n	8000fb8 <I2C_RequestMemoryRead+0x2c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800106e:	f7ff fa5d 	bl	800052c <HAL_GetTick>
 8001072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001074:	1ac0      	subs	r0, r0, r3
 8001076:	4285      	cmp	r5, r0
 8001078:	6820      	ldr	r0, [r4, #0]
 800107a:	d301      	bcc.n	8001080 <I2C_RequestMemoryRead+0xf4>
 800107c:	2d00      	cmp	r5, #0
 800107e:	d196      	bne.n	8000fae <I2C_RequestMemoryRead+0x22>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001080:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001082:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001084:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001086:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800108a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800108e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001090:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001094:	f043 0320 	orr.w	r3, r3, #32
 8001098:	6423      	str	r3, [r4, #64]	; 0x40
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800109a:	6803      	ldr	r3, [r0, #0]
 800109c:	05da      	lsls	r2, r3, #23
 800109e:	d403      	bmi.n	80010a8 <I2C_RequestMemoryRead+0x11c>
    return HAL_TIMEOUT;
 80010a0:	2003      	movs	r0, #3
}
 80010a2:	b002      	add	sp, #8
 80010a4:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80010a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ac:	6423      	str	r3, [r4, #64]	; 0x40
 80010ae:	e7f7      	b.n	80010a0 <I2C_RequestMemoryRead+0x114>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010b0:	6803      	ldr	r3, [r0, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80010b2:	2200      	movs	r2, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010b8:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 80010bc:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010be:	6003      	str	r3, [r0, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010c0:	6145      	str	r5, [r0, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80010c2:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80010c4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80010c8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80010cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80010ce:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80010d2:	f043 0304 	orr.w	r3, r3, #4
 80010d6:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80010d8:	2001      	movs	r0, #1
}
 80010da:	b002      	add	sp, #8
 80010dc:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 80010e0:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 80010e2:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010e4:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80010e8:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80010ea:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80010ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80010f0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80010f4:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010f6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80010fa:	f043 0304 	orr.w	r3, r3, #4
 80010fe:	6423      	str	r3, [r4, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001100:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001102:	2b04      	cmp	r3, #4
 8001104:	d1e8      	bne.n	80010d8 <I2C_RequestMemoryRead+0x14c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001106:	6822      	ldr	r2, [r4, #0]
 8001108:	6813      	ldr	r3, [r2, #0]
 800110a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800110e:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8001110:	2001      	movs	r0, #1
 8001112:	e7c6      	b.n	80010a2 <I2C_RequestMemoryRead+0x116>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001114:	6943      	ldr	r3, [r0, #20]
 8001116:	061b      	lsls	r3, r3, #24
 8001118:	f53f af7d 	bmi.w	8001016 <I2C_RequestMemoryRead+0x8a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800111c:	6943      	ldr	r3, [r0, #20]
 800111e:	055a      	lsls	r2, r3, #21
 8001120:	d4de      	bmi.n	80010e0 <I2C_RequestMemoryRead+0x154>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001122:	f7ff fa03 	bl	800052c <HAL_GetTick>
 8001126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001128:	1ac0      	subs	r0, r0, r3
 800112a:	4285      	cmp	r5, r0
 800112c:	d34f      	bcc.n	80011ce <I2C_RequestMemoryRead+0x242>
 800112e:	2d00      	cmp	r5, #0
 8001130:	d04d      	beq.n	80011ce <I2C_RequestMemoryRead+0x242>
 8001132:	6820      	ldr	r0, [r4, #0]
 8001134:	e766      	b.n	8001004 <I2C_RequestMemoryRead+0x78>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001136:	0a33      	lsrs	r3, r6, #8
 8001138:	6103      	str	r3, [r0, #16]
 800113a:	1c6a      	adds	r2, r5, #1
 800113c:	d003      	beq.n	8001146 <I2C_RequestMemoryRead+0x1ba>
 800113e:	e017      	b.n	8001170 <I2C_RequestMemoryRead+0x1e4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001140:	6943      	ldr	r3, [r0, #20]
 8001142:	055f      	lsls	r7, r3, #21
 8001144:	d4cc      	bmi.n	80010e0 <I2C_RequestMemoryRead+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001146:	6943      	ldr	r3, [r0, #20]
 8001148:	061b      	lsls	r3, r3, #24
 800114a:	f53f af67 	bmi.w	800101c <I2C_RequestMemoryRead+0x90>
 800114e:	e7f7      	b.n	8001140 <I2C_RequestMemoryRead+0x1b4>
 8001150:	6943      	ldr	r3, [r0, #20]
 8001152:	0619      	lsls	r1, r3, #24
 8001154:	f53f af6d 	bmi.w	8001032 <I2C_RequestMemoryRead+0xa6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001158:	6943      	ldr	r3, [r0, #20]
 800115a:	055a      	lsls	r2, r3, #21
 800115c:	d4c0      	bmi.n	80010e0 <I2C_RequestMemoryRead+0x154>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800115e:	f7ff f9e5 	bl	800052c <HAL_GetTick>
 8001162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001164:	1ac0      	subs	r0, r0, r3
 8001166:	4285      	cmp	r5, r0
 8001168:	d331      	bcc.n	80011ce <I2C_RequestMemoryRead+0x242>
 800116a:	b385      	cbz	r5, 80011ce <I2C_RequestMemoryRead+0x242>
 800116c:	6820      	ldr	r0, [r4, #0]
 800116e:	e757      	b.n	8001020 <I2C_RequestMemoryRead+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001170:	6943      	ldr	r3, [r0, #20]
 8001172:	0619      	lsls	r1, r3, #24
 8001174:	f53f af52 	bmi.w	800101c <I2C_RequestMemoryRead+0x90>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001178:	6943      	ldr	r3, [r0, #20]
 800117a:	0559      	lsls	r1, r3, #21
 800117c:	d4b0      	bmi.n	80010e0 <I2C_RequestMemoryRead+0x154>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800117e:	f7ff f9d5 	bl	800052c <HAL_GetTick>
 8001182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001184:	1ac0      	subs	r0, r0, r3
 8001186:	4285      	cmp	r5, r0
 8001188:	d321      	bcc.n	80011ce <I2C_RequestMemoryRead+0x242>
 800118a:	b305      	cbz	r5, 80011ce <I2C_RequestMemoryRead+0x242>
 800118c:	6820      	ldr	r0, [r4, #0]
 800118e:	e7d4      	b.n	800113a <I2C_RequestMemoryRead+0x1ae>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001190:	6943      	ldr	r3, [r0, #20]
 8001192:	07de      	lsls	r6, r3, #31
 8001194:	f53f af57 	bmi.w	8001046 <I2C_RequestMemoryRead+0xba>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001198:	f7ff f9c8 	bl	800052c <HAL_GetTick>
 800119c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800119e:	1ac0      	subs	r0, r0, r3
 80011a0:	4285      	cmp	r5, r0
 80011a2:	6820      	ldr	r0, [r4, #0]
 80011a4:	f4ff af6c 	bcc.w	8001080 <I2C_RequestMemoryRead+0xf4>
 80011a8:	2d00      	cmp	r5, #0
 80011aa:	f47f af46 	bne.w	800103a <I2C_RequestMemoryRead+0xae>
 80011ae:	e767      	b.n	8001080 <I2C_RequestMemoryRead+0xf4>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80011b0:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80011b2:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80011b4:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80011b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80011ba:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80011be:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80011c0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80011c4:	f043 0320 	orr.w	r3, r3, #32
 80011c8:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80011ca:	2001      	movs	r0, #1
 80011cc:	e769      	b.n	80010a2 <I2C_RequestMemoryRead+0x116>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80011ce:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80011d0:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80011d2:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80011d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80011d8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80011dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80011de:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80011e2:	f043 0320 	orr.w	r3, r3, #32
 80011e6:	6423      	str	r3, [r4, #64]	; 0x40
 80011e8:	e78a      	b.n	8001100 <I2C_RequestMemoryRead+0x174>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80011ea:	6943      	ldr	r3, [r0, #20]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	f013 0302 	ands.w	r3, r3, #2
 80011f2:	f43f af37 	beq.w	8001064 <I2C_RequestMemoryRead+0xd8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80011f6:	6943      	ldr	r3, [r0, #20]
 80011f8:	0559      	lsls	r1, r3, #21
 80011fa:	f53f af59 	bmi.w	80010b0 <I2C_RequestMemoryRead+0x124>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011fe:	f7ff f995 	bl	800052c <HAL_GetTick>
 8001202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001204:	1ac0      	subs	r0, r0, r3
 8001206:	4285      	cmp	r5, r0
 8001208:	d3d2      	bcc.n	80011b0 <I2C_RequestMemoryRead+0x224>
 800120a:	2d00      	cmp	r5, #0
 800120c:	d0d0      	beq.n	80011b0 <I2C_RequestMemoryRead+0x224>
 800120e:	6820      	ldr	r0, [r4, #0]
 8001210:	e71d      	b.n	800104e <I2C_RequestMemoryRead+0xc2>
 8001212:	bf00      	nop

08001214 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001214:	2800      	cmp	r0, #0
 8001216:	f000 809f 	beq.w	8001358 <HAL_I2C_Init+0x144>
{
 800121a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800121c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001220:	4604      	mov	r4, r0
 8001222:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 808f 	beq.w	800134a <HAL_I2C_Init+0x136>
  __HAL_I2C_DISABLE(hi2c);
 800122c:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800122e:	2224      	movs	r2, #36	; 0x24
 8001230:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	f022 0201 	bic.w	r2, r2, #1
 800123a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001242:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800124a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800124c:	f002 f958 	bl	8003500 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001250:	6861      	ldr	r1, [r4, #4]
 8001252:	4b4b      	ldr	r3, [pc, #300]	; (8001380 <HAL_I2C_Init+0x16c>)
 8001254:	4299      	cmp	r1, r3
 8001256:	d84b      	bhi.n	80012f0 <HAL_I2C_Init+0xdc>
 8001258:	4b4a      	ldr	r3, [pc, #296]	; (8001384 <HAL_I2C_Init+0x170>)
 800125a:	4298      	cmp	r0, r3
 800125c:	d97a      	bls.n	8001354 <HAL_I2C_Init+0x140>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800125e:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001260:	4b49      	ldr	r3, [pc, #292]	; (8001388 <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001262:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001264:	fba3 6300 	umull	r6, r3, r3, r0
 8001268:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800126a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800126e:	431d      	orrs	r5, r3
 8001270:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001272:	6a15      	ldr	r5, [r2, #32]
 8001274:	3301      	adds	r3, #1
 8001276:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800127a:	432b      	orrs	r3, r5
 800127c:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800127e:	69d5      	ldr	r5, [r2, #28]
 8001280:	0049      	lsls	r1, r1, #1
 8001282:	1e43      	subs	r3, r0, #1
 8001284:	fbb3 f3f1 	udiv	r3, r3, r1
 8001288:	3301      	adds	r3, #1
 800128a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800128e:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 8001292:	2b04      	cmp	r3, #4
 8001294:	bf38      	it	cc
 8001296:	2304      	movcc	r3, #4
 8001298:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800129c:	432b      	orrs	r3, r5
 800129e:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012a0:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 80012a4:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012a6:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012a8:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 80012ac:	432b      	orrs	r3, r5
 80012ae:	4303      	orrs	r3, r0
 80012b0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012b2:	6890      	ldr	r0, [r2, #8]
 80012b4:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012b6:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012b8:	f420 4003 	bic.w	r0, r0, #33536	; 0x8300
 80012bc:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80012c0:	4329      	orrs	r1, r5
 80012c2:	4301      	orrs	r1, r0
 80012c4:	6091      	str	r1, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012c6:	68d1      	ldr	r1, [r2, #12]
 80012c8:	69a0      	ldr	r0, [r4, #24]
 80012ca:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80012ce:	4303      	orrs	r3, r0
 80012d0:	430b      	orrs	r3, r1
 80012d2:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80012d4:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012d6:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 80012d8:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 80012dc:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 80012de:	6011      	str	r1, [r2, #0]
  return HAL_OK;
 80012e0:	4618      	mov	r0, r3
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012e2:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012e4:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012e8:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80012ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012f0:	4b26      	ldr	r3, [pc, #152]	; (800138c <HAL_I2C_Init+0x178>)
 80012f2:	4298      	cmp	r0, r3
 80012f4:	d92e      	bls.n	8001354 <HAL_I2C_Init+0x140>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012f6:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80012f8:	4b23      	ldr	r3, [pc, #140]	; (8001388 <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012fa:	6856      	ldr	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012fc:	4f24      	ldr	r7, [pc, #144]	; (8001390 <HAL_I2C_Init+0x17c>)
  freqrange = I2C_FREQRANGE(pclk1);
 80012fe:	fba3 5300 	umull	r5, r3, r3, r0
 8001302:	0c9d      	lsrs	r5, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001304:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8001308:	432e      	orrs	r6, r5
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800130a:	f44f 7396 	mov.w	r3, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800130e:	6056      	str	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001310:	fb03 f305 	mul.w	r3, r3, r5
 8001314:	fba7 5303 	umull	r5, r3, r7, r3
 8001318:	6a15      	ldr	r5, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800131a:	68a6      	ldr	r6, [r4, #8]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800131c:	099b      	lsrs	r3, r3, #6
 800131e:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001322:	3301      	adds	r3, #1
 8001324:	432b      	orrs	r3, r5
 8001326:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001328:	69d5      	ldr	r5, [r2, #28]
 800132a:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 800132e:	3801      	subs	r0, #1
 8001330:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8001334:	b996      	cbnz	r6, 800135c <HAL_I2C_Init+0x148>
 8001336:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800133a:	fbb0 f0f1 	udiv	r0, r0, r1
 800133e:	3001      	adds	r0, #1
 8001340:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8001344:	b9c0      	cbnz	r0, 8001378 <HAL_I2C_Init+0x164>
 8001346:	2301      	movs	r3, #1
 8001348:	e7a8      	b.n	800129c <HAL_I2C_Init+0x88>
    hi2c->Lock = HAL_UNLOCKED;
 800134a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800134e:	f005 f9a5 	bl	800669c <HAL_I2C_MspInit>
 8001352:	e76b      	b.n	800122c <HAL_I2C_Init+0x18>
    return HAL_ERROR;
 8001354:	2001      	movs	r0, #1
}
 8001356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001358:	2001      	movs	r0, #1
}
 800135a:	4770      	bx	lr
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800135c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001360:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001364:	fbb0 f0f1 	udiv	r0, r0, r1
 8001368:	3001      	adds	r0, #1
 800136a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800136e:	2800      	cmp	r0, #0
 8001370:	d0e9      	beq.n	8001346 <HAL_I2C_Init+0x132>
 8001372:	f440 4340 	orr.w	r3, r0, #49152	; 0xc000
 8001376:	e791      	b.n	800129c <HAL_I2C_Init+0x88>
 8001378:	f440 4300 	orr.w	r3, r0, #32768	; 0x8000
 800137c:	e78e      	b.n	800129c <HAL_I2C_Init+0x88>
 800137e:	bf00      	nop
 8001380:	000186a0 	.word	0x000186a0
 8001384:	001e847f 	.word	0x001e847f
 8001388:	431bde83 	.word	0x431bde83
 800138c:	003d08ff 	.word	0x003d08ff
 8001390:	10624dd3 	.word	0x10624dd3

08001394 <HAL_I2C_Master_Transmit>:
{
 8001394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001398:	4604      	mov	r4, r0
 800139a:	b082      	sub	sp, #8
 800139c:	4699      	mov	r9, r3
 800139e:	460f      	mov	r7, r1
 80013a0:	4690      	mov	r8, r2
 80013a2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  uint32_t tickstart = HAL_GetTick();
 80013a4:	f7ff f8c2 	bl	800052c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80013a8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80013ac:	2b20      	cmp	r3, #32
 80013ae:	d003      	beq.n	80013b8 <HAL_I2C_Master_Transmit+0x24>
      return HAL_BUSY;
 80013b0:	2002      	movs	r0, #2
}
 80013b2:	b002      	add	sp, #8
 80013b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013b8:	4606      	mov	r6, r0
 80013ba:	e005      	b.n	80013c8 <HAL_I2C_Master_Transmit+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013bc:	f7ff f8b6 	bl	800052c <HAL_GetTick>
 80013c0:	1b80      	subs	r0, r0, r6
 80013c2:	2819      	cmp	r0, #25
 80013c4:	f200 80e1 	bhi.w	800158a <HAL_I2C_Master_Transmit+0x1f6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013c8:	6823      	ldr	r3, [r4, #0]
 80013ca:	699a      	ldr	r2, [r3, #24]
 80013cc:	43d2      	mvns	r2, r2
 80013ce:	f012 0a02 	ands.w	sl, r2, #2
 80013d2:	d0f3      	beq.n	80013bc <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 80013d4:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 80013d8:	2a01      	cmp	r2, #1
 80013da:	d0e9      	beq.n	80013b0 <HAL_I2C_Master_Transmit+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013dc:	681a      	ldr	r2, [r3, #0]
    __HAL_LOCK(hi2c);
 80013de:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013e0:	07d2      	lsls	r2, r2, #31
    __HAL_LOCK(hi2c);
 80013e2:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013e6:	d402      	bmi.n	80013ee <HAL_I2C_Master_Transmit+0x5a>
      __HAL_I2C_ENABLE(hi2c);
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013ee:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013f0:	48a0      	ldr	r0, [pc, #640]	; (8001674 <HAL_I2C_Master_Transmit+0x2e0>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013f6:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80013f8:	2221      	movs	r2, #33	; 0x21
 80013fa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80013fe:	2210      	movs	r2, #16
 8001400:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001404:	2200      	movs	r2, #0
 8001406:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001408:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800140c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800140e:	62e0      	str	r0, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001410:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8001412:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001416:	2a08      	cmp	r2, #8
    hi2c->XferSize    = hi2c->XferCount;
 8001418:	8521      	strh	r1, [r4, #40]	; 0x28
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800141a:	d071      	beq.n	8001500 <HAL_I2C_Master_Transmit+0x16c>
 800141c:	2a01      	cmp	r2, #1
 800141e:	d06f      	beq.n	8001500 <HAL_I2C_Master_Transmit+0x16c>
 8001420:	4282      	cmp	r2, r0
 8001422:	d06d      	beq.n	8001500 <HAL_I2C_Master_Transmit+0x16c>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001424:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001426:	2a12      	cmp	r2, #18
 8001428:	d06a      	beq.n	8001500 <HAL_I2C_Master_Transmit+0x16c>
 800142a:	1c68      	adds	r0, r5, #1
 800142c:	f040 808b 	bne.w	8001546 <HAL_I2C_Master_Transmit+0x1b2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001430:	695a      	ldr	r2, [r3, #20]
 8001432:	07d1      	lsls	r1, r2, #31
 8001434:	d5fc      	bpl.n	8001430 <HAL_I2C_Master_Transmit+0x9c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001436:	6922      	ldr	r2, [r4, #16]
 8001438:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800143c:	f040 80c9 	bne.w	80015d2 <HAL_I2C_Master_Transmit+0x23e>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001440:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8001444:	611f      	str	r7, [r3, #16]
 8001446:	1c6f      	adds	r7, r5, #1
 8001448:	d004      	beq.n	8001454 <HAL_I2C_Master_Transmit+0xc0>
 800144a:	e0e9      	b.n	8001620 <HAL_I2C_Master_Transmit+0x28c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800144c:	695a      	ldr	r2, [r3, #20]
 800144e:	0551      	lsls	r1, r2, #21
 8001450:	f100 80a9 	bmi.w	80015a6 <HAL_I2C_Master_Transmit+0x212>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001454:	695a      	ldr	r2, [r3, #20]
 8001456:	0790      	lsls	r0, r2, #30
 8001458:	d5f8      	bpl.n	800144c <HAL_I2C_Master_Transmit+0xb8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800145a:	2200      	movs	r2, #0
 800145c:	9201      	str	r2, [sp, #4]
 800145e:	695a      	ldr	r2, [r3, #20]
 8001460:	9201      	str	r2, [sp, #4]
 8001462:	699a      	ldr	r2, [r3, #24]
 8001464:	9201      	str	r2, [sp, #4]
 8001466:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8001468:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800146a:	2a00      	cmp	r2, #0
 800146c:	f000 80e7 	beq.w	800163e <HAL_I2C_Master_Transmit+0x2aa>
 8001470:	1c68      	adds	r0, r5, #1
 8001472:	d003      	beq.n	800147c <HAL_I2C_Master_Transmit+0xe8>
 8001474:	e049      	b.n	800150a <HAL_I2C_Master_Transmit+0x176>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001476:	695a      	ldr	r2, [r3, #20]
 8001478:	0552      	lsls	r2, r2, #21
 800147a:	d42a      	bmi.n	80014d2 <HAL_I2C_Master_Transmit+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800147c:	695a      	ldr	r2, [r3, #20]
 800147e:	0611      	lsls	r1, r2, #24
 8001480:	d5f9      	bpl.n	8001476 <HAL_I2C_Master_Transmit+0xe2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001482:	6a67      	ldr	r7, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001484:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001488:	4638      	mov	r0, r7
      hi2c->XferSize--;
 800148a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800148e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001492:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8001494:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8001496:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001498:	3a01      	subs	r2, #1
 800149a:	b292      	uxth	r2, r2
 800149c:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800149e:	6958      	ldr	r0, [r3, #20]
      hi2c->XferSize--;
 80014a0:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014a2:	0740      	lsls	r0, r0, #29
      hi2c->XferSize--;
 80014a4:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014a6:	d50c      	bpl.n	80014c2 <HAL_I2C_Master_Transmit+0x12e>
 80014a8:	b159      	cbz	r1, 80014c2 <HAL_I2C_Master_Transmit+0x12e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014aa:	787a      	ldrb	r2, [r7, #1]
 80014ac:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 80014ae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80014b0:	3a01      	subs	r2, #1
        hi2c->XferSize--;
 80014b2:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->pBuffPtr++;
 80014b6:	3702      	adds	r7, #2
        hi2c->XferCount--;
 80014b8:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 80014ba:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 80014be:	6267      	str	r7, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80014c0:	8562      	strh	r2, [r4, #42]	; 0x2a
 80014c2:	1c6f      	adds	r7, r5, #1
 80014c4:	d130      	bne.n	8001528 <HAL_I2C_Master_Transmit+0x194>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80014c6:	695a      	ldr	r2, [r3, #20]
 80014c8:	0750      	lsls	r0, r2, #29
 80014ca:	d4cd      	bmi.n	8001468 <HAL_I2C_Master_Transmit+0xd4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014cc:	695a      	ldr	r2, [r3, #20]
 80014ce:	0551      	lsls	r1, r2, #21
 80014d0:	d5f9      	bpl.n	80014c6 <HAL_I2C_Master_Transmit+0x132>
    hi2c->PreviousState       = I2C_STATE_NONE;
 80014d2:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014d4:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 80014d8:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014da:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80014dc:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80014de:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014e2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80014e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80014e8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	6423      	str	r3, [r4, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014f4:	2b04      	cmp	r3, #4
 80014f6:	d07e      	beq.n	80015f6 <HAL_I2C_Master_Transmit+0x262>
      return HAL_ERROR;
 80014f8:	2001      	movs	r0, #1
}
 80014fa:	b002      	add	sp, #8
 80014fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	e78f      	b.n	800142a <HAL_I2C_Master_Transmit+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800150a:	695a      	ldr	r2, [r3, #20]
 800150c:	0617      	lsls	r7, r2, #24
 800150e:	d4b8      	bmi.n	8001482 <HAL_I2C_Master_Transmit+0xee>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001510:	695a      	ldr	r2, [r3, #20]
 8001512:	0557      	lsls	r7, r2, #21
 8001514:	d4dd      	bmi.n	80014d2 <HAL_I2C_Master_Transmit+0x13e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001516:	f7ff f809 	bl	800052c <HAL_GetTick>
 800151a:	1b80      	subs	r0, r0, r6
 800151c:	4285      	cmp	r5, r0
 800151e:	d371      	bcc.n	8001604 <HAL_I2C_Master_Transmit+0x270>
 8001520:	2d00      	cmp	r5, #0
 8001522:	d06f      	beq.n	8001604 <HAL_I2C_Master_Transmit+0x270>
 8001524:	6823      	ldr	r3, [r4, #0]
 8001526:	e7a3      	b.n	8001470 <HAL_I2C_Master_Transmit+0xdc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001528:	695a      	ldr	r2, [r3, #20]
 800152a:	0752      	lsls	r2, r2, #29
 800152c:	d49c      	bmi.n	8001468 <HAL_I2C_Master_Transmit+0xd4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800152e:	695a      	ldr	r2, [r3, #20]
 8001530:	0552      	lsls	r2, r2, #21
 8001532:	d4ce      	bmi.n	80014d2 <HAL_I2C_Master_Transmit+0x13e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001534:	f7fe fffa 	bl	800052c <HAL_GetTick>
 8001538:	1b80      	subs	r0, r0, r6
 800153a:	4285      	cmp	r5, r0
 800153c:	d362      	bcc.n	8001604 <HAL_I2C_Master_Transmit+0x270>
 800153e:	2d00      	cmp	r5, #0
 8001540:	d060      	beq.n	8001604 <HAL_I2C_Master_Transmit+0x270>
 8001542:	6823      	ldr	r3, [r4, #0]
 8001544:	e7bd      	b.n	80014c2 <HAL_I2C_Master_Transmit+0x12e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001546:	695a      	ldr	r2, [r3, #20]
 8001548:	07d2      	lsls	r2, r2, #31
 800154a:	f53f af74 	bmi.w	8001436 <HAL_I2C_Master_Transmit+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800154e:	f7fe ffed 	bl	800052c <HAL_GetTick>
 8001552:	1b80      	subs	r0, r0, r6
 8001554:	4285      	cmp	r5, r0
 8001556:	6823      	ldr	r3, [r4, #0]
 8001558:	d302      	bcc.n	8001560 <HAL_I2C_Master_Transmit+0x1cc>
 800155a:	2d00      	cmp	r5, #0
 800155c:	f47f af65 	bne.w	800142a <HAL_I2C_Master_Transmit+0x96>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001560:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001562:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001564:	6321      	str	r1, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001566:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800156a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800156e:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001570:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001574:	f042 0220 	orr.w	r2, r2, #32
 8001578:	6422      	str	r2, [r4, #64]	; 0x40
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	05dd      	lsls	r5, r3, #23
 800157e:	d5bb      	bpl.n	80014f8 <HAL_I2C_Master_Transmit+0x164>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001584:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001586:	2001      	movs	r0, #1
 8001588:	e713      	b.n	80013b2 <HAL_I2C_Master_Transmit+0x1e>
        hi2c->State             = HAL_I2C_STATE_READY;
 800158a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800158c:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001590:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001594:	f884 a03e 	strb.w	sl, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001598:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800159a:	f884 a03c 	strb.w	sl, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800159e:	f043 0320 	orr.w	r3, r3, #32
 80015a2:	6423      	str	r3, [r4, #64]	; 0x40
 80015a4:	e704      	b.n	80013b0 <HAL_I2C_Master_Transmit+0x1c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015a6:	6819      	ldr	r1, [r3, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80015a8:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80015aa:	2020      	movs	r0, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015ac:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015b0:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80015b4:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015b6:	615d      	str	r5, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80015b8:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80015ba:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015be:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80015c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80015c4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80015c8:	f043 0304 	orr.w	r3, r3, #4
 80015cc:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80015ce:	2001      	movs	r0, #1
 80015d0:	e6ef      	b.n	80013b2 <HAL_I2C_Master_Transmit+0x1e>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80015d2:	11fa      	asrs	r2, r7, #7
 80015d4:	f002 0206 	and.w	r2, r2, #6
 80015d8:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 80015dc:	611a      	str	r2, [r3, #16]
 80015de:	1c69      	adds	r1, r5, #1
 80015e0:	d003      	beq.n	80015ea <HAL_I2C_Master_Transmit+0x256>
 80015e2:	e039      	b.n	8001658 <HAL_I2C_Master_Transmit+0x2c4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015e4:	695a      	ldr	r2, [r3, #20]
 80015e6:	0550      	lsls	r0, r2, #21
 80015e8:	d4dd      	bmi.n	80015a6 <HAL_I2C_Master_Transmit+0x212>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80015ea:	695a      	ldr	r2, [r3, #20]
 80015ec:	0712      	lsls	r2, r2, #28
 80015ee:	d5f9      	bpl.n	80015e4 <HAL_I2C_Master_Transmit+0x250>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80015f0:	b2ff      	uxtb	r7, r7
 80015f2:	611f      	str	r7, [r3, #16]
 80015f4:	e727      	b.n	8001446 <HAL_I2C_Master_Transmit+0xb2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015f6:	6822      	ldr	r2, [r4, #0]
 80015f8:	6813      	ldr	r3, [r2, #0]
 80015fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015fe:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8001600:	2001      	movs	r0, #1
 8001602:	e6d6      	b.n	80013b2 <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001604:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001606:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001608:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800160a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800160e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001612:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001614:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001618:	f043 0320 	orr.w	r3, r3, #32
 800161c:	6423      	str	r3, [r4, #64]	; 0x40
 800161e:	e768      	b.n	80014f2 <HAL_I2C_Master_Transmit+0x15e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001620:	695a      	ldr	r2, [r3, #20]
 8001622:	0792      	lsls	r2, r2, #30
 8001624:	f53f af19 	bmi.w	800145a <HAL_I2C_Master_Transmit+0xc6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001628:	695a      	ldr	r2, [r3, #20]
 800162a:	0552      	lsls	r2, r2, #21
 800162c:	d4bb      	bmi.n	80015a6 <HAL_I2C_Master_Transmit+0x212>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800162e:	f7fe ff7d 	bl	800052c <HAL_GetTick>
 8001632:	1b80      	subs	r0, r0, r6
 8001634:	4285      	cmp	r5, r0
 8001636:	d31f      	bcc.n	8001678 <HAL_I2C_Master_Transmit+0x2e4>
 8001638:	b1f5      	cbz	r5, 8001678 <HAL_I2C_Master_Transmit+0x2e4>
 800163a:	6823      	ldr	r3, [r4, #0]
 800163c:	e703      	b.n	8001446 <HAL_I2C_Master_Transmit+0xb2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800163e:	6819      	ldr	r1, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001640:	2520      	movs	r5, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001642:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8001646:	6019      	str	r1, [r3, #0]
    return HAL_OK;
 8001648:	4610      	mov	r0, r2
    hi2c->State = HAL_I2C_STATE_READY;
 800164a:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800164e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001652:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    return HAL_OK;
 8001656:	e6ac      	b.n	80013b2 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001658:	695a      	ldr	r2, [r3, #20]
 800165a:	0711      	lsls	r1, r2, #28
 800165c:	d4c8      	bmi.n	80015f0 <HAL_I2C_Master_Transmit+0x25c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800165e:	695a      	ldr	r2, [r3, #20]
 8001660:	0550      	lsls	r0, r2, #21
 8001662:	d4a0      	bmi.n	80015a6 <HAL_I2C_Master_Transmit+0x212>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001664:	f7fe ff62 	bl	800052c <HAL_GetTick>
 8001668:	1b80      	subs	r0, r0, r6
 800166a:	4285      	cmp	r5, r0
 800166c:	d304      	bcc.n	8001678 <HAL_I2C_Master_Transmit+0x2e4>
 800166e:	b11d      	cbz	r5, 8001678 <HAL_I2C_Master_Transmit+0x2e4>
 8001670:	6823      	ldr	r3, [r4, #0]
 8001672:	e7b4      	b.n	80015de <HAL_I2C_Master_Transmit+0x24a>
 8001674:	ffff0000 	.word	0xffff0000
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001678:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800167a:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800167c:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800167e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001682:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001686:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001688:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800168c:	f043 0320 	orr.w	r3, r3, #32
 8001690:	6423      	str	r3, [r4, #64]	; 0x40
 8001692:	e731      	b.n	80014f8 <HAL_I2C_Master_Transmit+0x164>

08001694 <HAL_I2C_Mem_Read>:
{
 8001694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001698:	4604      	mov	r4, r0
 800169a:	b087      	sub	sp, #28
 800169c:	4699      	mov	r9, r3
 800169e:	460f      	mov	r7, r1
 80016a0:	4690      	mov	r8, r2
 80016a2:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 80016a6:	9d12      	ldr	r5, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 80016a8:	f7fe ff40 	bl	800052c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ac:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80016b0:	2b20      	cmp	r3, #32
 80016b2:	d004      	beq.n	80016be <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 80016b4:	2702      	movs	r7, #2
}
 80016b6:	4638      	mov	r0, r7
 80016b8:	b007      	add	sp, #28
 80016ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016be:	4606      	mov	r6, r0
 80016c0:	e004      	b.n	80016cc <HAL_I2C_Mem_Read+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016c2:	f7fe ff33 	bl	800052c <HAL_GetTick>
 80016c6:	1b80      	subs	r0, r0, r6
 80016c8:	2819      	cmp	r0, #25
 80016ca:	d84a      	bhi.n	8001762 <HAL_I2C_Mem_Read+0xce>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016cc:	6822      	ldr	r2, [r4, #0]
 80016ce:	6993      	ldr	r3, [r2, #24]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	f013 0b02 	ands.w	fp, r3, #2
 80016d6:	d0f4      	beq.n	80016c2 <HAL_I2C_Mem_Read+0x2e>
    __HAL_LOCK(hi2c);
 80016d8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d0e9      	beq.n	80016b4 <HAL_I2C_Mem_Read+0x20>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016e0:	6813      	ldr	r3, [r2, #0]
    __HAL_LOCK(hi2c);
 80016e2:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016e4:	07db      	lsls	r3, r3, #31
    __HAL_LOCK(hi2c);
 80016e6:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016ea:	d402      	bmi.n	80016f2 <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80016ec:	6813      	ldr	r3, [r2, #0]
 80016ee:	430b      	orrs	r3, r1
 80016f0:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016f2:	6813      	ldr	r3, [r2, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016f4:	48a2      	ldr	r0, [pc, #648]	; (8001980 <HAL_I2C_Mem_Read+0x2ec>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016fa:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016fc:	2322      	movs	r3, #34	; 0x22
 80016fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001702:	2240      	movs	r2, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001704:	2300      	movs	r3, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001706:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800170a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800170c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001710:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001714:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001716:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001718:	4639      	mov	r1, r7
 800171a:	e9cd 5600 	strd	r5, r6, [sp]
 800171e:	464b      	mov	r3, r9
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001720:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001722:	4642      	mov	r2, r8
    hi2c->XferSize    = hi2c->XferCount;
 8001724:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001728:	4620      	mov	r0, r4
 800172a:	f7ff fc2f 	bl	8000f8c <I2C_RequestMemoryRead>
 800172e:	4607      	mov	r7, r0
 8001730:	b9a8      	cbnz	r0, 800175e <HAL_I2C_Mem_Read+0xca>
    if (hi2c->XferSize == 0U)
 8001732:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001734:	6823      	ldr	r3, [r4, #0]
 8001736:	bb12      	cbnz	r2, 800177e <HAL_I2C_Mem_Read+0xea>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001738:	9002      	str	r0, [sp, #8]
 800173a:	695a      	ldr	r2, [r3, #20]
 800173c:	9202      	str	r2, [sp, #8]
 800173e:	699a      	ldr	r2, [r3, #24]
 8001740:	9202      	str	r2, [sp, #8]
 8001742:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800174a:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800174c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800174e:	2220      	movs	r2, #32
 8001750:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001754:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001758:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800175c:	e7ab      	b.n	80016b6 <HAL_I2C_Mem_Read+0x22>
      return HAL_ERROR;
 800175e:	2701      	movs	r7, #1
 8001760:	e7a9      	b.n	80016b6 <HAL_I2C_Mem_Read+0x22>
        hi2c->State             = HAL_I2C_STATE_READY;
 8001762:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001764:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001768:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800176c:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001770:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001772:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001776:	f043 0320 	orr.w	r3, r3, #32
 800177a:	6423      	str	r3, [r4, #64]	; 0x40
 800177c:	e79a      	b.n	80016b4 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 800177e:	2a01      	cmp	r2, #1
 8001780:	f000 8091 	beq.w	80018a6 <HAL_I2C_Mem_Read+0x212>
    else if (hi2c->XferSize == 2U)
 8001784:	2a02      	cmp	r2, #2
 8001786:	f000 80fd 	beq.w	8001984 <HAL_I2C_Mem_Read+0x2f0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800178a:	9005      	str	r0, [sp, #20]
 800178c:	6959      	ldr	r1, [r3, #20]
 800178e:	9105      	str	r1, [sp, #20]
 8001790:	6999      	ldr	r1, [r3, #24]
 8001792:	9105      	str	r1, [sp, #20]
 8001794:	9905      	ldr	r1, [sp, #20]
      if (hi2c->XferSize <= 3U)
 8001796:	2a03      	cmp	r2, #3
 8001798:	d848      	bhi.n	800182c <HAL_I2C_Mem_Read+0x198>
        if (hi2c->XferSize == 1U)
 800179a:	2a01      	cmp	r2, #1
 800179c:	f000 80bc 	beq.w	8001918 <HAL_I2C_Mem_Read+0x284>
        else if (hi2c->XferSize == 2U)
 80017a0:	2a02      	cmp	r2, #2
 80017a2:	d074      	beq.n	800188e <HAL_I2C_Mem_Read+0x1fa>
 80017a4:	1c68      	adds	r0, r5, #1
 80017a6:	f040 808d 	bne.w	80018c4 <HAL_I2C_Mem_Read+0x230>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017aa:	695a      	ldr	r2, [r3, #20]
 80017ac:	0751      	lsls	r1, r2, #29
 80017ae:	d5fc      	bpl.n	80017aa <HAL_I2C_Mem_Read+0x116>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017b0:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017b8:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80017be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80017c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80017c2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80017c4:	3b01      	subs	r3, #1
 80017c6:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80017c8:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80017ca:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80017cc:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80017ce:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80017d0:	8522      	strh	r2, [r4, #40]	; 0x28
 80017d2:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017d4:	6822      	ldr	r2, [r4, #0]
 80017d6:	f040 8081 	bne.w	80018dc <HAL_I2C_Mem_Read+0x248>
 80017da:	6953      	ldr	r3, [r2, #20]
 80017dc:	0759      	lsls	r1, r3, #29
 80017de:	d5fc      	bpl.n	80017da <HAL_I2C_Mem_Read+0x146>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017e0:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e8:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017ea:	6913      	ldr	r3, [r2, #16]
 80017ec:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80017ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80017f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80017f2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017f4:	6822      	ldr	r2, [r4, #0]
          hi2c->XferCount--;
 80017f6:	3b01      	subs	r3, #1
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017fc:	6912      	ldr	r2, [r2, #16]
          hi2c->pBuffPtr++;
 80017fe:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 8001802:	1e4b      	subs	r3, r1, #1
          hi2c->pBuffPtr++;
 8001804:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001808:	8523      	strh	r3, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800180a:	7042      	strb	r2, [r0, #1]
          hi2c->XferSize--;
 800180c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800180e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8001810:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001812:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8001814:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 8001816:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8001818:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 800181a:	3101      	adds	r1, #1
          hi2c->XferSize--;
 800181c:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800181e:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8001820:	6261      	str	r1, [r4, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 8001822:	2a00      	cmp	r2, #0
 8001824:	d092      	beq.n	800174c <HAL_I2C_Mem_Read+0xb8>
      if (hi2c->XferSize <= 3U)
 8001826:	2a03      	cmp	r2, #3
 8001828:	6823      	ldr	r3, [r4, #0]
 800182a:	d9b6      	bls.n	800179a <HAL_I2C_Mem_Read+0x106>
 800182c:	b955      	cbnz	r5, 8001844 <HAL_I2C_Mem_Read+0x1b0>
 800182e:	e098      	b.n	8001962 <HAL_I2C_Mem_Read+0x2ce>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001830:	695a      	ldr	r2, [r3, #20]
 8001832:	06d2      	lsls	r2, r2, #27
 8001834:	f100 8082 	bmi.w	800193c <HAL_I2C_Mem_Read+0x2a8>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001838:	f7fe fe78 	bl	800052c <HAL_GetTick>
 800183c:	1b80      	subs	r0, r0, r6
 800183e:	4285      	cmp	r5, r0
 8001840:	d358      	bcc.n	80018f4 <HAL_I2C_Mem_Read+0x260>
 8001842:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001844:	695a      	ldr	r2, [r3, #20]
 8001846:	0651      	lsls	r1, r2, #25
 8001848:	d5f2      	bpl.n	8001830 <HAL_I2C_Mem_Read+0x19c>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800184a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 8001850:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001852:	6823      	ldr	r3, [r4, #0]
        hi2c->XferSize--;
 8001854:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8001856:	6a60      	ldr	r0, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001858:	3901      	subs	r1, #1
 800185a:	b289      	uxth	r1, r1
 800185c:	8561      	strh	r1, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800185e:	6959      	ldr	r1, [r3, #20]
        hi2c->XferSize--;
 8001860:	3a01      	subs	r2, #1
 8001862:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8001864:	f100 0c01 	add.w	ip, r0, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001868:	0749      	lsls	r1, r1, #29
        hi2c->XferSize--;
 800186a:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 800186c:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001870:	d5d7      	bpl.n	8001822 <HAL_I2C_Mem_Read+0x18e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	7043      	strb	r3, [r0, #1]
 8001876:	e7c9      	b.n	800180c <HAL_I2C_Mem_Read+0x178>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001878:	695a      	ldr	r2, [r3, #20]
 800187a:	0752      	lsls	r2, r2, #29
 800187c:	d40c      	bmi.n	8001898 <HAL_I2C_Mem_Read+0x204>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800187e:	f7fe fe55 	bl	800052c <HAL_GetTick>
 8001882:	1b80      	subs	r0, r0, r6
 8001884:	4285      	cmp	r5, r0
 8001886:	d335      	bcc.n	80018f4 <HAL_I2C_Mem_Read+0x260>
 8001888:	2d00      	cmp	r5, #0
 800188a:	d033      	beq.n	80018f4 <HAL_I2C_Mem_Read+0x260>
 800188c:	6823      	ldr	r3, [r4, #0]
 800188e:	1c68      	adds	r0, r5, #1
 8001890:	d1f2      	bne.n	8001878 <HAL_I2C_Mem_Read+0x1e4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001892:	695a      	ldr	r2, [r3, #20]
 8001894:	0751      	lsls	r1, r2, #29
 8001896:	d5fc      	bpl.n	8001892 <HAL_I2C_Mem_Read+0x1fe>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001898:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800189a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800189c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018a0:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	e7a2      	b.n	80017ec <HAL_I2C_Mem_Read+0x158>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018a6:	6819      	ldr	r1, [r3, #0]
 80018a8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80018ac:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ae:	9003      	str	r0, [sp, #12]
 80018b0:	6959      	ldr	r1, [r3, #20]
 80018b2:	9103      	str	r1, [sp, #12]
 80018b4:	6999      	ldr	r1, [r3, #24]
 80018b6:	9103      	str	r1, [sp, #12]
 80018b8:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ba:	6819      	ldr	r1, [r3, #0]
 80018bc:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80018c0:	6019      	str	r1, [r3, #0]
 80018c2:	e768      	b.n	8001796 <HAL_I2C_Mem_Read+0x102>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018c4:	695a      	ldr	r2, [r3, #20]
 80018c6:	0752      	lsls	r2, r2, #29
 80018c8:	f53f af72 	bmi.w	80017b0 <HAL_I2C_Mem_Read+0x11c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018cc:	f7fe fe2e 	bl	800052c <HAL_GetTick>
 80018d0:	1b80      	subs	r0, r0, r6
 80018d2:	4285      	cmp	r5, r0
 80018d4:	d30e      	bcc.n	80018f4 <HAL_I2C_Mem_Read+0x260>
 80018d6:	b16d      	cbz	r5, 80018f4 <HAL_I2C_Mem_Read+0x260>
 80018d8:	6823      	ldr	r3, [r4, #0]
 80018da:	e763      	b.n	80017a4 <HAL_I2C_Mem_Read+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018dc:	6953      	ldr	r3, [r2, #20]
 80018de:	075b      	lsls	r3, r3, #29
 80018e0:	f53f af7e 	bmi.w	80017e0 <HAL_I2C_Mem_Read+0x14c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018e4:	f7fe fe22 	bl	800052c <HAL_GetTick>
 80018e8:	1b80      	subs	r0, r0, r6
 80018ea:	4285      	cmp	r5, r0
 80018ec:	d302      	bcc.n	80018f4 <HAL_I2C_Mem_Read+0x260>
 80018ee:	2d00      	cmp	r5, #0
 80018f0:	f47f af6f 	bne.w	80017d2 <HAL_I2C_Mem_Read+0x13e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80018f4:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80018f6:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80018f8:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80018fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80018fe:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001902:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001904:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001908:	2701      	movs	r7, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800190a:	f043 0320 	orr.w	r3, r3, #32
}
 800190e:	4638      	mov	r0, r7
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001910:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001912:	b007      	add	sp, #28
 8001914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001918:	b94d      	cbnz	r5, 800192e <HAL_I2C_Mem_Read+0x29a>
 800191a:	e02c      	b.n	8001976 <HAL_I2C_Mem_Read+0x2e2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	06d1      	lsls	r1, r2, #27
 8001920:	d40c      	bmi.n	800193c <HAL_I2C_Mem_Read+0x2a8>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001922:	f7fe fe03 	bl	800052c <HAL_GetTick>
 8001926:	1b80      	subs	r0, r0, r6
 8001928:	4285      	cmp	r5, r0
 800192a:	d3e3      	bcc.n	80018f4 <HAL_I2C_Mem_Read+0x260>
 800192c:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800192e:	695a      	ldr	r2, [r3, #20]
 8001930:	0650      	lsls	r0, r2, #25
 8001932:	d5f3      	bpl.n	800191c <HAL_I2C_Mem_Read+0x288>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001934:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	7013      	strb	r3, [r2, #0]
 800193a:	e767      	b.n	800180c <HAL_I2C_Mem_Read+0x178>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800193c:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800193e:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8001942:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001944:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001946:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001948:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800194c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001950:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001952:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001956:	2701      	movs	r7, #1
}
 8001958:	4638      	mov	r0, r7
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800195a:	6423      	str	r3, [r4, #64]	; 0x40
}
 800195c:	b007      	add	sp, #28
 800195e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001962:	695a      	ldr	r2, [r3, #20]
 8001964:	0650      	lsls	r0, r2, #25
 8001966:	f53f af70 	bmi.w	800184a <HAL_I2C_Mem_Read+0x1b6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800196a:	695a      	ldr	r2, [r3, #20]
 800196c:	06d0      	lsls	r0, r2, #27
 800196e:	d4e5      	bmi.n	800193c <HAL_I2C_Mem_Read+0x2a8>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001970:	f7fe fddc 	bl	800052c <HAL_GetTick>
 8001974:	e7be      	b.n	80018f4 <HAL_I2C_Mem_Read+0x260>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001976:	695a      	ldr	r2, [r3, #20]
 8001978:	0652      	lsls	r2, r2, #25
 800197a:	d5f6      	bpl.n	800196a <HAL_I2C_Mem_Read+0x2d6>
 800197c:	e7da      	b.n	8001934 <HAL_I2C_Mem_Read+0x2a0>
 800197e:	bf00      	nop
 8001980:	ffff0000 	.word	0xffff0000
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001984:	6819      	ldr	r1, [r3, #0]
 8001986:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800198a:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800198c:	6819      	ldr	r1, [r3, #0]
 800198e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8001992:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001994:	9004      	str	r0, [sp, #16]
 8001996:	6959      	ldr	r1, [r3, #20]
 8001998:	9104      	str	r1, [sp, #16]
 800199a:	6999      	ldr	r1, [r3, #24]
 800199c:	9104      	str	r1, [sp, #16]
 800199e:	9904      	ldr	r1, [sp, #16]
 80019a0:	e6f9      	b.n	8001796 <HAL_I2C_Mem_Read+0x102>
 80019a2:	bf00      	nop

080019a4 <HAL_I2C_MasterTxCpltCallback>:
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop

080019a8 <HAL_I2C_MasterRxCpltCallback>:
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop

080019ac <HAL_I2C_SlaveTxCpltCallback>:
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop

080019b0 <HAL_I2C_SlaveRxCpltCallback>:
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop

080019b4 <HAL_I2C_AddrCallback>:
}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop

080019b8 <HAL_I2C_ListenCpltCallback>:
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop

080019bc <HAL_I2C_MemTxCpltCallback>:
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop

080019c0 <HAL_I2C_MemRxCpltCallback>:
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop

080019c4 <HAL_I2C_ErrorCallback>:
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop

080019c8 <HAL_I2C_AbortCpltCallback>:
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop

080019cc <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80019cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80019ce:	e9d3 010d 	ldrd	r0, r1, [r3, #52]	; 0x34
{
 80019d2:	b570      	push	{r4, r5, r6, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80019d4:	f893 403d 	ldrb.w	r4, [r3, #61]	; 0x3d
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	b2e6      	uxtb	r6, r4
  if (hi2c->hdmatx != NULL)
 80019dc:	b340      	cbz	r0, 8001a30 <I2C_DMAAbort+0x64>
    hi2c->hdmatx->XferCpltCallback = NULL;
 80019de:	2400      	movs	r4, #0
 80019e0:	63c4      	str	r4, [r0, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 80019e2:	b1f1      	cbz	r1, 8001a22 <I2C_DMAAbort+0x56>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019e4:	6815      	ldr	r5, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 80019e6:	63cc      	str	r4, [r1, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019e8:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 80019ec:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 80019ee:	855c      	strh	r4, [r3, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 80019f0:	6504      	str	r4, [r0, #80]	; 0x50
    hi2c->hdmarx->XferAbortCallback = NULL;
 80019f2:	2000      	movs	r0, #0
 80019f4:	6508      	str	r0, [r1, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 80019f6:	6811      	ldr	r1, [r2, #0]
 80019f8:	f021 0101 	bic.w	r1, r1, #1
 80019fc:	6011      	str	r1, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80019fe:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
 8001a02:	2960      	cmp	r1, #96	; 0x60
 8001a04:	d029      	beq.n	8001a5a <I2C_DMAAbort+0x8e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001a06:	f006 0428 	and.w	r4, r6, #40	; 0x28
 8001a0a:	2c28      	cmp	r4, #40	; 0x28
 8001a0c:	d018      	beq.n	8001a40 <I2C_DMAAbort+0x74>
      hi2c->State = HAL_I2C_STATE_READY;
 8001a0e:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a10:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8001a12:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff ffd2 	bl	80019c4 <HAL_I2C_ErrorCallback>
}
 8001a20:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a22:	6814      	ldr	r4, [r2, #0]
 8001a24:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8001a28:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 8001a2a:	8559      	strh	r1, [r3, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 8001a2c:	6501      	str	r1, [r0, #80]	; 0x50
 8001a2e:	e7e2      	b.n	80019f6 <I2C_DMAAbort+0x2a>
  if (hi2c->hdmarx != NULL)
 8001a30:	b1f1      	cbz	r1, 8001a70 <I2C_DMAAbort+0xa4>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a32:	6814      	ldr	r4, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8001a34:	63c8      	str	r0, [r1, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a36:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8001a3a:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 8001a3c:	8558      	strh	r0, [r3, #42]	; 0x2a
 8001a3e:	e7d8      	b.n	80019f2 <I2C_DMAAbort+0x26>
      __HAL_I2C_ENABLE(hi2c);
 8001a40:	6811      	ldr	r1, [r2, #0]
 8001a42:	f041 0101 	orr.w	r1, r1, #1
 8001a46:	6011      	str	r1, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a48:	6811      	ldr	r1, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001a4a:	2000      	movs	r0, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a4c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001a50:	6011      	str	r1, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001a52:	6318      	str	r0, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001a54:	f883 403d 	strb.w	r4, [r3, #61]	; 0x3d
 8001a58:	e7df      	b.n	8001a1a <I2C_DMAAbort+0x4e>
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001a5a:	2200      	movs	r2, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8001a5c:	2120      	movs	r1, #32
 8001a5e:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    HAL_I2C_AbortCpltCallback(hi2c);
 8001a62:	4618      	mov	r0, r3
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001a68:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8001a6a:	f7ff ffad 	bl	80019c8 <HAL_I2C_AbortCpltCallback>
}
 8001a6e:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a70:	6810      	ldr	r0, [r2, #0]
 8001a72:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8001a76:	6010      	str	r0, [r2, #0]
  hi2c->XferCount = 0U;
 8001a78:	8559      	strh	r1, [r3, #42]	; 0x2a
 8001a7a:	e7bc      	b.n	80019f6 <I2C_DMAAbort+0x2a>

08001a7c <HAL_I2C_EV_IRQHandler>:
{
 8001a7c:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001a7e:	6803      	ldr	r3, [r0, #0]
{
 8001a80:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001a82:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001a84:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001a86:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a8a:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001a8e:	b2d2      	uxtb	r2, r2
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001a90:	2a10      	cmp	r2, #16
{
 8001a92:	b08c      	sub	sp, #48	; 0x30
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001a94:	d020      	beq.n	8001ad8 <HAL_I2C_EV_IRQHandler+0x5c>
 8001a96:	2a40      	cmp	r2, #64	; 0x40
 8001a98:	d01e      	beq.n	8001ad8 <HAL_I2C_EV_IRQHandler+0x5c>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001a9a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001a9c:	b2c9      	uxtb	r1, r1
 8001a9e:	2a00      	cmp	r2, #0
 8001aa0:	f000 80bb 	beq.w	8001c1a <HAL_I2C_EV_IRQHandler+0x19e>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001aa4:	695a      	ldr	r2, [r3, #20]
  uint32_t sr2itflags               = 0U;
 8001aa6:	2600      	movs	r6, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001aa8:	f3c2 0540 	ubfx	r5, r2, #1, #1
 8001aac:	2d00      	cmp	r5, #0
 8001aae:	d078      	beq.n	8001ba2 <HAL_I2C_EV_IRQHandler+0x126>
 8001ab0:	0585      	lsls	r5, r0, #22
 8001ab2:	d57b      	bpl.n	8001bac <HAL_I2C_EV_IRQHandler+0x130>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001ab4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ab6:	b102      	cbz	r2, 8001aba <HAL_I2C_EV_IRQHandler+0x3e>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ab8:	699e      	ldr	r6, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001aba:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001abe:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8001ac2:	2a28      	cmp	r2, #40	; 0x28
 8001ac4:	f000 821c 	beq.w	8001f00 <HAL_I2C_EV_IRQHandler+0x484>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ac8:	f06f 0102 	mvn.w	r1, #2
    __HAL_UNLOCK(hi2c);
 8001acc:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ace:	6159      	str	r1, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8001ad0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8001ad4:	b00c      	add	sp, #48	; 0x30
 8001ad6:	bd70      	pop	{r4, r5, r6, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ad8:	6999      	ldr	r1, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ada:	695a      	ldr	r2, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001adc:	07d6      	lsls	r6, r2, #31
 8001ade:	d43a      	bmi.n	8001b56 <HAL_I2C_EV_IRQHandler+0xda>
 8001ae0:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 8001ae4:	d0f6      	beq.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
 8001ae6:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 8001aea:	d0f3      	beq.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001aec:	0716      	lsls	r6, r2, #28
 8001aee:	f140 809a 	bpl.w	8001c26 <HAL_I2C_EV_IRQHandler+0x1aa>
 8001af2:	0585      	lsls	r5, r0, #22
 8001af4:	f100 81f5 	bmi.w	8001ee2 <HAL_I2C_EV_IRQHandler+0x466>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001af8:	f011 0f04 	tst.w	r1, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001afc:	6859      	ldr	r1, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001afe:	f000 80ff 	beq.w	8001d00 <HAL_I2C_EV_IRQHandler+0x284>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001b02:	0509      	lsls	r1, r1, #20
 8001b04:	d4e6      	bmi.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b06:	0616      	lsls	r6, r2, #24
 8001b08:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8001b0c:	f140 81a0 	bpl.w	8001e50 <HAL_I2C_EV_IRQHandler+0x3d4>
 8001b10:	0545      	lsls	r5, r0, #21
 8001b12:	f140 819d 	bpl.w	8001e50 <HAL_I2C_EV_IRQHandler+0x3d4>
 8001b16:	2900      	cmp	r1, #0
 8001b18:	f040 819d 	bne.w	8001e56 <HAL_I2C_EV_IRQHandler+0x3da>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b1c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001b20:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001b22:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001b26:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b28:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001b2a:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001b2c:	2800      	cmp	r0, #0
 8001b2e:	f040 8378 	bne.w	8002222 <HAL_I2C_EV_IRQHandler+0x7a6>
 8001b32:	2a21      	cmp	r2, #33	; 0x21
 8001b34:	f000 8418 	beq.w	8002368 <HAL_I2C_EV_IRQHandler+0x8ec>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001b38:	2940      	cmp	r1, #64	; 0x40
 8001b3a:	d1cb      	bne.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001b3c:	2a22      	cmp	r2, #34	; 0x22
 8001b3e:	d1c9      	bne.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
    if (hi2c->XferCount == 0U)
 8001b40:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001b42:	b292      	uxth	r2, r2
 8001b44:	2a00      	cmp	r2, #0
 8001b46:	f000 8409 	beq.w	800235c <HAL_I2C_EV_IRQHandler+0x8e0>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b4a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8001b4e:	2a40      	cmp	r2, #64	; 0x40
 8001b50:	f040 80b6 	bne.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x244>
 8001b54:	e18d      	b.n	8001e72 <HAL_I2C_EV_IRQHandler+0x3f6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b56:	0585      	lsls	r5, r0, #22
 8001b58:	d562      	bpl.n	8001c20 <HAL_I2C_EV_IRQHandler+0x1a4>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8001b5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b5c:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8001b60:	f000 81e9 	beq.w	8001f36 <HAL_I2C_EV_IRQHandler+0x4ba>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8001b64:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b66:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8001b6a:	bf04      	itt	eq
 8001b6c:	2208      	moveq	r2, #8
 8001b6e:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b70:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8001b74:	2a40      	cmp	r2, #64	; 0x40
 8001b76:	f000 81d7 	beq.w	8001f28 <HAL_I2C_EV_IRQHandler+0x4ac>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b7a:	6922      	ldr	r2, [r4, #16]
 8001b7c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001b80:	f000 8197 	beq.w	8001eb2 <HAL_I2C_EV_IRQHandler+0x436>
      if (hi2c->EventCount == 0U)
 8001b84:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001b86:	2a00      	cmp	r2, #0
 8001b88:	f000 81d8 	beq.w	8001f3c <HAL_I2C_EV_IRQHandler+0x4c0>
      else if (hi2c->EventCount == 1U)
 8001b8c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001b8e:	2a01      	cmp	r2, #1
 8001b90:	d1a0      	bne.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001b92:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001b94:	11d2      	asrs	r2, r2, #7
 8001b96:	f002 0206 	and.w	r2, r2, #6
 8001b9a:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8001b9e:	611a      	str	r2, [r3, #16]
 8001ba0:	e798      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ba2:	06d6      	lsls	r6, r2, #27
 8001ba4:	d502      	bpl.n	8001bac <HAL_I2C_EV_IRQHandler+0x130>
 8001ba6:	0586      	lsls	r6, r0, #22
 8001ba8:	f100 80d7 	bmi.w	8001d5a <HAL_I2C_EV_IRQHandler+0x2de>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001bac:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 8001bb0:	2921      	cmp	r1, #33	; 0x21
 8001bb2:	f3c2 0580 	ubfx	r5, r2, #2, #1
 8001bb6:	d04e      	beq.n	8001c56 <HAL_I2C_EV_IRQHandler+0x1da>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001bb8:	0651      	lsls	r1, r2, #25
 8001bba:	f140 808b 	bpl.w	8001cd4 <HAL_I2C_EV_IRQHandler+0x258>
 8001bbe:	0542      	lsls	r2, r0, #21
 8001bc0:	f140 8088 	bpl.w	8001cd4 <HAL_I2C_EV_IRQHandler+0x258>
 8001bc4:	2d00      	cmp	r5, #0
 8001bc6:	f040 8088 	bne.w	8001cda <HAL_I2C_EV_IRQHandler+0x25e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001bca:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8001bce:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001bd0:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001bd2:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8001bd4:	2a00      	cmp	r2, #0
 8001bd6:	f43f af7d 	beq.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bda:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8001be0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8001be2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001be4:	3b01      	subs	r3, #1
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001bea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8001bec:	3201      	adds	r2, #1
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001bee:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8001bf0:	6262      	str	r2, [r4, #36]	; 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f47f af6e 	bne.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
 8001bf8:	292a      	cmp	r1, #42	; 0x2a
 8001bfa:	f47f af6b 	bne.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001bfe:	6822      	ldr	r2, [r4, #0]
 8001c00:	6853      	ldr	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001c02:	2522      	movs	r5, #34	; 0x22
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001c08:	2128      	movs	r1, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c0a:	6053      	str	r3, [r2, #4]
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001c0c:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001c0e:	6325      	str	r5, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001c10:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001c14:	f7ff fecc 	bl	80019b0 <HAL_I2C_SlaveRxCpltCallback>
 8001c18:	e75c      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001c1a:	699e      	ldr	r6, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001c1c:	695a      	ldr	r2, [r3, #20]
 8001c1e:	e743      	b.n	8001aa8 <HAL_I2C_EV_IRQHandler+0x2c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c20:	0715      	lsls	r5, r2, #28
 8001c22:	f53f af69 	bmi.w	8001af8 <HAL_I2C_EV_IRQHandler+0x7c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c26:	0796      	lsls	r6, r2, #30
 8001c28:	f57f af66 	bpl.w	8001af8 <HAL_I2C_EV_IRQHandler+0x7c>
 8001c2c:	0585      	lsls	r5, r0, #22
 8001c2e:	f57f af63 	bpl.w	8001af8 <HAL_I2C_EV_IRQHandler+0x7c>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001c32:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001c36:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001c38:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c3a:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8001c3e:	2922      	cmp	r1, #34	; 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001c40:	b2d2      	uxtb	r2, r2
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c42:	f000 820b 	beq.w	800205c <HAL_I2C_EV_IRQHandler+0x5e0>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c46:	2200      	movs	r2, #0
 8001c48:	920a      	str	r2, [sp, #40]	; 0x28
 8001c4a:	695a      	ldr	r2, [r3, #20]
 8001c4c:	920a      	str	r2, [sp, #40]	; 0x28
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	930a      	str	r3, [sp, #40]	; 0x28
 8001c52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001c54:	e73e      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c56:	0612      	lsls	r2, r2, #24
 8001c58:	d527      	bpl.n	8001caa <HAL_I2C_EV_IRQHandler+0x22e>
 8001c5a:	0546      	lsls	r6, r0, #21
 8001c5c:	d525      	bpl.n	8001caa <HAL_I2C_EV_IRQHandler+0x22e>
 8001c5e:	bb3d      	cbnz	r5, 8001cb0 <HAL_I2C_EV_IRQHandler+0x234>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c60:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8001c64:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001c66:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c68:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8001c6a:	2a00      	cmp	r2, #0
 8001c6c:	f43f af32 	beq.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c70:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001c72:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001c76:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 8001c78:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8001c7a:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001c7c:	3a01      	subs	r2, #1
 8001c7e:	b292      	uxth	r2, r2
 8001c80:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001c82:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001c84:	b292      	uxth	r2, r2
 8001c86:	2a00      	cmp	r2, #0
 8001c88:	f47f af24 	bne.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
 8001c8c:	2829      	cmp	r0, #41	; 0x29
 8001c8e:	f47f af21 	bne.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c92:	685a      	ldr	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001c94:	2528      	movs	r5, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c9a:	605a      	str	r2, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001c9c:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001c9e:	6321      	str	r1, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001ca0:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001ca4:	f7ff fe82 	bl	80019ac <HAL_I2C_SlaveTxCpltCallback>
 8001ca8:	e714      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001caa:	2d00      	cmp	r5, #0
 8001cac:	f43f af12 	beq.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
 8001cb0:	0580      	lsls	r0, r0, #22
 8001cb2:	f57f af0f 	bpl.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
  if (hi2c->XferCount != 0U)
 8001cb6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001cb8:	b292      	uxth	r2, r2
 8001cba:	2a00      	cmp	r2, #0
 8001cbc:	f43f af0a 	beq.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cc0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001cc2:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001cc6:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 8001cc8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8001cca:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001cd2:	e6ff      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cd4:	2d00      	cmp	r5, #0
 8001cd6:	f43f aefd 	beq.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
 8001cda:	0586      	lsls	r6, r0, #22
 8001cdc:	f57f aefa 	bpl.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
  if (hi2c->XferCount != 0U)
 8001ce0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001ce2:	b292      	uxth	r2, r2
 8001ce4:	2a00      	cmp	r2, #0
 8001ce6:	f43f aef5 	beq.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8001cf0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8001cf2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8001cf8:	3201      	adds	r2, #1
    hi2c->XferCount--;
 8001cfa:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8001cfc:	6262      	str	r2, [r4, #36]	; 0x24
 8001cfe:	e6e9      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001d00:	050e      	lsls	r6, r1, #20
 8001d02:	f53f aee7 	bmi.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d06:	0655      	lsls	r5, r2, #25
 8001d08:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8001d0c:	f140 80b7 	bpl.w	8001e7e <HAL_I2C_EV_IRQHandler+0x402>
 8001d10:	0542      	lsls	r2, r0, #21
 8001d12:	f140 80b4 	bpl.w	8001e7e <HAL_I2C_EV_IRQHandler+0x402>
 8001d16:	2900      	cmp	r1, #0
 8001d18:	f040 80b4 	bne.w	8001e84 <HAL_I2C_EV_IRQHandler+0x408>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d1c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001d20:	2a22      	cmp	r2, #34	; 0x22
 8001d22:	f47f aed7 	bne.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
    tmp = hi2c->XferCount;
 8001d26:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001d28:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8001d2a:	2a03      	cmp	r2, #3
 8001d2c:	f240 82e9 	bls.w	8002302 <HAL_I2C_EV_IRQHandler+0x886>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d30:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8001d36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8001d38:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8001d40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d42:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8001d44:	3201      	adds	r2, #1
      if (hi2c->XferCount == (uint16_t)3)
 8001d46:	2b03      	cmp	r3, #3
      hi2c->pBuffPtr++;
 8001d48:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->XferCount == (uint16_t)3)
 8001d4a:	f47f aec3 	bne.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d4e:	6822      	ldr	r2, [r4, #0]
 8001d50:	6853      	ldr	r3, [r2, #4]
 8001d52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d56:	6053      	str	r3, [r2, #4]
 8001d58:	e6bc      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d5a:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d64:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8001d66:	950b      	str	r5, [sp, #44]	; 0x2c
 8001d68:	695a      	ldr	r2, [r3, #20]
 8001d6a:	920b      	str	r2, [sp, #44]	; 0x2c
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	f042 0201 	orr.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d7c:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001d7e:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d80:	b2cd      	uxtb	r5, r1
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001d82:	0511      	lsls	r1, r2, #20
 8001d84:	d521      	bpl.n	8001dca <HAL_I2C_EV_IRQHandler+0x34e>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001d86:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8001d8a:	2a22      	cmp	r2, #34	; 0x22
 8001d8c:	f000 8141 	beq.w	8002012 <HAL_I2C_EV_IRQHandler+0x596>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8001d90:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001d92:	6802      	ldr	r2, [r0, #0]
 8001d94:	6852      	ldr	r2, [r2, #4]
 8001d96:	b292      	uxth	r2, r2
 8001d98:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8001d9a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001d9c:	b292      	uxth	r2, r2
 8001d9e:	b11a      	cbz	r2, 8001da8 <HAL_I2C_EV_IRQHandler+0x32c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001da0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001da2:	f042 0204 	orr.w	r2, r2, #4
 8001da6:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dae:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001db0:	f7fe ff9c 	bl	8000cec <HAL_DMA_GetState>
 8001db4:	2801      	cmp	r0, #1
 8001db6:	d008      	beq.n	8001dca <HAL_I2C_EV_IRQHandler+0x34e>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001db8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001dba:	4ba6      	ldr	r3, [pc, #664]	; (8002054 <HAL_I2C_EV_IRQHandler+0x5d8>)
 8001dbc:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001dbe:	f7fe ff83 	bl	8000cc8 <HAL_DMA_Abort_IT>
 8001dc2:	b110      	cbz	r0, 8001dca <HAL_I2C_EV_IRQHandler+0x34e>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001dc4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001dc6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001dc8:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8001dca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	b313      	cbz	r3, 8001e16 <HAL_I2C_EV_IRQHandler+0x39a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001dd0:	6823      	ldr	r3, [r4, #0]
 8001dd2:	695a      	ldr	r2, [r3, #20]
 8001dd4:	0752      	lsls	r2, r2, #29
 8001dd6:	d50a      	bpl.n	8001dee <HAL_I2C_EV_IRQHandler+0x372>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dd8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8001dde:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8001de0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001de2:	6823      	ldr	r3, [r4, #0]
      hi2c->XferCount--;
 8001de4:	3a01      	subs	r2, #1
 8001de6:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8001de8:	3101      	adds	r1, #1
      hi2c->XferCount--;
 8001dea:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8001dec:	6261      	str	r1, [r4, #36]	; 0x24
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001dee:	695a      	ldr	r2, [r3, #20]
 8001df0:	0656      	lsls	r6, r2, #25
 8001df2:	d509      	bpl.n	8001e08 <HAL_I2C_EV_IRQHandler+0x38c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001df4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8001dfa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8001dfc:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8001e02:	3201      	adds	r2, #1
      hi2c->XferCount--;
 8001e04:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8001e06:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount != 0U)
 8001e08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	b11b      	cbz	r3, 8001e16 <HAL_I2C_EV_IRQHandler+0x39a>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e10:	f043 0304 	orr.w	r3, r3, #4
 8001e14:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f040 809d 	bne.w	8001f58 <HAL_I2C_EV_IRQHandler+0x4dc>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001e1e:	2d2a      	cmp	r5, #42	; 0x2a
 8001e20:	f000 814f 	beq.w	80020c2 <HAL_I2C_EV_IRQHandler+0x646>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001e24:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001e28:	2b28      	cmp	r3, #40	; 0x28
 8001e2a:	f000 80e0 	beq.w	8001fee <HAL_I2C_EV_IRQHandler+0x572>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001e2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e30:	2b22      	cmp	r3, #34	; 0x22
 8001e32:	d002      	beq.n	8001e3a <HAL_I2C_EV_IRQHandler+0x3be>
 8001e34:	2d22      	cmp	r5, #34	; 0x22
 8001e36:	f47f ae4d 	bne.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e3a:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8001e3c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e3e:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001e40:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8001e42:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e46:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001e4a:	f7ff fdb1 	bl	80019b0 <HAL_I2C_SlaveRxCpltCallback>
 8001e4e:	e641      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e50:	2900      	cmp	r1, #0
 8001e52:	f43f ae3f 	beq.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
 8001e56:	0582      	lsls	r2, r0, #22
 8001e58:	f57f ae3c 	bpl.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e5c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e5e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001e62:	2a21      	cmp	r2, #33	; 0x21
 8001e64:	f000 816e 	beq.w	8002144 <HAL_I2C_EV_IRQHandler+0x6c8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e68:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001e6c:	2b40      	cmp	r3, #64	; 0x40
 8001e6e:	f47f ae31 	bne.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001e72:	4620      	mov	r0, r4
}
 8001e74:	b00c      	add	sp, #48	; 0x30
 8001e76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001e7a:	f7ff b84b 	b.w	8000f14 <I2C_MemoryTransmit_TXE_BTF>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e7e:	2900      	cmp	r1, #0
 8001e80:	f43f ae28 	beq.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
 8001e84:	0586      	lsls	r6, r0, #22
 8001e86:	f57f ae25 	bpl.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e8a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8001e8c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001e8e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001e90:	b292      	uxth	r2, r2
 8001e92:	2a04      	cmp	r2, #4
 8001e94:	f000 817b 	beq.w	800218e <HAL_I2C_EV_IRQHandler+0x712>
  else if (hi2c->XferCount == 3U)
 8001e98:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001e9a:	b292      	uxth	r2, r2
 8001e9c:	2a03      	cmp	r2, #3
 8001e9e:	f000 81b1 	beq.w	8002204 <HAL_I2C_EV_IRQHandler+0x788>
  else if (hi2c->XferCount == 2U)
 8001ea2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001ea4:	b292      	uxth	r2, r2
 8001ea6:	2a02      	cmp	r2, #2
 8001ea8:	f000 81d4 	beq.w	8002254 <HAL_I2C_EV_IRQHandler+0x7d8>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	700b      	strb	r3, [r1, #0]
 8001eb0:	e71e      	b.n	8001cf0 <HAL_I2C_EV_IRQHandler+0x274>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001eb2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001eb6:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001eb8:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001eba:	bf16      	itet	ne
 8001ebc:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001ec0:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001ec4:	b2d2      	uxtbne	r2, r2
 8001ec6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001ec8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001eca:	2a00      	cmp	r2, #0
 8001ecc:	f000 80e3 	beq.w	8002096 <HAL_I2C_EV_IRQHandler+0x61a>
 8001ed0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ed2:	2a00      	cmp	r2, #0
 8001ed4:	f000 80df 	beq.w	8002096 <HAL_I2C_EV_IRQHandler+0x61a>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	e5f8      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001ee2:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8001ee4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ee6:	b2d2      	uxtb	r2, r2
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001ee8:	611a      	str	r2, [r3, #16]
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8001eea:	2900      	cmp	r1, #0
 8001eec:	f000 808c 	beq.w	8002008 <HAL_I2C_EV_IRQHandler+0x58c>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8001ef0:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8001ef2:	2a00      	cmp	r2, #0
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_I2C_EV_IRQHandler+0x45c>
 8001ef6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001ef8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001efa:	2a00      	cmp	r2, #0
 8001efc:	d1ec      	bne.n	8001ed8 <HAL_I2C_EV_IRQHandler+0x45c>
 8001efe:	e5e9      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f06:	605a      	str	r2, [r3, #4]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8001f08:	ea6f 0196 	mvn.w	r1, r6, lsr #2
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8001f0c:	0633      	lsls	r3, r6, #24
    __HAL_UNLOCK(hi2c);
 8001f0e:	f04f 0300 	mov.w	r3, #0
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8001f12:	f001 0101 	and.w	r1, r1, #1
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8001f16:	bf54      	ite	pl
 8001f18:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8001f1a:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8001f1c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8001f20:	4620      	mov	r0, r4
 8001f22:	f7ff fd47 	bl	80019b4 <HAL_I2C_AddrCallback>
 8001f26:	e5d5      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
    if (hi2c->EventCount == 0U)
 8001f28:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001f2a:	b97a      	cbnz	r2, 8001f4c <HAL_I2C_EV_IRQHandler+0x4d0>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001f2c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001f2e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f32:	611a      	str	r2, [r3, #16]
 8001f34:	e5ce      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8001f36:	2201      	movs	r2, #1
 8001f38:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001f3a:	e619      	b.n	8001b70 <HAL_I2C_EV_IRQHandler+0xf4>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001f3c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001f3e:	11d2      	asrs	r2, r2, #7
 8001f40:	f002 0206 	and.w	r2, r2, #6
 8001f44:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8001f48:	611a      	str	r2, [r3, #16]
 8001f4a:	e5c3      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001f4c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	611a      	str	r2, [r3, #16]
 8001f56:	e5bd      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f58:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001f5c:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8001f60:	6823      	ldr	r3, [r4, #0]
 8001f62:	2910      	cmp	r1, #16
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f64:	b2d2      	uxtb	r2, r2
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001f66:	f000 80b9 	beq.w	80020dc <HAL_I2C_EV_IRQHandler+0x660>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001f6a:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8001f6e:	2928      	cmp	r1, #40	; 0x28
 8001f70:	f000 80af 	beq.w	80020d2 <HAL_I2C_EV_IRQHandler+0x656>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8001f74:	6859      	ldr	r1, [r3, #4]
 8001f76:	0509      	lsls	r1, r1, #20
 8001f78:	d404      	bmi.n	8001f84 <HAL_I2C_EV_IRQHandler+0x508>
 8001f7a:	2a60      	cmp	r2, #96	; 0x60
 8001f7c:	d002      	beq.n	8001f84 <HAL_I2C_EV_IRQHandler+0x508>
      hi2c->State = HAL_I2C_STATE_READY;
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f84:	2200      	movs	r2, #0
 8001f86:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f88:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8001f92:	f000 8085 	beq.w	80020a0 <HAL_I2C_EV_IRQHandler+0x624>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001f96:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001f98:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001f9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f9e:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001fa0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	f000 810f 	beq.w	80021c8 <HAL_I2C_EV_IRQHandler+0x74c>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001faa:	4b2a      	ldr	r3, [pc, #168]	; (8002054 <HAL_I2C_EV_IRQHandler+0x5d8>)
 8001fac:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001fae:	f7fe fe8b 	bl	8000cc8 <HAL_DMA_Abort_IT>
 8001fb2:	b150      	cbz	r0, 8001fca <HAL_I2C_EV_IRQHandler+0x54e>
        __HAL_I2C_DISABLE(hi2c);
 8001fb4:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001fb6:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8001fb8:	6813      	ldr	r3, [r2, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001fba:	6d01      	ldr	r1, [r0, #80]	; 0x50
        __HAL_I2C_DISABLE(hi2c);
 8001fbc:	f023 0301 	bic.w	r3, r3, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8001fc0:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE(hi2c);
 8001fc2:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8001fc4:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001fc8:	4788      	blx	r1
  CurrentError = hi2c->ErrorCode;
 8001fca:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8001fcc:	0718      	lsls	r0, r3, #28
 8001fce:	d004      	beq.n	8001fda <HAL_I2C_EV_IRQHandler+0x55e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fd0:	6822      	ldr	r2, [r4, #0]
 8001fd2:	6853      	ldr	r3, [r2, #4]
 8001fd4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fd8:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8001fda:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8001fde:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001fe0:	0751      	lsls	r1, r2, #29
  CurrentState = hi2c->State;
 8001fe2:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8001fe4:	f57f ad76 	bpl.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
 8001fe8:	2b28      	cmp	r3, #40	; 0x28
 8001fea:	f47f ad73 	bne.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fee:	4b1a      	ldr	r3, [pc, #104]	; (8002058 <HAL_I2C_EV_IRQHandler+0x5dc>)
 8001ff0:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8001ff2:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 8001ff8:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 8001ffa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ffe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002002:	f7ff fcd9 	bl	80019b8 <HAL_I2C_ListenCpltCallback>
 8002006:	e565      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002008:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800200a:	2a00      	cmp	r2, #0
 800200c:	f47f af70 	bne.w	8001ef0 <HAL_I2C_EV_IRQHandler+0x474>
 8002010:	e560      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002012:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002014:	6802      	ldr	r2, [r0, #0]
 8002016:	6852      	ldr	r2, [r2, #4]
 8002018:	b292      	uxth	r2, r2
 800201a:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 800201c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800201e:	b292      	uxth	r2, r2
 8002020:	b11a      	cbz	r2, 800202a <HAL_I2C_EV_IRQHandler+0x5ae>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002022:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002024:	f042 0204 	orr.w	r2, r2, #4
 8002028:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002030:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002032:	f7fe fe5b 	bl	8000cec <HAL_DMA_GetState>
 8002036:	2801      	cmp	r0, #1
 8002038:	f43f aec7 	beq.w	8001dca <HAL_I2C_EV_IRQHandler+0x34e>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800203c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800203e:	4b05      	ldr	r3, [pc, #20]	; (8002054 <HAL_I2C_EV_IRQHandler+0x5d8>)
 8002040:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002042:	f7fe fe41 	bl	8000cc8 <HAL_DMA_Abort_IT>
 8002046:	2800      	cmp	r0, #0
 8002048:	f43f aebf 	beq.w	8001dca <HAL_I2C_EV_IRQHandler+0x34e>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800204c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800204e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002050:	4798      	blx	r3
 8002052:	e6ba      	b.n	8001dca <HAL_I2C_EV_IRQHandler+0x34e>
 8002054:	080019cd 	.word	0x080019cd
 8002058:	ffff0000 	.word	0xffff0000
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800205c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800205e:	b911      	cbnz	r1, 8002066 <HAL_I2C_EV_IRQHandler+0x5ea>
 8002060:	2a40      	cmp	r2, #64	; 0x40
 8002062:	f000 80e2 	beq.w	800222a <HAL_I2C_EV_IRQHandler+0x7ae>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002066:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002068:	b922      	cbnz	r2, 8002074 <HAL_I2C_EV_IRQHandler+0x5f8>
 800206a:	6921      	ldr	r1, [r4, #16]
 800206c:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 8002070:	f000 80e2 	beq.w	8002238 <HAL_I2C_EV_IRQHandler+0x7bc>
      if (hi2c->XferCount == 0U)
 8002074:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002076:	b292      	uxth	r2, r2
 8002078:	2a00      	cmp	r2, #0
 800207a:	d13b      	bne.n	80020f4 <HAL_I2C_EV_IRQHandler+0x678>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800207c:	9203      	str	r2, [sp, #12]
 800207e:	695a      	ldr	r2, [r3, #20]
 8002080:	9203      	str	r2, [sp, #12]
 8002082:	699a      	ldr	r2, [r3, #24]
 8002084:	9203      	str	r2, [sp, #12]
 8002086:	9a03      	ldr	r2, [sp, #12]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800208e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	6523      	str	r3, [r4, #80]	; 0x50
 8002094:	e51e      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002096:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002098:	2a00      	cmp	r2, #0
 800209a:	f47f af2d 	bne.w	8001ef8 <HAL_I2C_EV_IRQHandler+0x47c>
 800209e:	e519      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80020a0:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80020a4:	2960      	cmp	r1, #96	; 0x60
 80020a6:	d079      	beq.n	800219c <HAL_I2C_EV_IRQHandler+0x720>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80020a8:	695a      	ldr	r2, [r3, #20]
 80020aa:	0655      	lsls	r5, r2, #25
 80020ac:	d505      	bpl.n	80020ba <HAL_I2C_EV_IRQHandler+0x63e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80020b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020b6:	3301      	adds	r3, #1
 80020b8:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 80020ba:	4620      	mov	r0, r4
 80020bc:	f7ff fc82 	bl	80019c4 <HAL_I2C_ErrorCallback>
 80020c0:	e783      	b.n	8001fca <HAL_I2C_EV_IRQHandler+0x54e>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80020c2:	2228      	movs	r2, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_NONE;
 80020c4:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80020c6:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80020c8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80020cc:	f7ff fc70 	bl	80019b0 <HAL_I2C_SlaveRxCpltCallback>
 80020d0:	e6a8      	b.n	8001e24 <HAL_I2C_EV_IRQHandler+0x3a8>
    hi2c->PreviousState = I2C_STATE_NONE;
 80020d2:	2200      	movs	r2, #0
 80020d4:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80020d6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 80020da:	e757      	b.n	8001f8c <HAL_I2C_EV_IRQHandler+0x510>
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80020dc:	2a22      	cmp	r2, #34	; 0x22
 80020de:	f47f af44 	bne.w	8001f6a <HAL_I2C_EV_IRQHandler+0x4ee>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020e8:	601a      	str	r2, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	0510      	lsls	r0, r2, #20
 80020ee:	f57f af46 	bpl.w	8001f7e <HAL_I2C_EV_IRQHandler+0x502>
 80020f2:	e747      	b.n	8001f84 <HAL_I2C_EV_IRQHandler+0x508>
      else if (hi2c->XferCount == 1U)
 80020f4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80020f6:	b292      	uxth	r2, r2
 80020f8:	2a01      	cmp	r2, #1
 80020fa:	f000 80e1 	beq.w	80022c0 <HAL_I2C_EV_IRQHandler+0x844>
      else if (hi2c->XferCount == 2U)
 80020fe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002100:	b292      	uxth	r2, r2
 8002102:	2a02      	cmp	r2, #2
 8002104:	f000 8156 	beq.w	80023b4 <HAL_I2C_EV_IRQHandler+0x938>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800210e:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	0515      	lsls	r5, r2, #20
 8002114:	d50e      	bpl.n	8002134 <HAL_I2C_EV_IRQHandler+0x6b8>
 8002116:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 800211a:	d007      	beq.n	800212c <HAL_I2C_EV_IRQHandler+0x6b0>
 800211c:	3801      	subs	r0, #1
 800211e:	281f      	cmp	r0, #31
 8002120:	d808      	bhi.n	8002134 <HAL_I2C_EV_IRQHandler+0x6b8>
 8002122:	4aa1      	ldr	r2, [pc, #644]	; (80023a8 <HAL_I2C_EV_IRQHandler+0x92c>)
 8002124:	fa22 f000 	lsr.w	r0, r2, r0
 8002128:	07c0      	lsls	r0, r0, #31
 800212a:	d503      	bpl.n	8002134 <HAL_I2C_EV_IRQHandler+0x6b8>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002132:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002134:	2200      	movs	r2, #0
 8002136:	9209      	str	r2, [sp, #36]	; 0x24
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	9209      	str	r2, [sp, #36]	; 0x24
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	9309      	str	r3, [sp, #36]	; 0x24
 8002140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002142:	e7a5      	b.n	8002090 <HAL_I2C_EV_IRQHandler+0x614>
    if (hi2c->XferCount != 0U)
 8002144:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002146:	b292      	uxth	r2, r2
 8002148:	2a00      	cmp	r2, #0
 800214a:	f47f adb9 	bne.w	8001cc0 <HAL_I2C_EV_IRQHandler+0x244>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800214e:	2908      	cmp	r1, #8
 8002150:	d005      	beq.n	800215e <HAL_I2C_EV_IRQHandler+0x6e2>
 8002152:	2920      	cmp	r1, #32
 8002154:	d003      	beq.n	800215e <HAL_I2C_EV_IRQHandler+0x6e2>
 8002156:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 800215a:	f040 817e 	bne.w	800245a <HAL_I2C_EV_IRQHandler+0x9de>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002164:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002166:	6819      	ldr	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002168:	2200      	movs	r2, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800216a:	2020      	movs	r0, #32
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800216c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8002170:	6019      	str	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002172:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002174:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002178:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800217c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002180:	2b40      	cmp	r3, #64	; 0x40
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002182:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002184:	f000 810b 	beq.w	800239e <HAL_I2C_EV_IRQHandler+0x922>
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002188:	f7ff fc0c 	bl	80019a4 <HAL_I2C_MasterTxCpltCallback>
 800218c:	e4a2      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002194:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	700b      	strb	r3, [r1, #0]
 800219a:	e5a9      	b.n	8001cf0 <HAL_I2C_EV_IRQHandler+0x274>
    hi2c->State = HAL_I2C_STATE_READY;
 800219c:	2120      	movs	r1, #32
 800219e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021a2:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	0656      	lsls	r6, r2, #25
 80021a8:	d506      	bpl.n	80021b8 <HAL_I2C_EV_IRQHandler+0x73c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80021b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021b2:	6823      	ldr	r3, [r4, #0]
 80021b4:	3201      	adds	r2, #1
 80021b6:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	f022 0201 	bic.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80021c0:	4620      	mov	r0, r4
 80021c2:	f7ff fc01 	bl	80019c8 <HAL_I2C_AbortCpltCallback>
 80021c6:	e700      	b.n	8001fca <HAL_I2C_EV_IRQHandler+0x54e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80021c8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80021ca:	4b78      	ldr	r3, [pc, #480]	; (80023ac <HAL_I2C_EV_IRQHandler+0x930>)
 80021cc:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80021ce:	f7fe fd7b 	bl	8000cc8 <HAL_DMA_Abort_IT>
 80021d2:	2800      	cmp	r0, #0
 80021d4:	f43f aef9 	beq.w	8001fca <HAL_I2C_EV_IRQHandler+0x54e>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80021d8:	6823      	ldr	r3, [r4, #0]
 80021da:	695a      	ldr	r2, [r3, #20]
 80021dc:	0652      	lsls	r2, r2, #25
 80021de:	d506      	bpl.n	80021ee <HAL_I2C_EV_IRQHandler+0x772>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 80021e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021e8:	6823      	ldr	r3, [r4, #0]
 80021ea:	3201      	adds	r2, #1
 80021ec:	6262      	str	r2, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 80021ee:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80021f0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 80021f2:	f022 0201 	bic.w	r2, r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 80021f6:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 80021f8:	601a      	str	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80021fa:	6d03      	ldr	r3, [r0, #80]	; 0x50
        hi2c->State = HAL_I2C_STATE_READY;
 80021fc:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002200:	4798      	blx	r3
 8002202:	e6e2      	b.n	8001fca <HAL_I2C_EV_IRQHandler+0x54e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002204:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002206:	2804      	cmp	r0, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800220c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800220e:	f43f ae4d 	beq.w	8001eac <HAL_I2C_EV_IRQHandler+0x430>
 8002212:	2802      	cmp	r0, #2
 8002214:	f43f ae4a 	beq.w	8001eac <HAL_I2C_EV_IRQHandler+0x430>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	e644      	b.n	8001eac <HAL_I2C_EV_IRQHandler+0x430>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002222:	2a21      	cmp	r2, #33	; 0x21
 8002224:	f43f ac8c 	beq.w	8001b40 <HAL_I2C_EV_IRQHandler+0xc4>
 8002228:	e486      	b.n	8001b38 <HAL_I2C_EV_IRQHandler+0xbc>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800222a:	9101      	str	r1, [sp, #4]
 800222c:	695a      	ldr	r2, [r3, #20]
 800222e:	9201      	str	r2, [sp, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	9301      	str	r3, [sp, #4]
 8002234:	9b01      	ldr	r3, [sp, #4]
 8002236:	e44d      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002238:	9202      	str	r2, [sp, #8]
 800223a:	695a      	ldr	r2, [r3, #20]
 800223c:	9202      	str	r2, [sp, #8]
 800223e:	699a      	ldr	r2, [r3, #24]
 8002240:	9202      	str	r2, [sp, #8]
 8002242:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800224a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800224c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800224e:	3301      	adds	r3, #1
 8002250:	6523      	str	r3, [r4, #80]	; 0x50
 8002252:	e43f      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002254:	2801      	cmp	r0, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002256:	681a      	ldr	r2, [r3, #0]
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002258:	d07c      	beq.n	8002354 <HAL_I2C_EV_IRQHandler+0x8d8>
 800225a:	2810      	cmp	r0, #16
 800225c:	d07a      	beq.n	8002354 <HAL_I2C_EV_IRQHandler+0x8d8>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800225e:	2804      	cmp	r0, #4
 8002260:	f000 8108 	beq.w	8002474 <HAL_I2C_EV_IRQHandler+0x9f8>
 8002264:	2802      	cmp	r0, #2
 8002266:	f000 8105 	beq.w	8002474 <HAL_I2C_EV_IRQHandler+0x9f8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800226a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800226e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 8002274:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8002276:	6a62      	ldr	r2, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002278:	6821      	ldr	r1, [r4, #0]
    hi2c->XferCount--;
 800227a:	3b01      	subs	r3, #1
 800227c:	b29b      	uxth	r3, r3
 800227e:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002280:	690b      	ldr	r3, [r1, #16]
    hi2c->pBuffPtr++;
 8002282:	1c51      	adds	r1, r2, #1
 8002284:	6261      	str	r1, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002286:	7053      	strb	r3, [r2, #1]
    hi2c->XferCount--;
 8002288:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800228a:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr++;
 800228c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800228e:	3b01      	subs	r3, #1
 8002290:	b29b      	uxth	r3, r3
 8002292:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002294:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr++;
 8002296:	3201      	adds	r2, #1
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    hi2c->State = HAL_I2C_STATE_READY;
 800229c:	2020      	movs	r0, #32
    hi2c->pBuffPtr++;
 800229e:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80022a0:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80022a2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022a6:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80022aa:	2b40      	cmp	r3, #64	; 0x40
 80022ac:	d049      	beq.n	8002342 <HAL_I2C_EV_IRQHandler+0x8c6>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ae:	2200      	movs	r2, #0
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80022b0:	2312      	movs	r3, #18
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80022b6:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80022b8:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80022ba:	f7ff fb75 	bl	80019a8 <HAL_I2C_MasterRxCpltCallback>
 80022be:	e409      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80022c0:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 80022c4:	f000 80b5 	beq.w	8002432 <HAL_I2C_EV_IRQHandler+0x9b6>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80022c8:	2808      	cmp	r0, #8
 80022ca:	f000 80a2 	beq.w	8002412 <HAL_I2C_EV_IRQHandler+0x996>
 80022ce:	2820      	cmp	r0, #32
 80022d0:	f000 809f 	beq.w	8002412 <HAL_I2C_EV_IRQHandler+0x996>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80022d4:	2d12      	cmp	r5, #18
 80022d6:	f000 8099 	beq.w	800240c <HAL_I2C_EV_IRQHandler+0x990>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80022da:	2810      	cmp	r0, #16
 80022dc:	d805      	bhi.n	80022ea <HAL_I2C_EV_IRQHandler+0x86e>
 80022de:	4a34      	ldr	r2, [pc, #208]	; (80023b0 <HAL_I2C_EV_IRQHandler+0x934>)
 80022e0:	fa22 f000 	lsr.w	r0, r2, r0
 80022e4:	07c0      	lsls	r0, r0, #31
 80022e6:	f100 80d4 	bmi.w	8002492 <HAL_I2C_EV_IRQHandler+0xa16>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022f0:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f2:	2200      	movs	r2, #0
 80022f4:	9206      	str	r2, [sp, #24]
 80022f6:	695a      	ldr	r2, [r3, #20]
 80022f8:	9206      	str	r2, [sp, #24]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	9306      	str	r3, [sp, #24]
 80022fe:	9b06      	ldr	r3, [sp, #24]
 8002300:	e6c6      	b.n	8002090 <HAL_I2C_EV_IRQHandler+0x614>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002302:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002304:	2902      	cmp	r1, #2
 8002306:	f43f abe5 	beq.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
 800230a:	2a01      	cmp	r2, #1
 800230c:	f63f abe2 	bhi.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002310:	681a      	ldr	r2, [r3, #0]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002312:	6a61      	ldr	r1, [r4, #36]	; 0x24
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002318:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002320:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	700b      	strb	r3, [r1, #0]
      hi2c->XferCount--;
 8002326:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002328:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800232a:	3b01      	subs	r3, #1
 800232c:	b29b      	uxth	r3, r3
      hi2c->State = HAL_I2C_STATE_READY;
 800232e:	2120      	movs	r1, #32
      hi2c->XferCount--;
 8002330:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8002332:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002336:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
      hi2c->pBuffPtr++;
 800233a:	3201      	adds	r2, #1
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800233c:	2b40      	cmp	r3, #64	; 0x40
      hi2c->pBuffPtr++;
 800233e:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002340:	d1b5      	bne.n	80022ae <HAL_I2C_EV_IRQHandler+0x832>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002342:	2300      	movs	r3, #0
 8002344:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002348:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 800234a:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800234c:	f7ff fb38 	bl	80019c0 <HAL_I2C_MemRxCpltCallback>
 8002350:	f7ff bbc0 	b.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	e789      	b.n	8002270 <HAL_I2C_EV_IRQHandler+0x7f4>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	f7ff bbb6 	b.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002368:	2d08      	cmp	r5, #8
 800236a:	f43f aef8 	beq.w	800215e <HAL_I2C_EV_IRQHandler+0x6e2>
 800236e:	2d20      	cmp	r5, #32
 8002370:	f43f aef5 	beq.w	800215e <HAL_I2C_EV_IRQHandler+0x6e2>
 8002374:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8002378:	f43f aef1 	beq.w	800215e <HAL_I2C_EV_IRQHandler+0x6e2>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800237c:	685a      	ldr	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800237e:	2611      	movs	r6, #17
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002380:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002384:	2500      	movs	r5, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8002386:	2120      	movs	r1, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002388:	605a      	str	r2, [r3, #4]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800238a:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800238c:	6326      	str	r6, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800238e:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002392:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002396:	f7ff fb05 	bl	80019a4 <HAL_I2C_MasterTxCpltCallback>
 800239a:	f7ff bb9b 	b.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
          HAL_I2C_MemTxCpltCallback(hi2c);
 800239e:	f7ff fb0d 	bl	80019bc <HAL_I2C_MemTxCpltCallback>
 80023a2:	f7ff bb97 	b.w	8001ad4 <HAL_I2C_EV_IRQHandler+0x58>
 80023a6:	bf00      	nop
 80023a8:	80008081 	.word	0x80008081
 80023ac:	080019cd 	.word	0x080019cd
 80023b0:	00010014 	.word	0x00010014
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80023b4:	2810      	cmp	r0, #16
 80023b6:	d920      	bls.n	80023fa <HAL_I2C_EV_IRQHandler+0x97e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023be:	601a      	str	r2, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023c6:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	0512      	lsls	r2, r2, #20
 80023cc:	d50d      	bpl.n	80023ea <HAL_I2C_EV_IRQHandler+0x96e>
 80023ce:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 80023d2:	d006      	beq.n	80023e2 <HAL_I2C_EV_IRQHandler+0x966>
 80023d4:	3801      	subs	r0, #1
 80023d6:	281f      	cmp	r0, #31
 80023d8:	d807      	bhi.n	80023ea <HAL_I2C_EV_IRQHandler+0x96e>
 80023da:	4a30      	ldr	r2, [pc, #192]	; (800249c <HAL_I2C_EV_IRQHandler+0xa20>)
 80023dc:	40c2      	lsrs	r2, r0
 80023de:	07d6      	lsls	r6, r2, #31
 80023e0:	d503      	bpl.n	80023ea <HAL_I2C_EV_IRQHandler+0x96e>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023e8:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ea:	2200      	movs	r2, #0
 80023ec:	9208      	str	r2, [sp, #32]
 80023ee:	695a      	ldr	r2, [r3, #20]
 80023f0:	9208      	str	r2, [sp, #32]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	9308      	str	r3, [sp, #32]
 80023f6:	9b08      	ldr	r3, [sp, #32]
 80023f8:	e64a      	b.n	8002090 <HAL_I2C_EV_IRQHandler+0x614>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80023fa:	4a29      	ldr	r2, [pc, #164]	; (80024a0 <HAL_I2C_EV_IRQHandler+0xa24>)
 80023fc:	40c2      	lsrs	r2, r0
 80023fe:	07d1      	lsls	r1, r2, #31
 8002400:	d5da      	bpl.n	80023b8 <HAL_I2C_EV_IRQHandler+0x93c>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	e7dd      	b.n	80023c8 <HAL_I2C_EV_IRQHandler+0x94c>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800240c:	2801      	cmp	r0, #1
 800240e:	f43f af6c 	beq.w	80022ea <HAL_I2C_EV_IRQHandler+0x86e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002412:	681a      	ldr	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002414:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800241a:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800241c:	9107      	str	r1, [sp, #28]
 800241e:	695a      	ldr	r2, [r3, #20]
 8002420:	9207      	str	r2, [sp, #28]
 8002422:	699a      	ldr	r2, [r3, #24]
 8002424:	9207      	str	r2, [sp, #28]
 8002426:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	e62e      	b.n	8002090 <HAL_I2C_EV_IRQHandler+0x614>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002438:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8002440:	d01c      	beq.n	800247c <HAL_I2C_EV_IRQHandler+0xa00>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002442:	681a      	ldr	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002444:	2100      	movs	r1, #0
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800244a:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800244c:	9104      	str	r1, [sp, #16]
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	9204      	str	r2, [sp, #16]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	9304      	str	r3, [sp, #16]
 8002456:	9b04      	ldr	r3, [sp, #16]
 8002458:	e61a      	b.n	8002090 <HAL_I2C_EV_IRQHandler+0x614>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800245a:	6859      	ldr	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800245c:	2611      	movs	r6, #17
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800245e:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
        hi2c->State = HAL_I2C_STATE_READY;
 8002462:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002464:	6059      	str	r1, [r3, #4]
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002466:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002468:	6326      	str	r6, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800246a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800246e:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
 8002472:	e689      	b.n	8002188 <HAL_I2C_EV_IRQHandler+0x70c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002474:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	e6f9      	b.n	8002270 <HAL_I2C_EV_IRQHandler+0x7f4>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800247c:	9205      	str	r2, [sp, #20]
 800247e:	695a      	ldr	r2, [r3, #20]
 8002480:	9205      	str	r2, [sp, #20]
 8002482:	699a      	ldr	r2, [r3, #24]
 8002484:	9205      	str	r2, [sp, #20]
 8002486:	9a05      	ldr	r2, [sp, #20]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	e5fe      	b.n	8002090 <HAL_I2C_EV_IRQHandler+0x614>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e72a      	b.n	80022f2 <HAL_I2C_EV_IRQHandler+0x876>
 800249c:	80008081 	.word	0x80008081
 80024a0:	00010014 	.word	0x00010014

080024a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024a6:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024a8:	2800      	cmp	r0, #0
 80024aa:	f000 8083 	beq.w	80025b4 <HAL_PCD_Init+0x110>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024ae:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 80024b2:	6805      	ldr	r5, [r0, #0]
 80024b4:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80024ba:	b333      	cbz	r3, 800250a <HAL_PCD_Init+0x66>
 80024bc:	4628      	mov	r0, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024be:	2303      	movs	r3, #3
 80024c0:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024c4:	6beb      	ldr	r3, [r5, #60]	; 0x3c

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024c6:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024c8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 80024cc:	bf08      	it	eq
 80024ce:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 80024d0:	f001 fa82 	bl	80039d8 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024d4:	f855 cb10 	ldr.w	ip, [r5], #16
 80024d8:	462f      	mov	r7, r5
 80024da:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80024dc:	466e      	mov	r6, sp
 80024de:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80024e0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80024e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80024e4:	e897 0003 	ldmia.w	r7, {r0, r1}
 80024e8:	e886 0003 	stmia.w	r6, {r0, r1}
 80024ec:	1d26      	adds	r6, r4, #4
 80024ee:	4660      	mov	r0, ip
 80024f0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80024f4:	f001 f982 	bl	80037fc <USB_CoreInit>
 80024f8:	4607      	mov	r7, r0
 80024fa:	b160      	cbz	r0, 8002516 <HAL_PCD_Init+0x72>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024fc:	2302      	movs	r3, #2
 80024fe:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8002502:	2501      	movs	r5, #1
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8002504:	4628      	mov	r0, r5
 8002506:	b00b      	add	sp, #44	; 0x2c
 8002508:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800250a:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 800250e:	f004 fa2b 	bl	8006968 <HAL_PCD_MspInit>
 8002512:	6820      	ldr	r0, [r4, #0]
 8002514:	e7d3      	b.n	80024be <HAL_PCD_Init+0x1a>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002516:	4601      	mov	r1, r0
 8002518:	6820      	ldr	r0, [r4, #0]
 800251a:	f001 fa65 	bl	80039e8 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800251e:	6860      	ldr	r0, [r4, #4]
 8002520:	b360      	cbz	r0, 800257c <HAL_PCD_Init+0xd8>
 8002522:	4639      	mov	r1, r7
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002524:	463a      	mov	r2, r7
    hpcd->IN_ep[i].is_in = 1U;
 8002526:	f04f 0c01 	mov.w	ip, #1
 800252a:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800252e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002532:	1c4f      	adds	r7, r1, #1
    hpcd->IN_ep[i].num = i;
 8002534:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002538:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800253c:	b2f9      	uxtb	r1, r7
 800253e:	4281      	cmp	r1, r0
    hpcd->IN_ep[i].is_in = 1U;
 8002540:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002548:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_len = 0U;
 800254c:	651a      	str	r2, [r3, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800254e:	d3ec      	bcc.n	800252a <HAL_PCD_Init+0x86>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002550:	2200      	movs	r2, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8002552:	4611      	mov	r1, r2
 8002554:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8002558:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800255c:	1c57      	adds	r7, r2, #1
    hpcd->OUT_ep[i].num = i;
 800255e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002562:	b2fa      	uxtb	r2, r7
 8002564:	4282      	cmp	r2, r0
    hpcd->OUT_ep[i].is_in = 0U;
 8002566:	f883 11fd 	strb.w	r1, [r3, #509]	; 0x1fd
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800256a:	f883 11ff 	strb.w	r1, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 800256e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002572:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002576:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800257a:	d3eb      	bcc.n	8002554 <HAL_PCD_Init+0xb0>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800257c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800257e:	466f      	mov	r7, sp
 8002580:	f8d4 c000 	ldr.w	ip, [r4]
 8002584:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002588:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800258a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800258e:	e887 0003 	stmia.w	r7, {r0, r1}
 8002592:	4660      	mov	r0, ip
 8002594:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002598:	f001 fa3e 	bl	8003a18 <USB_DevInit>
 800259c:	4605      	mov	r5, r0
 800259e:	2800      	cmp	r0, #0
 80025a0:	d1ac      	bne.n	80024fc <HAL_PCD_Init+0x58>
  hpcd->State = HAL_PCD_STATE_READY;
 80025a2:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80025a4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  (void)USB_DevDisconnect(hpcd->Instance);
 80025a8:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 80025aa:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 80025ae:	f001 fdff 	bl	80041b0 <USB_DevDisconnect>
  return HAL_OK;
 80025b2:	e7a7      	b.n	8002504 <HAL_PCD_Init+0x60>
    return HAL_ERROR;
 80025b4:	2501      	movs	r5, #1
}
 80025b6:	4628      	mov	r0, r5
 80025b8:	b00b      	add	sp, #44	; 0x2c
 80025ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025bc <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80025bc:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d01a      	beq.n	80025fa <HAL_PCD_Start+0x3e>
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025c4:	6a82      	ldr	r2, [r0, #40]	; 0x28
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025c6:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hpcd);
 80025c8:	2101      	movs	r1, #1
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025ca:	428a      	cmp	r2, r1
{
 80025cc:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80025ce:	f880 13bc 	strb.w	r1, [r0, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025d2:	d00a      	beq.n	80025ea <HAL_PCD_Start+0x2e>
 80025d4:	4604      	mov	r4, r0
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80025d6:	4618      	mov	r0, r3
 80025d8:	f001 fdde 	bl	8004198 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80025dc:	6820      	ldr	r0, [r4, #0]
 80025de:	f001 f9f3 	bl	80039c8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80025e2:	2000      	movs	r0, #0
 80025e4:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
}
 80025e8:	bd10      	pop	{r4, pc}
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025ea:	6982      	ldr	r2, [r0, #24]
 80025ec:	428a      	cmp	r2, r1
 80025ee:	d0f1      	beq.n	80025d4 <HAL_PCD_Start+0x18>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80025f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025f2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80025f6:	639a      	str	r2, [r3, #56]	; 0x38
 80025f8:	e7ec      	b.n	80025d4 <HAL_PCD_Start+0x18>
  __HAL_LOCK(hpcd);
 80025fa:	2002      	movs	r0, #2
}
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop

08002600 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002604:	6806      	ldr	r6, [r0, #0]
{
 8002606:	b089      	sub	sp, #36	; 0x24
 8002608:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800260a:	4630      	mov	r0, r6
 800260c:	f001 fe0e 	bl	800422c <USB_GetMode>
 8002610:	b110      	cbz	r0, 8002618 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 8002612:	b009      	add	sp, #36	; 0x24
 8002614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002618:	4605      	mov	r5, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800261a:	6820      	ldr	r0, [r4, #0]
 800261c:	f001 fdd4 	bl	80041c8 <USB_ReadInterrupts>
 8002620:	2800      	cmp	r0, #0
 8002622:	d0f6      	beq.n	8002612 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002624:	6820      	ldr	r0, [r4, #0]
 8002626:	f001 fdcf 	bl	80041c8 <USB_ReadInterrupts>
 800262a:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800262e:	6820      	ldr	r0, [r4, #0]
 8002630:	bf1e      	ittt	ne
 8002632:	6943      	ldrne	r3, [r0, #20]
 8002634:	f003 0302 	andne.w	r3, r3, #2
 8002638:	6143      	strne	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800263a:	f001 fdc5 	bl	80041c8 <USB_ReadInterrupts>
 800263e:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002642:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002644:	f040 81c3 	bne.w	80029ce <HAL_PCD_IRQHandler+0x3ce>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002648:	f001 fdbe 	bl	80041c8 <USB_ReadInterrupts>
 800264c:	f410 2f80 	tst.w	r0, #262144	; 0x40000
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002650:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002652:	f040 811c 	bne.w	800288e <HAL_PCD_IRQHandler+0x28e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002656:	f001 fdb7 	bl	80041c8 <USB_ReadInterrupts>
 800265a:	2800      	cmp	r0, #0
 800265c:	db7d      	blt.n	800275a <HAL_PCD_IRQHandler+0x15a>
 800265e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002660:	f001 fdb2 	bl	80041c8 <USB_ReadInterrupts>
 8002664:	0501      	lsls	r1, r0, #20
 8002666:	d449      	bmi.n	80026fc <HAL_PCD_IRQHandler+0xfc>
 8002668:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800266a:	f001 fdad 	bl	80041c8 <USB_ReadInterrupts>
 800266e:	04c3      	lsls	r3, r0, #19
 8002670:	f100 8087 	bmi.w	8002782 <HAL_PCD_IRQHandler+0x182>
 8002674:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002676:	f001 fda7 	bl	80041c8 <USB_ReadInterrupts>
 800267a:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 800267e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002680:	f040 80c8 	bne.w	8002814 <HAL_PCD_IRQHandler+0x214>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002684:	f001 fda0 	bl	80041c8 <USB_ReadInterrupts>
 8002688:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800268c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800268e:	d011      	beq.n	80026b4 <HAL_PCD_IRQHandler+0xb4>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002690:	6983      	ldr	r3, [r0, #24]
 8002692:	f023 0310 	bic.w	r3, r3, #16
 8002696:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 8002698:	6a35      	ldr	r5, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800269a:	f3c5 4343 	ubfx	r3, r5, #17, #4
 800269e:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80026a0:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80026a4:	d039      	beq.n	800271a <HAL_PCD_IRQHandler+0x11a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80026a6:	2b06      	cmp	r3, #6
 80026a8:	f000 829d 	beq.w	8002be6 <HAL_PCD_IRQHandler+0x5e6>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026ac:	6983      	ldr	r3, [r0, #24]
 80026ae:	f043 0310 	orr.w	r3, r3, #16
 80026b2:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80026b4:	f001 fd88 	bl	80041c8 <USB_ReadInterrupts>
 80026b8:	0707      	lsls	r7, r0, #28
 80026ba:	f100 80df 	bmi.w	800287c <HAL_PCD_IRQHandler+0x27c>
 80026be:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026c0:	f001 fd82 	bl	80041c8 <USB_ReadInterrupts>
 80026c4:	02c6      	lsls	r6, r0, #11
 80026c6:	f100 80cf 	bmi.w	8002868 <HAL_PCD_IRQHandler+0x268>
 80026ca:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026cc:	f001 fd7c 	bl	80041c8 <USB_ReadInterrupts>
 80026d0:	0285      	lsls	r5, r0, #10
 80026d2:	f100 80bf 	bmi.w	8002854 <HAL_PCD_IRQHandler+0x254>
 80026d6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80026d8:	f001 fd76 	bl	80041c8 <USB_ReadInterrupts>
 80026dc:	0040      	lsls	r0, r0, #1
 80026de:	f100 80b0 	bmi.w	8002842 <HAL_PCD_IRQHandler+0x242>
 80026e2:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80026e4:	f001 fd70 	bl	80041c8 <USB_ReadInterrupts>
 80026e8:	0741      	lsls	r1, r0, #29
 80026ea:	d592      	bpl.n	8002612 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 80026ec:	6823      	ldr	r3, [r4, #0]
 80026ee:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80026f0:	076a      	lsls	r2, r5, #29
 80026f2:	d40d      	bmi.n	8002710 <HAL_PCD_IRQHandler+0x110>
      hpcd->Instance->GOTGINT |= temp;
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	432a      	orrs	r2, r5
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	e78a      	b.n	8002612 <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80026fc:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 8002700:	07da      	lsls	r2, r3, #31
 8002702:	d426      	bmi.n	8002752 <HAL_PCD_IRQHandler+0x152>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002704:	6820      	ldr	r0, [r4, #0]
 8002706:	6943      	ldr	r3, [r0, #20]
 8002708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800270c:	6143      	str	r3, [r0, #20]
 800270e:	e7ac      	b.n	800266a <HAL_PCD_IRQHandler+0x6a>
        HAL_PCD_DisconnectCallback(hpcd);
 8002710:	4620      	mov	r0, r4
 8002712:	f004 f9cf 	bl	8006ab4 <HAL_PCD_DisconnectCallback>
 8002716:	6823      	ldr	r3, [r4, #0]
 8002718:	e7ec      	b.n	80026f4 <HAL_PCD_IRQHandler+0xf4>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800271a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800271e:	421d      	tst	r5, r3
 8002720:	d0c4      	beq.n	80026ac <HAL_PCD_IRQHandler+0xac>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002722:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 8002726:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800272a:	f3c5 150a 	ubfx	r5, r5, #4, #11
 800272e:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 8002732:	462a      	mov	r2, r5
 8002734:	4630      	mov	r0, r6
 8002736:	f001 fcb3 	bl	80040a0 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800273a:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800273e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8002742:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002744:	4429      	add	r1, r5
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002746:	442a      	add	r2, r5
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002748:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800274c:	f8c7 2214 	str.w	r2, [r7, #532]	; 0x214
 8002750:	e7ac      	b.n	80026ac <HAL_PCD_IRQHandler+0xac>
        HAL_PCD_SuspendCallback(hpcd);
 8002752:	4620      	mov	r0, r4
 8002754:	f004 f986 	bl	8006a64 <HAL_PCD_SuspendCallback>
 8002758:	e7d4      	b.n	8002704 <HAL_PCD_IRQHandler+0x104>
      if (hpcd->LPM_State == LPM_L1)
 800275a:	f894 13f4 	ldrb.w	r1, [r4, #1012]	; 0x3f4
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800275e:	f8d6 2804 	ldr.w	r2, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8002762:	2901      	cmp	r1, #1
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002764:	f022 0201 	bic.w	r2, r2, #1
 8002768:	f8c6 2804 	str.w	r2, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800276c:	f000 81f6 	beq.w	8002b5c <HAL_PCD_IRQHandler+0x55c>
        HAL_PCD_ResumeCallback(hpcd);
 8002770:	4620      	mov	r0, r4
 8002772:	f004 f98f 	bl	8006a94 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002776:	6820      	ldr	r0, [r4, #0]
 8002778:	6943      	ldr	r3, [r0, #20]
 800277a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800277e:	6143      	str	r3, [r0, #20]
 8002780:	e76e      	b.n	8002660 <HAL_PCD_IRQHandler+0x60>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002782:	f506 6700 	add.w	r7, r6, #2048	; 0x800
 8002786:	687b      	ldr	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002788:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800278a:	f023 0301 	bic.w	r3, r3, #1
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800278e:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002790:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002792:	f001 fa41 	bl	8003c18 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002796:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800279a:	f1bc 0f00 	cmp.w	ip, #0
 800279e:	d015      	beq.n	80027cc <HAL_PCD_IRQHandler+0x1cc>
 80027a0:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80027a4:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 80027a8:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80027b0:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80027b2:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027b6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ba:	3501      	adds	r5, #1
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027bc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c0:	4565      	cmp	r5, ip
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80027c6:	f103 0320 	add.w	r3, r3, #32
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ca:	d1ed      	bne.n	80027a8 <HAL_PCD_IRQHandler+0x1a8>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80027cc:	69fb      	ldr	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80027ce:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80027d0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80027d4:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80027d6:	2a00      	cmp	r2, #0
 80027d8:	f000 81b5 	beq.w	8002b46 <HAL_PCD_IRQHandler+0x546>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80027dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027e0:	f043 030b 	orr.w	r3, r3, #11
 80027e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80027e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ea:	f043 030b 	orr.w	r3, r3, #11
 80027ee:	647b      	str	r3, [r7, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80027f0:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027f4:	7c21      	ldrb	r1, [r4, #16]
 80027f6:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80027f8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80027fc:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002800:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002804:	f001 fd32 	bl	800426c <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002808:	6820      	ldr	r0, [r4, #0]
 800280a:	6943      	ldr	r3, [r0, #20]
 800280c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002810:	6143      	str	r3, [r0, #20]
 8002812:	e730      	b.n	8002676 <HAL_PCD_IRQHandler+0x76>
      (void)USB_ActivateSetup(hpcd->Instance);
 8002814:	f001 fd0e 	bl	8004234 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002818:	6820      	ldr	r0, [r4, #0]
 800281a:	f001 fa0f 	bl	8003c3c <USB_GetDevSpeed>
 800281e:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002820:	6825      	ldr	r5, [r4, #0]
 8002822:	f000 fe67 	bl	80034f4 <HAL_RCC_GetHCLKFreq>
 8002826:	7b22      	ldrb	r2, [r4, #12]
 8002828:	4601      	mov	r1, r0
 800282a:	4628      	mov	r0, r5
 800282c:	f001 f850 	bl	80038d0 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8002830:	4620      	mov	r0, r4
 8002832:	f004 f901 	bl	8006a38 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002836:	6820      	ldr	r0, [r4, #0]
 8002838:	6943      	ldr	r3, [r0, #20]
 800283a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800283e:	6143      	str	r3, [r0, #20]
 8002840:	e720      	b.n	8002684 <HAL_PCD_IRQHandler+0x84>
      HAL_PCD_ConnectCallback(hpcd);
 8002842:	4620      	mov	r0, r4
 8002844:	f004 f932 	bl	8006aac <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002848:	6820      	ldr	r0, [r4, #0]
 800284a:	6943      	ldr	r3, [r0, #20]
 800284c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002850:	6143      	str	r3, [r0, #20]
 8002852:	e747      	b.n	80026e4 <HAL_PCD_IRQHandler+0xe4>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002854:	4620      	mov	r0, r4
 8002856:	2100      	movs	r1, #0
 8002858:	f004 f920 	bl	8006a9c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800285c:	6820      	ldr	r0, [r4, #0]
 800285e:	6943      	ldr	r3, [r0, #20]
 8002860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002864:	6143      	str	r3, [r0, #20]
 8002866:	e737      	b.n	80026d8 <HAL_PCD_IRQHandler+0xd8>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002868:	4620      	mov	r0, r4
 800286a:	2100      	movs	r1, #0
 800286c:	f004 f91a 	bl	8006aa4 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002870:	6820      	ldr	r0, [r4, #0]
 8002872:	6943      	ldr	r3, [r0, #20]
 8002874:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002878:	6143      	str	r3, [r0, #20]
 800287a:	e727      	b.n	80026cc <HAL_PCD_IRQHandler+0xcc>
      HAL_PCD_SOFCallback(hpcd);
 800287c:	4620      	mov	r0, r4
 800287e:	f004 f8d7 	bl	8006a30 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002882:	6820      	ldr	r0, [r4, #0]
 8002884:	6943      	ldr	r3, [r0, #20]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	6143      	str	r3, [r0, #20]
 800288c:	e718      	b.n	80026c0 <HAL_PCD_IRQHandler+0xc0>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800288e:	f001 fca7 	bl	80041e0 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 8002892:	4681      	mov	r9, r0
 8002894:	6820      	ldr	r0, [r4, #0]
 8002896:	f1b9 0f00 	cmp.w	r9, #0
 800289a:	f43f aedc 	beq.w	8002656 <HAL_PCD_IRQHandler+0x56>
 800289e:	f506 6310 	add.w	r3, r6, #2304	; 0x900
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028a2:	e9cd 6503 	strd	r6, r5, [sp, #12]
 80028a6:	46a3      	mov	fp, r4
      epnum = 0U;
 80028a8:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028ac:	461e      	mov	r6, r3
 80028ae:	e007      	b.n	80028c0 <HAL_PCD_IRQHandler+0x2c0>
      while (ep_intr != 0U)
 80028b0:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 80028b4:	f10a 0a01 	add.w	sl, sl, #1
 80028b8:	f10b 0b1c 	add.w	fp, fp, #28
      while (ep_intr != 0U)
 80028bc:	f000 80f9 	beq.w	8002ab2 <HAL_PCD_IRQHandler+0x4b2>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80028c0:	f019 0f01 	tst.w	r9, #1
 80028c4:	d0f4      	beq.n	80028b0 <HAL_PCD_IRQHandler+0x2b0>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028c6:	fa5f f78a 	uxtb.w	r7, sl
 80028ca:	4639      	mov	r1, r7
 80028cc:	f001 fc9a 	bl	8004204 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80028d0:	07c2      	lsls	r2, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028d2:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80028d4:	f100 80b8 	bmi.w	8002a48 <HAL_PCD_IRQHandler+0x448>
 80028d8:	6820      	ldr	r0, [r4, #0]
 80028da:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80028dc:	072b      	lsls	r3, r5, #28
 80028de:	d503      	bpl.n	80028e8 <HAL_PCD_IRQHandler+0x2e8>
 80028e0:	eb06 134a 	add.w	r3, r6, sl, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80028e4:	2208      	movs	r2, #8
 80028e6:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80028e8:	06e9      	lsls	r1, r5, #27
 80028ea:	d503      	bpl.n	80028f4 <HAL_PCD_IRQHandler+0x2f4>
 80028ec:	eb06 134a 	add.w	r3, r6, sl, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80028f0:	2210      	movs	r2, #16
 80028f2:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80028f4:	066a      	lsls	r2, r5, #25
 80028f6:	d503      	bpl.n	8002900 <HAL_PCD_IRQHandler+0x300>
 80028f8:	eb06 134a 	add.w	r3, r6, sl, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80028fc:	2240      	movs	r2, #64	; 0x40
 80028fe:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002900:	07ab      	lsls	r3, r5, #30
 8002902:	d503      	bpl.n	800290c <HAL_PCD_IRQHandler+0x30c>
 8002904:	eb06 134a 	add.w	r3, r6, sl, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002908:	2202      	movs	r2, #2
 800290a:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800290c:	062d      	lsls	r5, r5, #24
 800290e:	d5cf      	bpl.n	80028b0 <HAL_PCD_IRQHandler+0x2b0>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8002910:	e9db 1314 	ldrd	r1, r3, [fp, #80]	; 0x50
 8002914:	428b      	cmp	r3, r1
 8002916:	d8cb      	bhi.n	80028b0 <HAL_PCD_IRQHandler+0x2b0>
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002918:	eb08 124a 	add.w	r2, r8, sl, lsl #5
 800291c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002920:	4610      	mov	r0, r2
  if (len > ep->maxpacket)
 8002922:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002926:	9005      	str	r0, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 8002928:	1acd      	subs	r5, r1, r3
  len32b = (len + 3U) / 4U;
 800292a:	4295      	cmp	r5, r2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800292c:	6980      	ldr	r0, [r0, #24]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800292e:	f8cd 8018 	str.w	r8, [sp, #24]
  len32b = (len + 3U) / 4U;
 8002932:	46ac      	mov	ip, r5
 8002934:	bf28      	it	cs
 8002936:	4694      	movcs	ip, r2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002938:	b280      	uxth	r0, r0
  len32b = (len + 3U) / 4U;
 800293a:	f10c 0c03 	add.w	ip, ip, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800293e:	ebb0 0f9c 	cmp.w	r0, ip, lsr #2
 8002942:	d332      	bcc.n	80029aa <HAL_PCD_IRQHandler+0x3aa>
 8002944:	428b      	cmp	r3, r1
 8002946:	d234      	bcs.n	80029b2 <HAL_PCD_IRQHandler+0x3b2>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002948:	b399      	cbz	r1, 80029b2 <HAL_PCD_IRQHandler+0x3b2>
 800294a:	f8cd 901c 	str.w	r9, [sp, #28]
 800294e:	f8db 1048 	ldr.w	r1, [fp, #72]	; 0x48
 8002952:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8002956:	e007      	b.n	8002968 <HAL_PCD_IRQHandler+0x368>
 8002958:	f8db 5050 	ldr.w	r5, [fp, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800295c:	429d      	cmp	r5, r3
 800295e:	f240 8190 	bls.w	8002c82 <HAL_PCD_IRQHandler+0x682>
 8002962:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 8002966:	1aed      	subs	r5, r5, r3
 8002968:	4295      	cmp	r5, r2
 800296a:	bf28      	it	cs
 800296c:	4615      	movcs	r5, r2
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800296e:	7c23      	ldrb	r3, [r4, #16]
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	463a      	mov	r2, r7
 8002974:	b2ab      	uxth	r3, r5
 8002976:	4640      	mov	r0, r8
 8002978:	f001 fb7c 	bl	8004074 <USB_WritePacket>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800297c:	f8d9 2018 	ldr.w	r2, [r9, #24]
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8002980:	f8db 1048 	ldr.w	r1, [fp, #72]	; 0x48
    ep->xfer_count += len;
 8002984:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
    ep->xfer_buff  += len;
 8002988:	4429      	add	r1, r5
    ep->xfer_count += len;
 800298a:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800298c:	b292      	uxth	r2, r2
    len32b = (len + 3U) / 4U;
 800298e:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002990:	ebb2 0f95 	cmp.w	r2, r5, lsr #2
    ep->xfer_buff  += len;
 8002994:	f8cb 1048 	str.w	r1, [fp, #72]	; 0x48
    ep->xfer_count += len;
 8002998:	f8cb 3054 	str.w	r3, [fp, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800299c:	d2dc      	bcs.n	8002958 <HAL_PCD_IRQHandler+0x358>
 800299e:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80029a2:	f8d4 8000 	ldr.w	r8, [r4]
 80029a6:	f8db 1050 	ldr.w	r1, [fp, #80]	; 0x50
  }

  if (ep->xfer_len <= ep->xfer_count)
 80029aa:	4299      	cmp	r1, r3
 80029ac:	4640      	mov	r0, r8
 80029ae:	f63f af7f 	bhi.w	80028b0 <HAL_PCD_IRQHandler+0x2b0>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029b2:	9b06      	ldr	r3, [sp, #24]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029b4:	2001      	movs	r0, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029b6:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029ba:	f00a 010f 	and.w	r1, sl, #15
 80029be:	fa00 f101 	lsl.w	r1, r0, r1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029c2:	ea22 0201 	bic.w	r2, r2, r1
 80029c6:	4640      	mov	r0, r8
 80029c8:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 80029cc:	e770      	b.n	80028b0 <HAL_PCD_IRQHandler+0x2b0>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80029ce:	f001 fbff 	bl	80041d0 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 80029d2:	4607      	mov	r7, r0
 80029d4:	6820      	ldr	r0, [r4, #0]
 80029d6:	2f00      	cmp	r7, #0
 80029d8:	f43f ae36 	beq.w	8002648 <HAL_PCD_IRQHandler+0x48>
      epnum = 0U;
 80029dc:	f04f 0800 	mov.w	r8, #0
 80029e0:	f506 6b30 	add.w	fp, r6, #2816	; 0xb00
 80029e4:	e9cd 6503 	strd	r6, r5, [sp, #12]
 80029e8:	e003      	b.n	80029f2 <HAL_PCD_IRQHandler+0x3f2>
      while (ep_intr != 0U)
 80029ea:	087f      	lsrs	r7, r7, #1
        epnum++;
 80029ec:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 80029f0:	d062      	beq.n	8002ab8 <HAL_PCD_IRQHandler+0x4b8>
        if ((ep_intr & 0x1U) != 0U)
 80029f2:	07fd      	lsls	r5, r7, #31
 80029f4:	d5f9      	bpl.n	80029ea <HAL_PCD_IRQHandler+0x3ea>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029f6:	fa5f f688 	uxtb.w	r6, r8
 80029fa:	4631      	mov	r1, r6
 80029fc:	f001 fbf8 	bl	80041f0 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a00:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a04:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a06:	d15a      	bne.n	8002abe <HAL_PCD_IRQHandler+0x4be>
 8002a08:	f000 0308 	and.w	r3, r0, #8
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d17d      	bne.n	8002b0c <HAL_PCD_IRQHandler+0x50c>
 8002a10:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a12:	f019 0f10 	tst.w	r9, #16
 8002a16:	d003      	beq.n	8002a20 <HAL_PCD_IRQHandler+0x420>
 8002a18:	eb0b 1348 	add.w	r3, fp, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a1c:	2210      	movs	r2, #16
 8002a1e:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a20:	f019 0f20 	tst.w	r9, #32
 8002a24:	d007      	beq.n	8002a36 <HAL_PCD_IRQHandler+0x436>
            if (hpcd->Init.dma_enable == 1U)
 8002a26:	6921      	ldr	r1, [r4, #16]
 8002a28:	2901      	cmp	r1, #1
 8002a2a:	f000 80ef 	beq.w	8002c0c <HAL_PCD_IRQHandler+0x60c>
 8002a2e:	eb0b 1348 	add.w	r3, fp, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a32:	2220      	movs	r2, #32
 8002a34:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a36:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 8002a3a:	d0d6      	beq.n	80029ea <HAL_PCD_IRQHandler+0x3ea>
 8002a3c:	eb0b 1348 	add.w	r3, fp, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a44:	609a      	str	r2, [r3, #8]
 8002a46:	e7d0      	b.n	80029ea <HAL_PCD_IRQHandler+0x3ea>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a48:	9b03      	ldr	r3, [sp, #12]
            if (hpcd->Init.dma_enable == 1U)
 8002a4a:	6920      	ldr	r0, [r4, #16]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a4c:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a50:	f04f 0c01 	mov.w	ip, #1
 8002a54:	f00a 020f 	and.w	r2, sl, #15
 8002a58:	fa0c f202 	lsl.w	r2, ip, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a5c:	ea21 0102 	bic.w	r1, r1, r2
 8002a60:	eb06 124a 	add.w	r2, r6, sl, lsl #5
 8002a64:	f8c3 1834 	str.w	r1, [r3, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a68:	4613      	mov	r3, r2
            if (hpcd->Init.dma_enable == 1U)
 8002a6a:	4560      	cmp	r0, ip
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a6c:	f8c3 c008 	str.w	ip, [r3, #8]
            if (hpcd->Init.dma_enable == 1U)
 8002a70:	d104      	bne.n	8002a7c <HAL_PCD_IRQHandler+0x47c>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a72:	e9db 2311 	ldrd	r2, r3, [fp, #68]	; 0x44
 8002a76:	4413      	add	r3, r2
 8002a78:	f8cb 3048 	str.w	r3, [fp, #72]	; 0x48
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a7c:	4639      	mov	r1, r7
 8002a7e:	4620      	mov	r0, r4
 8002a80:	f003 ffcc 	bl	8006a1c <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 8002a84:	6921      	ldr	r1, [r4, #16]
 8002a86:	f8d4 8000 	ldr.w	r8, [r4]
 8002a8a:	2901      	cmp	r1, #1
 8002a8c:	4640      	mov	r0, r8
 8002a8e:	f47f af25 	bne.w	80028dc <HAL_PCD_IRQHandler+0x2dc>
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a92:	f1ba 0f00 	cmp.w	sl, #0
 8002a96:	f47f af21 	bne.w	80028dc <HAL_PCD_IRQHandler+0x2dc>
 8002a9a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f47f af1d 	bne.w	80028dc <HAL_PCD_IRQHandler+0x2dc>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002aa2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002aa6:	f001 fbe1 	bl	800426c <USB_EP0_OutStart>
 8002aaa:	f8d4 8000 	ldr.w	r8, [r4]
 8002aae:	4640      	mov	r0, r8
 8002ab0:	e714      	b.n	80028dc <HAL_PCD_IRQHandler+0x2dc>
 8002ab2:	e9dd 6503 	ldrd	r6, r5, [sp, #12]
 8002ab6:	e5ce      	b.n	8002656 <HAL_PCD_IRQHandler+0x56>
 8002ab8:	e9dd 6503 	ldrd	r6, r5, [sp, #12]
 8002abc:	e5c4      	b.n	8002648 <HAL_PCD_IRQHandler+0x48>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002abe:	6820      	ldr	r0, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 8002ac0:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8002ac4:	ea4f 1348 	mov.w	r3, r8, lsl #5
 8002ac8:	eb0b 0503 	add.w	r5, fp, r3
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002acc:	f500 6a30 	add.w	sl, r0, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ad0:	2101      	movs	r1, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ad2:	449a      	add	sl, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ad4:	60a9      	str	r1, [r5, #8]
  if (hpcd->Init.dma_enable == 1U)
 8002ad6:	458c      	cmp	ip, r1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ad8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ada:	f8da e008 	ldr.w	lr, [sl, #8]
 8002ade:	f009 0308 	and.w	r3, r9, #8
  if (hpcd->Init.dma_enable == 1U)
 8002ae2:	d064      	beq.n	8002bae <HAL_PCD_IRQHandler+0x5ae>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002ae4:	4971      	ldr	r1, [pc, #452]	; (8002cac <HAL_PCD_IRQHandler+0x6ac>)
 8002ae6:	428a      	cmp	r2, r1
 8002ae8:	d109      	bne.n	8002afe <HAL_PCD_IRQHandler+0x4fe>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002aea:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 8002aee:	f040 80cd 	bne.w	8002c8c <HAL_PCD_IRQHandler+0x68c>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002af2:	f01e 0f20 	tst.w	lr, #32
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002af6:	bf1c      	itt	ne
 8002af8:	2120      	movne	r1, #32
 8002afa:	f8ca 1008 	strne.w	r1, [sl, #8]
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002afe:	4631      	mov	r1, r6
 8002b00:	4620      	mov	r0, r4
 8002b02:	9305      	str	r3, [sp, #20]
 8002b04:	f003 ff80 	bl	8006a08 <HAL_PCD_DataOutStageCallback>
 8002b08:	9b05      	ldr	r3, [sp, #20]
 8002b0a:	e77f      	b.n	8002a0c <HAL_PCD_IRQHandler+0x40c>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b0c:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 8002b0e:	6921      	ldr	r1, [r4, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b12:	f503 6a30 	add.w	sl, r3, #2816	; 0xb00
 8002b16:	ea4f 1348 	mov.w	r3, r8, lsl #5
 8002b1a:	449a      	add	sl, r3
  if (hpcd->Init.dma_enable == 1U)
 8002b1c:	2901      	cmp	r1, #1
 8002b1e:	eb0b 0503 	add.w	r5, fp, r3
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b22:	f8da 3008 	ldr.w	r3, [sl, #8]
  if (hpcd->Init.dma_enable == 1U)
 8002b26:	d03b      	beq.n	8002ba0 <HAL_PCD_IRQHandler+0x5a0>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8002b28:	4960      	ldr	r1, [pc, #384]	; (8002cac <HAL_PCD_IRQHandler+0x6ac>)
 8002b2a:	428a      	cmp	r2, r1
 8002b2c:	d01d      	beq.n	8002b6a <HAL_PCD_IRQHandler+0x56a>

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002b2e:	4620      	mov	r0, r4
 8002b30:	9205      	str	r2, [sp, #20]
 8002b32:	f003 ff63 	bl	80069fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002b36:	4b5e      	ldr	r3, [pc, #376]	; (8002cb0 <HAL_PCD_IRQHandler+0x6b0>)
 8002b38:	9a05      	ldr	r2, [sp, #20]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d81e      	bhi.n	8002b7c <HAL_PCD_IRQHandler+0x57c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002b3e:	2308      	movs	r3, #8
 8002b40:	6820      	ldr	r0, [r4, #0]
 8002b42:	60ab      	str	r3, [r5, #8]
 8002b44:	e765      	b.n	8002a12 <HAL_PCD_IRQHandler+0x412>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b4c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002b50:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f043 030b 	orr.w	r3, r3, #11
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	e649      	b.n	80027f0 <HAL_PCD_IRQHandler+0x1f0>
        hpcd->LPM_State = LPM_L0;
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b62:	4620      	mov	r0, r4
 8002b64:	f000 fa18 	bl	8002f98 <HAL_PCDEx_LPM_Callback>
 8002b68:	e605      	b.n	8002776 <HAL_PCD_IRQHandler+0x176>
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8002b6a:	0419      	lsls	r1, r3, #16
 8002b6c:	d503      	bpl.n	8002b76 <HAL_PCD_IRQHandler+0x576>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b72:	f8ca 3008 	str.w	r3, [sl, #8]
  HAL_PCD_SetupStageCallback(hpcd);
 8002b76:	4620      	mov	r0, r4
 8002b78:	f003 ff40 	bl	80069fc <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002b7c:	6921      	ldr	r1, [r4, #16]
 8002b7e:	2901      	cmp	r1, #1
 8002b80:	d1dd      	bne.n	8002b3e <HAL_PCD_IRQHandler+0x53e>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b82:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002b86:	6820      	ldr	r0, [r4, #0]
 8002b88:	f001 fb70 	bl	800426c <USB_EP0_OutStart>
 8002b8c:	e7d7      	b.n	8002b3e <HAL_PCD_IRQHandler+0x53e>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f8ca 2008 	str.w	r2, [sl, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f43f af3c 	beq.w	8002a12 <HAL_PCD_IRQHandler+0x412>
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b9a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b9c:	f8da 3008 	ldr.w	r3, [sl, #8]
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ba0:	4943      	ldr	r1, [pc, #268]	; (8002cb0 <HAL_PCD_IRQHandler+0x6b0>)
 8002ba2:	428a      	cmp	r2, r1
 8002ba4:	d8e1      	bhi.n	8002b6a <HAL_PCD_IRQHandler+0x56a>
  HAL_PCD_SetupStageCallback(hpcd);
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	f003 ff28 	bl	80069fc <HAL_PCD_SetupStageCallback>
 8002bac:	e7c7      	b.n	8002b3e <HAL_PCD_IRQHandler+0x53e>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002bae:	f01e 0f08 	tst.w	lr, #8
 8002bb2:	d031      	beq.n	8002c18 <HAL_PCD_IRQHandler+0x618>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bb4:	493e      	ldr	r1, [pc, #248]	; (8002cb0 <HAL_PCD_IRQHandler+0x6b0>)
 8002bb6:	428a      	cmp	r2, r1
 8002bb8:	d906      	bls.n	8002bc8 <HAL_PCD_IRQHandler+0x5c8>
 8002bba:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bbe:	bf1c      	itt	ne
 8002bc0:	f44f 4200 	movne.w	r2, #32768	; 0x8000
 8002bc4:	f8ca 2008 	strne.w	r2, [sl, #8]
      HAL_PCD_SetupStageCallback(hpcd);
 8002bc8:	4620      	mov	r0, r4
 8002bca:	9305      	str	r3, [sp, #20]
 8002bcc:	f003 ff16 	bl	80069fc <HAL_PCD_SetupStageCallback>
      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bd0:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	6820      	ldr	r0, [r4, #0]
 8002bd8:	f001 fb48 	bl	800426c <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002bdc:	2208      	movs	r2, #8
 8002bde:	f8ca 2008 	str.w	r2, [sl, #8]
 8002be2:	9b05      	ldr	r3, [sp, #20]
 8002be4:	e712      	b.n	8002a0c <HAL_PCD_IRQHandler+0x40c>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002be6:	2208      	movs	r2, #8
 8002be8:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8002bec:	4630      	mov	r0, r6
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bee:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002bf2:	f001 fa55 	bl	80040a0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bf6:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 8002bfa:	f3c5 130a 	ubfx	r3, r5, #4, #11
 8002bfe:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8002c02:	6820      	ldr	r0, [r4, #0]
 8002c04:	440b      	add	r3, r1
 8002c06:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8002c0a:	e54f      	b.n	80026ac <HAL_PCD_IRQHandler+0xac>
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c0c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002c10:	f001 fb2c 	bl	800426c <USB_EP0_OutStart>
 8002c14:	6820      	ldr	r0, [r4, #0]
 8002c16:	e70a      	b.n	8002a2e <HAL_PCD_IRQHandler+0x42e>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002c18:	f01e 0f20 	tst.w	lr, #32
 8002c1c:	d1b7      	bne.n	8002b8e <HAL_PCD_IRQHandler+0x58e>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002c1e:	f01e 0f28 	tst.w	lr, #40	; 0x28
 8002c22:	d1b7      	bne.n	8002b94 <HAL_PCD_IRQHandler+0x594>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c24:	4922      	ldr	r1, [pc, #136]	; (8002cb0 <HAL_PCD_IRQHandler+0x6b0>)
 8002c26:	428a      	cmp	r2, r1
 8002c28:	d902      	bls.n	8002c30 <HAL_PCD_IRQHandler+0x630>
 8002c2a:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 8002c2e:	d138      	bne.n	8002ca2 <HAL_PCD_IRQHandler+0x6a2>
 8002c30:	201c      	movs	r0, #28
 8002c32:	fb00 4008 	mla	r0, r0, r8, r4
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002c36:	f8da c010 	ldr.w	ip, [sl, #16]
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002c3a:	f8d0 1208 	ldr.w	r1, [r0, #520]	; 0x208
          hpcd->OUT_ep[epnum].maxpacket -
 8002c3e:	f8d0 e204 	ldr.w	lr, [r0, #516]	; 0x204
 8002c42:	9305      	str	r3, [sp, #20]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002c44:	f3cc 0c12 	ubfx	ip, ip, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002c48:	ebae 0c0c 	sub.w	ip, lr, ip
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002c4c:	448e      	add	lr, r1
        hpcd->OUT_ep[epnum].xfer_count =
 8002c4e:	f8c0 c214 	str.w	ip, [r0, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002c52:	f8c0 e208 	str.w	lr, [r0, #520]	; 0x208
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c56:	4631      	mov	r1, r6
 8002c58:	4620      	mov	r0, r4
 8002c5a:	f003 fed5 	bl	8006a08 <HAL_PCD_DataOutStageCallback>
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c5e:	9b05      	ldr	r3, [sp, #20]
 8002c60:	f1b8 0f00 	cmp.w	r8, #0
 8002c64:	f47f aed2 	bne.w	8002a0c <HAL_PCD_IRQHandler+0x40c>
 8002c68:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8002c6c:	2a00      	cmp	r2, #0
 8002c6e:	f47f aecd 	bne.w	8002a0c <HAL_PCD_IRQHandler+0x40c>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c72:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002c76:	2101      	movs	r1, #1
 8002c78:	6820      	ldr	r0, [r4, #0]
 8002c7a:	f001 faf7 	bl	800426c <USB_EP0_OutStart>
 8002c7e:	9b05      	ldr	r3, [sp, #20]
 8002c80:	e6c4      	b.n	8002a0c <HAL_PCD_IRQHandler+0x40c>
 8002c82:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8002c86:	f8d4 8000 	ldr.w	r8, [r4]
 8002c8a:	e692      	b.n	80029b2 <HAL_PCD_IRQHandler+0x3b2>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c90:	f8ca 2008 	str.w	r2, [sl, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f43f aebc 	beq.w	8002a12 <HAL_PCD_IRQHandler+0x412>
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c9a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c9c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8002ca0:	e742      	b.n	8002b28 <HAL_PCD_IRQHandler+0x528>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ca2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ca6:	f8ca 2008 	str.w	r2, [sl, #8]
 8002caa:	e773      	b.n	8002b94 <HAL_PCD_IRQHandler+0x594>
 8002cac:	4f54310a 	.word	0x4f54310a
 8002cb0:	4f54300a 	.word	0x4f54300a

08002cb4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8002cb4:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8002cb8:	2a01      	cmp	r2, #1
 8002cba:	d00d      	beq.n	8002cd8 <HAL_PCD_SetAddress+0x24>
{
 8002cbc:	b510      	push	{r4, lr}
 8002cbe:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002cc0:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8002cc2:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  __HAL_LOCK(hpcd);
 8002cc6:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cca:	6800      	ldr	r0, [r0, #0]
 8002ccc:	f001 fa54 	bl	8004178 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8002cd6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002cd8:	2002      	movs	r0, #2
}
 8002cda:	4770      	bx	lr

08002cdc <HAL_PCD_EP_Open>:
{
 8002cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cde:	f001 050f 	and.w	r5, r1, #15
 8002ce2:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
    ep->is_in = 1U;
 8002ce6:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 8002cea:	0609      	lsls	r1, r1, #24
 8002cec:	ea4f 0484 	mov.w	r4, r4, lsl #2
    ep->is_in = 1U;
 8002cf0:	eb00 0686 	add.w	r6, r0, r6, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8002cf4:	d41e      	bmi.n	8002d34 <HAL_PCD_EP_Open+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cf6:	f504 74fe 	add.w	r4, r4, #508	; 0x1fc
    ep->is_in = 0U;
 8002cfa:	2700      	movs	r7, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cfc:	1901      	adds	r1, r0, r4
    ep->is_in = 0U;
 8002cfe:	f886 71fd 	strb.w	r7, [r6, #509]	; 0x1fd
  if (ep->is_in != 0U)
 8002d02:	784c      	ldrb	r4, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d04:	700d      	strb	r5, [r1, #0]
  ep->maxpacket = ep_mps;
 8002d06:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8002d08:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8002d0a:	b104      	cbz	r4, 8002d0e <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 8002d0c:	80cd      	strh	r5, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8002d0e:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8002d10:	bf04      	itt	eq
 8002d12:	2300      	moveq	r3, #0
 8002d14:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8002d16:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d010      	beq.n	8002d40 <HAL_PCD_EP_Open+0x64>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	4604      	mov	r4, r0
 8002d22:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d26:	6800      	ldr	r0, [r0, #0]
 8002d28:	f000 ff94 	bl	8003c54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8002d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d34:	343c      	adds	r4, #60	; 0x3c
    ep->is_in = 1U;
 8002d36:	2701      	movs	r7, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d38:	1901      	adds	r1, r0, r4
    ep->is_in = 1U;
 8002d3a:	f886 703d 	strb.w	r7, [r6, #61]	; 0x3d
 8002d3e:	e7e0      	b.n	8002d02 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8002d40:	2002      	movs	r0, #2
}
 8002d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002d44 <HAL_PCD_EP_Close>:
{
 8002d44:	f001 020f 	and.w	r2, r1, #15
 8002d48:	b538      	push	{r3, r4, r5, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 8002d4a:	0609      	lsls	r1, r1, #24
 8002d4c:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
    ep->is_in = 1U;
 8002d50:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
 8002d54:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002d58:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8002d5c:	d415      	bmi.n	8002d8a <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d5e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002d62:	18c1      	adds	r1, r0, r3
    ep->is_in = 0U;
 8002d64:	2500      	movs	r5, #0
 8002d66:	f884 51fd 	strb.w	r5, [r4, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d6a:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002d6c:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d014      	beq.n	8002d9e <HAL_PCD_EP_Close+0x5a>
 8002d74:	2301      	movs	r3, #1
 8002d76:	4604      	mov	r4, r0
 8002d78:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d7c:	6800      	ldr	r0, [r0, #0]
 8002d7e:	f000 ffad 	bl	8003cdc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d82:	2000      	movs	r0, #0
 8002d84:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8002d88:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d8a:	333c      	adds	r3, #60	; 0x3c
 8002d8c:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 8002d8e:	2501      	movs	r5, #1
 8002d90:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d94:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002d96:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d1ea      	bne.n	8002d74 <HAL_PCD_EP_Close+0x30>
 8002d9e:	2002      	movs	r0, #2
}
 8002da0:	bd38      	pop	{r3, r4, r5, pc}
 8002da2:	bf00      	nop

08002da4 <HAL_PCD_EP_Receive>:
{
 8002da4:	b538      	push	{r3, r4, r5, lr}
 8002da6:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_buff = pBuf;
 8002daa:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
 8002dae:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep->xfer_count = 0U;
 8002db2:	2100      	movs	r1, #0
  ep->xfer_buff = pBuf;
 8002db4:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8002db8:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8002dbc:	f884 11fd 	strb.w	r1, [r4, #509]	; 0x1fd
  ep->xfer_len = len;
 8002dc0:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dc4:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8002dc8:	6903      	ldr	r3, [r0, #16]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dca:	211c      	movs	r1, #28
 8002dcc:	fb01 0105 	mla	r1, r1, r5, r0
  if (hpcd->Init.dma_enable == 1U)
 8002dd0:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8002dd2:	bf08      	it	eq
 8002dd4:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dd8:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
 8002ddc:	6800      	ldr	r0, [r0, #0]
 8002dde:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002de0:	b11d      	cbz	r5, 8002dea <HAL_PCD_EP_Receive+0x46>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002de2:	f000 ffaf 	bl	8003d44 <USB_EPStartXfer>
}
 8002de6:	2000      	movs	r0, #0
 8002de8:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dea:	f001 f8bd 	bl	8003f68 <USB_EP0StartXfer>
}
 8002dee:	2000      	movs	r0, #0
 8002df0:	bd38      	pop	{r3, r4, r5, pc}
 8002df2:	bf00      	nop

08002df4 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002df4:	f001 010f 	and.w	r1, r1, #15
 8002df8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002dfc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8002e00:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop

08002e08 <HAL_PCD_EP_Transmit>:
{
 8002e08:	b570      	push	{r4, r5, r6, lr}
 8002e0a:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_buff = pBuf;
 8002e0e:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
 8002e12:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep->is_in = 1U;
 8002e16:	2101      	movs	r1, #1
  ep->xfer_count = 0U;
 8002e18:	2600      	movs	r6, #0
  ep->xfer_buff = pBuf;
 8002e1a:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 8002e1c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  ep->xfer_len = len;
 8002e20:	6523      	str	r3, [r4, #80]	; 0x50
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e22:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8002e26:	6566      	str	r6, [r4, #84]	; 0x54
  if (hpcd->Init.dma_enable == 1U)
 8002e28:	6903      	ldr	r3, [r0, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e2a:	211c      	movs	r1, #28
 8002e2c:	fb01 0105 	mla	r1, r1, r5, r0
  if (hpcd->Init.dma_enable == 1U)
 8002e30:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8002e32:	bf08      	it	eq
 8002e34:	64e2      	streq	r2, [r4, #76]	; 0x4c
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e36:	313c      	adds	r1, #60	; 0x3c
 8002e38:	6800      	ldr	r0, [r0, #0]
 8002e3a:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e3c:	b11d      	cbz	r5, 8002e46 <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e3e:	f000 ff81 	bl	8003d44 <USB_EPStartXfer>
}
 8002e42:	2000      	movs	r0, #0
 8002e44:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e46:	f001 f88f 	bl	8003f68 <USB_EP0StartXfer>
}
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	bd70      	pop	{r4, r5, r6, pc}
 8002e4e:	bf00      	nop

08002e50 <HAL_PCD_EP_SetStall>:
{
 8002e50:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e52:	6843      	ldr	r3, [r0, #4]
 8002e54:	f001 050f 	and.w	r5, r1, #15
 8002e58:	429d      	cmp	r5, r3
 8002e5a:	d81f      	bhi.n	8002e9c <HAL_PCD_EP_SetStall+0x4c>
  if ((0x80U & ep_addr) == 0x80U)
 8002e5c:	060b      	lsls	r3, r1, #24
 8002e5e:	d41f      	bmi.n	8002ea0 <HAL_PCD_EP_SetStall+0x50>
    ep->is_in = 0U;
 8002e60:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8002e64:	241c      	movs	r4, #28
 8002e66:	fb04 0101 	mla	r1, r4, r1, r0
    ep->is_in = 0U;
 8002e6a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002e6e:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8002e70:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8002e74:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8002e78:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e7a:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8002e7c:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8002e7e:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d01e      	beq.n	8002ec4 <HAL_PCD_EP_SetStall+0x74>
 8002e86:	4604      	mov	r4, r0
 8002e88:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e8c:	6800      	ldr	r0, [r0, #0]
 8002e8e:	f001 f91b 	bl	80040c8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e92:	b1cd      	cbz	r5, 8002ec8 <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 8002e94:	2000      	movs	r0, #0
 8002e96:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8002e9a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002e9c:	2001      	movs	r0, #1
}
 8002e9e:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8002ea0:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ea4:	211c      	movs	r1, #28
 8002ea6:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8002eaa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002eae:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eb0:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8002eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 8002eb6:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eb8:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8002eba:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8002ebc:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d1e0      	bne.n	8002e86 <HAL_PCD_EP_SetStall+0x36>
 8002ec4:	2002      	movs	r0, #2
}
 8002ec6:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ec8:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002ecc:	7c21      	ldrb	r1, [r4, #16]
 8002ece:	6820      	ldr	r0, [r4, #0]
 8002ed0:	f001 f9cc 	bl	800426c <USB_EP0_OutStart>
 8002ed4:	e7de      	b.n	8002e94 <HAL_PCD_EP_SetStall+0x44>
 8002ed6:	bf00      	nop

08002ed8 <HAL_PCD_EP_ClrStall>:
{
 8002ed8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002eda:	6843      	ldr	r3, [r0, #4]
 8002edc:	f001 020f 	and.w	r2, r1, #15
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d821      	bhi.n	8002f28 <HAL_PCD_EP_ClrStall+0x50>
 8002ee4:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
    ep->is_in = 1U;
 8002ee8:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8002eec:	0609      	lsls	r1, r1, #24
 8002eee:	ea4f 0383 	mov.w	r3, r3, lsl #2
    ep->is_in = 1U;
 8002ef2:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  if ((0x80U & ep_addr) == 0x80U)
 8002ef6:	d419      	bmi.n	8002f2c <HAL_PCD_EP_ClrStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ef8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002efc:	18c1      	adds	r1, r0, r3
    ep->is_in = 0U;
 8002efe:	2500      	movs	r5, #0
 8002f00:	f884 51fd 	strb.w	r5, [r4, #509]	; 0x1fd
  ep->is_stall = 0U;
 8002f04:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f06:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8002f08:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8002f0a:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d018      	beq.n	8002f44 <HAL_PCD_EP_ClrStall+0x6c>
 8002f12:	4604      	mov	r4, r0
 8002f14:	2301      	movs	r3, #1
 8002f16:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f1a:	6800      	ldr	r0, [r0, #0]
 8002f1c:	f001 f900 	bl	8004120 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f20:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8002f24:	4628      	mov	r0, r5
}
 8002f26:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002f28:	2001      	movs	r0, #1
}
 8002f2a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f2c:	333c      	adds	r3, #60	; 0x3c
 8002f2e:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 8002f30:	2501      	movs	r5, #1
 8002f32:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  ep->is_stall = 0U;
 8002f36:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f38:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8002f3a:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8002f3c:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d1e6      	bne.n	8002f12 <HAL_PCD_EP_ClrStall+0x3a>
 8002f44:	2002      	movs	r0, #2
}
 8002f46:	bd38      	pop	{r3, r4, r5, pc}

08002f48 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f48:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f4a:	6805      	ldr	r5, [r0, #0]
 8002f4c:	0412      	lsls	r2, r2, #16
 8002f4e:	6a6c      	ldr	r4, [r5, #36]	; 0x24

  if (fifo == 0U)
 8002f50:	b1c1      	cbz	r1, 8002f84 <HAL_PCDEx_SetTxFiFo+0x3c>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f52:	6aab      	ldr	r3, [r5, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8002f54:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f56:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002f5a:	d00b      	beq.n	8002f74 <HAL_PCDEx_SetTxFiFo+0x2c>
 8002f5c:	2300      	movs	r3, #0
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f5e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8002f62:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8002f66:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f68:	6840      	ldr	r0, [r0, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	428b      	cmp	r3, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f6e:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002f72:	d3f4      	bcc.n	8002f5e <HAL_PCDEx_SetTxFiFo+0x16>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f74:	3140      	adds	r1, #64	; 0x40
 8002f76:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8002f7a:	4314      	orrs	r4, r2
 8002f7c:	604c      	str	r4, [r1, #4]
  }

  return HAL_OK;
}
 8002f7e:	2000      	movs	r0, #0
 8002f80:	bc30      	pop	{r4, r5}
 8002f82:	4770      	bx	lr
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f84:	4314      	orrs	r4, r2
 8002f86:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8002f88:	2000      	movs	r0, #0
 8002f8a:	bc30      	pop	{r4, r5}
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop

08002f90 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8002f90:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8002f92:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8002f94:	6259      	str	r1, [r3, #36]	; 0x24
}
 8002f96:	4770      	bx	lr

08002f98 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop

08002f9c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f9c:	2800      	cmp	r0, #0
 8002f9e:	f000 8132 	beq.w	8003206 <HAL_RCC_OscConfig+0x26a>
{
 8002fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa6:	6803      	ldr	r3, [r0, #0]
 8002fa8:	07dd      	lsls	r5, r3, #31
{
 8002faa:	b082      	sub	sp, #8
 8002fac:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fae:	d52f      	bpl.n	8003010 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fb0:	49ac      	ldr	r1, [pc, #688]	; (8003264 <HAL_RCC_OscConfig+0x2c8>)
 8002fb2:	688a      	ldr	r2, [r1, #8]
 8002fb4:	f002 020c 	and.w	r2, r2, #12
 8002fb8:	2a04      	cmp	r2, #4
 8002fba:	f000 80ea 	beq.w	8003192 <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fbe:	688a      	ldr	r2, [r1, #8]
 8002fc0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fc4:	2a08      	cmp	r2, #8
 8002fc6:	f000 80e0 	beq.w	800318a <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fca:	6863      	ldr	r3, [r4, #4]
 8002fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd0:	f000 80e9 	beq.w	80031a6 <HAL_RCC_OscConfig+0x20a>
 8002fd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fd8:	f000 8178 	beq.w	80032cc <HAL_RCC_OscConfig+0x330>
 8002fdc:	4da1      	ldr	r5, [pc, #644]	; (8003264 <HAL_RCC_OscConfig+0x2c8>)
 8002fde:	682a      	ldr	r2, [r5, #0]
 8002fe0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002fe4:	602a      	str	r2, [r5, #0]
 8002fe6:	682a      	ldr	r2, [r5, #0]
 8002fe8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fec:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f040 80de 	bne.w	80031b0 <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff4:	f7fd fa9a 	bl	800052c <HAL_GetTick>
 8002ff8:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ffa:	e005      	b.n	8003008 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ffc:	f7fd fa96 	bl	800052c <HAL_GetTick>
 8003000:	1b80      	subs	r0, r0, r6
 8003002:	2864      	cmp	r0, #100	; 0x64
 8003004:	f200 80f2 	bhi.w	80031ec <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003008:	682b      	ldr	r3, [r5, #0]
 800300a:	039b      	lsls	r3, r3, #14
 800300c:	d4f6      	bmi.n	8002ffc <HAL_RCC_OscConfig+0x60>
 800300e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003010:	079f      	lsls	r7, r3, #30
 8003012:	d475      	bmi.n	8003100 <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003014:	071a      	lsls	r2, r3, #28
 8003016:	d515      	bpl.n	8003044 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003018:	6963      	ldr	r3, [r4, #20]
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 80a5 	beq.w	800316a <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003020:	4b91      	ldr	r3, [pc, #580]	; (8003268 <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003022:	4d90      	ldr	r5, [pc, #576]	; (8003264 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8003024:	2201      	movs	r2, #1
 8003026:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003028:	f7fd fa80 	bl	800052c <HAL_GetTick>
 800302c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302e:	e005      	b.n	800303c <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003030:	f7fd fa7c 	bl	800052c <HAL_GetTick>
 8003034:	1b80      	subs	r0, r0, r6
 8003036:	2802      	cmp	r0, #2
 8003038:	f200 80d8 	bhi.w	80031ec <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800303e:	079b      	lsls	r3, r3, #30
 8003040:	d5f6      	bpl.n	8003030 <HAL_RCC_OscConfig+0x94>
 8003042:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003044:	0758      	lsls	r0, r3, #29
 8003046:	d53b      	bpl.n	80030c0 <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003048:	4a86      	ldr	r2, [pc, #536]	; (8003264 <HAL_RCC_OscConfig+0x2c8>)
 800304a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800304c:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8003050:	f040 80db 	bne.w	800320a <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003054:	9301      	str	r3, [sp, #4]
 8003056:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800305c:	6413      	str	r3, [r2, #64]	; 0x40
 800305e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003064:	9301      	str	r3, [sp, #4]
 8003066:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003068:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306a:	4d80      	ldr	r5, [pc, #512]	; (800326c <HAL_RCC_OscConfig+0x2d0>)
 800306c:	682a      	ldr	r2, [r5, #0]
 800306e:	05d1      	lsls	r1, r2, #23
 8003070:	f140 80ac 	bpl.w	80031cc <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003074:	68a3      	ldr	r3, [r4, #8]
 8003076:	2b01      	cmp	r3, #1
 8003078:	f000 80c9 	beq.w	800320e <HAL_RCC_OscConfig+0x272>
 800307c:	2b05      	cmp	r3, #5
 800307e:	f000 812f 	beq.w	80032e0 <HAL_RCC_OscConfig+0x344>
 8003082:	4d78      	ldr	r5, [pc, #480]	; (8003264 <HAL_RCC_OscConfig+0x2c8>)
 8003084:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003086:	f022 0201 	bic.w	r2, r2, #1
 800308a:	672a      	str	r2, [r5, #112]	; 0x70
 800308c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800308e:	f022 0204 	bic.w	r2, r2, #4
 8003092:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003094:	2b00      	cmp	r3, #0
 8003096:	f040 80bf 	bne.w	8003218 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800309a:	f7fd fa47 	bl	800052c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800309e:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80030a2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a4:	e006      	b.n	80030b4 <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a6:	f7fd fa41 	bl	800052c <HAL_GetTick>
 80030aa:	eba0 0008 	sub.w	r0, r0, r8
 80030ae:	42b8      	cmp	r0, r7
 80030b0:	f200 809c 	bhi.w	80031ec <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80030b6:	0798      	lsls	r0, r3, #30
 80030b8:	d4f5      	bmi.n	80030a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ba:	2e00      	cmp	r6, #0
 80030bc:	f040 80dc 	bne.w	8003278 <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030c0:	69a0      	ldr	r0, [r4, #24]
 80030c2:	b1c8      	cbz	r0, 80030f8 <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030c4:	4d67      	ldr	r5, [pc, #412]	; (8003264 <HAL_RCC_OscConfig+0x2c8>)
 80030c6:	68aa      	ldr	r2, [r5, #8]
 80030c8:	f002 020c 	and.w	r2, r2, #12
 80030cc:	2a08      	cmp	r2, #8
 80030ce:	f000 80d9 	beq.w	8003284 <HAL_RCC_OscConfig+0x2e8>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d2:	4a67      	ldr	r2, [pc, #412]	; (8003270 <HAL_RCC_OscConfig+0x2d4>)
 80030d4:	2100      	movs	r1, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030d6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80030d8:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030da:	f000 810b 	beq.w	80032f4 <HAL_RCC_OscConfig+0x358>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030de:	f7fd fa25 	bl	800052c <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e2:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80030e4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e6:	e004      	b.n	80030f2 <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e8:	f7fd fa20 	bl	800052c <HAL_GetTick>
 80030ec:	1b40      	subs	r0, r0, r5
 80030ee:	2802      	cmp	r0, #2
 80030f0:	d87c      	bhi.n	80031ec <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	019b      	lsls	r3, r3, #6
 80030f6:	d4f7      	bmi.n	80030e8 <HAL_RCC_OscConfig+0x14c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80030f8:	2000      	movs	r0, #0
}
 80030fa:	b002      	add	sp, #8
 80030fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003100:	4a58      	ldr	r2, [pc, #352]	; (8003264 <HAL_RCC_OscConfig+0x2c8>)
 8003102:	6891      	ldr	r1, [r2, #8]
 8003104:	f011 0f0c 	tst.w	r1, #12
 8003108:	d024      	beq.n	8003154 <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800310a:	6891      	ldr	r1, [r2, #8]
 800310c:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003110:	2908      	cmp	r1, #8
 8003112:	d01c      	beq.n	800314e <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003114:	68e3      	ldr	r3, [r4, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 8092 	beq.w	8003240 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 800311c:	4b55      	ldr	r3, [pc, #340]	; (8003274 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311e:	4d51      	ldr	r5, [pc, #324]	; (8003264 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8003120:	2201      	movs	r2, #1
 8003122:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003124:	f7fd fa02 	bl	800052c <HAL_GetTick>
 8003128:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312a:	e004      	b.n	8003136 <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800312c:	f7fd f9fe 	bl	800052c <HAL_GetTick>
 8003130:	1b80      	subs	r0, r0, r6
 8003132:	2802      	cmp	r0, #2
 8003134:	d85a      	bhi.n	80031ec <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003136:	682b      	ldr	r3, [r5, #0]
 8003138:	0798      	lsls	r0, r3, #30
 800313a:	d5f7      	bpl.n	800312c <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313c:	682b      	ldr	r3, [r5, #0]
 800313e:	6922      	ldr	r2, [r4, #16]
 8003140:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003144:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003148:	602b      	str	r3, [r5, #0]
 800314a:	6823      	ldr	r3, [r4, #0]
 800314c:	e762      	b.n	8003014 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800314e:	6852      	ldr	r2, [r2, #4]
 8003150:	0256      	lsls	r6, r2, #9
 8003152:	d4df      	bmi.n	8003114 <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003154:	4a43      	ldr	r2, [pc, #268]	; (8003264 <HAL_RCC_OscConfig+0x2c8>)
 8003156:	6812      	ldr	r2, [r2, #0]
 8003158:	0795      	lsls	r5, r2, #30
 800315a:	d54b      	bpl.n	80031f4 <HAL_RCC_OscConfig+0x258>
 800315c:	68e2      	ldr	r2, [r4, #12]
 800315e:	2a01      	cmp	r2, #1
 8003160:	d048      	beq.n	80031f4 <HAL_RCC_OscConfig+0x258>
        return HAL_ERROR;
 8003162:	2001      	movs	r0, #1
}
 8003164:	b002      	add	sp, #8
 8003166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800316a:	4a3f      	ldr	r2, [pc, #252]	; (8003268 <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800316c:	4d3d      	ldr	r5, [pc, #244]	; (8003264 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 800316e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003170:	f7fd f9dc 	bl	800052c <HAL_GetTick>
 8003174:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003176:	e004      	b.n	8003182 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003178:	f7fd f9d8 	bl	800052c <HAL_GetTick>
 800317c:	1b80      	subs	r0, r0, r6
 800317e:	2802      	cmp	r0, #2
 8003180:	d834      	bhi.n	80031ec <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003182:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003184:	079f      	lsls	r7, r3, #30
 8003186:	d4f7      	bmi.n	8003178 <HAL_RCC_OscConfig+0x1dc>
 8003188:	e75b      	b.n	8003042 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800318a:	684a      	ldr	r2, [r1, #4]
 800318c:	0250      	lsls	r0, r2, #9
 800318e:	f57f af1c 	bpl.w	8002fca <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003192:	4a34      	ldr	r2, [pc, #208]	; (8003264 <HAL_RCC_OscConfig+0x2c8>)
 8003194:	6812      	ldr	r2, [r2, #0]
 8003196:	0391      	lsls	r1, r2, #14
 8003198:	f57f af3a 	bpl.w	8003010 <HAL_RCC_OscConfig+0x74>
 800319c:	6862      	ldr	r2, [r4, #4]
 800319e:	2a00      	cmp	r2, #0
 80031a0:	f47f af36 	bne.w	8003010 <HAL_RCC_OscConfig+0x74>
 80031a4:	e7dd      	b.n	8003162 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031a6:	4a2f      	ldr	r2, [pc, #188]	; (8003264 <HAL_RCC_OscConfig+0x2c8>)
 80031a8:	6813      	ldr	r3, [r2, #0]
 80031aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ae:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80031b0:	f7fd f9bc 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b4:	4d2b      	ldr	r5, [pc, #172]	; (8003264 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80031b6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b8:	e004      	b.n	80031c4 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031ba:	f7fd f9b7 	bl	800052c <HAL_GetTick>
 80031be:	1b80      	subs	r0, r0, r6
 80031c0:	2864      	cmp	r0, #100	; 0x64
 80031c2:	d813      	bhi.n	80031ec <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c4:	682b      	ldr	r3, [r5, #0]
 80031c6:	039a      	lsls	r2, r3, #14
 80031c8:	d5f7      	bpl.n	80031ba <HAL_RCC_OscConfig+0x21e>
 80031ca:	e720      	b.n	800300e <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031cc:	682a      	ldr	r2, [r5, #0]
 80031ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031d2:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 80031d4:	f7fd f9aa 	bl	800052c <HAL_GetTick>
 80031d8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031da:	682b      	ldr	r3, [r5, #0]
 80031dc:	05da      	lsls	r2, r3, #23
 80031de:	f53f af49 	bmi.w	8003074 <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e2:	f7fd f9a3 	bl	800052c <HAL_GetTick>
 80031e6:	1bc0      	subs	r0, r0, r7
 80031e8:	2802      	cmp	r0, #2
 80031ea:	d9f6      	bls.n	80031da <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 80031ec:	2003      	movs	r0, #3
}
 80031ee:	b002      	add	sp, #8
 80031f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f4:	491b      	ldr	r1, [pc, #108]	; (8003264 <HAL_RCC_OscConfig+0x2c8>)
 80031f6:	6920      	ldr	r0, [r4, #16]
 80031f8:	680a      	ldr	r2, [r1, #0]
 80031fa:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80031fe:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003202:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003204:	e706      	b.n	8003014 <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 8003206:	2001      	movs	r0, #1
}
 8003208:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 800320a:	2600      	movs	r6, #0
 800320c:	e72d      	b.n	800306a <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800320e:	4a15      	ldr	r2, [pc, #84]	; (8003264 <HAL_RCC_OscConfig+0x2c8>)
 8003210:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003212:	f043 0301 	orr.w	r3, r3, #1
 8003216:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003218:	f7fd f988 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800321c:	4d11      	ldr	r5, [pc, #68]	; (8003264 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800321e:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003220:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003224:	e005      	b.n	8003232 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003226:	f7fd f981 	bl	800052c <HAL_GetTick>
 800322a:	eba0 0008 	sub.w	r0, r0, r8
 800322e:	42b8      	cmp	r0, r7
 8003230:	d8dc      	bhi.n	80031ec <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003232:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003234:	079b      	lsls	r3, r3, #30
 8003236:	d5f6      	bpl.n	8003226 <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 8003238:	2e00      	cmp	r6, #0
 800323a:	f43f af41 	beq.w	80030c0 <HAL_RCC_OscConfig+0x124>
 800323e:	e01b      	b.n	8003278 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 8003240:	4a0c      	ldr	r2, [pc, #48]	; (8003274 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003242:	4d08      	ldr	r5, [pc, #32]	; (8003264 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8003244:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003246:	f7fd f971 	bl	800052c <HAL_GetTick>
 800324a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800324c:	e004      	b.n	8003258 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800324e:	f7fd f96d 	bl	800052c <HAL_GetTick>
 8003252:	1b80      	subs	r0, r0, r6
 8003254:	2802      	cmp	r0, #2
 8003256:	d8c9      	bhi.n	80031ec <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003258:	682b      	ldr	r3, [r5, #0]
 800325a:	0799      	lsls	r1, r3, #30
 800325c:	d4f7      	bmi.n	800324e <HAL_RCC_OscConfig+0x2b2>
 800325e:	6823      	ldr	r3, [r4, #0]
 8003260:	e6d8      	b.n	8003014 <HAL_RCC_OscConfig+0x78>
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800
 8003268:	42470e80 	.word	0x42470e80
 800326c:	40007000 	.word	0x40007000
 8003270:	42470060 	.word	0x42470060
 8003274:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 8003278:	4a35      	ldr	r2, [pc, #212]	; (8003350 <HAL_RCC_OscConfig+0x3b4>)
 800327a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800327c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003280:	6413      	str	r3, [r2, #64]	; 0x40
 8003282:	e71d      	b.n	80030c0 <HAL_RCC_OscConfig+0x124>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003284:	2801      	cmp	r0, #1
 8003286:	f43f af6d 	beq.w	8003164 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->CFGR;
 800328a:	68ab      	ldr	r3, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800328c:	69e2      	ldr	r2, [r4, #28]
 800328e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8003292:	4291      	cmp	r1, r2
 8003294:	f47f af65 	bne.w	8003162 <HAL_RCC_OscConfig+0x1c6>
 8003298:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800329a:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329e:	4291      	cmp	r1, r2
 80032a0:	f47f af5f 	bne.w	8003162 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032a4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032aa:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032ac:	428a      	cmp	r2, r1
 80032ae:	f47f af58 	bne.w	8003162 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032b4:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032b8:	4291      	cmp	r1, r2
 80032ba:	f47f af52 	bne.w	8003162 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032be:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80032c0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 80032c4:	1a18      	subs	r0, r3, r0
 80032c6:	bf18      	it	ne
 80032c8:	2001      	movne	r0, #1
 80032ca:	e74b      	b.n	8003164 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032cc:	4b20      	ldr	r3, [pc, #128]	; (8003350 <HAL_RCC_OscConfig+0x3b4>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	e767      	b.n	80031b0 <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e0:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <HAL_RCC_OscConfig+0x3b4>)
 80032e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80032e4:	f042 0204 	orr.w	r2, r2, #4
 80032e8:	671a      	str	r2, [r3, #112]	; 0x70
 80032ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80032ec:	f042 0201 	orr.w	r2, r2, #1
 80032f0:	671a      	str	r2, [r3, #112]	; 0x70
 80032f2:	e791      	b.n	8003218 <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 80032f4:	f7fd f91a 	bl	800052c <HAL_GetTick>
 80032f8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fa:	e005      	b.n	8003308 <HAL_RCC_OscConfig+0x36c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fc:	f7fd f916 	bl	800052c <HAL_GetTick>
 8003300:	1b80      	subs	r0, r0, r6
 8003302:	2802      	cmp	r0, #2
 8003304:	f63f af72 	bhi.w	80031ec <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003308:	682b      	ldr	r3, [r5, #0]
 800330a:	0199      	lsls	r1, r3, #6
 800330c:	d4f6      	bmi.n	80032fc <HAL_RCC_OscConfig+0x360>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800330e:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8003312:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8003316:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003318:	4c0d      	ldr	r4, [pc, #52]	; (8003350 <HAL_RCC_OscConfig+0x3b4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800331a:	4333      	orrs	r3, r6
 800331c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003320:	0852      	lsrs	r2, r2, #1
 8003322:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003326:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8003328:	490a      	ldr	r1, [pc, #40]	; (8003354 <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800332a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800332e:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003330:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003332:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8003334:	f7fd f8fa 	bl	800052c <HAL_GetTick>
 8003338:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333a:	e005      	b.n	8003348 <HAL_RCC_OscConfig+0x3ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800333c:	f7fd f8f6 	bl	800052c <HAL_GetTick>
 8003340:	1b40      	subs	r0, r0, r5
 8003342:	2802      	cmp	r0, #2
 8003344:	f63f af52 	bhi.w	80031ec <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003348:	6823      	ldr	r3, [r4, #0]
 800334a:	019a      	lsls	r2, r3, #6
 800334c:	d5f6      	bpl.n	800333c <HAL_RCC_OscConfig+0x3a0>
 800334e:	e6d3      	b.n	80030f8 <HAL_RCC_OscConfig+0x15c>
 8003350:	40023800 	.word	0x40023800
 8003354:	42470060 	.word	0x42470060

08003358 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003358:	4915      	ldr	r1, [pc, #84]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x58>)
{
 800335a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800335c:	688b      	ldr	r3, [r1, #8]
 800335e:	f003 030c 	and.w	r3, r3, #12
 8003362:	2b08      	cmp	r3, #8
 8003364:	d001      	beq.n	800336a <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003366:	4813      	ldr	r0, [pc, #76]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003368:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800336a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800336c:	684b      	ldr	r3, [r1, #4]
 800336e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003372:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003376:	d110      	bne.n	800339a <HAL_RCC_GetSysClockFreq+0x42>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003378:	6849      	ldr	r1, [r1, #4]
 800337a:	480e      	ldr	r0, [pc, #56]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x5c>)
 800337c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003380:	fba1 0100 	umull	r0, r1, r1, r0
 8003384:	f7fc ff2c 	bl	80001e0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003388:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x58>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003390:	3301      	adds	r3, #1
 8003392:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8003394:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003398:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800339a:	684b      	ldr	r3, [r1, #4]
 800339c:	4805      	ldr	r0, [pc, #20]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x5c>)
 800339e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80033a2:	fba3 0100 	umull	r0, r1, r3, r0
 80033a6:	2300      	movs	r3, #0
 80033a8:	f7fc ff1a 	bl	80001e0 <__aeabi_uldivmod>
 80033ac:	e7ec      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0x30>
 80033ae:	bf00      	nop
 80033b0:	40023800 	.word	0x40023800
 80033b4:	00f42400 	.word	0x00f42400

080033b8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80033b8:	b160      	cbz	r0, 80033d4 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033ba:	4a49      	ldr	r2, [pc, #292]	; (80034e0 <HAL_RCC_ClockConfig+0x128>)
 80033bc:	6813      	ldr	r3, [r2, #0]
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	428b      	cmp	r3, r1
 80033c4:	d208      	bcs.n	80033d8 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c6:	b2cb      	uxtb	r3, r1
 80033c8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ca:	6813      	ldr	r3, [r2, #0]
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	428b      	cmp	r3, r1
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 80033d4:	2001      	movs	r0, #1
}
 80033d6:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d8:	6803      	ldr	r3, [r0, #0]
{
 80033da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033de:	079d      	lsls	r5, r3, #30
 80033e0:	d514      	bpl.n	800340c <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e2:	075c      	lsls	r4, r3, #29
 80033e4:	d504      	bpl.n	80033f0 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033e6:	4c3f      	ldr	r4, [pc, #252]	; (80034e4 <HAL_RCC_ClockConfig+0x12c>)
 80033e8:	68a2      	ldr	r2, [r4, #8]
 80033ea:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80033ee:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f0:	071a      	lsls	r2, r3, #28
 80033f2:	d504      	bpl.n	80033fe <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033f4:	4c3b      	ldr	r4, [pc, #236]	; (80034e4 <HAL_RCC_ClockConfig+0x12c>)
 80033f6:	68a2      	ldr	r2, [r4, #8]
 80033f8:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80033fc:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033fe:	4c39      	ldr	r4, [pc, #228]	; (80034e4 <HAL_RCC_ClockConfig+0x12c>)
 8003400:	6885      	ldr	r5, [r0, #8]
 8003402:	68a2      	ldr	r2, [r4, #8]
 8003404:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003408:	432a      	orrs	r2, r5
 800340a:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800340c:	07df      	lsls	r7, r3, #31
 800340e:	4604      	mov	r4, r0
 8003410:	460d      	mov	r5, r1
 8003412:	d522      	bpl.n	800345a <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003414:	6842      	ldr	r2, [r0, #4]
 8003416:	2a01      	cmp	r2, #1
 8003418:	d057      	beq.n	80034ca <HAL_RCC_ClockConfig+0x112>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800341a:	1e93      	subs	r3, r2, #2
 800341c:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341e:	4b31      	ldr	r3, [pc, #196]	; (80034e4 <HAL_RCC_ClockConfig+0x12c>)
 8003420:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003422:	d959      	bls.n	80034d8 <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003424:	0799      	lsls	r1, r3, #30
 8003426:	d525      	bpl.n	8003474 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003428:	4e2e      	ldr	r6, [pc, #184]	; (80034e4 <HAL_RCC_ClockConfig+0x12c>)
 800342a:	68b3      	ldr	r3, [r6, #8]
 800342c:	f023 0303 	bic.w	r3, r3, #3
 8003430:	4313      	orrs	r3, r2
 8003432:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003434:	f7fd f87a 	bl	800052c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003438:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800343c:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343e:	e005      	b.n	800344c <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003440:	f7fd f874 	bl	800052c <HAL_GetTick>
 8003444:	eba0 0008 	sub.w	r0, r0, r8
 8003448:	42b8      	cmp	r0, r7
 800344a:	d843      	bhi.n	80034d4 <HAL_RCC_ClockConfig+0x11c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344c:	68b3      	ldr	r3, [r6, #8]
 800344e:	6862      	ldr	r2, [r4, #4]
 8003450:	f003 030c 	and.w	r3, r3, #12
 8003454:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003458:	d1f2      	bne.n	8003440 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800345a:	4a21      	ldr	r2, [pc, #132]	; (80034e0 <HAL_RCC_ClockConfig+0x128>)
 800345c:	6813      	ldr	r3, [r2, #0]
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	42ab      	cmp	r3, r5
 8003464:	d909      	bls.n	800347a <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003466:	b2eb      	uxtb	r3, r5
 8003468:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800346a:	6813      	ldr	r3, [r2, #0]
 800346c:	f003 030f 	and.w	r3, r3, #15
 8003470:	42ab      	cmp	r3, r5
 8003472:	d002      	beq.n	800347a <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 8003474:	2001      	movs	r0, #1
}
 8003476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800347a:	6823      	ldr	r3, [r4, #0]
 800347c:	075a      	lsls	r2, r3, #29
 800347e:	d506      	bpl.n	800348e <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003480:	4918      	ldr	r1, [pc, #96]	; (80034e4 <HAL_RCC_ClockConfig+0x12c>)
 8003482:	68e0      	ldr	r0, [r4, #12]
 8003484:	688a      	ldr	r2, [r1, #8]
 8003486:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800348a:	4302      	orrs	r2, r0
 800348c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348e:	071b      	lsls	r3, r3, #28
 8003490:	d412      	bmi.n	80034b8 <HAL_RCC_ClockConfig+0x100>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003492:	f7ff ff61 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 8003496:	4b13      	ldr	r3, [pc, #76]	; (80034e4 <HAL_RCC_ClockConfig+0x12c>)
 8003498:	4c13      	ldr	r4, [pc, #76]	; (80034e8 <HAL_RCC_ClockConfig+0x130>)
 800349a:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 800349c:	4913      	ldr	r1, [pc, #76]	; (80034ec <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800349e:	4a14      	ldr	r2, [pc, #80]	; (80034f0 <HAL_RCC_ClockConfig+0x138>)
 80034a0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80034a4:	5ce3      	ldrb	r3, [r4, r3]
 80034a6:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 80034aa:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034ac:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 80034ae:	f003 f937 	bl	8006720 <HAL_InitTick>
  return HAL_OK;
 80034b2:	2000      	movs	r0, #0
}
 80034b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034b8:	4a0a      	ldr	r2, [pc, #40]	; (80034e4 <HAL_RCC_ClockConfig+0x12c>)
 80034ba:	6921      	ldr	r1, [r4, #16]
 80034bc:	6893      	ldr	r3, [r2, #8]
 80034be:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80034c2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80034c6:	6093      	str	r3, [r2, #8]
 80034c8:	e7e3      	b.n	8003492 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ca:	4b06      	ldr	r3, [pc, #24]	; (80034e4 <HAL_RCC_ClockConfig+0x12c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	039e      	lsls	r6, r3, #14
 80034d0:	d4aa      	bmi.n	8003428 <HAL_RCC_ClockConfig+0x70>
 80034d2:	e7cf      	b.n	8003474 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 80034d4:	2003      	movs	r0, #3
 80034d6:	e7ed      	b.n	80034b4 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d8:	0198      	lsls	r0, r3, #6
 80034da:	d4a5      	bmi.n	8003428 <HAL_RCC_ClockConfig+0x70>
 80034dc:	e7ca      	b.n	8003474 <HAL_RCC_ClockConfig+0xbc>
 80034de:	bf00      	nop
 80034e0:	40023c00 	.word	0x40023c00
 80034e4:	40023800 	.word	0x40023800
 80034e8:	0800970c 	.word	0x0800970c
 80034ec:	20000004 	.word	0x20000004
 80034f0:	2000011c 	.word	0x2000011c

080034f4 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80034f4:	4b01      	ldr	r3, [pc, #4]	; (80034fc <HAL_RCC_GetHCLKFreq+0x8>)
}
 80034f6:	6818      	ldr	r0, [r3, #0]
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	2000011c 	.word	0x2000011c

08003500 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003500:	4b04      	ldr	r3, [pc, #16]	; (8003514 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003502:	4a05      	ldr	r2, [pc, #20]	; (8003518 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003504:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003506:	4905      	ldr	r1, [pc, #20]	; (800351c <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003508:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800350c:	6808      	ldr	r0, [r1, #0]
 800350e:	5cd3      	ldrb	r3, [r2, r3]
}
 8003510:	40d8      	lsrs	r0, r3
 8003512:	4770      	bx	lr
 8003514:	40023800 	.word	0x40023800
 8003518:	0800971c 	.word	0x0800971c
 800351c:	2000011c 	.word	0x2000011c

08003520 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003520:	4b0e      	ldr	r3, [pc, #56]	; (800355c <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003522:	220f      	movs	r2, #15
 8003524:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	f002 0203 	and.w	r2, r2, #3
 800352c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003534:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800353c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	08db      	lsrs	r3, r3, #3
{
 8003542:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003544:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003548:	4c05      	ldr	r4, [pc, #20]	; (8003560 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800354a:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800354c:	6823      	ldr	r3, [r4, #0]
}
 800354e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	600b      	str	r3, [r1, #0]
}
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40023800 	.word	0x40023800
 8003560:	40023c00 	.word	0x40023c00

08003564 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop

08003568 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003568:	2800      	cmp	r0, #0
 800356a:	d05c      	beq.n	8003626 <HAL_TIM_Base_Init+0xbe>
{
 800356c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800356e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003572:	4604      	mov	r4, r0
 8003574:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003578:	b3bb      	cbz	r3, 80035ea <HAL_TIM_Base_Init+0x82>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800357a:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800357c:	4e3a      	ldr	r6, [pc, #232]	; (8003668 <HAL_TIM_Base_Init+0x100>)
 800357e:	69a5      	ldr	r5, [r4, #24]
 8003580:	68e0      	ldr	r0, [r4, #12]
 8003582:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8003584:	2302      	movs	r3, #2
 8003586:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800358a:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 800358c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800358e:	d04c      	beq.n	800362a <HAL_TIM_Base_Init+0xc2>
 8003590:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003594:	d058      	beq.n	8003648 <HAL_TIM_Base_Init+0xe0>
 8003596:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800359a:	42b2      	cmp	r2, r6
 800359c:	d02a      	beq.n	80035f4 <HAL_TIM_Base_Init+0x8c>
 800359e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80035a2:	42b2      	cmp	r2, r6
 80035a4:	d026      	beq.n	80035f4 <HAL_TIM_Base_Init+0x8c>
 80035a6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80035aa:	42b2      	cmp	r2, r6
 80035ac:	d022      	beq.n	80035f4 <HAL_TIM_Base_Init+0x8c>
 80035ae:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80035b2:	42b2      	cmp	r2, r6
 80035b4:	d01e      	beq.n	80035f4 <HAL_TIM_Base_Init+0x8c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035b6:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 80035ba:	42b2      	cmp	r2, r6
 80035bc:	d013      	beq.n	80035e6 <HAL_TIM_Base_Init+0x7e>
 80035be:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80035c2:	42b2      	cmp	r2, r6
 80035c4:	d00f      	beq.n	80035e6 <HAL_TIM_Base_Init+0x7e>
 80035c6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80035ca:	42b2      	cmp	r2, r6
 80035cc:	d00b      	beq.n	80035e6 <HAL_TIM_Base_Init+0x7e>
 80035ce:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 80035d2:	42b2      	cmp	r2, r6
 80035d4:	d007      	beq.n	80035e6 <HAL_TIM_Base_Init+0x7e>
 80035d6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80035da:	42b2      	cmp	r2, r6
 80035dc:	d003      	beq.n	80035e6 <HAL_TIM_Base_Init+0x7e>
 80035de:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80035e2:	42b2      	cmp	r2, r6
 80035e4:	d138      	bne.n	8003658 <HAL_TIM_Base_Init+0xf0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035e6:	6926      	ldr	r6, [r4, #16]
 80035e8:	e033      	b.n	8003652 <HAL_TIM_Base_Init+0xea>
    htim->Lock = HAL_UNLOCKED;
 80035ea:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80035ee:	f7ff ffb9 	bl	8003564 <HAL_TIM_Base_MspInit>
 80035f2:	e7c2      	b.n	800357a <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 80035f4:	68a6      	ldr	r6, [r4, #8]
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035f6:	4f1d      	ldr	r7, [pc, #116]	; (800366c <HAL_TIM_Base_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80035fc:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035fe:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003604:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800360a:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800360c:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 800360e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003610:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003612:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003614:	d101      	bne.n	800361a <HAL_TIM_Base_Init+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003616:	6963      	ldr	r3, [r4, #20]
 8003618:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800361a:	2301      	movs	r3, #1
 800361c:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 800361e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003620:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003626:	2001      	movs	r0, #1
}
 8003628:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800362a:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800362c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800362e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003632:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8003634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003638:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800363a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800363e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003640:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003642:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003644:	6291      	str	r1, [r2, #40]	; 0x28
 8003646:	e7e6      	b.n	8003616 <HAL_TIM_Base_Init+0xae>
    tmpcr1 |= Structure->CounterMode;
 8003648:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800364a:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800364c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003650:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8003652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003656:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003658:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800365c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800365e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003660:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003662:	6291      	str	r1, [r2, #40]	; 0x28
 8003664:	e7d9      	b.n	800361a <HAL_TIM_Base_Init+0xb2>
 8003666:	bf00      	nop
 8003668:	40010000 	.word	0x40010000
 800366c:	40010400 	.word	0x40010400

08003670 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003670:	6803      	ldr	r3, [r0, #0]
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	f042 0201 	orr.w	r2, r2, #1
 8003678:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003680:	2a06      	cmp	r2, #6
 8003682:	d003      	beq.n	800368c <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]
}
 800368c:	2000      	movs	r0, #0
 800368e:	4770      	bx	lr

08003690 <HAL_TIM_OC_DelayElapsedCallback>:
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop

08003694 <HAL_TIM_IC_CaptureCallback>:
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop

08003698 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop

0800369c <HAL_TIM_TriggerCallback>:
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop

080036a0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036a0:	6803      	ldr	r3, [r0, #0]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	0791      	lsls	r1, r2, #30
{
 80036a6:	b510      	push	{r4, lr}
 80036a8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036aa:	d502      	bpl.n	80036b2 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	0792      	lsls	r2, r2, #30
 80036b0:	d45f      	bmi.n	8003772 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	0750      	lsls	r0, r2, #29
 80036b6:	d502      	bpl.n	80036be <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	0751      	lsls	r1, r2, #29
 80036bc:	d446      	bmi.n	800374c <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	0712      	lsls	r2, r2, #28
 80036c2:	d502      	bpl.n	80036ca <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	0710      	lsls	r0, r2, #28
 80036c8:	d42e      	bmi.n	8003728 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	06d2      	lsls	r2, r2, #27
 80036ce:	d502      	bpl.n	80036d6 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	06d0      	lsls	r0, r2, #27
 80036d4:	d418      	bmi.n	8003708 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	07d1      	lsls	r1, r2, #31
 80036da:	d502      	bpl.n	80036e2 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	07d2      	lsls	r2, r2, #31
 80036e0:	d45d      	bmi.n	800379e <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	0610      	lsls	r0, r2, #24
 80036e6:	d502      	bpl.n	80036ee <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	0611      	lsls	r1, r2, #24
 80036ec:	d45f      	bmi.n	80037ae <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	0652      	lsls	r2, r2, #25
 80036f2:	d502      	bpl.n	80036fa <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	0650      	lsls	r0, r2, #25
 80036f8:	d461      	bmi.n	80037be <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036fa:	691a      	ldr	r2, [r3, #16]
 80036fc:	0691      	lsls	r1, r2, #26
 80036fe:	d502      	bpl.n	8003706 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003700:	68da      	ldr	r2, [r3, #12]
 8003702:	0692      	lsls	r2, r2, #26
 8003704:	d443      	bmi.n	800378e <HAL_TIM_IRQHandler+0xee>
}
 8003706:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003708:	f06f 0210 	mvn.w	r2, #16
 800370c:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800370e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003710:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003712:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003716:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003718:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800371a:	d064      	beq.n	80037e6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800371c:	f7ff ffba 	bl	8003694 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003720:	2200      	movs	r2, #0
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	7722      	strb	r2, [r4, #28]
 8003726:	e7d6      	b.n	80036d6 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003728:	f06f 0208 	mvn.w	r2, #8
 800372c:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800372e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003730:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003732:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003734:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003736:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003738:	d152      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800373a:	f7ff ffa9 	bl	8003690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373e:	4620      	mov	r0, r4
 8003740:	f7ff ffaa 	bl	8003698 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003744:	2200      	movs	r2, #0
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	7722      	strb	r2, [r4, #28]
 800374a:	e7be      	b.n	80036ca <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800374c:	f06f 0204 	mvn.w	r2, #4
 8003750:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003752:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003754:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003756:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800375a:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800375c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800375e:	d13c      	bne.n	80037da <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003760:	f7ff ff96 	bl	8003690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003764:	4620      	mov	r0, r4
 8003766:	f7ff ff97 	bl	8003698 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376a:	2200      	movs	r2, #0
 800376c:	6823      	ldr	r3, [r4, #0]
 800376e:	7722      	strb	r2, [r4, #28]
 8003770:	e7a5      	b.n	80036be <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003772:	f06f 0202 	mvn.w	r2, #2
 8003776:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003778:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800377a:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800377c:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800377e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003780:	d025      	beq.n	80037ce <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003782:	f7ff ff87 	bl	8003694 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003786:	2200      	movs	r2, #0
 8003788:	6823      	ldr	r3, [r4, #0]
 800378a:	7722      	strb	r2, [r4, #28]
 800378c:	e791      	b.n	80036b2 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800378e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8003792:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003794:	611a      	str	r2, [r3, #16]
}
 8003796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800379a:	f000 b82b 	b.w	80037f4 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800379e:	f06f 0201 	mvn.w	r2, #1
 80037a2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80037a4:	4620      	mov	r0, r4
 80037a6:	f002 fccd 	bl	8006144 <HAL_TIM_PeriodElapsedCallback>
 80037aa:	6823      	ldr	r3, [r4, #0]
 80037ac:	e799      	b.n	80036e2 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037b2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80037b4:	4620      	mov	r0, r4
 80037b6:	f000 f81f 	bl	80037f8 <HAL_TIMEx_BreakCallback>
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	e797      	b.n	80036ee <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037c2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80037c4:	4620      	mov	r0, r4
 80037c6:	f7ff ff69 	bl	800369c <HAL_TIM_TriggerCallback>
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	e795      	b.n	80036fa <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ce:	f7ff ff5f 	bl	8003690 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d2:	4620      	mov	r0, r4
 80037d4:	f7ff ff60 	bl	8003698 <HAL_TIM_PWM_PulseFinishedCallback>
 80037d8:	e7d5      	b.n	8003786 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 80037da:	f7ff ff5b 	bl	8003694 <HAL_TIM_IC_CaptureCallback>
 80037de:	e7c4      	b.n	800376a <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 80037e0:	f7ff ff58 	bl	8003694 <HAL_TIM_IC_CaptureCallback>
 80037e4:	e7ae      	b.n	8003744 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e6:	f7ff ff53 	bl	8003690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ea:	4620      	mov	r0, r4
 80037ec:	f7ff ff54 	bl	8003698 <HAL_TIM_PWM_PulseFinishedCallback>
 80037f0:	e796      	b.n	8003720 <HAL_TIM_IRQHandler+0x80>
 80037f2:	bf00      	nop

080037f4 <HAL_TIMEx_CommutCallback>:
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop

080037f8 <HAL_TIMEx_BreakCallback>:
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop

080037fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037fc:	b084      	sub	sp, #16
 80037fe:	b430      	push	{r4, r5}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003800:	9d08      	ldr	r5, [sp, #32]
{
 8003802:	ac03      	add	r4, sp, #12
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003804:	2d01      	cmp	r5, #1
{
 8003806:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800380a:	d132      	bne.n	8003872 <USB_CoreInit+0x76>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800380c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 800380e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003814:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003816:	68c3      	ldr	r3, [r0, #12]
 8003818:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800381c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003820:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003822:	68c3      	ldr	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8003824:	2a01      	cmp	r2, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003826:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800382a:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800382c:	d044      	beq.n	80038b8 <USB_CoreInit+0xbc>
{
 800382e:	4b27      	ldr	r3, [pc, #156]	; (80038cc <USB_CoreInit+0xd0>)
 8003830:	e001      	b.n	8003836 <USB_CoreInit+0x3a>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003832:	3b01      	subs	r3, #1
 8003834:	d045      	beq.n	80038c2 <USB_CoreInit+0xc6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003836:	6902      	ldr	r2, [r0, #16]
 8003838:	2a00      	cmp	r2, #0
 800383a:	dafa      	bge.n	8003832 <USB_CoreInit+0x36>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800383c:	6903      	ldr	r3, [r0, #16]
 800383e:	4a23      	ldr	r2, [pc, #140]	; (80038cc <USB_CoreInit+0xd0>)
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	6103      	str	r3, [r0, #16]
 8003846:	e001      	b.n	800384c <USB_CoreInit+0x50>

  do
  {
    if (++count > 200000U)
 8003848:	3a01      	subs	r2, #1
 800384a:	d03a      	beq.n	80038c2 <USB_CoreInit+0xc6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800384c:	6903      	ldr	r3, [r0, #16]
 800384e:	f013 0301 	ands.w	r3, r3, #1
 8003852:	d1f9      	bne.n	8003848 <USB_CoreInit+0x4c>
  if (cfg.dma_enable == 1U)
 8003854:	9a06      	ldr	r2, [sp, #24]
 8003856:	2a01      	cmp	r2, #1
 8003858:	d107      	bne.n	800386a <USB_CoreInit+0x6e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800385a:	6882      	ldr	r2, [r0, #8]
 800385c:	f042 0206 	orr.w	r2, r2, #6
 8003860:	6082      	str	r2, [r0, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003862:	6882      	ldr	r2, [r0, #8]
 8003864:	f042 0220 	orr.w	r2, r2, #32
 8003868:	6082      	str	r2, [r0, #8]
}
 800386a:	bc30      	pop	{r4, r5}
 800386c:	4618      	mov	r0, r3
 800386e:	b004      	add	sp, #16
 8003870:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003872:	68c2      	ldr	r2, [r0, #12]
 8003874:	4b15      	ldr	r3, [pc, #84]	; (80038cc <USB_CoreInit+0xd0>)
 8003876:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800387a:	60c2      	str	r2, [r0, #12]
 800387c:	e001      	b.n	8003882 <USB_CoreInit+0x86>
    if (++count > 200000U)
 800387e:	3b01      	subs	r3, #1
 8003880:	d021      	beq.n	80038c6 <USB_CoreInit+0xca>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003882:	6902      	ldr	r2, [r0, #16]
 8003884:	2a00      	cmp	r2, #0
 8003886:	dafa      	bge.n	800387e <USB_CoreInit+0x82>
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003888:	6903      	ldr	r3, [r0, #16]
 800388a:	4a10      	ldr	r2, [pc, #64]	; (80038cc <USB_CoreInit+0xd0>)
 800388c:	f043 0301 	orr.w	r3, r3, #1
 8003890:	6103      	str	r3, [r0, #16]
 8003892:	e001      	b.n	8003898 <USB_CoreInit+0x9c>
    if (++count > 200000U)
 8003894:	3a01      	subs	r2, #1
 8003896:	d016      	beq.n	80038c6 <USB_CoreInit+0xca>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003898:	6903      	ldr	r3, [r0, #16]
 800389a:	f013 0301 	ands.w	r3, r3, #1
 800389e:	d1f9      	bne.n	8003894 <USB_CoreInit+0x98>
    if (cfg.battery_charging_enable == 0U)
 80038a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80038a2:	b922      	cbnz	r2, 80038ae <USB_CoreInit+0xb2>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038a4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80038a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80038aa:	6382      	str	r2, [r0, #56]	; 0x38
 80038ac:	e7d2      	b.n	8003854 <USB_CoreInit+0x58>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038ae:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80038b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038b4:	6382      	str	r2, [r0, #56]	; 0x38
 80038b6:	e7cd      	b.n	8003854 <USB_CoreInit+0x58>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80038b8:	68c3      	ldr	r3, [r0, #12]
 80038ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038be:	60c3      	str	r3, [r0, #12]
 80038c0:	e7b5      	b.n	800382e <USB_CoreInit+0x32>
      return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e7c6      	b.n	8003854 <USB_CoreInit+0x58>
 80038c6:	2303      	movs	r3, #3
 80038c8:	e7ea      	b.n	80038a0 <USB_CoreInit+0xa4>
 80038ca:	bf00      	nop
 80038cc:	00030d40 	.word	0x00030d40

080038d0 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80038d0:	2a02      	cmp	r2, #2
 80038d2:	d00a      	beq.n	80038ea <USB_SetTurnaroundTime+0x1a>
 80038d4:	f44f 5110 	mov.w	r1, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80038d8:	68c2      	ldr	r2, [r0, #12]
 80038da:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 80038de:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80038e0:	68c3      	ldr	r3, [r0, #12]
 80038e2:	430b      	orrs	r3, r1
 80038e4:	60c3      	str	r3, [r0, #12]
}
 80038e6:	2000      	movs	r0, #0
 80038e8:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80038ea:	4b2d      	ldr	r3, [pc, #180]	; (80039a0 <USB_SetTurnaroundTime+0xd0>)
 80038ec:	4a2d      	ldr	r2, [pc, #180]	; (80039a4 <USB_SetTurnaroundTime+0xd4>)
 80038ee:	440b      	add	r3, r1
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d943      	bls.n	800397c <USB_SetTurnaroundTime+0xac>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80038f4:	4b2c      	ldr	r3, [pc, #176]	; (80039a8 <USB_SetTurnaroundTime+0xd8>)
 80038f6:	4a2d      	ldr	r2, [pc, #180]	; (80039ac <USB_SetTurnaroundTime+0xdc>)
 80038f8:	440b      	add	r3, r1
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d93b      	bls.n	8003976 <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80038fe:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 8003902:	4a2b      	ldr	r2, [pc, #172]	; (80039b0 <USB_SetTurnaroundTime+0xe0>)
 8003904:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8003908:	4293      	cmp	r3, r2
 800390a:	d93a      	bls.n	8003982 <USB_SetTurnaroundTime+0xb2>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800390c:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 8003910:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 8003914:	32a0      	adds	r2, #160	; 0xa0
 8003916:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 800391a:	4293      	cmp	r3, r2
 800391c:	d934      	bls.n	8003988 <USB_SetTurnaroundTime+0xb8>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800391e:	4b25      	ldr	r3, [pc, #148]	; (80039b4 <USB_SetTurnaroundTime+0xe4>)
 8003920:	4a25      	ldr	r2, [pc, #148]	; (80039b8 <USB_SetTurnaroundTime+0xe8>)
 8003922:	440b      	add	r3, r1
 8003924:	4293      	cmp	r3, r2
 8003926:	d932      	bls.n	800398e <USB_SetTurnaroundTime+0xbe>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003928:	4b24      	ldr	r3, [pc, #144]	; (80039bc <USB_SetTurnaroundTime+0xec>)
 800392a:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 800392e:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8003932:	440b      	add	r3, r1
 8003934:	4293      	cmp	r3, r2
 8003936:	d92d      	bls.n	8003994 <USB_SetTurnaroundTime+0xc4>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003938:	4b21      	ldr	r3, [pc, #132]	; (80039c0 <USB_SetTurnaroundTime+0xf0>)
 800393a:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 800393e:	f502 7220 	add.w	r2, r2, #640	; 0x280
 8003942:	440b      	add	r3, r1
 8003944:	4293      	cmp	r3, r2
 8003946:	d9c5      	bls.n	80038d4 <USB_SetTurnaroundTime+0x4>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003948:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 800394c:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 8003950:	f502 7258 	add.w	r2, r2, #864	; 0x360
 8003954:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8003958:	4293      	cmp	r3, r2
 800395a:	d91e      	bls.n	800399a <USB_SetTurnaroundTime+0xca>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800395c:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <USB_SetTurnaroundTime+0xf4>)
 800395e:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
 8003962:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 8003966:	440b      	add	r3, r1
 8003968:	4293      	cmp	r3, r2
 800396a:	bf8c      	ite	hi
 800396c:	f44f 51c0 	movhi.w	r1, #6144	; 0x1800
 8003970:	f44f 51e0 	movls.w	r1, #7168	; 0x1c00
 8003974:	e7b0      	b.n	80038d8 <USB_SetTurnaroundTime+0x8>
 8003976:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800397a:	e7ad      	b.n	80038d8 <USB_SetTurnaroundTime+0x8>
 800397c:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8003980:	e7aa      	b.n	80038d8 <USB_SetTurnaroundTime+0x8>
 8003982:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 8003986:	e7a7      	b.n	80038d8 <USB_SetTurnaroundTime+0x8>
 8003988:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800398c:	e7a4      	b.n	80038d8 <USB_SetTurnaroundTime+0x8>
 800398e:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 8003992:	e7a1      	b.n	80038d8 <USB_SetTurnaroundTime+0x8>
 8003994:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8003998:	e79e      	b.n	80038d8 <USB_SetTurnaroundTime+0x8>
 800399a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800399e:	e79b      	b.n	80038d8 <USB_SetTurnaroundTime+0x8>
 80039a0:	ff275340 	.word	0xff275340
 80039a4:	000c34ff 	.word	0x000c34ff
 80039a8:	ff1b1e40 	.word	0xff1b1e40
 80039ac:	000f423f 	.word	0x000f423f
 80039b0:	00124f7f 	.word	0x00124f7f
 80039b4:	fee5b660 	.word	0xfee5b660
 80039b8:	0016e35f 	.word	0x0016e35f
 80039bc:	feced300 	.word	0xfeced300
 80039c0:	feb35bc0 	.word	0xfeb35bc0
 80039c4:	fe5954e0 	.word	0xfe5954e0

080039c8 <USB_EnableGlobalInt>:
{
 80039c8:	4602      	mov	r2, r0
}
 80039ca:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80039cc:	6893      	ldr	r3, [r2, #8]
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	6093      	str	r3, [r2, #8]
}
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop

080039d8 <USB_DisableGlobalInt>:
{
 80039d8:	4602      	mov	r2, r0
}
 80039da:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80039dc:	6893      	ldr	r3, [r2, #8]
 80039de:	f023 0301 	bic.w	r3, r3, #1
 80039e2:	6093      	str	r3, [r2, #8]
}
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop

080039e8 <USB_SetCurrentMode>:
{
 80039e8:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80039ea:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80039ec:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80039ee:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80039f2:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80039f4:	d00b      	beq.n	8003a0e <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 80039f6:	b941      	cbnz	r1, 8003a0a <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80039f8:	68c3      	ldr	r3, [r0, #12]
 80039fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039fe:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8003a00:	2032      	movs	r0, #50	; 0x32
 8003a02:	f7fc fd99 	bl	8000538 <HAL_Delay>
  return HAL_OK;
 8003a06:	2000      	movs	r0, #0
}
 8003a08:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8003a0a:	2001      	movs	r0, #1
}
 8003a0c:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a0e:	68c3      	ldr	r3, [r0, #12]
 8003a10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a14:	60c3      	str	r3, [r0, #12]
 8003a16:	e7f3      	b.n	8003a00 <USB_SetCurrentMode+0x18>

08003a18 <USB_DevInit>:
{
 8003a18:	b084      	sub	sp, #16
 8003a1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a1e:	ac09      	add	r4, sp, #36	; 0x24
 8003a20:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8003a24:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8003a26:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    USBx->DIEPTXF[i] = 0U;
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
{
 8003a2e:	4603      	mov	r3, r0
    USBx->DIEPTXF[i] = 0U;
 8003a30:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
 8003a34:	460c      	mov	r4, r1
 8003a36:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
 8003a3a:	f8c0 2110 	str.w	r2, [r0, #272]	; 0x110
 8003a3e:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 8003a42:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
 8003a46:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
 8003a4a:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
 8003a4e:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
 8003a52:	f8c0 2128 	str.w	r2, [r0, #296]	; 0x128
 8003a56:	f8c0 212c 	str.w	r2, [r0, #300]	; 0x12c
 8003a5a:	f8c0 2130 	str.w	r2, [r0, #304]	; 0x130
 8003a5e:	f8c0 2134 	str.w	r2, [r0, #308]	; 0x134
 8003a62:	f8c0 2138 	str.w	r2, [r0, #312]	; 0x138
 8003a66:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 8003a6a:	2d00      	cmp	r5, #0
 8003a6c:	f040 809e 	bne.w	8003bac <USB_DevInit+0x194>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003a70:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003a72:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003a76:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003a78:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003a7a:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003a7e:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003a80:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003a82:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a86:	6382      	str	r2, [r0, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003a90:	f8d3 1800 	ldr.w	r1, [r3, #2048]	; 0x800
 8003a94:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a98:	2a01      	cmp	r2, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003a9a:	f503 6700 	add.w	r7, r3, #2048	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a9e:	f000 808e 	beq.w	8003bbe <USB_DevInit+0x1a6>
  USBx_DEVICE->DCFG |= speed;
 8003aa2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8003aa6:	f042 0203 	orr.w	r2, r2, #3
 8003aaa:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003aae:	f44f 6284 	mov.w	r2, #1056	; 0x420
 8003ab2:	611a      	str	r2, [r3, #16]
 8003ab4:	4a55      	ldr	r2, [pc, #340]	; (8003c0c <USB_DevInit+0x1f4>)
 8003ab6:	e002      	b.n	8003abe <USB_DevInit+0xa6>
    if (++count > 200000U)
 8003ab8:	3a01      	subs	r2, #1
 8003aba:	f000 809c 	beq.w	8003bf6 <USB_DevInit+0x1de>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003abe:	6918      	ldr	r0, [r3, #16]
 8003ac0:	f010 0020 	ands.w	r0, r0, #32
 8003ac4:	d1f8      	bne.n	8003ab8 <USB_DevInit+0xa0>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ac6:	2210      	movs	r2, #16
 8003ac8:	611a      	str	r2, [r3, #16]
 8003aca:	4a50      	ldr	r2, [pc, #320]	; (8003c0c <USB_DevInit+0x1f4>)
 8003acc:	e002      	b.n	8003ad4 <USB_DevInit+0xbc>
    if (++count > 200000U)
 8003ace:	3a01      	subs	r2, #1
 8003ad0:	f000 8093 	beq.w	8003bfa <USB_DevInit+0x1e2>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003ad4:	6919      	ldr	r1, [r3, #16]
 8003ad6:	06c9      	lsls	r1, r1, #27
 8003ad8:	d4f9      	bmi.n	8003ace <USB_DevInit+0xb6>
  USBx_DEVICE->DIEPMSK = 0U;
 8003ada:	2100      	movs	r1, #0
 8003adc:	6139      	str	r1, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ade:	6179      	str	r1, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ae0:	61f9      	str	r1, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ae2:	b1f4      	cbz	r4, 8003b22 <USB_DevInit+0x10a>
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ae4:	468e      	mov	lr, r1
 8003ae6:	f503 6210 	add.w	r2, r3, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003aea:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003aee:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003af2:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 8003af6:	e00a      	b.n	8003b0e <USB_DevInit+0xf6>
      USBx_INEP(i)->DIEPCTL = 0U;
 8003af8:	f8c2 e000 	str.w	lr, [r2]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003afc:	3101      	adds	r1, #1
 8003afe:	42a1      	cmp	r1, r4
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b00:	f8c2 e010 	str.w	lr, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b04:	f8c2 8008 	str.w	r8, [r2, #8]
 8003b08:	f102 0220 	add.w	r2, r2, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b0c:	d02f      	beq.n	8003b6e <USB_DevInit+0x156>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b0e:	f8d2 c000 	ldr.w	ip, [r2]
 8003b12:	f1bc 0f00 	cmp.w	ip, #0
 8003b16:	daef      	bge.n	8003af8 <USB_DevInit+0xe0>
      if (i == 0U)
 8003b18:	2900      	cmp	r1, #0
 8003b1a:	d073      	beq.n	8003c04 <USB_DevInit+0x1ec>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b1c:	f8c2 9000 	str.w	r9, [r2]
 8003b20:	e7ec      	b.n	8003afc <USB_DevInit+0xe4>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b22:	693a      	ldr	r2, [r7, #16]
  if (cfg.dma_enable == 1U)
 8003b24:	2e01      	cmp	r6, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b2a:	613a      	str	r2, [r7, #16]
  if (cfg.dma_enable == 1U)
 8003b2c:	d04e      	beq.n	8003bcc <USB_DevInit+0x1b4>
  USBx->GINTMSK = 0U;
 8003b2e:	2100      	movs	r1, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b30:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 8003b34:	6199      	str	r1, [r3, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b36:	615a      	str	r2, [r3, #20]
  if (cfg.dma_enable == 0U)
 8003b38:	b91e      	cbnz	r6, 8003b42 <USB_DevInit+0x12a>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b3a:	699a      	ldr	r2, [r3, #24]
 8003b3c:	f042 0210 	orr.w	r2, r2, #16
 8003b40:	619a      	str	r2, [r3, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b42:	699c      	ldr	r4, [r3, #24]
 8003b44:	4a32      	ldr	r2, [pc, #200]	; (8003c10 <USB_DevInit+0x1f8>)
  if (cfg.Sof_enable != 0U)
 8003b46:	990f      	ldr	r1, [sp, #60]	; 0x3c
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b48:	4322      	orrs	r2, r4
 8003b4a:	619a      	str	r2, [r3, #24]
  if (cfg.Sof_enable != 0U)
 8003b4c:	b119      	cbz	r1, 8003b56 <USB_DevInit+0x13e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b4e:	699a      	ldr	r2, [r3, #24]
 8003b50:	f042 0208 	orr.w	r2, r2, #8
 8003b54:	619a      	str	r2, [r3, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8003b56:	2d01      	cmp	r5, #1
 8003b58:	d105      	bne.n	8003b66 <USB_DevInit+0x14e>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b5a:	699a      	ldr	r2, [r3, #24]
 8003b5c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b60:	f042 0204 	orr.w	r2, r2, #4
 8003b64:	619a      	str	r2, [r3, #24]
}
 8003b66:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b6a:	b004      	add	sp, #16
 8003b6c:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b6e:	2400      	movs	r4, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b70:	46a6      	mov	lr, r4
 8003b72:	f503 6230 	add.w	r2, r3, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b76:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b7a:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b7e:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 8003b82:	e00a      	b.n	8003b9a <USB_DevInit+0x182>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b84:	f8c2 e000 	str.w	lr, [r2]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b88:	3401      	adds	r4, #1
 8003b8a:	428c      	cmp	r4, r1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b8c:	f8c2 e010 	str.w	lr, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b90:	f8c2 8008 	str.w	r8, [r2, #8]
 8003b94:	f102 0220 	add.w	r2, r2, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b98:	d0c3      	beq.n	8003b22 <USB_DevInit+0x10a>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b9a:	f8d2 c000 	ldr.w	ip, [r2]
 8003b9e:	f1bc 0f00 	cmp.w	ip, #0
 8003ba2:	daef      	bge.n	8003b84 <USB_DevInit+0x16c>
      if (i == 0U)
 8003ba4:	b35c      	cbz	r4, 8003bfe <USB_DevInit+0x1e6>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ba6:	f8c2 9000 	str.w	r9, [r2]
 8003baa:	e7ed      	b.n	8003b88 <USB_DevInit+0x170>
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003bac:	6802      	ldr	r2, [r0, #0]
 8003bae:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003bb2:	6002      	str	r2, [r0, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003bb4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003bb6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003bba:	6382      	str	r2, [r0, #56]	; 0x38
 8003bbc:	e764      	b.n	8003a88 <USB_DevInit+0x70>
    if (cfg.speed == USBD_HS_SPEED)
 8003bbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003bc0:	b992      	cbnz	r2, 8003be8 <USB_DevInit+0x1d0>
  USBx_DEVICE->DCFG |= speed;
 8003bc2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8003bc6:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 8003bca:	e770      	b.n	8003aae <USB_DevInit+0x96>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8003bcc:	4a11      	ldr	r2, [pc, #68]	; (8003c14 <USB_DevInit+0x1fc>)
 8003bce:	633a      	str	r2, [r7, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8003bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bd2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003bd6:	f042 0203 	orr.w	r2, r2, #3
 8003bda:	633a      	str	r2, [r7, #48]	; 0x30
  USBx->GINTMSK = 0U;
 8003bdc:	2100      	movs	r1, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003bde:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 8003be2:	6199      	str	r1, [r3, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003be4:	615a      	str	r2, [r3, #20]
 8003be6:	e7ac      	b.n	8003b42 <USB_DevInit+0x12a>
  USBx_DEVICE->DCFG |= speed;
 8003be8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8003bec:	f042 0201 	orr.w	r2, r2, #1
 8003bf0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 8003bf4:	e75b      	b.n	8003aae <USB_DevInit+0x96>
    ret = HAL_ERROR;
 8003bf6:	2001      	movs	r0, #1
 8003bf8:	e765      	b.n	8003ac6 <USB_DevInit+0xae>
    ret = HAL_ERROR;
 8003bfa:	2001      	movs	r0, #1
 8003bfc:	e76d      	b.n	8003ada <USB_DevInit+0xc2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003bfe:	f8c2 a000 	str.w	sl, [r2]
 8003c02:	e7c1      	b.n	8003b88 <USB_DevInit+0x170>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c04:	f8c2 a000 	str.w	sl, [r2]
 8003c08:	e778      	b.n	8003afc <USB_DevInit+0xe4>
 8003c0a:	bf00      	nop
 8003c0c:	00030d40 	.word	0x00030d40
 8003c10:	803c3800 	.word	0x803c3800
 8003c14:	00800100 	.word	0x00800100

08003c18 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c18:	0189      	lsls	r1, r1, #6
 8003c1a:	f041 0120 	orr.w	r1, r1, #32
 8003c1e:	6101      	str	r1, [r0, #16]
 8003c20:	4a05      	ldr	r2, [pc, #20]	; (8003c38 <USB_FlushTxFifo+0x20>)
 8003c22:	e001      	b.n	8003c28 <USB_FlushTxFifo+0x10>
    if (++count > 200000U)
 8003c24:	3a01      	subs	r2, #1
 8003c26:	d005      	beq.n	8003c34 <USB_FlushTxFifo+0x1c>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c28:	6903      	ldr	r3, [r0, #16]
 8003c2a:	f013 0320 	ands.w	r3, r3, #32
 8003c2e:	d1f9      	bne.n	8003c24 <USB_FlushTxFifo+0xc>
  return HAL_OK;
 8003c30:	4618      	mov	r0, r3
 8003c32:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003c34:	2003      	movs	r0, #3
}
 8003c36:	4770      	bx	lr
 8003c38:	00030d40 	.word	0x00030d40

08003c3c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003c3c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003c40:	f013 0006 	ands.w	r0, r3, #6
 8003c44:	d004      	beq.n	8003c50 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003c46:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 8003c4a:	bf14      	ite	ne
 8003c4c:	2002      	movne	r0, #2
 8003c4e:	200f      	moveq	r0, #15
}
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop

08003c54 <USB_ActivateEndpoint>:
{
 8003c54:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 8003c56:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8003c58:	784d      	ldrb	r5, [r1, #1]
 8003c5a:	f002 040f 	and.w	r4, r2, #15
 8003c5e:	2301      	movs	r3, #1
 8003c60:	2d01      	cmp	r5, #1
 8003c62:	fa03 f304 	lsl.w	r3, r3, r4
 8003c66:	eb00 1442 	add.w	r4, r0, r2, lsl #5
 8003c6a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8003c6e:	d019      	beq.n	8003ca4 <USB_ActivateEndpoint+0x50>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003c70:	69c2      	ldr	r2, [r0, #28]
 8003c72:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8003c76:	61c3      	str	r3, [r0, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003c78:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8003c7c:	041b      	lsls	r3, r3, #16
 8003c7e:	d40e      	bmi.n	8003c9e <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c80:	688a      	ldr	r2, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 8003c82:	78c8      	ldrb	r0, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c84:	f8d4 1b00 	ldr.w	r1, [r4, #2816]	; 0xb00
 8003c88:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003c8c:	f042 5380 	orr.w	r3, r2, #268435456	; 0x10000000
 8003c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c94:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	bc30      	pop	{r4, r5}
 8003ca2:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003ca4:	69c5      	ldr	r5, [r0, #28]
 8003ca6:	432b      	orrs	r3, r5
 8003ca8:	61c3      	str	r3, [r0, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003caa:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8003cae:	0418      	lsls	r0, r3, #16
 8003cb0:	d4f5      	bmi.n	8003c9e <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cb2:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003cb4:	78c8      	ldrb	r0, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cb6:	f8d4 1900 	ldr.w	r1, [r4, #2304]	; 0x900
 8003cba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cc6:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 8003cca:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
}
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	bc30      	pop	{r4, r5}
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop

08003cdc <USB_DeactivateEndpoint>:
{
 8003cdc:	b410      	push	{r4}
  uint32_t epnum = (uint32_t)ep->num;
 8003cde:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8003ce0:	7849      	ldrb	r1, [r1, #1]
 8003ce2:	f002 040f 	and.w	r4, r2, #15
 8003ce6:	eb00 1242 	add.w	r2, r0, r2, lsl #5
 8003cea:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8003cee:	2301      	movs	r3, #1
 8003cf0:	2901      	cmp	r1, #1
 8003cf2:	fa03 f304 	lsl.w	r3, r3, r4
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003cf6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  if (ep->is_in == 1U)
 8003cf8:	d010      	beq.n	8003d1c <USB_DeactivateEndpoint+0x40>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003cfa:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8003cfe:	401c      	ands	r4, r3
 8003d00:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d02:	69c4      	ldr	r4, [r0, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003d04:	490d      	ldr	r1, [pc, #52]	; (8003d3c <USB_DeactivateEndpoint+0x60>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d06:	4023      	ands	r3, r4
 8003d08:	61c3      	str	r3, [r0, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003d0a:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
}
 8003d0e:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003d12:	4019      	ands	r1, r3
}
 8003d14:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003d16:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 8003d1a:	4770      	bx	lr
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	401c      	ands	r4, r3
 8003d20:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d22:	69c4      	ldr	r4, [r0, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003d24:	4906      	ldr	r1, [pc, #24]	; (8003d40 <USB_DeactivateEndpoint+0x64>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d26:	4023      	ands	r3, r4
 8003d28:	61c3      	str	r3, [r0, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003d2a:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
}
 8003d2e:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003d32:	4019      	ands	r1, r3
}
 8003d34:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003d36:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
}
 8003d3a:	4770      	bx	lr
 8003d3c:	eff37800 	.word	0xeff37800
 8003d40:	ec337800 	.word	0xec337800

08003d44 <USB_EPStartXfer>:
{
 8003d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 8003d48:	f891 c001 	ldrb.w	ip, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8003d4c:	780e      	ldrb	r6, [r1, #0]
 8003d4e:	694b      	ldr	r3, [r1, #20]
 8003d50:	78cf      	ldrb	r7, [r1, #3]
  if (ep->is_in == 1U)
 8003d52:	f1bc 0f01 	cmp.w	ip, #1
 8003d56:	eb00 1546 	add.w	r5, r0, r6, lsl #5
 8003d5a:	d04e      	beq.n	8003dfa <USB_EPStartXfer+0xb6>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d5c:	f505 6430 	add.w	r4, r5, #2816	; 0xb00
 8003d60:	6926      	ldr	r6, [r4, #16]
 8003d62:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8003d66:	0cf6      	lsrs	r6, r6, #19
 8003d68:	04f6      	lsls	r6, r6, #19
 8003d6a:	6126      	str	r6, [r4, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003d6c:	6926      	ldr	r6, [r4, #16]
 8003d6e:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8003d72:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8003d76:	6126      	str	r6, [r4, #16]
    if (ep->xfer_len == 0U)
 8003d78:	b37b      	cbz	r3, 8003dda <USB_EPStartXfer+0x96>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003d7a:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 8003f64 <USB_EPStartXfer+0x220>
 8003d7e:	f8d4 8010 	ldr.w	r8, [r4, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003d82:	eb03 060c 	add.w	r6, r3, ip
 8003d86:	3e01      	subs	r6, #1
 8003d88:	fbb6 f6fc 	udiv	r6, r6, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003d8c:	ea0e 43c6 	and.w	r3, lr, r6, lsl #19
 8003d90:	ea43 0308 	orr.w	r3, r3, r8
 8003d94:	6123      	str	r3, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003d96:	b2b6      	uxth	r6, r6
 8003d98:	fb0c f306 	mul.w	r3, ip, r6
 8003d9c:	6926      	ldr	r6, [r4, #16]
 8003d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da2:	4333      	orrs	r3, r6
    if (dma == 1U)
 8003da4:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003da6:	6123      	str	r3, [r4, #16]
    if (dma == 1U)
 8003da8:	d022      	beq.n	8003df0 <USB_EPStartXfer+0xac>
    if (ep->type == EP_TYPE_ISOC)
 8003daa:	2f01      	cmp	r7, #1
 8003dac:	d10c      	bne.n	8003dc8 <USB_EPStartXfer+0x84>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003dae:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8003db2:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003db6:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 8003dba:	bf0c      	ite	eq
 8003dbc:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003dc0:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8003dc4:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003dc8:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 8003dcc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003dd0:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
}
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003dda:	6926      	ldr	r6, [r4, #16]
 8003ddc:	f3cc 0312 	ubfx	r3, ip, #0, #19
 8003de0:	4333      	orrs	r3, r6
 8003de2:	6123      	str	r3, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003de4:	6923      	ldr	r3, [r4, #16]
    if (dma == 1U)
 8003de6:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003de8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003dec:	6123      	str	r3, [r4, #16]
    if (dma == 1U)
 8003dee:	d1dc      	bne.n	8003daa <USB_EPStartXfer+0x66>
      if ((uint32_t)ep->xfer_buff != 0U)
 8003df0:	68cb      	ldr	r3, [r1, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0d9      	beq.n	8003daa <USB_EPStartXfer+0x66>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003df6:	6163      	str	r3, [r4, #20]
 8003df8:	e7d7      	b.n	8003daa <USB_EPStartXfer+0x66>
 8003dfa:	f505 6410 	add.w	r4, r5, #2304	; 0x900
    if (ep->xfer_len == 0U)
 8003dfe:	b3f3      	cbz	r3, 8003e7e <USB_EPStartXfer+0x13a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e00:	f8d4 8010 	ldr.w	r8, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003e04:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8003e08:	f8df e158 	ldr.w	lr, [pc, #344]	; 8003f64 <USB_EPStartXfer+0x220>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e0c:	ea4f 48d8 	mov.w	r8, r8, lsr #19
 8003e10:	ea4f 48c8 	mov.w	r8, r8, lsl #19
 8003e14:	f8c4 8010 	str.w	r8, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e18:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8003e1c:	f028 58ff 	bic.w	r8, r8, #534773760	; 0x1fe00000
 8003e20:	f428 18c0 	bic.w	r8, r8, #1572864	; 0x180000
 8003e24:	f8c4 8010 	str.w	r8, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003e28:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8003e2c:	eb0a 0803 	add.w	r8, sl, r3
 8003e30:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003e34:	fbb8 f8fa 	udiv	r8, r8, sl
 8003e38:	ea0e 4ec8 	and.w	lr, lr, r8, lsl #19
 8003e3c:	ea4e 0e09 	orr.w	lr, lr, r9
 8003e40:	f8c4 e010 	str.w	lr, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003e44:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8003e48:	f3c3 0e12 	ubfx	lr, r3, #0, #19
 8003e4c:	ea4e 0e08 	orr.w	lr, lr, r8
      if (ep->type == EP_TYPE_ISOC)
 8003e50:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003e52:	f8c4 e010 	str.w	lr, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8003e56:	d054      	beq.n	8003f02 <USB_EPStartXfer+0x1be>
    if (dma == 1U)
 8003e58:	2a01      	cmp	r2, #1
 8003e5a:	d060      	beq.n	8003f1e <USB_EPStartXfer+0x1da>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e5c:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
 8003e60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e64:	f8c5 3900 	str.w	r3, [r5, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003e68:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8003e6c:	f006 060f 	and.w	r6, r6, #15
 8003e70:	fa0c fc06 	lsl.w	ip, ip, r6
 8003e74:	ea4c 0303 	orr.w	r3, ip, r3
 8003e78:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
  return HAL_OK;
 8003e7c:	e7aa      	b.n	8003dd4 <USB_EPStartXfer+0x90>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e7e:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8003e82:	f02c 5cff 	bic.w	ip, ip, #534773760	; 0x1fe00000
 8003e86:	f42c 1cc0 	bic.w	ip, ip, #1572864	; 0x180000
 8003e8a:	f8c4 c010 	str.w	ip, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e8e:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8003e92:	f44c 2c00 	orr.w	ip, ip, #524288	; 0x80000
 8003e96:	f8c4 c010 	str.w	ip, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e9a:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8003e9e:	ea4f 4cdc 	mov.w	ip, ip, lsr #19
 8003ea2:	ea4f 4ccc 	mov.w	ip, ip, lsl #19
    if (dma == 1U)
 8003ea6:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ea8:	f8c4 c010 	str.w	ip, [r4, #16]
    if (dma == 1U)
 8003eac:	d037      	beq.n	8003f1e <USB_EPStartXfer+0x1da>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003eae:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8003eb2:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003eb4:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8003eb8:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8003ebc:	d18a      	bne.n	8003dd4 <USB_EPStartXfer+0x90>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ebe:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8003ec2:	f414 7f80 	tst.w	r4, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003ec6:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
 8003eca:	bf0c      	ite	eq
 8003ecc:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003ed0:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 8003ed4:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
  if (dma == 0U)
 8003ed8:	2a00      	cmp	r2, #0
 8003eda:	f47f af7b 	bne.w	8003dd4 <USB_EPStartXfer+0x90>
    count32b = ((uint32_t)len + 3U) / 4U;
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8003ee2:	089a      	lsrs	r2, r3, #2
 8003ee4:	f43f af76 	beq.w	8003dd4 <USB_EPStartXfer+0x90>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003ee8:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003eea:	eb00 3006 	add.w	r0, r0, r6, lsl #12
 8003eee:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8003ef2:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8003ef6:	f853 1b04 	ldr.w	r1, [r3], #4
 8003efa:	6001      	str	r1, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d1fa      	bne.n	8003ef6 <USB_EPStartXfer+0x1b2>
 8003f00:	e768      	b.n	8003dd4 <USB_EPStartXfer+0x90>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003f02:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8003f06:	f02c 4cc0 	bic.w	ip, ip, #1610612736	; 0x60000000
 8003f0a:	f8c4 c010 	str.w	ip, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003f0e:	f8d4 c010 	ldr.w	ip, [r4, #16]
    if (dma == 1U)
 8003f12:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003f14:	f04c 5c00 	orr.w	ip, ip, #536870912	; 0x20000000
 8003f18:	f8c4 c010 	str.w	ip, [r4, #16]
    if (dma == 1U)
 8003f1c:	d11a      	bne.n	8003f54 <USB_EPStartXfer+0x210>
      if ((uint32_t)ep->dma_addr != 0U)
 8003f1e:	690b      	ldr	r3, [r1, #16]
 8003f20:	b103      	cbz	r3, 8003f24 <USB_EPStartXfer+0x1e0>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003f22:	6163      	str	r3, [r4, #20]
      if (ep->type == EP_TYPE_ISOC)
 8003f24:	2f01      	cmp	r7, #1
 8003f26:	d10c      	bne.n	8003f42 <USB_EPStartXfer+0x1fe>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f28:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8003f2c:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f30:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
 8003f34:	bf0c      	ite	eq
 8003f36:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f3a:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8003f3e:	f8c5 3900 	str.w	r3, [r5, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f42:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
 8003f46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f4a:	f8c5 3900 	str.w	r3, [r5, #2304]	; 0x900
}
 8003f4e:	2000      	movs	r0, #0
 8003f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f54:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
 8003f58:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8003f5c:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
 8003f60:	e7ad      	b.n	8003ebe <USB_EPStartXfer+0x17a>
 8003f62:	bf00      	nop
 8003f64:	1ff80000 	.word	0x1ff80000

08003f68 <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 8003f68:	784b      	ldrb	r3, [r1, #1]
{
 8003f6a:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t epnum = (uint32_t)ep->num;
 8003f6c:	780d      	ldrb	r5, [r1, #0]
 8003f6e:	694e      	ldr	r6, [r1, #20]
  if (ep->is_in == 1U)
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	eb00 1445 	add.w	r4, r0, r5, lsl #5
 8003f76:	d027      	beq.n	8003fc8 <USB_EP0StartXfer+0x60>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f78:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8003f7c:	691d      	ldr	r5, [r3, #16]
 8003f7e:	6888      	ldr	r0, [r1, #8]
 8003f80:	0ced      	lsrs	r5, r5, #19
 8003f82:	04ed      	lsls	r5, r5, #19
 8003f84:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003f86:	691d      	ldr	r5, [r3, #16]
 8003f88:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8003f8c:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8003f90:	611d      	str	r5, [r3, #16]
    if (ep->xfer_len > 0U)
 8003f92:	b106      	cbz	r6, 8003f96 <USB_EP0StartXfer+0x2e>
      ep->xfer_len = ep->maxpacket;
 8003f94:	6148      	str	r0, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003f96:	691d      	ldr	r5, [r3, #16]
 8003f98:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8003f9c:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003f9e:	691d      	ldr	r5, [r3, #16]
 8003fa0:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8003fa4:	4328      	orrs	r0, r5
    if (dma == 1U)
 8003fa6:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003fa8:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 8003faa:	d008      	beq.n	8003fbe <USB_EP0StartXfer+0x56>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003fac:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8003fb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003fb4:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 8003fb8:	2000      	movs	r0, #0
 8003fba:	bcf0      	pop	{r4, r5, r6, r7}
 8003fbc:	4770      	bx	lr
      if ((uint32_t)ep->xfer_buff != 0U)
 8003fbe:	68ca      	ldr	r2, [r1, #12]
 8003fc0:	2a00      	cmp	r2, #0
 8003fc2:	d0f3      	beq.n	8003fac <USB_EP0StartXfer+0x44>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003fc4:	615a      	str	r2, [r3, #20]
 8003fc6:	e7f1      	b.n	8003fac <USB_EP0StartXfer+0x44>
 8003fc8:	f504 6310 	add.w	r3, r4, #2304	; 0x900
    if (ep->xfer_len == 0U)
 8003fcc:	b39e      	cbz	r6, 8004036 <USB_EP0StartXfer+0xce>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fce:	691f      	ldr	r7, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8003fd0:	f8d1 c008 	ldr.w	ip, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fd4:	0cff      	lsrs	r7, r7, #19
 8003fd6:	04ff      	lsls	r7, r7, #19
 8003fd8:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fda:	691f      	ldr	r7, [r3, #16]
 8003fdc:	f027 57ff 	bic.w	r7, r7, #534773760	; 0x1fe00000
 8003fe0:	f427 17c0 	bic.w	r7, r7, #1572864	; 0x180000
 8003fe4:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fe6:	691f      	ldr	r7, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8003fe8:	45b4      	cmp	ip, r6
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fea:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
        ep->xfer_len = ep->maxpacket;
 8003fee:	bf38      	it	cc
 8003ff0:	f8c1 c014 	strcc.w	ip, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003ff4:	611f      	str	r7, [r3, #16]
        ep->xfer_len = ep->maxpacket;
 8003ff6:	bf38      	it	cc
 8003ff8:	4666      	movcc	r6, ip
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003ffa:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8003ffe:	f3c6 0712 	ubfx	r7, r6, #0, #19
 8004002:	ea47 070c 	orr.w	r7, r7, ip
    if (dma == 1U)
 8004006:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004008:	611f      	str	r7, [r3, #16]
    if (dma == 1U)
 800400a:	d02d      	beq.n	8004068 <USB_EP0StartXfer+0x100>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800400c:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8004010:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004014:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8004018:	2e00      	cmp	r6, #0
 800401a:	d0cd      	beq.n	8003fb8 <USB_EP0StartXfer+0x50>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800401c:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8004020:	f005 050f 	and.w	r5, r5, #15
 8004024:	2301      	movs	r3, #1
 8004026:	fa03 f505 	lsl.w	r5, r3, r5
 800402a:	4315      	orrs	r5, r2
 800402c:	f8c0 5834 	str.w	r5, [r0, #2100]	; 0x834
}
 8004030:	2000      	movs	r0, #0
 8004032:	bcf0      	pop	{r4, r5, r6, r7}
 8004034:	4770      	bx	lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004036:	6918      	ldr	r0, [r3, #16]
 8004038:	f020 50ff 	bic.w	r0, r0, #534773760	; 0x1fe00000
 800403c:	f420 10c0 	bic.w	r0, r0, #1572864	; 0x180000
 8004040:	6118      	str	r0, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004042:	6918      	ldr	r0, [r3, #16]
 8004044:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8004048:	6118      	str	r0, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800404a:	6918      	ldr	r0, [r3, #16]
 800404c:	0cc0      	lsrs	r0, r0, #19
 800404e:	04c0      	lsls	r0, r0, #19
    if (dma == 1U)
 8004050:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004052:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 8004054:	d008      	beq.n	8004068 <USB_EP0StartXfer+0x100>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004056:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800405a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800405e:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 8004062:	2000      	movs	r0, #0
 8004064:	bcf0      	pop	{r4, r5, r6, r7}
 8004066:	4770      	bx	lr
      if ((uint32_t)ep->dma_addr != 0U)
 8004068:	690a      	ldr	r2, [r1, #16]
 800406a:	2a00      	cmp	r2, #0
 800406c:	d0f3      	beq.n	8004056 <USB_EP0StartXfer+0xee>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800406e:	615a      	str	r2, [r3, #20]
 8004070:	e7f1      	b.n	8004056 <USB_EP0StartXfer+0xee>
 8004072:	bf00      	nop

08004074 <USB_WritePacket>:
{
 8004074:	b410      	push	{r4}
 8004076:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 800407a:	b96c      	cbnz	r4, 8004098 <USB_WritePacket+0x24>
    count32b = ((uint32_t)len + 3U) / 4U;
 800407c:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800407e:	089b      	lsrs	r3, r3, #2
 8004080:	d00a      	beq.n	8004098 <USB_WritePacket+0x24>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004082:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8004086:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800408a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800408e:	f851 2b04 	ldr.w	r2, [r1], #4
 8004092:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8004094:	428b      	cmp	r3, r1
 8004096:	d1fa      	bne.n	800408e <USB_WritePacket+0x1a>
}
 8004098:	2000      	movs	r0, #0
 800409a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80040a0:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 80040a2:	0892      	lsrs	r2, r2, #2
 80040a4:	d00d      	beq.n	80040c2 <USB_ReadPacket+0x22>
{
 80040a6:	b410      	push	{r4}
 80040a8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80040ac:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
  uint32_t *pDest = (uint32_t *)dest;
 80040b0:	4608      	mov	r0, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	f840 3b04 	str.w	r3, [r0], #4
  for (i = 0U; i < count32b; i++)
 80040b8:	4282      	cmp	r2, r0
 80040ba:	d1fa      	bne.n	80040b2 <USB_ReadPacket+0x12>
}
 80040bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040c0:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 80040c2:	4608      	mov	r0, r1
}
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop

080040c8 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 80040c8:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80040ca:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80040cc:	2a01      	cmp	r2, #1
 80040ce:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80040d2:	d012      	beq.n	80040fa <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80040d4:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80040d8:	2a00      	cmp	r2, #0
 80040da:	db06      	blt.n	80040ea <USB_EPSetStall+0x22>
 80040dc:	b12b      	cbz	r3, 80040ea <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80040de:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80040e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040e6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80040ea:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80040ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040f2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80040f6:	2000      	movs	r0, #0
 80040f8:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80040fa:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80040fe:	2a00      	cmp	r2, #0
 8004100:	db06      	blt.n	8004110 <USB_EPSetStall+0x48>
 8004102:	b12b      	cbz	r3, 8004110 <USB_EPSetStall+0x48>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004104:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004108:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800410c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004110:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004114:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004118:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800411c:	2000      	movs	r0, #0
 800411e:	4770      	bx	lr

08004120 <USB_EPClearStall>:
{
 8004120:	78cb      	ldrb	r3, [r1, #3]
 8004122:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8004124:	7849      	ldrb	r1, [r1, #1]
 8004126:	3b02      	subs	r3, #2
 8004128:	2901      	cmp	r1, #1
 800412a:	b2db      	uxtb	r3, r3
 800412c:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8004130:	d011      	beq.n	8004156 <USB_EPClearStall+0x36>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004132:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004136:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004138:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800413c:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004140:	d901      	bls.n	8004146 <USB_EPClearStall+0x26>
}
 8004142:	2000      	movs	r0, #0
 8004144:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004146:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800414a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800414e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8004152:	2000      	movs	r0, #0
 8004154:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004156:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800415a:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800415c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8004160:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004164:	d8ed      	bhi.n	8004142 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004166:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800416a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800416e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8004172:	2000      	movs	r0, #0
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop

08004178 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004178:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800417c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004180:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004184:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004188:	0109      	lsls	r1, r1, #4
 800418a:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 800418e:	4319      	orrs	r1, r3
 8004190:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8004194:	2000      	movs	r0, #0
 8004196:	4770      	bx	lr

08004198 <USB_DevConnect>:
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004198:	f500 6200 	add.w	r2, r0, #2048	; 0x800
{
 800419c:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800419e:	6853      	ldr	r3, [r2, #4]
 80041a0:	f023 0302 	bic.w	r3, r3, #2
  HAL_Delay(3U);
 80041a4:	2003      	movs	r0, #3
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80041a6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80041a8:	f7fc f9c6 	bl	8000538 <HAL_Delay>
}
 80041ac:	2000      	movs	r0, #0
 80041ae:	bd08      	pop	{r3, pc}

080041b0 <USB_DevDisconnect>:
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041b0:	f500 6200 	add.w	r2, r0, #2048	; 0x800
{
 80041b4:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041b6:	6853      	ldr	r3, [r2, #4]
 80041b8:	f043 0302 	orr.w	r3, r3, #2
  HAL_Delay(3U);
 80041bc:	2003      	movs	r0, #3
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041be:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80041c0:	f7fc f9ba 	bl	8000538 <HAL_Delay>
}
 80041c4:	2000      	movs	r0, #0
 80041c6:	bd08      	pop	{r3, pc}

080041c8 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80041c8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80041ca:	6980      	ldr	r0, [r0, #24]
}
 80041cc:	4010      	ands	r0, r2
 80041ce:	4770      	bx	lr

080041d0 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80041d0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80041d4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80041d8:	69c0      	ldr	r0, [r0, #28]
 80041da:	4018      	ands	r0, r3
}
 80041dc:	0c00      	lsrs	r0, r0, #16
 80041de:	4770      	bx	lr

080041e0 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80041e0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80041e4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80041e8:	69c0      	ldr	r0, [r0, #28]
 80041ea:	4018      	ands	r0, r3
}
 80041ec:	b280      	uxth	r0, r0
 80041ee:	4770      	bx	lr

080041f0 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80041f0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80041f4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80041f8:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80041fc:	6940      	ldr	r0, [r0, #20]
}
 80041fe:	4010      	ands	r0, r2
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop

08004204 <USB_ReadDevInEPInterrupt>:
{
 8004204:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 8004206:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800420a:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800420e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004212:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004216:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800421a:	40cb      	lsrs	r3, r1
 800421c:	01db      	lsls	r3, r3, #7
 800421e:	b2db      	uxtb	r3, r3
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004220:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004222:	4323      	orrs	r3, r4
}
 8004224:	4018      	ands	r0, r3
 8004226:	f85d 4b04 	ldr.w	r4, [sp], #4
 800422a:	4770      	bx	lr

0800422c <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800422c:	6940      	ldr	r0, [r0, #20]
}
 800422e:	f000 0001 	and.w	r0, r0, #1
 8004232:	4770      	bx	lr

08004234 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004234:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004238:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800423c:	f023 0307 	bic.w	r3, r3, #7
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8004240:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004244:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8004248:	6893      	ldr	r3, [r2, #8]
 800424a:	f003 0306 	and.w	r3, r3, #6
 800424e:	2b04      	cmp	r3, #4
 8004250:	d105      	bne.n	800425e <USB_ActivateSetup+0x2a>
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8004252:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004256:	f043 0303 	orr.w	r3, r3, #3
 800425a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800425e:	6853      	ldr	r3, [r2, #4]
 8004260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004264:	6053      	str	r3, [r2, #4]
}
 8004266:	2000      	movs	r0, #0
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop

0800426c <USB_EP0_OutStart>:
{
 800426c:	b430      	push	{r4, r5}
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800426e:	4c12      	ldr	r4, [pc, #72]	; (80042b8 <USB_EP0_OutStart+0x4c>)
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004270:	6c05      	ldr	r5, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004272:	42a5      	cmp	r5, r4
 8004274:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8004278:	d903      	bls.n	8004282 <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800427a:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 800427e:	2c00      	cmp	r4, #0
 8004280:	db16      	blt.n	80042b0 <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004282:	2400      	movs	r4, #0
 8004284:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004286:	691c      	ldr	r4, [r3, #16]
 8004288:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800428c:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800428e:	691c      	ldr	r4, [r3, #16]
 8004290:	f044 0418 	orr.w	r4, r4, #24
 8004294:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004296:	691c      	ldr	r4, [r3, #16]
  if (dma == 1U)
 8004298:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800429a:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 800429e:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 80042a0:	d106      	bne.n	80042b0 <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80042a2:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80042a4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80042a8:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80042ac:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80042b0:	2000      	movs	r0, #0
 80042b2:	bc30      	pop	{r4, r5}
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	4f54300a 	.word	0x4f54300a

080042bc <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80042bc:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80042c0:	b183      	cbz	r3, 80042e4 <USBD_CDC_EP0_RxReady+0x28>
{
 80042c2:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80042c4:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80042c8:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80042cc:	28ff      	cmp	r0, #255	; 0xff
 80042ce:	d007      	beq.n	80042e0 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80042d6:	4621      	mov	r1, r4
 80042d8:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 80042da:	23ff      	movs	r3, #255	; 0xff
 80042dc:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 80042e0:	2000      	movs	r0, #0
 80042e2:	bd10      	pop	{r4, pc}
 80042e4:	2000      	movs	r0, #0
 80042e6:	4770      	bx	lr

080042e8 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80042e8:	2343      	movs	r3, #67	; 0x43
 80042ea:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80042ec:	4800      	ldr	r0, [pc, #0]	; (80042f0 <USBD_CDC_GetFSCfgDesc+0x8>)
 80042ee:	4770      	bx	lr
 80042f0:	20000040 	.word	0x20000040

080042f4 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80042f4:	2343      	movs	r3, #67	; 0x43
 80042f6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80042f8:	4800      	ldr	r0, [pc, #0]	; (80042fc <USBD_CDC_GetHSCfgDesc+0x8>)
 80042fa:	4770      	bx	lr
 80042fc:	20000084 	.word	0x20000084

08004300 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8004300:	2343      	movs	r3, #67	; 0x43
 8004302:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8004304:	4800      	ldr	r0, [pc, #0]	; (8004308 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8004306:	4770      	bx	lr
 8004308:	200000d4 	.word	0x200000d4

0800430c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800430c:	230a      	movs	r3, #10
 800430e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8004310:	4800      	ldr	r0, [pc, #0]	; (8004314 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8004312:	4770      	bx	lr
 8004314:	200000c8 	.word	0x200000c8

08004318 <USBD_CDC_DataOut>:
{
 8004318:	b538      	push	{r3, r4, r5, lr}
 800431a:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800431c:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004320:	f002 fc84 	bl	8006c2c <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8004324:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004328:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 800432c:	b14b      	cbz	r3, 8004342 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800432e:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8004332:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800433c:	4798      	blx	r3
    return USBD_OK;
 800433e:	2000      	movs	r0, #0
}
 8004340:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8004342:	2002      	movs	r0, #2
}
 8004344:	bd38      	pop	{r3, r4, r5, pc}
 8004346:	bf00      	nop

08004348 <USBD_CDC_DataIn>:
{
 8004348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800434a:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if(pdev->pClassData != NULL)
 800434e:	b1e6      	cbz	r6, 800438a <USBD_CDC_DataIn+0x42>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004350:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8004354:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004358:	69d7      	ldr	r7, [r2, #28]
 800435a:	b15f      	cbz	r7, 8004374 <USBD_CDC_DataIn+0x2c>
 800435c:	f8d0 4298 	ldr.w	r4, [r0, #664]	; 0x298
 8004360:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8004364:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	fbb7 f4f3 	udiv	r4, r7, r3
 800436e:	fb03 7414 	mls	r4, r3, r4, r7
 8004372:	b11c      	cbz	r4, 800437c <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 8004374:	2000      	movs	r0, #0
 8004376:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
}
 800437a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pdev->ep_in[epnum].total_length = 0U;
 800437c:	61d4      	str	r4, [r2, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800437e:	4623      	mov	r3, r4
 8004380:	4622      	mov	r2, r4
 8004382:	f002 fc37 	bl	8006bf4 <USBD_LL_Transmit>
    return USBD_OK;
 8004386:	4620      	mov	r0, r4
}
 8004388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 800438a:	2002      	movs	r0, #2
}
 800438c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800438e:	bf00      	nop

08004390 <USBD_CDC_Setup>:
{
 8004390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004394:	780b      	ldrb	r3, [r1, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004396:	f8d0 8290 	ldr.w	r8, [r0, #656]	; 0x290
{
 800439a:	b082      	sub	sp, #8
  uint8_t ifalt = 0U;
 800439c:	2700      	movs	r7, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800439e:	f013 0460 	ands.w	r4, r3, #96	; 0x60
{
 80043a2:	460d      	mov	r5, r1
 80043a4:	4606      	mov	r6, r0
  uint8_t ifalt = 0U;
 80043a6:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 80043aa:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80043ae:	d00f      	beq.n	80043d0 <USBD_CDC_Setup+0x40>
 80043b0:	2c20      	cmp	r4, #32
 80043b2:	d117      	bne.n	80043e4 <USBD_CDC_Setup+0x54>
    if (req->wLength)
 80043b4:	88cc      	ldrh	r4, [r1, #6]
 80043b6:	f891 c001 	ldrb.w	ip, [r1, #1]
 80043ba:	bb64      	cbnz	r4, 8004416 <USBD_CDC_Setup+0x86>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80043bc:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80043c0:	4622      	mov	r2, r4
 80043c2:	4660      	mov	r0, ip
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 80043c8:	4620      	mov	r0, r4
}
 80043ca:	b002      	add	sp, #8
 80043cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 80043d0:	784f      	ldrb	r7, [r1, #1]
 80043d2:	2f0a      	cmp	r7, #10
 80043d4:	d014      	beq.n	8004400 <USBD_CDC_Setup+0x70>
 80043d6:	2f0b      	cmp	r7, #11
 80043d8:	d00c      	beq.n	80043f4 <USBD_CDC_Setup+0x64>
 80043da:	b91f      	cbnz	r7, 80043e4 <USBD_CDC_Setup+0x54>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80043dc:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d028      	beq.n	8004436 <USBD_CDC_Setup+0xa6>
      USBD_CtlError (pdev, req);
 80043e4:	4630      	mov	r0, r6
 80043e6:	4629      	mov	r1, r5
 80043e8:	f000 fcb0 	bl	8004d4c <USBD_CtlError>
      ret = USBD_FAIL;
 80043ec:	2002      	movs	r0, #2
}
 80043ee:	b002      	add	sp, #8
 80043f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80043f4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80043f8:	2b03      	cmp	r3, #3
 80043fa:	d1f3      	bne.n	80043e4 <USBD_CDC_Setup+0x54>
  uint8_t ret = USBD_OK;
 80043fc:	4620      	mov	r0, r4
 80043fe:	e7f6      	b.n	80043ee <USBD_CDC_Setup+0x5e>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004400:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004404:	2b03      	cmp	r3, #3
 8004406:	d1ed      	bne.n	80043e4 <USBD_CDC_Setup+0x54>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8004408:	2201      	movs	r2, #1
 800440a:	f10d 0105 	add.w	r1, sp, #5
 800440e:	f000 fccf 	bl	8004db0 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8004412:	4620      	mov	r0, r4
 8004414:	e7eb      	b.n	80043ee <USBD_CDC_Setup+0x5e>
      if (req->bmRequest & 0x80U)
 8004416:	061b      	lsls	r3, r3, #24
 8004418:	d514      	bpl.n	8004444 <USBD_CDC_Setup+0xb4>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800441a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800441e:	4622      	mov	r2, r4
 8004420:	4660      	mov	r0, ip
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	4641      	mov	r1, r8
 8004426:	4798      	blx	r3
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004428:	88ea      	ldrh	r2, [r5, #6]
 800442a:	4641      	mov	r1, r8
 800442c:	4630      	mov	r0, r6
 800442e:	f000 fcbf 	bl	8004db0 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8004432:	4638      	mov	r0, r7
 8004434:	e7db      	b.n	80043ee <USBD_CDC_Setup+0x5e>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8004436:	2202      	movs	r2, #2
 8004438:	f10d 0106 	add.w	r1, sp, #6
 800443c:	f000 fcb8 	bl	8004db0 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8004440:	4638      	mov	r0, r7
 8004442:	e7d4      	b.n	80043ee <USBD_CDC_Setup+0x5e>
        hcdc->CmdOpCode = req->bRequest;
 8004444:	f888 c200 	strb.w	ip, [r8, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004448:	f888 4201 	strb.w	r4, [r8, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800444c:	4622      	mov	r2, r4
 800444e:	4641      	mov	r1, r8
 8004450:	f000 fcc4 	bl	8004ddc <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8004454:	4638      	mov	r0, r7
 8004456:	e7ca      	b.n	80043ee <USBD_CDC_Setup+0x5e>

08004458 <USBD_CDC_DeInit>:
{
 8004458:	b538      	push	{r3, r4, r5, lr}
 800445a:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800445c:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800445e:	2181      	movs	r1, #129	; 0x81
 8004460:	f002 fb7c 	bl	8006b5c <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004464:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004466:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004468:	4620      	mov	r0, r4
 800446a:	f002 fb77 	bl	8006b5c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800446e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004472:	4620      	mov	r0, r4
 8004474:	2182      	movs	r1, #130	; 0x82
 8004476:	f002 fb71 	bl	8006b5c <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800447a:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800447e:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 8004480:	b14b      	cbz	r3, 8004496 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004482:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800448a:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 800448e:	f004 ffcd 	bl	800942c <free>
    pdev->pClassData = NULL;
 8004492:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 8004496:	2000      	movs	r0, #0
 8004498:	bd38      	pop	{r3, r4, r5, pc}
 800449a:	bf00      	nop

0800449c <USBD_CDC_Init>:
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800449c:	7c03      	ldrb	r3, [r0, #16]
{
 800449e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044a2:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80044a4:	bbc3      	cbnz	r3, 8004518 <USBD_CDC_Init+0x7c>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80044a6:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80044a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044ac:	2202      	movs	r2, #2
 80044ae:	2181      	movs	r1, #129	; 0x81
 80044b0:	f002 fb44 	bl	8006b3c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80044b4:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80044b6:	4629      	mov	r1, r5
 80044b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044bc:	2202      	movs	r2, #2
 80044be:	4620      	mov	r0, r4
 80044c0:	f002 fb3c 	bl	8006b3c <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80044c4:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80044c8:	2308      	movs	r3, #8
 80044ca:	2203      	movs	r2, #3
 80044cc:	2182      	movs	r1, #130	; 0x82
 80044ce:	4620      	mov	r0, r4
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80044d0:	2701      	movs	r7, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80044d2:	f002 fb33 	bl	8006b3c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80044d6:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80044d8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80044dc:	f004 ff9e 	bl	800941c <malloc>
 80044e0:	4605      	mov	r5, r0
 80044e2:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 80044e6:	b370      	cbz	r0, 8004546 <USBD_CDC_Init+0xaa>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80044e8:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80044f0:	f894 8010 	ldrb.w	r8, [r4, #16]
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80044f4:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
    hcdc->TxState = 0U;
 80044f8:	2600      	movs	r6, #0
 80044fa:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80044fe:	4639      	mov	r1, r7
    hcdc->RxState = 0U;
 8004500:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004504:	4620      	mov	r0, r4
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8004506:	f1b8 0f00 	cmp.w	r8, #0
 800450a:	d015      	beq.n	8004538 <USBD_CDC_Init+0x9c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800450c:	2340      	movs	r3, #64	; 0x40
 800450e:	f002 fb7f 	bl	8006c10 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8004512:	4630      	mov	r0, r6
}
 8004514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004518:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800451a:	2340      	movs	r3, #64	; 0x40
 800451c:	2202      	movs	r2, #2
 800451e:	2181      	movs	r1, #129	; 0x81
 8004520:	f002 fb0c 	bl	8006b3c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004524:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004526:	4629      	mov	r1, r5
 8004528:	2340      	movs	r3, #64	; 0x40
 800452a:	2202      	movs	r2, #2
 800452c:	4620      	mov	r0, r4
 800452e:	f002 fb05 	bl	8006b3c <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004532:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
 8004536:	e7c7      	b.n	80044c8 <USBD_CDC_Init+0x2c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800453c:	f002 fb68 	bl	8006c10 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8004540:	4640      	mov	r0, r8
}
 8004542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 8004546:	4638      	mov	r0, r7
 8004548:	e7e4      	b.n	8004514 <USBD_CDC_Init+0x78>
 800454a:	bf00      	nop

0800454c <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 800454c:	b119      	cbz	r1, 8004556 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 800454e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 8004552:	2000      	movs	r0, #0
 8004554:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8004556:	2002      	movs	r0, #2
  }

  return ret;
}
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop

0800455c <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800455c:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8004560:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8004562:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004566:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800456a:	4770      	bx	lr

0800456c <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800456c:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  return USBD_OK;
}
 8004570:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8004572:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8004576:	4770      	bx	lr

08004578 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004578:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290

  if(pdev->pClassData != NULL)
 800457c:	b19a      	cbz	r2, 80045a6 <USBD_CDC_TransmitPacket+0x2e>
{
 800457e:	b538      	push	{r3, r4, r5, lr}
  {
    if(hcdc->TxState == 0U)
 8004580:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8004584:	b10c      	cbz	r4, 800458a <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8004586:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8004588:	bd38      	pop	{r3, r4, r5, pc}
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800458a:	f8d2 1210 	ldr.w	r1, [r2, #528]	; 0x210
      hcdc->TxState = 1U;
 800458e:	2501      	movs	r5, #1
 8004590:	f8c2 5214 	str.w	r5, [r2, #532]	; 0x214
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004594:	b28b      	uxth	r3, r1
 8004596:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800459a:	6301      	str	r1, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800459c:	2181      	movs	r1, #129	; 0x81
 800459e:	f002 fb29 	bl	8006bf4 <USBD_LL_Transmit>
      return USBD_OK;
 80045a2:	4620      	mov	r0, r4
}
 80045a4:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80045a6:	2002      	movs	r0, #2
}
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop

080045ac <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80045ac:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80045b0:	b18a      	cbz	r2, 80045d6 <USBD_CDC_ReceivePacket+0x2a>
{
 80045b2:	b510      	push	{r4, lr}
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80045b4:	7c04      	ldrb	r4, [r0, #16]
 80045b6:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80045ba:	b12c      	cbz	r4, 80045c8 <USBD_CDC_ReceivePacket+0x1c>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80045bc:	2340      	movs	r3, #64	; 0x40
 80045be:	2101      	movs	r1, #1
 80045c0:	f002 fb26 	bl	8006c10 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80045c4:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 80045c6:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80045c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045cc:	2101      	movs	r1, #1
 80045ce:	f002 fb1f 	bl	8006c10 <USBD_LL_PrepareReceive>
    return USBD_OK;
 80045d2:	4620      	mov	r0, r4
}
 80045d4:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80045d6:	2002      	movs	r0, #2
}
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop

080045dc <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80045dc:	b188      	cbz	r0, 8004602 <USBD_Init+0x26>
{
 80045de:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80045e0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80045e4:	b113      	cbz	r3, 80045ec <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80045e6:	2300      	movs	r3, #0
 80045e8:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80045ec:	b109      	cbz	r1, 80045f2 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80045ee:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80045f2:	2301      	movs	r3, #1
  pdev->id = id;
 80045f4:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80045f6:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80045fa:	f002 fa5f 	bl	8006abc <USBD_LL_Init>

  return USBD_OK;
 80045fe:	2000      	movs	r0, #0
}
 8004600:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8004602:	2002      	movs	r0, #2
}
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop

08004608 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8004608:	b119      	cbz	r1, 8004612 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800460a:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 800460e:	2000      	movs	r0, #0
 8004610:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004612:	2002      	movs	r0, #2
  }

  return status;
}
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop

08004618 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8004618:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800461a:	f002 fa81 	bl	8006b20 <USBD_LL_Start>

  return USBD_OK;
}
 800461e:	2000      	movs	r0, #0
 8004620:	bd08      	pop	{r3, pc}
 8004622:	bf00      	nop

08004624 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004624:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8004626:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800462a:	b11b      	cbz	r3, 8004634 <USBD_SetClassConfig+0x10>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4798      	blx	r3
 8004630:	b900      	cbnz	r0, 8004634 <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8004632:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8004634:	2002      	movs	r0, #2
}
 8004636:	bd08      	pop	{r3, pc}

08004638 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004638:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800463a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	4798      	blx	r3
  return USBD_OK;
}
 8004642:	2000      	movs	r0, #0
 8004644:	bd08      	pop	{r3, pc}
 8004646:	bf00      	nop

08004648 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004648:	b538      	push	{r3, r4, r5, lr}
 800464a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800464c:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8004650:	4628      	mov	r0, r5
 8004652:	f000 fb67 	bl	8004d24 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8004656:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_data_len = pdev->request.wLength;
 800465a:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 800465e:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  pdev->ep0_state = USBD_EP0_SETUP;
 8004662:	2201      	movs	r2, #1
  switch (pdev->request.bmRequest & 0x1FU)
 8004664:	f001 031f 	and.w	r3, r1, #31
 8004668:	4293      	cmp	r3, r2
  pdev->ep0_state = USBD_EP0_SETUP;
 800466a:	f8c4 226c 	str.w	r2, [r4, #620]	; 0x26c
  switch (pdev->request.bmRequest & 0x1FU)
 800466e:	d015      	beq.n	800469c <USBD_LL_SetupStage+0x54>
 8004670:	d30e      	bcc.n	8004690 <USBD_LL_SetupStage+0x48>
 8004672:	2b02      	cmp	r3, #2
 8004674:	d006      	beq.n	8004684 <USBD_LL_SetupStage+0x3c>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004676:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800467a:	4620      	mov	r0, r4
 800467c:	f002 fa7c 	bl	8006b78 <USBD_LL_StallEP>
    break;
  }

  return USBD_OK;
}
 8004680:	2000      	movs	r0, #0
 8004682:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdEPReq(pdev, &pdev->request);
 8004684:	4629      	mov	r1, r5
 8004686:	4620      	mov	r0, r4
 8004688:	f000 fab8 	bl	8004bfc <USBD_StdEPReq>
}
 800468c:	2000      	movs	r0, #0
 800468e:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdDevReq (pdev, &pdev->request);
 8004690:	4629      	mov	r1, r5
 8004692:	4620      	mov	r0, r4
 8004694:	f000 f908 	bl	80048a8 <USBD_StdDevReq>
}
 8004698:	2000      	movs	r0, #0
 800469a:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800469c:	4629      	mov	r1, r5
 800469e:	4620      	mov	r0, r4
 80046a0:	f000 fa80 	bl	8004ba4 <USBD_StdItfReq>
}
 80046a4:	2000      	movs	r0, #0
 80046a6:	bd38      	pop	{r3, r4, r5, pc}

080046a8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80046a8:	b570      	push	{r4, r5, r6, lr}
 80046aa:	4605      	mov	r5, r0
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80046ac:	b941      	cbnz	r1, 80046c0 <USBD_LL_DataOutStage+0x18>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80046ae:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 80046b2:	2b03      	cmp	r3, #3
 80046b4:	d00f      	beq.n	80046d6 <USBD_LL_DataOutStage+0x2e>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80046b6:	2b05      	cmp	r3, #5
 80046b8:	460c      	mov	r4, r1
 80046ba:	d02e      	beq.n	800471a <USBD_LL_DataOutStage+0x72>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80046bc:	2000      	movs	r0, #0
}
 80046be:	bd70      	pop	{r4, r5, r6, pc}
  else if((pdev->pClass->DataOut != NULL) &&
 80046c0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	b1c3      	cbz	r3, 80046fa <USBD_LL_DataOutStage+0x52>
 80046c8:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80046cc:	2a03      	cmp	r2, #3
 80046ce:	d114      	bne.n	80046fa <USBD_LL_DataOutStage+0x52>
    pdev->pClass->DataOut(pdev, epnum);
 80046d0:	4798      	blx	r3
  return USBD_OK;
 80046d2:	2000      	movs	r0, #0
}
 80046d4:	bd70      	pop	{r4, r5, r6, pc}
 80046d6:	4616      	mov	r6, r2
      if(pep->rem_length > pep->maxpacket)
 80046d8:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80046dc:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d90c      	bls.n	80046fe <USBD_LL_DataOutStage+0x56>
        pep->rem_length -=  pep->maxpacket;
 80046e4:	1a9b      	subs	r3, r3, r2
        USBD_CtlContinueRx (pdev,
 80046e6:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80046e8:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 80046ec:	bf8c      	ite	hi
 80046ee:	b29a      	uxthhi	r2, r3
 80046f0:	b292      	uxthls	r2, r2
 80046f2:	4631      	mov	r1, r6
 80046f4:	f000 fb82 	bl	8004dfc <USBD_CtlContinueRx>
 80046f8:	e7e0      	b.n	80046bc <USBD_LL_DataOutStage+0x14>
    return USBD_FAIL;
 80046fa:	2002      	movs	r0, #2
}
 80046fc:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80046fe:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	b123      	cbz	r3, 8004710 <USBD_LL_DataOutStage+0x68>
 8004706:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800470a:	2a03      	cmp	r2, #3
 800470c:	d100      	bne.n	8004710 <USBD_LL_DataOutStage+0x68>
          pdev->pClass->EP0_RxReady(pdev);
 800470e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004710:	4628      	mov	r0, r5
 8004712:	f000 fb7b 	bl	8004e0c <USBD_CtlSendStatus>
  return USBD_OK;
 8004716:	2000      	movs	r0, #0
}
 8004718:	bd70      	pop	{r4, r5, r6, pc}
        pdev->ep0_state = USBD_EP0_IDLE;
 800471a:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800471e:	f002 fa2b 	bl	8006b78 <USBD_LL_StallEP>
  return USBD_OK;
 8004722:	4620      	mov	r0, r4
}
 8004724:	bd70      	pop	{r4, r5, r6, pc}
 8004726:	bf00      	nop

08004728 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8004728:	b570      	push	{r4, r5, r6, lr}
 800472a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800472c:	b989      	cbnz	r1, 8004752 <USBD_LL_DataInStage+0x2a>
 800472e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004730:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8004734:	2a02      	cmp	r2, #2
 8004736:	d01a      	beq.n	800476e <USBD_LL_DataInStage+0x46>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004738:	f032 0304 	bics.w	r3, r2, #4
 800473c:	d102      	bne.n	8004744 <USBD_LL_DataInStage+0x1c>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800473e:	2180      	movs	r1, #128	; 0x80
 8004740:	f002 fa1a 	bl	8006b78 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004744:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 8004748:	2b01      	cmp	r3, #1
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800474a:	f04f 0000 	mov.w	r0, #0
    if (pdev->dev_test_mode == 1U)
 800474e:	d00b      	beq.n	8004768 <USBD_LL_DataInStage+0x40>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8004750:	bd70      	pop	{r4, r5, r6, pc}
  else if((pdev->pClass->DataIn != NULL) &&
 8004752:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	b36b      	cbz	r3, 80047b6 <USBD_LL_DataInStage+0x8e>
 800475a:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800475e:	2a03      	cmp	r2, #3
 8004760:	d129      	bne.n	80047b6 <USBD_LL_DataInStage+0x8e>
    pdev->pClass->DataIn(pdev, epnum);
 8004762:	4798      	blx	r3
  return USBD_OK;
 8004764:	2000      	movs	r0, #0
}
 8004766:	bd70      	pop	{r4, r5, r6, pc}
      pdev->dev_test_mode = 0U;
 8004768:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
}
 800476c:	bd70      	pop	{r4, r5, r6, pc}
      if(pep->rem_length > pep->maxpacket)
 800476e:	e9d0 6208 	ldrd	r6, r2, [r0, #32]
 8004772:	4296      	cmp	r6, r2
 8004774:	d821      	bhi.n	80047ba <USBD_LL_DataInStage+0x92>
        if((pep->total_length % pep->maxpacket == 0U) &&
 8004776:	69c3      	ldr	r3, [r0, #28]
 8004778:	fbb3 f5f2 	udiv	r5, r3, r2
 800477c:	fb02 3515 	mls	r5, r2, r5, r3
 8004780:	b90d      	cbnz	r5, 8004786 <USBD_LL_DataInStage+0x5e>
 8004782:	429a      	cmp	r2, r3
 8004784:	d927      	bls.n	80047d6 <USBD_LL_DataInStage+0xae>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004786:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	b12b      	cbz	r3, 800479a <USBD_LL_DataInStage+0x72>
 800478e:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 8004792:	2a03      	cmp	r2, #3
 8004794:	d101      	bne.n	800479a <USBD_LL_DataInStage+0x72>
            pdev->pClass->EP0_TxSent(pdev);
 8004796:	4620      	mov	r0, r4
 8004798:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 800479a:	2180      	movs	r1, #128	; 0x80
 800479c:	4620      	mov	r0, r4
 800479e:	f002 f9eb 	bl	8006b78 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80047a2:	4620      	mov	r0, r4
 80047a4:	f000 fb3e 	bl	8004e24 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 80047a8:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 80047ac:	2b01      	cmp	r3, #1
      pdev->dev_test_mode = 0U;
 80047ae:	f04f 0000 	mov.w	r0, #0
    if (pdev->dev_test_mode == 1U)
 80047b2:	d1cd      	bne.n	8004750 <USBD_LL_DataInStage+0x28>
 80047b4:	e7d8      	b.n	8004768 <USBD_LL_DataInStage+0x40>
    return USBD_FAIL;
 80047b6:	2002      	movs	r0, #2
}
 80047b8:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 80047ba:	1ab2      	subs	r2, r6, r2
 80047bc:	460d      	mov	r5, r1
 80047be:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80047c0:	4619      	mov	r1, r3
 80047c2:	b292      	uxth	r2, r2
 80047c4:	f000 fb02 	bl	8004dcc <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80047c8:	462b      	mov	r3, r5
 80047ca:	462a      	mov	r2, r5
 80047cc:	4629      	mov	r1, r5
 80047ce:	4620      	mov	r0, r4
 80047d0:	f002 fa1e 	bl	8006c10 <USBD_LL_PrepareReceive>
 80047d4:	e7b6      	b.n	8004744 <USBD_LL_DataInStage+0x1c>
           (pep->total_length >= pep->maxpacket) &&
 80047d6:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 80047da:	4293      	cmp	r3, r2
 80047dc:	d2d3      	bcs.n	8004786 <USBD_LL_DataInStage+0x5e>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80047de:	462a      	mov	r2, r5
 80047e0:	f000 faf4 	bl	8004dcc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80047e4:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
 80047e8:	e7ee      	b.n	80047c8 <USBD_LL_DataInStage+0xa0>
 80047ea:	bf00      	nop

080047ec <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80047ec:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80047ee:	2200      	movs	r2, #0
{
 80047f0:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80047f2:	2340      	movs	r3, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80047f4:	461e      	mov	r6, r3
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80047f6:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80047f8:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80047fa:	f002 f99f 	bl	8006b3c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80047fe:	4633      	mov	r3, r6
 8004800:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004802:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004806:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800480a:	4620      	mov	r0, r4
 800480c:	2200      	movs	r2, #0
 800480e:	f002 f995 	bl	8006b3c <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8004812:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004816:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 8004818:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800481a:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800481c:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8004820:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 8004824:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8004826:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 800482a:	b123      	cbz	r3, 8004836 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800482c:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8004830:	4620      	mov	r0, r4
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004836:	2000      	movs	r0, #0
 8004838:	bd70      	pop	{r4, r5, r6, pc}
 800483a:	bf00      	nop

0800483c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800483c:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800483e:	2000      	movs	r0, #0
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop

08004844 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8004844:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8004848:	f880 2275 	strb.w	r2, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800484c:	2304      	movs	r3, #4
 800484e:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8004852:	2000      	movs	r0, #0
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop

08004858 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8004858:	4603      	mov	r3, r0
  pdev->dev_state = pdev->dev_old_state;
  return USBD_OK;
}
 800485a:	2000      	movs	r0, #0
  pdev->dev_state = pdev->dev_old_state;
 800485c:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8004860:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
}
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop

08004868 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004868:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800486c:	2a03      	cmp	r2, #3
 800486e:	d001      	beq.n	8004874 <USBD_LL_SOF+0xc>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 8004870:	2000      	movs	r0, #0
 8004872:	4770      	bx	lr
{
 8004874:	b508      	push	{r3, lr}
    if(pdev->pClass->SOF != NULL)
 8004876:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	b103      	cbz	r3, 8004880 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 800487e:	4798      	blx	r3
}
 8004880:	2000      	movs	r0, #0
 8004882:	bd08      	pop	{r3, pc}

08004884 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8004884:	2000      	movs	r0, #0
 8004886:	4770      	bx	lr

08004888 <USBD_LL_IsoOUTIncomplete>:
 8004888:	2000      	movs	r0, #0
 800488a:	4770      	bx	lr

0800488c <USBD_LL_DevConnected>:
 800488c:	2000      	movs	r0, #0
 800488e:	4770      	bx	lr

08004890 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8004890:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004892:	2101      	movs	r1, #1
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004894:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004898:	f880 1274 	strb.w	r1, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800489c:	6852      	ldr	r2, [r2, #4]
 800489e:	7901      	ldrb	r1, [r0, #4]
 80048a0:	4790      	blx	r2

  return USBD_OK;
}
 80048a2:	2000      	movs	r0, #0
 80048a4:	bd08      	pop	{r3, pc}
 80048a6:	bf00      	nop

080048a8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80048a8:	b530      	push	{r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80048aa:	780b      	ldrb	r3, [r1, #0]
 80048ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80048b0:	2b20      	cmp	r3, #32
{
 80048b2:	b083      	sub	sp, #12
 80048b4:	460d      	mov	r5, r1
 80048b6:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80048b8:	d028      	beq.n	800490c <USBD_StdDevReq+0x64>
 80048ba:	2b40      	cmp	r3, #64	; 0x40
 80048bc:	d026      	beq.n	800490c <USBD_StdDevReq+0x64>
 80048be:	b153      	cbz	r3, 80048d6 <USBD_StdDevReq+0x2e>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 80048c0:	2180      	movs	r1, #128	; 0x80
 80048c2:	4620      	mov	r0, r4
 80048c4:	f002 f958 	bl	8006b78 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80048c8:	4620      	mov	r0, r4
 80048ca:	2100      	movs	r1, #0
 80048cc:	f002 f954 	bl	8006b78 <USBD_LL_StallEP>
}
 80048d0:	2000      	movs	r0, #0
 80048d2:	b003      	add	sp, #12
 80048d4:	bd30      	pop	{r4, r5, pc}
    switch (req->bRequest)
 80048d6:	784b      	ldrb	r3, [r1, #1]
 80048d8:	2b09      	cmp	r3, #9
 80048da:	d8f1      	bhi.n	80048c0 <USBD_StdDevReq+0x18>
 80048dc:	a201      	add	r2, pc, #4	; (adr r2, 80048e4 <USBD_StdDevReq+0x3c>)
 80048de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e2:	bf00      	nop
 80048e4:	08004961 	.word	0x08004961
 80048e8:	0800498f 	.word	0x0800498f
 80048ec:	080048c1 	.word	0x080048c1
 80048f0:	080049a7 	.word	0x080049a7
 80048f4:	080048c1 	.word	0x080048c1
 80048f8:	080049af 	.word	0x080049af
 80048fc:	080049eb 	.word	0x080049eb
 8004900:	080048c1 	.word	0x080048c1
 8004904:	08004a19 	.word	0x08004a19
 8004908:	0800491f 	.word	0x0800491f
    pdev->pClass->Setup(pdev, req);
 800490c:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8004910:	4629      	mov	r1, r5
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	4620      	mov	r0, r4
 8004916:	4798      	blx	r3
}
 8004918:	2000      	movs	r0, #0
 800491a:	b003      	add	sp, #12
 800491c:	bd30      	pop	{r4, r5, pc}
  cfgidx = (uint8_t)(req->wValue);
 800491e:	7889      	ldrb	r1, [r1, #2]
 8004920:	4d9f      	ldr	r5, [pc, #636]	; (8004ba0 <USBD_StdDevReq+0x2f8>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004922:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8004924:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004926:	d8cb      	bhi.n	80048c0 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8004928:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800492c:	2b02      	cmp	r3, #2
 800492e:	f000 810c 	beq.w	8004b4a <USBD_StdDevReq+0x2a2>
 8004932:	2b03      	cmp	r3, #3
 8004934:	f040 80fd 	bne.w	8004b32 <USBD_StdDevReq+0x28a>
      if (cfgidx == 0U)
 8004938:	2900      	cmp	r1, #0
 800493a:	f000 8126 	beq.w	8004b8a <USBD_StdDevReq+0x2e2>
      else if (cfgidx != pdev->dev_config)
 800493e:	6841      	ldr	r1, [r0, #4]
 8004940:	2901      	cmp	r1, #1
 8004942:	d009      	beq.n	8004958 <USBD_StdDevReq+0xb0>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004944:	b2c9      	uxtb	r1, r1
 8004946:	f7ff fe77 	bl	8004638 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800494a:	7829      	ldrb	r1, [r5, #0]
 800494c:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800494e:	4620      	mov	r0, r4
 8004950:	f7ff fe68 	bl	8004624 <USBD_SetClassConfig>
 8004954:	2802      	cmp	r0, #2
 8004956:	d0b3      	beq.n	80048c0 <USBD_StdDevReq+0x18>
      USBD_CtlSendStatus(pdev);
 8004958:	4620      	mov	r0, r4
 800495a:	f000 fa57 	bl	8004e0c <USBD_CtlSendStatus>
 800495e:	e7b7      	b.n	80048d0 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 8004960:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004964:	3b01      	subs	r3, #1
 8004966:	2b02      	cmp	r3, #2
 8004968:	f04f 0203 	mov.w	r2, #3
 800496c:	d8a8      	bhi.n	80048c0 <USBD_StdDevReq+0x18>
    if(req->wLength != 0x2U)
 800496e:	88cb      	ldrh	r3, [r1, #6]
 8004970:	2b02      	cmp	r3, #2
 8004972:	d1a5      	bne.n	80048c0 <USBD_StdDevReq+0x18>
    if (pdev->dev_remote_wakeup)
 8004974:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004978:	2101      	movs	r1, #1
 800497a:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup)
 800497c:	b103      	cbz	r3, 8004980 <USBD_StdDevReq+0xd8>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800497e:	60c2      	str	r2, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004980:	2202      	movs	r2, #2
 8004982:	f104 010c 	add.w	r1, r4, #12
 8004986:	4620      	mov	r0, r4
 8004988:	f000 fa12 	bl	8004db0 <USBD_CtlSendData>
 800498c:	e7a0      	b.n	80048d0 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800498e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004992:	3b01      	subs	r3, #1
 8004994:	2b02      	cmp	r3, #2
 8004996:	d893      	bhi.n	80048c0 <USBD_StdDevReq+0x18>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004998:	884b      	ldrh	r3, [r1, #2]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d198      	bne.n	80048d0 <USBD_StdDevReq+0x28>
      pdev->dev_remote_wakeup = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 80049a4:	e7d8      	b.n	8004958 <USBD_StdDevReq+0xb0>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80049a6:	884b      	ldrh	r3, [r1, #2]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d191      	bne.n	80048d0 <USBD_StdDevReq+0x28>
 80049ac:	e7f8      	b.n	80049a0 <USBD_StdDevReq+0xf8>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80049ae:	888b      	ldrh	r3, [r1, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d185      	bne.n	80048c0 <USBD_StdDevReq+0x18>
 80049b4:	88cb      	ldrh	r3, [r1, #6]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d182      	bne.n	80048c0 <USBD_StdDevReq+0x18>
 80049ba:	884d      	ldrh	r5, [r1, #2]
 80049bc:	2d7f      	cmp	r5, #127	; 0x7f
 80049be:	f63f af7f 	bhi.w	80048c0 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049c2:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	f43f af7a 	beq.w	80048c0 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80049cc:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 80049ce:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80049d2:	f002 f901 	bl	8006bd8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80049d6:	4620      	mov	r0, r4
 80049d8:	f000 fa18 	bl	8004e0c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80049dc:	2d00      	cmp	r5, #0
 80049de:	f000 80d0 	beq.w	8004b82 <USBD_StdDevReq+0x2da>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80049e2:	2302      	movs	r3, #2
 80049e4:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 80049e8:	e772      	b.n	80048d0 <USBD_StdDevReq+0x28>
      USBD_GetDescriptor (pdev, req);
 80049ea:	884a      	ldrh	r2, [r1, #2]
  switch (req->wValue >> 8)
 80049ec:	0a13      	lsrs	r3, r2, #8
 80049ee:	3b01      	subs	r3, #1
 80049f0:	2b06      	cmp	r3, #6
 80049f2:	f63f af65 	bhi.w	80048c0 <USBD_StdDevReq+0x18>
 80049f6:	a101      	add	r1, pc, #4	; (adr r1, 80049fc <USBD_StdDevReq+0x154>)
 80049f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049fc:	08004ab1 	.word	0x08004ab1
 8004a00:	08004a99 	.word	0x08004a99
 8004a04:	08004ac1 	.word	0x08004ac1
 8004a08:	080048c1 	.word	0x080048c1
 8004a0c:	080048c1 	.word	0x080048c1
 8004a10:	08004a83 	.word	0x08004a83
 8004a14:	08004a3f 	.word	0x08004a3f
  if (req->wLength != 1U)
 8004a18:	88ca      	ldrh	r2, [r1, #6]
 8004a1a:	2a01      	cmp	r2, #1
 8004a1c:	f47f af50 	bne.w	80048c0 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8004a20:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f43f af4b 	beq.w	80048c0 <USBD_StdDevReq+0x18>
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	f240 809b 	bls.w	8004b66 <USBD_StdDevReq+0x2be>
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	f47f af45 	bne.w	80048c0 <USBD_StdDevReq+0x18>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004a36:	1d01      	adds	r1, r0, #4
 8004a38:	f000 f9ba 	bl	8004db0 <USBD_CtlSendData>
 8004a3c:	e748      	b.n	80048d0 <USBD_StdDevReq+0x28>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004a3e:	7c03      	ldrb	r3, [r0, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f47f af3d 	bne.w	80048c0 <USBD_StdDevReq+0x18>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004a46:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004a4a:	f10d 0006 	add.w	r0, sp, #6
 8004a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a50:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004a52:	2307      	movs	r3, #7
 8004a54:	7043      	strb	r3, [r0, #1]
  if((len != 0U) && (req->wLength != 0U))
 8004a56:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004a5a:	88ea      	ldrh	r2, [r5, #6]
 8004a5c:	b16b      	cbz	r3, 8004a7a <USBD_StdDevReq+0x1d2>
 8004a5e:	2a00      	cmp	r2, #0
 8004a60:	f43f af7a 	beq.w	8004958 <USBD_StdDevReq+0xb0>
    len = MIN(len, req->wLength);
 8004a64:	4293      	cmp	r3, r2
 8004a66:	bf28      	it	cs
 8004a68:	4613      	movcs	r3, r2
    USBD_CtlSendData (pdev, pbuf, len);
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	4601      	mov	r1, r0
 8004a6e:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 8004a70:	f8ad 3006 	strh.w	r3, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 8004a74:	f000 f99c 	bl	8004db0 <USBD_CtlSendData>
 8004a78:	88ea      	ldrh	r2, [r5, #6]
  if(req->wLength == 0U)
 8004a7a:	2a00      	cmp	r2, #0
 8004a7c:	f47f af28 	bne.w	80048d0 <USBD_StdDevReq+0x28>
 8004a80:	e76a      	b.n	8004958 <USBD_StdDevReq+0xb0>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8004a82:	7c03      	ldrb	r3, [r0, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f47f af1b 	bne.w	80048c0 <USBD_StdDevReq+0x18>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004a8a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004a8e:	f10d 0006 	add.w	r0, sp, #6
 8004a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a94:	4798      	blx	r3
 8004a96:	e7de      	b.n	8004a56 <USBD_StdDevReq+0x1ae>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8004a98:	7c02      	ldrb	r2, [r0, #16]
 8004a9a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004a9e:	2a00      	cmp	r2, #0
 8004aa0:	d168      	bne.n	8004b74 <USBD_StdDevReq+0x2cc>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa4:	f10d 0006 	add.w	r0, sp, #6
 8004aa8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004aaa:	2302      	movs	r3, #2
 8004aac:	7043      	strb	r3, [r0, #1]
 8004aae:	e7d2      	b.n	8004a56 <USBD_StdDevReq+0x1ae>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004ab0:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004ab4:	7c00      	ldrb	r0, [r0, #16]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f10d 0106 	add.w	r1, sp, #6
 8004abc:	4798      	blx	r3
 8004abe:	e7ca      	b.n	8004a56 <USBD_StdDevReq+0x1ae>
    switch ((uint8_t)(req->wValue))
 8004ac0:	b2d2      	uxtb	r2, r2
 8004ac2:	2a05      	cmp	r2, #5
 8004ac4:	f63f aefc 	bhi.w	80048c0 <USBD_StdDevReq+0x18>
 8004ac8:	e8df f002 	tbb	[pc, r2]
 8004acc:	131b232b 	.word	0x131b232b
 8004ad0:	030b      	.short	0x030b
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004ad2:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004ad6:	7c00      	ldrb	r0, [r0, #16]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	f10d 0106 	add.w	r1, sp, #6
 8004ade:	4798      	blx	r3
 8004ae0:	e7b9      	b.n	8004a56 <USBD_StdDevReq+0x1ae>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004ae2:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004ae6:	7c00      	ldrb	r0, [r0, #16]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	f10d 0106 	add.w	r1, sp, #6
 8004aee:	4798      	blx	r3
 8004af0:	e7b1      	b.n	8004a56 <USBD_StdDevReq+0x1ae>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004af2:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004af6:	7c00      	ldrb	r0, [r0, #16]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f10d 0106 	add.w	r1, sp, #6
 8004afe:	4798      	blx	r3
 8004b00:	e7a9      	b.n	8004a56 <USBD_StdDevReq+0x1ae>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004b02:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004b06:	7c00      	ldrb	r0, [r0, #16]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f10d 0106 	add.w	r1, sp, #6
 8004b0e:	4798      	blx	r3
 8004b10:	e7a1      	b.n	8004a56 <USBD_StdDevReq+0x1ae>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004b12:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004b16:	7c00      	ldrb	r0, [r0, #16]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f10d 0106 	add.w	r1, sp, #6
 8004b1e:	4798      	blx	r3
 8004b20:	e799      	b.n	8004a56 <USBD_StdDevReq+0x1ae>
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004b22:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8004b26:	7c00      	ldrb	r0, [r0, #16]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f10d 0106 	add.w	r1, sp, #6
 8004b2e:	4798      	blx	r3
 8004b30:	e791      	b.n	8004a56 <USBD_StdDevReq+0x1ae>
  USBD_LL_StallEP(pdev , 0x80U);
 8004b32:	2180      	movs	r1, #128	; 0x80
 8004b34:	f002 f820 	bl	8006b78 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8004b38:	2100      	movs	r1, #0
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	f002 f81c 	bl	8006b78 <USBD_LL_StallEP>
      USBD_ClrClassConfig(pdev, cfgidx);
 8004b40:	7829      	ldrb	r1, [r5, #0]
 8004b42:	4620      	mov	r0, r4
 8004b44:	f7ff fd78 	bl	8004638 <USBD_ClrClassConfig>
 8004b48:	e6c2      	b.n	80048d0 <USBD_StdDevReq+0x28>
      if (cfgidx)
 8004b4a:	2900      	cmp	r1, #0
 8004b4c:	f43f af04 	beq.w	8004958 <USBD_StdDevReq+0xb0>
        pdev->dev_config = cfgidx;
 8004b50:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004b52:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8004b54:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004b56:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004b5a:	f7ff fd63 	bl	8004624 <USBD_SetClassConfig>
 8004b5e:	2802      	cmp	r0, #2
 8004b60:	f47f aefa 	bne.w	8004958 <USBD_StdDevReq+0xb0>
 8004b64:	e6ac      	b.n	80048c0 <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 8004b66:	4601      	mov	r1, r0
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8004b6e:	f000 f91f 	bl	8004db0 <USBD_CtlSendData>
 8004b72:	e6ad      	b.n	80048d0 <USBD_StdDevReq+0x28>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	f10d 0006 	add.w	r0, sp, #6
 8004b7a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	7043      	strb	r3, [r0, #1]
 8004b80:	e769      	b.n	8004a56 <USBD_StdDevReq+0x1ae>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004b82:	2301      	movs	r3, #1
 8004b84:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8004b88:	e6a2      	b.n	80048d0 <USBD_StdDevReq+0x28>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004b8a:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 8004b8c:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004b8e:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        USBD_ClrClassConfig(pdev, cfgidx);
 8004b92:	f7ff fd51 	bl	8004638 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8004b96:	4620      	mov	r0, r4
 8004b98:	f000 f938 	bl	8004e0c <USBD_CtlSendStatus>
 8004b9c:	e698      	b.n	80048d0 <USBD_StdDevReq+0x28>
 8004b9e:	bf00      	nop
 8004ba0:	20000200 	.word	0x20000200

08004ba4 <USBD_StdItfReq>:
{
 8004ba4:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ba6:	780b      	ldrb	r3, [r1, #0]
 8004ba8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004bac:	2b20      	cmp	r3, #32
{
 8004bae:	460d      	mov	r5, r1
 8004bb0:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004bb2:	d00c      	beq.n	8004bce <USBD_StdItfReq+0x2a>
 8004bb4:	2b40      	cmp	r3, #64	; 0x40
 8004bb6:	d00a      	beq.n	8004bce <USBD_StdItfReq+0x2a>
 8004bb8:	b14b      	cbz	r3, 8004bce <USBD_StdItfReq+0x2a>
  USBD_LL_StallEP(pdev , 0x80U);
 8004bba:	2180      	movs	r1, #128	; 0x80
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	f001 ffdb 	bl	8006b78 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	f001 ffd7 	bl	8006b78 <USBD_LL_StallEP>
}
 8004bca:	2000      	movs	r0, #0
 8004bcc:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 8004bce:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d8f0      	bhi.n	8004bba <USBD_StdItfReq+0x16>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004bd8:	792b      	ldrb	r3, [r5, #4]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d8ed      	bhi.n	8004bba <USBD_StdItfReq+0x16>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8004bde:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8004be2:	4629      	mov	r1, r5
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	4620      	mov	r0, r4
 8004be8:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8004bea:	88eb      	ldrh	r3, [r5, #6]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1ec      	bne.n	8004bca <USBD_StdItfReq+0x26>
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	d1ea      	bne.n	8004bca <USBD_StdItfReq+0x26>
          USBD_CtlSendStatus(pdev);
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	f000 f909 	bl	8004e0c <USBD_CtlSendStatus>
 8004bfa:	e7e6      	b.n	8004bca <USBD_StdItfReq+0x26>

08004bfc <USBD_StdEPReq>:
{
 8004bfc:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004bfe:	780b      	ldrb	r3, [r1, #0]
 8004c00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c04:	2b20      	cmp	r3, #32
{
 8004c06:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c08:	d00c      	beq.n	8004c24 <USBD_StdEPReq+0x28>
 8004c0a:	2b40      	cmp	r3, #64	; 0x40
 8004c0c:	d00a      	beq.n	8004c24 <USBD_StdEPReq+0x28>
 8004c0e:	b183      	cbz	r3, 8004c32 <USBD_StdEPReq+0x36>
  USBD_LL_StallEP(pdev , 0x80U);
 8004c10:	2180      	movs	r1, #128	; 0x80
 8004c12:	4620      	mov	r0, r4
 8004c14:	f001 ffb0 	bl	8006b78 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8004c18:	4620      	mov	r0, r4
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	f001 ffac 	bl	8006b78 <USBD_LL_StallEP>
}
 8004c20:	2000      	movs	r0, #0
 8004c22:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClass->Setup (pdev, req);
 8004c24:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8004c28:	4620      	mov	r0, r4
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	4798      	blx	r3
}
 8004c2e:	2000      	movs	r0, #0
 8004c30:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 8004c32:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8004c34:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 8004c36:	2b01      	cmp	r3, #1
  ep_addr  = LOBYTE(req->wIndex);
 8004c38:	b2d5      	uxtb	r5, r2
    switch (req->bRequest)
 8004c3a:	d03d      	beq.n	8004cb8 <USBD_StdEPReq+0xbc>
 8004c3c:	d314      	bcc.n	8004c68 <USBD_StdEPReq+0x6c>
 8004c3e:	2b03      	cmp	r3, #3
 8004c40:	d1e6      	bne.n	8004c10 <USBD_StdEPReq+0x14>
      switch (pdev->dev_state)
 8004c42:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d045      	beq.n	8004cd6 <USBD_StdEPReq+0xda>
 8004c4a:	2b03      	cmp	r3, #3
 8004c4c:	d1e0      	bne.n	8004c10 <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004c4e:	884b      	ldrh	r3, [r1, #2]
 8004c50:	b933      	cbnz	r3, 8004c60 <USBD_StdEPReq+0x64>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004c52:	066a      	lsls	r2, r5, #25
 8004c54:	d004      	beq.n	8004c60 <USBD_StdEPReq+0x64>
 8004c56:	88cb      	ldrh	r3, [r1, #6]
 8004c58:	b913      	cbnz	r3, 8004c60 <USBD_StdEPReq+0x64>
            USBD_LL_StallEP(pdev, ep_addr);
 8004c5a:	4629      	mov	r1, r5
 8004c5c:	f001 ff8c 	bl	8006b78 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 8004c60:	4620      	mov	r0, r4
 8004c62:	f000 f8d3 	bl	8004e0c <USBD_CtlSendStatus>
        break;
 8004c66:	e7db      	b.n	8004c20 <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 8004c68:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d03c      	beq.n	8004cea <USBD_StdEPReq+0xee>
 8004c70:	2b03      	cmp	r3, #3
 8004c72:	d1cd      	bne.n	8004c10 <USBD_StdEPReq+0x14>
 8004c74:	f005 030f 	and.w	r3, r5, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004c78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 8004c7c:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004c7e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 8004c82:	d441      	bmi.n	8004d08 <USBD_StdEPReq+0x10c>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004c84:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d0c1      	beq.n	8004c10 <USBD_StdEPReq+0x14>
 8004c8c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004c90:	2614      	movs	r6, #20
 8004c92:	fb06 0603 	mla	r6, r6, r3, r0
 8004c96:	f506 76a0 	add.w	r6, r6, #320	; 0x140
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004c9a:	b133      	cbz	r3, 8004caa <USBD_StdEPReq+0xae>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004c9c:	4629      	mov	r1, r5
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	f001 ff86 	bl	8006bb0 <USBD_LL_IsStallEP>
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	d03a      	beq.n	8004d1e <USBD_StdEPReq+0x122>
            pep->status = 0x0001U;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	6033      	str	r3, [r6, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004cac:	4631      	mov	r1, r6
 8004cae:	4620      	mov	r0, r4
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	f000 f87d 	bl	8004db0 <USBD_CtlSendData>
          break;
 8004cb6:	e7b3      	b.n	8004c20 <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 8004cb8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d00a      	beq.n	8004cd6 <USBD_StdEPReq+0xda>
 8004cc0:	2b03      	cmp	r3, #3
 8004cc2:	d1a5      	bne.n	8004c10 <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004cc4:	884b      	ldrh	r3, [r1, #2]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1aa      	bne.n	8004c20 <USBD_StdEPReq+0x24>
          if ((ep_addr & 0x7FU) != 0x00U)
 8004cca:	066e      	lsls	r6, r5, #25
 8004ccc:	d0c8      	beq.n	8004c60 <USBD_StdEPReq+0x64>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8004cce:	4629      	mov	r1, r5
 8004cd0:	f001 ff60 	bl	8006b94 <USBD_LL_ClearStallEP>
 8004cd4:	e7c4      	b.n	8004c60 <USBD_StdEPReq+0x64>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004cd6:	066b      	lsls	r3, r5, #25
 8004cd8:	d09a      	beq.n	8004c10 <USBD_StdEPReq+0x14>
          USBD_LL_StallEP(pdev, ep_addr);
 8004cda:	4629      	mov	r1, r5
 8004cdc:	f001 ff4c 	bl	8006b78 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	2180      	movs	r1, #128	; 0x80
 8004ce4:	f001 ff48 	bl	8006b78 <USBD_LL_StallEP>
 8004ce8:	e79a      	b.n	8004c20 <USBD_StdEPReq+0x24>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004cea:	0668      	lsls	r0, r5, #25
 8004cec:	d190      	bne.n	8004c10 <USBD_StdEPReq+0x14>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004cee:	0611      	lsls	r1, r2, #24
 8004cf0:	bf4c      	ite	mi
 8004cf2:	f104 0114 	addmi.w	r1, r4, #20
 8004cf6:	f504 71a0 	addpl.w	r1, r4, #320	; 0x140
          pep->status = 0x0000U;
 8004cfa:	2300      	movs	r3, #0
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004cfc:	4620      	mov	r0, r4
          pep->status = 0x0000U;
 8004cfe:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004d00:	2202      	movs	r2, #2
 8004d02:	f000 f855 	bl	8004db0 <USBD_CtlSendData>
          break;
 8004d06:	e78b      	b.n	8004c20 <USBD_StdEPReq+0x24>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d080      	beq.n	8004c10 <USBD_StdEPReq+0x14>
 8004d0e:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004d12:	1c5e      	adds	r6, r3, #1
 8004d14:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8004d18:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8004d1c:	e7bd      	b.n	8004c9a <USBD_StdEPReq+0x9e>
            pep->status = 0x0000U;
 8004d1e:	6030      	str	r0, [r6, #0]
 8004d20:	e7c4      	b.n	8004cac <USBD_StdEPReq+0xb0>
 8004d22:	bf00      	nop

08004d24 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8004d24:	780b      	ldrb	r3, [r1, #0]
 8004d26:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8004d28:	784b      	ldrb	r3, [r1, #1]
 8004d2a:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8004d2c:	78ca      	ldrb	r2, [r1, #3]
 8004d2e:	788b      	ldrb	r3, [r1, #2]
 8004d30:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004d34:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8004d36:	794a      	ldrb	r2, [r1, #5]
 8004d38:	790b      	ldrb	r3, [r1, #4]
 8004d3a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004d3e:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8004d40:	79ca      	ldrb	r2, [r1, #7]
 8004d42:	798b      	ldrb	r3, [r1, #6]
 8004d44:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004d48:	80c3      	strh	r3, [r0, #6]
}
 8004d4a:	4770      	bx	lr

08004d4c <USBD_CtlError>:
{
 8004d4c:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 8004d4e:	2180      	movs	r1, #128	; 0x80
{
 8004d50:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8004d52:	f001 ff11 	bl	8006b78 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8004d56:	4620      	mov	r0, r4
 8004d58:	2100      	movs	r1, #0
}
 8004d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8004d5e:	f001 bf0b 	b.w	8006b78 <USBD_LL_StallEP>
 8004d62:	bf00      	nop

08004d64 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 8004d64:	b300      	cbz	r0, 8004da8 <USBD_GetString+0x44>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8004d66:	7803      	ldrb	r3, [r0, #0]
{
 8004d68:	b430      	push	{r4, r5}
    while (*buf != '\0')
 8004d6a:	b1f3      	cbz	r3, 8004daa <USBD_GetString+0x46>
 8004d6c:	4604      	mov	r4, r0
    uint8_t  len = 0U;
 8004d6e:	2300      	movs	r3, #0
    while (*buf != '\0')
 8004d70:	f814 5f01 	ldrb.w	r5, [r4, #1]!
    {
        len++;
 8004d74:	3301      	adds	r3, #1
 8004d76:	b2db      	uxtb	r3, r3
    while (*buf != '\0')
 8004d78:	2d00      	cmp	r5, #0
 8004d7a:	d1f9      	bne.n	8004d70 <USBD_GetString+0xc>
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	3302      	adds	r3, #2
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004d80:	2403      	movs	r4, #3
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8004d82:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8004d84:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004d86:	704c      	strb	r4, [r1, #1]
    while (*desc != '\0')
 8004d88:	7804      	ldrb	r4, [r0, #0]
 8004d8a:	b15c      	cbz	r4, 8004da4 <USBD_GetString+0x40>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004d8c:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 8004d8e:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	b2d2      	uxtb	r2, r2
 8004d94:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 8004d96:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 8004d98:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 8004d9c:	3302      	adds	r3, #2
 8004d9e:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 8004da0:	2c00      	cmp	r4, #0
 8004da2:	d1f5      	bne.n	8004d90 <USBD_GetString+0x2c>
}
 8004da4:	bc30      	pop	{r4, r5}
 8004da6:	4770      	bx	lr
 8004da8:	4770      	bx	lr
    while (*buf != '\0')
 8004daa:	2302      	movs	r3, #2
 8004dac:	e7e8      	b.n	8004d80 <USBD_GetString+0x1c>
 8004dae:	bf00      	nop

08004db0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8004db0:	b538      	push	{r3, r4, r5, lr}
 8004db2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004db4:	2502      	movs	r5, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8004db6:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8004db8:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004dbc:	f8c0 526c 	str.w	r5, [r0, #620]	; 0x26c
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	f001 ff17 	bl	8006bf4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	bd38      	pop	{r3, r4, r5, pc}
 8004dca:	bf00      	nop

08004dcc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8004dcc:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8004dce:	4613      	mov	r3, r2
 8004dd0:	460a      	mov	r2, r1
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	f001 ff0e 	bl	8006bf4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004dd8:	2000      	movs	r0, #0
 8004dda:	bd08      	pop	{r3, pc}

08004ddc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8004ddc:	b538      	push	{r3, r4, r5, lr}
 8004dde:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004de0:	2503      	movs	r5, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8004de2:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
 8004de4:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8004de8:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004dec:	f8c0 526c 	str.w	r5, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8004df0:	2100      	movs	r1, #0
 8004df2:	f001 ff0d 	bl	8006c10 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004df6:	2000      	movs	r0, #0
 8004df8:	bd38      	pop	{r3, r4, r5, pc}
 8004dfa:	bf00      	nop

08004dfc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8004dfc:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004dfe:	4613      	mov	r3, r2
 8004e00:	460a      	mov	r2, r1
 8004e02:	2100      	movs	r1, #0
 8004e04:	f001 ff04 	bl	8006c10 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004e08:	2000      	movs	r0, #0
 8004e0a:	bd08      	pop	{r3, pc}

08004e0c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8004e0c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004e0e:	2204      	movs	r2, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004e10:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004e12:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004e16:	4619      	mov	r1, r3
 8004e18:	461a      	mov	r2, r3
 8004e1a:	f001 feeb 	bl	8006bf4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004e1e:	2000      	movs	r0, #0
 8004e20:	bd08      	pop	{r3, pc}
 8004e22:	bf00      	nop

08004e24 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8004e24:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004e26:	2205      	movs	r2, #5

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004e28:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004e2a:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004e2e:	4619      	mov	r1, r3
 8004e30:	461a      	mov	r2, r3
 8004e32:	f001 feed 	bl	8006c10 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004e36:	2000      	movs	r0, #0
 8004e38:	bd08      	pop	{r3, pc}
 8004e3a:	bf00      	nop

08004e3c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004e3c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8004e3e:	f000 fb0f 	bl	8005460 <vTaskStartScheduler>
  
  return osOK;
}
 8004e42:	2000      	movs	r0, #0
 8004e44:	bd08      	pop	{r3, pc}
 8004e46:	bf00      	nop

08004e48 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004e48:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004e4a:	6945      	ldr	r5, [r0, #20]
 8004e4c:	6902      	ldr	r2, [r0, #16]
 8004e4e:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 8004e52:	460b      	mov	r3, r1
 8004e54:	b086      	sub	sp, #24
 8004e56:	e9d0 1600 	ldrd	r1, r6, [r0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004e5a:	b16d      	cbz	r5, 8004e78 <osThreadCreate+0x30>
 8004e5c:	6980      	ldr	r0, [r0, #24]
 8004e5e:	b158      	cbz	r0, 8004e78 <osThreadCreate+0x30>
  if (priority != osPriorityError) {
 8004e60:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8004e62:	bf14      	ite	ne
 8004e64:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004e66:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e68:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8004e6c:	9400      	str	r4, [sp, #0]
 8004e6e:	4630      	mov	r0, r6
 8004e70:	f000 fa16 	bl	80052a0 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 8004e74:	b006      	add	sp, #24
 8004e76:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8004e78:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8004e7a:	bf14      	ite	ne
 8004e7c:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004e7e:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e80:	ad05      	add	r5, sp, #20
 8004e82:	b292      	uxth	r2, r2
 8004e84:	9400      	str	r4, [sp, #0]
 8004e86:	4630      	mov	r0, r6
 8004e88:	9501      	str	r5, [sp, #4]
 8004e8a:	f000 fa41 	bl	8005310 <xTaskCreate>
 8004e8e:	2801      	cmp	r0, #1
 8004e90:	bf0c      	ite	eq
 8004e92:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 8004e94:	2000      	movne	r0, #0
}
 8004e96:	b006      	add	sp, #24
 8004e98:	bd70      	pop	{r4, r5, r6, pc}
 8004e9a:	bf00      	nop

08004e9c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004e9c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	bf08      	it	eq
 8004ea2:	2001      	moveq	r0, #1
 8004ea4:	f000 fc7a 	bl	800579c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	bd08      	pop	{r3, pc}

08004eac <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004eac:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004eb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004eb4:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004eb6:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004eb8:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004eba:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ebc:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop

08004ec4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop

08004ecc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ecc:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8004ece:	6802      	ldr	r2, [r0, #0]
{
 8004ed0:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ed2:	689c      	ldr	r4, [r3, #8]
 8004ed4:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ed6:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8004ed8:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8004eda:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004edc:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ede:	6099      	str	r1, [r3, #8]
}
 8004ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004ee4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004ee6:	6002      	str	r2, [r0, #0]
}
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop

08004eec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004eec:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004eee:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ef0:	1c6b      	adds	r3, r5, #1
 8004ef2:	d011      	beq.n	8004f18 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ef4:	f100 0208 	add.w	r2, r0, #8
 8004ef8:	e000      	b.n	8004efc <vListInsert+0x10>
 8004efa:	461a      	mov	r2, r3
 8004efc:	6853      	ldr	r3, [r2, #4]
 8004efe:	681c      	ldr	r4, [r3, #0]
 8004f00:	42ac      	cmp	r4, r5
 8004f02:	d9fa      	bls.n	8004efa <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8004f04:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f06:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8004f08:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f0a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f0c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f0e:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f10:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004f12:	6004      	str	r4, [r0, #0]
}
 8004f14:	bc30      	pop	{r4, r5}
 8004f16:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f18:	6902      	ldr	r2, [r0, #16]
 8004f1a:	6853      	ldr	r3, [r2, #4]
 8004f1c:	e7f2      	b.n	8004f04 <vListInsert+0x18>
 8004f1e:	bf00      	nop

08004f20 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f20:	6842      	ldr	r2, [r0, #4]
 8004f22:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004f24:	6903      	ldr	r3, [r0, #16]
{
 8004f26:	b410      	push	{r4}
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f28:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f2a:	6881      	ldr	r1, [r0, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f2c:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f2e:	604a      	str	r2, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8004f30:	681a      	ldr	r2, [r3, #0]
	if( pxList->pxIndex == pxItemToRemove )
 8004f32:	4284      	cmp	r4, r0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f34:	bf08      	it	eq
 8004f36:	6059      	streq	r1, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8004f38:	3a01      	subs	r2, #1
	pxItemToRemove->pvContainer = NULL;
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004f3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f40:	6818      	ldr	r0, [r3, #0]
}
 8004f42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f4c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f4e:	f000 fcf1 	bl	8005934 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f52:	4a35      	ldr	r2, [pc, #212]	; (8005028 <prvAddNewTaskToReadyList+0xe0>)
		if( pxCurrentTCB == NULL )
 8004f54:	4d35      	ldr	r5, [pc, #212]	; (800502c <prvAddNewTaskToReadyList+0xe4>)
		uxCurrentNumberOfTasks++;
 8004f56:	6813      	ldr	r3, [r2, #0]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f5c:	682b      	ldr	r3, [r5, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d034      	beq.n	8004fcc <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f62:	4f33      	ldr	r7, [pc, #204]	; (8005030 <prvAddNewTaskToReadyList+0xe8>)
 8004f64:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	b343      	cbz	r3, 8004fbc <prvAddNewTaskToReadyList+0x74>
 8004f6a:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8005054 <prvAddNewTaskToReadyList+0x10c>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f6e:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8005058 <prvAddNewTaskToReadyList+0x110>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f72:	4e30      	ldr	r6, [pc, #192]	; (8005034 <prvAddNewTaskToReadyList+0xec>)
		uxTaskNumber++;
 8004f74:	f8dc 2000 	ldr.w	r2, [ip]
		prvAddTaskToReadyList( pxNewTCB );
 8004f78:	6831      	ldr	r1, [r6, #0]
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	4083      	lsls	r3, r0
 8004f7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004f82:	430b      	orrs	r3, r1
		uxTaskNumber++;
 8004f84:	3201      	adds	r2, #1
		prvAddTaskToReadyList( pxNewTCB );
 8004f86:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8004f8a:	1d21      	adds	r1, r4, #4
 8004f8c:	6033      	str	r3, [r6, #0]
		uxTaskNumber++;
 8004f8e:	f8cc 2000 	str.w	r2, [ip]
		prvAddTaskToReadyList( pxNewTCB );
 8004f92:	f7ff ff9b 	bl	8004ecc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f96:	f000 fcef 	bl	8005978 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	b163      	cbz	r3, 8004fb8 <prvAddNewTaskToReadyList+0x70>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f9e:	682a      	ldr	r2, [r5, #0]
 8004fa0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004fa2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d207      	bcs.n	8004fb8 <prvAddNewTaskToReadyList+0x70>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004fa8:	4b23      	ldr	r3, [pc, #140]	; (8005038 <prvAddNewTaskToReadyList+0xf0>)
 8004faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004fbc:	682b      	ldr	r3, [r5, #0]
 8004fbe:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8005054 <prvAddNewTaskToReadyList+0x10c>
 8004fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc4:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8004fc6:	bf98      	it	ls
 8004fc8:	602c      	strls	r4, [r5, #0]
 8004fca:	e7d0      	b.n	8004f6e <prvAddNewTaskToReadyList+0x26>
			pxCurrentTCB = pxNewTCB;
 8004fcc:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004fce:	6813      	ldr	r3, [r2, #0]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d004      	beq.n	8004fde <prvAddNewTaskToReadyList+0x96>
 8004fd4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004fd6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8005054 <prvAddNewTaskToReadyList+0x10c>
 8004fda:	4f15      	ldr	r7, [pc, #84]	; (8005030 <prvAddNewTaskToReadyList+0xe8>)
 8004fdc:	e7c7      	b.n	8004f6e <prvAddNewTaskToReadyList+0x26>
 8004fde:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8005054 <prvAddNewTaskToReadyList+0x10c>
 8004fe2:	4646      	mov	r6, r8
 8004fe4:	f108 078c 	add.w	r7, r8, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004fe8:	4630      	mov	r0, r6
 8004fea:	3614      	adds	r6, #20
 8004fec:	f7ff ff5e 	bl	8004eac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ff0:	42b7      	cmp	r7, r6
 8004ff2:	d1f9      	bne.n	8004fe8 <prvAddNewTaskToReadyList+0xa0>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ff4:	f8df 9064 	ldr.w	r9, [pc, #100]	; 800505c <prvAddNewTaskToReadyList+0x114>
	vListInitialise( &xDelayedTaskList2 );
 8004ff8:	4e10      	ldr	r6, [pc, #64]	; (800503c <prvAddNewTaskToReadyList+0xf4>)
 8004ffa:	4f0d      	ldr	r7, [pc, #52]	; (8005030 <prvAddNewTaskToReadyList+0xe8>)
	vListInitialise( &xDelayedTaskList1 );
 8004ffc:	4648      	mov	r0, r9
 8004ffe:	f7ff ff55 	bl	8004eac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005002:	4630      	mov	r0, r6
 8005004:	f7ff ff52 	bl	8004eac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005008:	480d      	ldr	r0, [pc, #52]	; (8005040 <prvAddNewTaskToReadyList+0xf8>)
 800500a:	f7ff ff4f 	bl	8004eac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800500e:	480d      	ldr	r0, [pc, #52]	; (8005044 <prvAddNewTaskToReadyList+0xfc>)
 8005010:	f7ff ff4c 	bl	8004eac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005014:	480c      	ldr	r0, [pc, #48]	; (8005048 <prvAddNewTaskToReadyList+0x100>)
 8005016:	f7ff ff49 	bl	8004eac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800501a:	4a0c      	ldr	r2, [pc, #48]	; (800504c <prvAddNewTaskToReadyList+0x104>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800501c:	4b0c      	ldr	r3, [pc, #48]	; (8005050 <prvAddNewTaskToReadyList+0x108>)
	pxDelayedTaskList = &xDelayedTaskList1;
 800501e:	f8c2 9000 	str.w	r9, [r2]
 8005022:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005024:	601e      	str	r6, [r3, #0]
 8005026:	e7a2      	b.n	8004f6e <prvAddNewTaskToReadyList+0x26>
 8005028:	2000029c 	.word	0x2000029c
 800502c:	20000204 	.word	0x20000204
 8005030:	200002f8 	.word	0x200002f8
 8005034:	200002b0 	.word	0x200002b0
 8005038:	e000ed04 	.word	0xe000ed04
 800503c:	200002c8 	.word	0x200002c8
 8005040:	200002e4 	.word	0x200002e4
 8005044:	20000310 	.word	0x20000310
 8005048:	200002fc 	.word	0x200002fc
 800504c:	20000208 	.word	0x20000208
 8005050:	2000020c 	.word	0x2000020c
 8005054:	20000210 	.word	0x20000210
 8005058:	200002ac 	.word	0x200002ac
 800505c:	200002b4 	.word	0x200002b4

08005060 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005064:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005066:	780d      	ldrb	r5, [r1, #0]
 8005068:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800506c:	6b26      	ldr	r6, [r4, #48]	; 0x30
		if( pcName[ x ] == 0x00 )
 800506e:	f891 c000 	ldrb.w	ip, [r1]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005072:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005076:	3a01      	subs	r2, #1
 8005078:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800507c:	e9dd 5708 	ldrd	r5, r7, [sp, #32]
 8005080:	4681      	mov	r9, r0
 8005082:	469a      	mov	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005084:	f026 0607 	bic.w	r6, r6, #7
		if( pcName[ x ] == 0x00 )
 8005088:	f1bc 0f00 	cmp.w	ip, #0
 800508c:	d04d      	beq.n	800512a <prvInitialiseNewTask.isra.2+0xca>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800508e:	784b      	ldrb	r3, [r1, #1]
 8005090:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
 8005094:	784b      	ldrb	r3, [r1, #1]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d047      	beq.n	800512a <prvInitialiseNewTask.isra.2+0xca>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800509a:	788b      	ldrb	r3, [r1, #2]
 800509c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
 80050a0:	788b      	ldrb	r3, [r1, #2]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d041      	beq.n	800512a <prvInitialiseNewTask.isra.2+0xca>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050a6:	78cb      	ldrb	r3, [r1, #3]
 80050a8:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
 80050ac:	78cb      	ldrb	r3, [r1, #3]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d03b      	beq.n	800512a <prvInitialiseNewTask.isra.2+0xca>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050b2:	790b      	ldrb	r3, [r1, #4]
 80050b4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
 80050b8:	790b      	ldrb	r3, [r1, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d035      	beq.n	800512a <prvInitialiseNewTask.isra.2+0xca>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050be:	794b      	ldrb	r3, [r1, #5]
 80050c0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
 80050c4:	794b      	ldrb	r3, [r1, #5]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d02f      	beq.n	800512a <prvInitialiseNewTask.isra.2+0xca>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050ca:	798b      	ldrb	r3, [r1, #6]
 80050cc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
 80050d0:	798b      	ldrb	r3, [r1, #6]
 80050d2:	b353      	cbz	r3, 800512a <prvInitialiseNewTask.isra.2+0xca>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050d4:	79cb      	ldrb	r3, [r1, #7]
 80050d6:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
 80050da:	79cb      	ldrb	r3, [r1, #7]
 80050dc:	b32b      	cbz	r3, 800512a <prvInitialiseNewTask.isra.2+0xca>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050de:	7a0b      	ldrb	r3, [r1, #8]
 80050e0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if( pcName[ x ] == 0x00 )
 80050e4:	7a0b      	ldrb	r3, [r1, #8]
 80050e6:	b303      	cbz	r3, 800512a <prvInitialiseNewTask.isra.2+0xca>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050e8:	7a4b      	ldrb	r3, [r1, #9]
 80050ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		if( pcName[ x ] == 0x00 )
 80050ee:	7a4b      	ldrb	r3, [r1, #9]
 80050f0:	b1db      	cbz	r3, 800512a <prvInitialiseNewTask.isra.2+0xca>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050f2:	7a8b      	ldrb	r3, [r1, #10]
 80050f4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		if( pcName[ x ] == 0x00 )
 80050f8:	7a8b      	ldrb	r3, [r1, #10]
 80050fa:	b1b3      	cbz	r3, 800512a <prvInitialiseNewTask.isra.2+0xca>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050fc:	7acb      	ldrb	r3, [r1, #11]
 80050fe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
		if( pcName[ x ] == 0x00 )
 8005102:	7acb      	ldrb	r3, [r1, #11]
 8005104:	b18b      	cbz	r3, 800512a <prvInitialiseNewTask.isra.2+0xca>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005106:	7b0b      	ldrb	r3, [r1, #12]
 8005108:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
		if( pcName[ x ] == 0x00 )
 800510c:	7b0b      	ldrb	r3, [r1, #12]
 800510e:	b163      	cbz	r3, 800512a <prvInitialiseNewTask.isra.2+0xca>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005110:	7b4b      	ldrb	r3, [r1, #13]
 8005112:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		if( pcName[ x ] == 0x00 )
 8005116:	7b4b      	ldrb	r3, [r1, #13]
 8005118:	b13b      	cbz	r3, 800512a <prvInitialiseNewTask.isra.2+0xca>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800511a:	7b8b      	ldrb	r3, [r1, #14]
 800511c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		if( pcName[ x ] == 0x00 )
 8005120:	7b8b      	ldrb	r3, [r1, #14]
 8005122:	b113      	cbz	r3, 800512a <prvInitialiseNewTask.isra.2+0xca>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005124:	7bcb      	ldrb	r3, [r1, #15]
 8005126:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800512a:	2d06      	cmp	r5, #6
 800512c:	bf28      	it	cs
 800512e:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005130:	f04f 0800 	mov.w	r8, #0
	pxNewTCB->uxPriority = uxPriority;
 8005134:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005136:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005138:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800513a:	f884 8043 	strb.w	r8, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 800513e:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005142:	f7ff febf 	bl	8004ec4 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005146:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800514a:	f104 0018 	add.w	r0, r4, #24
 800514e:	f7ff feb9 	bl	8004ec4 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8005152:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005156:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005158:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800515a:	f884 8050 	strb.w	r8, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800515e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005160:	4652      	mov	r2, sl
 8005162:	4649      	mov	r1, r9
 8005164:	4630      	mov	r0, r6
 8005166:	f000 fbb9 	bl	80058dc <pxPortInitialiseStack>
 800516a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800516c:	b107      	cbz	r7, 8005170 <prvInitialiseNewTask.isra.2+0x110>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800516e:	603c      	str	r4, [r7, #0]
}
 8005170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005174 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005176:	4b1b      	ldr	r3, [pc, #108]	; (80051e4 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005178:	4e1b      	ldr	r6, [pc, #108]	; (80051e8 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800517a:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800517c:	6833      	ldr	r3, [r6, #0]
{
 800517e:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005180:	1d18      	adds	r0, r3, #4
{
 8005182:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005184:	f7ff fecc 	bl	8004f20 <uxListRemove>
 8005188:	b940      	cbnz	r0, 800519c <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800518a:	6833      	ldr	r3, [r6, #0]
 800518c:	4917      	ldr	r1, [pc, #92]	; (80051ec <prvAddCurrentTaskToDelayedList+0x78>)
 800518e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005190:	680b      	ldr	r3, [r1, #0]
 8005192:	2201      	movs	r2, #1
 8005194:	4082      	lsls	r2, r0
 8005196:	ea23 0302 	bic.w	r3, r3, r2
 800519a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800519c:	1c6b      	adds	r3, r5, #1
 800519e:	d017      	beq.n	80051d0 <prvAddCurrentTaskToDelayedList+0x5c>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051a0:	6833      	ldr	r3, [r6, #0]
 80051a2:	1964      	adds	r4, r4, r5
 80051a4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80051a6:	d20b      	bcs.n	80051c0 <prvAddCurrentTaskToDelayedList+0x4c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051a8:	4b11      	ldr	r3, [pc, #68]	; (80051f0 <prvAddCurrentTaskToDelayedList+0x7c>)
 80051aa:	6818      	ldr	r0, [r3, #0]
 80051ac:	6831      	ldr	r1, [r6, #0]
 80051ae:	3104      	adds	r1, #4
 80051b0:	f7ff fe9c 	bl	8004eec <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80051b4:	4b0f      	ldr	r3, [pc, #60]	; (80051f4 <prvAddCurrentTaskToDelayedList+0x80>)
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	42a2      	cmp	r2, r4
				{
					xNextTaskUnblockTime = xTimeToWake;
 80051ba:	bf88      	it	hi
 80051bc:	601c      	strhi	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051c0:	4b0d      	ldr	r3, [pc, #52]	; (80051f8 <prvAddCurrentTaskToDelayedList+0x84>)
 80051c2:	6818      	ldr	r0, [r3, #0]
 80051c4:	6831      	ldr	r1, [r6, #0]
}
 80051c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051ca:	3104      	adds	r1, #4
 80051cc:	f7ff be8e 	b.w	8004eec <vListInsert>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051d0:	2f00      	cmp	r7, #0
 80051d2:	d0e5      	beq.n	80051a0 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051d4:	6831      	ldr	r1, [r6, #0]
 80051d6:	4809      	ldr	r0, [pc, #36]	; (80051fc <prvAddCurrentTaskToDelayedList+0x88>)
 80051d8:	3104      	adds	r1, #4
}
 80051da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051de:	f7ff be75 	b.w	8004ecc <vListInsertEnd>
 80051e2:	bf00      	nop
 80051e4:	20000324 	.word	0x20000324
 80051e8:	20000204 	.word	0x20000204
 80051ec:	200002b0 	.word	0x200002b0
 80051f0:	20000208 	.word	0x20000208
 80051f4:	200002dc 	.word	0x200002dc
 80051f8:	2000020c 	.word	0x2000020c
 80051fc:	200002fc 	.word	0x200002fc

08005200 <prvIdleTask>:
{
 8005200:	f8df a090 	ldr.w	sl, [pc, #144]	; 8005294 <prvIdleTask+0x94>
 8005204:	4e21      	ldr	r6, [pc, #132]	; (800528c <prvIdleTask+0x8c>)
 8005206:	4d22      	ldr	r5, [pc, #136]	; (8005290 <prvIdleTask+0x90>)
 8005208:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8005298 <prvIdleTask+0x98>
				taskYIELD();
 800520c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800529c <prvIdleTask+0x9c>
{
 8005210:	b580      	push	{r7, lr}
				taskYIELD();
 8005212:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005216:	682b      	ldr	r3, [r5, #0]
 8005218:	b343      	cbz	r3, 800526c <prvIdleTask+0x6c>
			taskENTER_CRITICAL();
 800521a:	f000 fb8b 	bl	8005934 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800521e:	f8da 300c 	ldr.w	r3, [sl, #12]
 8005222:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005224:	1d20      	adds	r0, r4, #4
 8005226:	f7ff fe7b 	bl	8004f20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800522a:	6833      	ldr	r3, [r6, #0]
 800522c:	3b01      	subs	r3, #1
 800522e:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005230:	682b      	ldr	r3, [r5, #0]
 8005232:	3b01      	subs	r3, #1
 8005234:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 8005236:	f000 fb9f 	bl	8005978 <vPortExitCritical>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800523a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800523e:	b163      	cbz	r3, 800525a <prvIdleTask+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005240:	2b01      	cmp	r3, #1
 8005242:	d01e      	beq.n	8005282 <prvIdleTask+0x82>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005244:	2b02      	cmp	r3, #2
 8005246:	d0e6      	beq.n	8005216 <prvIdleTask+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	e7fe      	b.n	8005258 <prvIdleTask+0x58>
				vPortFree( pxTCB->pxStack );
 800525a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800525c:	f000 fd42 	bl	8005ce4 <vPortFree>
				vPortFree( pxTCB );
 8005260:	4620      	mov	r0, r4
 8005262:	f000 fd3f 	bl	8005ce4 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005266:	682b      	ldr	r3, [r5, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1d6      	bne.n	800521a <prvIdleTask+0x1a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800526c:	f8d9 3000 	ldr.w	r3, [r9]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d9d0      	bls.n	8005216 <prvIdleTask+0x16>
				taskYIELD();
 8005274:	f8c8 7000 	str.w	r7, [r8]
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	e7c9      	b.n	8005216 <prvIdleTask+0x16>
				vPortFree( pxTCB );
 8005282:	4620      	mov	r0, r4
 8005284:	f000 fd2e 	bl	8005ce4 <vPortFree>
 8005288:	e7c5      	b.n	8005216 <prvIdleTask+0x16>
 800528a:	bf00      	nop
 800528c:	2000029c 	.word	0x2000029c
 8005290:	200002a0 	.word	0x200002a0
 8005294:	20000310 	.word	0x20000310
 8005298:	20000210 	.word	0x20000210
 800529c:	e000ed04 	.word	0xe000ed04

080052a0 <xTaskCreateStatic>:
	{
 80052a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052a2:	b087      	sub	sp, #28
 80052a4:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 80052a8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
		configASSERT( puxStackBuffer != NULL );
 80052aa:	b1bd      	cbz	r5, 80052dc <xTaskCreateStatic+0x3c>
		configASSERT( pxTaskBuffer != NULL );
 80052ac:	b16c      	cbz	r4, 80052ca <xTaskCreateStatic+0x2a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80052ae:	2754      	movs	r7, #84	; 0x54
 80052b0:	9704      	str	r7, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052b2:	9f04      	ldr	r7, [sp, #16]
 80052b4:	2f54      	cmp	r7, #84	; 0x54
 80052b6:	d01a      	beq.n	80052ee <xTaskCreateStatic+0x4e>
 80052b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	e7fe      	b.n	80052c8 <xTaskCreateStatic+0x28>
 80052ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ce:	f383 8811 	msr	BASEPRI, r3
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	e7fe      	b.n	80052da <xTaskCreateStatic+0x3a>
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	e7fe      	b.n	80052ec <xTaskCreateStatic+0x4c>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80052ee:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80052f0:	2702      	movs	r7, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052f2:	ad05      	add	r5, sp, #20
 80052f4:	9402      	str	r4, [sp, #8]
 80052f6:	9600      	str	r6, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80052f8:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052fc:	9501      	str	r5, [sp, #4]
 80052fe:	f7ff feaf 	bl	8005060 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005302:	4620      	mov	r0, r4
 8005304:	f7ff fe20 	bl	8004f48 <prvAddNewTaskToReadyList>
	}
 8005308:	9805      	ldr	r0, [sp, #20]
 800530a:	b007      	add	sp, #28
 800530c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800530e:	bf00      	nop

08005310 <xTaskCreate>:
	{
 8005310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005314:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8005318:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800531a:	4650      	mov	r0, sl
	{
 800531c:	460d      	mov	r5, r1
 800531e:	4699      	mov	r9, r3
 8005320:	9f09      	ldr	r7, [sp, #36]	; 0x24
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005322:	f000 fc53 	bl	8005bcc <pvPortMalloc>
			if( pxStack != NULL )
 8005326:	2800      	cmp	r0, #0
 8005328:	f000 8096 	beq.w	8005458 <xTaskCreate+0x148>
 800532c:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800532e:	2054      	movs	r0, #84	; 0x54
 8005330:	f000 fc4c 	bl	8005bcc <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005334:	4604      	mov	r4, r0
 8005336:	2800      	cmp	r0, #0
 8005338:	f000 8087 	beq.w	800544a <xTaskCreate+0x13a>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800533c:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800533e:	6306      	str	r6, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005340:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005344:	782b      	ldrb	r3, [r5, #0]
 8005346:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800534a:	f1aa 0a04 	sub.w	sl, sl, #4
		if( pcName[ x ] == 0x00 )
 800534e:	782b      	ldrb	r3, [r5, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005350:	4456      	add	r6, sl
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005352:	f026 0607 	bic.w	r6, r6, #7
		if( pcName[ x ] == 0x00 )
 8005356:	2b00      	cmp	r3, #0
 8005358:	d04d      	beq.n	80053f6 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800535a:	786b      	ldrb	r3, [r5, #1]
 800535c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
 8005360:	786b      	ldrb	r3, [r5, #1]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d047      	beq.n	80053f6 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005366:	78ab      	ldrb	r3, [r5, #2]
 8005368:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
 800536c:	78ab      	ldrb	r3, [r5, #2]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d041      	beq.n	80053f6 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005372:	78eb      	ldrb	r3, [r5, #3]
 8005374:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
 8005378:	78eb      	ldrb	r3, [r5, #3]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d03b      	beq.n	80053f6 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800537e:	792b      	ldrb	r3, [r5, #4]
 8005380:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
 8005384:	792b      	ldrb	r3, [r5, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d035      	beq.n	80053f6 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800538a:	796b      	ldrb	r3, [r5, #5]
 800538c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
 8005390:	796b      	ldrb	r3, [r5, #5]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d02f      	beq.n	80053f6 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005396:	79ab      	ldrb	r3, [r5, #6]
 8005398:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
 800539c:	79ab      	ldrb	r3, [r5, #6]
 800539e:	b353      	cbz	r3, 80053f6 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053a0:	79eb      	ldrb	r3, [r5, #7]
 80053a2:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
 80053a6:	79eb      	ldrb	r3, [r5, #7]
 80053a8:	b32b      	cbz	r3, 80053f6 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053aa:	7a2b      	ldrb	r3, [r5, #8]
 80053ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
		if( pcName[ x ] == 0x00 )
 80053b0:	7a2b      	ldrb	r3, [r5, #8]
 80053b2:	b303      	cbz	r3, 80053f6 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053b4:	7a6b      	ldrb	r3, [r5, #9]
 80053b6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		if( pcName[ x ] == 0x00 )
 80053ba:	7a6b      	ldrb	r3, [r5, #9]
 80053bc:	b1db      	cbz	r3, 80053f6 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053be:	7aab      	ldrb	r3, [r5, #10]
 80053c0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
		if( pcName[ x ] == 0x00 )
 80053c4:	7aab      	ldrb	r3, [r5, #10]
 80053c6:	b1b3      	cbz	r3, 80053f6 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053c8:	7aeb      	ldrb	r3, [r5, #11]
 80053ca:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
		if( pcName[ x ] == 0x00 )
 80053ce:	7aeb      	ldrb	r3, [r5, #11]
 80053d0:	b18b      	cbz	r3, 80053f6 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053d2:	7b2b      	ldrb	r3, [r5, #12]
 80053d4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
		if( pcName[ x ] == 0x00 )
 80053d8:	7b2b      	ldrb	r3, [r5, #12]
 80053da:	b163      	cbz	r3, 80053f6 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053dc:	7b6b      	ldrb	r3, [r5, #13]
 80053de:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
		if( pcName[ x ] == 0x00 )
 80053e2:	7b6b      	ldrb	r3, [r5, #13]
 80053e4:	b13b      	cbz	r3, 80053f6 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053e6:	7bab      	ldrb	r3, [r5, #14]
 80053e8:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
		if( pcName[ x ] == 0x00 )
 80053ec:	7bab      	ldrb	r3, [r5, #14]
 80053ee:	b113      	cbz	r3, 80053f6 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053f0:	7beb      	ldrb	r3, [r5, #15]
 80053f2:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 80053f6:	9d08      	ldr	r5, [sp, #32]
 80053f8:	2d06      	cmp	r5, #6
 80053fa:	bf28      	it	cs
 80053fc:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053fe:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8005402:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005404:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005406:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005408:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 800540c:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005410:	f7ff fd58 	bl	8004ec4 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005414:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005418:	f104 0018 	add.w	r0, r4, #24
 800541c:	f7ff fd52 	bl	8004ec4 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8005420:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005424:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005426:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005428:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800542c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800542e:	464a      	mov	r2, r9
 8005430:	4641      	mov	r1, r8
 8005432:	4630      	mov	r0, r6
 8005434:	f000 fa52 	bl	80058dc <pxPortInitialiseStack>
 8005438:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800543a:	b107      	cbz	r7, 800543e <xTaskCreate+0x12e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800543c:	603c      	str	r4, [r7, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 800543e:	4620      	mov	r0, r4
 8005440:	f7ff fd82 	bl	8004f48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005444:	2001      	movs	r0, #1
	}
 8005446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					vPortFree( pxStack );
 800544a:	4630      	mov	r0, r6
 800544c:	f000 fc4a 	bl	8005ce4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 8005454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 800545c:	e7f3      	b.n	8005446 <xTaskCreate+0x136>
 800545e:	bf00      	nop

08005460 <vTaskStartScheduler>:
{
 8005460:	b530      	push	{r4, r5, lr}
 8005462:	b08b      	sub	sp, #44	; 0x2c
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005464:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005466:	aa07      	add	r2, sp, #28
 8005468:	a906      	add	r1, sp, #24
 800546a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800546c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005470:	f000 fc70 	bl	8005d54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005474:	e9dd 5305 	ldrd	r5, r3, [sp, #20]
		configASSERT( puxStackBuffer != NULL );
 8005478:	b1c3      	cbz	r3, 80054ac <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
 800547a:	b175      	cbz	r5, 800549a <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800547c:	2254      	movs	r2, #84	; 0x54
 800547e:	9208      	str	r2, [sp, #32]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005480:	9908      	ldr	r1, [sp, #32]
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005482:	9a07      	ldr	r2, [sp, #28]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005484:	2954      	cmp	r1, #84	; 0x54
 8005486:	d01a      	beq.n	80054be <vTaskStartScheduler+0x5e>
 8005488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	e7fe      	b.n	8005498 <vTaskStartScheduler+0x38>
 800549a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549e:	f383 8811 	msr	BASEPRI, r3
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	e7fe      	b.n	80054aa <vTaskStartScheduler+0x4a>
 80054ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	e7fe      	b.n	80054bc <vTaskStartScheduler+0x5c>
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054be:	2002      	movs	r0, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054c0:	a909      	add	r1, sp, #36	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054c2:	632b      	str	r3, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054c4:	f885 0051 	strb.w	r0, [r5, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054c8:	4623      	mov	r3, r4
 80054ca:	e9cd 4100 	strd	r4, r1, [sp]
 80054ce:	480f      	ldr	r0, [pc, #60]	; (800550c <vTaskStartScheduler+0xac>)
 80054d0:	490f      	ldr	r1, [pc, #60]	; (8005510 <vTaskStartScheduler+0xb0>)
 80054d2:	9502      	str	r5, [sp, #8]
 80054d4:	f7ff fdc4 	bl	8005060 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054d8:	4628      	mov	r0, r5
 80054da:	f7ff fd35 	bl	8004f48 <prvAddNewTaskToReadyList>
		return xReturn;
 80054de:	9b09      	ldr	r3, [sp, #36]	; 0x24
		if( xIdleTaskHandle != NULL )
 80054e0:	b193      	cbz	r3, 8005508 <vTaskStartScheduler+0xa8>
 80054e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80054f2:	4808      	ldr	r0, [pc, #32]	; (8005514 <vTaskStartScheduler+0xb4>)
		xSchedulerRunning = pdTRUE;
 80054f4:	4a08      	ldr	r2, [pc, #32]	; (8005518 <vTaskStartScheduler+0xb8>)
		xTickCount = ( TickType_t ) 0U;
 80054f6:	4b09      	ldr	r3, [pc, #36]	; (800551c <vTaskStartScheduler+0xbc>)
		xNextTaskUnblockTime = portMAX_DELAY;
 80054f8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		xSchedulerRunning = pdTRUE;
 80054fc:	2101      	movs	r1, #1
		xNextTaskUnblockTime = portMAX_DELAY;
 80054fe:	6005      	str	r5, [r0, #0]
		xSchedulerRunning = pdTRUE;
 8005500:	6011      	str	r1, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 8005502:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8005504:	f000 fab2 	bl	8005a6c <xPortStartScheduler>
}
 8005508:	b00b      	add	sp, #44	; 0x2c
 800550a:	bd30      	pop	{r4, r5, pc}
 800550c:	08005201 	.word	0x08005201
 8005510:	080096e0 	.word	0x080096e0
 8005514:	200002dc 	.word	0x200002dc
 8005518:	200002f8 	.word	0x200002f8
 800551c:	20000324 	.word	0x20000324

08005520 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005520:	4a02      	ldr	r2, [pc, #8]	; (800552c <vTaskSuspendAll+0xc>)
 8005522:	6813      	ldr	r3, [r2, #0]
 8005524:	3301      	adds	r3, #1
 8005526:	6013      	str	r3, [r2, #0]
}
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	200002a8 	.word	0x200002a8

08005530 <xTaskIncrementTick>:
{
 8005530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005534:	4b49      	ldr	r3, [pc, #292]	; (800565c <xTaskIncrementTick+0x12c>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	b9cb      	cbnz	r3, 800556e <xTaskIncrementTick+0x3e>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800553a:	4b49      	ldr	r3, [pc, #292]	; (8005660 <xTaskIncrementTick+0x130>)
 800553c:	681e      	ldr	r6, [r3, #0]
 800553e:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8005540:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005542:	b30e      	cbz	r6, 8005588 <xTaskIncrementTick+0x58>
 8005544:	f8df b138 	ldr.w	fp, [pc, #312]	; 8005680 <xTaskIncrementTick+0x150>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005548:	f8db 2000 	ldr.w	r2, [fp]
 800554c:	42b2      	cmp	r2, r6
 800554e:	d929      	bls.n	80055a4 <xTaskIncrementTick+0x74>
 8005550:	4f44      	ldr	r7, [pc, #272]	; (8005664 <xTaskIncrementTick+0x134>)
 8005552:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8005684 <xTaskIncrementTick+0x154>
BaseType_t xSwitchRequired = pdFALSE;
 8005556:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005558:	f8d8 3000 	ldr.w	r3, [r8]
 800555c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8005566:	2b02      	cmp	r3, #2
 8005568:	bf28      	it	cs
 800556a:	2501      	movcs	r5, #1
 800556c:	e004      	b.n	8005578 <xTaskIncrementTick+0x48>
		++uxPendedTicks;
 800556e:	4a3e      	ldr	r2, [pc, #248]	; (8005668 <xTaskIncrementTick+0x138>)
 8005570:	6813      	ldr	r3, [r2, #0]
 8005572:	3301      	adds	r3, #1
 8005574:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8005576:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
 8005578:	4b3c      	ldr	r3, [pc, #240]	; (800566c <xTaskIncrementTick+0x13c>)
 800557a:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 800557c:	2b00      	cmp	r3, #0
}
 800557e:	bf0c      	ite	eq
 8005580:	4628      	moveq	r0, r5
 8005582:	2001      	movne	r0, #1
 8005584:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8005588:	4c39      	ldr	r4, [pc, #228]	; (8005670 <xTaskIncrementTick+0x140>)
 800558a:	6823      	ldr	r3, [r4, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d048      	beq.n	8005624 <xTaskIncrementTick+0xf4>
 8005592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005596:	f383 8811 	msr	BASEPRI, r3
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	e7fe      	b.n	80055a2 <xTaskIncrementTick+0x72>
 80055a4:	4c32      	ldr	r4, [pc, #200]	; (8005670 <xTaskIncrementTick+0x140>)
 80055a6:	4f2f      	ldr	r7, [pc, #188]	; (8005664 <xTaskIncrementTick+0x134>)
 80055a8:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8005684 <xTaskIncrementTick+0x154>
BaseType_t xSwitchRequired = pdFALSE;
 80055ac:	2500      	movs	r5, #0
 80055ae:	e02d      	b.n	800560c <xTaskIncrementTick+0xdc>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80055b0:	6822      	ldr	r2, [r4, #0]
 80055b2:	68d2      	ldr	r2, [r2, #12]
 80055b4:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055bc:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 80055c0:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055c2:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 80055c4:	d32b      	bcc.n	800561e <xTaskIncrementTick+0xee>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055c6:	f7ff fcab 	bl	8004f20 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055ca:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055ce:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055d2:	b109      	cbz	r1, 80055d8 <xTaskIncrementTick+0xa8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055d4:	f7ff fca4 	bl	8004f20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055d8:	4a26      	ldr	r2, [pc, #152]	; (8005674 <xTaskIncrementTick+0x144>)
 80055da:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 80055de:	6813      	ldr	r3, [r2, #0]
 80055e0:	2101      	movs	r1, #1
 80055e2:	fa01 fc00 	lsl.w	ip, r1, r0
 80055e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80055ea:	4651      	mov	r1, sl
 80055ec:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80055f0:	ea4c 0c03 	orr.w	ip, ip, r3
 80055f4:	f8c2 c000 	str.w	ip, [r2]
 80055f8:	f7ff fc68 	bl	8004ecc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055fc:	f8d8 0000 	ldr.w	r0, [r8]
 8005600:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 8005604:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8005606:	4291      	cmp	r1, r2
 8005608:	bf28      	it	cs
 800560a:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800560c:	6822      	ldr	r2, [r4, #0]
 800560e:	6812      	ldr	r2, [r2, #0]
 8005610:	2a00      	cmp	r2, #0
 8005612:	d1cd      	bne.n	80055b0 <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005614:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005618:	f8cb 2000 	str.w	r2, [fp]
					break;
 800561c:	e79c      	b.n	8005558 <xTaskIncrementTick+0x28>
						xNextTaskUnblockTime = xItemValue;
 800561e:	f8cb 1000 	str.w	r1, [fp]
						break;
 8005622:	e799      	b.n	8005558 <xTaskIncrementTick+0x28>
			taskSWITCH_DELAYED_LISTS();
 8005624:	4b14      	ldr	r3, [pc, #80]	; (8005678 <xTaskIncrementTick+0x148>)
 8005626:	6821      	ldr	r1, [r4, #0]
 8005628:	4a14      	ldr	r2, [pc, #80]	; (800567c <xTaskIncrementTick+0x14c>)
 800562a:	6818      	ldr	r0, [r3, #0]
 800562c:	6020      	str	r0, [r4, #0]
 800562e:	6019      	str	r1, [r3, #0]
 8005630:	6813      	ldr	r3, [r2, #0]
 8005632:	3301      	adds	r3, #1
 8005634:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	b933      	cbnz	r3, 800564a <xTaskIncrementTick+0x11a>
		xNextTaskUnblockTime = portMAX_DELAY;
 800563c:	f8df b040 	ldr.w	fp, [pc, #64]	; 8005680 <xTaskIncrementTick+0x150>
 8005640:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005644:	f8cb 2000 	str.w	r2, [fp]
 8005648:	e77e      	b.n	8005548 <xTaskIncrementTick+0x18>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800564a:	6822      	ldr	r2, [r4, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800564c:	f8df b030 	ldr.w	fp, [pc, #48]	; 8005680 <xTaskIncrementTick+0x150>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005650:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005652:	68d2      	ldr	r2, [r2, #12]
 8005654:	6852      	ldr	r2, [r2, #4]
 8005656:	f8cb 2000 	str.w	r2, [fp]
 800565a:	e775      	b.n	8005548 <xTaskIncrementTick+0x18>
 800565c:	200002a8 	.word	0x200002a8
 8005660:	20000324 	.word	0x20000324
 8005664:	20000210 	.word	0x20000210
 8005668:	200002a4 	.word	0x200002a4
 800566c:	20000328 	.word	0x20000328
 8005670:	20000208 	.word	0x20000208
 8005674:	200002b0 	.word	0x200002b0
 8005678:	2000020c 	.word	0x2000020c
 800567c:	200002e0 	.word	0x200002e0
 8005680:	200002dc 	.word	0x200002dc
 8005684:	20000204 	.word	0x20000204

08005688 <xTaskResumeAll>:
{
 8005688:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 800568c:	4c38      	ldr	r4, [pc, #224]	; (8005770 <xTaskResumeAll+0xe8>)
 800568e:	6823      	ldr	r3, [r4, #0]
 8005690:	b943      	cbnz	r3, 80056a4 <xTaskResumeAll+0x1c>
 8005692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005696:	f383 8811 	msr	BASEPRI, r3
 800569a:	f3bf 8f6f 	isb	sy
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	e7fe      	b.n	80056a2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80056a4:	f000 f946 	bl	8005934 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80056a8:	6823      	ldr	r3, [r4, #0]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056ae:	6824      	ldr	r4, [r4, #0]
 80056b0:	bb7c      	cbnz	r4, 8005712 <xTaskResumeAll+0x8a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056b2:	4b30      	ldr	r3, [pc, #192]	; (8005774 <xTaskResumeAll+0xec>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	b363      	cbz	r3, 8005712 <xTaskResumeAll+0x8a>
 80056b8:	4d2f      	ldr	r5, [pc, #188]	; (8005778 <xTaskResumeAll+0xf0>)
 80056ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005790 <xTaskResumeAll+0x108>
					prvAddTaskToReadyList( pxTCB );
 80056be:	4e2f      	ldr	r6, [pc, #188]	; (800577c <xTaskResumeAll+0xf4>)
 80056c0:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8005794 <xTaskResumeAll+0x10c>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056c4:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8005798 <xTaskResumeAll+0x110>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056c8:	f8da 3000 	ldr.w	r3, [sl]
					prvAddTaskToReadyList( pxTCB );
 80056cc:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056ce:	b333      	cbz	r3, 800571e <xTaskResumeAll+0x96>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80056d0:	f8da 300c 	ldr.w	r3, [sl, #12]
 80056d4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056d6:	f104 0804 	add.w	r8, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056da:	f104 0018 	add.w	r0, r4, #24
 80056de:	f7ff fc1f 	bl	8004f20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056e2:	4640      	mov	r0, r8
 80056e4:	f7ff fc1c 	bl	8004f20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056e8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80056ea:	6832      	ldr	r2, [r6, #0]
 80056ec:	fa07 f300 	lsl.w	r3, r7, r0
 80056f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80056f4:	4313      	orrs	r3, r2
 80056f6:	4641      	mov	r1, r8
 80056f8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80056fc:	6033      	str	r3, [r6, #0]
 80056fe:	f7ff fbe5 	bl	8004ecc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005702:	f8db 3000 	ldr.w	r3, [fp]
 8005706:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570a:	429a      	cmp	r2, r3
 800570c:	d3dc      	bcc.n	80056c8 <xTaskResumeAll+0x40>
						xYieldPending = pdTRUE;
 800570e:	602f      	str	r7, [r5, #0]
 8005710:	e7da      	b.n	80056c8 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 8005712:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005714:	f000 f930 	bl	8005978 <vPortExitCritical>
}
 8005718:	4620      	mov	r0, r4
 800571a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxTCB != NULL )
 800571e:	b13c      	cbz	r4, 8005730 <xTaskResumeAll+0xa8>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005720:	4b17      	ldr	r3, [pc, #92]	; (8005780 <xTaskResumeAll+0xf8>)
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	6812      	ldr	r2, [r2, #0]
 8005726:	b9da      	cbnz	r2, 8005760 <xTaskResumeAll+0xd8>
		xNextTaskUnblockTime = portMAX_DELAY;
 8005728:	4b16      	ldr	r3, [pc, #88]	; (8005784 <xTaskResumeAll+0xfc>)
 800572a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800572e:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005730:	4e15      	ldr	r6, [pc, #84]	; (8005788 <xTaskResumeAll+0x100>)
 8005732:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005734:	b13c      	cbz	r4, 8005746 <xTaskResumeAll+0xbe>
								xYieldPending = pdTRUE;
 8005736:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8005738:	f7ff fefa 	bl	8005530 <xTaskIncrementTick>
 800573c:	b100      	cbz	r0, 8005740 <xTaskResumeAll+0xb8>
								xYieldPending = pdTRUE;
 800573e:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005740:	3c01      	subs	r4, #1
 8005742:	d1f9      	bne.n	8005738 <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 8005744:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8005746:	682b      	ldr	r3, [r5, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d0e2      	beq.n	8005712 <xTaskResumeAll+0x8a>
					taskYIELD_IF_USING_PREEMPTION();
 800574c:	4b0f      	ldr	r3, [pc, #60]	; (800578c <xTaskResumeAll+0x104>)
 800574e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800575c:	2401      	movs	r4, #1
 800575e:	e7d9      	b.n	8005714 <xTaskResumeAll+0x8c>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005760:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005762:	4b08      	ldr	r3, [pc, #32]	; (8005784 <xTaskResumeAll+0xfc>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005764:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005766:	68d2      	ldr	r2, [r2, #12]
 8005768:	6852      	ldr	r2, [r2, #4]
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	e7e0      	b.n	8005730 <xTaskResumeAll+0xa8>
 800576e:	bf00      	nop
 8005770:	200002a8 	.word	0x200002a8
 8005774:	2000029c 	.word	0x2000029c
 8005778:	20000328 	.word	0x20000328
 800577c:	200002b0 	.word	0x200002b0
 8005780:	20000208 	.word	0x20000208
 8005784:	200002dc 	.word	0x200002dc
 8005788:	200002a4 	.word	0x200002a4
 800578c:	e000ed04 	.word	0xe000ed04
 8005790:	200002e4 	.word	0x200002e4
 8005794:	20000210 	.word	0x20000210
 8005798:	20000204 	.word	0x20000204

0800579c <vTaskDelay>:
	{
 800579c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800579e:	b198      	cbz	r0, 80057c8 <vTaskDelay+0x2c>
			configASSERT( uxSchedulerSuspended == 0 );
 80057a0:	4b0e      	ldr	r3, [pc, #56]	; (80057dc <vTaskDelay+0x40>)
 80057a2:	6819      	ldr	r1, [r3, #0]
 80057a4:	b141      	cbz	r1, 80057b8 <vTaskDelay+0x1c>
 80057a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	e7fe      	b.n	80057b6 <vTaskDelay+0x1a>
	++uxSchedulerSuspended;
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	3201      	adds	r2, #1
 80057bc:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057be:	f7ff fcd9 	bl	8005174 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80057c2:	f7ff ff61 	bl	8005688 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80057c6:	b938      	cbnz	r0, 80057d8 <vTaskDelay+0x3c>
			portYIELD_WITHIN_API();
 80057c8:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <vTaskDelay+0x44>)
 80057ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	f3bf 8f6f 	isb	sy
	}
 80057d8:	bd08      	pop	{r3, pc}
 80057da:	bf00      	nop
 80057dc:	200002a8 	.word	0x200002a8
 80057e0:	e000ed04 	.word	0xe000ed04

080057e4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057e4:	4b19      	ldr	r3, [pc, #100]	; (800584c <vTaskSwitchContext+0x68>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	b9eb      	cbnz	r3, 8005826 <vTaskSwitchContext+0x42>
		xYieldPending = pdFALSE;
 80057ea:	4919      	ldr	r1, [pc, #100]	; (8005850 <vTaskSwitchContext+0x6c>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80057ec:	4a19      	ldr	r2, [pc, #100]	; (8005854 <vTaskSwitchContext+0x70>)
{
 80057ee:	b410      	push	{r4}
		xYieldPending = pdFALSE;
 80057f0:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80057f2:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80057f4:	fab3 f383 	clz	r3, r3
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	f1c3 031f 	rsb	r3, r3, #31
 80057fe:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005802:	0092      	lsls	r2, r2, #2
 8005804:	4814      	ldr	r0, [pc, #80]	; (8005858 <vTaskSwitchContext+0x74>)
 8005806:	5881      	ldr	r1, [r0, r2]
 8005808:	1884      	adds	r4, r0, r2
 800580a:	b181      	cbz	r1, 800582e <vTaskSwitchContext+0x4a>
 800580c:	6861      	ldr	r1, [r4, #4]
 800580e:	3208      	adds	r2, #8
 8005810:	6849      	ldr	r1, [r1, #4]
 8005812:	6061      	str	r1, [r4, #4]
 8005814:	4402      	add	r2, r0
 8005816:	4291      	cmp	r1, r2
 8005818:	d012      	beq.n	8005840 <vTaskSwitchContext+0x5c>
 800581a:	4b10      	ldr	r3, [pc, #64]	; (800585c <vTaskSwitchContext+0x78>)
 800581c:	68ca      	ldr	r2, [r1, #12]
 800581e:	601a      	str	r2, [r3, #0]
}
 8005820:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005824:	4770      	bx	lr
		xYieldPending = pdTRUE;
 8005826:	4b0a      	ldr	r3, [pc, #40]	; (8005850 <vTaskSwitchContext+0x6c>)
 8005828:	2201      	movs	r2, #1
 800582a:	601a      	str	r2, [r3, #0]
 800582c:	4770      	bx	lr
	__asm volatile
 800582e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	e7fe      	b.n	800583e <vTaskSwitchContext+0x5a>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005840:	2214      	movs	r2, #20
 8005842:	fb02 0303 	mla	r3, r2, r3, r0
 8005846:	6849      	ldr	r1, [r1, #4]
 8005848:	6059      	str	r1, [r3, #4]
 800584a:	e7e6      	b.n	800581a <vTaskSwitchContext+0x36>
 800584c:	200002a8 	.word	0x200002a8
 8005850:	20000328 	.word	0x20000328
 8005854:	200002b0 	.word	0x200002b0
 8005858:	20000210 	.word	0x20000210
 800585c:	20000204 	.word	0x20000204

08005860 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005860:	4b0e      	ldr	r3, [pc, #56]	; (800589c <prvTaskExitError+0x3c>)
 8005862:	681b      	ldr	r3, [r3, #0]
{
 8005864:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8005866:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8005868:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 800586a:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800586c:	d008      	beq.n	8005880 <prvTaskExitError+0x20>
 800586e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	e7fe      	b.n	800587e <prvTaskExitError+0x1e>
 8005880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005890:	9b01      	ldr	r3, [sp, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0fc      	beq.n	8005890 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005896:	b002      	add	sp, #8
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	20000118 	.word	0x20000118

080058a0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80058a0:	4808      	ldr	r0, [pc, #32]	; (80058c4 <prvPortStartFirstTask+0x24>)
 80058a2:	6800      	ldr	r0, [r0, #0]
 80058a4:	6800      	ldr	r0, [r0, #0]
 80058a6:	f380 8808 	msr	MSP, r0
 80058aa:	f04f 0000 	mov.w	r0, #0
 80058ae:	f380 8814 	msr	CONTROL, r0
 80058b2:	b662      	cpsie	i
 80058b4:	b661      	cpsie	f
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	df00      	svc	0
 80058c0:	bf00      	nop
 80058c2:	0000      	.short	0x0000
 80058c4:	e000ed08 	.word	0xe000ed08

080058c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80058c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80058d8 <vPortEnableVFP+0x10>
 80058cc:	6801      	ldr	r1, [r0, #0]
 80058ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80058d2:	6001      	str	r1, [r0, #0]
 80058d4:	4770      	bx	lr
 80058d6:	0000      	.short	0x0000
 80058d8:	e000ed88 	.word	0xe000ed88

080058dc <pxPortInitialiseStack>:
{
 80058dc:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80058de:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80058e2:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058e6:	4c07      	ldr	r4, [pc, #28]	; (8005904 <pxPortInitialiseStack+0x28>)
 80058e8:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80058ec:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80058f0:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80058f4:	e940 1502 	strd	r1, r5, [r0, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80058f8:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80058fc:	bc30      	pop	{r4, r5}
 80058fe:	3844      	subs	r0, #68	; 0x44
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	08005861 	.word	0x08005861
	...

08005910 <SVC_Handler>:
	__asm volatile (
 8005910:	4b07      	ldr	r3, [pc, #28]	; (8005930 <pxCurrentTCBConst2>)
 8005912:	6819      	ldr	r1, [r3, #0]
 8005914:	6808      	ldr	r0, [r1, #0]
 8005916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591a:	f380 8809 	msr	PSP, r0
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f04f 0000 	mov.w	r0, #0
 8005926:	f380 8811 	msr	BASEPRI, r0
 800592a:	4770      	bx	lr
 800592c:	f3af 8000 	nop.w

08005930 <pxCurrentTCBConst2>:
 8005930:	20000204 	.word	0x20000204

08005934 <vPortEnterCritical>:
 8005934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8005944:	4a0a      	ldr	r2, [pc, #40]	; (8005970 <vPortEnterCritical+0x3c>)
 8005946:	6813      	ldr	r3, [r2, #0]
 8005948:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800594a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800594c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800594e:	d000      	beq.n	8005952 <vPortEnterCritical+0x1e>
}
 8005950:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005952:	4b08      	ldr	r3, [pc, #32]	; (8005974 <vPortEnterCritical+0x40>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f013 0fff 	tst.w	r3, #255	; 0xff
 800595a:	d0f9      	beq.n	8005950 <vPortEnterCritical+0x1c>
 800595c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	e7fe      	b.n	800596c <vPortEnterCritical+0x38>
 800596e:	bf00      	nop
 8005970:	20000118 	.word	0x20000118
 8005974:	e000ed04 	.word	0xe000ed04

08005978 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005978:	4a08      	ldr	r2, [pc, #32]	; (800599c <vPortExitCritical+0x24>)
 800597a:	6813      	ldr	r3, [r2, #0]
 800597c:	b943      	cbnz	r3, 8005990 <vPortExitCritical+0x18>
 800597e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	e7fe      	b.n	800598e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8005990:	3b01      	subs	r3, #1
 8005992:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005994:	b90b      	cbnz	r3, 800599a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005996:	f383 8811 	msr	BASEPRI, r3
}
 800599a:	4770      	bx	lr
 800599c:	20000118 	.word	0x20000118

080059a0 <PendSV_Handler>:
	__asm volatile
 80059a0:	f3ef 8009 	mrs	r0, PSP
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	4b15      	ldr	r3, [pc, #84]	; (8005a00 <pxCurrentTCBConst>)
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	f01e 0f10 	tst.w	lr, #16
 80059b0:	bf08      	it	eq
 80059b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80059b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ba:	6010      	str	r0, [r2, #0]
 80059bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80059c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80059c4:	f380 8811 	msr	BASEPRI, r0
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f7ff ff08 	bl	80057e4 <vTaskSwitchContext>
 80059d4:	f04f 0000 	mov.w	r0, #0
 80059d8:	f380 8811 	msr	BASEPRI, r0
 80059dc:	bc09      	pop	{r0, r3}
 80059de:	6819      	ldr	r1, [r3, #0]
 80059e0:	6808      	ldr	r0, [r1, #0]
 80059e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e6:	f01e 0f10 	tst.w	lr, #16
 80059ea:	bf08      	it	eq
 80059ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80059f0:	f380 8809 	msr	PSP, r0
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	f3af 8000 	nop.w

08005a00 <pxCurrentTCBConst>:
 8005a00:	20000204 	.word	0x20000204

08005a04 <SysTick_Handler>:
{
 8005a04:	b508      	push	{r3, lr}
	__asm volatile
 8005a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0a:	f383 8811 	msr	BASEPRI, r3
 8005a0e:	f3bf 8f6f 	isb	sy
 8005a12:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8005a16:	f7ff fd8b 	bl	8005530 <xTaskIncrementTick>
 8005a1a:	b118      	cbz	r0, 8005a24 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a1c:	4b03      	ldr	r3, [pc, #12]	; (8005a2c <SysTick_Handler+0x28>)
 8005a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a22:	601a      	str	r2, [r3, #0]
	__asm volatile
 8005a24:	2300      	movs	r3, #0
 8005a26:	f383 8811 	msr	BASEPRI, r3
}
 8005a2a:	bd08      	pop	{r3, pc}
 8005a2c:	e000ed04 	.word	0xe000ed04

08005a30 <vPortSetupTimerInterrupt>:
{
 8005a30:	b430      	push	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a32:	4a09      	ldr	r2, [pc, #36]	; (8005a58 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a34:	4d09      	ldr	r5, [pc, #36]	; (8005a5c <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a36:	4b0a      	ldr	r3, [pc, #40]	; (8005a60 <vPortSetupTimerInterrupt+0x30>)
 8005a38:	4c0a      	ldr	r4, [pc, #40]	; (8005a64 <vPortSetupTimerInterrupt+0x34>)
 8005a3a:	480b      	ldr	r0, [pc, #44]	; (8005a68 <vPortSetupTimerInterrupt+0x38>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a40:	6029      	str	r1, [r5, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	fba4 1303 	umull	r1, r3, r4, r3
 8005a48:	099b      	lsrs	r3, r3, #6
 8005a4a:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a4c:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a4e:	6003      	str	r3, [r0, #0]
}
 8005a50:	bc30      	pop	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a52:	6011      	str	r1, [r2, #0]
}
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	e000e010 	.word	0xe000e010
 8005a5c:	e000e018 	.word	0xe000e018
 8005a60:	2000011c 	.word	0x2000011c
 8005a64:	10624dd3 	.word	0x10624dd3
 8005a68:	e000e014 	.word	0xe000e014

08005a6c <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a6c:	4b3a      	ldr	r3, [pc, #232]	; (8005b58 <xPortStartScheduler+0xec>)
 8005a6e:	4a3b      	ldr	r2, [pc, #236]	; (8005b5c <xPortStartScheduler+0xf0>)
 8005a70:	6819      	ldr	r1, [r3, #0]
 8005a72:	4291      	cmp	r1, r2
 8005a74:	d040      	beq.n	8005af8 <xPortStartScheduler+0x8c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	4b39      	ldr	r3, [pc, #228]	; (8005b60 <xPortStartScheduler+0xf4>)
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d033      	beq.n	8005ae6 <xPortStartScheduler+0x7a>
{
 8005a7e:	b510      	push	{r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a80:	4b38      	ldr	r3, [pc, #224]	; (8005b64 <xPortStartScheduler+0xf8>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a82:	4839      	ldr	r0, [pc, #228]	; (8005b68 <xPortStartScheduler+0xfc>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a84:	781a      	ldrb	r2, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a86:	4c39      	ldr	r4, [pc, #228]	; (8005b6c <xPortStartScheduler+0x100>)
{
 8005a88:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a8a:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a8c:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a8e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a90:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a9a:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a9e:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005aa2:	2107      	movs	r1, #7
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005aa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005aa8:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005aaa:	0611      	lsls	r1, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005aac:	7023      	strb	r3, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005aae:	d511      	bpl.n	8005ad4 <xPortStartScheduler+0x68>
 8005ab0:	2306      	movs	r3, #6
 8005ab2:	e000      	b.n	8005ab6 <xPortStartScheduler+0x4a>
 8005ab4:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ab6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8005aba:	0052      	lsls	r2, r2, #1
 8005abc:	b2d2      	uxtb	r2, r2
 8005abe:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ac2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8005ac6:	0612      	lsls	r2, r2, #24
 8005ac8:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8005acc:	d4f2      	bmi.n	8005ab4 <xPortStartScheduler+0x48>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ace:	2b03      	cmp	r3, #3
 8005ad0:	6003      	str	r3, [r0, #0]
 8005ad2:	d01a      	beq.n	8005b0a <xPortStartScheduler+0x9e>
	__asm volatile
 8005ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	e7fe      	b.n	8005ae4 <xPortStartScheduler+0x78>
 8005ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	e7fe      	b.n	8005af6 <xPortStartScheduler+0x8a>
 8005af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	e7fe      	b.n	8005b08 <xPortStartScheduler+0x9c>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b0a:	9901      	ldr	r1, [sp, #4]
 8005b0c:	4c15      	ldr	r4, [pc, #84]	; (8005b64 <xPortStartScheduler+0xf8>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b0e:	4a18      	ldr	r2, [pc, #96]	; (8005b70 <xPortStartScheduler+0x104>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b10:	021b      	lsls	r3, r3, #8
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b12:	b2c9      	uxtb	r1, r1
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b18:	6003      	str	r3, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b1a:	7021      	strb	r1, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b1c:	6813      	ldr	r3, [r2, #0]
 8005b1e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b22:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b24:	6813      	ldr	r3, [r2, #0]
 8005b26:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b2a:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 8005b2c:	f7ff ff80 	bl	8005a30 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005b30:	4b10      	ldr	r3, [pc, #64]	; (8005b74 <xPortStartScheduler+0x108>)
 8005b32:	2400      	movs	r4, #0
 8005b34:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8005b36:	f7ff fec7 	bl	80058c8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b3a:	4a0f      	ldr	r2, [pc, #60]	; (8005b78 <xPortStartScheduler+0x10c>)
 8005b3c:	6813      	ldr	r3, [r2, #0]
 8005b3e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005b42:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8005b44:	f7ff feac 	bl	80058a0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8005b48:	f7ff fe4c 	bl	80057e4 <vTaskSwitchContext>
	prvTaskExitError();
 8005b4c:	f7ff fe88 	bl	8005860 <prvTaskExitError>
}
 8005b50:	4620      	mov	r0, r4
 8005b52:	b002      	add	sp, #8
 8005b54:	bd10      	pop	{r4, pc}
 8005b56:	bf00      	nop
 8005b58:	e000ed00 	.word	0xe000ed00
 8005b5c:	410fc271 	.word	0x410fc271
 8005b60:	410fc270 	.word	0x410fc270
 8005b64:	e000e400 	.word	0xe000e400
 8005b68:	20000330 	.word	0x20000330
 8005b6c:	2000032c 	.word	0x2000032c
 8005b70:	e000ed20 	.word	0xe000ed20
 8005b74:	20000118 	.word	0x20000118
 8005b78:	e000ef34 	.word	0xe000ef34

08005b7c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b7c:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b7e:	4b11      	ldr	r3, [pc, #68]	; (8005bc4 <prvInsertBlockIntoFreeList+0x48>)
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	4282      	cmp	r2, r0
 8005b84:	d201      	bcs.n	8005b8a <prvInsertBlockIntoFreeList+0xe>
 8005b86:	4613      	mov	r3, r2
 8005b88:	e7fa      	b.n	8005b80 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b8a:	685c      	ldr	r4, [r3, #4]
 8005b8c:	1919      	adds	r1, r3, r4
 8005b8e:	4288      	cmp	r0, r1
 8005b90:	d103      	bne.n	8005b9a <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b92:	6841      	ldr	r1, [r0, #4]
 8005b94:	4421      	add	r1, r4
 8005b96:	6059      	str	r1, [r3, #4]
 8005b98:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b9a:	6844      	ldr	r4, [r0, #4]
 8005b9c:	1901      	adds	r1, r0, r4
 8005b9e:	428a      	cmp	r2, r1
 8005ba0:	d109      	bne.n	8005bb6 <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ba2:	4909      	ldr	r1, [pc, #36]	; (8005bc8 <prvInsertBlockIntoFreeList+0x4c>)
 8005ba4:	6809      	ldr	r1, [r1, #0]
 8005ba6:	428a      	cmp	r2, r1
 8005ba8:	d005      	beq.n	8005bb6 <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005baa:	e9d2 2100 	ldrd	r2, r1, [r2]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005bae:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005bb0:	6002      	str	r2, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005bb2:	6041      	str	r1, [r0, #4]
 8005bb4:	e000      	b.n	8005bb8 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005bb6:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005bb8:	4298      	cmp	r0, r3
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005bba:	bf18      	it	ne
 8005bbc:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	20003f44 	.word	0x20003f44
 8005bc8:	20000334 	.word	0x20000334

08005bcc <pvPortMalloc>:
{
 8005bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxEnd == NULL )
 8005bce:	4d3e      	ldr	r5, [pc, #248]	; (8005cc8 <pvPortMalloc+0xfc>)
{
 8005bd0:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005bd2:	f7ff fca5 	bl	8005520 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005bd6:	682a      	ldr	r2, [r5, #0]
 8005bd8:	2a00      	cmp	r2, #0
 8005bda:	d056      	beq.n	8005c8a <pvPortMalloc+0xbe>
 8005bdc:	4b3b      	ldr	r3, [pc, #236]	; (8005ccc <pvPortMalloc+0x100>)
 8005bde:	681d      	ldr	r5, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005be0:	422c      	tst	r4, r5
 8005be2:	d14d      	bne.n	8005c80 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 8005be4:	2c00      	cmp	r4, #0
 8005be6:	d04b      	beq.n	8005c80 <pvPortMalloc+0xb4>
				xWantedSize += xHeapStructSize;
 8005be8:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005bec:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005bee:	bf1c      	itt	ne
 8005bf0:	f023 0307 	bicne.w	r3, r3, #7
 8005bf4:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d042      	beq.n	8005c80 <pvPortMalloc+0xb4>
 8005bfa:	4f35      	ldr	r7, [pc, #212]	; (8005cd0 <pvPortMalloc+0x104>)
 8005bfc:	683e      	ldr	r6, [r7, #0]
 8005bfe:	429e      	cmp	r6, r3
 8005c00:	d33e      	bcc.n	8005c80 <pvPortMalloc+0xb4>
				pxBlock = xStart.pxNextFreeBlock;
 8005c02:	4834      	ldr	r0, [pc, #208]	; (8005cd4 <pvPortMalloc+0x108>)
 8005c04:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c06:	e006      	b.n	8005c16 <pvPortMalloc+0x4a>
 8005c08:	f8d4 c000 	ldr.w	ip, [r4]
 8005c0c:	f1bc 0f00 	cmp.w	ip, #0
 8005c10:	d004      	beq.n	8005c1c <pvPortMalloc+0x50>
 8005c12:	4620      	mov	r0, r4
 8005c14:	4664      	mov	r4, ip
 8005c16:	6861      	ldr	r1, [r4, #4]
 8005c18:	4299      	cmp	r1, r3
 8005c1a:	d3f5      	bcc.n	8005c08 <pvPortMalloc+0x3c>
				if( pxBlock != pxEnd )
 8005c1c:	4294      	cmp	r4, r2
 8005c1e:	d02f      	beq.n	8005c80 <pvPortMalloc+0xb4>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c20:	6822      	ldr	r2, [r4, #0]
 8005c22:	6002      	str	r2, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c24:	1aca      	subs	r2, r1, r3
 8005c26:	2a10      	cmp	r2, #16
 8005c28:	d910      	bls.n	8005c4c <pvPortMalloc+0x80>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c2a:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c2c:	0741      	lsls	r1, r0, #29
 8005c2e:	d008      	beq.n	8005c42 <pvPortMalloc+0x76>
 8005c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	e7fe      	b.n	8005c40 <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c42:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c44:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c46:	f7ff ff99 	bl	8005b7c <prvInsertBlockIntoFreeList>
 8005c4a:	6861      	ldr	r1, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c4c:	4a22      	ldr	r2, [pc, #136]	; (8005cd8 <pvPortMalloc+0x10c>)
 8005c4e:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c50:	1a76      	subs	r6, r6, r1
					pxBlock->pxNextFreeBlock = NULL;
 8005c52:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c54:	4329      	orrs	r1, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c56:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8005c58:	e9c4 3100 	strd	r3, r1, [r4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c5c:	f104 0408 	add.w	r4, r4, #8
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c60:	bf38      	it	cc
 8005c62:	6016      	strcc	r6, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c64:	603e      	str	r6, [r7, #0]
	( void ) xTaskResumeAll();
 8005c66:	f7ff fd0f 	bl	8005688 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c6a:	0763      	lsls	r3, r4, #29
 8005c6c:	d00b      	beq.n	8005c86 <pvPortMalloc+0xba>
 8005c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	e7fe      	b.n	8005c7e <pvPortMalloc+0xb2>
	( void ) xTaskResumeAll();
 8005c80:	f7ff fd02 	bl	8005688 <xTaskResumeAll>
 8005c84:	2400      	movs	r4, #0
}
 8005c86:	4620      	mov	r0, r4
 8005c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uxAddress = ( size_t ) ucHeap;
 8005c8a:	4b14      	ldr	r3, [pc, #80]	; (8005cdc <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 8005c8c:	4a14      	ldr	r2, [pc, #80]	; (8005ce0 <pvPortMalloc+0x114>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c8e:	4911      	ldr	r1, [pc, #68]	; (8005cd4 <pvPortMalloc+0x108>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c90:	4f11      	ldr	r7, [pc, #68]	; (8005cd8 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c92:	075e      	lsls	r6, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c94:	bf18      	it	ne
 8005c96:	3307      	addne	r3, #7
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c98:	f022 0207 	bic.w	r2, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c9c:	bf18      	it	ne
 8005c9e:	f023 0307 	bicne.w	r3, r3, #7
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ca2:	4e0b      	ldr	r6, [pc, #44]	; (8005cd0 <pvPortMalloc+0x104>)
	pxEnd = ( void * ) uxAddress;
 8005ca4:	602a      	str	r2, [r5, #0]
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ca6:	4618      	mov	r0, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ca8:	1ad3      	subs	r3, r2, r3
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005caa:	4d08      	ldr	r5, [pc, #32]	; (8005ccc <pvPortMalloc+0x100>)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cac:	6033      	str	r3, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cae:	2600      	movs	r6, #0
 8005cb0:	e9c1 0600 	strd	r0, r6, [r1]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005cb4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
	pxEnd->pxNextFreeBlock = NULL;
 8005cb8:	e9c2 6600 	strd	r6, r6, [r2]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005cbc:	6029      	str	r1, [r5, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cbe:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005cc0:	e9c0 2300 	strd	r2, r3, [r0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005cc4:	460d      	mov	r5, r1
 8005cc6:	e78b      	b.n	8005be0 <pvPortMalloc+0x14>
 8005cc8:	20000334 	.word	0x20000334
 8005ccc:	20003f38 	.word	0x20003f38
 8005cd0:	20003f3c 	.word	0x20003f3c
 8005cd4:	20003f44 	.word	0x20003f44
 8005cd8:	20003f40 	.word	0x20003f40
 8005cdc:	20000338 	.word	0x20000338
 8005ce0:	20003f30 	.word	0x20003f30

08005ce4 <vPortFree>:
	if( pv != NULL )
 8005ce4:	b1d0      	cbz	r0, 8005d1c <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ce6:	4a19      	ldr	r2, [pc, #100]	; (8005d4c <vPortFree+0x68>)
 8005ce8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005cec:	6812      	ldr	r2, [r2, #0]
 8005cee:	4213      	tst	r3, r2
 8005cf0:	d108      	bne.n	8005d04 <vPortFree+0x20>
 8005cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	e7fe      	b.n	8005d02 <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d04:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005d08:	b149      	cbz	r1, 8005d1e <vPortFree+0x3a>
 8005d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0e:	f383 8811 	msr	BASEPRI, r3
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	e7fe      	b.n	8005d1a <vPortFree+0x36>
 8005d1c:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d1e:	ea23 0302 	bic.w	r3, r3, r2
{
 8005d22:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d24:	f840 3c04 	str.w	r3, [r0, #-4]
 8005d28:	4604      	mov	r4, r0
				vTaskSuspendAll();
 8005d2a:	f7ff fbf9 	bl	8005520 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d2e:	4a08      	ldr	r2, [pc, #32]	; (8005d50 <vPortFree+0x6c>)
 8005d30:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005d34:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d36:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d3a:	440b      	add	r3, r1
 8005d3c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d3e:	f7ff ff1d 	bl	8005b7c <prvInsertBlockIntoFreeList>
}
 8005d42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8005d46:	f7ff bc9f 	b.w	8005688 <xTaskResumeAll>
 8005d4a:	bf00      	nop
 8005d4c:	20003f38 	.word	0x20003f38
 8005d50:	20003f3c 	.word	0x20003f3c

08005d54 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8005d54:	4b04      	ldr	r3, [pc, #16]	; (8005d68 <vApplicationGetIdleTaskMemory+0x14>)
 8005d56:	6003      	str	r3, [r0, #0]
{
 8005d58:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8005d5a:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8005d5c:	4c03      	ldr	r4, [pc, #12]	; (8005d6c <vApplicationGetIdleTaskMemory+0x18>)
 8005d5e:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8005d60:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 8005d62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	2000414c 	.word	0x2000414c
 8005d6c:	20003f4c 	.word	0x20003f4c

08005d70 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8005d70:	b508      	push	{r3, lr}
    
    
                 
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8005d72:	f000 fd6b 	bl	800684c <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  gyro_handler();
 8005d76:	f001 ffc3 	bl	8007d00 <gyro_handler>
	  osDelay(5);
 8005d7a:	2005      	movs	r0, #5
 8005d7c:	f7ff f88e 	bl	8004e9c <osDelay>
	  accel_handler();
 8005d80:	f002 f89a 	bl	8007eb8 <accel_handler>
	  osDelay(5);
 8005d84:	2005      	movs	r0, #5
 8005d86:	f7ff f889 	bl	8004e9c <osDelay>
 8005d8a:	e7f4      	b.n	8005d76 <StartDefaultTask+0x6>

08005d8c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8005d8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	MPU6050_getAllData(allData);
 8005d8e:	4c04      	ldr	r4, [pc, #16]	; (8005da0 <StartTask02+0x14>)
 8005d90:	4620      	mov	r0, r4
 8005d92:	f000 fb1b 	bl	80063cc <MPU6050_getAllData>
    osDelay(20);
 8005d96:	2014      	movs	r0, #20
 8005d98:	f7ff f880 	bl	8004e9c <osDelay>
 8005d9c:	e7f8      	b.n	8005d90 <StartTask02+0x4>
 8005d9e:	bf00      	nop
 8005da0:	20004bc0 	.word	0x20004bc0

08005da4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8005da4:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 8005da8:	f8df a090 	ldr.w	sl, [pc, #144]	; 8005e3c <StartTask03+0x98>
 8005dac:	4f1d      	ldr	r7, [pc, #116]	; (8005e24 <StartTask03+0x80>)
 8005dae:	f8df b090 	ldr.w	fp, [pc, #144]	; 8005e40 <StartTask03+0x9c>
 8005db2:	4e1d      	ldr	r6, [pc, #116]	; (8005e28 <StartTask03+0x84>)
 8005db4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8005e44 <StartTask03+0xa0>
 8005db8:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8005e48 <StartTask03+0xa4>
	r_wheel_data[0] = sideDataRight;
	r_wheel_data[1] = speedDataRight;
	l_wheel_data[0] = sideDataLeft;
	l_wheel_data[1] = speedDataLeft;

	HAL_CAN_AddTxMessage(&hcan1, &l_wheelHeader, l_wheel_data, &TxMailbox);
 8005dbc:	4d1b      	ldr	r5, [pc, #108]	; (8005e2c <StartTask03+0x88>)
 8005dbe:	4c1c      	ldr	r4, [pc, #112]	; (8005e30 <StartTask03+0x8c>)
	r_wheel_data[0] = sideDataRight;
 8005dc0:	f89b 3000 	ldrb.w	r3, [fp]
	r_wheel_data[1] = speedDataRight;
 8005dc4:	f89a 0000 	ldrb.w	r0, [sl]
	l_wheel_data[0] = sideDataLeft;
 8005dc8:	f899 e000 	ldrb.w	lr, [r9]
	l_wheel_data[1] = speedDataLeft;
 8005dcc:	f898 c000 	ldrb.w	ip, [r8]
	HAL_CAN_AddTxMessage(&hcan1, &l_wheelHeader, l_wheel_data, &TxMailbox);
 8005dd0:	4a15      	ldr	r2, [pc, #84]	; (8005e28 <StartTask03+0x84>)
 8005dd2:	4918      	ldr	r1, [pc, #96]	; (8005e34 <StartTask03+0x90>)
	r_wheel_data[0] = sideDataRight;
 8005dd4:	703b      	strb	r3, [r7, #0]
	r_wheel_data[1] = speedDataRight;
 8005dd6:	7078      	strb	r0, [r7, #1]
	HAL_CAN_AddTxMessage(&hcan1, &l_wheelHeader, l_wheel_data, &TxMailbox);
 8005dd8:	462b      	mov	r3, r5
 8005dda:	4620      	mov	r0, r4
	l_wheel_data[0] = sideDataLeft;
 8005ddc:	f886 e000 	strb.w	lr, [r6]
	l_wheel_data[1] = speedDataLeft;
 8005de0:	f886 c001 	strb.w	ip, [r6, #1]
	HAL_CAN_AddTxMessage(&hcan1, &l_wheelHeader, l_wheel_data, &TxMailbox);
 8005de4:	f7fa fcf0 	bl	80007c8 <HAL_CAN_AddTxMessage>
	osDelay(5);
 8005de8:	2005      	movs	r0, #5
 8005dea:	f7ff f857 	bl	8004e9c <osDelay>
	HAL_CAN_AddTxMessage(&hcan1, &r_wheelHeader, r_wheel_data, &TxMailbox);
 8005dee:	462b      	mov	r3, r5
 8005df0:	4a0c      	ldr	r2, [pc, #48]	; (8005e24 <StartTask03+0x80>)
 8005df2:	4911      	ldr	r1, [pc, #68]	; (8005e38 <StartTask03+0x94>)
 8005df4:	4620      	mov	r0, r4
 8005df6:	f7fa fce7 	bl	80007c8 <HAL_CAN_AddTxMessage>
	osDelay(5);
 8005dfa:	2005      	movs	r0, #5
 8005dfc:	f7ff f84e 	bl	8004e9c <osDelay>
	rpm_right_handler();
 8005e00:	f001 fe86 	bl	8007b10 <rpm_right_handler>
	osDelay(5);
 8005e04:	2005      	movs	r0, #5
 8005e06:	f7ff f849 	bl	8004e9c <osDelay>
	rpm_left_handler();
 8005e0a:	f001 fedb 	bl	8007bc4 <rpm_left_handler>
	osDelay(5);
 8005e0e:	2005      	movs	r0, #5
 8005e10:	f7ff f844 	bl	8004e9c <osDelay>
	sensor_handler();
 8005e14:	f001 ff30 	bl	8007c78 <sensor_handler>
	osDelay(5);
 8005e18:	2005      	movs	r0, #5
 8005e1a:	f7ff f83f 	bl	8004e9c <osDelay>
	spinOnce();
 8005e1e:	f002 fe4d 	bl	8008abc <spinOnce>
 8005e22:	e7cd      	b.n	8005dc0 <StartTask03+0x1c>
 8005e24:	20004c04 	.word	0x20004c04
 8005e28:	20004988 	.word	0x20004988
 8005e2c:	20004bb8 	.word	0x20004bb8
 8005e30:	20004bd0 	.word	0x20004bd0
 8005e34:	20004c08 	.word	0x20004c08
 8005e38:	20004990 	.word	0x20004990
 8005e3c:	20004bcd 	.word	0x20004bcd
 8005e40:	20004954 	.word	0x20004954
 8005e44:	20004c02 	.word	0x20004c02
 8005e48:	200049a8 	.word	0x200049a8

08005e4c <SystemClock_Config>:
{
 8005e4c:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005e4e:	2400      	movs	r4, #0
{
 8005e50:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005e52:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8005e56:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e5a:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8005e5e:	e9cd 4406 	strd	r4, r4, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e62:	4a1d      	ldr	r2, [pc, #116]	; (8005ed8 <SystemClock_Config+0x8c>)
 8005e64:	9401      	str	r4, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e66:	9403      	str	r4, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e68:	6c11      	ldr	r1, [r2, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e6a:	4b1c      	ldr	r3, [pc, #112]	; (8005edc <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e6c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8005e70:	6411      	str	r1, [r2, #64]	; 0x40
 8005e72:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005e74:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8005e78:	9201      	str	r2, [sp, #4]
 8005e7a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e7c:	9402      	str	r4, [sp, #8]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e8c:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005e8e:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005e90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005e94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005e98:	2502      	movs	r5, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e9a:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005e9c:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005e9e:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005ea0:	2108      	movs	r1, #8
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005ea2:	22a8      	movs	r2, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005ea4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ea6:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005ea8:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005eaa:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005eac:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005eae:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005eb0:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005eb2:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005eb4:	260f      	movs	r6, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005eb6:	f7fd f871 	bl	8002f9c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005eba:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005ebe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005ec2:	a803      	add	r0, sp, #12
 8005ec4:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005ec6:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ec8:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005eca:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005ecc:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005ed0:	f7fd fa72 	bl	80033b8 <HAL_RCC_ClockConfig>
}
 8005ed4:	b014      	add	sp, #80	; 0x50
 8005ed6:	bd70      	pop	{r4, r5, r6, pc}
 8005ed8:	40023800 	.word	0x40023800
 8005edc:	40007000 	.word	0x40007000

08005ee0 <main>:
{
 8005ee0:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ee2:	2400      	movs	r4, #0
{
 8005ee4:	b09a      	sub	sp, #104	; 0x68
  HAL_Init();
 8005ee6:	f7fa fafb 	bl	80004e0 <HAL_Init>
  SystemClock_Config();
 8005eea:	f7ff ffaf 	bl	8005e4c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005eee:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
 8005ef2:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005ef6:	4b61      	ldr	r3, [pc, #388]	; (800607c <main+0x19c>)
 8005ef8:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005efa:	9417      	str	r4, [sp, #92]	; 0x5c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hcan1.Instance = CAN1;
 8005efe:	4e60      	ldr	r6, [pc, #384]	; (8006080 <main+0x1a0>)
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8005f00:	4860      	ldr	r0, [pc, #384]	; (8006084 <main+0x1a4>)
  hcan1.Instance = CAN1;
 8005f02:	4f61      	ldr	r7, [pc, #388]	; (8006088 <main+0x1a8>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8005f04:	4d61      	ldr	r5, [pc, #388]	; (800608c <main+0x1ac>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005f06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f0a:	631a      	str	r2, [r3, #48]	; 0x30
 8005f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f0e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005f12:	9200      	str	r2, [sp, #0]
 8005f14:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f16:	9401      	str	r4, [sp, #4]
 8005f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f1a:	f042 0210 	orr.w	r2, r2, #16
 8005f1e:	631a      	str	r2, [r3, #48]	; 0x30
 8005f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f22:	f002 0210 	and.w	r2, r2, #16
 8005f26:	9201      	str	r2, [sp, #4]
 8005f28:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f2a:	9402      	str	r4, [sp, #8]
 8005f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f2e:	f042 0201 	orr.w	r2, r2, #1
 8005f32:	631a      	str	r2, [r3, #48]	; 0x30
 8005f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f36:	f002 0201 	and.w	r2, r2, #1
 8005f3a:	9202      	str	r2, [sp, #8]
 8005f3c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005f3e:	9403      	str	r4, [sp, #12]
 8005f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f42:	f042 0208 	orr.w	r2, r2, #8
 8005f46:	631a      	str	r2, [r3, #48]	; 0x30
 8005f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f4a:	f002 0208 	and.w	r2, r2, #8
 8005f4e:	9203      	str	r2, [sp, #12]
 8005f50:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f52:	9404      	str	r4, [sp, #16]
 8005f54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f56:	f042 0202 	orr.w	r2, r2, #2
 8005f5a:	631a      	str	r2, [r3, #48]	; 0x30
 8005f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5e:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8005f62:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f64:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8005f66:	f44f 7180 	mov.w	r1, #256	; 0x100
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f6a:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f6c:	f04f 0801 	mov.w	r8, #1
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8005f70:	f7fa ffc4 	bl	8000efc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005f74:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005f78:	a913      	add	r1, sp, #76	; 0x4c
 8005f7a:	4842      	ldr	r0, [pc, #264]	; (8006084 <main+0x1a4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f7c:	e9cd 3813 	strd	r3, r8, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f80:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005f84:	f7fa feb6 	bl	8000cf4 <HAL_GPIO_Init>
  hcan1.Init.Prescaler = 3;
 8005f88:	2103      	movs	r1, #3
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8005f8a:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8005f8e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8005f92:	4630      	mov	r0, r6
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8005f94:	61b4      	str	r4, [r6, #24]
  hcan1.Init.Prescaler = 3;
 8005f96:	e9c6 7100 	strd	r7, r1, [r6]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8005f9a:	e9c6 2304 	strd	r2, r3, [r6, #16]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8005f9e:	60b4      	str	r4, [r6, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8005fa0:	60f4      	str	r4, [r6, #12]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8005fa2:	7734      	strb	r4, [r6, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8005fa4:	7774      	strb	r4, [r6, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8005fa6:	f7fa fad9 	bl	800055c <HAL_CAN_Init>
  hi2c1.Instance = I2C1;
 8005faa:	4b39      	ldr	r3, [pc, #228]	; (8006090 <main+0x1b0>)
  hi2c1.Init.ClockSpeed = 100000;
 8005fac:	4939      	ldr	r1, [pc, #228]	; (8006094 <main+0x1b4>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005fae:	609c      	str	r4, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005fb0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005fb4:	4618      	mov	r0, r3
  hi2c1.Instance = I2C1;
 8005fb6:	f5a7 5780 	sub.w	r7, r7, #4096	; 0x1000
  hi2c1.Init.ClockSpeed = 100000;
 8005fba:	e9c3 7100 	strd	r7, r1, [r3]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005fbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress1 = 0;
 8005fc0:	60dc      	str	r4, [r3, #12]
  hi2c1.Init.OwnAddress2 = 0;
 8005fc2:	e9c3 4405 	strd	r4, r4, [r3, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005fc6:	e9c3 4407 	strd	r4, r4, [r3, #28]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005fca:	f7fb f923 	bl	8001214 <HAL_I2C_Init>
  sensor_ini();
 8005fce:	f000 f8c5 	bl	800615c <sensor_ini>
  MPU6050_init();
 8005fd2:	f000 f9d1 	bl	8006378 <MPU6050_init>
  HAL_Delay(1000);
 8005fd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005fda:	f7fa faad 	bl	8000538 <HAL_Delay>
  init_ROS();
 8005fde:	f001 fc65 	bl	80078ac <init_ROS>
  r_wheelHeader.DLC = 2;
 8005fe2:	492d      	ldr	r1, [pc, #180]	; (8006098 <main+0x1b8>)
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8005fe4:	4b2d      	ldr	r3, [pc, #180]	; (800609c <main+0x1bc>)
  l_wheelHeader.DLC = 2;
 8005fe6:	4a2e      	ldr	r2, [pc, #184]	; (80060a0 <main+0x1c0>)
  r_wheelHeader.IDE = CAN_ID_STD;
 8005fe8:	608c      	str	r4, [r1, #8]
  r_wheelHeader.StdId = 0xF;
 8005fea:	270f      	movs	r7, #15
 8005fec:	600f      	str	r7, [r1, #0]
  r_wheelHeader.DLC = 2;
 8005fee:	2702      	movs	r7, #2
 8005ff0:	610f      	str	r7, [r1, #16]
  r_wheelHeader.RTR = CAN_RTR_DATA;
 8005ff2:	60cc      	str	r4, [r1, #12]
  l_wheelHeader.StdId = 0x1F;
 8005ff4:	211f      	movs	r1, #31
 8005ff6:	6011      	str	r1, [r2, #0]
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	4619      	mov	r1, r3
  l_wheelHeader.DLC = 2;
 8005ffc:	6117      	str	r7, [r2, #16]
  l_wheelHeader.RTR = CAN_RTR_DATA;
 8005ffe:	e9c2 4402 	strd	r4, r4, [r2, #8]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8006002:	611c      	str	r4, [r3, #16]
  sFilterConfig.FilterIdLow = 0;
 8006004:	e9c3 4400 	strd	r4, r4, [r3]
  sFilterConfig.FilterMaskIdLow = 0;
 8006008:	e9c3 4402 	strd	r4, r4, [r3, #8]
  sFilterConfig.FilterActivation = ENABLE;
 800600c:	e9c3 8807 	strd	r8, r8, [r3, #28]
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8006010:	f7fa fb26 	bl	8000660 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 8006014:	4630      	mov	r0, r6
 8006016:	f7fa fba9 	bl	800076c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800601a:	4639      	mov	r1, r7
 800601c:	4630      	mov	r0, r6
 800601e:	f7fa fcab 	bl	8000978 <HAL_CAN_ActivateNotification>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8006022:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006024:	ae05      	add	r6, sp, #20
 8006026:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006028:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800602c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8006030:	4621      	mov	r1, r4
 8006032:	a805      	add	r0, sp, #20
 8006034:	f7fe ff08 	bl	8004e48 <osThreadCreate>
 8006038:	4b1a      	ldr	r3, [pc, #104]	; (80060a4 <main+0x1c4>)
  osThreadDef(IMUtask, StartTask02, osPriorityNormal, 0, 128);
 800603a:	f105 070c 	add.w	r7, r5, #12
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800603e:	6018      	str	r0, [r3, #0]
  osThreadDef(IMUtask, StartTask02, osPriorityNormal, 0, 128);
 8006040:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006042:	ae0c      	add	r6, sp, #48	; 0x30
 8006044:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006046:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800604a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  IMUtaskHandle = osThreadCreate(osThread(IMUtask), NULL);
 800604e:	4621      	mov	r1, r4
 8006050:	a80c      	add	r0, sp, #48	; 0x30
 8006052:	f7fe fef9 	bl	8004e48 <osThreadCreate>
 8006056:	4b14      	ldr	r3, [pc, #80]	; (80060a8 <main+0x1c8>)
  osThreadDef(wheelControltas, StartTask03, osPriorityHigh, 0, 128);
 8006058:	3528      	adds	r5, #40	; 0x28
  IMUtaskHandle = osThreadCreate(osThread(IMUtask), NULL);
 800605a:	6018      	str	r0, [r3, #0]
  osThreadDef(wheelControltas, StartTask03, osPriorityHigh, 0, 128);
 800605c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800605e:	ae13      	add	r6, sp, #76	; 0x4c
 8006060:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006062:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006066:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  wheelControltasHandle = osThreadCreate(osThread(wheelControltas), NULL);
 800606a:	4621      	mov	r1, r4
 800606c:	a813      	add	r0, sp, #76	; 0x4c
 800606e:	f7fe feeb 	bl	8004e48 <osThreadCreate>
 8006072:	4b0e      	ldr	r3, [pc, #56]	; (80060ac <main+0x1cc>)
 8006074:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8006076:	f7fe fee1 	bl	8004e3c <osKernelStart>
 800607a:	e7fe      	b.n	800607a <main+0x19a>
 800607c:	40023800 	.word	0x40023800
 8006080:	20004bd0 	.word	0x20004bd0
 8006084:	40021000 	.word	0x40021000
 8006088:	40006400 	.word	0x40006400
 800608c:	0800968c 	.word	0x0800968c
 8006090:	200048fc 	.word	0x200048fc
 8006094:	000186a0 	.word	0x000186a0
 8006098:	20004990 	.word	0x20004990
 800609c:	200048c4 	.word	0x200048c4
 80060a0:	20004c08 	.word	0x20004c08
 80060a4:	200048f0 	.word	0x200048f0
 80060a8:	200048f4 	.word	0x200048f4
 80060ac:	20004958 	.word	0x20004958

080060b0 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80060b0:	b538      	push	{r3, r4, r5, lr}
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &wheel_RxHeader, canRXData);
 80060b2:	4c1a      	ldr	r4, [pc, #104]	; (800611c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80060b4:	4d1a      	ldr	r5, [pc, #104]	; (8006120 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80060b6:	481b      	ldr	r0, [pc, #108]	; (8006124 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80060b8:	462b      	mov	r3, r5
 80060ba:	4622      	mov	r2, r4
 80060bc:	2100      	movs	r1, #0
 80060be:	f7fa fbdb 	bl	8000878 <HAL_CAN_GetRxMessage>
	if (wheel_RxHeader.StdId == 0xFFF) {
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d005      	beq.n	80060d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
	else if (wheel_RxHeader.StdId == 0x7F) {
 80060cc:	2b7f      	cmp	r3, #127	; 0x7f
 80060ce:	d006      	beq.n	80060de <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
	else if (wheel_RxHeader.StdId == 0x3F) {
 80060d0:	2b3f      	cmp	r3, #63	; 0x3f
 80060d2:	d019      	beq.n	8006108 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
	else if (wheel_RxHeader.StdId == 0x3D) {
 80060d4:	2b3d      	cmp	r3, #61	; 0x3d
 80060d6:	d00b      	beq.n	80060f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
	wheel_RxHeader.StdId = 0x000;
 80060d8:	2300      	movs	r3, #0
 80060da:	6023      	str	r3, [r4, #0]
}
 80060dc:	bd38      	pop	{r3, r4, r5, pc}
		sideRXDataLeft = canRXData[1];
 80060de:	4b12      	ldr	r3, [pc, #72]	; (8006128 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
		speedRXDataLeft = canRXData[0];
 80060e0:	4912      	ldr	r1, [pc, #72]	; (800612c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80060e2:	7828      	ldrb	r0, [r5, #0]
		sideRXDataLeft = canRXData[1];
 80060e4:	786a      	ldrb	r2, [r5, #1]
		speedRXDataLeft = canRXData[0];
 80060e6:	7008      	strb	r0, [r1, #0]
		sideRXDataLeft = canRXData[1];
 80060e8:	701a      	strb	r2, [r3, #0]
	wheel_RxHeader.StdId = 0x000;
 80060ea:	2300      	movs	r3, #0
 80060ec:	6023      	str	r3, [r4, #0]
}
 80060ee:	bd38      	pop	{r3, r4, r5, pc}
		sensorData1 = canRXData[0];
 80060f0:	4a0f      	ldr	r2, [pc, #60]	; (8006130 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80060f2:	7828      	ldrb	r0, [r5, #0]
		sensorData3 = canRXData[5];
 80060f4:	4b0f      	ldr	r3, [pc, #60]	; (8006134 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
		sensorData2 = canRXData[1];
 80060f6:	4910      	ldr	r1, [pc, #64]	; (8006138 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
		sensorData1 = canRXData[0];
 80060f8:	7010      	strb	r0, [r2, #0]
		sensorData2 = canRXData[1];
 80060fa:	7868      	ldrb	r0, [r5, #1]
		sensorData3 = canRXData[5];
 80060fc:	796a      	ldrb	r2, [r5, #5]
		sensorData2 = canRXData[1];
 80060fe:	7008      	strb	r0, [r1, #0]
		sensorData3 = canRXData[5];
 8006100:	701a      	strb	r2, [r3, #0]
	wheel_RxHeader.StdId = 0x000;
 8006102:	2300      	movs	r3, #0
 8006104:	6023      	str	r3, [r4, #0]
}
 8006106:	bd38      	pop	{r3, r4, r5, pc}
		sideRXDataRight = canRXData[1];
 8006108:	4b0c      	ldr	r3, [pc, #48]	; (800613c <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
		speedRXDataRight = canRXData[0];
 800610a:	490d      	ldr	r1, [pc, #52]	; (8006140 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 800610c:	7828      	ldrb	r0, [r5, #0]
		sideRXDataRight = canRXData[1];
 800610e:	786a      	ldrb	r2, [r5, #1]
		speedRXDataRight = canRXData[0];
 8006110:	7008      	strb	r0, [r1, #0]
		sideRXDataRight = canRXData[1];
 8006112:	701a      	strb	r2, [r3, #0]
	wheel_RxHeader.StdId = 0x000;
 8006114:	2300      	movs	r3, #0
 8006116:	6023      	str	r3, [r4, #0]
}
 8006118:	bd38      	pop	{r3, r4, r5, pc}
 800611a:	bf00      	nop
 800611c:	20004960 	.word	0x20004960
 8006120:	20004bac 	.word	0x20004bac
 8006124:	20004bd0 	.word	0x20004bd0
 8006128:	20004bfc 	.word	0x20004bfc
 800612c:	2000495d 	.word	0x2000495d
 8006130:	200049a9 	.word	0x200049a9
 8006134:	2000495c 	.word	0x2000495c
 8006138:	20004bcc 	.word	0x20004bcc
 800613c:	20004bb5 	.word	0x20004bb5
 8006140:	20004bb4 	.word	0x20004bb4

08006144 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8006144:	6802      	ldr	r2, [r0, #0]
 8006146:	4b03      	ldr	r3, [pc, #12]	; (8006154 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8006148:	429a      	cmp	r2, r3
 800614a:	d000      	beq.n	800614e <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800614c:	4770      	bx	lr
    HAL_IncTick();
 800614e:	f7fa b9e1 	b.w	8000514 <HAL_IncTick>
 8006152:	bf00      	nop
 8006154:	40000400 	.word	0x40000400

08006158 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop

0800615c <sensor_ini>:

void ledOff(void) {
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_12,GPIO_PIN_RESET);
}

void sensor_ini(void) {
 800615c:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_Delay(100);
 800615e:	2064      	movs	r0, #100	; 0x64
void sensor_ini(void) {
 8006160:	b085      	sub	sp, #20
	HAL_Delay(100);
 8006162:	f7fa f9e9 	bl	8000538 <HAL_Delay>
	value = 0;
 8006166:	4c7f      	ldr	r4, [pc, #508]	; (8006364 <sensor_ini+0x208>)
		a = 2;
	}
}

uint8_t read_id(void) {
	ctrl = 0x00;
 8006168:	4d7f      	ldr	r5, [pc, #508]	; (8006368 <sensor_ini+0x20c>)
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 800616a:	9400      	str	r4, [sp, #0]
 800616c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006170:	2601      	movs	r6, #1
	ctrl = 0x00;
 8006172:	2700      	movs	r7, #0
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8006174:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8006178:	2275      	movs	r2, #117	; 0x75
 800617a:	4633      	mov	r3, r6
 800617c:	21d0      	movs	r1, #208	; 0xd0
 800617e:	487b      	ldr	r0, [pc, #492]	; (800636c <sensor_ini+0x210>)
	ctrl = 0x00;
 8006180:	702f      	strb	r7, [r5, #0]
	value = 0;
 8006182:	7027      	strb	r7, [r4, #0]
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8006184:	f7fb fa86 	bl	8001694 <HAL_I2C_Mem_Read>
	if(status != HAL_OK)
 8006188:	2800      	cmp	r0, #0
 800618a:	d03c      	beq.n	8006206 <sensor_ini+0xaa>
		a = 1;
 800618c:	4b78      	ldr	r3, [pc, #480]	; (8006370 <sensor_ini+0x214>)
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 800618e:	4879      	ldr	r0, [pc, #484]	; (8006374 <sensor_ini+0x218>)
		a = 1;
 8006190:	701e      	strb	r6, [r3, #0]
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006192:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006196:	f7fa feb5 	bl	8000f04 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 800619a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800619e:	f7fa f9cb 	bl	8000538 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 80061a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061a6:	4873      	ldr	r0, [pc, #460]	; (8006374 <sensor_ini+0x218>)
 80061a8:	f7fa feac 	bl	8000f04 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 80061ac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80061b0:	f7fa f9c2 	bl	8000538 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 80061b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061b8:	486e      	ldr	r0, [pc, #440]	; (8006374 <sensor_ini+0x218>)
 80061ba:	f7fa fea3 	bl	8000f04 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 80061be:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80061c2:	f7fa f9b9 	bl	8000538 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 80061c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061ca:	486a      	ldr	r0, [pc, #424]	; (8006374 <sensor_ini+0x218>)
 80061cc:	f7fa fe9a 	bl	8000f04 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 80061d0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80061d4:	f7fa f9b0 	bl	8000538 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 80061d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061dc:	4865      	ldr	r0, [pc, #404]	; (8006374 <sensor_ini+0x218>)
 80061de:	f7fa fe91 	bl	8000f04 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 80061e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80061e6:	f7fa f9a7 	bl	8000538 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 80061ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061ee:	4861      	ldr	r0, [pc, #388]	; (8006374 <sensor_ini+0x218>)
 80061f0:	f7fa fe88 	bl	8000f04 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 80061f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80061f8:	f7fa f99e 	bl	8000538 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 80061fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006200:	485c      	ldr	r0, [pc, #368]	; (8006374 <sensor_ini+0x218>)
 8006202:	f7fa fe7f 	bl	8000f04 <HAL_GPIO_TogglePin>
	if ((read_id()==0xFF)||(read_id()==0x70)||(read_id()==0x48)) {
 8006206:	7823      	ldrb	r3, [r4, #0]
 8006208:	2bff      	cmp	r3, #255	; 0xff
 800620a:	d105      	bne.n	8006218 <sensor_ini+0xbc>
	ctrl = sensor_io_read(0x68, 0x75);
 800620c:	702b      	strb	r3, [r5, #0]
		a = 2;
 800620e:	4b58      	ldr	r3, [pc, #352]	; (8006370 <sensor_ini+0x214>)
 8006210:	2202      	movs	r2, #2
 8006212:	701a      	strb	r2, [r3, #0]
}
 8006214:	b005      	add	sp, #20
 8006216:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8006218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800621c:	2601      	movs	r6, #1
	ctrl = 0x00;
 800621e:	2700      	movs	r7, #0
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8006220:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8006224:	9400      	str	r4, [sp, #0]
 8006226:	4633      	mov	r3, r6
 8006228:	2275      	movs	r2, #117	; 0x75
 800622a:	21d0      	movs	r1, #208	; 0xd0
 800622c:	484f      	ldr	r0, [pc, #316]	; (800636c <sensor_ini+0x210>)
	ctrl = 0x00;
 800622e:	702f      	strb	r7, [r5, #0]
	value = 0;
 8006230:	7027      	strb	r7, [r4, #0]
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8006232:	f7fb fa2f 	bl	8001694 <HAL_I2C_Mem_Read>
	if(status != HAL_OK)
 8006236:	2800      	cmp	r0, #0
 8006238:	d03c      	beq.n	80062b4 <sensor_ini+0x158>
		a = 1;
 800623a:	4b4d      	ldr	r3, [pc, #308]	; (8006370 <sensor_ini+0x214>)
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 800623c:	484d      	ldr	r0, [pc, #308]	; (8006374 <sensor_ini+0x218>)
		a = 1;
 800623e:	701e      	strb	r6, [r3, #0]
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006240:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006244:	f7fa fe5e 	bl	8000f04 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8006248:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800624c:	f7fa f974 	bl	8000538 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006250:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006254:	4847      	ldr	r0, [pc, #284]	; (8006374 <sensor_ini+0x218>)
 8006256:	f7fa fe55 	bl	8000f04 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 800625a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800625e:	f7fa f96b 	bl	8000538 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006262:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006266:	4843      	ldr	r0, [pc, #268]	; (8006374 <sensor_ini+0x218>)
 8006268:	f7fa fe4c 	bl	8000f04 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 800626c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006270:	f7fa f962 	bl	8000538 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006274:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006278:	483e      	ldr	r0, [pc, #248]	; (8006374 <sensor_ini+0x218>)
 800627a:	f7fa fe43 	bl	8000f04 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 800627e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006282:	f7fa f959 	bl	8000538 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800628a:	483a      	ldr	r0, [pc, #232]	; (8006374 <sensor_ini+0x218>)
 800628c:	f7fa fe3a 	bl	8000f04 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8006290:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006294:	f7fa f950 	bl	8000538 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006298:	f44f 7180 	mov.w	r1, #256	; 0x100
 800629c:	4835      	ldr	r0, [pc, #212]	; (8006374 <sensor_ini+0x218>)
 800629e:	f7fa fe31 	bl	8000f04 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 80062a2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80062a6:	f7fa f947 	bl	8000538 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 80062aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062ae:	4831      	ldr	r0, [pc, #196]	; (8006374 <sensor_ini+0x218>)
 80062b0:	f7fa fe28 	bl	8000f04 <HAL_GPIO_TogglePin>
	if ((read_id()==0xFF)||(read_id()==0x70)||(read_id()==0x48)) {
 80062b4:	7823      	ldrb	r3, [r4, #0]
 80062b6:	2b70      	cmp	r3, #112	; 0x70
 80062b8:	d0a8      	beq.n	800620c <sensor_ini+0xb0>
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 80062ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80062be:	2601      	movs	r6, #1
	ctrl = 0x00;
 80062c0:	2700      	movs	r7, #0
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 80062c2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80062c6:	9400      	str	r4, [sp, #0]
 80062c8:	4633      	mov	r3, r6
 80062ca:	2275      	movs	r2, #117	; 0x75
 80062cc:	21d0      	movs	r1, #208	; 0xd0
 80062ce:	4827      	ldr	r0, [pc, #156]	; (800636c <sensor_ini+0x210>)
	ctrl = 0x00;
 80062d0:	702f      	strb	r7, [r5, #0]
	value = 0;
 80062d2:	7027      	strb	r7, [r4, #0]
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 80062d4:	f7fb f9de 	bl	8001694 <HAL_I2C_Mem_Read>
	if(status != HAL_OK)
 80062d8:	b928      	cbnz	r0, 80062e6 <sensor_ini+0x18a>
	return value;
 80062da:	7823      	ldrb	r3, [r4, #0]
	ctrl = sensor_io_read(0x68, 0x75);
 80062dc:	702b      	strb	r3, [r5, #0]
	if ((read_id()==0xFF)||(read_id()==0x70)||(read_id()==0x48)) {
 80062de:	2b48      	cmp	r3, #72	; 0x48
 80062e0:	d095      	beq.n	800620e <sensor_ini+0xb2>
}
 80062e2:	b005      	add	sp, #20
 80062e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		a = 1;
 80062e6:	4b22      	ldr	r3, [pc, #136]	; (8006370 <sensor_ini+0x214>)
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 80062e8:	4822      	ldr	r0, [pc, #136]	; (8006374 <sensor_ini+0x218>)
		a = 1;
 80062ea:	701e      	strb	r6, [r3, #0]
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 80062ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062f0:	f7fa fe08 	bl	8000f04 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 80062f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80062f8:	f7fa f91e 	bl	8000538 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 80062fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006300:	481c      	ldr	r0, [pc, #112]	; (8006374 <sensor_ini+0x218>)
 8006302:	f7fa fdff 	bl	8000f04 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8006306:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800630a:	f7fa f915 	bl	8000538 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 800630e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006312:	4818      	ldr	r0, [pc, #96]	; (8006374 <sensor_ini+0x218>)
 8006314:	f7fa fdf6 	bl	8000f04 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8006318:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800631c:	f7fa f90c 	bl	8000538 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006320:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006324:	4813      	ldr	r0, [pc, #76]	; (8006374 <sensor_ini+0x218>)
 8006326:	f7fa fded 	bl	8000f04 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 800632a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800632e:	f7fa f903 	bl	8000538 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006332:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006336:	480f      	ldr	r0, [pc, #60]	; (8006374 <sensor_ini+0x218>)
 8006338:	f7fa fde4 	bl	8000f04 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 800633c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006340:	f7fa f8fa 	bl	8000538 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006344:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006348:	480a      	ldr	r0, [pc, #40]	; (8006374 <sensor_ini+0x218>)
 800634a:	f7fa fddb 	bl	8000f04 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 800634e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006352:	f7fa f8f1 	bl	8000538 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8006356:	f44f 7180 	mov.w	r1, #256	; 0x100
 800635a:	4806      	ldr	r0, [pc, #24]	; (8006374 <sensor_ini+0x218>)
 800635c:	f7fa fdd2 	bl	8000f04 <HAL_GPIO_TogglePin>
 8006360:	e7bb      	b.n	80062da <sensor_ini+0x17e>
 8006362:	bf00      	nop
 8006364:	200041a1 	.word	0x200041a1
 8006368:	200041a0 	.word	0x200041a0
 800636c:	200048fc 	.word	0x200048fc
 8006370:	200041fc 	.word	0x200041fc
 8006374:	40021000 	.word	0x40021000

08006378 <MPU6050_init>:
	return ctrl;
}

void MPU6050_init(void)
{
 8006378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800637a:	b085      	sub	sp, #20
}

void MPU6050_writeReg(uint16_t Addr, uint8_t reg, uint8_t value)
{
	uint8_t buf[2];
	buf[0] = reg;
 800637c:	ac04      	add	r4, sp, #16
 800637e:	236b      	movs	r3, #107	; 0x6b
 8006380:	f824 3d04 	strh.w	r3, [r4, #-4]!
	buf[1] = value;
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 8006384:	4d10      	ldr	r5, [pc, #64]	; (80063c8 <MPU6050_init+0x50>)
 8006386:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800638a:	4622      	mov	r2, r4
 800638c:	4628      	mov	r0, r5
 800638e:	9600      	str	r6, [sp, #0]
 8006390:	2302      	movs	r3, #2
 8006392:	21d0      	movs	r1, #208	; 0xd0
 8006394:	f7fa fffe 	bl	8001394 <HAL_I2C_Master_Transmit>
	buf[0] = reg;
 8006398:	f640 071b 	movw	r7, #2075	; 0x81b
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 800639c:	4622      	mov	r2, r4
 800639e:	9600      	str	r6, [sp, #0]
 80063a0:	4628      	mov	r0, r5
 80063a2:	2302      	movs	r3, #2
 80063a4:	21d0      	movs	r1, #208	; 0xd0
	buf[0] = reg;
 80063a6:	f8ad 700c 	strh.w	r7, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 80063aa:	f7fa fff3 	bl	8001394 <HAL_I2C_Master_Transmit>
 80063ae:	4622      	mov	r2, r4
 80063b0:	9600      	str	r6, [sp, #0]
 80063b2:	4628      	mov	r0, r5
	buf[0] = reg;
 80063b4:	f241 041c 	movw	r4, #4124	; 0x101c
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 80063b8:	2302      	movs	r3, #2
 80063ba:	21d0      	movs	r1, #208	; 0xd0
	buf[0] = reg;
 80063bc:	f8ad 400c 	strh.w	r4, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 80063c0:	f7fa ffe8 	bl	8001394 <HAL_I2C_Master_Transmit>
}
 80063c4:	b005      	add	sp, #20
 80063c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063c8:	200048fc 	.word	0x200048fc

080063cc <MPU6050_getAllData>:
{
 80063cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d0:	b08d      	sub	sp, #52	; 0x34

// Read an 8-bit register
uint8_t MPU6050_readReg(uint16_t Addr, uint8_t reg)
{
  uint8_t value;
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 80063d2:	2401      	movs	r4, #1
 80063d4:	f10d 062f 	add.w	r6, sp, #47	; 0x2f
 80063d8:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 80063dc:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80063e0:	4623      	mov	r3, r4
 80063e2:	9600      	str	r6, [sp, #0]
 80063e4:	2243      	movs	r2, #67	; 0x43
 80063e6:	21d0      	movs	r1, #208	; 0xd0
 80063e8:	4870      	ldr	r0, [pc, #448]	; (80065ac <MPU6050_getAllData+0x1e0>)
 80063ea:	f7fb f953 	bl	8001694 <HAL_I2C_Mem_Read>
 80063ee:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80063f2:	9600      	str	r6, [sp, #0]
 80063f4:	4623      	mov	r3, r4
 80063f6:	2244      	movs	r2, #68	; 0x44
 80063f8:	21d0      	movs	r1, #208	; 0xd0
 80063fa:	486c      	ldr	r0, [pc, #432]	; (80065ac <MPU6050_getAllData+0x1e0>)
  return value;
 80063fc:	f89d a02f 	ldrb.w	sl, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8006400:	f7fb f948 	bl	8001694 <HAL_I2C_Mem_Read>
 8006404:	e9cd 4701 	strd	r4, r7, [sp, #4]
  return value;
 8006408:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 800640c:	9600      	str	r6, [sp, #0]
 800640e:	4623      	mov	r3, r4
 8006410:	2245      	movs	r2, #69	; 0x45
 8006412:	21d0      	movs	r1, #208	; 0xd0
 8006414:	4865      	ldr	r0, [pc, #404]	; (80065ac <MPU6050_getAllData+0x1e0>)
  return value;
 8006416:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8006418:	f7fb f93c 	bl	8001694 <HAL_I2C_Mem_Read>
 800641c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8006420:	9600      	str	r6, [sp, #0]
 8006422:	4623      	mov	r3, r4
 8006424:	2246      	movs	r2, #70	; 0x46
 8006426:	21d0      	movs	r1, #208	; 0xd0
 8006428:	4860      	ldr	r0, [pc, #384]	; (80065ac <MPU6050_getAllData+0x1e0>)
  return value;
 800642a:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 800642e:	f7fb f931 	bl	8001694 <HAL_I2C_Mem_Read>
 8006432:	e9cd 4701 	strd	r4, r7, [sp, #4]
  return value;
 8006436:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 800643a:	9600      	str	r6, [sp, #0]
 800643c:	4623      	mov	r3, r4
 800643e:	2247      	movs	r2, #71	; 0x47
 8006440:	21d0      	movs	r1, #208	; 0xd0
 8006442:	485a      	ldr	r0, [pc, #360]	; (80065ac <MPU6050_getAllData+0x1e0>)
  return value;
 8006444:	9508      	str	r5, [sp, #32]
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8006446:	f7fb f925 	bl	8001694 <HAL_I2C_Mem_Read>
 800644a:	e9cd 4701 	strd	r4, r7, [sp, #4]
  return value;
 800644e:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8006452:	9600      	str	r6, [sp, #0]
 8006454:	4623      	mov	r3, r4
 8006456:	2248      	movs	r2, #72	; 0x48
 8006458:	21d0      	movs	r1, #208	; 0xd0
 800645a:	4854      	ldr	r0, [pc, #336]	; (80065ac <MPU6050_getAllData+0x1e0>)
  return value;
 800645c:	f8cd c01c 	str.w	ip, [sp, #28]
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8006460:	f7fb f918 	bl	8001694 <HAL_I2C_Mem_Read>
 8006464:	e9cd 4701 	strd	r4, r7, [sp, #4]
  return value;
 8006468:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 800646c:	9600      	str	r6, [sp, #0]
 800646e:	4623      	mov	r3, r4
 8006470:	223b      	movs	r2, #59	; 0x3b
 8006472:	21d0      	movs	r1, #208	; 0xd0
 8006474:	484d      	ldr	r0, [pc, #308]	; (80065ac <MPU6050_getAllData+0x1e0>)
  return value;
 8006476:	f8cd c018 	str.w	ip, [sp, #24]
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 800647a:	f7fb f90b 	bl	8001694 <HAL_I2C_Mem_Read>
 800647e:	e9cd 4701 	strd	r4, r7, [sp, #4]
  return value;
 8006482:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8006486:	9600      	str	r6, [sp, #0]
 8006488:	4623      	mov	r3, r4
 800648a:	223c      	movs	r2, #60	; 0x3c
 800648c:	21d0      	movs	r1, #208	; 0xd0
 800648e:	4847      	ldr	r0, [pc, #284]	; (80065ac <MPU6050_getAllData+0x1e0>)
  return value;
 8006490:	f8cd c014 	str.w	ip, [sp, #20]
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8006494:	f7fb f8fe 	bl	8001694 <HAL_I2C_Mem_Read>
  return value;
 8006498:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 800649c:	9600      	str	r6, [sp, #0]
 800649e:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80064a2:	4623      	mov	r3, r4
 80064a4:	223d      	movs	r2, #61	; 0x3d
 80064a6:	21d0      	movs	r1, #208	; 0xd0
 80064a8:	4840      	ldr	r0, [pc, #256]	; (80065ac <MPU6050_getAllData+0x1e0>)
  return value;
 80064aa:	f8cd c010 	str.w	ip, [sp, #16]
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 80064ae:	f7fb f8f1 	bl	8001694 <HAL_I2C_Mem_Read>
 80064b2:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80064b6:	9600      	str	r6, [sp, #0]
 80064b8:	4623      	mov	r3, r4
 80064ba:	223e      	movs	r2, #62	; 0x3e
 80064bc:	21d0      	movs	r1, #208	; 0xd0
 80064be:	483b      	ldr	r0, [pc, #236]	; (80065ac <MPU6050_getAllData+0x1e0>)
  return value;
 80064c0:	f89d 802f 	ldrb.w	r8, [sp, #47]	; 0x2f
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 80064c4:	4d3a      	ldr	r5, [pc, #232]	; (80065b0 <MPU6050_getAllData+0x1e4>)
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 80064c6:	f7fb f8e5 	bl	8001694 <HAL_I2C_Mem_Read>
 80064ca:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80064ce:	9600      	str	r6, [sp, #0]
 80064d0:	4623      	mov	r3, r4
 80064d2:	223f      	movs	r2, #63	; 0x3f
 80064d4:	21d0      	movs	r1, #208	; 0xd0
 80064d6:	4835      	ldr	r0, [pc, #212]	; (80065ac <MPU6050_getAllData+0x1e0>)
  return value;
 80064d8:	f89d b02f 	ldrb.w	fp, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 80064dc:	f7fb f8da 	bl	8001694 <HAL_I2C_Mem_Read>
 80064e0:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80064e4:	9600      	str	r6, [sp, #0]
 80064e6:	4623      	mov	r3, r4
 80064e8:	2240      	movs	r2, #64	; 0x40
 80064ea:	21d0      	movs	r1, #208	; 0xd0
 80064ec:	482f      	ldr	r0, [pc, #188]	; (80065ac <MPU6050_getAllData+0x1e0>)
  return value;
 80064ee:	f89d 402f 	ldrb.w	r4, [sp, #47]	; 0x2f
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 80064f2:	4e30      	ldr	r6, [pc, #192]	; (80065b4 <MPU6050_getAllData+0x1e8>)
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 80064f4:	f7fb f8ce 	bl	8001694 <HAL_I2C_Mem_Read>
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 80064f8:	9b07      	ldr	r3, [sp, #28]
  return value;
 80064fa:	f89d 702f 	ldrb.w	r7, [sp, #47]	; 0x2f
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 80064fe:	ed9f 4a2e 	vldr	s8, [pc, #184]	; 80065b8 <MPU6050_getAllData+0x1ec>
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 8006502:	eddf 4a2e 	vldr	s9, [pc, #184]	; 80065bc <MPU6050_getAllData+0x1f0>
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 8006506:	482e      	ldr	r0, [pc, #184]	; (80065c0 <MPU6050_getAllData+0x1f4>)
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 8006508:	492e      	ldr	r1, [pc, #184]	; (80065c4 <MPU6050_getAllData+0x1f8>)
	accelY=(((int16_t)((uint16_t)buffer[8] << 8) + buffer[9]))/4096.0f*9.8f;
 800650a:	4a2f      	ldr	r2, [pc, #188]	; (80065c8 <MPU6050_getAllData+0x1fc>)
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 800650c:	ea4f 2c03 	mov.w	ip, r3, lsl #8
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 8006510:	9b05      	ldr	r3, [sp, #20]
 8006512:	ea4f 2e03 	mov.w	lr, r3, lsl #8
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 8006516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006518:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 800651c:	fa03 fa8a 	sxtah	sl, r3, sl
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 8006520:	9b08      	ldr	r3, [sp, #32]
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 8006522:	ee07 aa90 	vmov	s15, sl
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 8006526:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800652a:	fa03 f989 	sxtah	r9, r3, r9
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 800652e:	9b06      	ldr	r3, [sp, #24]
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 8006530:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
	accelY=(((int16_t)((uint16_t)buffer[8] << 8) + buffer[9]))/4096.0f*9.8f;
 8006534:	ea4f 2808 	mov.w	r8, r8, lsl #8
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 8006538:	ee07 9a90 	vmov	s15, r9
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 800653c:	fa03 fc8c 	sxtah	ip, r3, ip
	accelY=(((int16_t)((uint16_t)buffer[8] << 8) + buffer[9]))/4096.0f*9.8f;
 8006540:	fa0b f888 	sxtah	r8, fp, r8
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 8006544:	9b04      	ldr	r3, [sp, #16]
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 8006546:	eef8 5ae7 	vcvt.f32.s32	s11, s15
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 800654a:	0224      	lsls	r4, r4, #8
	accelY=(((int16_t)((uint16_t)buffer[8] << 8) + buffer[9]))/4096.0f*9.8f;
 800654c:	ee07 8a90 	vmov	s15, r8
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 8006550:	fa03 f38e 	sxtah	r3, r3, lr
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 8006554:	fa07 f484 	sxtah	r4, r7, r4
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 8006558:	ee06 ca10 	vmov	s12, ip
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 800655c:	ee06 3a90 	vmov	s13, r3
	accelY=(((int16_t)((uint16_t)buffer[8] << 8) + buffer[9]))/4096.0f*9.8f;
 8006560:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 8006564:	ee07 4a90 	vmov	s15, r4
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 8006568:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 800656c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 8006570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 8006574:	ee25 5a04 	vmul.f32	s10, s10, s8
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 8006578:	ee65 5a84 	vmul.f32	s11, s11, s8
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 800657c:	ee26 6a04 	vmul.f32	s12, s12, s8
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 8006580:	ee66 6aa4 	vmul.f32	s13, s13, s9
	accelY=(((int16_t)((uint16_t)buffer[8] << 8) + buffer[9]))/4096.0f*9.8f;
 8006584:	ee27 7a24 	vmul.f32	s14, s14, s9
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 8006588:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800658c:	4b0f      	ldr	r3, [pc, #60]	; (80065cc <MPU6050_getAllData+0x200>)
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 800658e:	ed86 5a00 	vstr	s10, [r6]
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 8006592:	edc5 5a00 	vstr	s11, [r5]
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 8006596:	ed80 6a00 	vstr	s12, [r0]
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 800659a:	edc1 6a00 	vstr	s13, [r1]
	accelY=(((int16_t)((uint16_t)buffer[8] << 8) + buffer[9]))/4096.0f*9.8f;
 800659e:	ed82 7a00 	vstr	s14, [r2]
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 80065a2:	edc3 7a00 	vstr	s15, [r3]
}
 80065a6:	b00d      	add	sp, #52	; 0x34
 80065a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ac:	200048fc 	.word	0x200048fc
 80065b0:	20004bf8 	.word	0x20004bf8
 80065b4:	20004950 	.word	0x20004950
 80065b8:	398ba1dc 	.word	0x398ba1dc
 80065bc:	3b1ccccd 	.word	0x3b1ccccd
 80065c0:	20004980 	.word	0x20004980
 80065c4:	200048f8 	.word	0x200048f8
 80065c8:	200048ec 	.word	0x200048ec
 80065cc:	20004bbc 	.word	0x20004bbc

080065d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80065d0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065d2:	4b0e      	ldr	r3, [pc, #56]	; (800660c <HAL_MspInit+0x3c>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	9200      	str	r2, [sp, #0]
 80065d8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80065da:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80065de:	6459      	str	r1, [r3, #68]	; 0x44
 80065e0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80065e2:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80065e6:	9100      	str	r1, [sp, #0]
 80065e8:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80065ea:	9201      	str	r2, [sp, #4]
 80065ec:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80065ee:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80065f2:	6419      	str	r1, [r3, #64]	; 0x40
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065fa:	9301      	str	r3, [sp, #4]
 80065fc:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80065fe:	210f      	movs	r1, #15
 8006600:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006604:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006606:	f7fa bb1b 	b.w	8000c40 <HAL_NVIC_SetPriority>
 800660a:	bf00      	nop
 800660c:	40023800 	.word	0x40023800

08006610 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8006610:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcan->Instance==CAN1)
 8006612:	6802      	ldr	r2, [r0, #0]
 8006614:	4b1f      	ldr	r3, [pc, #124]	; (8006694 <HAL_CAN_MspInit+0x84>)
{
 8006616:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006618:	2400      	movs	r4, #0
  if(hcan->Instance==CAN1)
 800661a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800661c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8006620:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8006624:	9407      	str	r4, [sp, #28]
  if(hcan->Instance==CAN1)
 8006626:	d001      	beq.n	800662c <HAL_CAN_MspInit+0x1c>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8006628:	b008      	add	sp, #32
 800662a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 800662c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8006630:	9401      	str	r4, [sp, #4]
 8006632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006634:	4818      	ldr	r0, [pc, #96]	; (8006698 <HAL_CAN_MspInit+0x88>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8006636:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800663a:	641a      	str	r2, [r3, #64]	; 0x40
 800663c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800663e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8006642:	9201      	str	r2, [sp, #4]
 8006644:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006646:	9402      	str	r4, [sp, #8]
 8006648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800664a:	f042 0208 	orr.w	r2, r2, #8
 800664e:	631a      	str	r2, [r3, #48]	; 0x30
 8006650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006652:	f003 0308 	and.w	r3, r3, #8
 8006656:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006658:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800665a:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800665c:	2209      	movs	r2, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800665e:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006660:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006662:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8006664:	9207      	str	r2, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006666:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006668:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800666a:	f7fa fb43 	bl	8000cf4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800666e:	4622      	mov	r2, r4
 8006670:	2105      	movs	r1, #5
 8006672:	2014      	movs	r0, #20
 8006674:	f7fa fae4 	bl	8000c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8006678:	2014      	movs	r0, #20
 800667a:	f7fa fb17 	bl	8000cac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800667e:	4622      	mov	r2, r4
 8006680:	2105      	movs	r1, #5
 8006682:	2015      	movs	r0, #21
 8006684:	f7fa fadc 	bl	8000c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8006688:	2015      	movs	r0, #21
 800668a:	f7fa fb0f 	bl	8000cac <HAL_NVIC_EnableIRQ>
}
 800668e:	b008      	add	sp, #32
 8006690:	bd70      	pop	{r4, r5, r6, pc}
 8006692:	bf00      	nop
 8006694:	40006400 	.word	0x40006400
 8006698:	40020c00 	.word	0x40020c00

0800669c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800669c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 800669e:	6802      	ldr	r2, [r0, #0]
 80066a0:	4b1c      	ldr	r3, [pc, #112]	; (8006714 <HAL_I2C_MspInit+0x78>)
{
 80066a2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066a4:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 80066a6:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066a8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80066ac:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80066b0:	9407      	str	r4, [sp, #28]
  if(hi2c->Instance==I2C1)
 80066b2:	d001      	beq.n	80066b8 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80066b4:	b008      	add	sp, #32
 80066b6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066b8:	4d17      	ldr	r5, [pc, #92]	; (8006718 <HAL_I2C_MspInit+0x7c>)
 80066ba:	9401      	str	r4, [sp, #4]
 80066bc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066be:	4817      	ldr	r0, [pc, #92]	; (800671c <HAL_I2C_MspInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066c0:	f043 0302 	orr.w	r3, r3, #2
 80066c4:	632b      	str	r3, [r5, #48]	; 0x30
 80066c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80066c8:	f003 0302 	and.w	r3, r3, #2
 80066cc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80066ce:	23c0      	movs	r3, #192	; 0xc0
 80066d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80066d2:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80066d4:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066d6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80066d8:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80066da:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066dc:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80066de:	2304      	movs	r3, #4
 80066e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066e4:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066e6:	f7fa fb05 	bl	8000cf4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80066ea:	9402      	str	r4, [sp, #8]
 80066ec:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80066ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066f2:	642b      	str	r3, [r5, #64]	; 0x40
 80066f4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80066f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80066fa:	4622      	mov	r2, r4
    __HAL_RCC_I2C1_CLK_ENABLE();
 80066fc:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80066fe:	2105      	movs	r1, #5
 8006700:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006702:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8006704:	f7fa fa9c 	bl	8000c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8006708:	201f      	movs	r0, #31
 800670a:	f7fa facf 	bl	8000cac <HAL_NVIC_EnableIRQ>
}
 800670e:	b008      	add	sp, #32
 8006710:	bd70      	pop	{r4, r5, r6, pc}
 8006712:	bf00      	nop
 8006714:	40005400 	.word	0x40005400
 8006718:	40023800 	.word	0x40023800
 800671c:	40020400 	.word	0x40020400

08006720 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006720:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8006722:	4601      	mov	r1, r0
{
 8006724:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8006726:	2200      	movs	r2, #0
 8006728:	201d      	movs	r0, #29
 800672a:	f7fa fa89 	bl	8000c40 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 800672e:	201d      	movs	r0, #29
 8006730:	f7fa fabc 	bl	8000cac <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8006734:	2500      	movs	r5, #0
 8006736:	4b16      	ldr	r3, [pc, #88]	; (8006790 <HAL_InitTick+0x70>)
 8006738:	9502      	str	r5, [sp, #8]
 800673a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800673c:	4c15      	ldr	r4, [pc, #84]	; (8006794 <HAL_InitTick+0x74>)
  __HAL_RCC_TIM3_CLK_ENABLE();
 800673e:	f042 0202 	orr.w	r2, r2, #2
 8006742:	641a      	str	r2, [r3, #64]	; 0x40
 8006744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006746:	f003 0302 	and.w	r3, r3, #2
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800674a:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM3_CLK_ENABLE();
 800674c:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800674e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM3_CLK_ENABLE();
 8006750:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006752:	f7fc fee5 	bl	8003520 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006756:	f7fc fed3 	bl	8003500 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800675a:	4a0f      	ldr	r2, [pc, #60]	; (8006798 <HAL_InitTick+0x78>)
  htim3.Instance = TIM3;
 800675c:	490f      	ldr	r1, [pc, #60]	; (800679c <HAL_InitTick+0x7c>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
  htim3.Init.Prescaler = uwPrescalerValue;
  htim3.Init.ClockDivision = 0;
 800675e:	6125      	str	r5, [r4, #16]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006760:	0043      	lsls	r3, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8006762:	fba2 2303 	umull	r2, r3, r2, r3
 8006766:	0c9b      	lsrs	r3, r3, #18
 8006768:	3b01      	subs	r3, #1
  htim3.Init.Period = (1000000 / 1000) - 1;
 800676a:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 800676e:	4620      	mov	r0, r4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006770:	e9c4 3501 	strd	r3, r5, [r4, #4]
  htim3.Instance = TIM3;
 8006774:	6021      	str	r1, [r4, #0]
  htim3.Init.Period = (1000000 / 1000) - 1;
 8006776:	60e2      	str	r2, [r4, #12]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8006778:	f7fc fef6 	bl	8003568 <HAL_TIM_Base_Init>
 800677c:	b110      	cbz	r0, 8006784 <HAL_InitTick+0x64>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800677e:	2001      	movs	r0, #1
}
 8006780:	b009      	add	sp, #36	; 0x24
 8006782:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim3);
 8006784:	4620      	mov	r0, r4
 8006786:	f7fc ff73 	bl	8003670 <HAL_TIM_Base_Start_IT>
}
 800678a:	b009      	add	sp, #36	; 0x24
 800678c:	bd30      	pop	{r4, r5, pc}
 800678e:	bf00      	nop
 8006790:	40023800 	.word	0x40023800
 8006794:	20004c24 	.word	0x20004c24
 8006798:	431bde83 	.word	0x431bde83
 800679c:	40000400 	.word	0x40000400

080067a0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop

080067a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80067a4:	e7fe      	b.n	80067a4 <HardFault_Handler>
 80067a6:	bf00      	nop

080067a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80067a8:	e7fe      	b.n	80067a8 <MemManage_Handler>
 80067aa:	bf00      	nop

080067ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80067ac:	e7fe      	b.n	80067ac <BusFault_Handler>
 80067ae:	bf00      	nop

080067b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80067b0:	e7fe      	b.n	80067b0 <UsageFault_Handler>
 80067b2:	bf00      	nop

080067b4 <DebugMon_Handler>:
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop

080067b8 <CAN1_RX0_IRQHandler>:
//	speedRXDataRight = speedRXData;
//	//rpm_right_handler();
//	//osDelay(1);
//  }
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80067b8:	4801      	ldr	r0, [pc, #4]	; (80067c0 <CAN1_RX0_IRQHandler+0x8>)
 80067ba:	f7fa b907 	b.w	80009cc <HAL_CAN_IRQHandler>
 80067be:	bf00      	nop
 80067c0:	20004bd0 	.word	0x20004bd0

080067c4 <CAN1_RX1_IRQHandler>:
 80067c4:	4801      	ldr	r0, [pc, #4]	; (80067cc <CAN1_RX1_IRQHandler+0x8>)
 80067c6:	f7fa b901 	b.w	80009cc <HAL_CAN_IRQHandler>
 80067ca:	bf00      	nop
 80067cc:	20004bd0 	.word	0x20004bd0

080067d0 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80067d0:	4801      	ldr	r0, [pc, #4]	; (80067d8 <TIM3_IRQHandler+0x8>)
 80067d2:	f7fc bf65 	b.w	80036a0 <HAL_TIM_IRQHandler>
 80067d6:	bf00      	nop
 80067d8:	20004c24 	.word	0x20004c24

080067dc <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80067dc:	4801      	ldr	r0, [pc, #4]	; (80067e4 <I2C1_EV_IRQHandler+0x8>)
 80067de:	f7fb b94d 	b.w	8001a7c <HAL_I2C_EV_IRQHandler>
 80067e2:	bf00      	nop
 80067e4:	200048fc 	.word	0x200048fc

080067e8 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80067e8:	4801      	ldr	r0, [pc, #4]	; (80067f0 <OTG_FS_IRQHandler+0x8>)
 80067ea:	f7fb bf09 	b.w	8002600 <HAL_PCD_IRQHandler>
 80067ee:	bf00      	nop
 80067f0:	20005700 	.word	0x20005700

080067f4 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80067f4:	4a0c      	ldr	r2, [pc, #48]	; (8006828 <_sbrk+0x34>)
{
 80067f6:	b508      	push	{r3, lr}
	if (heap_end == 0)
 80067f8:	6813      	ldr	r3, [r2, #0]
 80067fa:	b133      	cbz	r3, 800680a <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80067fc:	4418      	add	r0, r3
 80067fe:	4669      	mov	r1, sp
 8006800:	4288      	cmp	r0, r1
 8006802:	d808      	bhi.n	8006816 <_sbrk+0x22>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8006804:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8006806:	4618      	mov	r0, r3
 8006808:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800680a:	4b08      	ldr	r3, [pc, #32]	; (800682c <_sbrk+0x38>)
 800680c:	6013      	str	r3, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800680e:	4418      	add	r0, r3
 8006810:	4669      	mov	r1, sp
 8006812:	4288      	cmp	r0, r1
 8006814:	d9f6      	bls.n	8006804 <_sbrk+0x10>
		errno = ENOMEM;
 8006816:	f002 fdd7 	bl	80093c8 <__errno>
 800681a:	230c      	movs	r3, #12
 800681c:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800681e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006822:	4618      	mov	r0, r3
 8006824:	bd08      	pop	{r3, pc}
 8006826:	bf00      	nop
 8006828:	200041a4 	.word	0x200041a4
 800682c:	20005d0c 	.word	0x20005d0c

08006830 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006830:	4b05      	ldr	r3, [pc, #20]	; (8006848 <SystemInit+0x18>)
 8006832:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006836:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800683a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800683e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006842:	6099      	str	r1, [r3, #8]
#endif
}
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	e000ed00 	.word	0xe000ed00

0800684c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800684c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800684e:	2200      	movs	r2, #0
 8006850:	4910      	ldr	r1, [pc, #64]	; (8006894 <MX_USB_DEVICE_Init+0x48>)
 8006852:	4811      	ldr	r0, [pc, #68]	; (8006898 <MX_USB_DEVICE_Init+0x4c>)
 8006854:	f7fd fec2 	bl	80045dc <USBD_Init>
 8006858:	b9c0      	cbnz	r0, 800688c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800685a:	4910      	ldr	r1, [pc, #64]	; (800689c <MX_USB_DEVICE_Init+0x50>)
 800685c:	480e      	ldr	r0, [pc, #56]	; (8006898 <MX_USB_DEVICE_Init+0x4c>)
 800685e:	f7fd fed3 	bl	8004608 <USBD_RegisterClass>
 8006862:	b980      	cbnz	r0, 8006886 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006864:	490e      	ldr	r1, [pc, #56]	; (80068a0 <MX_USB_DEVICE_Init+0x54>)
 8006866:	480c      	ldr	r0, [pc, #48]	; (8006898 <MX_USB_DEVICE_Init+0x4c>)
 8006868:	f7fd fe70 	bl	800454c <USBD_CDC_RegisterInterface>
 800686c:	b940      	cbnz	r0, 8006880 <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800686e:	480a      	ldr	r0, [pc, #40]	; (8006898 <MX_USB_DEVICE_Init+0x4c>)
 8006870:	f7fd fed2 	bl	8004618 <USBD_Start>
 8006874:	b900      	cbnz	r0, 8006878 <MX_USB_DEVICE_Init+0x2c>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006876:	bd08      	pop	{r3, pc}
 8006878:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800687c:	f7ff bc6c 	b.w	8006158 <Error_Handler>
    Error_Handler();
 8006880:	f7ff fc6a 	bl	8006158 <Error_Handler>
 8006884:	e7f3      	b.n	800686e <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8006886:	f7ff fc67 	bl	8006158 <Error_Handler>
 800688a:	e7eb      	b.n	8006864 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800688c:	f7ff fc64 	bl	8006158 <Error_Handler>
 8006890:	e7e3      	b.n	800685a <MX_USB_DEVICE_Init+0xe>
 8006892:	bf00      	nop
 8006894:	20000130 	.word	0x20000130
 8006898:	20004c64 	.word	0x20004c64
 800689c:	20000008 	.word	0x20000008
 80068a0:	20000120 	.word	0x20000120

080068a4 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80068a4:	2000      	movs	r0, #0
 80068a6:	4770      	bx	lr

080068a8 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80068a8:	2000      	movs	r0, #0
 80068aa:	4770      	bx	lr

080068ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80068ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ae:	b083      	sub	sp, #12
  /* USER CODE BEGIN 6 */


  volatile uint32_t counter = 0;
 80068b0:	2300      	movs	r3, #0
{
 80068b2:	4605      	mov	r5, r0
 80068b4:	460f      	mov	r7, r1
  volatile uint32_t counter = 0;
 80068b6:	9301      	str	r3, [sp, #4]

  while(counter < *Len)
  {
       RxBuffer[RxFifoIndex ] = Buf[counter];
 80068b8:	4e12      	ldr	r6, [pc, #72]	; (8006904 <CDC_Receive_FS+0x58>)
 80068ba:	4c13      	ldr	r4, [pc, #76]	; (8006908 <CDC_Receive_FS+0x5c>)
  while(counter < *Len)
 80068bc:	e014      	b.n	80068e8 <CDC_Receive_FS+0x3c>
       RxBuffer[RxFifoIndex ] = Buf[counter];
 80068be:	9a01      	ldr	r2, [sp, #4]
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	5caa      	ldrb	r2, [r5, r2]
 80068c4:	54f2      	strb	r2, [r6, r3]
       cdc_receive_put(Buf[counter]);
 80068c6:	9b01      	ldr	r3, [sp, #4]
 80068c8:	5ce8      	ldrb	r0, [r5, r3]
 80068ca:	f000 ffe9 	bl	80078a0 <cdc_receive_put>
       counter++, RxFifoIndex++;
 80068ce:	6823      	ldr	r3, [r4, #0]
 80068d0:	9a01      	ldr	r2, [sp, #4]
 80068d2:	3301      	adds	r3, #1
       if(RxFifoIndex  == RxBufferSize)
 80068d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
       counter++, RxFifoIndex++;
 80068d8:	6023      	str	r3, [r4, #0]
 80068da:	f102 0201 	add.w	r2, r2, #1
            RxFifoIndex  = 0;
 80068de:	bf08      	it	eq
 80068e0:	2300      	moveq	r3, #0
       counter++, RxFifoIndex++;
 80068e2:	9201      	str	r2, [sp, #4]
            RxFifoIndex  = 0;
 80068e4:	bf08      	it	eq
 80068e6:	6023      	streq	r3, [r4, #0]
  while(counter < *Len)
 80068e8:	9b01      	ldr	r3, [sp, #4]
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d8e6      	bhi.n	80068be <CDC_Receive_FS+0x12>
   }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80068f0:	4629      	mov	r1, r5
 80068f2:	4806      	ldr	r0, [pc, #24]	; (800690c <CDC_Receive_FS+0x60>)
 80068f4:	f7fd fe3a 	bl	800456c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80068f8:	4804      	ldr	r0, [pc, #16]	; (800690c <CDC_Receive_FS+0x60>)
 80068fa:	f7fd fe57 	bl	80045ac <USBD_CDC_ReceivePacket>

  return (USBD_OK);
  /* USER CODE END 6 */
}
 80068fe:	2000      	movs	r0, #0
 8006900:	b003      	add	sp, #12
 8006902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006904:	20005300 	.word	0x20005300
 8006908:	200041a8 	.word	0x200041a8
 800690c:	20004c64 	.word	0x20004c64

08006910 <CDC_Init_FS>:
{
 8006910:	b510      	push	{r4, lr}
	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006912:	4c07      	ldr	r4, [pc, #28]	; (8006930 <CDC_Init_FS+0x20>)
 8006914:	4907      	ldr	r1, [pc, #28]	; (8006934 <CDC_Init_FS+0x24>)
 8006916:	2200      	movs	r2, #0
 8006918:	4620      	mov	r0, r4
 800691a:	f7fd fe1f 	bl	800455c <USBD_CDC_SetTxBuffer>
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800691e:	4906      	ldr	r1, [pc, #24]	; (8006938 <CDC_Init_FS+0x28>)
 8006920:	4620      	mov	r0, r4
 8006922:	f7fd fe23 	bl	800456c <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);                                         //This is new to the function, the rest is standard HAL
 8006926:	4620      	mov	r0, r4
 8006928:	f7fd fe40 	bl	80045ac <USBD_CDC_ReceivePacket>
}
 800692c:	2000      	movs	r0, #0
 800692e:	bd10      	pop	{r4, pc}
 8006930:	20004c64 	.word	0x20004c64
 8006934:	20005100 	.word	0x20005100
 8006938:	20004f00 	.word	0x20004f00

0800693c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800693c:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800693e:	4c09      	ldr	r4, [pc, #36]	; (8006964 <CDC_Transmit_FS+0x28>)
 8006940:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  if (hcdc->TxState != 0){
 8006944:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006948:	b10b      	cbz	r3, 800694e <CDC_Transmit_FS+0x12>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 800694a:	2001      	movs	r0, #1
 800694c:	bd10      	pop	{r4, pc}
 800694e:	460a      	mov	r2, r1
 8006950:	4601      	mov	r1, r0
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006952:	4620      	mov	r0, r4
 8006954:	f7fd fe02 	bl	800455c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006958:	4620      	mov	r0, r4
}
 800695a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800695e:	f7fd be0b 	b.w	8004578 <USBD_CDC_TransmitPacket>
 8006962:	bf00      	nop
 8006964:	20004c64 	.word	0x20004c64

08006968 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006968:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 800696a:	6803      	ldr	r3, [r0, #0]
{
 800696c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800696e:	2400      	movs	r4, #0
  if(pcdHandle->Instance==USB_OTG_FS)
 8006970:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006974:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8006978:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800697c:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 800697e:	d001      	beq.n	8006984 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006980:	b009      	add	sp, #36	; 0x24
 8006982:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006984:	4d1b      	ldr	r5, [pc, #108]	; (80069f4 <HAL_PCD_MspInit+0x8c>)
 8006986:	9401      	str	r4, [sp, #4]
 8006988:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800698a:	481b      	ldr	r0, [pc, #108]	; (80069f8 <HAL_PCD_MspInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800698c:	f043 0301 	orr.w	r3, r3, #1
 8006990:	632b      	str	r3, [r5, #48]	; 0x30
 8006992:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800699a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800699c:	f44f 7300 	mov.w	r3, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069a0:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80069a2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069a4:	f7fa f9a6 	bl	8000cf4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80069a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069ac:	2002      	movs	r0, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069ae:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069b0:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80069b2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069b4:	9004      	str	r0, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80069b6:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069b8:	480f      	ldr	r0, [pc, #60]	; (80069f8 <HAL_PCD_MspInit+0x90>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ba:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80069bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069c0:	f7fa f998 	bl	8000cf4 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80069c4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80069c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ca:	636b      	str	r3, [r5, #52]	; 0x34
 80069cc:	9402      	str	r4, [sp, #8]
 80069ce:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80069d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069d4:	646b      	str	r3, [r5, #68]	; 0x44
 80069d6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80069d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80069dc:	4622      	mov	r2, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80069de:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80069e0:	2105      	movs	r1, #5
 80069e2:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80069e4:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80069e6:	f7fa f92b 	bl	8000c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80069ea:	2043      	movs	r0, #67	; 0x43
 80069ec:	f7fa f95e 	bl	8000cac <HAL_NVIC_EnableIRQ>
}
 80069f0:	b009      	add	sp, #36	; 0x24
 80069f2:	bd30      	pop	{r4, r5, pc}
 80069f4:	40023800 	.word	0x40023800
 80069f8:	40020000 	.word	0x40020000

080069fc <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80069fc:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8006a00:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006a04:	f7fd be20 	b.w	8004648 <USBD_LL_SetupStage>

08006a08 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006a08:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8006a0c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006a10:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006a14:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006a18:	f7fd be46 	b.w	80046a8 <USBD_LL_DataOutStage>

08006a1c <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006a1c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8006a20:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006a24:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006a28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a2a:	f7fd be7d 	b.w	8004728 <USBD_LL_DataInStage>
 8006a2e:	bf00      	nop

08006a30 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006a30:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006a34:	f7fd bf18 	b.w	8004868 <USBD_LL_SOF>

08006a38 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006a38:	68c1      	ldr	r1, [r0, #12]
{ 
 8006a3a:	b510      	push	{r4, lr}
 8006a3c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006a3e:	b121      	cbz	r1, 8006a4a <HAL_PCD_ResetCallback+0x12>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006a40:	2902      	cmp	r1, #2
 8006a42:	d00c      	beq.n	8006a5e <HAL_PCD_ResetCallback+0x26>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 8006a44:	f7ff fb88 	bl	8006158 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006a48:	2101      	movs	r1, #1
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006a4a:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8006a4e:	f7fd fef5 	bl	800483c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006a52:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 8006a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006a5a:	f7fd bec7 	b.w	80047ec <USBD_LL_Reset>
    speed = USBD_SPEED_FULL;
 8006a5e:	2101      	movs	r1, #1
 8006a60:	e7f3      	b.n	8006a4a <HAL_PCD_ResetCallback+0x12>
 8006a62:	bf00      	nop

08006a64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a64:	b510      	push	{r4, lr}
 8006a66:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006a68:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006a6c:	f7fd feea 	bl	8004844 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006a70:	6822      	ldr	r2, [r4, #0]
 8006a72:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8006a76:	f043 0301 	orr.w	r3, r3, #1
 8006a7a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006a7e:	6a23      	ldr	r3, [r4, #32]
 8006a80:	b123      	cbz	r3, 8006a8c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006a82:	4a03      	ldr	r2, [pc, #12]	; (8006a90 <HAL_PCD_SuspendCallback+0x2c>)
 8006a84:	6913      	ldr	r3, [r2, #16]
 8006a86:	f043 0306 	orr.w	r3, r3, #6
 8006a8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006a8c:	bd10      	pop	{r4, pc}
 8006a8e:	bf00      	nop
 8006a90:	e000ed00 	.word	0xe000ed00

08006a94 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006a94:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006a98:	f7fd bede 	b.w	8004858 <USBD_LL_Resume>

08006a9c <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006a9c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006aa0:	f7fd bef2 	b.w	8004888 <USBD_LL_IsoOUTIncomplete>

08006aa4 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006aa4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006aa8:	f7fd beec 	b.w	8004884 <USBD_LL_IsoINIncomplete>

08006aac <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006aac:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006ab0:	f7fd beec 	b.w	800488c <USBD_LL_DevConnected>

08006ab4 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ab4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006ab8:	f7fd beea 	b.w	8004890 <USBD_LL_DevDisconnected>

08006abc <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006abc:	7802      	ldrb	r2, [r0, #0]
 8006abe:	b10a      	cbz	r2, 8006ac4 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	4770      	bx	lr
{
 8006ac4:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_OTG_FS.pData = pdev;
 8006ac6:	4b15      	ldr	r3, [pc, #84]	; (8006b1c <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006ac8:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.pData = pdev;
 8006acc:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006ad0:	2404      	movs	r4, #4
  pdev->pData = &hpcd_USB_OTG_FS;
 8006ad2:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8006ad6:	2101      	movs	r1, #1
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006ad8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006ada:	e9c3 2207 	strd	r2, r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006ade:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006ae0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006ae2:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006ae4:	2202      	movs	r2, #2
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006ae6:	e9c3 5400 	strd	r5, r4, [r3]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8006aea:	62d9      	str	r1, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006aec:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006aee:	619a      	str	r2, [r3, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006af0:	f7fb fcd8 	bl	80024a4 <HAL_PCD_Init>
 8006af4:	b978      	cbnz	r0, 8006b16 <USBD_LL_Init+0x5a>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006af6:	2180      	movs	r1, #128	; 0x80
 8006af8:	4808      	ldr	r0, [pc, #32]	; (8006b1c <USBD_LL_Init+0x60>)
 8006afa:	f7fc fa49 	bl	8002f90 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006afe:	2240      	movs	r2, #64	; 0x40
 8006b00:	2100      	movs	r1, #0
 8006b02:	4806      	ldr	r0, [pc, #24]	; (8006b1c <USBD_LL_Init+0x60>)
 8006b04:	f7fc fa20 	bl	8002f48 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006b08:	2280      	movs	r2, #128	; 0x80
 8006b0a:	2101      	movs	r1, #1
 8006b0c:	4803      	ldr	r0, [pc, #12]	; (8006b1c <USBD_LL_Init+0x60>)
 8006b0e:	f7fc fa1b 	bl	8002f48 <HAL_PCDEx_SetTxFiFo>
}
 8006b12:	2000      	movs	r0, #0
 8006b14:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 8006b16:	f7ff fb1f 	bl	8006158 <Error_Handler>
 8006b1a:	e7ec      	b.n	8006af6 <USBD_LL_Init+0x3a>
 8006b1c:	20005700 	.word	0x20005700

08006b20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006b20:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006b22:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006b26:	f7fb fd49 	bl	80025bc <HAL_PCD_Start>
 8006b2a:	2803      	cmp	r0, #3
 8006b2c:	bf96      	itet	ls
 8006b2e:	4b02      	ldrls	r3, [pc, #8]	; (8006b38 <USBD_LL_Start+0x18>)
 8006b30:	2002      	movhi	r0, #2
 8006b32:	5c18      	ldrbls	r0, [r3, r0]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
  
  return usb_status;
}
 8006b34:	bd08      	pop	{r3, pc}
 8006b36:	bf00      	nop
 8006b38:	08009724 	.word	0x08009724

08006b3c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006b3c:	b510      	push	{r4, lr}
 8006b3e:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006b40:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006b44:	4613      	mov	r3, r2
 8006b46:	4622      	mov	r2, r4
 8006b48:	f7fc f8c8 	bl	8002cdc <HAL_PCD_EP_Open>
 8006b4c:	2803      	cmp	r0, #3
 8006b4e:	bf96      	itet	ls
 8006b50:	4b01      	ldrls	r3, [pc, #4]	; (8006b58 <USBD_LL_OpenEP+0x1c>)
 8006b52:	2002      	movhi	r0, #2
 8006b54:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8006b56:	bd10      	pop	{r4, pc}
 8006b58:	08009724 	.word	0x08009724

08006b5c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b5c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006b5e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006b62:	f7fc f8ef 	bl	8002d44 <HAL_PCD_EP_Close>
 8006b66:	2803      	cmp	r0, #3
 8006b68:	bf96      	itet	ls
 8006b6a:	4b02      	ldrls	r3, [pc, #8]	; (8006b74 <USBD_LL_CloseEP+0x18>)
 8006b6c:	2002      	movhi	r0, #2
 8006b6e:	5c18      	ldrbls	r0, [r3, r0]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 
  return usb_status;  
}
 8006b70:	bd08      	pop	{r3, pc}
 8006b72:	bf00      	nop
 8006b74:	08009724 	.word	0x08009724

08006b78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b78:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006b7a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006b7e:	f7fc f967 	bl	8002e50 <HAL_PCD_EP_SetStall>
 8006b82:	2803      	cmp	r0, #3
 8006b84:	bf96      	itet	ls
 8006b86:	4b02      	ldrls	r3, [pc, #8]	; (8006b90 <USBD_LL_StallEP+0x18>)
 8006b88:	2002      	movhi	r0, #2
 8006b8a:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 8006b8c:	bd08      	pop	{r3, pc}
 8006b8e:	bf00      	nop
 8006b90:	08009724 	.word	0x08009724

08006b94 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b94:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006b96:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006b9a:	f7fc f99d 	bl	8002ed8 <HAL_PCD_EP_ClrStall>
 8006b9e:	2803      	cmp	r0, #3
 8006ba0:	bf96      	itet	ls
 8006ba2:	4b02      	ldrls	r3, [pc, #8]	; (8006bac <USBD_LL_ClearStallEP+0x18>)
 8006ba4:	2002      	movhi	r0, #2
 8006ba6:	5c18      	ldrbls	r0, [r3, r0]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
  
  return usb_status; 
}
 8006ba8:	bd08      	pop	{r3, pc}
 8006baa:	bf00      	nop
 8006bac:	08009724 	.word	0x08009724

08006bb0 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8006bb0:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006bb2:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
  if((ep_addr & 0x80) == 0x80)
 8006bb6:	d406      	bmi.n	8006bc6 <USBD_LL_IsStallEP+0x16>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006bb8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006bbc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006bc0:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 8006bc4:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006bc6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006bca:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006bce:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006bd2:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 8006bd6:	4770      	bx	lr

08006bd8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006bd8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006bda:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006bde:	f7fc f869 	bl	8002cb4 <HAL_PCD_SetAddress>
 8006be2:	2803      	cmp	r0, #3
 8006be4:	bf96      	itet	ls
 8006be6:	4b02      	ldrls	r3, [pc, #8]	; (8006bf0 <USBD_LL_SetUSBAddress+0x18>)
 8006be8:	2002      	movhi	r0, #2
 8006bea:	5c18      	ldrbls	r0, [r3, r0]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 8006bec:	bd08      	pop	{r3, pc}
 8006bee:	bf00      	nop
 8006bf0:	08009724 	.word	0x08009724

08006bf4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006bf4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006bf6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006bfa:	f7fc f905 	bl	8002e08 <HAL_PCD_EP_Transmit>
 8006bfe:	2803      	cmp	r0, #3
 8006c00:	bf96      	itet	ls
 8006c02:	4b02      	ldrls	r3, [pc, #8]	; (8006c0c <USBD_LL_Transmit+0x18>)
 8006c04:	2002      	movhi	r0, #2
 8006c06:	5c18      	ldrbls	r0, [r3, r0]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
  
  return usb_status;    
}
 8006c08:	bd08      	pop	{r3, pc}
 8006c0a:	bf00      	nop
 8006c0c:	08009724 	.word	0x08009724

08006c10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006c10:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006c12:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006c16:	f7fc f8c5 	bl	8002da4 <HAL_PCD_EP_Receive>
 8006c1a:	2803      	cmp	r0, #3
 8006c1c:	bf96      	itet	ls
 8006c1e:	4b02      	ldrls	r3, [pc, #8]	; (8006c28 <USBD_LL_PrepareReceive+0x18>)
 8006c20:	2002      	movhi	r0, #2
 8006c22:	5c18      	ldrbls	r0, [r3, r0]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
  
  return usb_status; 
}
 8006c24:	bd08      	pop	{r3, pc}
 8006c26:	bf00      	nop
 8006c28:	08009724 	.word	0x08009724

08006c2c <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006c2c:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006c30:	f7fc b8e0 	b.w	8002df4 <HAL_PCD_EP_GetRxCount>

08006c34 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006c34:	2312      	movs	r3, #18
 8006c36:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8006c38:	4800      	ldr	r0, [pc, #0]	; (8006c3c <USBD_FS_DeviceDescriptor+0x8>)
 8006c3a:	4770      	bx	lr
 8006c3c:	2000014c 	.word	0x2000014c

08006c40 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006c40:	2304      	movs	r3, #4
 8006c42:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8006c44:	4800      	ldr	r0, [pc, #0]	; (8006c48 <USBD_FS_LangIDStrDescriptor+0x8>)
 8006c46:	4770      	bx	lr
 8006c48:	20000160 	.word	0x20000160

08006c4c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c4c:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006c4e:	4c04      	ldr	r4, [pc, #16]	; (8006c60 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8006c50:	4804      	ldr	r0, [pc, #16]	; (8006c64 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8006c52:	460a      	mov	r2, r1
 8006c54:	4621      	mov	r1, r4
 8006c56:	f7fe f885 	bl	8004d64 <USBD_GetString>
  return USBD_StrDesc;
}
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	bd10      	pop	{r4, pc}
 8006c5e:	bf00      	nop
 8006c60:	20005b08 	.word	0x20005b08
 8006c64:	08009744 	.word	0x08009744

08006c68 <USBD_FS_ProductStrDescriptor>:
{
 8006c68:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006c6a:	4c04      	ldr	r4, [pc, #16]	; (8006c7c <USBD_FS_ProductStrDescriptor+0x14>)
 8006c6c:	4804      	ldr	r0, [pc, #16]	; (8006c80 <USBD_FS_ProductStrDescriptor+0x18>)
 8006c6e:	460a      	mov	r2, r1
 8006c70:	4621      	mov	r1, r4
 8006c72:	f7fe f877 	bl	8004d64 <USBD_GetString>
}
 8006c76:	4620      	mov	r0, r4
 8006c78:	bd10      	pop	{r4, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20005b08 	.word	0x20005b08
 8006c80:	08009758 	.word	0x08009758

08006c84 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c84:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c86:	4c04      	ldr	r4, [pc, #16]	; (8006c98 <USBD_FS_ConfigStrDescriptor+0x14>)
 8006c88:	4804      	ldr	r0, [pc, #16]	; (8006c9c <USBD_FS_ConfigStrDescriptor+0x18>)
 8006c8a:	460a      	mov	r2, r1
 8006c8c:	4621      	mov	r1, r4
 8006c8e:	f7fe f869 	bl	8004d64 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8006c92:	4620      	mov	r0, r4
 8006c94:	bd10      	pop	{r4, pc}
 8006c96:	bf00      	nop
 8006c98:	20005b08 	.word	0x20005b08
 8006c9c:	08009728 	.word	0x08009728

08006ca0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ca0:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ca2:	4c04      	ldr	r4, [pc, #16]	; (8006cb4 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8006ca4:	4804      	ldr	r0, [pc, #16]	; (8006cb8 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8006ca6:	460a      	mov	r2, r1
 8006ca8:	4621      	mov	r1, r4
 8006caa:	f7fe f85b 	bl	8004d64 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8006cae:	4620      	mov	r0, r4
 8006cb0:	bd10      	pop	{r4, pc}
 8006cb2:	bf00      	nop
 8006cb4:	20005b08 	.word	0x20005b08
 8006cb8:	08009734 	.word	0x08009734

08006cbc <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006cbc:	4a44      	ldr	r2, [pc, #272]	; (8006dd0 <USBD_FS_SerialStrDescriptor+0x114>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006cbe:	4b45      	ldr	r3, [pc, #276]	; (8006dd4 <USBD_FS_SerialStrDescriptor+0x118>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006cc0:	6812      	ldr	r2, [r2, #0]

  deviceserial0 += deviceserial2;
 8006cc2:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 8006cc4:	201a      	movs	r0, #26

  if (deviceserial0 != 0)
 8006cc6:	18d2      	adds	r2, r2, r3
  *length = USB_SIZ_STRING_SERIAL;
 8006cc8:	8008      	strh	r0, [r1, #0]
  if (deviceserial0 != 0)
 8006cca:	d101      	bne.n	8006cd0 <USBD_FS_SerialStrDescriptor+0x14>
}
 8006ccc:	4842      	ldr	r0, [pc, #264]	; (8006dd8 <USBD_FS_SerialStrDescriptor+0x11c>)
 8006cce:	4770      	bx	lr
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 8006cd0:	0f13      	lsrs	r3, r2, #28
 8006cd2:	b2d8      	uxtb	r0, r3
 8006cd4:	2b09      	cmp	r3, #9
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006cd6:	4941      	ldr	r1, [pc, #260]	; (8006ddc <USBD_FS_SerialStrDescriptor+0x120>)
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006cd8:	4b3f      	ldr	r3, [pc, #252]	; (8006dd8 <USBD_FS_SerialStrDescriptor+0x11c>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006cda:	6809      	ldr	r1, [r1, #0]
      pbuf[2 * idx] = (value >> 28) + '0';
 8006cdc:	bf94      	ite	ls
 8006cde:	3030      	addls	r0, #48	; 0x30
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ce0:	3037      	addhi	r0, #55	; 0x37
{
 8006ce2:	b410      	push	{r4}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ce4:	7098      	strb	r0, [r3, #2]
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8006ce6:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8006ce8:	f3c2 6003 	ubfx	r0, r2, #24, #4
 8006cec:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8006cee:	70dc      	strb	r4, [r3, #3]
 8006cf0:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8006cf2:	bf94      	ite	ls
 8006cf4:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006cf6:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8006cf8:	f3c2 5003 	ubfx	r0, r2, #20, #4
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006cfc:	711c      	strb	r4, [r3, #4]
    pbuf[2 * idx + 1] = 0;
 8006cfe:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8006d00:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8006d02:	715c      	strb	r4, [r3, #5]
 8006d04:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8006d06:	bf94      	ite	ls
 8006d08:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d0a:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8006d0c:	f3c2 4003 	ubfx	r0, r2, #16, #4
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d10:	719c      	strb	r4, [r3, #6]
    pbuf[2 * idx + 1] = 0;
 8006d12:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8006d14:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8006d16:	71dc      	strb	r4, [r3, #7]
 8006d18:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8006d1a:	bf94      	ite	ls
 8006d1c:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d1e:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8006d20:	f3c2 3003 	ubfx	r0, r2, #12, #4
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d24:	721c      	strb	r4, [r3, #8]
    pbuf[2 * idx + 1] = 0;
 8006d26:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8006d28:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8006d2a:	725c      	strb	r4, [r3, #9]
 8006d2c:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8006d2e:	bf94      	ite	ls
 8006d30:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d32:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8006d34:	f3c2 2003 	ubfx	r0, r2, #8, #4
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d38:	729c      	strb	r4, [r3, #10]
    pbuf[2 * idx + 1] = 0;
 8006d3a:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8006d3c:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8006d3e:	72dc      	strb	r4, [r3, #11]
 8006d40:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8006d42:	bf94      	ite	ls
 8006d44:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d46:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8006d48:	f3c2 1003 	ubfx	r0, r2, #4, #4
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d4c:	731c      	strb	r4, [r3, #12]
    pbuf[2 * idx + 1] = 0;
 8006d4e:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8006d50:	2809      	cmp	r0, #9
 8006d52:	f002 020f 	and.w	r2, r2, #15
    pbuf[2 * idx + 1] = 0;
 8006d56:	735c      	strb	r4, [r3, #13]
 8006d58:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8006d5a:	bf98      	it	ls
 8006d5c:	3430      	addls	r4, #48	; 0x30
 8006d5e:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d60:	bf88      	it	hi
 8006d62:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8006d64:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8006d66:	bf94      	ite	ls
 8006d68:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d6a:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8006d6c:	0f0a      	lsrs	r2, r1, #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d6e:	7418      	strb	r0, [r3, #16]
    pbuf[2 * idx + 1] = 0;
 8006d70:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 8006d72:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 8006d74:	7458      	strb	r0, [r3, #17]
 8006d76:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 8006d78:	bf94      	ite	ls
 8006d7a:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d7c:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8006d7e:	f3c1 6203 	ubfx	r2, r1, #24, #4
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d82:	7498      	strb	r0, [r3, #18]
    pbuf[2 * idx + 1] = 0;
 8006d84:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 8006d86:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 8006d88:	74d8      	strb	r0, [r3, #19]
 8006d8a:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 8006d8c:	bf94      	ite	ls
 8006d8e:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d90:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8006d92:	f3c1 5203 	ubfx	r2, r1, #20, #4
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d96:	7518      	strb	r0, [r3, #20]
    pbuf[2 * idx + 1] = 0;
 8006d98:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 8006d9a:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 8006d9c:	7558      	strb	r0, [r3, #21]
    if (((value >> 28)) < 0xA)
 8006d9e:	f3c1 4103 	ubfx	r1, r1, #16, #4
 8006da2:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 8006da4:	bf98      	it	ls
 8006da6:	3030      	addls	r0, #48	; 0x30
 8006da8:	b2ca      	uxtb	r2, r1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006daa:	bf88      	it	hi
 8006dac:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8006dae:	2909      	cmp	r1, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8006db0:	bf94      	ite	ls
 8006db2:	3230      	addls	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006db4:	3237      	addhi	r2, #55	; 0x37
 8006db6:	739c      	strb	r4, [r3, #14]
 8006db8:	7598      	strb	r0, [r3, #22]
    pbuf[2 * idx + 1] = 0;
 8006dba:	2400      	movs	r4, #0
 8006dbc:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006dbe:	761a      	strb	r2, [r3, #24]
    pbuf[2 * idx + 1] = 0;
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	75d8      	strb	r0, [r3, #23]
 8006dc4:	73dc      	strb	r4, [r3, #15]
 8006dc6:	765a      	strb	r2, [r3, #25]
}
 8006dc8:	4803      	ldr	r0, [pc, #12]	; (8006dd8 <USBD_FS_SerialStrDescriptor+0x11c>)
 8006dca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	1fff7a10 	.word	0x1fff7a10
 8006dd4:	1fff7a18 	.word	0x1fff7a18
 8006dd8:	20000164 	.word	0x20000164
 8006ddc:	1fff7a14 	.word	0x1fff7a14

08006de0 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8006de0:	b470      	push	{r4, r5, r6}
  uint32_t nsec_part = nsec % 1000000000UL;
 8006de2:	680d      	ldr	r5, [r1, #0]
  uint32_t sec_part = nsec / 1000000000UL;
 8006de4:	4b06      	ldr	r3, [pc, #24]	; (8006e00 <_ZN3ros16normalizeSecNSecERmS0_+0x20>)
  sec += sec_part;
 8006de6:	6804      	ldr	r4, [r0, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8006de8:	4e06      	ldr	r6, [pc, #24]	; (8006e04 <_ZN3ros16normalizeSecNSecERmS0_+0x24>)
  uint32_t sec_part = nsec / 1000000000UL;
 8006dea:	0a6a      	lsrs	r2, r5, #9
 8006dec:	fba3 3202 	umull	r3, r2, r3, r2
 8006df0:	09d3      	lsrs	r3, r2, #7
  sec += sec_part;
 8006df2:	441c      	add	r4, r3
  uint32_t nsec_part = nsec % 1000000000UL;
 8006df4:	fb06 5313 	mls	r3, r6, r3, r5
  sec += sec_part;
 8006df8:	6004      	str	r4, [r0, #0]
  nsec = nsec_part;
 8006dfa:	600b      	str	r3, [r1, #0]
}
 8006dfc:	bc70      	pop	{r4, r5, r6}
 8006dfe:	4770      	bx	lr
 8006e00:	00044b83 	.word	0x00044b83
 8006e04:	3b9aca00 	.word	0x3b9aca00

08006e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006e40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006e0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006e0e:	e003      	b.n	8006e18 <LoopCopyDataInit>

08006e10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006e10:	4b0c      	ldr	r3, [pc, #48]	; (8006e44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006e12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006e14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006e16:	3104      	adds	r1, #4

08006e18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006e18:	480b      	ldr	r0, [pc, #44]	; (8006e48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006e1a:	4b0c      	ldr	r3, [pc, #48]	; (8006e4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006e1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006e1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006e20:	d3f6      	bcc.n	8006e10 <CopyDataInit>
  ldr  r2, =_sbss
 8006e22:	4a0b      	ldr	r2, [pc, #44]	; (8006e50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006e24:	e002      	b.n	8006e2c <LoopFillZerobss>

08006e26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006e26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006e28:	f842 3b04 	str.w	r3, [r2], #4

08006e2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006e2c:	4b09      	ldr	r3, [pc, #36]	; (8006e54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006e2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006e30:	d3f9      	bcc.n	8006e26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006e32:	f7ff fcfd 	bl	8006830 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006e36:	f002 facd 	bl	80093d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006e3a:	f7ff f851 	bl	8005ee0 <main>
  bx  lr    
 8006e3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006e40:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006e44:	08009ba8 	.word	0x08009ba8
  ldr  r0, =_sdata
 8006e48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006e4c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8006e50:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8006e54:	20005d0c 	.word	0x20005d0c

08006e58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006e58:	e7fe      	b.n	8006e58 <ADC_IRQHandler>
	...

08006e5c <_ZNK8std_msgs4Time9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8006e5c:	6843      	ldr	r3, [r0, #4]
 8006e5e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8006e60:	6843      	ldr	r3, [r0, #4]
 8006e62:	0a1b      	lsrs	r3, r3, #8
 8006e64:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8006e66:	88c3      	ldrh	r3, [r0, #6]
 8006e68:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8006e6a:	79c3      	ldrb	r3, [r0, #7]
 8006e6c:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->data.sec);
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8006e6e:	6883      	ldr	r3, [r0, #8]
 8006e70:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8006e72:	6883      	ldr	r3, [r0, #8]
 8006e74:	0a1b      	lsrs	r3, r3, #8
 8006e76:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8006e78:	8943      	ldrh	r3, [r0, #10]
 8006e7a:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8006e7c:	7ac3      	ldrb	r3, [r0, #11]
 8006e7e:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->data.nsec);
      return offset;
    }
 8006e80:	2008      	movs	r0, #8
 8006e82:	4770      	bx	lr

08006e84 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8006e84:	780b      	ldrb	r3, [r1, #0]
 8006e86:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006e88:	784a      	ldrb	r2, [r1, #1]
 8006e8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006e8e:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006e90:	788a      	ldrb	r2, [r1, #2]
 8006e92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e96:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006e98:	78ca      	ldrb	r2, [r1, #3]
 8006e9a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006e9e:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->data.sec);
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8006ea0:	790b      	ldrb	r3, [r1, #4]
 8006ea2:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006ea4:	794a      	ldrb	r2, [r1, #5]
 8006ea6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006eaa:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006eac:	798a      	ldrb	r2, [r1, #6]
 8006eae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006eb2:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006eb4:	79ca      	ldrb	r2, [r1, #7]
 8006eb6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006eba:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->data.nsec);
     return offset;
    }
 8006ebc:	2008      	movs	r0, #8
 8006ebe:	4770      	bx	lr

08006ec0 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8006ec0:	4800      	ldr	r0, [pc, #0]	; (8006ec4 <_ZN8std_msgs4Time7getTypeEv+0x4>)
 8006ec2:	4770      	bx	lr
 8006ec4:	08009ae8 	.word	0x08009ae8

08006ec8 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8006ec8:	4800      	ldr	r0, [pc, #0]	; (8006ecc <_ZN8std_msgs4Time6getMD5Ev+0x4>)
 8006eca:	4770      	bx	lr
 8006ecc:	08009ac4 	.word	0x08009ac4

08006ed0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8006ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8006ed4:	780b      	ldrb	r3, [r1, #0]
 8006ed6:	8083      	strh	r3, [r0, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006ed8:	784a      	ldrb	r2, [r1, #1]
 8006eda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006ede:	8083      	strh	r3, [r0, #4]
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
  {
    var = 0;
    for (size_t i = 0; i < sizeof(V); i++)
      var |= (arr[i] << (8 * i));
 8006ee0:	790d      	ldrb	r5, [r1, #4]
 8006ee2:	78ca      	ldrb	r2, [r1, #3]
 8006ee4:	794b      	ldrb	r3, [r1, #5]
 8006ee6:	042d      	lsls	r5, r5, #16
    virtual int deserialize(unsigned char *inbuffer)
 8006ee8:	4607      	mov	r7, r0
 8006eea:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8006eee:	7888      	ldrb	r0, [r1, #2]
 8006ef0:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 8006ef4:	4305      	orrs	r5, r0
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8006ef6:	f105 0806 	add.w	r8, r5, #6
 8006efa:	f1b8 0f06 	cmp.w	r8, #6
    virtual int deserialize(unsigned char *inbuffer)
 8006efe:	460e      	mov	r6, r1
 8006f00:	f101 0405 	add.w	r4, r1, #5
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8006f04:	d904      	bls.n	8006f10 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x40>
 8006f06:	462a      	mov	r2, r5
 8006f08:	3106      	adds	r1, #6
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f002 faa1 	bl	8009452 <memmove>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_topic_name-1]=0;
 8006f10:	1973      	adds	r3, r6, r5
 8006f12:	2200      	movs	r2, #0
 8006f14:	715a      	strb	r2, [r3, #5]
      this->topic_name = (char *)(inbuffer + offset-1);
 8006f16:	60bc      	str	r4, [r7, #8]
 8006f18:	79dc      	ldrb	r4, [r3, #7]
 8006f1a:	7a1a      	ldrb	r2, [r3, #8]
 8006f1c:	7a5b      	ldrb	r3, [r3, #9]
 8006f1e:	f816 0008 	ldrb.w	r0, [r6, r8]
 8006f22:	0224      	lsls	r4, r4, #8
 8006f24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006f28:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
      offset += length_topic_name;
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
      offset += 4;
 8006f2c:	f108 0804 	add.w	r8, r8, #4
 8006f30:	4304      	orrs	r4, r0
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8006f32:	4444      	add	r4, r8
 8006f34:	4544      	cmp	r4, r8
 8006f36:	d90f      	bls.n	8006f58 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x88>
          inbuffer[k-1]=inbuffer[k];
 8006f38:	1b63      	subs	r3, r4, r5
 8006f3a:	3b0a      	subs	r3, #10
 8006f3c:	f105 020b 	add.w	r2, r5, #11
 8006f40:	f105 010a 	add.w	r1, r5, #10
 8006f44:	f105 0009 	add.w	r0, r5, #9
 8006f48:	4294      	cmp	r4, r2
 8006f4a:	bf2c      	ite	cs
 8006f4c:	461a      	movcs	r2, r3
 8006f4e:	2201      	movcc	r2, #1
 8006f50:	4431      	add	r1, r6
 8006f52:	4430      	add	r0, r6
 8006f54:	f002 fa7d 	bl	8009452 <memmove>
      }
      inbuffer[offset+length_message_type-1]=0;
 8006f58:	1932      	adds	r2, r6, r4
      this->message_type = (char *)(inbuffer + offset-1);
 8006f5a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006f5e:	eb06 0308 	add.w	r3, r6, r8
      inbuffer[offset+length_message_type-1]=0;
 8006f62:	2100      	movs	r1, #0
 8006f64:	f802 1c01 	strb.w	r1, [r2, #-1]
      this->message_type = (char *)(inbuffer + offset-1);
 8006f68:	60fb      	str	r3, [r7, #12]
 8006f6a:	7855      	ldrb	r5, [r2, #1]
 8006f6c:	7891      	ldrb	r1, [r2, #2]
 8006f6e:	78d2      	ldrb	r2, [r2, #3]
 8006f70:	5d33      	ldrb	r3, [r6, r4]
 8006f72:	022d      	lsls	r5, r5, #8
 8006f74:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8006f78:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
      offset += length_message_type;
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
      offset += 4;
 8006f7c:	f104 0804 	add.w	r8, r4, #4
 8006f80:	431d      	orrs	r5, r3
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8006f82:	4445      	add	r5, r8
 8006f84:	45a8      	cmp	r8, r5
 8006f86:	d20c      	bcs.n	8006fa2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xd2>
          inbuffer[k-1]=inbuffer[k];
 8006f88:	1b2b      	subs	r3, r5, r4
 8006f8a:	3b04      	subs	r3, #4
 8006f8c:	1d62      	adds	r2, r4, #5
 8006f8e:	1ce0      	adds	r0, r4, #3
 8006f90:	4295      	cmp	r5, r2
 8006f92:	bf2c      	ite	cs
 8006f94:	461a      	movcs	r2, r3
 8006f96:	2201      	movcc	r2, #1
 8006f98:	4430      	add	r0, r6
 8006f9a:	eb06 0108 	add.w	r1, r6, r8
 8006f9e:	f002 fa58 	bl	8009452 <memmove>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8006fa2:	1972      	adds	r2, r6, r5
      this->md5sum = (char *)(inbuffer + offset-1);
 8006fa4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006fa8:	eb06 0308 	add.w	r3, r6, r8
      inbuffer[offset+length_md5sum-1]=0;
 8006fac:	2100      	movs	r1, #0
 8006fae:	f802 1c01 	strb.w	r1, [r2, #-1]
      this->md5sum = (char *)(inbuffer + offset-1);
 8006fb2:	613b      	str	r3, [r7, #16]
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006fb4:	7893      	ldrb	r3, [r2, #2]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006fb6:	7850      	ldrb	r0, [r2, #1]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006fb8:	5d71      	ldrb	r1, [r6, r5]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006fba:	78d2      	ldrb	r2, [r2, #3]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006fbc:	041b      	lsls	r3, r3, #16
 8006fbe:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8006fc2:	430b      	orrs	r3, r1
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006fc4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      this->buffer_size = u_buffer_size.real;
      offset += sizeof(this->buffer_size);
     return offset;
    }
 8006fc8:	1d28      	adds	r0, r5, #4
      this->buffer_size = u_buffer_size.real;
 8006fca:	617b      	str	r3, [r7, #20]
    }
 8006fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006fd0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8006fd0:	4800      	ldr	r0, [pc, #0]	; (8006fd4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x4>)
 8006fd2:	4770      	bx	lr
 8006fd4:	080099e8 	.word	0x080099e8

08006fd8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8006fd8:	4800      	ldr	r0, [pc, #0]	; (8006fdc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x4>)
 8006fda:	4770      	bx	lr
 8006fdc:	080099c4 	.word	0x080099c4

08006fe0 <_ZN14rosserial_msgs3Log11deserializeEPh>:
      memcpy(outbuffer + offset, this->msg, length_msg);
      offset += length_msg;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8006fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8006fe2:	460b      	mov	r3, r1
    virtual int deserialize(unsigned char *inbuffer)
 8006fe4:	460d      	mov	r5, r1
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8006fe6:	f813 2b04 	ldrb.w	r2, [r3], #4
 8006fea:	7102      	strb	r2, [r0, #4]
 8006fec:	78cc      	ldrb	r4, [r1, #3]
 8006fee:	788a      	ldrb	r2, [r1, #2]
 8006ff0:	7909      	ldrb	r1, [r1, #4]
 8006ff2:	0424      	lsls	r4, r4, #16
 8006ff4:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8006ff8:	786a      	ldrb	r2, [r5, #1]
 8006ffa:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8006ffe:	4314      	orrs	r4, r2
      offset += sizeof(this->level);
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8007000:	1d67      	adds	r7, r4, #5
 8007002:	2f05      	cmp	r7, #5
    virtual int deserialize(unsigned char *inbuffer)
 8007004:	4606      	mov	r6, r0
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8007006:	d905      	bls.n	8007014 <_ZN14rosserial_msgs3Log11deserializeEPh+0x34>
 8007008:	4618      	mov	r0, r3
 800700a:	4622      	mov	r2, r4
 800700c:	1d69      	adds	r1, r5, #5
 800700e:	f002 fa20 	bl	8009452 <memmove>
 8007012:	4603      	mov	r3, r0
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_msg-1]=0;
 8007014:	442c      	add	r4, r5
 8007016:	2200      	movs	r2, #0
 8007018:	7122      	strb	r2, [r4, #4]
      this->msg = (char *)(inbuffer + offset-1);
      offset += length_msg;
     return offset;
    }
 800701a:	4638      	mov	r0, r7
      this->msg = (char *)(inbuffer + offset-1);
 800701c:	60b3      	str	r3, [r6, #8]
    }
 800701e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007020 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8007020:	4800      	ldr	r0, [pc, #0]	; (8007024 <_ZN14rosserial_msgs3Log7getTypeEv+0x4>)
 8007022:	4770      	bx	lr
 8007024:	080099b0 	.word	0x080099b0

08007028 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8007028:	4800      	ldr	r0, [pc, #0]	; (800702c <_ZN14rosserial_msgs3Log6getMD5Ev+0x4>)
 800702a:	4770      	bx	lr
 800702c:	0800998c 	.word	0x0800998c

08007030 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }

    const char * getType(){ return REQUESTPARAM; };
 8007030:	4800      	ldr	r0, [pc, #0]	; (8007034 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x4>)
 8007032:	4770      	bx	lr
 8007034:	08009a04 	.word	0x08009a04

08007038 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8007038:	4800      	ldr	r0, [pc, #0]	; (800703c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x4>)
 800703a:	4770      	bx	lr
 800703c:	08009968 	.word	0x08009968

08007040 <_ZNK8std_msgs4Byte9serializeEPh>:
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8007040:	7903      	ldrb	r3, [r0, #4]
 8007042:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
      return offset;
    }
 8007044:	2001      	movs	r0, #1
 8007046:	4770      	bx	lr

08007048 <_ZN8std_msgs4Byte11deserializeEPh>:
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
      this->data = u_data.real;
 8007048:	780b      	ldrb	r3, [r1, #0]
 800704a:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
 800704c:	2001      	movs	r0, #1
 800704e:	4770      	bx	lr

08007050 <_ZN8std_msgs4Byte7getTypeEv>:

    const char * getType(){ return "std_msgs/Byte"; };
 8007050:	4800      	ldr	r0, [pc, #0]	; (8007054 <_ZN8std_msgs4Byte7getTypeEv+0x4>)
 8007052:	4770      	bx	lr
 8007054:	08009a80 	.word	0x08009a80

08007058 <_ZN8std_msgs4Byte6getMD5Ev>:
    const char * getMD5(){ return "ad736a2e8818154c487bb80fe42ce43b"; };
 8007058:	4800      	ldr	r0, [pc, #0]	; (800705c <_ZN8std_msgs4Byte6getMD5Ev+0x4>)
 800705a:	4770      	bx	lr
 800705c:	08009a5c 	.word	0x08009a5c

08007060 <_ZN8std_msgs6String11deserializeEPh>:
      memcpy(outbuffer + offset, this->data, length_data);
      offset += length_data;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8007060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007062:	460d      	mov	r5, r1
 8007064:	788c      	ldrb	r4, [r1, #2]
 8007066:	7849      	ldrb	r1, [r1, #1]
 8007068:	78ea      	ldrb	r2, [r5, #3]
 800706a:	782b      	ldrb	r3, [r5, #0]
 800706c:	0424      	lsls	r4, r4, #16
 800706e:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
 8007072:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
 8007076:	431c      	orrs	r4, r3
    {
      int offset = 0;
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8007078:	1d26      	adds	r6, r4, #4
 800707a:	2e04      	cmp	r6, #4
    virtual int deserialize(unsigned char *inbuffer)
 800707c:	4607      	mov	r7, r0
 800707e:	f105 0303 	add.w	r3, r5, #3
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8007082:	d905      	bls.n	8007090 <_ZN8std_msgs6String11deserializeEPh+0x30>
 8007084:	4618      	mov	r0, r3
 8007086:	4622      	mov	r2, r4
 8007088:	1d29      	adds	r1, r5, #4
 800708a:	f002 f9e2 	bl	8009452 <memmove>
 800708e:	4603      	mov	r3, r0
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_data-1]=0;
 8007090:	442c      	add	r4, r5
 8007092:	2200      	movs	r2, #0
 8007094:	70e2      	strb	r2, [r4, #3]
      this->data = (char *)(inbuffer + offset-1);
      offset += length_data;
     return offset;
    }
 8007096:	4630      	mov	r0, r6
      this->data = (char *)(inbuffer + offset-1);
 8007098:	607b      	str	r3, [r7, #4]
    }
 800709a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800709c <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 800709c:	4800      	ldr	r0, [pc, #0]	; (80070a0 <_ZN8std_msgs6String7getTypeEv+0x4>)
 800709e:	4770      	bx	lr
 80070a0:	08009b50 	.word	0x08009b50

080070a4 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 80070a4:	4800      	ldr	r0, [pc, #0]	; (80070a8 <_ZN8std_msgs6String6getMD5Ev+0x4>)
 80070a6:	4770      	bx	lr
 80070a8:	08009b2c 	.word	0x08009b2c

080070ac <_ZNK8std_msgs4Int89serializeEPh>:
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80070ac:	7903      	ldrb	r3, [r0, #4]
 80070ae:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
      return offset;
    }
 80070b0:	2001      	movs	r0, #1
 80070b2:	4770      	bx	lr

080070b4 <_ZN8std_msgs4Int811deserializeEPh>:
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
      this->data = u_data.real;
 80070b4:	780b      	ldrb	r3, [r1, #0]
 80070b6:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
 80070b8:	2001      	movs	r0, #1
 80070ba:	4770      	bx	lr

080070bc <_ZN8std_msgs4Int87getTypeEv>:

    const char * getType(){ return "std_msgs/Int8"; };
 80070bc:	4800      	ldr	r0, [pc, #0]	; (80070c0 <_ZN8std_msgs4Int87getTypeEv+0x4>)
 80070be:	4770      	bx	lr
 80070c0:	08009ab4 	.word	0x08009ab4

080070c4 <_ZN8std_msgs4Int86getMD5Ev>:
    const char * getMD5(){ return "27ffa0c9c4b8fb8492252bcad9e5c57b"; };
 80070c4:	4800      	ldr	r0, [pc, #0]	; (80070c8 <_ZN8std_msgs4Int86getMD5Ev+0x4>)
 80070c6:	4770      	bx	lr
 80070c8:	08009a90 	.word	0x08009a90

080070cc <_ZNK8std_msgs5UInt89serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 80070cc:	7903      	ldrb	r3, [r0, #4]
 80070ce:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
      return offset;
    }
 80070d0:	2001      	movs	r0, #1
 80070d2:	4770      	bx	lr

080070d4 <_ZN8std_msgs5UInt811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 80070d4:	780b      	ldrb	r3, [r1, #0]
 80070d6:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
 80070d8:	2001      	movs	r0, #1
 80070da:	4770      	bx	lr

080070dc <_ZN8std_msgs5UInt87getTypeEv>:

    const char * getType(){ return "std_msgs/UInt8"; };
 80070dc:	4800      	ldr	r0, [pc, #0]	; (80070e0 <_ZN8std_msgs5UInt87getTypeEv+0x4>)
 80070de:	4770      	bx	lr
 80070e0:	08009b1c 	.word	0x08009b1c

080070e4 <_ZN8std_msgs5UInt86getMD5Ev>:
    const char * getMD5(){ return "7c8164229e7d2c17eb95e9231617fdee"; };
 80070e4:	4800      	ldr	r0, [pc, #0]	; (80070e8 <_ZN8std_msgs5UInt86getMD5Ev+0x4>)
 80070e6:	4770      	bx	lr
 80070e8:	08009af8 	.word	0x08009af8

080070ec <_ZNK8std_msgs6UInt329serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 80070ec:	6843      	ldr	r3, [r0, #4]
 80070ee:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->data >> (8 * 1)) & 0xFF;
 80070f0:	6843      	ldr	r3, [r0, #4]
 80070f2:	0a1b      	lsrs	r3, r3, #8
 80070f4:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->data >> (8 * 2)) & 0xFF;
 80070f6:	88c3      	ldrh	r3, [r0, #6]
 80070f8:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->data >> (8 * 3)) & 0xFF;
 80070fa:	79c3      	ldrb	r3, [r0, #7]
 80070fc:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->data);
      return offset;
    }
 80070fe:	2004      	movs	r0, #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop

08007104 <_ZN8std_msgs6UInt3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data =  ((uint32_t) (*(inbuffer + offset)));
 8007104:	780b      	ldrb	r3, [r1, #0]
 8007106:	6043      	str	r3, [r0, #4]
      this->data |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007108:	784a      	ldrb	r2, [r1, #1]
 800710a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800710e:	6043      	str	r3, [r0, #4]
      this->data |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007110:	788a      	ldrb	r2, [r1, #2]
 8007112:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007116:	6043      	str	r3, [r0, #4]
      this->data |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007118:	78ca      	ldrb	r2, [r1, #3]
 800711a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800711e:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
 8007120:	2004      	movs	r0, #4
 8007122:	4770      	bx	lr

08007124 <_ZN8std_msgs6UInt327getTypeEv>:

    const char * getType(){ return "std_msgs/UInt32"; };
 8007124:	4800      	ldr	r0, [pc, #0]	; (8007128 <_ZN8std_msgs6UInt327getTypeEv+0x4>)
 8007126:	4770      	bx	lr
 8007128:	08009b84 	.word	0x08009b84

0800712c <_ZN8std_msgs6UInt326getMD5Ev>:
    const char * getMD5(){ return "304a39449588c7f8ce2df6e8001c5fce"; };
 800712c:	4800      	ldr	r0, [pc, #0]	; (8007130 <_ZN8std_msgs6UInt326getMD5Ev+0x4>)
 800712e:	4770      	bx	lr
 8007130:	08009b60 	.word	0x08009b60

08007134 <_ZN13geometry_msgs7Vector37getTypeEv>:
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
     return offset;
    }

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8007134:	4800      	ldr	r0, [pc, #0]	; (8007138 <_ZN13geometry_msgs7Vector37getTypeEv+0x4>)
 8007136:	4770      	bx	lr
 8007138:	08009950 	.word	0x08009950

0800713c <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 800713c:	4800      	ldr	r0, [pc, #0]	; (8007140 <_ZN13geometry_msgs7Vector36getMD5Ev+0x4>)
 800713e:	4770      	bx	lr
 8007140:	0800992c 	.word	0x0800992c

08007144 <rpm_right_subCb>:
}

extern "C" void rpm_right_subCb(const std_msgs::Int8& msg)
{
	//speedDataRight = 0;
	if (msg.data >= 6) {
 8007144:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8007148:	2b05      	cmp	r3, #5
 800714a:	dc0c      	bgt.n	8007166 <rpm_right_subCb+0x22>
		speedDataRight = msg.data;
		sideDataRight = 1;
	}
	else if (msg.data <= -6) {
 800714c:	1d5a      	adds	r2, r3, #5
 800714e:	db03      	blt.n	8007158 <rpm_right_subCb+0x14>
		speedDataRight = -(msg.data);
		sideDataRight = 0;
	}
	else {
		speedDataRight = 0;
 8007150:	4b08      	ldr	r3, [pc, #32]	; (8007174 <rpm_right_subCb+0x30>)
 8007152:	2200      	movs	r2, #0
 8007154:	701a      	strb	r2, [r3, #0]
	}
}
 8007156:	4770      	bx	lr
		speedDataRight = -(msg.data);
 8007158:	4806      	ldr	r0, [pc, #24]	; (8007174 <rpm_right_subCb+0x30>)
		sideDataRight = 0;
 800715a:	4a07      	ldr	r2, [pc, #28]	; (8007178 <rpm_right_subCb+0x34>)
		speedDataRight = -(msg.data);
 800715c:	425b      	negs	r3, r3
		sideDataRight = 0;
 800715e:	2100      	movs	r1, #0
		speedDataRight = -(msg.data);
 8007160:	7003      	strb	r3, [r0, #0]
		sideDataRight = 0;
 8007162:	7011      	strb	r1, [r2, #0]
 8007164:	4770      	bx	lr
		speedDataRight = msg.data;
 8007166:	4903      	ldr	r1, [pc, #12]	; (8007174 <rpm_right_subCb+0x30>)
		sideDataRight = 1;
 8007168:	4a03      	ldr	r2, [pc, #12]	; (8007178 <rpm_right_subCb+0x34>)
		speedDataRight = msg.data;
 800716a:	700b      	strb	r3, [r1, #0]
		sideDataRight = 1;
 800716c:	2301      	movs	r3, #1
 800716e:	7013      	strb	r3, [r2, #0]
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	20004bcd 	.word	0x20004bcd
 8007178:	20004954 	.word	0x20004954

0800717c <rpm_left_subCb>:

extern "C" void rpm_left_subCb(const std_msgs::Int8& msg)
{
	//speedDataLeft = 0;
	if (msg.data >= 6) {
 800717c:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8007180:	2b05      	cmp	r3, #5
 8007182:	dc0c      	bgt.n	800719e <rpm_left_subCb+0x22>
		speedDataLeft = msg.data;
		sideDataLeft = 0;
	}
	else if (msg.data <= -6) {
 8007184:	1d5a      	adds	r2, r3, #5
 8007186:	db03      	blt.n	8007190 <rpm_left_subCb+0x14>
		speedDataLeft = -(msg.data);
		sideDataLeft = 1;
	}
	else {
		speedDataLeft = 0;
 8007188:	4b08      	ldr	r3, [pc, #32]	; (80071ac <rpm_left_subCb+0x30>)
 800718a:	2200      	movs	r2, #0
 800718c:	701a      	strb	r2, [r3, #0]
	}
}
 800718e:	4770      	bx	lr
		speedDataLeft = -(msg.data);
 8007190:	4806      	ldr	r0, [pc, #24]	; (80071ac <rpm_left_subCb+0x30>)
		sideDataLeft = 1;
 8007192:	4a07      	ldr	r2, [pc, #28]	; (80071b0 <rpm_left_subCb+0x34>)
		speedDataLeft = -(msg.data);
 8007194:	425b      	negs	r3, r3
		sideDataLeft = 1;
 8007196:	2101      	movs	r1, #1
		speedDataLeft = -(msg.data);
 8007198:	7003      	strb	r3, [r0, #0]
		sideDataLeft = 1;
 800719a:	7011      	strb	r1, [r2, #0]
 800719c:	4770      	bx	lr
		speedDataLeft = msg.data;
 800719e:	4903      	ldr	r1, [pc, #12]	; (80071ac <rpm_left_subCb+0x30>)
		sideDataLeft = 0;
 80071a0:	4a03      	ldr	r2, [pc, #12]	; (80071b0 <rpm_left_subCb+0x34>)
		speedDataLeft = msg.data;
 80071a2:	700b      	strb	r3, [r1, #0]
		sideDataLeft = 0;
 80071a4:	2300      	movs	r3, #0
 80071a6:	7013      	strb	r3, [r2, #0]
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	200049a8 	.word	0x200049a8
 80071b0:	20004c02 	.word	0x20004c02

080071b4 <messageSide>:


extern "C" void messageSide(const std_msgs::Byte& msg)
{
	//sideData = msg.data;
}
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop

080071b8 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE8callbackEPh>:
      this->data = u_data.real;
 80071b8:	780b      	ldrb	r3, [r1, #0]
 80071ba:	7403      	strb	r3, [r0, #16]
  };

  virtual void callback(unsigned char* data)
  {
    msg.deserialize(data);
    this->cb_(msg);
 80071bc:	6943      	ldr	r3, [r0, #20]
 80071be:	300c      	adds	r0, #12
 80071c0:	4718      	bx	r3
 80071c2:	bf00      	nop

080071c4 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE15getEndpointTypeEv>:
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
  {
    return endpoint_;
  }
 80071c4:	6980      	ldr	r0, [r0, #24]
 80071c6:	4770      	bx	lr

080071c8 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE10getMsgTypeEv>:
  }
 80071c8:	4800      	ldr	r0, [pc, #0]	; (80071cc <_ZN3ros10SubscriberIN8std_msgs4Int8EvE10getMsgTypeEv+0x4>)
 80071ca:	4770      	bx	lr
 80071cc:	08009ab4 	.word	0x08009ab4

080071d0 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE9getMsgMD5Ev>:
  }
 80071d0:	4800      	ldr	r0, [pc, #0]	; (80071d4 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE9getMsgMD5Ev+0x4>)
 80071d2:	4770      	bx	lr
 80071d4:	08009a90 	.word	0x08009a90

080071d8 <_ZN3ros10SubscriberIN8std_msgs4ByteEvE8callbackEPh>:
      this->data = u_data.real;
 80071d8:	780b      	ldrb	r3, [r1, #0]
 80071da:	7403      	strb	r3, [r0, #16]
    this->cb_(msg);
 80071dc:	6943      	ldr	r3, [r0, #20]
 80071de:	300c      	adds	r0, #12
 80071e0:	4718      	bx	r3
 80071e2:	bf00      	nop

080071e4 <_ZN3ros10SubscriberIN8std_msgs4ByteEvE15getEndpointTypeEv>:
  }
 80071e4:	6980      	ldr	r0, [r0, #24]
 80071e6:	4770      	bx	lr

080071e8 <_ZN3ros10SubscriberIN8std_msgs4ByteEvE10getMsgTypeEv>:
  }
 80071e8:	4800      	ldr	r0, [pc, #0]	; (80071ec <_ZN3ros10SubscriberIN8std_msgs4ByteEvE10getMsgTypeEv+0x4>)
 80071ea:	4770      	bx	lr
 80071ec:	08009a80 	.word	0x08009a80

080071f0 <_ZN3ros10SubscriberIN8std_msgs4ByteEvE9getMsgMD5Ev>:
  }
 80071f0:	4800      	ldr	r0, [pc, #0]	; (80071f4 <_ZN3ros10SubscriberIN8std_msgs4ByteEvE9getMsgMD5Ev+0x4>)
 80071f2:	4770      	bx	lr
 80071f4:	08009a5c 	.word	0x08009a5c

080071f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:

  /* Are we connected to the PC? */
  virtual bool connected()
  {
    return configured_;
  };
 80071f8:	f890 04f4 	ldrb.w	r0, [r0, #1268]	; 0x4f4
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop

08007200 <_ZNK8std_msgs6String9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 8007200:	b570      	push	{r4, r5, r6, lr}
 8007202:	4606      	mov	r6, r0
      uint32_t length_data = strlen(this->data);
 8007204:	6840      	ldr	r0, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const
 8007206:	460d      	mov	r5, r1
      uint32_t length_data = strlen(this->data);
 8007208:	f7f8 ffe2 	bl	80001d0 <strlen>
      arr[i] = (var >> (8 * i));
 800720c:	0e03      	lsrs	r3, r0, #24
 800720e:	0a01      	lsrs	r1, r0, #8
 8007210:	0c02      	lsrs	r2, r0, #16
 8007212:	4604      	mov	r4, r0
 8007214:	7028      	strb	r0, [r5, #0]
 8007216:	70aa      	strb	r2, [r5, #2]
 8007218:	7069      	strb	r1, [r5, #1]
 800721a:	70eb      	strb	r3, [r5, #3]
      memcpy(outbuffer + offset, this->data, length_data);
 800721c:	6871      	ldr	r1, [r6, #4]
 800721e:	1d28      	adds	r0, r5, #4
 8007220:	4622      	mov	r2, r4
 8007222:	f002 f90b 	bl	800943c <memcpy>
    }
 8007226:	1d20      	adds	r0, r4, #4
 8007228:	bd70      	pop	{r4, r5, r6, pc}
 800722a:	bf00      	nop

0800722c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800722c:	6843      	ldr	r3, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const
 800722e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8007232:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8007234:	6843      	ldr	r3, [r0, #4]
 8007236:	0a1b      	lsrs	r3, r3, #8
 8007238:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800723a:	88c3      	ldrh	r3, [r0, #6]
 800723c:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800723e:	79c3      	ldrb	r3, [r0, #7]
 8007240:	70cb      	strb	r3, [r1, #3]
      for( uint32_t i = 0; i < ints_length; i++){
 8007242:	6843      	ldr	r3, [r0, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 8083 	beq.w	8007350 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x124>
 800724a:	460a      	mov	r2, r1
 800724c:	2500      	movs	r5, #0
      offset += sizeof(this->ints_length);
 800724e:	2704      	movs	r7, #4
      u_intsi.real = this->ints[i];
 8007250:	68c3      	ldr	r3, [r0, #12]
 8007252:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8007256:	7113      	strb	r3, [r2, #4]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8007258:	0a1e      	lsrs	r6, r3, #8
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800725a:	0c1c      	lsrs	r4, r3, #16
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800725c:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800725e:	7156      	strb	r6, [r2, #5]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8007260:	7194      	strb	r4, [r2, #6]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8007262:	71d3      	strb	r3, [r2, #7]
      for( uint32_t i = 0; i < ints_length; i++){
 8007264:	6843      	ldr	r3, [r0, #4]
 8007266:	3501      	adds	r5, #1
 8007268:	1d3e      	adds	r6, r7, #4
 800726a:	42ab      	cmp	r3, r5
 800726c:	463c      	mov	r4, r7
 800726e:	f102 0204 	add.w	r2, r2, #4
 8007272:	4637      	mov	r7, r6
 8007274:	d8ec      	bhi.n	8007250 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x24>
 8007276:	f104 0308 	add.w	r3, r4, #8
 800727a:	f104 0a05 	add.w	sl, r4, #5
 800727e:	f104 0906 	add.w	r9, r4, #6
 8007282:	f104 0807 	add.w	r8, r4, #7
 8007286:	f104 0e09 	add.w	lr, r4, #9
 800728a:	f104 0c0a 	add.w	ip, r4, #10
 800728e:	f104 070b 	add.w	r7, r4, #11
 8007292:	461d      	mov	r5, r3
 8007294:	340c      	adds	r4, #12
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8007296:	6902      	ldr	r2, [r0, #16]
 8007298:	558a      	strb	r2, [r1, r6]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 800729a:	6902      	ldr	r2, [r0, #16]
 800729c:	0a12      	lsrs	r2, r2, #8
 800729e:	f801 200a 	strb.w	r2, [r1, sl]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80072a2:	8a42      	ldrh	r2, [r0, #18]
 80072a4:	f801 2009 	strb.w	r2, [r1, r9]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80072a8:	7cc2      	ldrb	r2, [r0, #19]
 80072aa:	f801 2008 	strb.w	r2, [r1, r8]
      for( uint32_t i = 0; i < floats_length; i++){
 80072ae:	6902      	ldr	r2, [r0, #16]
 80072b0:	b1ea      	cbz	r2, 80072ee <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xc2>
 80072b2:	2600      	movs	r6, #0
      u_floatsi.real = this->floats[i];
 80072b4:	6983      	ldr	r3, [r0, #24]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80072b6:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 80072ba:	2200      	movs	r2, #0
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80072bc:	0a1c      	lsrs	r4, r3, #8
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80072be:	f363 0207 	bfi	r2, r3, #0, #8
 80072c2:	f364 220f 	bfi	r2, r4, #8, #8
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80072c6:	0c1c      	lsrs	r4, r3, #16
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80072c8:	f364 4217 	bfi	r2, r4, #16, #8
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80072cc:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80072ce:	f363 621f 	bfi	r2, r3, #24, #8
 80072d2:	514a      	str	r2, [r1, r5]
      for( uint32_t i = 0; i < floats_length; i++){
 80072d4:	6902      	ldr	r2, [r0, #16]
 80072d6:	3601      	adds	r6, #1
 80072d8:	1d2b      	adds	r3, r5, #4
 80072da:	42b2      	cmp	r2, r6
 80072dc:	462c      	mov	r4, r5
 80072de:	461d      	mov	r5, r3
 80072e0:	d8e8      	bhi.n	80072b4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x88>
 80072e2:	f104 0e05 	add.w	lr, r4, #5
 80072e6:	f104 0c06 	add.w	ip, r4, #6
 80072ea:	1de7      	adds	r7, r4, #7
 80072ec:	3408      	adds	r4, #8
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80072ee:	69c2      	ldr	r2, [r0, #28]
 80072f0:	54ca      	strb	r2, [r1, r3]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80072f2:	69c3      	ldr	r3, [r0, #28]
 80072f4:	0a1b      	lsrs	r3, r3, #8
 80072f6:	f801 300e 	strb.w	r3, [r1, lr]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80072fa:	8bc3      	ldrh	r3, [r0, #30]
 80072fc:	f801 300c 	strb.w	r3, [r1, ip]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8007300:	7fc3      	ldrb	r3, [r0, #31]
 8007302:	55cb      	strb	r3, [r1, r7]
      for( uint32_t i = 0; i < strings_length; i++){
 8007304:	69c3      	ldr	r3, [r0, #28]
 8007306:	b303      	cbz	r3, 800734a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x11e>
 8007308:	4688      	mov	r8, r1
 800730a:	4607      	mov	r7, r0
 800730c:	2600      	movs	r6, #0
      uint32_t length_stringsi = strlen(this->strings[i]);
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007314:	f7f8 ff5c 	bl	80001d0 <strlen>
 8007318:	eb08 0304 	add.w	r3, r8, r4
 800731c:	4605      	mov	r5, r0
 800731e:	f808 0004 	strb.w	r0, [r8, r4]
 8007322:	0c29      	lsrs	r1, r5, #16
 8007324:	0a00      	lsrs	r0, r0, #8
 8007326:	0e2a      	lsrs	r2, r5, #24
 8007328:	7058      	strb	r0, [r3, #1]
 800732a:	70da      	strb	r2, [r3, #3]
 800732c:	7099      	strb	r1, [r3, #2]
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      offset += 4;
 8007330:	3404      	adds	r4, #4
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8007332:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8007336:	eb08 0004 	add.w	r0, r8, r4
 800733a:	462a      	mov	r2, r5
 800733c:	f002 f87e 	bl	800943c <memcpy>
      for( uint32_t i = 0; i < strings_length; i++){
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	3601      	adds	r6, #1
 8007344:	42b3      	cmp	r3, r6
      offset += length_stringsi;
 8007346:	442c      	add	r4, r5
      for( uint32_t i = 0; i < strings_length; i++){
 8007348:	d8e1      	bhi.n	800730e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xe2>
    }
 800734a:	4620      	mov	r0, r4
 800734c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      for( uint32_t i = 0; i < ints_length; i++){
 8007350:	2308      	movs	r3, #8
 8007352:	461d      	mov	r5, r3
 8007354:	240c      	movs	r4, #12
 8007356:	270b      	movs	r7, #11
 8007358:	f04f 0c0a 	mov.w	ip, #10
 800735c:	f04f 0e09 	mov.w	lr, #9
 8007360:	f04f 0807 	mov.w	r8, #7
 8007364:	f04f 0906 	mov.w	r9, #6
 8007368:	f04f 0a05 	mov.w	sl, #5
 800736c:	2604      	movs	r6, #4
 800736e:	e792      	b.n	8007296 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x6a>

08007370 <_ZNK14rosserial_msgs3Log9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 8007370:	b570      	push	{r4, r5, r6, lr}
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8007372:	7903      	ldrb	r3, [r0, #4]
 8007374:	700b      	strb	r3, [r1, #0]
    virtual int serialize(unsigned char *outbuffer) const
 8007376:	4606      	mov	r6, r0
      uint32_t length_msg = strlen(this->msg);
 8007378:	6880      	ldr	r0, [r0, #8]
    virtual int serialize(unsigned char *outbuffer) const
 800737a:	460d      	mov	r5, r1
      uint32_t length_msg = strlen(this->msg);
 800737c:	f7f8 ff28 	bl	80001d0 <strlen>
 8007380:	2300      	movs	r3, #0
 8007382:	0a02      	lsrs	r2, r0, #8
 8007384:	f360 0307 	bfi	r3, r0, #0, #8
 8007388:	f362 230f 	bfi	r3, r2, #8, #8
 800738c:	0c02      	lsrs	r2, r0, #16
 800738e:	f362 4317 	bfi	r3, r2, #16, #8
 8007392:	0e02      	lsrs	r2, r0, #24
 8007394:	f362 631f 	bfi	r3, r2, #24, #8
 8007398:	4604      	mov	r4, r0
 800739a:	f8c5 3001 	str.w	r3, [r5, #1]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800739e:	68b1      	ldr	r1, [r6, #8]
 80073a0:	1d68      	adds	r0, r5, #5
 80073a2:	4622      	mov	r2, r4
 80073a4:	f002 f84a 	bl	800943c <memcpy>
    }
 80073a8:	1d60      	adds	r0, r4, #5
 80073aa:	bd70      	pop	{r4, r5, r6, pc}

080073ac <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80073ac:	8883      	ldrh	r3, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const
 80073ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80073b2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80073b4:	8883      	ldrh	r3, [r0, #4]
 80073b6:	0a1b      	lsrs	r3, r3, #8
 80073b8:	704b      	strb	r3, [r1, #1]
    virtual int serialize(unsigned char *outbuffer) const
 80073ba:	4606      	mov	r6, r0
      uint32_t length_topic_name = strlen(this->topic_name);
 80073bc:	6880      	ldr	r0, [r0, #8]
    virtual int serialize(unsigned char *outbuffer) const
 80073be:	460d      	mov	r5, r1
      uint32_t length_topic_name = strlen(this->topic_name);
 80073c0:	f7f8 ff06 	bl	80001d0 <strlen>
 80073c4:	0e03      	lsrs	r3, r0, #24
 80073c6:	0a01      	lsrs	r1, r0, #8
 80073c8:	0c02      	lsrs	r2, r0, #16
 80073ca:	716b      	strb	r3, [r5, #5]
 80073cc:	70a8      	strb	r0, [r5, #2]
 80073ce:	712a      	strb	r2, [r5, #4]
 80073d0:	70e9      	strb	r1, [r5, #3]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80073d2:	68b1      	ldr	r1, [r6, #8]
 80073d4:	4602      	mov	r2, r0
      uint32_t length_topic_name = strlen(this->topic_name);
 80073d6:	4604      	mov	r4, r0
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80073d8:	1da8      	adds	r0, r5, #6
 80073da:	f002 f82f 	bl	800943c <memcpy>
      uint32_t length_message_type = strlen(this->message_type);
 80073de:	68f0      	ldr	r0, [r6, #12]
 80073e0:	f7f8 fef6 	bl	80001d0 <strlen>
 80073e4:	2300      	movs	r3, #0
 80073e6:	0a02      	lsrs	r2, r0, #8
 80073e8:	f360 0307 	bfi	r3, r0, #0, #8
 80073ec:	f362 230f 	bfi	r3, r2, #8, #8
 80073f0:	0c02      	lsrs	r2, r0, #16
 80073f2:	0e01      	lsrs	r1, r0, #24
 80073f4:	f362 4317 	bfi	r3, r2, #16, #8
      offset += length_topic_name;
 80073f8:	1da2      	adds	r2, r4, #6
 80073fa:	f361 631f 	bfi	r3, r1, #24, #8
 80073fe:	50ab      	str	r3, [r5, r2]
      uint32_t length_message_type = strlen(this->message_type);
 8007400:	4680      	mov	r8, r0
      offset += 4;
 8007402:	340a      	adds	r4, #10
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8007404:	68f1      	ldr	r1, [r6, #12]
 8007406:	4642      	mov	r2, r8
 8007408:	1928      	adds	r0, r5, r4
 800740a:	f002 f817 	bl	800943c <memcpy>
      uint32_t length_md5sum = strlen(this->md5sum);
 800740e:	6930      	ldr	r0, [r6, #16]
 8007410:	f7f8 fede 	bl	80001d0 <strlen>
 8007414:	2300      	movs	r3, #0
 8007416:	0a02      	lsrs	r2, r0, #8
 8007418:	f360 0307 	bfi	r3, r0, #0, #8
 800741c:	f362 230f 	bfi	r3, r2, #8, #8
 8007420:	0c02      	lsrs	r2, r0, #16
      offset += length_message_type;
 8007422:	4444      	add	r4, r8
 8007424:	f362 4317 	bfi	r3, r2, #16, #8
 8007428:	0e02      	lsrs	r2, r0, #24
 800742a:	f362 631f 	bfi	r3, r2, #24, #8
 800742e:	512b      	str	r3, [r5, r4]
      uint32_t length_md5sum = strlen(this->md5sum);
 8007430:	4607      	mov	r7, r0
      offset += 4;
 8007432:	3404      	adds	r4, #4
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8007434:	6931      	ldr	r1, [r6, #16]
 8007436:	1928      	adds	r0, r5, r4
 8007438:	463a      	mov	r2, r7
 800743a:	f001 ffff 	bl	800943c <memcpy>
      offset += length_md5sum;
 800743e:	19e0      	adds	r0, r4, r7
      u_buffer_size.real = this->buffer_size;
 8007440:	6973      	ldr	r3, [r6, #20]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8007442:	542b      	strb	r3, [r5, r0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8007444:	4405      	add	r5, r0
 8007446:	0a19      	lsrs	r1, r3, #8
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8007448:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800744a:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800744c:	7069      	strb	r1, [r5, #1]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800744e:	70aa      	strb	r2, [r5, #2]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8007450:	70eb      	strb	r3, [r5, #3]
    }
 8007452:	3004      	adds	r0, #4
 8007454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007458 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
 8007458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if(ints_lengthT > ints_length)
 800745c:	6843      	ldr	r3, [r0, #4]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800745e:	680c      	ldr	r4, [r1, #0]
      if(ints_lengthT > ints_length)
 8007460:	42a3      	cmp	r3, r4
    virtual int deserialize(unsigned char *inbuffer)
 8007462:	b083      	sub	sp, #12
 8007464:	4606      	mov	r6, r0
 8007466:	460f      	mov	r7, r1
      if(ints_lengthT > ints_length)
 8007468:	f0c0 80b0 	bcc.w	80075cc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x174>
      ints_length = ints_lengthT;
 800746c:	6074      	str	r4, [r6, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 800746e:	2c00      	cmp	r4, #0
 8007470:	f000 80b5 	beq.w	80075de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x186>
 8007474:	4639      	mov	r1, r7
 8007476:	2000      	movs	r0, #0
      offset += sizeof(this->ints_length);
 8007478:	2404      	movs	r4, #4
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800747a:	798b      	ldrb	r3, [r1, #6]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800747c:	f891 e005 	ldrb.w	lr, [r1, #5]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007480:	f891 c004 	ldrb.w	ip, [r1, #4]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007484:	79cd      	ldrb	r5, [r1, #7]
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8007486:	68f2      	ldr	r2, [r6, #12]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007488:	041b      	lsls	r3, r3, #16
 800748a:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 800748e:	ea43 030c 	orr.w	r3, r3, ip
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007492:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
      this->st_ints = u_st_ints.real;
 8007496:	60b3      	str	r3, [r6, #8]
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8007498:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
      for( uint32_t i = 0; i < ints_length; i++){
 800749c:	6872      	ldr	r2, [r6, #4]
 800749e:	3001      	adds	r0, #1
 80074a0:	1d23      	adds	r3, r4, #4
 80074a2:	4282      	cmp	r2, r0
 80074a4:	4625      	mov	r5, r4
 80074a6:	f101 0104 	add.w	r1, r1, #4
 80074aa:	461c      	mov	r4, r3
 80074ac:	d8e5      	bhi.n	800747a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x22>
 80074ae:	f105 0808 	add.w	r8, r5, #8
 80074b2:	1d69      	adds	r1, r5, #5
 80074b4:	1da8      	adds	r0, r5, #6
 80074b6:	1dea      	adds	r2, r5, #7
 80074b8:	f105 0a09 	add.w	sl, r5, #9
 80074bc:	f105 0b0a 	add.w	fp, r5, #10
 80074c0:	f105 090b 	add.w	r9, r5, #11
 80074c4:	4644      	mov	r4, r8
 80074c6:	350c      	adds	r5, #12
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80074c8:	f817 e000 	ldrb.w	lr, [r7, r0]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80074cc:	f817 c001 	ldrb.w	ip, [r7, r1]
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80074d0:	5cf8      	ldrb	r0, [r7, r3]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80074d2:	5cb9      	ldrb	r1, [r7, r2]
      if(floats_lengthT > floats_length)
 80074d4:	6932      	ldr	r2, [r6, #16]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80074d6:	ea4f 430e 	mov.w	r3, lr, lsl #16
 80074da:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80074de:	4303      	orrs	r3, r0
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80074e0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      if(floats_lengthT > floats_length)
 80074e4:	429a      	cmp	r2, r3
 80074e6:	f0c0 808f 	bcc.w	8007608 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1b0>
      floats_length = floats_lengthT;
 80074ea:	6133      	str	r3, [r6, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80074ec:	b31b      	cbz	r3, 8007536 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xde>
 80074ee:	1939      	adds	r1, r7, r4
 80074f0:	2000      	movs	r0, #0
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80074f2:	788b      	ldrb	r3, [r1, #2]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80074f4:	f891 e001 	ldrb.w	lr, [r1, #1]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80074f8:	f891 c000 	ldrb.w	ip, [r1]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80074fc:	78cd      	ldrb	r5, [r1, #3]
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80074fe:	69b2      	ldr	r2, [r6, #24]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007500:	041b      	lsls	r3, r3, #16
 8007502:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 8007506:	ea43 030c 	orr.w	r3, r3, ip
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800750a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
      this->st_floats = u_st_floats.real;
 800750e:	6173      	str	r3, [r6, #20]
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8007510:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
      for( uint32_t i = 0; i < floats_length; i++){
 8007514:	6933      	ldr	r3, [r6, #16]
 8007516:	3001      	adds	r0, #1
 8007518:	f104 0804 	add.w	r8, r4, #4
 800751c:	4283      	cmp	r3, r0
 800751e:	4625      	mov	r5, r4
 8007520:	f101 0104 	add.w	r1, r1, #4
 8007524:	4644      	mov	r4, r8
 8007526:	d8e4      	bhi.n	80074f2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x9a>
 8007528:	f105 0a05 	add.w	sl, r5, #5
 800752c:	f105 0b06 	add.w	fp, r5, #6
 8007530:	f105 0907 	add.w	r9, r5, #7
 8007534:	3508      	adds	r5, #8
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8007536:	f817 400b 	ldrb.w	r4, [r7, fp]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800753a:	f817 000a 	ldrb.w	r0, [r7, sl]
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800753e:	f817 1008 	ldrb.w	r1, [r7, r8]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8007542:	f817 2009 	ldrb.w	r2, [r7, r9]
      if(strings_lengthT > strings_length)
 8007546:	69f3      	ldr	r3, [r6, #28]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8007548:	0424      	lsls	r4, r4, #16
 800754a:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 800754e:	430c      	orrs	r4, r1
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8007550:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
      if(strings_lengthT > strings_length)
 8007554:	42a3      	cmp	r3, r4
 8007556:	d351      	bcc.n	80075fc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1a4>
      strings_length = strings_lengthT;
 8007558:	61f4      	str	r4, [r6, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800755a:	b39c      	cbz	r4, 80075c4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x16c>
 800755c:	f04f 0a00 	mov.w	sl, #0
      inbuffer[offset+length_st_strings-1]=0;
 8007560:	46d1      	mov	r9, sl
          inbuffer[k-1]=inbuffer[k];
 8007562:	f06f 0803 	mvn.w	r8, #3
      var |= (arr[i] << (8 * i));
 8007566:	197b      	adds	r3, r7, r5
 8007568:	1ce8      	adds	r0, r5, #3
 800756a:	789c      	ldrb	r4, [r3, #2]
 800756c:	7859      	ldrb	r1, [r3, #1]
 800756e:	5d7a      	ldrb	r2, [r7, r5]
 8007570:	5c3b      	ldrb	r3, [r7, r0]
 8007572:	0424      	lsls	r4, r4, #16
 8007574:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
 8007578:	4314      	orrs	r4, r2
      offset += 4;
 800757a:	f105 0b04 	add.w	fp, r5, #4
 800757e:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8007582:	445c      	add	r4, fp
          inbuffer[k-1]=inbuffer[k];
 8007584:	eba8 0305 	sub.w	r3, r8, r5
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8007588:	45a3      	cmp	fp, r4
          inbuffer[k-1]=inbuffer[k];
 800758a:	f105 0205 	add.w	r2, r5, #5
 800758e:	4423      	add	r3, r4
 8007590:	4438      	add	r0, r7
      offset += length_st_strings;
 8007592:	4625      	mov	r5, r4
 8007594:	eb07 010b 	add.w	r1, r7, fp
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8007598:	d205      	bcs.n	80075a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x14e>
 800759a:	42a2      	cmp	r2, r4
 800759c:	bf94      	ite	ls
 800759e:	461a      	movls	r2, r3
 80075a0:	2201      	movhi	r2, #1
 80075a2:	f001 ff56 	bl	8009452 <memmove>
      inbuffer[offset+length_st_strings-1]=0;
 80075a6:	443c      	add	r4, r7
      this->st_strings = (char *)(inbuffer + offset-1);
 80075a8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
      inbuffer[offset+length_st_strings-1]=0;
 80075ac:	f804 9c01 	strb.w	r9, [r4, #-1]
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80075b0:	6a72      	ldr	r2, [r6, #36]	; 0x24
      this->st_strings = (char *)(inbuffer + offset-1);
 80075b2:	443b      	add	r3, r7
 80075b4:	6233      	str	r3, [r6, #32]
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80075b6:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
      for( uint32_t i = 0; i < strings_length; i++){
 80075ba:	69f3      	ldr	r3, [r6, #28]
 80075bc:	f10a 0a01 	add.w	sl, sl, #1
 80075c0:	4553      	cmp	r3, sl
 80075c2:	d8d0      	bhi.n	8007566 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x10e>
    }
 80075c4:	4628      	mov	r0, r5
 80075c6:	b003      	add	sp, #12
 80075c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80075cc:	00a1      	lsls	r1, r4, #2
 80075ce:	68c0      	ldr	r0, [r0, #12]
 80075d0:	f002 f808 	bl	80095e4 <realloc>
      ints_length = ints_lengthT;
 80075d4:	6074      	str	r4, [r6, #4]
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80075d6:	60f0      	str	r0, [r6, #12]
      for( uint32_t i = 0; i < ints_length; i++){
 80075d8:	2c00      	cmp	r4, #0
 80075da:	f47f af4b 	bne.w	8007474 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1c>
 80075de:	f04f 0808 	mov.w	r8, #8
 80075e2:	4644      	mov	r4, r8
 80075e4:	250c      	movs	r5, #12
 80075e6:	f04f 090b 	mov.w	r9, #11
 80075ea:	f04f 0b0a 	mov.w	fp, #10
 80075ee:	f04f 0a09 	mov.w	sl, #9
 80075f2:	2207      	movs	r2, #7
 80075f4:	2006      	movs	r0, #6
 80075f6:	2105      	movs	r1, #5
 80075f8:	2304      	movs	r3, #4
 80075fa:	e765      	b.n	80074c8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x70>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80075fc:	00a1      	lsls	r1, r4, #2
 80075fe:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8007600:	f001 fff0 	bl	80095e4 <realloc>
 8007604:	6270      	str	r0, [r6, #36]	; 0x24
 8007606:	e7a7      	b.n	8007558 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x100>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8007608:	0099      	lsls	r1, r3, #2
 800760a:	69b0      	ldr	r0, [r6, #24]
 800760c:	9301      	str	r3, [sp, #4]
 800760e:	f001 ffe9 	bl	80095e4 <realloc>
 8007612:	9b01      	ldr	r3, [sp, #4]
 8007614:	61b0      	str	r0, [r6, #24]
 8007616:	e768      	b.n	80074ea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x92>

08007618 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
      }
    }
    configured_ = true;
  }

  virtual int publish(int id, const Msg * msg)
 8007618:	b570      	push	{r4, r5, r6, lr}
  {
    if (id >= 100 && !configured_)
 800761a:	2963      	cmp	r1, #99	; 0x63
  virtual int publish(int id, const Msg * msg)
 800761c:	b084      	sub	sp, #16
    if (id >= 100 && !configured_)
 800761e:	dd02      	ble.n	8007626 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xe>
 8007620:	f890 54f4 	ldrb.w	r5, [r0, #1268]	; 0x4f4
 8007624:	b3c5      	cbz	r5, 8007698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x80>
      return 0;

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8007626:	6813      	ldr	r3, [r2, #0]
 8007628:	4604      	mov	r4, r0
 800762a:	460d      	mov	r5, r1
 800762c:	4610      	mov	r0, r2
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f204 211f 	addw	r1, r4, #543	; 0x21f
 8007634:	4798      	blx	r3

    /* setup the header */
    message_out[0] = 0xff;
    message_out[1] = PROTOCOL_VER;
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8007636:	b2c6      	uxtb	r6, r0
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8007638:	f3c0 2207 	ubfx	r2, r0, #8, #8
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800763c:	18b3      	adds	r3, r6, r2
 800763e:	43db      	mvns	r3, r3
    message_out[5] = (uint8_t)((int16_t)id & 255);
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8007640:	f345 2107 	sbfx	r1, r5, #8, #8
 8007644:	f884 121e 	strb.w	r1, [r4, #542]	; 0x21e
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8007648:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
    message_out[0] = 0xff;
 800764c:	f64f 61ff 	movw	r1, #65279	; 0xfeff

    /* calculate checksum */
    int chk = 0;
    for (int i = 5; i < l + 7; i++)
 8007650:	1c43      	adds	r3, r0, #1
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8007652:	f884 521d 	strb.w	r5, [r4, #541]	; 0x21d
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8007656:	f884 621a 	strb.w	r6, [r4, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800765a:	f884 221b 	strb.w	r2, [r4, #539]	; 0x21b
    message_out[0] = 0xff;
 800765e:	f8a4 1218 	strh.w	r1, [r4, #536]	; 0x218
    for (int i = 5; i < l + 7; i++)
 8007662:	db1c      	blt.n	800769e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x86>
 8007664:	f204 251e 	addw	r5, r4, #542	; 0x21e
 8007668:	4405      	add	r5, r0
 800766a:	f504 7307 	add.w	r3, r4, #540	; 0x21c
    int chk = 0;
 800766e:	2200      	movs	r2, #0
      chk += message_out[i];
 8007670:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 8007674:	429d      	cmp	r5, r3
      chk += message_out[i];
 8007676:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
 8007678:	d1fa      	bne.n	8007670 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x58>
 800767a:	43d2      	mvns	r2, r2
 800767c:	b2d2      	uxtb	r2, r2
    l += 7;
    message_out[l++] = 255 - (chk % 256);
 800767e:	1823      	adds	r3, r4, r0
 8007680:	f100 0508 	add.w	r5, r0, #8

    if (l <= OUTPUT_SIZE)
 8007684:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    message_out[l++] = 255 - (chk % 256);
 8007688:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
    if (l <= OUTPUT_SIZE)
 800768c:	dc09      	bgt.n	80076a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x8a>


	// Send a byte of data to ROS connection
	void write(uint8_t* data, int length)
	{
		CDC_Transmit_FS(data, length);
 800768e:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8007692:	b2a9      	uxth	r1, r5
 8007694:	f7ff f952 	bl	800693c <CDC_Transmit_FS>
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
      return -1;
    }
  }
 8007698:	4628      	mov	r0, r5
 800769a:	b004      	add	sp, #16
 800769c:	bd70      	pop	{r4, r5, r6, pc}
    for (int i = 5; i < l + 7; i++)
 800769e:	22ff      	movs	r2, #255	; 0xff
 80076a0:	e7ed      	b.n	800767e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x66>

private:
  void log(char byte, const char * msg)
  {
    rosserial_msgs::Log l;
    l.level = byte;
 80076a2:	2203      	movs	r2, #3
    l.msg = (char*)msg;
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80076a4:	6823      	ldr	r3, [r4, #0]
    l.level = byte;
 80076a6:	f88d 2008 	strb.w	r2, [sp, #8]
      msg("")
 80076aa:	4906      	ldr	r1, [pc, #24]	; (80076c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xac>)
    l.msg = (char*)msg;
 80076ac:	4a06      	ldr	r2, [pc, #24]	; (80076c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xb0>)
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	9101      	str	r1, [sp, #4]
    l.msg = (char*)msg;
 80076b2:	9203      	str	r2, [sp, #12]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80076b4:	4620      	mov	r0, r4
 80076b6:	aa01      	add	r2, sp, #4
 80076b8:	2107      	movs	r1, #7
 80076ba:	4798      	blx	r3
 80076bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80076c0:	e7ea      	b.n	8007698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x80>
 80076c2:	bf00      	nop
 80076c4:	080097a8 	.word	0x080097a8
 80076c8:	08009a20 	.word	0x08009a20

080076cc <messageSpeed>:
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop

080076d0 <_ZN13geometry_msgs7Vector311deserializeEPh>:
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 80076d0:	78cb      	ldrb	r3, [r1, #3]
 80076d2:	095b      	lsrs	r3, r3, #5
    virtual int deserialize(unsigned char *inbuffer)
 80076d4:	b430      	push	{r4, r5}
 80076d6:	6043      	str	r3, [r0, #4]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 80076d8:	790a      	ldrb	r2, [r1, #4]
 80076da:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80076de:	6043      	str	r3, [r0, #4]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 80076e0:	794a      	ldrb	r2, [r1, #5]
 80076e2:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80076e6:	6043      	str	r3, [r0, #4]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 80076e8:	798a      	ldrb	r2, [r1, #6]
 80076ea:	04d2      	lsls	r2, r2, #19
 80076ec:	f402 02f0 	and.w	r2, r2, #7864320	; 0x780000
 80076f0:	4313      	orrs	r3, r2
 80076f2:	6043      	str	r3, [r0, #4]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 80076f4:	79ca      	ldrb	r2, [r1, #7]
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 80076f6:	798d      	ldrb	r5, [r1, #6]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 80076f8:	0114      	lsls	r4, r2, #4
 80076fa:	f404 64fe 	and.w	r4, r4, #2032	; 0x7f0
    if (exp != 0)
 80076fe:	ea54 1415 	orrs.w	r4, r4, r5, lsr #4
 8007702:	d005      	beq.n	8007710 <_ZN13geometry_msgs7Vector311deserializeEPh+0x40>
      *val |= ((exp) - 1023 + 127) << 23;
 8007704:	f5a4 7460 	sub.w	r4, r4, #896	; 0x380
 8007708:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
 800770c:	6043      	str	r3, [r0, #4]
 800770e:	79ca      	ldrb	r2, [r1, #7]
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 8007710:	0612      	lsls	r2, r2, #24
 8007712:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007716:	4313      	orrs	r3, r2
 8007718:	6043      	str	r3, [r0, #4]
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 800771a:	7acb      	ldrb	r3, [r1, #11]
 800771c:	095b      	lsrs	r3, r3, #5
 800771e:	6083      	str	r3, [r0, #8]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 8007720:	7b0a      	ldrb	r2, [r1, #12]
 8007722:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007726:	6083      	str	r3, [r0, #8]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 8007728:	7b4a      	ldrb	r2, [r1, #13]
 800772a:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 800772e:	6083      	str	r3, [r0, #8]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 8007730:	7b8a      	ldrb	r2, [r1, #14]
 8007732:	04d2      	lsls	r2, r2, #19
 8007734:	f402 02f0 	and.w	r2, r2, #7864320	; 0x780000
 8007738:	4313      	orrs	r3, r2
 800773a:	6083      	str	r3, [r0, #8]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 800773c:	7bca      	ldrb	r2, [r1, #15]
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 800773e:	7b8d      	ldrb	r5, [r1, #14]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8007740:	0114      	lsls	r4, r2, #4
 8007742:	f404 64fe 	and.w	r4, r4, #2032	; 0x7f0
    if (exp != 0)
 8007746:	ea54 1415 	orrs.w	r4, r4, r5, lsr #4
 800774a:	d005      	beq.n	8007758 <_ZN13geometry_msgs7Vector311deserializeEPh+0x88>
      *val |= ((exp) - 1023 + 127) << 23;
 800774c:	f5a4 7460 	sub.w	r4, r4, #896	; 0x380
 8007750:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
 8007754:	6083      	str	r3, [r0, #8]
 8007756:	7bca      	ldrb	r2, [r1, #15]
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 8007758:	0612      	lsls	r2, r2, #24
 800775a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800775e:	4313      	orrs	r3, r2
 8007760:	6083      	str	r3, [r0, #8]
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 8007762:	7ccb      	ldrb	r3, [r1, #19]
 8007764:	095b      	lsrs	r3, r3, #5
 8007766:	60c3      	str	r3, [r0, #12]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 8007768:	7d0a      	ldrb	r2, [r1, #20]
 800776a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800776e:	60c3      	str	r3, [r0, #12]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 8007770:	7d4a      	ldrb	r2, [r1, #21]
 8007772:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 8007776:	60c3      	str	r3, [r0, #12]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 8007778:	7d8a      	ldrb	r2, [r1, #22]
 800777a:	04d2      	lsls	r2, r2, #19
 800777c:	f402 02f0 	and.w	r2, r2, #7864320	; 0x780000
 8007780:	4313      	orrs	r3, r2
 8007782:	60c3      	str	r3, [r0, #12]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8007784:	7dca      	ldrb	r2, [r1, #23]
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 8007786:	7d8d      	ldrb	r5, [r1, #22]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8007788:	0114      	lsls	r4, r2, #4
 800778a:	f404 64fe 	and.w	r4, r4, #2032	; 0x7f0
    if (exp != 0)
 800778e:	ea54 1415 	orrs.w	r4, r4, r5, lsr #4
 8007792:	d005      	beq.n	80077a0 <_ZN13geometry_msgs7Vector311deserializeEPh+0xd0>
      *val |= ((exp) - 1023 + 127) << 23;
 8007794:	f5a4 7460 	sub.w	r4, r4, #896	; 0x380
 8007798:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
 800779c:	60c3      	str	r3, [r0, #12]
 800779e:	7dca      	ldrb	r2, [r1, #23]
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 80077a0:	0612      	lsls	r2, r2, #24
 80077a2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80077a6:	4313      	orrs	r3, r2
 80077a8:	60c3      	str	r3, [r0, #12]
    }
 80077aa:	bc30      	pop	{r4, r5}
 80077ac:	2018      	movs	r0, #24
 80077ae:	4770      	bx	lr

080077b0 <_ZNK13geometry_msgs7Vector39serializeEPh>:
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 80077b0:	edd0 7a01 	vldr	s15, [r0, #4]
    int32_t exp = ((*val >> 23) & 255);
 80077b4:	ee17 3a90 	vmov	r3, s15
 80077b8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    virtual int serialize(unsigned char *outbuffer) const
 80077bc:	b470      	push	{r4, r5, r6}
    if (exp != 0)
 80077be:	2a00      	cmp	r2, #0
 80077c0:	d068      	beq.n	8007894 <_ZNK13geometry_msgs7Vector39serializeEPh+0xe4>
      exp += 1023 - 127;
 80077c2:	f502 7260 	add.w	r2, r2, #896	; 0x380
 80077c6:	0114      	lsls	r4, r2, #4
 80077c8:	b264      	sxtb	r4, r4
 80077ca:	0912      	lsrs	r2, r2, #4
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 80077cc:	f3c3 45c3 	ubfx	r5, r3, #19, #4
    if (f < 0)
 80077d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 80077d4:	432c      	orrs	r4, r5
    if (f < 0)
 80077d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    *(outbuffer++) = 0;
 80077da:	f04f 0500 	mov.w	r5, #0
    *(outbuffer++) = (sig << 5) & 0xff;
 80077de:	ea4f 1643 	mov.w	r6, r3, lsl #5
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 80077e2:	718c      	strb	r4, [r1, #6]
      *(outbuffer - 1) |= 0x80;
 80077e4:	bf48      	it	mi
 80077e6:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = (sig >> 3) & 0xff;
 80077ea:	10dc      	asrs	r4, r3, #3
    *(outbuffer++) = (sig >> 11) & 0xff;
 80077ec:	12db      	asrs	r3, r3, #11
 80077ee:	714b      	strb	r3, [r1, #5]
      *(outbuffer - 1) |= 0x80;
 80077f0:	71ca      	strb	r2, [r1, #7]
    *(outbuffer++) = 0;
 80077f2:	700d      	strb	r5, [r1, #0]
    *(outbuffer++) = 0;
 80077f4:	704d      	strb	r5, [r1, #1]
    *(outbuffer++) = 0;
 80077f6:	708d      	strb	r5, [r1, #2]
    *(outbuffer++) = (sig << 5) & 0xff;
 80077f8:	70ce      	strb	r6, [r1, #3]
    *(outbuffer++) = (sig >> 3) & 0xff;
 80077fa:	710c      	strb	r4, [r1, #4]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 80077fc:	edd0 7a02 	vldr	s15, [r0, #8]
    int32_t exp = ((*val >> 23) & 255);
 8007800:	ee17 3a90 	vmov	r3, s15
 8007804:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    if (exp != 0)
 8007808:	2a00      	cmp	r2, #0
 800780a:	d047      	beq.n	800789c <_ZNK13geometry_msgs7Vector39serializeEPh+0xec>
      exp += 1023 - 127;
 800780c:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8007810:	0114      	lsls	r4, r2, #4
 8007812:	b264      	sxtb	r4, r4
 8007814:	0912      	lsrs	r2, r2, #4
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007816:	f3c3 45c3 	ubfx	r5, r3, #19, #4
    if (f < 0)
 800781a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800781e:	432c      	orrs	r4, r5
    if (f < 0)
 8007820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    *(outbuffer++) = 0;
 8007824:	f04f 0500 	mov.w	r5, #0
    *(outbuffer++) = (sig << 5) & 0xff;
 8007828:	ea4f 1643 	mov.w	r6, r3, lsl #5
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800782c:	738c      	strb	r4, [r1, #14]
      *(outbuffer - 1) |= 0x80;
 800782e:	bf48      	it	mi
 8007830:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = (sig >> 3) & 0xff;
 8007834:	10dc      	asrs	r4, r3, #3
    *(outbuffer++) = (sig >> 11) & 0xff;
 8007836:	12db      	asrs	r3, r3, #11
 8007838:	734b      	strb	r3, [r1, #13]
      *(outbuffer - 1) |= 0x80;
 800783a:	73ca      	strb	r2, [r1, #15]
    *(outbuffer++) = 0;
 800783c:	720d      	strb	r5, [r1, #8]
    *(outbuffer++) = 0;
 800783e:	724d      	strb	r5, [r1, #9]
    *(outbuffer++) = 0;
 8007840:	728d      	strb	r5, [r1, #10]
    *(outbuffer++) = (sig << 5) & 0xff;
 8007842:	72ce      	strb	r6, [r1, #11]
    *(outbuffer++) = (sig >> 3) & 0xff;
 8007844:	730c      	strb	r4, [r1, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 8007846:	edd0 7a03 	vldr	s15, [r0, #12]
    int32_t exp = ((*val >> 23) & 255);
 800784a:	ee17 3a90 	vmov	r3, s15
 800784e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    if (exp != 0)
 8007852:	b30a      	cbz	r2, 8007898 <_ZNK13geometry_msgs7Vector39serializeEPh+0xe8>
      exp += 1023 - 127;
 8007854:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8007858:	0110      	lsls	r0, r2, #4
 800785a:	b240      	sxtb	r0, r0
 800785c:	0912      	lsrs	r2, r2, #4
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800785e:	f3c3 44c3 	ubfx	r4, r3, #19, #4
    if (f < 0)
 8007862:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007866:	4320      	orrs	r0, r4
    if (f < 0)
 8007868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    *(outbuffer++) = 0;
 800786c:	f04f 0400 	mov.w	r4, #0
    *(outbuffer++) = (sig << 5) & 0xff;
 8007870:	ea4f 1543 	mov.w	r5, r3, lsl #5
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007874:	7588      	strb	r0, [r1, #22]
      *(outbuffer - 1) |= 0x80;
 8007876:	bf48      	it	mi
 8007878:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = (sig >> 3) & 0xff;
 800787c:	10d8      	asrs	r0, r3, #3
    *(outbuffer++) = (sig >> 11) & 0xff;
 800787e:	12db      	asrs	r3, r3, #11
    *(outbuffer++) = 0;
 8007880:	740c      	strb	r4, [r1, #16]
    *(outbuffer++) = 0;
 8007882:	744c      	strb	r4, [r1, #17]
    *(outbuffer++) = 0;
 8007884:	748c      	strb	r4, [r1, #18]
    *(outbuffer++) = (sig << 5) & 0xff;
 8007886:	74cd      	strb	r5, [r1, #19]
    *(outbuffer++) = (sig >> 3) & 0xff;
 8007888:	7508      	strb	r0, [r1, #20]
    *(outbuffer++) = (sig >> 11) & 0xff;
 800788a:	754b      	strb	r3, [r1, #21]
    }
 800788c:	2018      	movs	r0, #24
      *(outbuffer - 1) |= 0x80;
 800788e:	75ca      	strb	r2, [r1, #23]
 8007890:	bc70      	pop	{r4, r5, r6}
 8007892:	4770      	bx	lr
    if (exp != 0)
 8007894:	4614      	mov	r4, r2
 8007896:	e799      	b.n	80077cc <_ZNK13geometry_msgs7Vector39serializeEPh+0x1c>
 8007898:	4610      	mov	r0, r2
 800789a:	e7e0      	b.n	800785e <_ZNK13geometry_msgs7Vector39serializeEPh+0xae>
 800789c:	4614      	mov	r4, r2
 800789e:	e7ba      	b.n	8007816 <_ZNK13geometry_msgs7Vector39serializeEPh+0x66>

080078a0 <cdc_receive_put>:
	//speedData = msg.data;
}

extern "C" void cdc_receive_put(uint8_t value)
{
	ringbuffer_putchar(&rb, value);
 80078a0:	4601      	mov	r1, r0
 80078a2:	4801      	ldr	r0, [pc, #4]	; (80078a8 <cdc_receive_put+0x8>)
 80078a4:	f001 bd08 	b.w	80092b8 <_Z18ringbuffer_putcharP10ringbufferh>
 80078a8:	200047b0 	.word	0x200047b0

080078ac <init_ROS>:
}

extern "C" void init_ROS(void)
{
	ringbuffer_init(&rb, RxBuffer, RxBufferSize);
 80078ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80078b0:	497e      	ldr	r1, [pc, #504]	; (8007aac <init_ROS+0x200>)
 80078b2:	487f      	ldr	r0, [pc, #508]	; (8007ab0 <init_ROS+0x204>)
{
 80078b4:	b510      	push	{r4, lr}
	ringbuffer_init(&rb, RxBuffer, RxBufferSize);
 80078b6:	f001 fd81 	bl	80093bc <_Z15ringbuffer_initP10ringbufferPhs>
    mode_ = 0;
 80078ba:	4a7e      	ldr	r2, [pc, #504]	; (8007ab4 <init_ROS+0x208>)
 80078bc:	2300      	movs	r3, #0
 80078be:	f202 4114 	addw	r1, r2, #1044	; 0x414
    topic_ = 0;
 80078c2:	4608      	mov	r0, r1
    mode_ = 0;
 80078c4:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
    bytes_ = 0;
 80078c8:	f8c2 34e4 	str.w	r3, [r2, #1252]	; 0x4e4
    index_ = 0;
 80078cc:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    topic_ = 0;
 80078d0:	f8c2 34e8 	str.w	r3, [r2, #1256]	; 0x4e8
 80078d4:	e002      	b.n	80078dc <init_ROS+0x30>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80078d6:	3301      	adds	r3, #1
 80078d8:	2b19      	cmp	r3, #25
 80078da:	d00b      	beq.n	80078f4 <init_ROS+0x48>
      if (publishers[i] == 0) // empty slot
 80078dc:	f850 4f04 	ldr.w	r4, [r0, #4]!
 80078e0:	2c00      	cmp	r4, #0
 80078e2:	d1f8      	bne.n	80078d6 <init_ROS+0x2a>
        publishers[i] = &p;
 80078e4:	4874      	ldr	r0, [pc, #464]	; (8007ab8 <init_ROS+0x20c>)
 80078e6:	f503 7483 	add.w	r4, r3, #262	; 0x106
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80078ea:	337d      	adds	r3, #125	; 0x7d
        p.nh_ = this;
 80078ec:	e9c0 3202 	strd	r3, r2, [r0, #8]
        publishers[i] = &p;
 80078f0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80078f4:	4608      	mov	r0, r1
 80078f6:	2300      	movs	r3, #0
 80078f8:	e002      	b.n	8007900 <init_ROS+0x54>
 80078fa:	3301      	adds	r3, #1
 80078fc:	2b19      	cmp	r3, #25
 80078fe:	d00b      	beq.n	8007918 <init_ROS+0x6c>
      if (publishers[i] == 0) // empty slot
 8007900:	f850 4f04 	ldr.w	r4, [r0, #4]!
 8007904:	2c00      	cmp	r4, #0
 8007906:	d1f8      	bne.n	80078fa <init_ROS+0x4e>
        publishers[i] = &p;
 8007908:	486c      	ldr	r0, [pc, #432]	; (8007abc <init_ROS+0x210>)
 800790a:	f503 7483 	add.w	r4, r3, #262	; 0x106
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800790e:	337d      	adds	r3, #125	; 0x7d
        p.nh_ = this;
 8007910:	e9c0 3202 	strd	r3, r2, [r0, #8]
        publishers[i] = &p;
 8007914:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8007918:	4608      	mov	r0, r1
 800791a:	2300      	movs	r3, #0
 800791c:	e002      	b.n	8007924 <init_ROS+0x78>
 800791e:	3301      	adds	r3, #1
 8007920:	2b19      	cmp	r3, #25
 8007922:	d00b      	beq.n	800793c <init_ROS+0x90>
      if (publishers[i] == 0) // empty slot
 8007924:	f850 4f04 	ldr.w	r4, [r0, #4]!
 8007928:	2c00      	cmp	r4, #0
 800792a:	d1f8      	bne.n	800791e <init_ROS+0x72>
        publishers[i] = &p;
 800792c:	4864      	ldr	r0, [pc, #400]	; (8007ac0 <init_ROS+0x214>)
 800792e:	f503 7483 	add.w	r4, r3, #262	; 0x106
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8007932:	337d      	adds	r3, #125	; 0x7d
        p.nh_ = this;
 8007934:	e9c0 3202 	strd	r3, r2, [r0, #8]
        publishers[i] = &p;
 8007938:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800793c:	4608      	mov	r0, r1
 800793e:	2300      	movs	r3, #0
 8007940:	e002      	b.n	8007948 <init_ROS+0x9c>
 8007942:	3301      	adds	r3, #1
 8007944:	2b19      	cmp	r3, #25
 8007946:	d00b      	beq.n	8007960 <init_ROS+0xb4>
      if (publishers[i] == 0) // empty slot
 8007948:	f850 4f04 	ldr.w	r4, [r0, #4]!
 800794c:	2c00      	cmp	r4, #0
 800794e:	d1f8      	bne.n	8007942 <init_ROS+0x96>
        publishers[i] = &p;
 8007950:	485c      	ldr	r0, [pc, #368]	; (8007ac4 <init_ROS+0x218>)
 8007952:	f503 7483 	add.w	r4, r3, #262	; 0x106
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8007956:	337d      	adds	r3, #125	; 0x7d
        p.nh_ = this;
 8007958:	e9c0 3202 	strd	r3, r2, [r0, #8]
        publishers[i] = &p;
 800795c:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8007960:	4608      	mov	r0, r1
 8007962:	2300      	movs	r3, #0
 8007964:	e002      	b.n	800796c <init_ROS+0xc0>
 8007966:	3301      	adds	r3, #1
 8007968:	2b19      	cmp	r3, #25
 800796a:	d00b      	beq.n	8007984 <init_ROS+0xd8>
      if (publishers[i] == 0) // empty slot
 800796c:	f850 4f04 	ldr.w	r4, [r0, #4]!
 8007970:	2c00      	cmp	r4, #0
 8007972:	d1f8      	bne.n	8007966 <init_ROS+0xba>
        publishers[i] = &p;
 8007974:	4854      	ldr	r0, [pc, #336]	; (8007ac8 <init_ROS+0x21c>)
 8007976:	f503 7483 	add.w	r4, r3, #262	; 0x106
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800797a:	337d      	adds	r3, #125	; 0x7d
        p.nh_ = this;
 800797c:	e9c0 3202 	strd	r3, r2, [r0, #8]
        publishers[i] = &p;
 8007980:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8007984:	4608      	mov	r0, r1
 8007986:	2300      	movs	r3, #0
 8007988:	e002      	b.n	8007990 <init_ROS+0xe4>
 800798a:	3301      	adds	r3, #1
 800798c:	2b19      	cmp	r3, #25
 800798e:	d00b      	beq.n	80079a8 <init_ROS+0xfc>
      if (publishers[i] == 0) // empty slot
 8007990:	f850 4f04 	ldr.w	r4, [r0, #4]!
 8007994:	2c00      	cmp	r4, #0
 8007996:	d1f8      	bne.n	800798a <init_ROS+0xde>
        publishers[i] = &p;
 8007998:	484c      	ldr	r0, [pc, #304]	; (8007acc <init_ROS+0x220>)
 800799a:	f503 7483 	add.w	r4, r3, #262	; 0x106
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800799e:	337d      	adds	r3, #125	; 0x7d
        p.nh_ = this;
 80079a0:	e9c0 3202 	strd	r3, r2, [r0, #8]
        publishers[i] = &p;
 80079a4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80079a8:	4608      	mov	r0, r1
 80079aa:	2300      	movs	r3, #0
 80079ac:	e002      	b.n	80079b4 <init_ROS+0x108>
 80079ae:	3301      	adds	r3, #1
 80079b0:	2b19      	cmp	r3, #25
 80079b2:	d00b      	beq.n	80079cc <init_ROS+0x120>
      if (publishers[i] == 0) // empty slot
 80079b4:	f850 4f04 	ldr.w	r4, [r0, #4]!
 80079b8:	2c00      	cmp	r4, #0
 80079ba:	d1f8      	bne.n	80079ae <init_ROS+0x102>
        publishers[i] = &p;
 80079bc:	4844      	ldr	r0, [pc, #272]	; (8007ad0 <init_ROS+0x224>)
 80079be:	f503 7483 	add.w	r4, r3, #262	; 0x106
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80079c2:	337d      	adds	r3, #125	; 0x7d
        p.nh_ = this;
 80079c4:	e9c0 3202 	strd	r3, r2, [r0, #8]
        publishers[i] = &p;
 80079c8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80079cc:	4608      	mov	r0, r1
 80079ce:	2300      	movs	r3, #0
 80079d0:	e002      	b.n	80079d8 <init_ROS+0x12c>
 80079d2:	3301      	adds	r3, #1
 80079d4:	2b19      	cmp	r3, #25
 80079d6:	d00b      	beq.n	80079f0 <init_ROS+0x144>
      if (publishers[i] == 0) // empty slot
 80079d8:	f850 4f04 	ldr.w	r4, [r0, #4]!
 80079dc:	2c00      	cmp	r4, #0
 80079de:	d1f8      	bne.n	80079d2 <init_ROS+0x126>
        publishers[i] = &p;
 80079e0:	483c      	ldr	r0, [pc, #240]	; (8007ad4 <init_ROS+0x228>)
 80079e2:	f503 7483 	add.w	r4, r3, #262	; 0x106
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80079e6:	337d      	adds	r3, #125	; 0x7d
        p.nh_ = this;
 80079e8:	e9c0 3202 	strd	r3, r2, [r0, #8]
        publishers[i] = &p;
 80079ec:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80079f0:	2300      	movs	r3, #0
 80079f2:	e002      	b.n	80079fa <init_ROS+0x14e>
 80079f4:	3301      	adds	r3, #1
 80079f6:	2b19      	cmp	r3, #25
 80079f8:	d00b      	beq.n	8007a12 <init_ROS+0x166>
      if (publishers[i] == 0) // empty slot
 80079fa:	f851 0f04 	ldr.w	r0, [r1, #4]!
 80079fe:	2800      	cmp	r0, #0
 8007a00:	d1f8      	bne.n	80079f4 <init_ROS+0x148>
        publishers[i] = &p;
 8007a02:	4935      	ldr	r1, [pc, #212]	; (8007ad8 <init_ROS+0x22c>)
 8007a04:	f503 7083 	add.w	r0, r3, #262	; 0x106
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8007a08:	337d      	adds	r3, #125	; 0x7d
        p.nh_ = this;
 8007a0a:	e9c1 3202 	strd	r3, r2, [r1, #8]
        publishers[i] = &p;
 8007a0e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 8007a12:	4932      	ldr	r1, [pc, #200]	; (8007adc <init_ROS+0x230>)
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8007a14:	2300      	movs	r3, #0
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8007a16:	4608      	mov	r0, r1
 8007a18:	e002      	b.n	8007a20 <init_ROS+0x174>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	2b19      	cmp	r3, #25
 8007a1e:	d00a      	beq.n	8007a36 <init_ROS+0x18a>
      if (subscribers[i] == 0) // empty slot
 8007a20:	f850 4f04 	ldr.w	r4, [r0, #4]!
 8007a24:	2c00      	cmp	r4, #0
 8007a26:	d1f8      	bne.n	8007a1a <init_ROS+0x16e>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8007a28:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 8007a2c:	482c      	ldr	r0, [pc, #176]	; (8007ae0 <init_ROS+0x234>)
 8007a2e:	f8c4 047c 	str.w	r0, [r4, #1148]	; 0x47c
        s.id_ = i + 100;
 8007a32:	3364      	adds	r3, #100	; 0x64
 8007a34:	6043      	str	r3, [r0, #4]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8007a36:	2300      	movs	r3, #0
 8007a38:	e002      	b.n	8007a40 <init_ROS+0x194>
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	2b19      	cmp	r3, #25
 8007a3e:	d00a      	beq.n	8007a56 <init_ROS+0x1aa>
      if (subscribers[i] == 0) // empty slot
 8007a40:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8007a44:	2800      	cmp	r0, #0
 8007a46:	d1f8      	bne.n	8007a3a <init_ROS+0x18e>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8007a48:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007a4c:	4925      	ldr	r1, [pc, #148]	; (8007ae4 <init_ROS+0x238>)
 8007a4e:	f8c2 147c 	str.w	r1, [r2, #1148]	; 0x47c
        s.id_ = i + 100;
 8007a52:	3364      	adds	r3, #100	; 0x64
 8007a54:	604b      	str	r3, [r1, #4]
//	nh.subscribe(speedD);
	nh.subscribe(rpm_left_sub);
	nh.subscribe(rpm_right_sub);


	NBT_init(&right_can_msg_nbt, 9);
 8007a56:	2109      	movs	r1, #9
 8007a58:	4823      	ldr	r0, [pc, #140]	; (8007ae8 <init_ROS+0x23c>)
 8007a5a:	f001 fc13 	bl	8009284 <_Z8NBT_initP5nbt_tm>
	NBT_init(&left_can_msg_nbt, 9);
 8007a5e:	2109      	movs	r1, #9
 8007a60:	4822      	ldr	r0, [pc, #136]	; (8007aec <init_ROS+0x240>)
 8007a62:	f001 fc0f 	bl	8009284 <_Z8NBT_initP5nbt_tm>
	NBT_init(&rpm_left_nbt, 9);
 8007a66:	2109      	movs	r1, #9
 8007a68:	4821      	ldr	r0, [pc, #132]	; (8007af0 <init_ROS+0x244>)
 8007a6a:	f001 fc0b 	bl	8009284 <_Z8NBT_initP5nbt_tm>
	NBT_init(&rpm_right_nbt, 9);
 8007a6e:	2109      	movs	r1, #9
 8007a70:	4820      	ldr	r0, [pc, #128]	; (8007af4 <init_ROS+0x248>)
 8007a72:	f001 fc07 	bl	8009284 <_Z8NBT_initP5nbt_tm>
	NBT_init(&gyro_nbt, 9);
 8007a76:	2109      	movs	r1, #9
 8007a78:	481f      	ldr	r0, [pc, #124]	; (8007af8 <init_ROS+0x24c>)
 8007a7a:	f001 fc03 	bl	8009284 <_Z8NBT_initP5nbt_tm>
	NBT_init(&vector_nbt, 9);
 8007a7e:	2109      	movs	r1, #9
 8007a80:	481e      	ldr	r0, [pc, #120]	; (8007afc <init_ROS+0x250>)
 8007a82:	f001 fbff 	bl	8009284 <_Z8NBT_initP5nbt_tm>
	NBT_init(&accel_nbt, 9);
 8007a86:	2109      	movs	r1, #9
 8007a88:	481d      	ldr	r0, [pc, #116]	; (8007b00 <init_ROS+0x254>)
 8007a8a:	f001 fbfb 	bl	8009284 <_Z8NBT_initP5nbt_tm>
	NBT_init(&ros_nbt, 1);
 8007a8e:	2101      	movs	r1, #1
 8007a90:	481c      	ldr	r0, [pc, #112]	; (8007b04 <init_ROS+0x258>)
 8007a92:	f001 fbf7 	bl	8009284 <_Z8NBT_initP5nbt_tm>
	NBT_init(&id_nbt, 9);
 8007a96:	2109      	movs	r1, #9
 8007a98:	481b      	ldr	r0, [pc, #108]	; (8007b08 <init_ROS+0x25c>)
 8007a9a:	f001 fbf3 	bl	8009284 <_Z8NBT_initP5nbt_tm>

	NBT_init(&sensor_data_nbt, 9);
 8007a9e:	2109      	movs	r1, #9
 8007aa0:	481a      	ldr	r0, [pc, #104]	; (8007b0c <init_ROS+0x260>)
}
 8007aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	NBT_init(&sensor_data_nbt, 9);
 8007aa6:	f001 bbed 	b.w	8009284 <_Z8NBT_initP5nbt_tm>
 8007aaa:	bf00      	nop
 8007aac:	20005300 	.word	0x20005300
 8007ab0:	200047b0 	.word	0x200047b0
 8007ab4:	20004280 	.word	0x20004280
 8007ab8:	2000488c 	.word	0x2000488c
 8007abc:	20004224 	.word	0x20004224
 8007ac0:	20004200 	.word	0x20004200
 8007ac4:	20004808 	.word	0x20004808
 8007ac8:	200047d8 	.word	0x200047d8
 8007acc:	200047c4 	.word	0x200047c4
 8007ad0:	2000426c 	.word	0x2000426c
 8007ad4:	20004248 	.word	0x20004248
 8007ad8:	20004838 	.word	0x20004838
 8007adc:	200046f8 	.word	0x200046f8
 8007ae0:	200047ec 	.word	0x200047ec
 8007ae4:	2000481c 	.word	0x2000481c
 8007ae8:	200041d4 	.word	0x200041d4
 8007aec:	200041cc 	.word	0x200041cc
 8007af0:	200041b4 	.word	0x200041b4
 8007af4:	200041bc 	.word	0x200041bc
 8007af8:	200041ec 	.word	0x200041ec
 8007afc:	200041ac 	.word	0x200041ac
 8007b00:	200041f4 	.word	0x200041f4
 8007b04:	200041e4 	.word	0x200041e4
 8007b08:	200041dc 	.word	0x200041dc
 8007b0c:	200041c4 	.word	0x200041c4

08007b10 <rpm_right_handler>:
	  }
}


extern "C" void rpm_right_handler(void)
{
 8007b10:	b570      	push	{r4, r5, r6, lr}
	  if (NBT_handler(&rpm_right_nbt))
 8007b12:	4825      	ldr	r0, [pc, #148]	; (8007ba8 <rpm_right_handler+0x98>)
 8007b14:	f001 fbbe 	bl	8009294 <_Z11NBT_handlerP5nbt_t>
 8007b18:	b398      	cbz	r0, 8007b82 <rpm_right_handler+0x72>
	  {
		  if (sideRXDataRight == 1) {
 8007b1a:	4b24      	ldr	r3, [pc, #144]	; (8007bac <rpm_right_handler+0x9c>)
 8007b1c:	f993 3000 	ldrsb.w	r3, [r3]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d02f      	beq.n	8007b84 <rpm_right_handler+0x74>

			  uint_msg_right.data = speedRXDataRight;

		  }
		  else if (sideRXDataRight == 2) {
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d033      	beq.n	8007b90 <rpm_right_handler+0x80>

			  uint_msg_right.data = -speedRXDataRight;

		  }
		  else {
			  uint_msg_right.data = 0;
 8007b28:	4a21      	ldr	r2, [pc, #132]	; (8007bb0 <rpm_right_handler+0xa0>)
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	7113      	strb	r3, [r2, #4]
		  }
//		  if (uint_msg_right.data !=0)
		  rpm_right.publish(&uint_msg_right);
 8007b2e:	4a21      	ldr	r2, [pc, #132]	; (8007bb4 <rpm_right_handler+0xa4>)
 8007b30:	4d21      	ldr	r5, [pc, #132]	; (8007bb8 <rpm_right_handler+0xa8>)
 8007b32:	e9d2 1002 	ldrd	r1, r0, [r2, #8]
    msg_(msg),
    endpoint_(endpoint) {};

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
 8007b36:	6802      	ldr	r2, [r0, #0]
 8007b38:	6814      	ldr	r4, [r2, #0]
 8007b3a:	42ac      	cmp	r4, r5
 8007b3c:	d12f      	bne.n	8007b9e <rpm_right_handler+0x8e>
    if (id >= 100 && !configured_)
 8007b3e:	2963      	cmp	r1, #99	; 0x63
 8007b40:	dd02      	ble.n	8007b48 <rpm_right_handler+0x38>
 8007b42:	f890 24f4 	ldrb.w	r2, [r0, #1268]	; 0x4f4
 8007b46:	b1e2      	cbz	r2, 8007b82 <rpm_right_handler+0x72>
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8007b48:	f341 2407 	sbfx	r4, r1, #8, #8
      chk += message_out[i];
 8007b4c:	b2e2      	uxtb	r2, r4
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	fa52 f281 	uxtab	r2, r2, r1
 8007b54:	441a      	add	r2, r3
 8007b56:	f880 321f 	strb.w	r3, [r0, #543]	; 0x21f
    message_out[0] = 0xff;
 8007b5a:	4d18      	ldr	r5, [pc, #96]	; (8007bbc <rpm_right_handler+0xac>)
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8007b5c:	f880 121d 	strb.w	r1, [r0, #541]	; 0x21d
    message_out[l++] = 255 - (chk % 256);
 8007b60:	43d2      	mvns	r2, r2
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8007b62:	23fe      	movs	r3, #254	; 0xfe
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8007b64:	f880 421e 	strb.w	r4, [r0, #542]	; 0x21e
    message_out[l++] = 255 - (chk % 256);
 8007b68:	f880 2220 	strb.w	r2, [r0, #544]	; 0x220
    message_out[0] = 0xff;
 8007b6c:	f8c0 5218 	str.w	r5, [r0, #536]	; 0x218
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8007b70:	f880 321c 	strb.w	r3, [r0, #540]	; 0x21c
 8007b74:	2109      	movs	r1, #9
 8007b76:	f500 7006 	add.w	r0, r0, #536	; 0x218
	  }
}
 8007b7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007b7e:	f7fe bedd 	b.w	800693c <CDC_Transmit_FS>
 8007b82:	bd70      	pop	{r4, r5, r6, pc}
			  uint_msg_right.data = speedRXDataRight;
 8007b84:	4b0e      	ldr	r3, [pc, #56]	; (8007bc0 <rpm_right_handler+0xb0>)
 8007b86:	4a0a      	ldr	r2, [pc, #40]	; (8007bb0 <rpm_right_handler+0xa0>)
 8007b88:	f993 3000 	ldrsb.w	r3, [r3]
 8007b8c:	7113      	strb	r3, [r2, #4]
 8007b8e:	e7ce      	b.n	8007b2e <rpm_right_handler+0x1e>
			  uint_msg_right.data = -speedRXDataRight;
 8007b90:	4b0b      	ldr	r3, [pc, #44]	; (8007bc0 <rpm_right_handler+0xb0>)
 8007b92:	4a07      	ldr	r2, [pc, #28]	; (8007bb0 <rpm_right_handler+0xa0>)
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	425b      	negs	r3, r3
 8007b98:	b25b      	sxtb	r3, r3
 8007b9a:	7113      	strb	r3, [r2, #4]
 8007b9c:	e7c7      	b.n	8007b2e <rpm_right_handler+0x1e>
 8007b9e:	4623      	mov	r3, r4
 8007ba0:	4a03      	ldr	r2, [pc, #12]	; (8007bb0 <rpm_right_handler+0xa0>)
}
 8007ba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ba6:	4718      	bx	r3
 8007ba8:	200041bc 	.word	0x200041bc
 8007bac:	20004bb5 	.word	0x20004bb5
 8007bb0:	200048b0 	.word	0x200048b0
 8007bb4:	20004808 	.word	0x20004808
 8007bb8:	08007619 	.word	0x08007619
 8007bbc:	0001feff 	.word	0x0001feff
 8007bc0:	20004bb4 	.word	0x20004bb4

08007bc4 <rpm_left_handler>:

extern "C" void rpm_left_handler(void)
{
 8007bc4:	b570      	push	{r4, r5, r6, lr}
	  if (NBT_handler(&rpm_left_nbt))
 8007bc6:	4825      	ldr	r0, [pc, #148]	; (8007c5c <rpm_left_handler+0x98>)
 8007bc8:	f001 fb64 	bl	8009294 <_Z11NBT_handlerP5nbt_t>
 8007bcc:	b398      	cbz	r0, 8007c36 <rpm_left_handler+0x72>
	  {
		  if (sideRXDataLeft == 2) {
 8007bce:	4b24      	ldr	r3, [pc, #144]	; (8007c60 <rpm_left_handler+0x9c>)
 8007bd0:	f993 3000 	ldrsb.w	r3, [r3]
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d02f      	beq.n	8007c38 <rpm_left_handler+0x74>

			  uint_msg_left.data = speedRXDataLeft;

		  }
		  else if (sideRXDataLeft == 1) {
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d033      	beq.n	8007c44 <rpm_left_handler+0x80>

			  uint_msg_left.data = -speedRXDataLeft;

		  }
		  else {
			  uint_msg_left.data = 0;
 8007bdc:	4a21      	ldr	r2, [pc, #132]	; (8007c64 <rpm_left_handler+0xa0>)
 8007bde:	2300      	movs	r3, #0
 8007be0:	7113      	strb	r3, [r2, #4]
		  }
		  rpm_left.publish(&uint_msg_left);
 8007be2:	4a21      	ldr	r2, [pc, #132]	; (8007c68 <rpm_left_handler+0xa4>)
 8007be4:	4d21      	ldr	r5, [pc, #132]	; (8007c6c <rpm_left_handler+0xa8>)
 8007be6:	e9d2 1002 	ldrd	r1, r0, [r2, #8]
 8007bea:	6802      	ldr	r2, [r0, #0]
 8007bec:	6814      	ldr	r4, [r2, #0]
 8007bee:	42ac      	cmp	r4, r5
 8007bf0:	d12f      	bne.n	8007c52 <rpm_left_handler+0x8e>
    if (id >= 100 && !configured_)
 8007bf2:	2963      	cmp	r1, #99	; 0x63
 8007bf4:	dd02      	ble.n	8007bfc <rpm_left_handler+0x38>
 8007bf6:	f890 24f4 	ldrb.w	r2, [r0, #1268]	; 0x4f4
 8007bfa:	b1e2      	cbz	r2, 8007c36 <rpm_left_handler+0x72>
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8007bfc:	f341 2407 	sbfx	r4, r1, #8, #8
      chk += message_out[i];
 8007c00:	b2e2      	uxtb	r2, r4
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	fa52 f281 	uxtab	r2, r2, r1
 8007c08:	441a      	add	r2, r3
 8007c0a:	f880 321f 	strb.w	r3, [r0, #543]	; 0x21f
    message_out[0] = 0xff;
 8007c0e:	4d18      	ldr	r5, [pc, #96]	; (8007c70 <rpm_left_handler+0xac>)
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8007c10:	f880 121d 	strb.w	r1, [r0, #541]	; 0x21d
    message_out[l++] = 255 - (chk % 256);
 8007c14:	43d2      	mvns	r2, r2
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8007c16:	23fe      	movs	r3, #254	; 0xfe
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8007c18:	f880 421e 	strb.w	r4, [r0, #542]	; 0x21e
    message_out[l++] = 255 - (chk % 256);
 8007c1c:	f880 2220 	strb.w	r2, [r0, #544]	; 0x220
    message_out[0] = 0xff;
 8007c20:	f8c0 5218 	str.w	r5, [r0, #536]	; 0x218
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8007c24:	f880 321c 	strb.w	r3, [r0, #540]	; 0x21c
 8007c28:	2109      	movs	r1, #9
 8007c2a:	f500 7006 	add.w	r0, r0, #536	; 0x218
	  }
}
 8007c2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c32:	f7fe be83 	b.w	800693c <CDC_Transmit_FS>
 8007c36:	bd70      	pop	{r4, r5, r6, pc}
			  uint_msg_left.data = speedRXDataLeft;
 8007c38:	4b0e      	ldr	r3, [pc, #56]	; (8007c74 <rpm_left_handler+0xb0>)
 8007c3a:	4a0a      	ldr	r2, [pc, #40]	; (8007c64 <rpm_left_handler+0xa0>)
 8007c3c:	f993 3000 	ldrsb.w	r3, [r3]
 8007c40:	7113      	strb	r3, [r2, #4]
 8007c42:	e7ce      	b.n	8007be2 <rpm_left_handler+0x1e>
			  uint_msg_left.data = -speedRXDataLeft;
 8007c44:	4b0b      	ldr	r3, [pc, #44]	; (8007c74 <rpm_left_handler+0xb0>)
 8007c46:	4a07      	ldr	r2, [pc, #28]	; (8007c64 <rpm_left_handler+0xa0>)
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	425b      	negs	r3, r3
 8007c4c:	b25b      	sxtb	r3, r3
 8007c4e:	7113      	strb	r3, [r2, #4]
 8007c50:	e7c7      	b.n	8007be2 <rpm_left_handler+0x1e>
 8007c52:	4623      	mov	r3, r4
 8007c54:	4a03      	ldr	r2, [pc, #12]	; (8007c64 <rpm_left_handler+0xa0>)
}
 8007c56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c5a:	4718      	bx	r3
 8007c5c:	200041b4 	.word	0x200041b4
 8007c60:	20004bfc 	.word	0x20004bfc
 8007c64:	200048a8 	.word	0x200048a8
 8007c68:	200047d8 	.word	0x200047d8
 8007c6c:	08007619 	.word	0x08007619
 8007c70:	0001feff 	.word	0x0001feff
 8007c74:	2000495d 	.word	0x2000495d

08007c78 <sensor_handler>:

extern "C" void sensor_handler(void)
{
 8007c78:	b570      	push	{r4, r5, r6, lr}
  if (NBT_handler(&sensor_data_nbt))
 8007c7a:	481b      	ldr	r0, [pc, #108]	; (8007ce8 <sensor_handler+0x70>)
 8007c7c:	f001 fb0a 	bl	8009294 <_Z11NBT_handlerP5nbt_t>
 8007c80:	b900      	cbnz	r0, 8007c84 <sensor_handler+0xc>

	  	  sensor_data.publish(&sensor_data_msg);
	  	  //sensorData1++;
	 }

}
 8007c82:	bd70      	pop	{r4, r5, r6, pc}
	  	  sensor_data_msg.data = sensorData1;
 8007c84:	4919      	ldr	r1, [pc, #100]	; (8007cec <sensor_handler+0x74>)
	  	  sensor_data.publish(&sensor_data_msg);
 8007c86:	4b1a      	ldr	r3, [pc, #104]	; (8007cf0 <sensor_handler+0x78>)
	  	  sensor_data_msg.data = sensorData1;
 8007c88:	4a1a      	ldr	r2, [pc, #104]	; (8007cf4 <sensor_handler+0x7c>)
 8007c8a:	780c      	ldrb	r4, [r1, #0]
	  	  sensor_data.publish(&sensor_data_msg);
 8007c8c:	68d8      	ldr	r0, [r3, #12]
	  	  sensor_data_msg.data = sensorData1;
 8007c8e:	7114      	strb	r4, [r2, #4]
 8007c90:	6801      	ldr	r1, [r0, #0]
 8007c92:	4e19      	ldr	r6, [pc, #100]	; (8007cf8 <sensor_handler+0x80>)
 8007c94:	680d      	ldr	r5, [r1, #0]
	  	  sensor_data.publish(&sensor_data_msg);
 8007c96:	6899      	ldr	r1, [r3, #8]
 8007c98:	42b5      	cmp	r5, r6
 8007c9a:	d121      	bne.n	8007ce0 <sensor_handler+0x68>
    if (id >= 100 && !configured_)
 8007c9c:	2963      	cmp	r1, #99	; 0x63
 8007c9e:	dd03      	ble.n	8007ca8 <sensor_handler+0x30>
 8007ca0:	f890 34f4 	ldrb.w	r3, [r0, #1268]	; 0x4f4
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d0ec      	beq.n	8007c82 <sensor_handler+0xa>
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8007ca8:	f341 2207 	sbfx	r2, r1, #8, #8
      chk += message_out[i];
 8007cac:	b2d3      	uxtb	r3, r2
 8007cae:	fa53 f381 	uxtab	r3, r3, r1
 8007cb2:	4423      	add	r3, r4
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 8007cb4:	f880 421f 	strb.w	r4, [r0, #543]	; 0x21f
    message_out[0] = 0xff;
 8007cb8:	4d10      	ldr	r5, [pc, #64]	; (8007cfc <sensor_handler+0x84>)
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8007cba:	f880 121d 	strb.w	r1, [r0, #541]	; 0x21d
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8007cbe:	24fe      	movs	r4, #254	; 0xfe
    message_out[l++] = 255 - (chk % 256);
 8007cc0:	43db      	mvns	r3, r3
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8007cc2:	f880 221e 	strb.w	r2, [r0, #542]	; 0x21e
    message_out[l++] = 255 - (chk % 256);
 8007cc6:	f880 3220 	strb.w	r3, [r0, #544]	; 0x220
    message_out[0] = 0xff;
 8007cca:	f8c0 5218 	str.w	r5, [r0, #536]	; 0x218
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8007cce:	f880 421c 	strb.w	r4, [r0, #540]	; 0x21c
 8007cd2:	2109      	movs	r1, #9
 8007cd4:	f500 7006 	add.w	r0, r0, #536	; 0x218
}
 8007cd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007cdc:	f7fe be2e 	b.w	800693c <CDC_Transmit_FS>
 8007ce0:	462b      	mov	r3, r5
 8007ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ce6:	4718      	bx	r3
 8007ce8:	200041c4 	.word	0x200041c4
 8007cec:	200049a9 	.word	0x200049a9
 8007cf0:	20004838 	.word	0x20004838
 8007cf4:	2000484c 	.word	0x2000484c
 8007cf8:	08007619 	.word	0x08007619
 8007cfc:	0001feff 	.word	0x0001feff

08007d00 <gyro_handler>:

extern "C" void gyro_handler(void)
{
 8007d00:	b570      	push	{r4, r5, r6, lr}
    if (NBT_handler(&gyro_nbt))
 8007d02:	4865      	ldr	r0, [pc, #404]	; (8007e98 <gyro_handler+0x198>)
 8007d04:	f001 fac6 	bl	8009294 <_Z11NBT_handlerP5nbt_t>
 8007d08:	b900      	cbnz	r0, 8007d0c <gyro_handler+0xc>
//		  vx++;
//		  vy++;
//		  vz++;

       }
}
 8007d0a:	bd70      	pop	{r4, r5, r6, pc}
		  gyro.publish(&gyro_msg);
 8007d0c:	4b63      	ldr	r3, [pc, #396]	; (8007e9c <gyro_handler+0x19c>)
		  gyro_msg.y = gyroY;
 8007d0e:	4d64      	ldr	r5, [pc, #400]	; (8007ea0 <gyro_handler+0x1a0>)
		  gyro.publish(&gyro_msg);
 8007d10:	68d8      	ldr	r0, [r3, #12]
		  gyro_msg.x = gyroX;
 8007d12:	4a64      	ldr	r2, [pc, #400]	; (8007ea4 <gyro_handler+0x1a4>)
 8007d14:	6804      	ldr	r4, [r0, #0]
		  gyro_msg.z = gyroZ;
 8007d16:	4964      	ldr	r1, [pc, #400]	; (8007ea8 <gyro_handler+0x1a8>)
 8007d18:	6824      	ldr	r4, [r4, #0]
		  gyro_msg.y = gyroY;
 8007d1a:	ed95 7a00 	vldr	s14, [r5]
 8007d1e:	4d63      	ldr	r5, [pc, #396]	; (8007eac <gyro_handler+0x1ac>)
		  gyro_msg.x = gyroX;
 8007d20:	edd2 6a00 	vldr	s13, [r2]
		  gyro_msg.z = gyroZ;
 8007d24:	edd1 7a00 	vldr	s15, [r1]
		  gyro_msg.x = gyroX;
 8007d28:	4a61      	ldr	r2, [pc, #388]	; (8007eb0 <gyro_handler+0x1b0>)
		  gyro.publish(&gyro_msg);
 8007d2a:	6899      	ldr	r1, [r3, #8]
		  gyro_msg.x = gyroX;
 8007d2c:	edc2 6a01 	vstr	s13, [r2, #4]
 8007d30:	42ac      	cmp	r4, r5
		  gyro_msg.y = gyroY;
 8007d32:	ed82 7a02 	vstr	s14, [r2, #8]
		  gyro_msg.z = gyroZ;
 8007d36:	edc2 7a03 	vstr	s15, [r2, #12]
 8007d3a:	f040 80a9 	bne.w	8007e90 <gyro_handler+0x190>
    if (id >= 100 && !configured_)
 8007d3e:	2963      	cmp	r1, #99	; 0x63
 8007d40:	dd03      	ble.n	8007d4a <gyro_handler+0x4a>
 8007d42:	f890 34f4 	ldrb.w	r3, [r0, #1268]	; 0x4f4
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d0df      	beq.n	8007d0a <gyro_handler+0xa>
    int32_t exp = ((*val >> 23) & 255);
 8007d4a:	ee16 3a90 	vmov	r3, s13
 8007d4e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    if (exp != 0)
 8007d52:	2a00      	cmp	r2, #0
 8007d54:	f040 8092 	bne.w	8007e7c <gyro_handler+0x17c>
 8007d58:	4614      	mov	r4, r2
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007d5a:	f3c3 45c3 	ubfx	r5, r3, #19, #4
 8007d5e:	432c      	orrs	r4, r5
    *(outbuffer++) = (sig << 5) & 0xff;
 8007d60:	015e      	lsls	r6, r3, #5
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007d62:	f880 4225 	strb.w	r4, [r0, #549]	; 0x225
    if (f < 0)
 8007d66:	eef5 6ac0 	vcmpe.f32	s13, #0.0
    *(outbuffer++) = (sig >> 3) & 0xff;
 8007d6a:	10dc      	asrs	r4, r3, #3
    *(outbuffer++) = (sig >> 11) & 0xff;
 8007d6c:	12db      	asrs	r3, r3, #11
 8007d6e:	f880 3224 	strb.w	r3, [r0, #548]	; 0x224
    if (f < 0)
 8007d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    int32_t exp = ((*val >> 23) & 255);
 8007d76:	ee17 3a10 	vmov	r3, s14
      *(outbuffer - 1) |= 0x80;
 8007d7a:	bf48      	it	mi
 8007d7c:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = 0;
 8007d80:	2500      	movs	r5, #0
      *(outbuffer - 1) |= 0x80;
 8007d82:	f880 2226 	strb.w	r2, [r0, #550]	; 0x226
    int32_t exp = ((*val >> 23) & 255);
 8007d86:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    *(outbuffer++) = 0;
 8007d8a:	f880 521f 	strb.w	r5, [r0, #543]	; 0x21f
    *(outbuffer++) = 0;
 8007d8e:	f880 5220 	strb.w	r5, [r0, #544]	; 0x220
    *(outbuffer++) = 0;
 8007d92:	f880 5221 	strb.w	r5, [r0, #545]	; 0x221
    *(outbuffer++) = (sig << 5) & 0xff;
 8007d96:	f880 6222 	strb.w	r6, [r0, #546]	; 0x222
    *(outbuffer++) = (sig >> 3) & 0xff;
 8007d9a:	f880 4223 	strb.w	r4, [r0, #547]	; 0x223
    if (exp != 0)
 8007d9e:	2a00      	cmp	r2, #0
 8007da0:	d074      	beq.n	8007e8c <gyro_handler+0x18c>
      exp += 1023 - 127;
 8007da2:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8007da6:	0114      	lsls	r4, r2, #4
 8007da8:	b264      	sxtb	r4, r4
 8007daa:	0912      	lsrs	r2, r2, #4
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007dac:	f3c3 45c3 	ubfx	r5, r3, #19, #4
 8007db0:	432c      	orrs	r4, r5
    *(outbuffer++) = (sig << 5) & 0xff;
 8007db2:	015e      	lsls	r6, r3, #5
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007db4:	f880 422d 	strb.w	r4, [r0, #557]	; 0x22d
    if (f < 0)
 8007db8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    *(outbuffer++) = (sig >> 3) & 0xff;
 8007dbc:	10dc      	asrs	r4, r3, #3
    *(outbuffer++) = (sig >> 11) & 0xff;
 8007dbe:	12db      	asrs	r3, r3, #11
 8007dc0:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
    if (f < 0)
 8007dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    int32_t exp = ((*val >> 23) & 255);
 8007dc8:	ee17 3a90 	vmov	r3, s15
      *(outbuffer - 1) |= 0x80;
 8007dcc:	bf48      	it	mi
 8007dce:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = 0;
 8007dd2:	2500      	movs	r5, #0
      *(outbuffer - 1) |= 0x80;
 8007dd4:	f880 222e 	strb.w	r2, [r0, #558]	; 0x22e
    int32_t exp = ((*val >> 23) & 255);
 8007dd8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    *(outbuffer++) = 0;
 8007ddc:	f880 5227 	strb.w	r5, [r0, #551]	; 0x227
    *(outbuffer++) = 0;
 8007de0:	f880 5228 	strb.w	r5, [r0, #552]	; 0x228
    *(outbuffer++) = 0;
 8007de4:	f880 5229 	strb.w	r5, [r0, #553]	; 0x229
    *(outbuffer++) = (sig << 5) & 0xff;
 8007de8:	f880 622a 	strb.w	r6, [r0, #554]	; 0x22a
    *(outbuffer++) = (sig >> 3) & 0xff;
 8007dec:	f880 422b 	strb.w	r4, [r0, #555]	; 0x22b
    if (exp != 0)
 8007df0:	2a00      	cmp	r2, #0
 8007df2:	d049      	beq.n	8007e88 <gyro_handler+0x188>
      exp += 1023 - 127;
 8007df4:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8007df8:	0114      	lsls	r4, r2, #4
 8007dfa:	b264      	sxtb	r4, r4
 8007dfc:	0912      	lsrs	r2, r2, #4
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007dfe:	f3c3 45c3 	ubfx	r5, r3, #19, #4
    if (f < 0)
 8007e02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007e06:	432c      	orrs	r4, r5
    if (f < 0)
 8007e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    *(outbuffer++) = (sig << 5) & 0xff;
 8007e0c:	ea4f 1643 	mov.w	r6, r3, lsl #5
      *(outbuffer - 1) |= 0x80;
 8007e10:	bf48      	it	mi
 8007e12:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007e16:	f880 4235 	strb.w	r4, [r0, #565]	; 0x235
    *(outbuffer++) = (sig >> 3) & 0xff;
 8007e1a:	10dc      	asrs	r4, r3, #3
    *(outbuffer++) = (sig >> 11) & 0xff;
 8007e1c:	12db      	asrs	r3, r3, #11
    *(outbuffer++) = 0;
 8007e1e:	2500      	movs	r5, #0
    *(outbuffer++) = (sig >> 3) & 0xff;
 8007e20:	f880 4233 	strb.w	r4, [r0, #563]	; 0x233
    *(outbuffer++) = (sig >> 11) & 0xff;
 8007e24:	f880 3234 	strb.w	r3, [r0, #564]	; 0x234
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8007e28:	f341 2407 	sbfx	r4, r1, #8, #8
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8007e2c:	23e7      	movs	r3, #231	; 0xe7
      *(outbuffer - 1) |= 0x80;
 8007e2e:	f880 2236 	strb.w	r2, [r0, #566]	; 0x236
    message_out[0] = 0xff;
 8007e32:	4a20      	ldr	r2, [pc, #128]	; (8007eb4 <gyro_handler+0x1b4>)
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8007e34:	f880 421e 	strb.w	r4, [r0, #542]	; 0x21e
    message_out[0] = 0xff;
 8007e38:	f8c0 2218 	str.w	r2, [r0, #536]	; 0x218
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8007e3c:	f880 321c 	strb.w	r3, [r0, #540]	; 0x21c
    *(outbuffer++) = 0;
 8007e40:	f880 522f 	strb.w	r5, [r0, #559]	; 0x22f
    *(outbuffer++) = 0;
 8007e44:	f880 5230 	strb.w	r5, [r0, #560]	; 0x230
    *(outbuffer++) = 0;
 8007e48:	f880 5231 	strb.w	r5, [r0, #561]	; 0x231
    *(outbuffer++) = (sig << 5) & 0xff;
 8007e4c:	f880 6232 	strb.w	r6, [r0, #562]	; 0x232
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8007e50:	f880 121d 	strb.w	r1, [r0, #541]	; 0x21d
 8007e54:	f500 7307 	add.w	r3, r0, #540	; 0x21c
 8007e58:	f200 2436 	addw	r4, r0, #566	; 0x236
    int chk = 0;
 8007e5c:	2200      	movs	r2, #0
      chk += message_out[i];
 8007e5e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 8007e62:	42a3      	cmp	r3, r4
      chk += message_out[i];
 8007e64:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
 8007e66:	d1fa      	bne.n	8007e5e <gyro_handler+0x15e>
    message_out[l++] = 255 - (chk % 256);
 8007e68:	43d2      	mvns	r2, r2
 8007e6a:	f880 2237 	strb.w	r2, [r0, #567]	; 0x237
 8007e6e:	2120      	movs	r1, #32
 8007e70:	f500 7006 	add.w	r0, r0, #536	; 0x218
}
 8007e74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e78:	f7fe bd60 	b.w	800693c <CDC_Transmit_FS>
      exp += 1023 - 127;
 8007e7c:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8007e80:	0114      	lsls	r4, r2, #4
 8007e82:	b264      	sxtb	r4, r4
 8007e84:	0912      	lsrs	r2, r2, #4
 8007e86:	e768      	b.n	8007d5a <gyro_handler+0x5a>
    if (exp != 0)
 8007e88:	4614      	mov	r4, r2
 8007e8a:	e7b8      	b.n	8007dfe <gyro_handler+0xfe>
 8007e8c:	4614      	mov	r4, r2
 8007e8e:	e78d      	b.n	8007dac <gyro_handler+0xac>
 8007e90:	4623      	mov	r3, r4
 8007e92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e96:	4718      	bx	r3
 8007e98:	200041ec 	.word	0x200041ec
 8007e9c:	20004224 	.word	0x20004224
 8007ea0:	20004bf8 	.word	0x20004bf8
 8007ea4:	20004950 	.word	0x20004950
 8007ea8:	20004980 	.word	0x20004980
 8007eac:	08007619 	.word	0x08007619
 8007eb0:	20004238 	.word	0x20004238
 8007eb4:	0018feff 	.word	0x0018feff

08007eb8 <accel_handler>:

extern "C" void accel_handler(void)
{
 8007eb8:	b570      	push	{r4, r5, r6, lr}
    if (NBT_handler(&accel_nbt))
 8007eba:	4865      	ldr	r0, [pc, #404]	; (8008050 <accel_handler+0x198>)
 8007ebc:	f001 f9ea 	bl	8009294 <_Z11NBT_handlerP5nbt_t>
 8007ec0:	b900      	cbnz	r0, 8007ec4 <accel_handler+0xc>
//		  vx++;
//		  vy++;
//		  vz++;

       }
}
 8007ec2:	bd70      	pop	{r4, r5, r6, pc}
		  accel.publish(&accel_msg);
 8007ec4:	4b63      	ldr	r3, [pc, #396]	; (8008054 <accel_handler+0x19c>)
		  accel_msg.y = accelY;
 8007ec6:	4d64      	ldr	r5, [pc, #400]	; (8008058 <accel_handler+0x1a0>)
		  accel.publish(&accel_msg);
 8007ec8:	68d8      	ldr	r0, [r3, #12]
          accel_msg.x = accelX;
 8007eca:	4a64      	ldr	r2, [pc, #400]	; (800805c <accel_handler+0x1a4>)
 8007ecc:	6804      	ldr	r4, [r0, #0]
		  accel_msg.z = accelZ;
 8007ece:	4964      	ldr	r1, [pc, #400]	; (8008060 <accel_handler+0x1a8>)
 8007ed0:	6824      	ldr	r4, [r4, #0]
		  accel_msg.y = accelY;
 8007ed2:	ed95 7a00 	vldr	s14, [r5]
 8007ed6:	4d63      	ldr	r5, [pc, #396]	; (8008064 <accel_handler+0x1ac>)
          accel_msg.x = accelX;
 8007ed8:	edd2 6a00 	vldr	s13, [r2]
		  accel_msg.z = accelZ;
 8007edc:	edd1 7a00 	vldr	s15, [r1]
          accel_msg.x = accelX;
 8007ee0:	4a61      	ldr	r2, [pc, #388]	; (8008068 <accel_handler+0x1b0>)
		  accel.publish(&accel_msg);
 8007ee2:	6899      	ldr	r1, [r3, #8]
          accel_msg.x = accelX;
 8007ee4:	edc2 6a01 	vstr	s13, [r2, #4]
 8007ee8:	42ac      	cmp	r4, r5
		  accel_msg.y = accelY;
 8007eea:	ed82 7a02 	vstr	s14, [r2, #8]
		  accel_msg.z = accelZ;
 8007eee:	edc2 7a03 	vstr	s15, [r2, #12]
 8007ef2:	f040 80a9 	bne.w	8008048 <accel_handler+0x190>
    if (id >= 100 && !configured_)
 8007ef6:	2963      	cmp	r1, #99	; 0x63
 8007ef8:	dd03      	ble.n	8007f02 <accel_handler+0x4a>
 8007efa:	f890 34f4 	ldrb.w	r3, [r0, #1268]	; 0x4f4
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d0df      	beq.n	8007ec2 <accel_handler+0xa>
    int32_t exp = ((*val >> 23) & 255);
 8007f02:	ee16 3a90 	vmov	r3, s13
 8007f06:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    if (exp != 0)
 8007f0a:	2a00      	cmp	r2, #0
 8007f0c:	f040 8092 	bne.w	8008034 <accel_handler+0x17c>
 8007f10:	4614      	mov	r4, r2
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007f12:	f3c3 45c3 	ubfx	r5, r3, #19, #4
 8007f16:	432c      	orrs	r4, r5
    *(outbuffer++) = (sig << 5) & 0xff;
 8007f18:	015e      	lsls	r6, r3, #5
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007f1a:	f880 4225 	strb.w	r4, [r0, #549]	; 0x225
    if (f < 0)
 8007f1e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
    *(outbuffer++) = (sig >> 3) & 0xff;
 8007f22:	10dc      	asrs	r4, r3, #3
    *(outbuffer++) = (sig >> 11) & 0xff;
 8007f24:	12db      	asrs	r3, r3, #11
 8007f26:	f880 3224 	strb.w	r3, [r0, #548]	; 0x224
    if (f < 0)
 8007f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    int32_t exp = ((*val >> 23) & 255);
 8007f2e:	ee17 3a10 	vmov	r3, s14
      *(outbuffer - 1) |= 0x80;
 8007f32:	bf48      	it	mi
 8007f34:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = 0;
 8007f38:	2500      	movs	r5, #0
      *(outbuffer - 1) |= 0x80;
 8007f3a:	f880 2226 	strb.w	r2, [r0, #550]	; 0x226
    int32_t exp = ((*val >> 23) & 255);
 8007f3e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    *(outbuffer++) = 0;
 8007f42:	f880 521f 	strb.w	r5, [r0, #543]	; 0x21f
    *(outbuffer++) = 0;
 8007f46:	f880 5220 	strb.w	r5, [r0, #544]	; 0x220
    *(outbuffer++) = 0;
 8007f4a:	f880 5221 	strb.w	r5, [r0, #545]	; 0x221
    *(outbuffer++) = (sig << 5) & 0xff;
 8007f4e:	f880 6222 	strb.w	r6, [r0, #546]	; 0x222
    *(outbuffer++) = (sig >> 3) & 0xff;
 8007f52:	f880 4223 	strb.w	r4, [r0, #547]	; 0x223
    if (exp != 0)
 8007f56:	2a00      	cmp	r2, #0
 8007f58:	d074      	beq.n	8008044 <accel_handler+0x18c>
      exp += 1023 - 127;
 8007f5a:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8007f5e:	0114      	lsls	r4, r2, #4
 8007f60:	b264      	sxtb	r4, r4
 8007f62:	0912      	lsrs	r2, r2, #4
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007f64:	f3c3 45c3 	ubfx	r5, r3, #19, #4
 8007f68:	432c      	orrs	r4, r5
    *(outbuffer++) = (sig << 5) & 0xff;
 8007f6a:	015e      	lsls	r6, r3, #5
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007f6c:	f880 422d 	strb.w	r4, [r0, #557]	; 0x22d
    if (f < 0)
 8007f70:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    *(outbuffer++) = (sig >> 3) & 0xff;
 8007f74:	10dc      	asrs	r4, r3, #3
    *(outbuffer++) = (sig >> 11) & 0xff;
 8007f76:	12db      	asrs	r3, r3, #11
 8007f78:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
    if (f < 0)
 8007f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    int32_t exp = ((*val >> 23) & 255);
 8007f80:	ee17 3a90 	vmov	r3, s15
      *(outbuffer - 1) |= 0x80;
 8007f84:	bf48      	it	mi
 8007f86:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = 0;
 8007f8a:	2500      	movs	r5, #0
      *(outbuffer - 1) |= 0x80;
 8007f8c:	f880 222e 	strb.w	r2, [r0, #558]	; 0x22e
    int32_t exp = ((*val >> 23) & 255);
 8007f90:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    *(outbuffer++) = 0;
 8007f94:	f880 5227 	strb.w	r5, [r0, #551]	; 0x227
    *(outbuffer++) = 0;
 8007f98:	f880 5228 	strb.w	r5, [r0, #552]	; 0x228
    *(outbuffer++) = 0;
 8007f9c:	f880 5229 	strb.w	r5, [r0, #553]	; 0x229
    *(outbuffer++) = (sig << 5) & 0xff;
 8007fa0:	f880 622a 	strb.w	r6, [r0, #554]	; 0x22a
    *(outbuffer++) = (sig >> 3) & 0xff;
 8007fa4:	f880 422b 	strb.w	r4, [r0, #555]	; 0x22b
    if (exp != 0)
 8007fa8:	2a00      	cmp	r2, #0
 8007faa:	d049      	beq.n	8008040 <accel_handler+0x188>
      exp += 1023 - 127;
 8007fac:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8007fb0:	0114      	lsls	r4, r2, #4
 8007fb2:	b264      	sxtb	r4, r4
 8007fb4:	0912      	lsrs	r2, r2, #4
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007fb6:	f3c3 45c3 	ubfx	r5, r3, #19, #4
    if (f < 0)
 8007fba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007fbe:	432c      	orrs	r4, r5
    if (f < 0)
 8007fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    *(outbuffer++) = (sig << 5) & 0xff;
 8007fc4:	ea4f 1643 	mov.w	r6, r3, lsl #5
      *(outbuffer - 1) |= 0x80;
 8007fc8:	bf48      	it	mi
 8007fca:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8007fce:	f880 4235 	strb.w	r4, [r0, #565]	; 0x235
    *(outbuffer++) = (sig >> 3) & 0xff;
 8007fd2:	10dc      	asrs	r4, r3, #3
    *(outbuffer++) = (sig >> 11) & 0xff;
 8007fd4:	12db      	asrs	r3, r3, #11
    *(outbuffer++) = 0;
 8007fd6:	2500      	movs	r5, #0
    *(outbuffer++) = (sig >> 3) & 0xff;
 8007fd8:	f880 4233 	strb.w	r4, [r0, #563]	; 0x233
    *(outbuffer++) = (sig >> 11) & 0xff;
 8007fdc:	f880 3234 	strb.w	r3, [r0, #564]	; 0x234
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8007fe0:	f341 2407 	sbfx	r4, r1, #8, #8
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8007fe4:	23e7      	movs	r3, #231	; 0xe7
      *(outbuffer - 1) |= 0x80;
 8007fe6:	f880 2236 	strb.w	r2, [r0, #566]	; 0x236
    message_out[0] = 0xff;
 8007fea:	4a20      	ldr	r2, [pc, #128]	; (800806c <accel_handler+0x1b4>)
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8007fec:	f880 421e 	strb.w	r4, [r0, #542]	; 0x21e
    message_out[0] = 0xff;
 8007ff0:	f8c0 2218 	str.w	r2, [r0, #536]	; 0x218
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8007ff4:	f880 321c 	strb.w	r3, [r0, #540]	; 0x21c
    *(outbuffer++) = 0;
 8007ff8:	f880 522f 	strb.w	r5, [r0, #559]	; 0x22f
    *(outbuffer++) = 0;
 8007ffc:	f880 5230 	strb.w	r5, [r0, #560]	; 0x230
    *(outbuffer++) = 0;
 8008000:	f880 5231 	strb.w	r5, [r0, #561]	; 0x231
    *(outbuffer++) = (sig << 5) & 0xff;
 8008004:	f880 6232 	strb.w	r6, [r0, #562]	; 0x232
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8008008:	f880 121d 	strb.w	r1, [r0, #541]	; 0x21d
 800800c:	f500 7307 	add.w	r3, r0, #540	; 0x21c
 8008010:	f200 2436 	addw	r4, r0, #566	; 0x236
    int chk = 0;
 8008014:	2200      	movs	r2, #0
      chk += message_out[i];
 8008016:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 800801a:	42a3      	cmp	r3, r4
      chk += message_out[i];
 800801c:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
 800801e:	d1fa      	bne.n	8008016 <accel_handler+0x15e>
    message_out[l++] = 255 - (chk % 256);
 8008020:	43d2      	mvns	r2, r2
 8008022:	f880 2237 	strb.w	r2, [r0, #567]	; 0x237
 8008026:	2120      	movs	r1, #32
 8008028:	f500 7006 	add.w	r0, r0, #536	; 0x218
}
 800802c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008030:	f7fe bc84 	b.w	800693c <CDC_Transmit_FS>
      exp += 1023 - 127;
 8008034:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8008038:	0114      	lsls	r4, r2, #4
 800803a:	b264      	sxtb	r4, r4
 800803c:	0912      	lsrs	r2, r2, #4
 800803e:	e768      	b.n	8007f12 <accel_handler+0x5a>
    if (exp != 0)
 8008040:	4614      	mov	r4, r2
 8008042:	e7b8      	b.n	8007fb6 <accel_handler+0xfe>
 8008044:	4614      	mov	r4, r2
 8008046:	e78d      	b.n	8007f64 <accel_handler+0xac>
 8008048:	4623      	mov	r3, r4
 800804a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800804e:	4718      	bx	r3
 8008050:	200041f4 	.word	0x200041f4
 8008054:	20004200 	.word	0x20004200
 8008058:	200048ec 	.word	0x200048ec
 800805c:	200048f8 	.word	0x200048f8
 8008060:	20004bbc 	.word	0x20004bbc
 8008064:	08007619 	.word	0x08007619
 8008068:	20004214 	.word	0x20004214
 800806c:	0018feff 	.word	0x0018feff

08008070 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8008070:	b530      	push	{r4, r5, lr}
    publish(TopicInfo::ID_TIME, &t);
 8008072:	6801      	ldr	r1, [r0, #0]
 8008074:	4a17      	ldr	r2, [pc, #92]	; (80080d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv+0x64>)
 8008076:	680d      	ldr	r5, [r1, #0]
      data()
 8008078:	4b17      	ldr	r3, [pc, #92]	; (80080d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv+0x68>)
  void requestSyncTime()
 800807a:	b085      	sub	sp, #20
 800807c:	4295      	cmp	r5, r2
 800807e:	9301      	str	r3, [sp, #4]
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8008080:	f04f 0300 	mov.w	r3, #0
 8008084:	4604      	mov	r4, r0
 8008086:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800808a:	d11a      	bne.n	80080c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv+0x52>
    message_out[l++] = 255 - (chk % 256);
 800808c:	f06f 020a 	mvn.w	r2, #10
    message_out[0] = 0xff;
 8008090:	4812      	ldr	r0, [pc, #72]	; (80080dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv+0x6c>)
 8008092:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
 8008096:	f640 21f7 	movw	r1, #2807	; 0xaf7
 800809a:	f8a4 3224 	strh.w	r3, [r4, #548]	; 0x224
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800809e:	f884 3226 	strb.w	r3, [r4, #550]	; 0x226
 80080a2:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
 80080a6:	f8c4 121c 	str.w	r1, [r4, #540]	; 0x21c
    message_out[l++] = 255 - (chk % 256);
 80080aa:	f884 2227 	strb.w	r2, [r4, #551]	; 0x227
 80080ae:	2110      	movs	r1, #16
 80080b0:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80080b4:	f7fe fc42 	bl	800693c <CDC_Transmit_FS>
	}

	// Returns milliseconds since start of program
	unsigned long time(void)
	{
		return HAL_GetTick();
 80080b8:	f7f8 fa38 	bl	800052c <HAL_GetTick>
    rt_time = hardware_.time();
 80080bc:	60a0      	str	r0, [r4, #8]
  }
 80080be:	b005      	add	sp, #20
 80080c0:	bd30      	pop	{r4, r5, pc}
    publish(TopicInfo::ID_TIME, &t);
 80080c2:	aa01      	add	r2, sp, #4
 80080c4:	210a      	movs	r1, #10
 80080c6:	47a8      	blx	r5
 80080c8:	f7f8 fa30 	bl	800052c <HAL_GetTick>
    rt_time = hardware_.time();
 80080cc:	60a0      	str	r0, [r4, #8]
  }
 80080ce:	b005      	add	sp, #20
 80080d0:	bd30      	pop	{r4, r5, pc}
 80080d2:	bf00      	nop
 80080d4:	08007619 	.word	0x08007619
 80080d8:	08009778 	.word	0x08009778
 80080dc:	0008feff 	.word	0x0008feff

080080e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
  void negotiateTopics()
 80080e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      buffer_size(0)
 80080e4:	4bd1      	ldr	r3, [pc, #836]	; (800842c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x34c>)
 80080e6:	4ad2      	ldr	r2, [pc, #840]	; (8008430 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x350>)
 80080e8:	b08d      	sub	sp, #52	; 0x34
 80080ea:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80080ee:	9206      	str	r2, [sp, #24]
 80080f0:	2200      	movs	r2, #0
 80080f2:	4604      	mov	r4, r0
 80080f4:	f200 4914 	addw	r9, r0, #1044	; 0x414
 80080f8:	f500 688f 	add.w	r8, r0, #1144	; 0x478
 80080fc:	f8ad 201c 	strh.w	r2, [sp, #28]
 8008100:	920b      	str	r2, [sp, #44]	; 0x2c
 8008102:	930a      	str	r3, [sp, #40]	; 0x28
      if (publishers[i] != 0) // non-empty slot
 8008104:	f859 3f04 	ldr.w	r3, [r9, #4]!
 8008108:	2b00      	cmp	r3, #0
 800810a:	f000 80ae 	beq.w	800826a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18a>
        ti.topic_id = publishers[i]->id_;
 800810e:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8008112:	6805      	ldr	r5, [r0, #0]
        ti.topic_name = (char *) publishers[i]->topic_;
 8008114:	681a      	ldr	r2, [r3, #0]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8008116:	68ab      	ldr	r3, [r5, #8]
        ti.topic_id = publishers[i]->id_;
 8008118:	f8ad 101c 	strh.w	r1, [sp, #28]
        ti.topic_name = (char *) publishers[i]->topic_;
 800811c:	9208      	str	r2, [sp, #32]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800811e:	4798      	blx	r3
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8008120:	f8d9 3000 	ldr.w	r3, [r9]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8008124:	9009      	str	r0, [sp, #36]	; 0x24
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8008126:	6858      	ldr	r0, [r3, #4]
 8008128:	6803      	ldr	r3, [r0, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	4798      	blx	r3
        publish(publishers[i]->getEndpointType(), &ti);
 800812e:	6823      	ldr	r3, [r4, #0]
 8008130:	f8d9 1000 	ldr.w	r1, [r9]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f8d1 a010 	ldr.w	sl, [r1, #16]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800813a:	900a      	str	r0, [sp, #40]	; 0x28
        ti.buffer_size = OUTPUT_SIZE;
 800813c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008140:	920b      	str	r2, [sp, #44]	; 0x2c
 8008142:	4abc      	ldr	r2, [pc, #752]	; (8008434 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x354>)
 8008144:	4293      	cmp	r3, r2
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8008146:	4683      	mov	fp, r0
 8008148:	f040 8167 	bne.w	800841a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x33a>
    if (id >= 100 && !configured_)
 800814c:	f1ba 0f63 	cmp.w	sl, #99	; 0x63
 8008150:	dd04      	ble.n	800815c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x7c>
 8008152:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 8008156:	2b00      	cmp	r3, #0
 8008158:	f000 8084 	beq.w	8008264 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x184>
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800815c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8008160:	9e08      	ldr	r6, [sp, #32]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8008162:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8008166:	0a1b      	lsrs	r3, r3, #8
 8008168:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
      uint32_t length_topic_name = strlen(this->topic_name);
 800816c:	4630      	mov	r0, r6
 800816e:	f7f8 f82f 	bl	80001d0 <strlen>
 8008172:	4605      	mov	r5, r0
      arr[i] = (var >> (8 * i));
 8008174:	0e2b      	lsrs	r3, r5, #24
 8008176:	0c2a      	lsrs	r2, r5, #16
 8008178:	0a00      	lsrs	r0, r0, #8
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800817a:	4631      	mov	r1, r6
 800817c:	f884 3224 	strb.w	r3, [r4, #548]	; 0x224
 8008180:	f884 5221 	strb.w	r5, [r4, #545]	; 0x221
 8008184:	f884 0222 	strb.w	r0, [r4, #546]	; 0x222
 8008188:	f884 2223 	strb.w	r2, [r4, #547]	; 0x223
 800818c:	f204 2025 	addw	r0, r4, #549	; 0x225
 8008190:	462a      	mov	r2, r5
 8008192:	f001 f953 	bl	800943c <memcpy>
      uint32_t length_message_type = strlen(this->message_type);
 8008196:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008198:	4638      	mov	r0, r7
 800819a:	f7f8 f819 	bl	80001d0 <strlen>
    int l = msg->serialize(message_out + 7);
 800819e:	f204 261f 	addw	r6, r4, #543	; 0x21f
 80081a2:	1973      	adds	r3, r6, r5
      offset += length_topic_name;
 80081a4:	f105 0c06 	add.w	ip, r5, #6
      uint32_t length_message_type = strlen(this->message_type);
 80081a8:	4602      	mov	r2, r0
 80081aa:	0a00      	lsrs	r0, r0, #8
 80081ac:	f806 200c 	strb.w	r2, [r6, ip]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80081b0:	4639      	mov	r1, r7
 80081b2:	71d8      	strb	r0, [r3, #7]
 80081b4:	0c17      	lsrs	r7, r2, #16
 80081b6:	0e10      	lsrs	r0, r2, #24
      offset += 4;
 80081b8:	350a      	adds	r5, #10
 80081ba:	721f      	strb	r7, [r3, #8]
 80081bc:	7258      	strb	r0, [r3, #9]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80081be:	1970      	adds	r0, r6, r5
      offset += length_message_type;
 80081c0:	4415      	add	r5, r2
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80081c2:	f001 f93b 	bl	800943c <memcpy>
      uint32_t length_md5sum = strlen(this->md5sum);
 80081c6:	4658      	mov	r0, fp
 80081c8:	f7f8 f802 	bl	80001d0 <strlen>
 80081cc:	1972      	adds	r2, r6, r5
 80081ce:	5570      	strb	r0, [r6, r5]
      offset += 4;
 80081d0:	1d2b      	adds	r3, r5, #4
 80081d2:	ea4f 4c10 	mov.w	ip, r0, lsr #16
      uint32_t length_md5sum = strlen(this->md5sum);
 80081d6:	4607      	mov	r7, r0
 80081d8:	ea4f 2e10 	mov.w	lr, r0, lsr #8
 80081dc:	0e00      	lsrs	r0, r0, #24
 80081de:	f882 c002 	strb.w	ip, [r2, #2]
 80081e2:	70d0      	strb	r0, [r2, #3]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80081e4:	4659      	mov	r1, fp
 80081e6:	f882 e001 	strb.w	lr, [r2, #1]
 80081ea:	18f0      	adds	r0, r6, r3
 80081ec:	463a      	mov	r2, r7
 80081ee:	9301      	str	r3, [sp, #4]
 80081f0:	f001 f924 	bl	800943c <memcpy>
      offset += length_md5sum;
 80081f4:	9b01      	ldr	r3, [sp, #4]
 80081f6:	441f      	add	r7, r3
      offset += sizeof(this->buffer_size);
 80081f8:	1d39      	adds	r1, r7, #4
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80081fa:	b2c8      	uxtb	r0, r1
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80081fc:	f3c1 2307 	ubfx	r3, r1, #8, #8
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8008200:	18c2      	adds	r2, r0, r3
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8008202:	f44f 7500 	mov.w	r5, #512	; 0x200
 8008206:	43d2      	mvns	r2, r2
 8008208:	51f5      	str	r5, [r6, r7]
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800820a:	f34a 2c07 	sbfx	ip, sl, #8, #8
    message_out[0] = 0xff;
 800820e:	f64f 65ff 	movw	r5, #65279	; 0xfeff
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8008212:	f884 221c 	strb.w	r2, [r4, #540]	; 0x21c
    for (int i = 5; i < l + 7; i++)
 8008216:	1c4a      	adds	r2, r1, #1
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8008218:	f884 a21d 	strb.w	sl, [r4, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800821c:	f884 c21e 	strb.w	ip, [r4, #542]	; 0x21e
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8008220:	f884 021a 	strb.w	r0, [r4, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8008224:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
    message_out[0] = 0xff;
 8008228:	f8a4 5218 	strh.w	r5, [r4, #536]	; 0x218
    for (int i = 5; i < l + 7; i++)
 800822c:	f2c0 80fc 	blt.w	8008428 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x348>
 8008230:	f204 2522 	addw	r5, r4, #546	; 0x222
 8008234:	443d      	add	r5, r7
 8008236:	f504 7307 	add.w	r3, r4, #540	; 0x21c
    int chk = 0;
 800823a:	2200      	movs	r2, #0
      chk += message_out[i];
 800823c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 8008240:	42ab      	cmp	r3, r5
      chk += message_out[i];
 8008242:	4402      	add	r2, r0
    for (int i = 5; i < l + 7; i++)
 8008244:	d1fa      	bne.n	800823c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x15c>
 8008246:	43d2      	mvns	r2, r2
 8008248:	b2d2      	uxtb	r2, r2
    message_out[l++] = 255 - (chk % 256);
 800824a:	1863      	adds	r3, r4, r1
 800824c:	3108      	adds	r1, #8
    if (l <= OUTPUT_SIZE)
 800824e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    message_out[l++] = 255 - (chk % 256);
 8008252:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
    if (l <= OUTPUT_SIZE)
 8008256:	f300 80ef 	bgt.w	8008438 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x358>
		CDC_Transmit_FS(data, length);
 800825a:	b289      	uxth	r1, r1
 800825c:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8008260:	f7fe fb6c 	bl	800693c <CDC_Transmit_FS>
        HAL_Delay(1);
 8008264:	2001      	movs	r0, #1
 8008266:	f7f8 f967 	bl	8000538 <HAL_Delay>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800826a:	45c8      	cmp	r8, r9
 800826c:	f47f af4a 	bne.w	8008104 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x24>
 8008270:	f204 4bdc 	addw	fp, r4, #1244	; 0x4dc
      if (subscribers[i] != 0) // non-empty slot
 8008274:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8008278:	2800      	cmp	r0, #0
 800827a:	f000 80c0 	beq.w	80083fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x31e>
        ti.topic_id = subscribers[i]->id_;
 800827e:	e9d0 3100 	ldrd	r3, r1, [r0]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8008282:	6882      	ldr	r2, [r0, #8]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8008284:	689b      	ldr	r3, [r3, #8]
        ti.topic_id = subscribers[i]->id_;
 8008286:	f8ad 101c 	strh.w	r1, [sp, #28]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800828a:	9208      	str	r2, [sp, #32]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800828c:	4798      	blx	r3
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800828e:	f8d8 3000 	ldr.w	r3, [r8]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8008292:	9009      	str	r0, [sp, #36]	; 0x24
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	4618      	mov	r0, r3
 8008298:	68d3      	ldr	r3, [r2, #12]
 800829a:	4798      	blx	r3
        publish(subscribers[i]->getEndpointType(), &ti);
 800829c:	f8d8 3000 	ldr.w	r3, [r8]
 80082a0:	6821      	ldr	r1, [r4, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	680d      	ldr	r5, [r1, #0]
 80082a6:	6852      	ldr	r2, [r2, #4]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80082a8:	900a      	str	r0, [sp, #40]	; 0x28
        ti.buffer_size = INPUT_SIZE;
 80082aa:	f44f 7100 	mov.w	r1, #512	; 0x200
        publish(subscribers[i]->getEndpointType(), &ti);
 80082ae:	4618      	mov	r0, r3
        ti.buffer_size = INPUT_SIZE;
 80082b0:	910b      	str	r1, [sp, #44]	; 0x2c
        publish(subscribers[i]->getEndpointType(), &ti);
 80082b2:	4790      	blx	r2
 80082b4:	4b5f      	ldr	r3, [pc, #380]	; (8008434 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x354>)
 80082b6:	429d      	cmp	r5, r3
 80082b8:	4607      	mov	r7, r0
 80082ba:	f040 80a9 	bne.w	8008410 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x330>
    if (id >= 100 && !configured_)
 80082be:	2863      	cmp	r0, #99	; 0x63
 80082c0:	dd04      	ble.n	80082cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ec>
 80082c2:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f000 8096 	beq.w	80083f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x318>
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80082cc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80082d0:	9e08      	ldr	r6, [sp, #32]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80082d2:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80082d6:	0a1b      	lsrs	r3, r3, #8
 80082d8:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
      uint32_t length_topic_name = strlen(this->topic_name);
 80082dc:	4630      	mov	r0, r6
 80082de:	f7f7 ff77 	bl	80001d0 <strlen>
 80082e2:	4605      	mov	r5, r0
 80082e4:	0e2b      	lsrs	r3, r5, #24
 80082e6:	0c2a      	lsrs	r2, r5, #16
 80082e8:	0a00      	lsrs	r0, r0, #8
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80082ea:	4631      	mov	r1, r6
 80082ec:	f884 3224 	strb.w	r3, [r4, #548]	; 0x224
 80082f0:	f884 5221 	strb.w	r5, [r4, #545]	; 0x221
 80082f4:	f884 0222 	strb.w	r0, [r4, #546]	; 0x222
 80082f8:	f884 2223 	strb.w	r2, [r4, #547]	; 0x223
 80082fc:	f204 2025 	addw	r0, r4, #549	; 0x225
 8008300:	462a      	mov	r2, r5
 8008302:	f001 f89b 	bl	800943c <memcpy>
      uint32_t length_message_type = strlen(this->message_type);
 8008306:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800830a:	4650      	mov	r0, sl
 800830c:	f7f7 ff60 	bl	80001d0 <strlen>
    int l = msg->serialize(message_out + 7);
 8008310:	f204 261f 	addw	r6, r4, #543	; 0x21f
 8008314:	1973      	adds	r3, r6, r5
 8008316:	4681      	mov	r9, r0
      offset += length_topic_name;
 8008318:	f105 0c06 	add.w	ip, r5, #6
 800831c:	ea4f 2e10 	mov.w	lr, r0, lsr #8
      offset += 4;
 8008320:	350a      	adds	r5, #10
 8008322:	ea4f 6219 	mov.w	r2, r9, lsr #24
 8008326:	0c00      	lsrs	r0, r0, #16
 8008328:	f806 900c 	strb.w	r9, [r6, ip]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800832c:	4651      	mov	r1, sl
 800832e:	f883 e007 	strb.w	lr, [r3, #7]
 8008332:	7218      	strb	r0, [r3, #8]
 8008334:	725a      	strb	r2, [r3, #9]
 8008336:	1970      	adds	r0, r6, r5
 8008338:	464a      	mov	r2, r9
 800833a:	f001 f87f 	bl	800943c <memcpy>
      uint32_t length_md5sum = strlen(this->md5sum);
 800833e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008340:	9101      	str	r1, [sp, #4]
 8008342:	4608      	mov	r0, r1
 8008344:	f7f7 ff44 	bl	80001d0 <strlen>
      offset += length_message_type;
 8008348:	44a9      	add	r9, r5
 800834a:	eb06 0309 	add.w	r3, r6, r9
      uint32_t length_md5sum = strlen(this->md5sum);
 800834e:	4682      	mov	sl, r0
      offset += 4;
 8008350:	f109 0504 	add.w	r5, r9, #4
 8008354:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8008358:	ea4f 621a 	mov.w	r2, sl, lsr #24
 800835c:	0c00      	lsrs	r0, r0, #16
 800835e:	f806 a009 	strb.w	sl, [r6, r9]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8008362:	9901      	ldr	r1, [sp, #4]
 8008364:	f883 c001 	strb.w	ip, [r3, #1]
 8008368:	7098      	strb	r0, [r3, #2]
 800836a:	70da      	strb	r2, [r3, #3]
 800836c:	1970      	adds	r0, r6, r5
 800836e:	4652      	mov	r2, sl
 8008370:	f001 f864 	bl	800943c <memcpy>
      offset += length_md5sum;
 8008374:	eb0a 0005 	add.w	r0, sl, r5
      u_buffer_size.real = this->buffer_size;
 8008378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800837a:	5433      	strb	r3, [r6, r0]
      offset += sizeof(this->buffer_size);
 800837c:	1d01      	adds	r1, r0, #4
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800837e:	4406      	add	r6, r0
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8008380:	fa5f fc81 	uxtb.w	ip, r1
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8008384:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8008388:	ea4f 2913 	mov.w	r9, r3, lsr #8
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800838c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8008390:	eb0c 0205 	add.w	r2, ip, r5
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8008394:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8008396:	f886 9001 	strb.w	r9, [r6, #1]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800839a:	f886 e002 	strb.w	lr, [r6, #2]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800839e:	70f3      	strb	r3, [r6, #3]
 80083a0:	43d2      	mvns	r2, r2
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80083a2:	f347 2907 	sbfx	r9, r7, #8, #8
    message_out[0] = 0xff;
 80083a6:	f64f 6eff 	movw	lr, #65279	; 0xfeff
    for (int i = 5; i < l + 7; i++)
 80083aa:	1c4b      	adds	r3, r1, #1
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80083ac:	f884 221c 	strb.w	r2, [r4, #540]	; 0x21c
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80083b0:	f884 c21a 	strb.w	ip, [r4, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80083b4:	f884 521b 	strb.w	r5, [r4, #539]	; 0x21b
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80083b8:	f884 721d 	strb.w	r7, [r4, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80083bc:	f884 921e 	strb.w	r9, [r4, #542]	; 0x21e
    message_out[0] = 0xff;
 80083c0:	f8a4 e218 	strh.w	lr, [r4, #536]	; 0x218
    for (int i = 5; i < l + 7; i++)
 80083c4:	db2e      	blt.n	8008424 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x344>
 80083c6:	f204 2522 	addw	r5, r4, #546	; 0x222
 80083ca:	4405      	add	r5, r0
 80083cc:	f504 7307 	add.w	r3, r4, #540	; 0x21c
    int chk = 0;
 80083d0:	2200      	movs	r2, #0
      chk += message_out[i];
 80083d2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 80083d6:	429d      	cmp	r5, r3
      chk += message_out[i];
 80083d8:	4402      	add	r2, r0
    for (int i = 5; i < l + 7; i++)
 80083da:	d1fa      	bne.n	80083d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x2f2>
 80083dc:	43d2      	mvns	r2, r2
 80083de:	b2d2      	uxtb	r2, r2
    message_out[l++] = 255 - (chk % 256);
 80083e0:	1863      	adds	r3, r4, r1
 80083e2:	3108      	adds	r1, #8
    if (l <= OUTPUT_SIZE)
 80083e4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    message_out[l++] = 255 - (chk % 256);
 80083e8:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
    if (l <= OUTPUT_SIZE)
 80083ec:	dc66      	bgt.n	80084bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x3dc>
 80083ee:	b289      	uxth	r1, r1
 80083f0:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80083f4:	f7fe faa2 	bl	800693c <CDC_Transmit_FS>
        HAL_Delay(1);
 80083f8:	2001      	movs	r0, #1
 80083fa:	f7f8 f89d 	bl	8000538 <HAL_Delay>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80083fe:	45c3      	cmp	fp, r8
 8008400:	f47f af38 	bne.w	8008274 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x194>
    configured_ = true;
 8008404:	2301      	movs	r3, #1
 8008406:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
  }
 800840a:	b00d      	add	sp, #52	; 0x34
 800840c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        publish(subscribers[i]->getEndpointType(), &ti);
 8008410:	4601      	mov	r1, r0
 8008412:	aa06      	add	r2, sp, #24
 8008414:	4620      	mov	r0, r4
 8008416:	47a8      	blx	r5
 8008418:	e7ee      	b.n	80083f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x318>
        publish(publishers[i]->getEndpointType(), &ti);
 800841a:	4651      	mov	r1, sl
 800841c:	aa06      	add	r2, sp, #24
 800841e:	4620      	mov	r0, r4
 8008420:	4798      	blx	r3
 8008422:	e71f      	b.n	8008264 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x184>
    for (int i = 5; i < l + 7; i++)
 8008424:	22ff      	movs	r2, #255	; 0xff
 8008426:	e7db      	b.n	80083e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x300>
 8008428:	22ff      	movs	r2, #255	; 0xff
 800842a:	e70e      	b.n	800824a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16a>
 800842c:	08009a58 	.word	0x08009a58
 8008430:	08009790 	.word	0x08009790
 8008434:	08007619 	.word	0x08007619
    l.level = byte;
 8008438:	2203      	movs	r2, #3
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800843a:	6823      	ldr	r3, [r4, #0]
    l.level = byte;
 800843c:	f88d 2010 	strb.w	r2, [sp, #16]
 8008440:	4a44      	ldr	r2, [pc, #272]	; (8008554 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x474>)
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	9203      	str	r2, [sp, #12]
 8008446:	4a44      	ldr	r2, [pc, #272]	; (8008558 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x478>)
    l.msg = (char*)msg;
 8008448:	4d44      	ldr	r5, [pc, #272]	; (800855c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x47c>)
 800844a:	9505      	str	r5, [sp, #20]
 800844c:	4293      	cmp	r3, r2
 800844e:	d17c      	bne.n	800854a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x46a>
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8008450:	f643 0203 	movw	r2, #14339	; 0x3803
 8008454:	2300      	movs	r3, #0
      memcpy(outbuffer + offset, this->msg, length_msg);
 8008456:	f105 0c30 	add.w	ip, r5, #48	; 0x30
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800845a:	f8c4 221f 	str.w	r2, [r4, #543]	; 0x21f
 800845e:	f884 3223 	strb.w	r3, [r4, #547]	; 0x223
      memcpy(outbuffer + offset, this->msg, length_msg);
 8008462:	f504 7709 	add.w	r7, r4, #548	; 0x224
 8008466:	462e      	mov	r6, r5
 8008468:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800846a:	4566      	cmp	r6, ip
 800846c:	6038      	str	r0, [r7, #0]
 800846e:	6079      	str	r1, [r7, #4]
 8008470:	60ba      	str	r2, [r7, #8]
 8008472:	60fb      	str	r3, [r7, #12]
 8008474:	4635      	mov	r5, r6
 8008476:	f107 0710 	add.w	r7, r7, #16
 800847a:	d1f4      	bne.n	8008466 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x386>
 800847c:	cd03      	ldmia	r5!, {r0, r1}
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800847e:	2300      	movs	r3, #0
 8008480:	6079      	str	r1, [r7, #4]
    message_out[0] = 0xff;
 8008482:	f240 75c2 	movw	r5, #1986	; 0x7c2
 8008486:	4936      	ldr	r1, [pc, #216]	; (8008560 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x480>)
 8008488:	6038      	str	r0, [r7, #0]
    int chk = 0;
 800848a:	461a      	mov	r2, r3
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800848c:	f884 321e 	strb.w	r3, [r4, #542]	; 0x21e
    message_out[0] = 0xff;
 8008490:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
 8008494:	f8a4 521c 	strh.w	r5, [r4, #540]	; 0x21c
 8008498:	f504 7307 	add.w	r3, r4, #540	; 0x21c
 800849c:	f204 205b 	addw	r0, r4, #603	; 0x25b
      chk += message_out[i];
 80084a0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 80084a4:	4298      	cmp	r0, r3
      chk += message_out[i];
 80084a6:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
 80084a8:	d1fa      	bne.n	80084a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x3c0>
    message_out[l++] = 255 - (chk % 256);
 80084aa:	43d2      	mvns	r2, r2
 80084ac:	f884 225c 	strb.w	r2, [r4, #604]	; 0x25c
 80084b0:	2145      	movs	r1, #69	; 0x45
 80084b2:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80084b6:	f7fe fa41 	bl	800693c <CDC_Transmit_FS>
 80084ba:	e6d3      	b.n	8008264 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x184>
    l.level = byte;
 80084bc:	2203      	movs	r2, #3
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80084be:	6823      	ldr	r3, [r4, #0]
    l.level = byte;
 80084c0:	f88d 2010 	strb.w	r2, [sp, #16]
      msg("")
 80084c4:	4a23      	ldr	r2, [pc, #140]	; (8008554 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x474>)
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	9203      	str	r2, [sp, #12]
 80084ca:	4a23      	ldr	r2, [pc, #140]	; (8008558 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x478>)
    l.msg = (char*)msg;
 80084cc:	4d23      	ldr	r5, [pc, #140]	; (800855c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x47c>)
 80084ce:	9505      	str	r5, [sp, #20]
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d135      	bne.n	8008540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x460>
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80084d4:	f643 0203 	movw	r2, #14339	; 0x3803
 80084d8:	2300      	movs	r3, #0
      memcpy(outbuffer + offset, this->msg, length_msg);
 80084da:	f105 0c30 	add.w	ip, r5, #48	; 0x30
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80084de:	f8c4 221f 	str.w	r2, [r4, #543]	; 0x21f
 80084e2:	f884 3223 	strb.w	r3, [r4, #547]	; 0x223
      memcpy(outbuffer + offset, this->msg, length_msg);
 80084e6:	f504 7709 	add.w	r7, r4, #548	; 0x224
 80084ea:	462e      	mov	r6, r5
 80084ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80084ee:	4566      	cmp	r6, ip
 80084f0:	6038      	str	r0, [r7, #0]
 80084f2:	6079      	str	r1, [r7, #4]
 80084f4:	60ba      	str	r2, [r7, #8]
 80084f6:	60fb      	str	r3, [r7, #12]
 80084f8:	4635      	mov	r5, r6
 80084fa:	f107 0710 	add.w	r7, r7, #16
 80084fe:	d1f4      	bne.n	80084ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x40a>
 8008500:	cd03      	ldmia	r5!, {r0, r1}
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8008502:	2300      	movs	r3, #0
 8008504:	6079      	str	r1, [r7, #4]
    message_out[0] = 0xff;
 8008506:	f240 75c2 	movw	r5, #1986	; 0x7c2
 800850a:	4915      	ldr	r1, [pc, #84]	; (8008560 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x480>)
 800850c:	6038      	str	r0, [r7, #0]
    int chk = 0;
 800850e:	461a      	mov	r2, r3
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8008510:	f884 321e 	strb.w	r3, [r4, #542]	; 0x21e
    message_out[0] = 0xff;
 8008514:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
 8008518:	f8a4 521c 	strh.w	r5, [r4, #540]	; 0x21c
 800851c:	f504 7307 	add.w	r3, r4, #540	; 0x21c
 8008520:	f204 205b 	addw	r0, r4, #603	; 0x25b
      chk += message_out[i];
 8008524:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 8008528:	4298      	cmp	r0, r3
      chk += message_out[i];
 800852a:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
 800852c:	d1fa      	bne.n	8008524 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x444>
    message_out[l++] = 255 - (chk % 256);
 800852e:	43d2      	mvns	r2, r2
 8008530:	f884 225c 	strb.w	r2, [r4, #604]	; 0x25c
 8008534:	2145      	movs	r1, #69	; 0x45
 8008536:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800853a:	f7fe f9ff 	bl	800693c <CDC_Transmit_FS>
 800853e:	e75b      	b.n	80083f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x318>
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8008540:	aa03      	add	r2, sp, #12
 8008542:	2107      	movs	r1, #7
 8008544:	4620      	mov	r0, r4
 8008546:	4798      	blx	r3
 8008548:	e756      	b.n	80083f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x318>
 800854a:	aa03      	add	r2, sp, #12
 800854c:	2107      	movs	r1, #7
 800854e:	4620      	mov	r0, r4
 8008550:	4798      	blx	r3
 8008552:	e687      	b.n	8008264 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x184>
 8008554:	080097a8 	.word	0x080097a8
 8008558:	08007619 	.word	0x08007619
 800855c:	08009a20 	.word	0x08009a20
 8008560:	003dfeff 	.word	0x003dfeff

08008564 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8008564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008568:	4604      	mov	r4, r0
 800856a:	b08b      	sub	sp, #44	; 0x2c
		return HAL_GetTick();
 800856c:	f7f7 ffde 	bl	800052c <HAL_GetTick>
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8008570:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
 8008574:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8008578:	1ac3      	subs	r3, r0, r3
 800857a:	4293      	cmp	r3, r2
      configured_ = false;
 800857c:	bf84      	itt	hi
 800857e:	2300      	movhi	r3, #0
 8008580:	f884 34f4 	strbhi.w	r3, [r4, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8008584:	f8d4 34e0 	ldr.w	r3, [r4, #1248]	; 0x4e0
 8008588:	4607      	mov	r7, r0
 800858a:	b133      	cbz	r3, 800859a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      if (c_time > last_msg_timeout_time)
 800858c:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
 8008590:	4283      	cmp	r3, r0
        mode_ = MODE_FIRST_FF;
 8008592:	bf3c      	itt	cc
 8008594:	2300      	movcc	r3, #0
 8008596:	f8c4 34e0 	strcc.w	r3, [r4, #1248]	; 0x4e0
		r = ringbuffer_getchar(&rb, &ch);
 800859a:	4ebc      	ldr	r6, [pc, #752]	; (800888c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x328>)
 800859c:	f8df a2fc 	ldr.w	sl, [pc, #764]	; 800889c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x338>
    t.data.sec += offset / 1000;
 80085a0:	f8df b2fc 	ldr.w	fp, [pc, #764]	; 80088a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x33c>
      if (spin_timeout_ > 0)
 80085a4:	6963      	ldr	r3, [r4, #20]
 80085a6:	b12b      	cbz	r3, 80085b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x50>
		return HAL_GetTick();
 80085a8:	f7f7 ffc0 	bl	800052c <HAL_GetTick>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80085ac:	6963      	ldr	r3, [r4, #20]
 80085ae:	1bc0      	subs	r0, r0, r7
 80085b0:	4298      	cmp	r0, r3
 80085b2:	d828      	bhi.n	8008606 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xa2>
		uint8_t ch = -1;
 80085b4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80085b8:	23ff      	movs	r3, #255	; 0xff
 80085ba:	f808 3d0c 	strb.w	r3, [r8, #-12]!
		r = ringbuffer_getchar(&rb, &ch);
 80085be:	4630      	mov	r0, r6
 80085c0:	4641      	mov	r1, r8
 80085c2:	f000 feb9 	bl	8009338 <_Z18ringbuffer_getcharP10ringbufferPh>
		if (1 == r)
 80085c6:	2801      	cmp	r0, #1
 80085c8:	f040 80b6 	bne.w	8008738 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1d4>
      checksum_ += data;
 80085cc:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
			return ch;
 80085d0:	f89d 201c 	ldrb.w	r2, [sp, #28]
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80085d4:	f8d4 54e0 	ldr.w	r5, [r4, #1248]	; 0x4e0
      checksum_ += data;
 80085d8:	4413      	add	r3, r2
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80085da:	2d07      	cmp	r5, #7
      checksum_ += data;
 80085dc:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80085e0:	d016      	beq.n	8008610 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xac>
      else if (mode_ == MODE_FIRST_FF)
 80085e2:	bb3d      	cbnz	r5, 8008634 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xd0>
        if (data == 0xff)
 80085e4:	2aff      	cmp	r2, #255	; 0xff
 80085e6:	d15b      	bne.n	80086a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x13c>
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80085e8:	f107 0314 	add.w	r3, r7, #20
 80085ec:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
      if (spin_timeout_ > 0)
 80085f0:	6963      	ldr	r3, [r4, #20]
          mode_++;
 80085f2:	f8c4 04e0 	str.w	r0, [r4, #1248]	; 0x4e0
      if (spin_timeout_ > 0)
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d0dc      	beq.n	80085b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x50>
		return HAL_GetTick();
 80085fa:	f7f7 ff97 	bl	800052c <HAL_GetTick>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80085fe:	6963      	ldr	r3, [r4, #20]
 8008600:	1bc0      	subs	r0, r0, r7
 8008602:	4298      	cmp	r0, r3
 8008604:	d9d6      	bls.n	80085b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x50>
          return SPIN_TIMEOUT;
 8008606:	f06f 0001 	mvn.w	r0, #1
  }
 800860a:	b00b      	add	sp, #44	; 0x2c
 800860c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        message_in[index_++] = data;
 8008610:	f8d4 34ec 	ldr.w	r3, [r4, #1260]	; 0x4ec
 8008614:	18e1      	adds	r1, r4, r3
 8008616:	3301      	adds	r3, #1
 8008618:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
 800861c:	760a      	strb	r2, [r1, #24]
        bytes_--;
 800861e:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
 8008622:	3b01      	subs	r3, #1
 8008624:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1bb      	bne.n	80085a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
          mode_ = MODE_MSG_CHECKSUM;
 800862c:	2308      	movs	r3, #8
 800862e:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 8008632:	e7b7      	b.n	80085a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
      else if (mode_ == MODE_PROTOCOL_VER)
 8008634:	2d01      	cmp	r5, #1
 8008636:	d040      	beq.n	80086ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x156>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8008638:	2d02      	cmp	r5, #2
 800863a:	d068      	beq.n	800870e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1aa>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800863c:	2d03      	cmp	r5, #3
 800863e:	d071      	beq.n	8008724 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1c0>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8008640:	2d04      	cmp	r5, #4
 8008642:	f000 809c 	beq.w	800877e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8008646:	2d05      	cmp	r5, #5
 8008648:	f000 80a5 	beq.w	8008796 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x232>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800864c:	2d06      	cmp	r5, #6
 800864e:	f000 8087 	beq.w	8008760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1fc>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8008652:	2d08      	cmp	r5, #8
 8008654:	d1a6      	bne.n	80085a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
        if ((checksum_ % 256) == 255)
 8008656:	425a      	negs	r2, r3
 8008658:	b2d2      	uxtb	r2, r2
 800865a:	b2db      	uxtb	r3, r3
 800865c:	bf58      	it	pl
 800865e:	4253      	negpl	r3, r2
 8008660:	2bff      	cmp	r3, #255	; 0xff
        mode_ = MODE_FIRST_FF;
 8008662:	f04f 0200 	mov.w	r2, #0
 8008666:	f8c4 24e0 	str.w	r2, [r4, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 800866a:	d19b      	bne.n	80085a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800866c:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 8008670:	2b00      	cmp	r3, #0
 8008672:	f000 80c7 	beq.w	8008804 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2a0>
          else if (topic_ == TopicInfo::ID_TIME)
 8008676:	2b0a      	cmp	r3, #10
 8008678:	f000 80d9 	beq.w	800882e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ca>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800867c:	2b06      	cmp	r3, #6
 800867e:	f000 8113 	beq.w	80088a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x344>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8008682:	2b0b      	cmp	r3, #11
 8008684:	f000 80d0 	beq.w	8008828 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c4>
            if (subscribers[topic_ - 100])
 8008688:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800868c:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008690:	2800      	cmp	r0, #0
 8008692:	d087      	beq.n	80085a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
              subscribers[topic_ - 100]->callback(message_in);
 8008694:	6803      	ldr	r3, [r0, #0]
 8008696:	f104 0118 	add.w	r1, r4, #24
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4798      	blx	r3
 800869e:	e781      	b.n	80085a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
 80086a0:	f7f7 ff44 	bl	800052c <HAL_GetTick>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80086a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80086a8:	1bc0      	subs	r0, r0, r7
 80086aa:	4298      	cmp	r0, r3
 80086ac:	f67f af7a 	bls.w	80085a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
          configured_ = false;
 80086b0:	f884 54f4 	strb.w	r5, [r4, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 80086b4:	f06f 0001 	mvn.w	r0, #1
 80086b8:	e7a7      	b.n	800860a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xa6>
        if (data == PROTOCOL_VER)
 80086ba:	2afe      	cmp	r2, #254	; 0xfe
 80086bc:	d04c      	beq.n	8008758 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f4>
          if (configured_ == false)
 80086be:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
          mode_ = MODE_FIRST_FF;
 80086c2:	2200      	movs	r2, #0
 80086c4:	f8c4 24e0 	str.w	r2, [r4, #1248]	; 0x4e0
          if (configured_ == false)
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	f47f af6b 	bne.w	80085a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
    publish(TopicInfo::ID_TIME, &t);
 80086ce:	6821      	ldr	r1, [r4, #0]
 80086d0:	4a6f      	ldr	r2, [pc, #444]	; (8008890 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32c>)
 80086d2:	680d      	ldr	r5, [r1, #0]
      data()
 80086d4:	496f      	ldr	r1, [pc, #444]	; (8008894 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>)
 80086d6:	9107      	str	r1, [sp, #28]
 80086d8:	4295      	cmp	r5, r2
 80086da:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80086de:	f040 808c 	bne.w	80087fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x296>
    message_out[0] = 0xff;
 80086e2:	496d      	ldr	r1, [pc, #436]	; (8008898 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x334>)
 80086e4:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
 80086e8:	f640 22f7 	movw	r2, #2807	; 0xaf7
 80086ec:	f04f 4375 	mov.w	r3, #4110417920	; 0xf5000000
 80086f0:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
 80086f4:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
 80086f8:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
		CDC_Transmit_FS(data, length);
 80086fc:	2110      	movs	r1, #16
 80086fe:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8008702:	f7fe f91b 	bl	800693c <CDC_Transmit_FS>
		return HAL_GetTick();
 8008706:	f7f7 ff11 	bl	800052c <HAL_GetTick>
    rt_time = hardware_.time();
 800870a:	60a0      	str	r0, [r4, #8]
 800870c:	e74a      	b.n	80085a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
        index_ = 0;
 800870e:	2100      	movs	r1, #0
        mode_++;
 8008710:	2303      	movs	r3, #3
        bytes_ = data;
 8008712:	f8c4 24e4 	str.w	r2, [r4, #1252]	; 0x4e4
        checksum_ = data;               /* first byte for calculating size checksum */
 8008716:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
        index_ = 0;
 800871a:	f8c4 14ec 	str.w	r1, [r4, #1260]	; 0x4ec
        mode_++;
 800871e:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 8008722:	e73f      	b.n	80085a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
        bytes_ += data << 8;
 8008724:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
 8008728:	eb03 2202 	add.w	r2, r3, r2, lsl #8
        mode_++;
 800872c:	2304      	movs	r3, #4
        bytes_ += data << 8;
 800872e:	f8c4 24e4 	str.w	r2, [r4, #1252]	; 0x4e4
        mode_++;
 8008732:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 8008736:	e735      	b.n	80085a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8008738:	f894 04f4 	ldrb.w	r0, [r4, #1268]	; 0x4f4
 800873c:	2800      	cmp	r0, #0
 800873e:	f43f af64 	beq.w	800860a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xa6>
 8008742:	f8d4 34f8 	ldr.w	r3, [r4, #1272]	; 0x4f8
 8008746:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800874a:	1afb      	subs	r3, r7, r3
 800874c:	4293      	cmp	r3, r2
 800874e:	d82a      	bhi.n	80087a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
    return SPIN_OK;
 8008750:	2000      	movs	r0, #0
  }
 8008752:	b00b      	add	sp, #44	; 0x2c
 8008754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          mode_++;
 8008758:	2302      	movs	r3, #2
 800875a:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 800875e:	e721      	b.n	80085a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
        topic_ += data << 8;
 8008760:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
        if (bytes_ == 0)
 8008764:	f8d4 14e4 	ldr.w	r1, [r4, #1252]	; 0x4e4
        topic_ += data << 8;
 8008768:	eb03 2302 	add.w	r3, r3, r2, lsl #8
        mode_ = MODE_MESSAGE;
 800876c:	2207      	movs	r2, #7
        topic_ += data << 8;
 800876e:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 8008772:	f8c4 24e0 	str.w	r2, [r4, #1248]	; 0x4e0
        if (bytes_ == 0)
 8008776:	2900      	cmp	r1, #0
 8008778:	f43f af58 	beq.w	800862c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xc8>
 800877c:	e712      	b.n	80085a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
        if ((checksum_ % 256) == 255)
 800877e:	425a      	negs	r2, r3
 8008780:	b2d2      	uxtb	r2, r2
 8008782:	b2db      	uxtb	r3, r3
 8008784:	bf58      	it	pl
 8008786:	4253      	negpl	r3, r2
 8008788:	2bff      	cmp	r3, #255	; 0xff
          mode_++;
 800878a:	bf0c      	ite	eq
 800878c:	2305      	moveq	r3, #5
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800878e:	2300      	movne	r3, #0
 8008790:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 8008794:	e706      	b.n	80085a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
        mode_++;
 8008796:	2306      	movs	r3, #6
        topic_ = data;
 8008798:	f8c4 24e8 	str.w	r2, [r4, #1256]	; 0x4e8
        checksum_ = data;               /* first byte included in checksum */
 800879c:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
        mode_++;
 80087a0:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 80087a4:	e6fe      	b.n	80085a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
    publish(TopicInfo::ID_TIME, &t);
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	4a39      	ldr	r2, [pc, #228]	; (8008890 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32c>)
 80087aa:	681d      	ldr	r5, [r3, #0]
 80087ac:	4b39      	ldr	r3, [pc, #228]	; (8008894 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>)
 80087ae:	9307      	str	r3, [sp, #28]
 80087b0:	4295      	cmp	r5, r2
 80087b2:	f04f 0300 	mov.w	r3, #0
 80087b6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80087ba:	d130      	bne.n	800881e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ba>
    message_out[0] = 0xff;
 80087bc:	4836      	ldr	r0, [pc, #216]	; (8008898 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x334>)
 80087be:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
 80087c2:	f640 21f7 	movw	r1, #2807	; 0xaf7
    message_out[l++] = 255 - (chk % 256);
 80087c6:	f06f 020a 	mvn.w	r2, #10
    message_out[0] = 0xff;
 80087ca:	f8c4 121c 	str.w	r1, [r4, #540]	; 0x21c
 80087ce:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
 80087d2:	f8a4 3224 	strh.w	r3, [r4, #548]	; 0x224
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80087d6:	f884 3226 	strb.w	r3, [r4, #550]	; 0x226
    message_out[l++] = 255 - (chk % 256);
 80087da:	f884 2227 	strb.w	r2, [r4, #551]	; 0x227
		CDC_Transmit_FS(data, length);
 80087de:	2110      	movs	r1, #16
 80087e0:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80087e4:	f7fe f8aa 	bl	800693c <CDC_Transmit_FS>
		return HAL_GetTick();
 80087e8:	f7f7 fea0 	bl	800052c <HAL_GetTick>
    rt_time = hardware_.time();
 80087ec:	60a0      	str	r0, [r4, #8]
    return SPIN_OK;
 80087ee:	2000      	movs	r0, #0
      last_sync_time = c_time;
 80087f0:	f8c4 74f8 	str.w	r7, [r4, #1272]	; 0x4f8
  }
 80087f4:	b00b      	add	sp, #44	; 0x2c
 80087f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    publish(TopicInfo::ID_TIME, &t);
 80087fa:	4642      	mov	r2, r8
 80087fc:	210a      	movs	r1, #10
 80087fe:	4620      	mov	r0, r4
 8008800:	47a8      	blx	r5
 8008802:	e780      	b.n	8008706 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a2>
            requestSyncTime();
 8008804:	4620      	mov	r0, r4
 8008806:	f7ff fc33 	bl	8008070 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800880a:	4620      	mov	r0, r4
 800880c:	f7ff fc68 	bl	80080e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8008810:	f8c4 74f8 	str.w	r7, [r4, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 8008814:	f8c4 74fc 	str.w	r7, [r4, #1276]	; 0x4fc
            return SPIN_ERR;
 8008818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800881c:	e6f5      	b.n	800860a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xa6>
    publish(TopicInfo::ID_TIME, &t);
 800881e:	4642      	mov	r2, r8
 8008820:	210a      	movs	r1, #10
 8008822:	4620      	mov	r0, r4
 8008824:	47a8      	blx	r5
 8008826:	e7df      	b.n	80087e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
            configured_ = false;
 8008828:	f884 24f4 	strb.w	r2, [r4, #1268]	; 0x4f4
 800882c:	e6ba      	b.n	80085a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
 800882e:	f7f7 fe7d 	bl	800052c <HAL_GetTick>
    uint32_t offset = hardware_.time() - rt_time;
 8008832:	68a5      	ldr	r5, [r4, #8]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008834:	f8d4 9018 	ldr.w	r9, [r4, #24]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008838:	f8d4 801c 	ldr.w	r8, [r4, #28]
 800883c:	1b45      	subs	r5, r0, r5
 800883e:	f7f7 fe75 	bl	800052c <HAL_GetTick>
    t.data.sec += offset / 1000;
 8008842:	fbab 3205 	umull	r3, r2, fp, r5
 8008846:	0992      	lsrs	r2, r2, #6
    t.data.nsec += (offset % 1000) * 1000000UL;
 8008848:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800884c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008850:	fb03 5112 	mls	r1, r3, r2, r5
 8008854:	f8df c04c 	ldr.w	ip, [pc, #76]	; 80088a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x340>
    sec_offset = new_now.sec - ms / 1000 - 1;
 8008858:	eb02 0509 	add.w	r5, r2, r9
 800885c:	fbab e200 	umull	lr, r2, fp, r0
 8008860:	0992      	lsrs	r2, r2, #6
 8008862:	44d0      	add	r8, sl
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8008864:	fb0c 8801 	mla	r8, ip, r1, r8
 8008868:	fb03 0312 	mls	r3, r3, r2, r0
 800886c:	4621      	mov	r1, r4
 800886e:	fb0c 8313 	mls	r3, ip, r3, r8
    sec_offset = new_now.sec - ms / 1000 - 1;
 8008872:	1aaa      	subs	r2, r5, r2
 8008874:	60e2      	str	r2, [r4, #12]
    normalizeSecNSec(sec_offset, nsec_offset);
 8008876:	f104 000c 	add.w	r0, r4, #12
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800887a:	f841 3f10 	str.w	r3, [r1, #16]!
    normalizeSecNSec(sec_offset, nsec_offset);
 800887e:	f7fe faaf 	bl	8006de0 <_ZN3ros16normalizeSecNSecERmS0_>
 8008882:	f7f7 fe53 	bl	800052c <HAL_GetTick>
    last_sync_receive_time = hardware_.time();
 8008886:	f8c4 04fc 	str.w	r0, [r4, #1276]	; 0x4fc
 800888a:	e68b      	b.n	80085a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
 800888c:	200047b0 	.word	0x200047b0
 8008890:	08007619 	.word	0x08007619
 8008894:	08009778 	.word	0x08009778
 8008898:	0008feff 	.word	0x0008feff
 800889c:	3b9aca00 	.word	0x3b9aca00
 80088a0:	10624dd3 	.word	0x10624dd3
 80088a4:	000f4240 	.word	0x000f4240
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80088a8:	f8d4 8018 	ldr.w	r8, [r4, #24]
      if(ints_lengthT > ints_length)
 80088ac:	f8d4 350c 	ldr.w	r3, [r4, #1292]	; 0x50c
 80088b0:	4598      	cmp	r8, r3
            req_param_resp.deserialize(message_in);
 80088b2:	f104 0918 	add.w	r9, r4, #24
 80088b6:	d907      	bls.n	80088c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x364>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80088b8:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80088bc:	f8d4 0514 	ldr.w	r0, [r4, #1300]	; 0x514
 80088c0:	f000 fe90 	bl	80095e4 <realloc>
 80088c4:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
      ints_length = ints_lengthT;
 80088c8:	f8c4 850c 	str.w	r8, [r4, #1292]	; 0x50c
      for( uint32_t i = 0; i < ints_length; i++){
 80088cc:	f1b8 0f00 	cmp.w	r8, #0
 80088d0:	f000 80e3 	beq.w	8008a9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x536>
 80088d4:	464a      	mov	r2, r9
      offset += sizeof(this->ints_length);
 80088d6:	2504      	movs	r5, #4
      for( uint32_t i = 0; i < ints_length; i++){
 80088d8:	2000      	movs	r0, #0
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80088da:	7993      	ldrb	r3, [r2, #6]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80088dc:	f892 e005 	ldrb.w	lr, [r2, #5]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80088e0:	7911      	ldrb	r1, [r2, #4]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80088e2:	f892 c007 	ldrb.w	ip, [r2, #7]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80088e6:	041b      	lsls	r3, r3, #16
 80088e8:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80088ec:	430b      	orrs	r3, r1
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80088ee:	f8d4 1514 	ldr.w	r1, [r4, #1300]	; 0x514
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80088f2:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
      this->st_ints = u_st_ints.real;
 80088f6:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80088fa:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
      for( uint32_t i = 0; i < ints_length; i++){
 80088fe:	f8d4 350c 	ldr.w	r3, [r4, #1292]	; 0x50c
 8008902:	3001      	adds	r0, #1
 8008904:	1d29      	adds	r1, r5, #4
 8008906:	4283      	cmp	r3, r0
 8008908:	46a8      	mov	r8, r5
 800890a:	f102 0204 	add.w	r2, r2, #4
 800890e:	460d      	mov	r5, r1
 8008910:	d8e3      	bhi.n	80088da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x376>
 8008912:	f108 0209 	add.w	r2, r8, #9
 8008916:	9201      	str	r2, [sp, #4]
 8008918:	f108 020a 	add.w	r2, r8, #10
 800891c:	f108 0308 	add.w	r3, r8, #8
 8008920:	9202      	str	r2, [sp, #8]
 8008922:	f108 020b 	add.w	r2, r8, #11
 8008926:	f108 0005 	add.w	r0, r8, #5
 800892a:	f108 0c06 	add.w	ip, r8, #6
 800892e:	f108 0e07 	add.w	lr, r8, #7
 8008932:	461d      	mov	r5, r3
 8008934:	9203      	str	r2, [sp, #12]
 8008936:	f108 080c 	add.w	r8, r8, #12
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800893a:	f819 c00c 	ldrb.w	ip, [r9, ip]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800893e:	f819 0000 	ldrb.w	r0, [r9, r0]
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8008942:	f819 2001 	ldrb.w	r2, [r9, r1]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8008946:	f819 e00e 	ldrb.w	lr, [r9, lr]
      if(floats_lengthT > floats_length)
 800894a:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800894e:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8008952:	ea4c 2c00 	orr.w	ip, ip, r0, lsl #8
 8008956:	ea4c 0202 	orr.w	r2, ip, r2
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800895a:	ea42 620e 	orr.w	r2, r2, lr, lsl #24
      if(floats_lengthT > floats_length)
 800895e:	428a      	cmp	r2, r1
 8008960:	d90a      	bls.n	8008978 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x414>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8008962:	0091      	lsls	r1, r2, #2
 8008964:	f8d4 0520 	ldr.w	r0, [r4, #1312]	; 0x520
 8008968:	9305      	str	r3, [sp, #20]
 800896a:	9204      	str	r2, [sp, #16]
 800896c:	f000 fe3a 	bl	80095e4 <realloc>
 8008970:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008974:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
      floats_length = floats_lengthT;
 8008978:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
      for( uint32_t i = 0; i < floats_length; i++){
 800897c:	b362      	cbz	r2, 80089d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x474>
 800897e:	eb09 0205 	add.w	r2, r9, r5
 8008982:	2000      	movs	r0, #0
 8008984:	f504 6ca1 	add.w	ip, r4, #1288	; 0x508
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008988:	7893      	ldrb	r3, [r2, #2]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800898a:	f892 8001 	ldrb.w	r8, [r2, #1]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800898e:	f892 e000 	ldrb.w	lr, [r2]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008992:	78d1      	ldrb	r1, [r2, #3]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008994:	041b      	lsls	r3, r3, #16
 8008996:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
 800899a:	ea43 030e 	orr.w	r3, r3, lr
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800899e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80089a2:	f8d4 1520 	ldr.w	r1, [r4, #1312]	; 0x520
      this->st_floats = u_st_floats.real;
 80089a6:	f8cc 3014 	str.w	r3, [ip, #20]
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80089aa:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
      for( uint32_t i = 0; i < floats_length; i++){
 80089ae:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
 80089b2:	3001      	adds	r0, #1
 80089b4:	1d2b      	adds	r3, r5, #4
 80089b6:	4281      	cmp	r1, r0
 80089b8:	46a8      	mov	r8, r5
 80089ba:	f102 0204 	add.w	r2, r2, #4
 80089be:	461d      	mov	r5, r3
 80089c0:	d8e2      	bhi.n	8008988 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x424>
 80089c2:	f108 0205 	add.w	r2, r8, #5
 80089c6:	9201      	str	r2, [sp, #4]
 80089c8:	f108 0206 	add.w	r2, r8, #6
 80089cc:	9202      	str	r2, [sp, #8]
 80089ce:	f108 0207 	add.w	r2, r8, #7
 80089d2:	9203      	str	r2, [sp, #12]
 80089d4:	f108 0808 	add.w	r8, r8, #8
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80089d8:	9a02      	ldr	r2, [sp, #8]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80089da:	9901      	ldr	r1, [sp, #4]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80089dc:	f819 2002 	ldrb.w	r2, [r9, r2]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80089e0:	f819 5001 	ldrb.w	r5, [r9, r1]
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80089e4:	f819 0003 	ldrb.w	r0, [r9, r3]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80089e8:	9b03      	ldr	r3, [sp, #12]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80089ea:	0412      	lsls	r2, r2, #16
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80089ec:	f819 1003 	ldrb.w	r1, [r9, r3]
      if(strings_lengthT > strings_length)
 80089f0:	f8d4 3524 	ldr.w	r3, [r4, #1316]	; 0x524
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80089f4:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
 80089f8:	4305      	orrs	r5, r0
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80089fa:	ea45 6501 	orr.w	r5, r5, r1, lsl #24
      if(strings_lengthT > strings_length)
 80089fe:	429d      	cmp	r5, r3
 8008a00:	d906      	bls.n	8008a10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8008a02:	00a9      	lsls	r1, r5, #2
 8008a04:	f8d4 052c 	ldr.w	r0, [r4, #1324]	; 0x52c
 8008a08:	f000 fdec 	bl	80095e4 <realloc>
 8008a0c:	f8c4 052c 	str.w	r0, [r4, #1324]	; 0x52c
      strings_length = strings_lengthT;
 8008a10:	f8c4 5524 	str.w	r5, [r4, #1316]	; 0x524
      for( uint32_t i = 0; i < strings_length; i++){
 8008a14:	2d00      	cmp	r5, #0
 8008a16:	d03c      	beq.n	8008a92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52e>
 8008a18:	2300      	movs	r3, #0
          inbuffer[k-1]=inbuffer[k];
 8008a1a:	9702      	str	r7, [sp, #8]
      var |= (arr[i] << (8 * i));
 8008a1c:	eb09 0208 	add.w	r2, r9, r8
 8008a20:	f819 1008 	ldrb.w	r1, [r9, r8]
 8008a24:	7855      	ldrb	r5, [r2, #1]
 8008a26:	7890      	ldrb	r0, [r2, #2]
 8008a28:	78d2      	ldrb	r2, [r2, #3]
 8008a2a:	022d      	lsls	r5, r5, #8
 8008a2c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8008a30:	430d      	orrs	r5, r1
      offset += 4;
 8008a32:	f108 0704 	add.w	r7, r8, #4
 8008a36:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8008a3a:	443d      	add	r5, r7
          inbuffer[k-1]=inbuffer[k];
 8008a3c:	f06f 0c03 	mvn.w	ip, #3
 8008a40:	ebac 0c08 	sub.w	ip, ip, r8
 8008a44:	f108 011c 	add.w	r1, r8, #28
 8008a48:	f108 001b 	add.w	r0, r8, #27
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8008a4c:	42bd      	cmp	r5, r7
          inbuffer[k-1]=inbuffer[k];
 8008a4e:	f108 0205 	add.w	r2, r8, #5
 8008a52:	44ac      	add	ip, r5
      offset += length_st_strings;
 8008a54:	46a8      	mov	r8, r5
 8008a56:	4421      	add	r1, r4
 8008a58:	4420      	add	r0, r4
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8008a5a:	d907      	bls.n	8008a6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x508>
 8008a5c:	4295      	cmp	r5, r2
 8008a5e:	bf2c      	ite	cs
 8008a60:	4662      	movcs	r2, ip
 8008a62:	2201      	movcc	r2, #1
 8008a64:	9301      	str	r3, [sp, #4]
 8008a66:	f000 fcf4 	bl	8009452 <memmove>
 8008a6a:	9b01      	ldr	r3, [sp, #4]
      inbuffer[offset+length_st_strings-1]=0;
 8008a6c:	444d      	add	r5, r9
 8008a6e:	f04f 0100 	mov.w	r1, #0
 8008a72:	f805 1c01 	strb.w	r1, [r5, #-1]
      this->st_strings = (char *)(inbuffer + offset-1);
 8008a76:	1e7a      	subs	r2, r7, #1
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8008a78:	f8d4 152c 	ldr.w	r1, [r4, #1324]	; 0x52c
      this->st_strings = (char *)(inbuffer + offset-1);
 8008a7c:	444a      	add	r2, r9
 8008a7e:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8008a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      for( uint32_t i = 0; i < strings_length; i++){
 8008a86:	f8d4 2524 	ldr.w	r2, [r4, #1316]	; 0x524
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d8c5      	bhi.n	8008a1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4b8>
 8008a90:	9f02      	ldr	r7, [sp, #8]
            param_recieved = true;
 8008a92:	2301      	movs	r3, #1
 8008a94:	f884 3504 	strb.w	r3, [r4, #1284]	; 0x504
 8008a98:	e584      	b.n	80085a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
      for( uint32_t i = 0; i < ints_length; i++){
 8008a9a:	230a      	movs	r3, #10
 8008a9c:	220b      	movs	r2, #11
 8008a9e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8008aa2:	2309      	movs	r3, #9
 8008aa4:	9301      	str	r3, [sp, #4]
 8008aa6:	f04f 080c 	mov.w	r8, #12
 8008aaa:	2308      	movs	r3, #8
 8008aac:	f04f 0e07 	mov.w	lr, #7
 8008ab0:	f04f 0c06 	mov.w	ip, #6
 8008ab4:	2005      	movs	r0, #5
 8008ab6:	2104      	movs	r1, #4
 8008ab8:	e73f      	b.n	800893a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d6>
 8008aba:	bf00      	nop

08008abc <spinOnce>:


extern "C" void spinOnce(void)
{
 8008abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//nh.spinOnce();
	  if (NBT_handler(&ros_nbt))
 8008ac0:	48ad      	ldr	r0, [pc, #692]	; (8008d78 <spinOnce+0x2bc>)
{
 8008ac2:	b089      	sub	sp, #36	; 0x24
	  if (NBT_handler(&ros_nbt))
 8008ac4:	f000 fbe6 	bl	8009294 <_Z11NBT_handlerP5nbt_t>
 8008ac8:	b910      	cbnz	r0, 8008ad0 <spinOnce+0x14>
	  {

		nh.spinOnce();

	  }
}
 8008aca:	b009      	add	sp, #36	; 0x24
 8008acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8008ad0:	4caa      	ldr	r4, [pc, #680]	; (8008d7c <spinOnce+0x2c0>)
 8008ad2:	f7f7 fd2b 	bl	800052c <HAL_GetTick>
 8008ad6:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
 8008ada:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8008ade:	1ac3      	subs	r3, r0, r3
 8008ae0:	4293      	cmp	r3, r2
      configured_ = false;
 8008ae2:	bf84      	itt	hi
 8008ae4:	2300      	movhi	r3, #0
 8008ae6:	f884 34f4 	strbhi.w	r3, [r4, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8008aea:	f8d4 34e0 	ldr.w	r3, [r4, #1248]	; 0x4e0
 8008aee:	4607      	mov	r7, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f040 80e5 	bne.w	8008cc0 <spinOnce+0x204>
              subscribers[topic_ - 100]->callback(message_in);
 8008af6:	f8df a298 	ldr.w	sl, [pc, #664]	; 8008d90 <spinOnce+0x2d4>
		r = ringbuffer_getchar(&rb, &ch);
 8008afa:	4ea1      	ldr	r6, [pc, #644]	; (8008d80 <spinOnce+0x2c4>)
 8008afc:	f8df 8294 	ldr.w	r8, [pc, #660]	; 8008d94 <spinOnce+0x2d8>
    t.data.sec += offset / 1000;
 8008b00:	f8df 9294 	ldr.w	r9, [pc, #660]	; 8008d98 <spinOnce+0x2dc>
    normalizeSecNSec(sec_offset, nsec_offset);
 8008b04:	f1aa 0b0c 	sub.w	fp, sl, #12
      if (spin_timeout_ > 0)
 8008b08:	6963      	ldr	r3, [r4, #20]
 8008b0a:	b12b      	cbz	r3, 8008b18 <spinOnce+0x5c>
		return HAL_GetTick();
 8008b0c:	f7f7 fd0e 	bl	800052c <HAL_GetTick>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8008b10:	6963      	ldr	r3, [r4, #20]
 8008b12:	1bc0      	subs	r0, r0, r7
 8008b14:	4298      	cmp	r0, r3
 8008b16:	d8d8      	bhi.n	8008aca <spinOnce+0xe>
		uint8_t ch = -1;
 8008b18:	a908      	add	r1, sp, #32
 8008b1a:	23ff      	movs	r3, #255	; 0xff
 8008b1c:	f801 3d01 	strb.w	r3, [r1, #-1]!
		r = ringbuffer_getchar(&rb, &ch);
 8008b20:	4630      	mov	r0, r6
 8008b22:	f000 fc09 	bl	8009338 <_Z18ringbuffer_getcharP10ringbufferPh>
		if (1 == r)
 8008b26:	2801      	cmp	r0, #1
 8008b28:	f040 809d 	bne.w	8008c66 <spinOnce+0x1aa>
      checksum_ += data;
 8008b2c:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
			return ch;
 8008b30:	f89d 201f 	ldrb.w	r2, [sp, #31]
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8008b34:	f8d4 54e0 	ldr.w	r5, [r4, #1248]	; 0x4e0
      checksum_ += data;
 8008b38:	4413      	add	r3, r2
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8008b3a:	2d07      	cmp	r5, #7
      checksum_ += data;
 8008b3c:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8008b40:	d00c      	beq.n	8008b5c <spinOnce+0xa0>
      else if (mode_ == MODE_FIRST_FF)
 8008b42:	b9ed      	cbnz	r5, 8008b80 <spinOnce+0xc4>
        if (data == 0xff)
 8008b44:	2aff      	cmp	r2, #255	; 0xff
 8008b46:	d150      	bne.n	8008bea <spinOnce+0x12e>
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8008b48:	f107 0314 	add.w	r3, r7, #20
 8008b4c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
      if (spin_timeout_ > 0)
 8008b50:	6963      	ldr	r3, [r4, #20]
          mode_++;
 8008b52:	f8c4 04e0 	str.w	r0, [r4, #1248]	; 0x4e0
      if (spin_timeout_ > 0)
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1d8      	bne.n	8008b0c <spinOnce+0x50>
 8008b5a:	e7dd      	b.n	8008b18 <spinOnce+0x5c>
        message_in[index_++] = data;
 8008b5c:	f8d4 14ec 	ldr.w	r1, [r4, #1260]	; 0x4ec
        bytes_--;
 8008b60:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
        message_in[index_++] = data;
 8008b64:	1860      	adds	r0, r4, r1
        bytes_--;
 8008b66:	3b01      	subs	r3, #1
        message_in[index_++] = data;
 8008b68:	3101      	adds	r1, #1
 8008b6a:	7602      	strb	r2, [r0, #24]
 8008b6c:	f8c4 14ec 	str.w	r1, [r4, #1260]	; 0x4ec
        bytes_--;
 8008b70:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d1c7      	bne.n	8008b08 <spinOnce+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8008b78:	2308      	movs	r3, #8
 8008b7a:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 8008b7e:	e7c3      	b.n	8008b08 <spinOnce+0x4c>
      else if (mode_ == MODE_PROTOCOL_VER)
 8008b80:	2d01      	cmp	r5, #1
 8008b82:	d03c      	beq.n	8008bfe <spinOnce+0x142>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8008b84:	2d02      	cmp	r5, #2
 8008b86:	d059      	beq.n	8008c3c <spinOnce+0x180>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8008b88:	2d03      	cmp	r5, #3
 8008b8a:	d062      	beq.n	8008c52 <spinOnce+0x196>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8008b8c:	2d04      	cmp	r5, #4
 8008b8e:	f000 80ae 	beq.w	8008cee <spinOnce+0x232>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8008b92:	2d05      	cmp	r5, #5
 8008b94:	f000 80b7 	beq.w	8008d06 <spinOnce+0x24a>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8008b98:	2d06      	cmp	r5, #6
 8008b9a:	f000 8099 	beq.w	8008cd0 <spinOnce+0x214>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8008b9e:	2d08      	cmp	r5, #8
 8008ba0:	d1b2      	bne.n	8008b08 <spinOnce+0x4c>
        if ((checksum_ % 256) == 255)
 8008ba2:	425a      	negs	r2, r3
 8008ba4:	b2d2      	uxtb	r2, r2
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	bf58      	it	pl
 8008baa:	4253      	negpl	r3, r2
 8008bac:	2bff      	cmp	r3, #255	; 0xff
        mode_ = MODE_FIRST_FF;
 8008bae:	f04f 0200 	mov.w	r2, #0
 8008bb2:	f8c4 24e0 	str.w	r2, [r4, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 8008bb6:	d1a7      	bne.n	8008b08 <spinOnce+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8008bb8:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f000 81fc 	beq.w	8008fba <spinOnce+0x4fe>
          else if (topic_ == TopicInfo::ID_TIME)
 8008bc2:	2b0a      	cmp	r3, #10
 8008bc4:	f000 80a7 	beq.w	8008d16 <spinOnce+0x25a>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8008bc8:	2b06      	cmp	r3, #6
 8008bca:	f000 80e9 	beq.w	8008da0 <spinOnce+0x2e4>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8008bce:	2b0b      	cmp	r3, #11
 8008bd0:	f000 80ce 	beq.w	8008d70 <spinOnce+0x2b4>
            if (subscribers[topic_ - 100])
 8008bd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008bd8:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	d093      	beq.n	8008b08 <spinOnce+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8008be0:	6803      	ldr	r3, [r0, #0]
 8008be2:	4651      	mov	r1, sl
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4798      	blx	r3
 8008be8:	e78e      	b.n	8008b08 <spinOnce+0x4c>
		return HAL_GetTick();
 8008bea:	f7f7 fc9f 	bl	800052c <HAL_GetTick>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8008bee:	f241 3388 	movw	r3, #5000	; 0x1388
 8008bf2:	1bc0      	subs	r0, r0, r7
 8008bf4:	4298      	cmp	r0, r3
 8008bf6:	d987      	bls.n	8008b08 <spinOnce+0x4c>
          configured_ = false;
 8008bf8:	f884 54f4 	strb.w	r5, [r4, #1268]	; 0x4f4
 8008bfc:	e765      	b.n	8008aca <spinOnce+0xe>
        if (data == PROTOCOL_VER)
 8008bfe:	2afe      	cmp	r2, #254	; 0xfe
 8008c00:	d05a      	beq.n	8008cb8 <spinOnce+0x1fc>
          if (configured_ == false)
 8008c02:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
          mode_ = MODE_FIRST_FF;
 8008c06:	2200      	movs	r2, #0
 8008c08:	f8c4 24e0 	str.w	r2, [r4, #1248]	; 0x4e0
          if (configured_ == false)
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f47f af7b 	bne.w	8008b08 <spinOnce+0x4c>
    message_out[0] = 0xff;
 8008c12:	495c      	ldr	r1, [pc, #368]	; (8008d84 <spinOnce+0x2c8>)
 8008c14:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
 8008c18:	f640 22f7 	movw	r2, #2807	; 0xaf7
 8008c1c:	f04f 4375 	mov.w	r3, #4110417920	; 0xf5000000
 8008c20:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
		CDC_Transmit_FS(data, length);
 8008c24:	4858      	ldr	r0, [pc, #352]	; (8008d88 <spinOnce+0x2cc>)
 8008c26:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
 8008c2a:	2110      	movs	r1, #16
 8008c2c:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
 8008c30:	f7fd fe84 	bl	800693c <CDC_Transmit_FS>
		return HAL_GetTick();
 8008c34:	f7f7 fc7a 	bl	800052c <HAL_GetTick>
    rt_time = hardware_.time();
 8008c38:	60a0      	str	r0, [r4, #8]
 8008c3a:	e765      	b.n	8008b08 <spinOnce+0x4c>
        index_ = 0;
 8008c3c:	2100      	movs	r1, #0
        mode_++;
 8008c3e:	2303      	movs	r3, #3
        bytes_ = data;
 8008c40:	f8c4 24e4 	str.w	r2, [r4, #1252]	; 0x4e4
        checksum_ = data;               /* first byte for calculating size checksum */
 8008c44:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
        index_ = 0;
 8008c48:	f8c4 14ec 	str.w	r1, [r4, #1260]	; 0x4ec
        mode_++;
 8008c4c:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 8008c50:	e75a      	b.n	8008b08 <spinOnce+0x4c>
        bytes_ += data << 8;
 8008c52:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
 8008c56:	eb03 2202 	add.w	r2, r3, r2, lsl #8
        mode_++;
 8008c5a:	2304      	movs	r3, #4
        bytes_ += data << 8;
 8008c5c:	f8c4 24e4 	str.w	r2, [r4, #1252]	; 0x4e4
        mode_++;
 8008c60:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 8008c64:	e750      	b.n	8008b08 <spinOnce+0x4c>
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8008c66:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f43f af2d 	beq.w	8008aca <spinOnce+0xe>
 8008c70:	f8d4 34f8 	ldr.w	r3, [r4, #1272]	; 0x4f8
 8008c74:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008c78:	1afb      	subs	r3, r7, r3
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	f67f af25 	bls.w	8008aca <spinOnce+0xe>
    message_out[0] = 0xff;
 8008c80:	4b40      	ldr	r3, [pc, #256]	; (8008d84 <spinOnce+0x2c8>)
 8008c82:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
 8008c86:	f640 21f7 	movw	r1, #2807	; 0xaf7
 8008c8a:	2300      	movs	r3, #0
    message_out[l++] = 255 - (chk % 256);
 8008c8c:	f06f 020a 	mvn.w	r2, #10
    message_out[0] = 0xff;
 8008c90:	f8c4 121c 	str.w	r1, [r4, #540]	; 0x21c
		CDC_Transmit_FS(data, length);
 8008c94:	483c      	ldr	r0, [pc, #240]	; (8008d88 <spinOnce+0x2cc>)
 8008c96:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
 8008c9a:	2110      	movs	r1, #16
 8008c9c:	f8a4 3224 	strh.w	r3, [r4, #548]	; 0x224
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8008ca0:	f884 3226 	strb.w	r3, [r4, #550]	; 0x226
    message_out[l++] = 255 - (chk % 256);
 8008ca4:	f884 2227 	strb.w	r2, [r4, #551]	; 0x227
 8008ca8:	f7fd fe48 	bl	800693c <CDC_Transmit_FS>
		return HAL_GetTick();
 8008cac:	f7f7 fc3e 	bl	800052c <HAL_GetTick>
      last_sync_time = c_time;
 8008cb0:	f8c4 74f8 	str.w	r7, [r4, #1272]	; 0x4f8
    rt_time = hardware_.time();
 8008cb4:	60a0      	str	r0, [r4, #8]
 8008cb6:	e708      	b.n	8008aca <spinOnce+0xe>
          mode_++;
 8008cb8:	2302      	movs	r3, #2
 8008cba:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 8008cbe:	e723      	b.n	8008b08 <spinOnce+0x4c>
      if (c_time > last_msg_timeout_time)
 8008cc0:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
 8008cc4:	4298      	cmp	r0, r3
        mode_ = MODE_FIRST_FF;
 8008cc6:	bf84      	itt	hi
 8008cc8:	2300      	movhi	r3, #0
 8008cca:	f8c4 34e0 	strhi.w	r3, [r4, #1248]	; 0x4e0
 8008cce:	e712      	b.n	8008af6 <spinOnce+0x3a>
        topic_ += data << 8;
 8008cd0:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
        if (bytes_ == 0)
 8008cd4:	f8d4 14e4 	ldr.w	r1, [r4, #1252]	; 0x4e4
        topic_ += data << 8;
 8008cd8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
        mode_ = MODE_MESSAGE;
 8008cdc:	2207      	movs	r2, #7
        topic_ += data << 8;
 8008cde:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 8008ce2:	f8c4 24e0 	str.w	r2, [r4, #1248]	; 0x4e0
        if (bytes_ == 0)
 8008ce6:	2900      	cmp	r1, #0
 8008ce8:	f43f af46 	beq.w	8008b78 <spinOnce+0xbc>
 8008cec:	e70c      	b.n	8008b08 <spinOnce+0x4c>
        if ((checksum_ % 256) == 255)
 8008cee:	425a      	negs	r2, r3
 8008cf0:	b2d2      	uxtb	r2, r2
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	bf58      	it	pl
 8008cf6:	4253      	negpl	r3, r2
 8008cf8:	2bff      	cmp	r3, #255	; 0xff
          mode_++;
 8008cfa:	bf0c      	ite	eq
 8008cfc:	2305      	moveq	r3, #5
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8008cfe:	2300      	movne	r3, #0
 8008d00:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 8008d04:	e700      	b.n	8008b08 <spinOnce+0x4c>
        mode_++;
 8008d06:	2306      	movs	r3, #6
        topic_ = data;
 8008d08:	f8c4 24e8 	str.w	r2, [r4, #1256]	; 0x4e8
        checksum_ = data;               /* first byte included in checksum */
 8008d0c:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
        mode_++;
 8008d10:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 8008d14:	e6f8      	b.n	8008b08 <spinOnce+0x4c>
 8008d16:	f7f7 fc09 	bl	800052c <HAL_GetTick>
 8008d1a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
    uint32_t offset = hardware_.time() - rt_time;
 8008d1e:	68a5      	ldr	r5, [r4, #8]
 8008d20:	4442      	add	r2, r8
 8008d22:	3901      	subs	r1, #1
 8008d24:	9200      	str	r2, [sp, #0]
 8008d26:	1b45      	subs	r5, r0, r5
 8008d28:	9101      	str	r1, [sp, #4]
 8008d2a:	f7f7 fbff 	bl	800052c <HAL_GetTick>
    t.data.sec += offset / 1000;
 8008d2e:	fba9 2305 	umull	r2, r3, r9, r5
    sec_offset = new_now.sec - ms / 1000 - 1;
 8008d32:	9901      	ldr	r1, [sp, #4]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8008d34:	f8df e064 	ldr.w	lr, [pc, #100]	; 8008d9c <spinOnce+0x2e0>
 8008d38:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    t.data.sec += offset / 1000;
 8008d3c:	099b      	lsrs	r3, r3, #6
    t.data.nsec += (offset % 1000) * 1000000UL;
 8008d3e:	fb0c 5513 	mls	r5, ip, r3, r5
    sec_offset = new_now.sec - ms / 1000 - 1;
 8008d42:	440b      	add	r3, r1
 8008d44:	fba9 2100 	umull	r2, r1, r9, r0
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8008d48:	9a00      	ldr	r2, [sp, #0]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8008d4a:	0989      	lsrs	r1, r1, #6
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8008d4c:	fb0e 2505 	mla	r5, lr, r5, r2
 8008d50:	fb0c 0211 	mls	r2, ip, r1, r0
    sec_offset = new_now.sec - ms / 1000 - 1;
 8008d54:	1a5b      	subs	r3, r3, r1
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8008d56:	fb0e 5212 	mls	r2, lr, r2, r5
    normalizeSecNSec(sec_offset, nsec_offset);
 8008d5a:	490c      	ldr	r1, [pc, #48]	; (8008d8c <spinOnce+0x2d0>)
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8008d5c:	6122      	str	r2, [r4, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8008d5e:	4658      	mov	r0, fp
    sec_offset = new_now.sec - ms / 1000 - 1;
 8008d60:	60e3      	str	r3, [r4, #12]
    normalizeSecNSec(sec_offset, nsec_offset);
 8008d62:	f7fe f83d 	bl	8006de0 <_ZN3ros16normalizeSecNSecERmS0_>
 8008d66:	f7f7 fbe1 	bl	800052c <HAL_GetTick>
    last_sync_receive_time = hardware_.time();
 8008d6a:	f8c4 04fc 	str.w	r0, [r4, #1276]	; 0x4fc
 8008d6e:	e6cb      	b.n	8008b08 <spinOnce+0x4c>
            configured_ = false;
 8008d70:	f884 24f4 	strb.w	r2, [r4, #1268]	; 0x4f4
 8008d74:	e6c8      	b.n	8008b08 <spinOnce+0x4c>
 8008d76:	bf00      	nop
 8008d78:	200041e4 	.word	0x200041e4
 8008d7c:	20004280 	.word	0x20004280
 8008d80:	200047b0 	.word	0x200047b0
 8008d84:	0008feff 	.word	0x0008feff
 8008d88:	20004498 	.word	0x20004498
 8008d8c:	20004290 	.word	0x20004290
 8008d90:	20004298 	.word	0x20004298
 8008d94:	3b9aca00 	.word	0x3b9aca00
 8008d98:	10624dd3 	.word	0x10624dd3
 8008d9c:	000f4240 	.word	0x000f4240
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8008da0:	69a3      	ldr	r3, [r4, #24]
      if(ints_lengthT > ints_length)
 8008da2:	f8d4 250c 	ldr.w	r2, [r4, #1292]	; 0x50c
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d908      	bls.n	8008dbc <spinOnce+0x300>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8008daa:	0099      	lsls	r1, r3, #2
 8008dac:	f8d4 0514 	ldr.w	r0, [r4, #1300]	; 0x514
 8008db0:	9300      	str	r3, [sp, #0]
 8008db2:	f000 fc17 	bl	80095e4 <realloc>
 8008db6:	9b00      	ldr	r3, [sp, #0]
 8008db8:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
      ints_length = ints_lengthT;
 8008dbc:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
      for( uint32_t i = 0; i < ints_length; i++){
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f000 80ea 	beq.w	8008f9a <spinOnce+0x4de>
 8008dc6:	4b82      	ldr	r3, [pc, #520]	; (8008fd0 <spinOnce+0x514>)
      offset += sizeof(this->ints_length);
 8008dc8:	2504      	movs	r5, #4
      for( uint32_t i = 0; i < ints_length; i++){
 8008dca:	2100      	movs	r1, #0
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008dcc:	7f9a      	ldrb	r2, [r3, #30]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008dce:	f893 e01d 	ldrb.w	lr, [r3, #29]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8008dd2:	7f18      	ldrb	r0, [r3, #28]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008dd4:	f893 c01f 	ldrb.w	ip, [r3, #31]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008dd8:	0412      	lsls	r2, r2, #16
 8008dda:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
 8008dde:	4302      	orrs	r2, r0
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8008de0:	f8d4 0514 	ldr.w	r0, [r4, #1300]	; 0x514
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008de4:	ea42 620c 	orr.w	r2, r2, ip, lsl #24
      this->st_ints = u_st_ints.real;
 8008de8:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8008dec:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
      for( uint32_t i = 0; i < ints_length; i++){
 8008df0:	f8d4 250c 	ldr.w	r2, [r4, #1292]	; 0x50c
 8008df4:	3101      	adds	r1, #1
 8008df6:	1d28      	adds	r0, r5, #4
 8008df8:	428a      	cmp	r2, r1
 8008dfa:	46ae      	mov	lr, r5
 8008dfc:	f103 0304 	add.w	r3, r3, #4
 8008e00:	4605      	mov	r5, r0
 8008e02:	d8e3      	bhi.n	8008dcc <spinOnce+0x310>
 8008e04:	f10e 0306 	add.w	r3, lr, #6
 8008e08:	9304      	str	r3, [sp, #16]
 8008e0a:	f10e 0309 	add.w	r3, lr, #9
 8008e0e:	9301      	str	r3, [sp, #4]
 8008e10:	f10e 030a 	add.w	r3, lr, #10
 8008e14:	9302      	str	r3, [sp, #8]
 8008e16:	f10e 030b 	add.w	r3, lr, #11
 8008e1a:	9303      	str	r3, [sp, #12]
 8008e1c:	f10e 030c 	add.w	r3, lr, #12
 8008e20:	f10e 0208 	add.w	r2, lr, #8
 8008e24:	9300      	str	r3, [sp, #0]
 8008e26:	9b04      	ldr	r3, [sp, #16]
 8008e28:	4615      	mov	r5, r2
 8008e2a:	f10e 0105 	add.w	r1, lr, #5
 8008e2e:	f10e 0c07 	add.w	ip, lr, #7
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8008e32:	4423      	add	r3, r4
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8008e34:	4421      	add	r1, r4
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8008e36:	7e1b      	ldrb	r3, [r3, #24]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8008e38:	f891 e018 	ldrb.w	lr, [r1, #24]
      if(floats_lengthT > floats_length)
 8008e3c:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8008e40:	4420      	add	r0, r4
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8008e42:	44a4      	add	ip, r4
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8008e44:	041b      	lsls	r3, r3, #16
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8008e46:	7e00      	ldrb	r0, [r0, #24]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8008e48:	f89c c018 	ldrb.w	ip, [ip, #24]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8008e4c:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 8008e50:	4303      	orrs	r3, r0
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8008e52:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
      if(floats_lengthT > floats_length)
 8008e56:	428b      	cmp	r3, r1
 8008e58:	d90a      	bls.n	8008e70 <spinOnce+0x3b4>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8008e5a:	0099      	lsls	r1, r3, #2
 8008e5c:	f8d4 0520 	ldr.w	r0, [r4, #1312]	; 0x520
 8008e60:	9205      	str	r2, [sp, #20]
 8008e62:	9304      	str	r3, [sp, #16]
 8008e64:	f000 fbbe 	bl	80095e4 <realloc>
 8008e68:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8008e6c:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
      floats_length = floats_lengthT;
 8008e70:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
      for( uint32_t i = 0; i < floats_length; i++){
 8008e74:	b35b      	cbz	r3, 8008ece <spinOnce+0x412>
 8008e76:	eb04 0c05 	add.w	ip, r4, r5
 8008e7a:	f04f 0e00 	mov.w	lr, #0
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008e7e:	f89c 301a 	ldrb.w	r3, [ip, #26]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008e82:	f89c 0019 	ldrb.w	r0, [ip, #25]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8008e86:	f89c 1018 	ldrb.w	r1, [ip, #24]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008e8a:	f89c 201b 	ldrb.w	r2, [ip, #27]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008e8e:	041b      	lsls	r3, r3, #16
 8008e90:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8008e94:	430b      	orrs	r3, r1
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008e96:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      this->st_floats = u_st_floats.real;
 8008e9a:	484e      	ldr	r0, [pc, #312]	; (8008fd4 <spinOnce+0x518>)
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8008e9c:	f8d4 2520 	ldr.w	r2, [r4, #1312]	; 0x520
      this->st_floats = u_st_floats.real;
 8008ea0:	6003      	str	r3, [r0, #0]
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8008ea2:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
      for( uint32_t i = 0; i < floats_length; i++){
 8008ea6:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
 8008eaa:	f10e 0e01 	add.w	lr, lr, #1
 8008eae:	1d2a      	adds	r2, r5, #4
 8008eb0:	4573      	cmp	r3, lr
 8008eb2:	4629      	mov	r1, r5
 8008eb4:	f10c 0c04 	add.w	ip, ip, #4
 8008eb8:	4615      	mov	r5, r2
 8008eba:	d8e0      	bhi.n	8008e7e <spinOnce+0x3c2>
 8008ebc:	1d4b      	adds	r3, r1, #5
 8008ebe:	9301      	str	r3, [sp, #4]
 8008ec0:	1d8b      	adds	r3, r1, #6
 8008ec2:	9302      	str	r3, [sp, #8]
 8008ec4:	1dcb      	adds	r3, r1, #7
 8008ec6:	9303      	str	r3, [sp, #12]
 8008ec8:	f101 0308 	add.w	r3, r1, #8
 8008ecc:	9300      	str	r3, [sp, #0]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8008ece:	9b02      	ldr	r3, [sp, #8]
 8008ed0:	4423      	add	r3, r4
 8008ed2:	4619      	mov	r1, r3
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8008ed4:	9b01      	ldr	r3, [sp, #4]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8008ed6:	7e09      	ldrb	r1, [r1, #24]
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8008ed8:	18a5      	adds	r5, r4, r2
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8008eda:	9a03      	ldr	r2, [sp, #12]
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8008edc:	7e2d      	ldrb	r5, [r5, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8008ede:	4423      	add	r3, r4
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8008ee0:	4422      	add	r2, r4
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8008ee2:	7e18      	ldrb	r0, [r3, #24]
      if(strings_lengthT > strings_length)
 8008ee4:	f8d4 3524 	ldr.w	r3, [r4, #1316]	; 0x524
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8008ee8:	4694      	mov	ip, r2
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8008eea:	040a      	lsls	r2, r1, #16
 8008eec:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8008ef0:	f89c 1018 	ldrb.w	r1, [ip, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8008ef4:	4315      	orrs	r5, r2
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8008ef6:	ea45 6501 	orr.w	r5, r5, r1, lsl #24
      if(strings_lengthT > strings_length)
 8008efa:	429d      	cmp	r5, r3
 8008efc:	d906      	bls.n	8008f0c <spinOnce+0x450>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8008efe:	00a9      	lsls	r1, r5, #2
 8008f00:	f8d4 052c 	ldr.w	r0, [r4, #1324]	; 0x52c
 8008f04:	f000 fb6e 	bl	80095e4 <realloc>
 8008f08:	f8c4 052c 	str.w	r0, [r4, #1324]	; 0x52c
      strings_length = strings_lengthT;
 8008f0c:	f8c4 5524 	str.w	r5, [r4, #1316]	; 0x524
      for( uint32_t i = 0; i < strings_length; i++){
 8008f10:	2d00      	cmp	r5, #0
 8008f12:	d03e      	beq.n	8008f92 <spinOnce+0x4d6>
          inbuffer[k-1]=inbuffer[k];
 8008f14:	e9cd 7b01 	strd	r7, fp, [sp, #4]
 8008f18:	f8dd b000 	ldr.w	fp, [sp]
      for( uint32_t i = 0; i < strings_length; i++){
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	eb04 020b 	add.w	r2, r4, fp
      offset += 4;
 8008f22:	f10b 0704 	add.w	r7, fp, #4
 8008f26:	7e95      	ldrb	r5, [r2, #26]
 8008f28:	7e50      	ldrb	r0, [r2, #25]
 8008f2a:	7e11      	ldrb	r1, [r2, #24]
 8008f2c:	7ed2      	ldrb	r2, [r2, #27]
 8008f2e:	042d      	lsls	r5, r5, #16
 8008f30:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8008f34:	430d      	orrs	r5, r1
 8008f36:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8008f3a:	443d      	add	r5, r7
          inbuffer[k-1]=inbuffer[k];
 8008f3c:	f06f 0c03 	mvn.w	ip, #3
 8008f40:	ebac 0c0b 	sub.w	ip, ip, fp
 8008f44:	f10b 011c 	add.w	r1, fp, #28
 8008f48:	f10b 001b 	add.w	r0, fp, #27
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8008f4c:	42af      	cmp	r7, r5
          inbuffer[k-1]=inbuffer[k];
 8008f4e:	f10b 0205 	add.w	r2, fp, #5
 8008f52:	44ac      	add	ip, r5
      offset += length_st_strings;
 8008f54:	46ab      	mov	fp, r5
 8008f56:	4421      	add	r1, r4
 8008f58:	4420      	add	r0, r4
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8008f5a:	d207      	bcs.n	8008f6c <spinOnce+0x4b0>
 8008f5c:	4295      	cmp	r5, r2
 8008f5e:	bf2c      	ite	cs
 8008f60:	4662      	movcs	r2, ip
 8008f62:	2201      	movcc	r2, #1
 8008f64:	9300      	str	r3, [sp, #0]
 8008f66:	f000 fa74 	bl	8009452 <memmove>
 8008f6a:	9b00      	ldr	r3, [sp, #0]
      inbuffer[offset+length_st_strings-1]=0;
 8008f6c:	4425      	add	r5, r4
 8008f6e:	f04f 0100 	mov.w	r1, #0
 8008f72:	75e9      	strb	r1, [r5, #23]
      this->st_strings = (char *)(inbuffer + offset-1);
 8008f74:	1e7a      	subs	r2, r7, #1
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8008f76:	f8d4 152c 	ldr.w	r1, [r4, #1324]	; 0x52c
      this->st_strings = (char *)(inbuffer + offset-1);
 8008f7a:	4452      	add	r2, sl
 8008f7c:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8008f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      for( uint32_t i = 0; i < strings_length; i++){
 8008f84:	f8d4 2524 	ldr.w	r2, [r4, #1316]	; 0x524
 8008f88:	3301      	adds	r3, #1
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d8c7      	bhi.n	8008f1e <spinOnce+0x462>
 8008f8e:	e9dd 7b01 	ldrd	r7, fp, [sp, #4]
            param_recieved = true;
 8008f92:	2301      	movs	r3, #1
 8008f94:	f884 3504 	strb.w	r3, [r4, #1284]	; 0x504
 8008f98:	e5b6      	b.n	8008b08 <spinOnce+0x4c>
      for( uint32_t i = 0; i < ints_length; i++){
 8008f9a:	230c      	movs	r3, #12
 8008f9c:	210b      	movs	r1, #11
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	230a      	movs	r3, #10
 8008fa2:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8008fa6:	2309      	movs	r3, #9
 8008fa8:	9301      	str	r3, [sp, #4]
 8008faa:	2306      	movs	r3, #6
 8008fac:	2208      	movs	r2, #8
 8008fae:	f04f 0c07 	mov.w	ip, #7
 8008fb2:	9304      	str	r3, [sp, #16]
 8008fb4:	2105      	movs	r1, #5
 8008fb6:	2004      	movs	r0, #4
 8008fb8:	e73b      	b.n	8008e32 <spinOnce+0x376>
            requestSyncTime();
 8008fba:	4805      	ldr	r0, [pc, #20]	; (8008fd0 <spinOnce+0x514>)
 8008fbc:	f7ff f858 	bl	8008070 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8008fc0:	4803      	ldr	r0, [pc, #12]	; (8008fd0 <spinOnce+0x514>)
 8008fc2:	f7ff f88d 	bl	80080e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8008fc6:	f8c4 74f8 	str.w	r7, [r4, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 8008fca:	f8c4 74fc 	str.w	r7, [r4, #1276]	; 0x4fc
 8008fce:	e57c      	b.n	8008aca <spinOnce+0xe>
 8008fd0:	20004280 	.word	0x20004280
 8008fd4:	2000479c 	.word	0x2000479c

08008fd8 <_GLOBAL__sub_I_rb>:
 8008fd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NodeHandle_() : configured_(false)
 8008fdc:	4d76      	ldr	r5, [pc, #472]	; (80091b8 <_GLOBAL__sub_I_rb+0x1e0>)
      strings_length(0), strings(NULL)
 8008fde:	4b77      	ldr	r3, [pc, #476]	; (80091bc <_GLOBAL__sub_I_rb+0x1e4>)
 8008fe0:	4a77      	ldr	r2, [pc, #476]	; (80091c0 <_GLOBAL__sub_I_rb+0x1e8>)
 8008fe2:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
 8008fe6:	2400      	movs	r4, #0
 8008fe8:	2764      	movs	r7, #100	; 0x64
 8008fea:	602a      	str	r2, [r5, #0]
 8008fec:	f505 6083 	add.w	r0, r5, #1048	; 0x418
 8008ff0:	463a      	mov	r2, r7
 8008ff2:	4621      	mov	r1, r4
 8008ff4:	f8c5 4524 	str.w	r4, [r5, #1316]	; 0x524
 8008ff8:	f8c5 452c 	str.w	r4, [r5, #1324]	; 0x52c
 8008ffc:	f44f 7600 	mov.w	r6, #512	; 0x200
 8009000:	f885 44f4 	strb.w	r4, [r5, #1268]	; 0x4f4
 8009004:	f000 fa3e 	bl	8009484 <memset>
 8009008:	463a      	mov	r2, r7
 800900a:	4621      	mov	r1, r4
 800900c:	f205 407c 	addw	r0, r5, #1148	; 0x47c
 8009010:	f000 fa38 	bl	8009484 <memset>
 8009014:	4632      	mov	r2, r6
 8009016:	4621      	mov	r1, r4
 8009018:	f105 0018 	add.w	r0, r5, #24
 800901c:	f000 fa32 	bl	8009484 <memset>
 8009020:	4632      	mov	r2, r6
 8009022:	4621      	mov	r1, r4
 8009024:	f505 7006 	add.w	r0, r5, #536	; 0x218
 8009028:	f000 fa2c 	bl	8009484 <memset>
      data(0)
 800902c:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 800922c <_GLOBAL__sub_I_rb+0x254>
 8009030:	f8df c1fc 	ldr.w	ip, [pc, #508]	; 8009230 <_GLOBAL__sub_I_rb+0x258>
 8009034:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 8009234 <_GLOBAL__sub_I_rb+0x25c>
    req_param_resp.ints_length = 0;
 8009038:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 800903c:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
    req_param_resp.floats_length = 0;
 8009040:	f8c5 4518 	str.w	r4, [r5, #1304]	; 0x518
    req_param_resp.floats = NULL;
 8009044:	f8c5 4520 	str.w	r4, [r5, #1312]	; 0x520
    spin_timeout_ = 0;
 8009048:	616c      	str	r4, [r5, #20]
 800904a:	4d5e      	ldr	r5, [pc, #376]	; (80091c4 <_GLOBAL__sub_I_rb+0x1ec>)
      data(0)
 800904c:	4f5e      	ldr	r7, [pc, #376]	; (80091c8 <_GLOBAL__sub_I_rb+0x1f0>)
 800904e:	f8c8 5000 	str.w	r5, [r8]
 8009052:	e9cc 5400 	strd	r5, r4, [ip]
 8009056:	e9ca 5400 	strd	r5, r4, [sl]
 800905a:	4d5c      	ldr	r5, [pc, #368]	; (80091cc <_GLOBAL__sub_I_rb+0x1f4>)
      data("")
 800905c:	495c      	ldr	r1, [pc, #368]	; (80091d0 <_GLOBAL__sub_I_rb+0x1f8>)
    endpoint_(endpoint) {};
 800905e:	485d      	ldr	r0, [pc, #372]	; (80091d4 <_GLOBAL__sub_I_rb+0x1fc>)
 8009060:	603d      	str	r5, [r7, #0]
 8009062:	4d5d      	ldr	r5, [pc, #372]	; (80091d8 <_GLOBAL__sub_I_rb+0x200>)
 8009064:	6104      	str	r4, [r0, #16]
 8009066:	e9c0 5100 	strd	r5, r1, [r0]
 800906a:	485c      	ldr	r0, [pc, #368]	; (80091dc <_GLOBAL__sub_I_rb+0x204>)
      z(0)
 800906c:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 8009238 <_GLOBAL__sub_I_rb+0x260>
 8009070:	4b5b      	ldr	r3, [pc, #364]	; (80091e0 <_GLOBAL__sub_I_rb+0x208>)
 8009072:	6008      	str	r0, [r1, #0]
 8009074:	485b      	ldr	r0, [pc, #364]	; (80091e4 <_GLOBAL__sub_I_rb+0x20c>)
 8009076:	6048      	str	r0, [r1, #4]
 8009078:	485b      	ldr	r0, [pc, #364]	; (80091e8 <_GLOBAL__sub_I_rb+0x210>)
 800907a:	eddf 7a5c 	vldr	s15, [pc, #368]	; 80091ec <_GLOBAL__sub_I_rb+0x214>
      data(0)
 800907e:	f8df e1bc 	ldr.w	lr, [pc, #444]	; 800923c <_GLOBAL__sub_I_rb+0x264>
 8009082:	4a5b      	ldr	r2, [pc, #364]	; (80091f0 <_GLOBAL__sub_I_rb+0x218>)
 8009084:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8009240 <_GLOBAL__sub_I_rb+0x268>
 8009088:	f8cb 0000 	str.w	r0, [fp]
 800908c:	6018      	str	r0, [r3, #0]
 800908e:	4859      	ldr	r0, [pc, #356]	; (80091f4 <_GLOBAL__sub_I_rb+0x21c>)
 8009090:	4e59      	ldr	r6, [pc, #356]	; (80091f8 <_GLOBAL__sub_I_rb+0x220>)
 8009092:	495a      	ldr	r1, [pc, #360]	; (80091fc <_GLOBAL__sub_I_rb+0x224>)
 8009094:	f8c9 5000 	str.w	r5, [r9]
 8009098:	f8c9 b004 	str.w	fp, [r9, #4]
 800909c:	f88e 4004 	strb.w	r4, [lr, #4]
 80090a0:	f8ce 6000 	str.w	r6, [lr]
 80090a4:	6016      	str	r6, [r2, #0]
 80090a6:	7114      	strb	r4, [r2, #4]
 80090a8:	f8c8 4004 	str.w	r4, [r8, #4]
 80090ac:	edcb 7a01 	vstr	s15, [fp, #4]
 80090b0:	edcb 7a02 	vstr	s15, [fp, #8]
 80090b4:	edcb 7a03 	vstr	s15, [fp, #12]
 80090b8:	edc3 7a01 	vstr	s15, [r3, #4]
 80090bc:	edc3 7a02 	vstr	s15, [r3, #8]
 80090c0:	edc3 7a03 	vstr	s15, [r3, #12]
 80090c4:	713c      	strb	r4, [r7, #4]
 80090c6:	f8c9 4010 	str.w	r4, [r9, #16]
 80090ca:	6043      	str	r3, [r0, #4]
 80090cc:	4b4c      	ldr	r3, [pc, #304]	; (8009200 <_GLOBAL__sub_I_rb+0x228>)
 80090ce:	f8df b174 	ldr.w	fp, [pc, #372]	; 8009244 <_GLOBAL__sub_I_rb+0x26c>
 80090d2:	6003      	str	r3, [r0, #0]
 80090d4:	4b4b      	ldr	r3, [pc, #300]	; (8009204 <_GLOBAL__sub_I_rb+0x22c>)
 80090d6:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8009248 <_GLOBAL__sub_I_rb+0x270>
 80090da:	600b      	str	r3, [r1, #0]
 80090dc:	4b4a      	ldr	r3, [pc, #296]	; (8009208 <_GLOBAL__sub_I_rb+0x230>)
 80090de:	f8c1 e004 	str.w	lr, [r1, #4]
 80090e2:	f8cb 3000 	str.w	r3, [fp]
 80090e6:	f8df e164 	ldr.w	lr, [pc, #356]	; 800924c <_GLOBAL__sub_I_rb+0x274>
 80090ea:	4b48      	ldr	r3, [pc, #288]	; (800920c <_GLOBAL__sub_I_rb+0x234>)
 80090ec:	4d48      	ldr	r5, [pc, #288]	; (8009210 <_GLOBAL__sub_I_rb+0x238>)
 80090ee:	6104      	str	r4, [r0, #16]
 80090f0:	f8c9 a004 	str.w	sl, [r9, #4]
    endpoint_(endpoint)
 80090f4:	4847      	ldr	r0, [pc, #284]	; (8009214 <_GLOBAL__sub_I_rb+0x23c>)
 80090f6:	f8c9 3000 	str.w	r3, [r9]
 80090fa:	f8c9 4010 	str.w	r4, [r9, #16]
 80090fe:	f8df 9150 	ldr.w	r9, [pc, #336]	; 8009250 <_GLOBAL__sub_I_rb+0x278>
 8009102:	610c      	str	r4, [r1, #16]
 8009104:	f8ce 9000 	str.w	r9, [lr]
 8009108:	4943      	ldr	r1, [pc, #268]	; (8009218 <_GLOBAL__sub_I_rb+0x240>)
 800910a:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8009254 <_GLOBAL__sub_I_rb+0x27c>
 800910e:	4b43      	ldr	r3, [pc, #268]	; (800921c <_GLOBAL__sub_I_rb+0x244>)
 8009110:	f8cb 2004 	str.w	r2, [fp, #4]
 8009114:	f8ce 8004 	str.w	r8, [lr, #4]
 8009118:	4a41      	ldr	r2, [pc, #260]	; (8009220 <_GLOBAL__sub_I_rb+0x248>)
 800911a:	f8c5 c004 	str.w	ip, [r5, #4]
 800911e:	f8c0 9014 	str.w	r9, [r0, #20]
 8009122:	f8df c134 	ldr.w	ip, [pc, #308]	; 8009258 <_GLOBAL__sub_I_rb+0x280>
      data(0)
 8009126:	f8df 9134 	ldr.w	r9, [pc, #308]	; 800925c <_GLOBAL__sub_I_rb+0x284>
 800912a:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8009260 <_GLOBAL__sub_I_rb+0x288>
 800912e:	f8c5 8000 	str.w	r8, [r5]
 8009132:	f8c0 c000 	str.w	ip, [r0]
 8009136:	f8c1 c000 	str.w	ip, [r1]
 800913a:	f8c0 900c 	str.w	r9, [r0, #12]
 800913e:	f8c1 900c 	str.w	r9, [r1, #12]
 8009142:	f8cb 4010 	str.w	r4, [fp, #16]
 8009146:	f8ce 4010 	str.w	r4, [lr, #16]
 800914a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009264 <_GLOBAL__sub_I_rb+0x28c>
    topic_ = topic_name;
 800914e:	f8df e118 	ldr.w	lr, [pc, #280]	; 8009268 <_GLOBAL__sub_I_rb+0x290>
 8009152:	612c      	str	r4, [r5, #16]
 8009154:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800926c <_GLOBAL__sub_I_rb+0x294>
    endpoint_(endpoint)
 8009158:	f8df c114 	ldr.w	ip, [pc, #276]	; 8009270 <_GLOBAL__sub_I_rb+0x298>
 800915c:	f8df a114 	ldr.w	sl, [pc, #276]	; 8009274 <_GLOBAL__sub_I_rb+0x29c>
 8009160:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8009278 <_GLOBAL__sub_I_rb+0x2a0>
    topic_ = topic_name;
 8009164:	f8c0 e008 	str.w	lr, [r0, #8]
    endpoint_(endpoint)
 8009168:	2501      	movs	r5, #1
    topic_ = topic_name;
 800916a:	f8c1 8008 	str.w	r8, [r1, #8]
 800916e:	7404      	strb	r4, [r0, #16]
 8009170:	740c      	strb	r4, [r1, #16]
    endpoint_(endpoint)
 8009172:	f8c1 a014 	str.w	sl, [r1, #20]
 8009176:	6185      	str	r5, [r0, #24]
 8009178:	618d      	str	r5, [r1, #24]
 800917a:	f8df e100 	ldr.w	lr, [pc, #256]	; 800927c <_GLOBAL__sub_I_rb+0x2a4>
    topic_ = topic_name;
 800917e:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8009280 <_GLOBAL__sub_I_rb+0x2a8>
 8009182:	4828      	ldr	r0, [pc, #160]	; (8009224 <_GLOBAL__sub_I_rb+0x24c>)
 8009184:	4928      	ldr	r1, [pc, #160]	; (8009228 <_GLOBAL__sub_I_rb+0x250>)
 8009186:	60d6      	str	r6, [r2, #12]
    endpoint_(endpoint)
 8009188:	f8c2 c000 	str.w	ip, [r2]
 800918c:	7414      	strb	r4, [r2, #16]
 800918e:	741c      	strb	r4, [r3, #16]
 8009190:	6195      	str	r5, [r2, #24]
 8009192:	f8cb 7004 	str.w	r7, [fp, #4]
 8009196:	f8cb 4010 	str.w	r4, [fp, #16]
 800919a:	f8c2 e014 	str.w	lr, [r2, #20]
    topic_ = topic_name;
 800919e:	f8c2 8008 	str.w	r8, [r2, #8]
    endpoint_(endpoint)
 80091a2:	f8c3 c000 	str.w	ip, [r3]
 80091a6:	60de      	str	r6, [r3, #12]
 80091a8:	e9c3 9505 	strd	r9, r5, [r3, #20]
    topic_ = topic_name;
 80091ac:	6098      	str	r0, [r3, #8]
 80091ae:	f8cb 1000 	str.w	r1, [fp]
 80091b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b6:	bf00      	nop
 80091b8:	20004280 	.word	0x20004280
 80091bc:	080097c0 	.word	0x080097c0
 80091c0:	08009868 	.word	0x08009868
 80091c4:	08009838 	.word	0x08009838
 80091c8:	2000484c 	.word	0x2000484c
 80091cc:	08009820 	.word	0x08009820
 80091d0:	200048a0 	.word	0x200048a0
 80091d4:	2000488c 	.word	0x2000488c
 80091d8:	080098a4 	.word	0x080098a4
 80091dc:	080097f0 	.word	0x080097f0
 80091e0:	20004214 	.word	0x20004214
 80091e4:	08009a58 	.word	0x08009a58
 80091e8:	08009850 	.word	0x08009850
 80091ec:	00000000 	.word	0x00000000
 80091f0:	200048a8 	.word	0x200048a8
 80091f4:	20004200 	.word	0x20004200
 80091f8:	08009808 	.word	0x08009808
 80091fc:	20004808 	.word	0x20004808
 8009200:	080098ac 	.word	0x080098ac
 8009204:	080098b4 	.word	0x080098b4
 8009208:	080098c0 	.word	0x080098c0
 800920c:	080098cc 	.word	0x080098cc
 8009210:	20004248 	.word	0x20004248
 8009214:	20004854 	.word	0x20004854
 8009218:	20004870 	.word	0x20004870
 800921c:	200047ec 	.word	0x200047ec
 8009220:	2000481c 	.word	0x2000481c
 8009224:	08009910 	.word	0x08009910
 8009228:	08009920 	.word	0x08009920
 800922c:	20004264 	.word	0x20004264
 8009230:	2000425c 	.word	0x2000425c
 8009234:	200047bc 	.word	0x200047bc
 8009238:	20004238 	.word	0x20004238
 800923c:	200048b0 	.word	0x200048b0
 8009240:	20004224 	.word	0x20004224
 8009244:	200047d8 	.word	0x200047d8
 8009248:	200047c4 	.word	0x200047c4
 800924c:	2000426c 	.word	0x2000426c
 8009250:	080098dc 	.word	0x080098dc
 8009254:	080071b5 	.word	0x080071b5
 8009258:	0800987c 	.word	0x0800987c
 800925c:	080097d8 	.word	0x080097d8
 8009260:	080098ec 	.word	0x080098ec
 8009264:	20004838 	.word	0x20004838
 8009268:	080098f0 	.word	0x080098f0
 800926c:	080098f8 	.word	0x080098f8
 8009270:	08009894 	.word	0x08009894
 8009274:	080076cd 	.word	0x080076cd
 8009278:	0800717d 	.word	0x0800717d
 800927c:	08007145 	.word	0x08007145
 8009280:	08009900 	.word	0x08009900

08009284 <_Z8NBT_initP5nbt_tm>:
#include "stm32f4xx_hal.h"
#include "nbt.h"

//NBT - Non Blocking Timer
void NBT_init(nbt_t * nbt, uint32_t interval)
{
 8009284:	b510      	push	{r4, lr}
	nbt->timeout = interval;
 8009286:	6001      	str	r1, [r0, #0]
{
 8009288:	4604      	mov	r4, r0
	nbt->previousMillis = HAL_GetTick();
 800928a:	f7f7 f94f 	bl	800052c <HAL_GetTick>
 800928e:	6060      	str	r0, [r4, #4]
}
 8009290:	bd10      	pop	{r4, pc}
 8009292:	bf00      	nop

08009294 <_Z11NBT_handlerP5nbt_t>:

bool NBT_handler(nbt_t * nbt)
{
 8009294:	b510      	push	{r4, lr}
 8009296:	4604      	mov	r4, r0
	if(HAL_GetTick()-nbt->previousMillis>nbt->timeout){
 8009298:	f7f7 f948 	bl	800052c <HAL_GetTick>
 800929c:	e9d4 2300 	ldrd	r2, r3, [r4]
 80092a0:	1ac0      	subs	r0, r0, r3
 80092a2:	4290      	cmp	r0, r2
 80092a4:	d802      	bhi.n	80092ac <_Z11NBT_handlerP5nbt_t+0x18>
		nbt->previousMillis = HAL_GetTick();
		return true;
	}

	return false;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	bd10      	pop	{r4, pc}
		nbt->previousMillis = HAL_GetTick();
 80092ac:	f7f7 f93e 	bl	800052c <HAL_GetTick>
		return true;
 80092b0:	2301      	movs	r3, #1
		nbt->previousMillis = HAL_GetTick();
 80092b2:	6060      	str	r0, [r4, #4]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	bd10      	pop	{r4, pc}

080092b8 <_Z18ringbuffer_putcharP10ringbufferh>:

#define ASSERT(EX)                                                         \

__inline enum ringbuffer_state  ringbuffer_status(struct  ringbuffer *rb)
{
	if (rb->read_index == rb->write_index) {
 80092b8:	8882      	ldrh	r2, [r0, #4]
 80092ba:	88c3      	ldrh	r3, [r0, #6]
 80092bc:	0852      	lsrs	r2, r2, #1
 80092be:	085b      	lsrs	r3, r3, #1
 80092c0:	429a      	cmp	r2, r3

/**
 * put a character into ring buffer
 */
uint32_t  ringbuffer_putchar(struct  ringbuffer *rb, const uint8_t ch)
{
 80092c2:	b430      	push	{r4, r5}
    ASSERT(rb != NULL);

    /* whether has enough space */
	if (! ringbuffer_empty_space(rb))
 80092c4:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
	if (rb->read_index == rb->write_index) {
 80092c8:	d01c      	beq.n	8009304 <_Z18ringbuffer_putcharP10ringbufferh+0x4c>
		if (rb->write_index > rb->read_index)
 80092ca:	d314      	bcc.n	80092f6 <_Z18ringbuffer_putcharP10ringbufferh+0x3e>
			return rb->buffer_size - (rb->read_index - rb->write_index);
 80092cc:	195c      	adds	r4, r3, r5
 80092ce:	1aa2      	subs	r2, r4, r2
 80092d0:	b292      	uxth	r2, r2
	if (! ringbuffer_empty_space(rb))
 80092d2:	4295      	cmp	r5, r2
 80092d4:	d013      	beq.n	80092fe <_Z18ringbuffer_putcharP10ringbufferh+0x46>
		return 0;

	rb->buffer_ptr[rb->write_index] = ch;
 80092d6:	6802      	ldr	r2, [r0, #0]
 80092d8:	54d1      	strb	r1, [r2, r3]

	/* flip mirror */
	if (rb->write_index == rb->buffer_size - 1) {
 80092da:	88c3      	ldrh	r3, [r0, #6]
 80092dc:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80092e0:	085a      	lsrs	r2, r3, #1
 80092e2:	3901      	subs	r1, #1
 80092e4:	428a      	cmp	r2, r1
 80092e6:	d017      	beq.n	8009318 <_Z18ringbuffer_putcharP10ringbufferh+0x60>
		rb->write_mirror = ~rb->write_mirror;
		rb->write_index = 0;
	} else {
		rb->write_index++;
 80092e8:	3201      	adds	r2, #1
 80092ea:	f362 034f 	bfi	r3, r2, #1, #15
 80092ee:	80c3      	strh	r3, [r0, #6]
	}

	return 1;
}
 80092f0:	bc30      	pop	{r4, r5}
	return 1;
 80092f2:	2001      	movs	r0, #1
}
 80092f4:	4770      	bx	lr
			return rb->write_index - rb->read_index;
 80092f6:	1a9a      	subs	r2, r3, r2
 80092f8:	b292      	uxth	r2, r2
	if (! ringbuffer_empty_space(rb))
 80092fa:	4295      	cmp	r5, r2
 80092fc:	d1eb      	bne.n	80092d6 <_Z18ringbuffer_putcharP10ringbufferh+0x1e>
		return 0;
 80092fe:	2000      	movs	r0, #0
}
 8009300:	bc30      	pop	{r4, r5}
 8009302:	4770      	bx	lr
		if (rb->read_mirror == rb->write_mirror)
 8009304:	7904      	ldrb	r4, [r0, #4]
 8009306:	7982      	ldrb	r2, [r0, #6]
 8009308:	f004 0401 	and.w	r4, r4, #1
 800930c:	f002 0201 	and.w	r2, r2, #1
 8009310:	4294      	cmp	r4, r2
 8009312:	d00f      	beq.n	8009334 <_Z18ringbuffer_putcharP10ringbufferh+0x7c>
 8009314:	b2aa      	uxth	r2, r5
 8009316:	e7dc      	b.n	80092d2 <_Z18ringbuffer_putcharP10ringbufferh+0x1a>
		rb->write_mirror = ~rb->write_mirror;
 8009318:	7983      	ldrb	r3, [r0, #6]
 800931a:	f3c3 0200 	ubfx	r2, r3, #0, #1
 800931e:	43d2      	mvns	r2, r2
 8009320:	f362 0300 	bfi	r3, r2, #0, #1
 8009324:	7183      	strb	r3, [r0, #6]
		rb->write_index = 0;
 8009326:	88c3      	ldrh	r3, [r0, #6]
 8009328:	f36f 034f 	bfc	r3, #1, #15
 800932c:	80c3      	strh	r3, [r0, #6]
}
 800932e:	bc30      	pop	{r4, r5}
	return 1;
 8009330:	2001      	movs	r0, #1
}
 8009332:	4770      	bx	lr
		if (rb->read_mirror == rb->write_mirror)
 8009334:	2200      	movs	r2, #0
 8009336:	e7cc      	b.n	80092d2 <_Z18ringbuffer_putcharP10ringbufferh+0x1a>

08009338 <_Z18ringbuffer_getcharP10ringbufferPh>:
	if (rb->read_index == rb->write_index) {
 8009338:	8882      	ldrh	r2, [r0, #4]
 800933a:	88c3      	ldrh	r3, [r0, #6]
 800933c:	0852      	lsrs	r2, r2, #1
 800933e:	085b      	lsrs	r3, r3, #1
 8009340:	429a      	cmp	r2, r3

/**
 * get a character from a ringbuffer
 */
uint32_t  ringbuffer_getchar(struct  ringbuffer *rb, uint8_t *ch)
{
 8009342:	b410      	push	{r4}
	if (rb->read_index == rb->write_index) {
 8009344:	d017      	beq.n	8009376 <_Z18ringbuffer_getcharP10ringbufferPh+0x3e>
		if (rb->write_index > rb->read_index)
 8009346:	d301      	bcc.n	800934c <_Z18ringbuffer_getcharP10ringbufferPh+0x14>
			return rb->buffer_size - (rb->read_index - rb->write_index);
 8009348:	8904      	ldrh	r4, [r0, #8]
 800934a:	4423      	add	r3, r4
 800934c:	1a9b      	subs	r3, r3, r2
 800934e:	b29b      	uxth	r3, r3
    ASSERT(rb != NULL);

    /* ringbuffer is empty */
    if (! ringbuffer_data_len(rb))
 8009350:	b1e3      	cbz	r3, 800938c <_Z18ringbuffer_getcharP10ringbufferPh+0x54>
        return 0;

    /* put character */
    *ch = rb->buffer_ptr[rb->read_index];
 8009352:	6803      	ldr	r3, [r0, #0]
 8009354:	5c9b      	ldrb	r3, [r3, r2]
 8009356:	700b      	strb	r3, [r1, #0]

    if (rb->read_index == rb->buffer_size-1)
 8009358:	8883      	ldrh	r3, [r0, #4]
 800935a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800935e:	085a      	lsrs	r2, r3, #1
 8009360:	3901      	subs	r1, #1
 8009362:	428a      	cmp	r2, r1
 8009364:	d016      	beq.n	8009394 <_Z18ringbuffer_getcharP10ringbufferPh+0x5c>
        rb->read_mirror = ~rb->read_mirror;
        rb->read_index = 0;
    }
    else
    {
        rb->read_index++;
 8009366:	3201      	adds	r2, #1
 8009368:	f362 034f 	bfi	r3, r2, #1, #15
 800936c:	8083      	strh	r3, [r0, #4]
    }

    return 1;
}
 800936e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return 1;
 8009372:	2001      	movs	r0, #1
}
 8009374:	4770      	bx	lr
		if (rb->read_mirror == rb->write_mirror)
 8009376:	7904      	ldrb	r4, [r0, #4]
 8009378:	7983      	ldrb	r3, [r0, #6]
 800937a:	f004 0401 	and.w	r4, r4, #1
 800937e:	f003 0301 	and.w	r3, r3, #1
 8009382:	429c      	cmp	r4, r3
 8009384:	d015      	beq.n	80093b2 <_Z18ringbuffer_getcharP10ringbufferPh+0x7a>
		return rb->buffer_size;
 8009386:	8903      	ldrh	r3, [r0, #8]
    if (! ringbuffer_data_len(rb))
 8009388:	2b00      	cmp	r3, #0
 800938a:	d1e2      	bne.n	8009352 <_Z18ringbuffer_getcharP10ringbufferPh+0x1a>
        return 0;
 800938c:	4618      	mov	r0, r3
}
 800938e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009392:	4770      	bx	lr
        rb->read_mirror = ~rb->read_mirror;
 8009394:	7903      	ldrb	r3, [r0, #4]
}
 8009396:	f85d 4b04 	ldr.w	r4, [sp], #4
        rb->read_mirror = ~rb->read_mirror;
 800939a:	f3c3 0200 	ubfx	r2, r3, #0, #1
 800939e:	43d2      	mvns	r2, r2
 80093a0:	f362 0300 	bfi	r3, r2, #0, #1
 80093a4:	7103      	strb	r3, [r0, #4]
        rb->read_index = 0;
 80093a6:	8883      	ldrh	r3, [r0, #4]
 80093a8:	f36f 034f 	bfc	r3, #1, #15
 80093ac:	8083      	strh	r3, [r0, #4]
    return 1;
 80093ae:	2001      	movs	r0, #1
}
 80093b0:	4770      	bx	lr
        return 0;
 80093b2:	2000      	movs	r0, #0
}
 80093b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop

080093bc <_Z15ringbuffer_initP10ringbufferPhs>:
{
    ASSERT(rb != NULL);
    ASSERT(size > 0);

    /* initialize read and write index */
    rb->read_mirror = rb->read_index = 0;
 80093bc:	2300      	movs	r3, #0
    rb->write_mirror = rb->write_index = 0;

    /* set buffer pool and size */
    rb->buffer_ptr = pool;
 80093be:	6001      	str	r1, [r0, #0]
    rb->buffer_size = size; //ALIGN_DOWN(size, ALIGN_SIZE);
 80093c0:	8102      	strh	r2, [r0, #8]
    rb->read_mirror = rb->read_index = 0;
 80093c2:	6043      	str	r3, [r0, #4]
}
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop

080093c8 <__errno>:
 80093c8:	4b01      	ldr	r3, [pc, #4]	; (80093d0 <__errno+0x8>)
 80093ca:	6818      	ldr	r0, [r3, #0]
 80093cc:	4770      	bx	lr
 80093ce:	bf00      	nop
 80093d0:	20000180 	.word	0x20000180

080093d4 <__libc_init_array>:
 80093d4:	b570      	push	{r4, r5, r6, lr}
 80093d6:	4e0d      	ldr	r6, [pc, #52]	; (800940c <__libc_init_array+0x38>)
 80093d8:	4c0d      	ldr	r4, [pc, #52]	; (8009410 <__libc_init_array+0x3c>)
 80093da:	1ba4      	subs	r4, r4, r6
 80093dc:	10a4      	asrs	r4, r4, #2
 80093de:	2500      	movs	r5, #0
 80093e0:	42a5      	cmp	r5, r4
 80093e2:	d109      	bne.n	80093f8 <__libc_init_array+0x24>
 80093e4:	4e0b      	ldr	r6, [pc, #44]	; (8009414 <__libc_init_array+0x40>)
 80093e6:	4c0c      	ldr	r4, [pc, #48]	; (8009418 <__libc_init_array+0x44>)
 80093e8:	f000 f944 	bl	8009674 <_init>
 80093ec:	1ba4      	subs	r4, r4, r6
 80093ee:	10a4      	asrs	r4, r4, #2
 80093f0:	2500      	movs	r5, #0
 80093f2:	42a5      	cmp	r5, r4
 80093f4:	d105      	bne.n	8009402 <__libc_init_array+0x2e>
 80093f6:	bd70      	pop	{r4, r5, r6, pc}
 80093f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80093fc:	4798      	blx	r3
 80093fe:	3501      	adds	r5, #1
 8009400:	e7ee      	b.n	80093e0 <__libc_init_array+0xc>
 8009402:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009406:	4798      	blx	r3
 8009408:	3501      	adds	r5, #1
 800940a:	e7f2      	b.n	80093f2 <__libc_init_array+0x1e>
 800940c:	08009b9c 	.word	0x08009b9c
 8009410:	08009b9c 	.word	0x08009b9c
 8009414:	08009b9c 	.word	0x08009b9c
 8009418:	08009ba4 	.word	0x08009ba4

0800941c <malloc>:
 800941c:	4b02      	ldr	r3, [pc, #8]	; (8009428 <malloc+0xc>)
 800941e:	4601      	mov	r1, r0
 8009420:	6818      	ldr	r0, [r3, #0]
 8009422:	f000 b885 	b.w	8009530 <_malloc_r>
 8009426:	bf00      	nop
 8009428:	20000180 	.word	0x20000180

0800942c <free>:
 800942c:	4b02      	ldr	r3, [pc, #8]	; (8009438 <free+0xc>)
 800942e:	4601      	mov	r1, r0
 8009430:	6818      	ldr	r0, [r3, #0]
 8009432:	f000 b82f 	b.w	8009494 <_free_r>
 8009436:	bf00      	nop
 8009438:	20000180 	.word	0x20000180

0800943c <memcpy>:
 800943c:	b510      	push	{r4, lr}
 800943e:	1e43      	subs	r3, r0, #1
 8009440:	440a      	add	r2, r1
 8009442:	4291      	cmp	r1, r2
 8009444:	d100      	bne.n	8009448 <memcpy+0xc>
 8009446:	bd10      	pop	{r4, pc}
 8009448:	f811 4b01 	ldrb.w	r4, [r1], #1
 800944c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009450:	e7f7      	b.n	8009442 <memcpy+0x6>

08009452 <memmove>:
 8009452:	4288      	cmp	r0, r1
 8009454:	b510      	push	{r4, lr}
 8009456:	eb01 0302 	add.w	r3, r1, r2
 800945a:	d807      	bhi.n	800946c <memmove+0x1a>
 800945c:	1e42      	subs	r2, r0, #1
 800945e:	4299      	cmp	r1, r3
 8009460:	d00a      	beq.n	8009478 <memmove+0x26>
 8009462:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009466:	f802 4f01 	strb.w	r4, [r2, #1]!
 800946a:	e7f8      	b.n	800945e <memmove+0xc>
 800946c:	4283      	cmp	r3, r0
 800946e:	d9f5      	bls.n	800945c <memmove+0xa>
 8009470:	1881      	adds	r1, r0, r2
 8009472:	1ad2      	subs	r2, r2, r3
 8009474:	42d3      	cmn	r3, r2
 8009476:	d100      	bne.n	800947a <memmove+0x28>
 8009478:	bd10      	pop	{r4, pc}
 800947a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800947e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009482:	e7f7      	b.n	8009474 <memmove+0x22>

08009484 <memset>:
 8009484:	4402      	add	r2, r0
 8009486:	4603      	mov	r3, r0
 8009488:	4293      	cmp	r3, r2
 800948a:	d100      	bne.n	800948e <memset+0xa>
 800948c:	4770      	bx	lr
 800948e:	f803 1b01 	strb.w	r1, [r3], #1
 8009492:	e7f9      	b.n	8009488 <memset+0x4>

08009494 <_free_r>:
 8009494:	b538      	push	{r3, r4, r5, lr}
 8009496:	4605      	mov	r5, r0
 8009498:	2900      	cmp	r1, #0
 800949a:	d045      	beq.n	8009528 <_free_r+0x94>
 800949c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094a0:	1f0c      	subs	r4, r1, #4
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	bfb8      	it	lt
 80094a6:	18e4      	addlt	r4, r4, r3
 80094a8:	f000 f8b4 	bl	8009614 <__malloc_lock>
 80094ac:	4a1f      	ldr	r2, [pc, #124]	; (800952c <_free_r+0x98>)
 80094ae:	6813      	ldr	r3, [r2, #0]
 80094b0:	4610      	mov	r0, r2
 80094b2:	b933      	cbnz	r3, 80094c2 <_free_r+0x2e>
 80094b4:	6063      	str	r3, [r4, #4]
 80094b6:	6014      	str	r4, [r2, #0]
 80094b8:	4628      	mov	r0, r5
 80094ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094be:	f000 b8aa 	b.w	8009616 <__malloc_unlock>
 80094c2:	42a3      	cmp	r3, r4
 80094c4:	d90c      	bls.n	80094e0 <_free_r+0x4c>
 80094c6:	6821      	ldr	r1, [r4, #0]
 80094c8:	1862      	adds	r2, r4, r1
 80094ca:	4293      	cmp	r3, r2
 80094cc:	bf04      	itt	eq
 80094ce:	681a      	ldreq	r2, [r3, #0]
 80094d0:	685b      	ldreq	r3, [r3, #4]
 80094d2:	6063      	str	r3, [r4, #4]
 80094d4:	bf04      	itt	eq
 80094d6:	1852      	addeq	r2, r2, r1
 80094d8:	6022      	streq	r2, [r4, #0]
 80094da:	6004      	str	r4, [r0, #0]
 80094dc:	e7ec      	b.n	80094b8 <_free_r+0x24>
 80094de:	4613      	mov	r3, r2
 80094e0:	685a      	ldr	r2, [r3, #4]
 80094e2:	b10a      	cbz	r2, 80094e8 <_free_r+0x54>
 80094e4:	42a2      	cmp	r2, r4
 80094e6:	d9fa      	bls.n	80094de <_free_r+0x4a>
 80094e8:	6819      	ldr	r1, [r3, #0]
 80094ea:	1858      	adds	r0, r3, r1
 80094ec:	42a0      	cmp	r0, r4
 80094ee:	d10b      	bne.n	8009508 <_free_r+0x74>
 80094f0:	6820      	ldr	r0, [r4, #0]
 80094f2:	4401      	add	r1, r0
 80094f4:	1858      	adds	r0, r3, r1
 80094f6:	4282      	cmp	r2, r0
 80094f8:	6019      	str	r1, [r3, #0]
 80094fa:	d1dd      	bne.n	80094b8 <_free_r+0x24>
 80094fc:	6810      	ldr	r0, [r2, #0]
 80094fe:	6852      	ldr	r2, [r2, #4]
 8009500:	605a      	str	r2, [r3, #4]
 8009502:	4401      	add	r1, r0
 8009504:	6019      	str	r1, [r3, #0]
 8009506:	e7d7      	b.n	80094b8 <_free_r+0x24>
 8009508:	d902      	bls.n	8009510 <_free_r+0x7c>
 800950a:	230c      	movs	r3, #12
 800950c:	602b      	str	r3, [r5, #0]
 800950e:	e7d3      	b.n	80094b8 <_free_r+0x24>
 8009510:	6820      	ldr	r0, [r4, #0]
 8009512:	1821      	adds	r1, r4, r0
 8009514:	428a      	cmp	r2, r1
 8009516:	bf04      	itt	eq
 8009518:	6811      	ldreq	r1, [r2, #0]
 800951a:	6852      	ldreq	r2, [r2, #4]
 800951c:	6062      	str	r2, [r4, #4]
 800951e:	bf04      	itt	eq
 8009520:	1809      	addeq	r1, r1, r0
 8009522:	6021      	streq	r1, [r4, #0]
 8009524:	605c      	str	r4, [r3, #4]
 8009526:	e7c7      	b.n	80094b8 <_free_r+0x24>
 8009528:	bd38      	pop	{r3, r4, r5, pc}
 800952a:	bf00      	nop
 800952c:	200048b8 	.word	0x200048b8

08009530 <_malloc_r>:
 8009530:	b570      	push	{r4, r5, r6, lr}
 8009532:	1ccd      	adds	r5, r1, #3
 8009534:	f025 0503 	bic.w	r5, r5, #3
 8009538:	3508      	adds	r5, #8
 800953a:	2d0c      	cmp	r5, #12
 800953c:	bf38      	it	cc
 800953e:	250c      	movcc	r5, #12
 8009540:	2d00      	cmp	r5, #0
 8009542:	4606      	mov	r6, r0
 8009544:	db01      	blt.n	800954a <_malloc_r+0x1a>
 8009546:	42a9      	cmp	r1, r5
 8009548:	d903      	bls.n	8009552 <_malloc_r+0x22>
 800954a:	230c      	movs	r3, #12
 800954c:	6033      	str	r3, [r6, #0]
 800954e:	2000      	movs	r0, #0
 8009550:	bd70      	pop	{r4, r5, r6, pc}
 8009552:	f000 f85f 	bl	8009614 <__malloc_lock>
 8009556:	4a21      	ldr	r2, [pc, #132]	; (80095dc <_malloc_r+0xac>)
 8009558:	6814      	ldr	r4, [r2, #0]
 800955a:	4621      	mov	r1, r4
 800955c:	b991      	cbnz	r1, 8009584 <_malloc_r+0x54>
 800955e:	4c20      	ldr	r4, [pc, #128]	; (80095e0 <_malloc_r+0xb0>)
 8009560:	6823      	ldr	r3, [r4, #0]
 8009562:	b91b      	cbnz	r3, 800956c <_malloc_r+0x3c>
 8009564:	4630      	mov	r0, r6
 8009566:	f000 f845 	bl	80095f4 <_sbrk_r>
 800956a:	6020      	str	r0, [r4, #0]
 800956c:	4629      	mov	r1, r5
 800956e:	4630      	mov	r0, r6
 8009570:	f000 f840 	bl	80095f4 <_sbrk_r>
 8009574:	1c43      	adds	r3, r0, #1
 8009576:	d124      	bne.n	80095c2 <_malloc_r+0x92>
 8009578:	230c      	movs	r3, #12
 800957a:	6033      	str	r3, [r6, #0]
 800957c:	4630      	mov	r0, r6
 800957e:	f000 f84a 	bl	8009616 <__malloc_unlock>
 8009582:	e7e4      	b.n	800954e <_malloc_r+0x1e>
 8009584:	680b      	ldr	r3, [r1, #0]
 8009586:	1b5b      	subs	r3, r3, r5
 8009588:	d418      	bmi.n	80095bc <_malloc_r+0x8c>
 800958a:	2b0b      	cmp	r3, #11
 800958c:	d90f      	bls.n	80095ae <_malloc_r+0x7e>
 800958e:	600b      	str	r3, [r1, #0]
 8009590:	50cd      	str	r5, [r1, r3]
 8009592:	18cc      	adds	r4, r1, r3
 8009594:	4630      	mov	r0, r6
 8009596:	f000 f83e 	bl	8009616 <__malloc_unlock>
 800959a:	f104 000b 	add.w	r0, r4, #11
 800959e:	1d23      	adds	r3, r4, #4
 80095a0:	f020 0007 	bic.w	r0, r0, #7
 80095a4:	1ac3      	subs	r3, r0, r3
 80095a6:	d0d3      	beq.n	8009550 <_malloc_r+0x20>
 80095a8:	425a      	negs	r2, r3
 80095aa:	50e2      	str	r2, [r4, r3]
 80095ac:	e7d0      	b.n	8009550 <_malloc_r+0x20>
 80095ae:	428c      	cmp	r4, r1
 80095b0:	684b      	ldr	r3, [r1, #4]
 80095b2:	bf16      	itet	ne
 80095b4:	6063      	strne	r3, [r4, #4]
 80095b6:	6013      	streq	r3, [r2, #0]
 80095b8:	460c      	movne	r4, r1
 80095ba:	e7eb      	b.n	8009594 <_malloc_r+0x64>
 80095bc:	460c      	mov	r4, r1
 80095be:	6849      	ldr	r1, [r1, #4]
 80095c0:	e7cc      	b.n	800955c <_malloc_r+0x2c>
 80095c2:	1cc4      	adds	r4, r0, #3
 80095c4:	f024 0403 	bic.w	r4, r4, #3
 80095c8:	42a0      	cmp	r0, r4
 80095ca:	d005      	beq.n	80095d8 <_malloc_r+0xa8>
 80095cc:	1a21      	subs	r1, r4, r0
 80095ce:	4630      	mov	r0, r6
 80095d0:	f000 f810 	bl	80095f4 <_sbrk_r>
 80095d4:	3001      	adds	r0, #1
 80095d6:	d0cf      	beq.n	8009578 <_malloc_r+0x48>
 80095d8:	6025      	str	r5, [r4, #0]
 80095da:	e7db      	b.n	8009594 <_malloc_r+0x64>
 80095dc:	200048b8 	.word	0x200048b8
 80095e0:	200048bc 	.word	0x200048bc

080095e4 <realloc>:
 80095e4:	4b02      	ldr	r3, [pc, #8]	; (80095f0 <realloc+0xc>)
 80095e6:	460a      	mov	r2, r1
 80095e8:	4601      	mov	r1, r0
 80095ea:	6818      	ldr	r0, [r3, #0]
 80095ec:	f000 b814 	b.w	8009618 <_realloc_r>
 80095f0:	20000180 	.word	0x20000180

080095f4 <_sbrk_r>:
 80095f4:	b538      	push	{r3, r4, r5, lr}
 80095f6:	4c06      	ldr	r4, [pc, #24]	; (8009610 <_sbrk_r+0x1c>)
 80095f8:	2300      	movs	r3, #0
 80095fa:	4605      	mov	r5, r0
 80095fc:	4608      	mov	r0, r1
 80095fe:	6023      	str	r3, [r4, #0]
 8009600:	f7fd f8f8 	bl	80067f4 <_sbrk>
 8009604:	1c43      	adds	r3, r0, #1
 8009606:	d102      	bne.n	800960e <_sbrk_r+0x1a>
 8009608:	6823      	ldr	r3, [r4, #0]
 800960a:	b103      	cbz	r3, 800960e <_sbrk_r+0x1a>
 800960c:	602b      	str	r3, [r5, #0]
 800960e:	bd38      	pop	{r3, r4, r5, pc}
 8009610:	20005d08 	.word	0x20005d08

08009614 <__malloc_lock>:
 8009614:	4770      	bx	lr

08009616 <__malloc_unlock>:
 8009616:	4770      	bx	lr

08009618 <_realloc_r>:
 8009618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800961a:	4607      	mov	r7, r0
 800961c:	4614      	mov	r4, r2
 800961e:	460e      	mov	r6, r1
 8009620:	b921      	cbnz	r1, 800962c <_realloc_r+0x14>
 8009622:	4611      	mov	r1, r2
 8009624:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009628:	f7ff bf82 	b.w	8009530 <_malloc_r>
 800962c:	b922      	cbnz	r2, 8009638 <_realloc_r+0x20>
 800962e:	f7ff ff31 	bl	8009494 <_free_r>
 8009632:	4625      	mov	r5, r4
 8009634:	4628      	mov	r0, r5
 8009636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009638:	f000 f814 	bl	8009664 <_malloc_usable_size_r>
 800963c:	42a0      	cmp	r0, r4
 800963e:	d20f      	bcs.n	8009660 <_realloc_r+0x48>
 8009640:	4621      	mov	r1, r4
 8009642:	4638      	mov	r0, r7
 8009644:	f7ff ff74 	bl	8009530 <_malloc_r>
 8009648:	4605      	mov	r5, r0
 800964a:	2800      	cmp	r0, #0
 800964c:	d0f2      	beq.n	8009634 <_realloc_r+0x1c>
 800964e:	4631      	mov	r1, r6
 8009650:	4622      	mov	r2, r4
 8009652:	f7ff fef3 	bl	800943c <memcpy>
 8009656:	4631      	mov	r1, r6
 8009658:	4638      	mov	r0, r7
 800965a:	f7ff ff1b 	bl	8009494 <_free_r>
 800965e:	e7e9      	b.n	8009634 <_realloc_r+0x1c>
 8009660:	4635      	mov	r5, r6
 8009662:	e7e7      	b.n	8009634 <_realloc_r+0x1c>

08009664 <_malloc_usable_size_r>:
 8009664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009668:	1f18      	subs	r0, r3, #4
 800966a:	2b00      	cmp	r3, #0
 800966c:	bfbc      	itt	lt
 800966e:	580b      	ldrlt	r3, [r1, r0]
 8009670:	18c0      	addlt	r0, r0, r3
 8009672:	4770      	bx	lr

08009674 <_init>:
 8009674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009676:	bf00      	nop
 8009678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800967a:	bc08      	pop	{r3}
 800967c:	469e      	mov	lr, r3
 800967e:	4770      	bx	lr

08009680 <_fini>:
 8009680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009682:	bf00      	nop
 8009684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009686:	bc08      	pop	{r3}
 8009688:	469e      	mov	lr, r3
 800968a:	4770      	bx	lr
