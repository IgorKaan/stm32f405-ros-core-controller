
STM32F405VGFULL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a778  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d4  0800a908  0800a908  0001a908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000018  0800b0dc  0800b0dc  0001b0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000110  0800b0f4  0800b0f4  0001b0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  0800b204  0800b204  0001b204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800b20c  0800b20c  0001b20c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         000001e4  20000000  0800b210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
  9 .bss          00005b08  200001e4  200001e4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005cec  20005cec  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003858f  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006c70  00000000  00000000  000587a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001db39  00000000  00000000  0005f413  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001878  00000000  00000000  0007cf50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00004858  00000000  00000000  0007e7c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000104ae  00000000  00000000  00083020  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b4c4  00000000  00000000  000934ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  0009e992  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005840  00000000  00000000  0009ea10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a8f0 	.word	0x0800a8f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800a8f0 	.word	0x0800a8f0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000204:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000208:	f001 b8f6 	b.w	80013f8 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	468c      	mov	ip, r1
 800022a:	460d      	mov	r5, r1
 800022c:	4604      	mov	r4, r0
 800022e:	9e08      	ldr	r6, [sp, #32]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d151      	bne.n	80002d8 <__udivmoddi4+0xb4>
 8000234:	428a      	cmp	r2, r1
 8000236:	4617      	mov	r7, r2
 8000238:	d96d      	bls.n	8000316 <__udivmoddi4+0xf2>
 800023a:	fab2 fe82 	clz	lr, r2
 800023e:	f1be 0f00 	cmp.w	lr, #0
 8000242:	d00b      	beq.n	800025c <__udivmoddi4+0x38>
 8000244:	f1ce 0c20 	rsb	ip, lr, #32
 8000248:	fa01 f50e 	lsl.w	r5, r1, lr
 800024c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000250:	fa02 f70e 	lsl.w	r7, r2, lr
 8000254:	ea4c 0c05 	orr.w	ip, ip, r5
 8000258:	fa00 f40e 	lsl.w	r4, r0, lr
 800025c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000260:	0c25      	lsrs	r5, r4, #16
 8000262:	fbbc f8fa 	udiv	r8, ip, sl
 8000266:	fa1f f987 	uxth.w	r9, r7
 800026a:	fb0a cc18 	mls	ip, sl, r8, ip
 800026e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000272:	fb08 f309 	mul.w	r3, r8, r9
 8000276:	42ab      	cmp	r3, r5
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x6c>
 800027a:	19ed      	adds	r5, r5, r7
 800027c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000280:	f080 8123 	bcs.w	80004ca <__udivmoddi4+0x2a6>
 8000284:	42ab      	cmp	r3, r5
 8000286:	f240 8120 	bls.w	80004ca <__udivmoddi4+0x2a6>
 800028a:	f1a8 0802 	sub.w	r8, r8, #2
 800028e:	443d      	add	r5, r7
 8000290:	1aed      	subs	r5, r5, r3
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb5 f0fa 	udiv	r0, r5, sl
 8000298:	fb0a 5510 	mls	r5, sl, r0, r5
 800029c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a0:	fb00 f909 	mul.w	r9, r0, r9
 80002a4:	45a1      	cmp	r9, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x98>
 80002a8:	19e4      	adds	r4, r4, r7
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ae:	f080 810a 	bcs.w	80004c6 <__udivmoddi4+0x2a2>
 80002b2:	45a1      	cmp	r9, r4
 80002b4:	f240 8107 	bls.w	80004c6 <__udivmoddi4+0x2a2>
 80002b8:	3802      	subs	r0, #2
 80002ba:	443c      	add	r4, r7
 80002bc:	eba4 0409 	sub.w	r4, r4, r9
 80002c0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c4:	2100      	movs	r1, #0
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d061      	beq.n	800038e <__udivmoddi4+0x16a>
 80002ca:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ce:	2300      	movs	r3, #0
 80002d0:	6034      	str	r4, [r6, #0]
 80002d2:	6073      	str	r3, [r6, #4]
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xc8>
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d054      	beq.n	800038a <__udivmoddi4+0x166>
 80002e0:	2100      	movs	r1, #0
 80002e2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e6:	4608      	mov	r0, r1
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	fab3 f183 	clz	r1, r3
 80002f0:	2900      	cmp	r1, #0
 80002f2:	f040 808e 	bne.w	8000412 <__udivmoddi4+0x1ee>
 80002f6:	42ab      	cmp	r3, r5
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xdc>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80fa 	bhi.w	80004f4 <__udivmoddi4+0x2d0>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb65 0503 	sbc.w	r5, r5, r3
 8000306:	2001      	movs	r0, #1
 8000308:	46ac      	mov	ip, r5
 800030a:	2e00      	cmp	r6, #0
 800030c:	d03f      	beq.n	800038e <__udivmoddi4+0x16a>
 800030e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	b912      	cbnz	r2, 800031e <__udivmoddi4+0xfa>
 8000318:	2701      	movs	r7, #1
 800031a:	fbb7 f7f2 	udiv	r7, r7, r2
 800031e:	fab7 fe87 	clz	lr, r7
 8000322:	f1be 0f00 	cmp.w	lr, #0
 8000326:	d134      	bne.n	8000392 <__udivmoddi4+0x16e>
 8000328:	1beb      	subs	r3, r5, r7
 800032a:	0c3a      	lsrs	r2, r7, #16
 800032c:	fa1f fc87 	uxth.w	ip, r7
 8000330:	2101      	movs	r1, #1
 8000332:	fbb3 f8f2 	udiv	r8, r3, r2
 8000336:	0c25      	lsrs	r5, r4, #16
 8000338:	fb02 3318 	mls	r3, r2, r8, r3
 800033c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000340:	fb0c f308 	mul.w	r3, ip, r8
 8000344:	42ab      	cmp	r3, r5
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x134>
 8000348:	19ed      	adds	r5, r5, r7
 800034a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x132>
 8000350:	42ab      	cmp	r3, r5
 8000352:	f200 80d1 	bhi.w	80004f8 <__udivmoddi4+0x2d4>
 8000356:	4680      	mov	r8, r0
 8000358:	1aed      	subs	r5, r5, r3
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000360:	fb02 5510 	mls	r5, r2, r0, r5
 8000364:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000368:	fb0c fc00 	mul.w	ip, ip, r0
 800036c:	45a4      	cmp	ip, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x15c>
 8000370:	19e4      	adds	r4, r4, r7
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x15a>
 8000378:	45a4      	cmp	ip, r4
 800037a:	f200 80b8 	bhi.w	80004ee <__udivmoddi4+0x2ca>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000388:	e79d      	b.n	80002c6 <__udivmoddi4+0xa2>
 800038a:	4631      	mov	r1, r6
 800038c:	4630      	mov	r0, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	f1ce 0420 	rsb	r4, lr, #32
 8000396:	fa05 f30e 	lsl.w	r3, r5, lr
 800039a:	fa07 f70e 	lsl.w	r7, r7, lr
 800039e:	fa20 f804 	lsr.w	r8, r0, r4
 80003a2:	0c3a      	lsrs	r2, r7, #16
 80003a4:	fa25 f404 	lsr.w	r4, r5, r4
 80003a8:	ea48 0803 	orr.w	r8, r8, r3
 80003ac:	fbb4 f1f2 	udiv	r1, r4, r2
 80003b0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b4:	fb02 4411 	mls	r4, r2, r1, r4
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003c0:	fb01 f30c 	mul.w	r3, r1, ip
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1bc>
 80003cc:	19ed      	adds	r5, r5, r7
 80003ce:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003d2:	f080 808a 	bcs.w	80004ea <__udivmoddi4+0x2c6>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	f240 8087 	bls.w	80004ea <__udivmoddi4+0x2c6>
 80003dc:	3902      	subs	r1, #2
 80003de:	443d      	add	r5, r7
 80003e0:	1aeb      	subs	r3, r5, r3
 80003e2:	fa1f f588 	uxth.w	r5, r8
 80003e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ea:	fb02 3310 	mls	r3, r2, r0, r3
 80003ee:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003f2:	fb00 f30c 	mul.w	r3, r0, ip
 80003f6:	42ab      	cmp	r3, r5
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1e6>
 80003fa:	19ed      	adds	r5, r5, r7
 80003fc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000400:	d26f      	bcs.n	80004e2 <__udivmoddi4+0x2be>
 8000402:	42ab      	cmp	r3, r5
 8000404:	d96d      	bls.n	80004e2 <__udivmoddi4+0x2be>
 8000406:	3802      	subs	r0, #2
 8000408:	443d      	add	r5, r7
 800040a:	1aeb      	subs	r3, r5, r3
 800040c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000410:	e78f      	b.n	8000332 <__udivmoddi4+0x10e>
 8000412:	f1c1 0720 	rsb	r7, r1, #32
 8000416:	fa22 f807 	lsr.w	r8, r2, r7
 800041a:	408b      	lsls	r3, r1
 800041c:	fa05 f401 	lsl.w	r4, r5, r1
 8000420:	ea48 0303 	orr.w	r3, r8, r3
 8000424:	fa20 fe07 	lsr.w	lr, r0, r7
 8000428:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800042c:	40fd      	lsrs	r5, r7
 800042e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000432:	fbb5 f9fc 	udiv	r9, r5, ip
 8000436:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800043a:	fb0c 5519 	mls	r5, ip, r9, r5
 800043e:	fa1f f883 	uxth.w	r8, r3
 8000442:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000446:	fb09 f408 	mul.w	r4, r9, r8
 800044a:	42ac      	cmp	r4, r5
 800044c:	fa02 f201 	lsl.w	r2, r2, r1
 8000450:	fa00 fa01 	lsl.w	sl, r0, r1
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x244>
 8000456:	18ed      	adds	r5, r5, r3
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800045c:	d243      	bcs.n	80004e6 <__udivmoddi4+0x2c2>
 800045e:	42ac      	cmp	r4, r5
 8000460:	d941      	bls.n	80004e6 <__udivmoddi4+0x2c2>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	441d      	add	r5, r3
 8000468:	1b2d      	subs	r5, r5, r4
 800046a:	fa1f fe8e 	uxth.w	lr, lr
 800046e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000472:	fb0c 5510 	mls	r5, ip, r0, r5
 8000476:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45a0      	cmp	r8, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x26e>
 8000482:	18e4      	adds	r4, r4, r3
 8000484:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000488:	d229      	bcs.n	80004de <__udivmoddi4+0x2ba>
 800048a:	45a0      	cmp	r8, r4
 800048c:	d927      	bls.n	80004de <__udivmoddi4+0x2ba>
 800048e:	3802      	subs	r0, #2
 8000490:	441c      	add	r4, r3
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba4 0408 	sub.w	r4, r4, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454c      	cmp	r4, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	464d      	mov	r5, r9
 80004a4:	d315      	bcc.n	80004d2 <__udivmoddi4+0x2ae>
 80004a6:	d012      	beq.n	80004ce <__udivmoddi4+0x2aa>
 80004a8:	b156      	cbz	r6, 80004c0 <__udivmoddi4+0x29c>
 80004aa:	ebba 030e 	subs.w	r3, sl, lr
 80004ae:	eb64 0405 	sbc.w	r4, r4, r5
 80004b2:	fa04 f707 	lsl.w	r7, r4, r7
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431f      	orrs	r7, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	6037      	str	r7, [r6, #0]
 80004be:	6074      	str	r4, [r6, #4]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c6:	4618      	mov	r0, r3
 80004c8:	e6f8      	b.n	80002bc <__udivmoddi4+0x98>
 80004ca:	4690      	mov	r8, r2
 80004cc:	e6e0      	b.n	8000290 <__udivmoddi4+0x6c>
 80004ce:	45c2      	cmp	sl, r8
 80004d0:	d2ea      	bcs.n	80004a8 <__udivmoddi4+0x284>
 80004d2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d6:	eb69 0503 	sbc.w	r5, r9, r3
 80004da:	3801      	subs	r0, #1
 80004dc:	e7e4      	b.n	80004a8 <__udivmoddi4+0x284>
 80004de:	4628      	mov	r0, r5
 80004e0:	e7d7      	b.n	8000492 <__udivmoddi4+0x26e>
 80004e2:	4640      	mov	r0, r8
 80004e4:	e791      	b.n	800040a <__udivmoddi4+0x1e6>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e7be      	b.n	8000468 <__udivmoddi4+0x244>
 80004ea:	4601      	mov	r1, r0
 80004ec:	e778      	b.n	80003e0 <__udivmoddi4+0x1bc>
 80004ee:	3802      	subs	r0, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	e745      	b.n	8000380 <__udivmoddi4+0x15c>
 80004f4:	4608      	mov	r0, r1
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xe6>
 80004f8:	f1a8 0802 	sub.w	r8, r8, #2
 80004fc:	443d      	add	r5, r7
 80004fe:	e72b      	b.n	8000358 <__udivmoddi4+0x134>

08000500 <selfrel_offset31>:
 8000500:	6803      	ldr	r3, [r0, #0]
 8000502:	005a      	lsls	r2, r3, #1
 8000504:	bf4c      	ite	mi
 8000506:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800050a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800050e:	4418      	add	r0, r3
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <search_EIT_table>:
 8000514:	b361      	cbz	r1, 8000570 <search_EIT_table+0x5c>
 8000516:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800051a:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 800051e:	4690      	mov	r8, r2
 8000520:	4606      	mov	r6, r0
 8000522:	46d1      	mov	r9, sl
 8000524:	2700      	movs	r7, #0
 8000526:	eb07 0409 	add.w	r4, r7, r9
 800052a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800052e:	1064      	asrs	r4, r4, #1
 8000530:	00e5      	lsls	r5, r4, #3
 8000532:	1971      	adds	r1, r6, r5
 8000534:	4608      	mov	r0, r1
 8000536:	f7ff ffe3 	bl	8000500 <selfrel_offset31>
 800053a:	45a2      	cmp	sl, r4
 800053c:	4683      	mov	fp, r0
 800053e:	f105 0008 	add.w	r0, r5, #8
 8000542:	4430      	add	r0, r6
 8000544:	d009      	beq.n	800055a <search_EIT_table+0x46>
 8000546:	f7ff ffdb 	bl	8000500 <selfrel_offset31>
 800054a:	45c3      	cmp	fp, r8
 800054c:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8000550:	d805      	bhi.n	800055e <search_EIT_table+0x4a>
 8000552:	4540      	cmp	r0, r8
 8000554:	d209      	bcs.n	800056a <search_EIT_table+0x56>
 8000556:	1c67      	adds	r7, r4, #1
 8000558:	e7e5      	b.n	8000526 <search_EIT_table+0x12>
 800055a:	45c3      	cmp	fp, r8
 800055c:	d905      	bls.n	800056a <search_EIT_table+0x56>
 800055e:	42a7      	cmp	r7, r4
 8000560:	d002      	beq.n	8000568 <search_EIT_table+0x54>
 8000562:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8000566:	e7de      	b.n	8000526 <search_EIT_table+0x12>
 8000568:	2100      	movs	r1, #0
 800056a:	4608      	mov	r0, r1
 800056c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000570:	4608      	mov	r0, r1
 8000572:	4770      	bx	lr

08000574 <__gnu_unwind_get_pr_addr>:
 8000574:	2801      	cmp	r0, #1
 8000576:	d007      	beq.n	8000588 <__gnu_unwind_get_pr_addr+0x14>
 8000578:	2802      	cmp	r0, #2
 800057a:	d007      	beq.n	800058c <__gnu_unwind_get_pr_addr+0x18>
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <__gnu_unwind_get_pr_addr+0x1c>)
 800057e:	2800      	cmp	r0, #0
 8000580:	bf0c      	ite	eq
 8000582:	4618      	moveq	r0, r3
 8000584:	2000      	movne	r0, #0
 8000586:	4770      	bx	lr
 8000588:	4802      	ldr	r0, [pc, #8]	; (8000594 <__gnu_unwind_get_pr_addr+0x20>)
 800058a:	4770      	bx	lr
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <__gnu_unwind_get_pr_addr+0x24>)
 800058e:	4770      	bx	lr
 8000590:	08000c79 	.word	0x08000c79
 8000594:	08000c7d 	.word	0x08000c7d
 8000598:	08000c81 	.word	0x08000c81

0800059c <get_eit_entry>:
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	4b24      	ldr	r3, [pc, #144]	; (8000630 <get_eit_entry+0x94>)
 80005a0:	b083      	sub	sp, #12
 80005a2:	4604      	mov	r4, r0
 80005a4:	1e8d      	subs	r5, r1, #2
 80005a6:	b37b      	cbz	r3, 8000608 <get_eit_entry+0x6c>
 80005a8:	a901      	add	r1, sp, #4
 80005aa:	4628      	mov	r0, r5
 80005ac:	f3af 8000 	nop.w
 80005b0:	b320      	cbz	r0, 80005fc <get_eit_entry+0x60>
 80005b2:	9901      	ldr	r1, [sp, #4]
 80005b4:	462a      	mov	r2, r5
 80005b6:	f7ff ffad 	bl	8000514 <search_EIT_table>
 80005ba:	4601      	mov	r1, r0
 80005bc:	b1f0      	cbz	r0, 80005fc <get_eit_entry+0x60>
 80005be:	f7ff ff9f 	bl	8000500 <selfrel_offset31>
 80005c2:	684b      	ldr	r3, [r1, #4]
 80005c4:	64a0      	str	r0, [r4, #72]	; 0x48
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d012      	beq.n	80005f0 <get_eit_entry+0x54>
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	f101 0004 	add.w	r0, r1, #4
 80005d0:	db20      	blt.n	8000614 <get_eit_entry+0x78>
 80005d2:	f7ff ff95 	bl	8000500 <selfrel_offset31>
 80005d6:	2300      	movs	r3, #0
 80005d8:	64e0      	str	r0, [r4, #76]	; 0x4c
 80005da:	6523      	str	r3, [r4, #80]	; 0x50
 80005dc:	6803      	ldr	r3, [r0, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	db1c      	blt.n	800061c <get_eit_entry+0x80>
 80005e2:	f7ff ff8d 	bl	8000500 <selfrel_offset31>
 80005e6:	2300      	movs	r3, #0
 80005e8:	6120      	str	r0, [r4, #16]
 80005ea:	4618      	mov	r0, r3
 80005ec:	b003      	add	sp, #12
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	2300      	movs	r3, #0
 80005f2:	6123      	str	r3, [r4, #16]
 80005f4:	2305      	movs	r3, #5
 80005f6:	4618      	mov	r0, r3
 80005f8:	b003      	add	sp, #12
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	2300      	movs	r3, #0
 80005fe:	6123      	str	r3, [r4, #16]
 8000600:	2309      	movs	r3, #9
 8000602:	4618      	mov	r0, r3
 8000604:	b003      	add	sp, #12
 8000606:	bd30      	pop	{r4, r5, pc}
 8000608:	490a      	ldr	r1, [pc, #40]	; (8000634 <get_eit_entry+0x98>)
 800060a:	480b      	ldr	r0, [pc, #44]	; (8000638 <get_eit_entry+0x9c>)
 800060c:	1a09      	subs	r1, r1, r0
 800060e:	10c9      	asrs	r1, r1, #3
 8000610:	9101      	str	r1, [sp, #4]
 8000612:	e7cf      	b.n	80005b4 <get_eit_entry+0x18>
 8000614:	2301      	movs	r3, #1
 8000616:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000618:	6523      	str	r3, [r4, #80]	; 0x50
 800061a:	e7df      	b.n	80005dc <get_eit_entry+0x40>
 800061c:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000620:	f7ff ffa8 	bl	8000574 <__gnu_unwind_get_pr_addr>
 8000624:	2800      	cmp	r0, #0
 8000626:	6120      	str	r0, [r4, #16]
 8000628:	bf14      	ite	ne
 800062a:	2300      	movne	r3, #0
 800062c:	2309      	moveq	r3, #9
 800062e:	e7dc      	b.n	80005ea <get_eit_entry+0x4e>
 8000630:	00000000 	.word	0x00000000
 8000634:	0800b204 	.word	0x0800b204
 8000638:	0800b0f4 	.word	0x0800b0f4

0800063c <restore_non_core_regs>:
 800063c:	6803      	ldr	r3, [r0, #0]
 800063e:	07da      	lsls	r2, r3, #31
 8000640:	b510      	push	{r4, lr}
 8000642:	4604      	mov	r4, r0
 8000644:	d406      	bmi.n	8000654 <restore_non_core_regs+0x18>
 8000646:	079b      	lsls	r3, r3, #30
 8000648:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800064c:	d509      	bpl.n	8000662 <restore_non_core_regs+0x26>
 800064e:	f000 fc51 	bl	8000ef4 <__gnu_Unwind_Restore_VFP_D>
 8000652:	6823      	ldr	r3, [r4, #0]
 8000654:	0759      	lsls	r1, r3, #29
 8000656:	d509      	bpl.n	800066c <restore_non_core_regs+0x30>
 8000658:	071a      	lsls	r2, r3, #28
 800065a:	d50e      	bpl.n	800067a <restore_non_core_regs+0x3e>
 800065c:	06db      	lsls	r3, r3, #27
 800065e:	d513      	bpl.n	8000688 <restore_non_core_regs+0x4c>
 8000660:	bd10      	pop	{r4, pc}
 8000662:	f000 fc3f 	bl	8000ee4 <__gnu_Unwind_Restore_VFP>
 8000666:	6823      	ldr	r3, [r4, #0]
 8000668:	0759      	lsls	r1, r3, #29
 800066a:	d4f5      	bmi.n	8000658 <restore_non_core_regs+0x1c>
 800066c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000670:	f000 fc48 	bl	8000f04 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000674:	6823      	ldr	r3, [r4, #0]
 8000676:	071a      	lsls	r2, r3, #28
 8000678:	d4f0      	bmi.n	800065c <restore_non_core_regs+0x20>
 800067a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800067e:	f000 fc49 	bl	8000f14 <__gnu_Unwind_Restore_WMMXD>
 8000682:	6823      	ldr	r3, [r4, #0]
 8000684:	06db      	lsls	r3, r3, #27
 8000686:	d4eb      	bmi.n	8000660 <restore_non_core_regs+0x24>
 8000688:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800068c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000690:	f000 bc84 	b.w	8000f9c <__gnu_Unwind_Restore_WMMXC>

08000694 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000694:	6803      	ldr	r3, [r0, #0]
 8000696:	b103      	cbz	r3, 800069a <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000698:	4403      	add	r3, r0
 800069a:	4618      	mov	r0, r3
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <__gnu_unwind_24bit.isra.1>:
 80006a0:	2009      	movs	r0, #9
 80006a2:	4770      	bx	lr

080006a4 <_Unwind_DebugHook>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <unwind_phase2>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	4604      	mov	r4, r0
 80006ac:	460d      	mov	r5, r1
 80006ae:	e008      	b.n	80006c2 <unwind_phase2+0x1a>
 80006b0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80006b2:	6163      	str	r3, [r4, #20]
 80006b4:	462a      	mov	r2, r5
 80006b6:	6923      	ldr	r3, [r4, #16]
 80006b8:	4621      	mov	r1, r4
 80006ba:	2001      	movs	r0, #1
 80006bc:	4798      	blx	r3
 80006be:	2808      	cmp	r0, #8
 80006c0:	d108      	bne.n	80006d4 <unwind_phase2+0x2c>
 80006c2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80006c4:	4620      	mov	r0, r4
 80006c6:	f7ff ff69 	bl	800059c <get_eit_entry>
 80006ca:	4606      	mov	r6, r0
 80006cc:	2800      	cmp	r0, #0
 80006ce:	d0ef      	beq.n	80006b0 <unwind_phase2+0x8>
 80006d0:	f00a f8c3 	bl	800a85a <abort>
 80006d4:	2807      	cmp	r0, #7
 80006d6:	d1fb      	bne.n	80006d0 <unwind_phase2+0x28>
 80006d8:	4630      	mov	r0, r6
 80006da:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80006dc:	f7ff ffe2 	bl	80006a4 <_Unwind_DebugHook>
 80006e0:	1d28      	adds	r0, r5, #4
 80006e2:	f000 fbf3 	bl	8000ecc <__restore_core_regs>
 80006e6:	bf00      	nop

080006e8 <unwind_phase2_forced>:
 80006e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006ec:	1d0c      	adds	r4, r1, #4
 80006ee:	4605      	mov	r5, r0
 80006f0:	4692      	mov	sl, r2
 80006f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006f4:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80006f8:	ae03      	add	r6, sp, #12
 80006fa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80006fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000702:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000704:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000708:	ac02      	add	r4, sp, #8
 800070a:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800070e:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8000712:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000716:	2300      	movs	r3, #0
 8000718:	4628      	mov	r0, r5
 800071a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800071c:	6023      	str	r3, [r4, #0]
 800071e:	f7ff ff3d 	bl	800059c <get_eit_entry>
 8000722:	f1ba 0f00 	cmp.w	sl, #0
 8000726:	4607      	mov	r7, r0
 8000728:	bf14      	ite	ne
 800072a:	260a      	movne	r6, #10
 800072c:	2609      	moveq	r6, #9
 800072e:	b17f      	cbz	r7, 8000750 <unwind_phase2_forced+0x68>
 8000730:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000732:	f046 0110 	orr.w	r1, r6, #16
 8000736:	e88d 0210 	stmia.w	sp, {r4, r9}
 800073a:	462a      	mov	r2, r5
 800073c:	6463      	str	r3, [r4, #68]	; 0x44
 800073e:	2001      	movs	r0, #1
 8000740:	462b      	mov	r3, r5
 8000742:	47c0      	blx	r8
 8000744:	bb78      	cbnz	r0, 80007a6 <unwind_phase2_forced+0xbe>
 8000746:	4638      	mov	r0, r7
 8000748:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800074c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000750:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000752:	616b      	str	r3, [r5, #20]
 8000754:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000758:	4621      	mov	r1, r4
 800075a:	a87a      	add	r0, sp, #488	; 0x1e8
 800075c:	f009 ff5a 	bl	800a614 <memcpy>
 8000760:	692b      	ldr	r3, [r5, #16]
 8000762:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000764:	4629      	mov	r1, r5
 8000766:	4630      	mov	r0, r6
 8000768:	4798      	blx	r3
 800076a:	9b88      	ldr	r3, [sp, #544]	; 0x220
 800076c:	4682      	mov	sl, r0
 800076e:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000772:	4631      	mov	r1, r6
 8000774:	6463      	str	r3, [r4, #68]	; 0x44
 8000776:	462a      	mov	r2, r5
 8000778:	462b      	mov	r3, r5
 800077a:	2001      	movs	r0, #1
 800077c:	47c0      	blx	r8
 800077e:	b990      	cbnz	r0, 80007a6 <unwind_phase2_forced+0xbe>
 8000780:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000784:	a97a      	add	r1, sp, #488	; 0x1e8
 8000786:	4620      	mov	r0, r4
 8000788:	f009 ff44 	bl	800a614 <memcpy>
 800078c:	f1ba 0f08 	cmp.w	sl, #8
 8000790:	d106      	bne.n	80007a0 <unwind_phase2_forced+0xb8>
 8000792:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000794:	4628      	mov	r0, r5
 8000796:	f7ff ff01 	bl	800059c <get_eit_entry>
 800079a:	2609      	movs	r6, #9
 800079c:	4607      	mov	r7, r0
 800079e:	e7c6      	b.n	800072e <unwind_phase2_forced+0x46>
 80007a0:	f1ba 0f07 	cmp.w	sl, #7
 80007a4:	d005      	beq.n	80007b2 <unwind_phase2_forced+0xca>
 80007a6:	2709      	movs	r7, #9
 80007a8:	4638      	mov	r0, r7
 80007aa:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	4638      	mov	r0, r7
 80007b4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007b6:	f7ff ff75 	bl	80006a4 <_Unwind_DebugHook>
 80007ba:	a803      	add	r0, sp, #12
 80007bc:	f000 fb86 	bl	8000ecc <__restore_core_regs>

080007c0 <_Unwind_GetCFA>:
 80007c0:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80007c2:	4770      	bx	lr

080007c4 <__gnu_Unwind_RaiseException>:
 80007c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007c6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80007c8:	640b      	str	r3, [r1, #64]	; 0x40
 80007ca:	1d0e      	adds	r6, r1, #4
 80007cc:	460f      	mov	r7, r1
 80007ce:	4604      	mov	r4, r0
 80007d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007d2:	b0f9      	sub	sp, #484	; 0x1e4
 80007d4:	ad01      	add	r5, sp, #4
 80007d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007e0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007e4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80007e8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80007ec:	9600      	str	r6, [sp, #0]
 80007ee:	e006      	b.n	80007fe <__gnu_Unwind_RaiseException+0x3a>
 80007f0:	6923      	ldr	r3, [r4, #16]
 80007f2:	466a      	mov	r2, sp
 80007f4:	4621      	mov	r1, r4
 80007f6:	4798      	blx	r3
 80007f8:	2808      	cmp	r0, #8
 80007fa:	4605      	mov	r5, r0
 80007fc:	d108      	bne.n	8000810 <__gnu_Unwind_RaiseException+0x4c>
 80007fe:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000800:	4620      	mov	r0, r4
 8000802:	f7ff fecb 	bl	800059c <get_eit_entry>
 8000806:	2800      	cmp	r0, #0
 8000808:	d0f2      	beq.n	80007f0 <__gnu_Unwind_RaiseException+0x2c>
 800080a:	2009      	movs	r0, #9
 800080c:	b079      	add	sp, #484	; 0x1e4
 800080e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000810:	4668      	mov	r0, sp
 8000812:	f7ff ff13 	bl	800063c <restore_non_core_regs>
 8000816:	2d06      	cmp	r5, #6
 8000818:	d1f7      	bne.n	800080a <__gnu_Unwind_RaiseException+0x46>
 800081a:	4639      	mov	r1, r7
 800081c:	4620      	mov	r0, r4
 800081e:	f7ff ff43 	bl	80006a8 <unwind_phase2>
 8000822:	bf00      	nop

08000824 <__gnu_Unwind_ForcedUnwind>:
 8000824:	b430      	push	{r4, r5}
 8000826:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000828:	60c1      	str	r1, [r0, #12]
 800082a:	6182      	str	r2, [r0, #24]
 800082c:	4619      	mov	r1, r3
 800082e:	641d      	str	r5, [r3, #64]	; 0x40
 8000830:	2200      	movs	r2, #0
 8000832:	bc30      	pop	{r4, r5}
 8000834:	e758      	b.n	80006e8 <unwind_phase2_forced>
 8000836:	bf00      	nop

08000838 <__gnu_Unwind_Resume>:
 8000838:	b570      	push	{r4, r5, r6, lr}
 800083a:	68c6      	ldr	r6, [r0, #12]
 800083c:	6943      	ldr	r3, [r0, #20]
 800083e:	640b      	str	r3, [r1, #64]	; 0x40
 8000840:	b126      	cbz	r6, 800084c <__gnu_Unwind_Resume+0x14>
 8000842:	2201      	movs	r2, #1
 8000844:	f7ff ff50 	bl	80006e8 <unwind_phase2_forced>
 8000848:	f00a f807 	bl	800a85a <abort>
 800084c:	6903      	ldr	r3, [r0, #16]
 800084e:	460a      	mov	r2, r1
 8000850:	4604      	mov	r4, r0
 8000852:	460d      	mov	r5, r1
 8000854:	4601      	mov	r1, r0
 8000856:	2002      	movs	r0, #2
 8000858:	4798      	blx	r3
 800085a:	2807      	cmp	r0, #7
 800085c:	d007      	beq.n	800086e <__gnu_Unwind_Resume+0x36>
 800085e:	2808      	cmp	r0, #8
 8000860:	d103      	bne.n	800086a <__gnu_Unwind_Resume+0x32>
 8000862:	4629      	mov	r1, r5
 8000864:	4620      	mov	r0, r4
 8000866:	f7ff ff1f 	bl	80006a8 <unwind_phase2>
 800086a:	f009 fff6 	bl	800a85a <abort>
 800086e:	4630      	mov	r0, r6
 8000870:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000872:	f7ff ff17 	bl	80006a4 <_Unwind_DebugHook>
 8000876:	1d28      	adds	r0, r5, #4
 8000878:	f000 fb28 	bl	8000ecc <__restore_core_regs>

0800087c <__gnu_Unwind_Resume_or_Rethrow>:
 800087c:	68c2      	ldr	r2, [r0, #12]
 800087e:	b11a      	cbz	r2, 8000888 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000880:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8000882:	640a      	str	r2, [r1, #64]	; 0x40
 8000884:	2200      	movs	r2, #0
 8000886:	e72f      	b.n	80006e8 <unwind_phase2_forced>
 8000888:	e79c      	b.n	80007c4 <__gnu_Unwind_RaiseException>
 800088a:	bf00      	nop

0800088c <_Unwind_Complete>:
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop

08000890 <_Unwind_DeleteException>:
 8000890:	6883      	ldr	r3, [r0, #8]
 8000892:	b113      	cbz	r3, 800089a <_Unwind_DeleteException+0xa>
 8000894:	4601      	mov	r1, r0
 8000896:	2001      	movs	r0, #1
 8000898:	4718      	bx	r3
 800089a:	4770      	bx	lr

0800089c <_Unwind_VRS_Get>:
 800089c:	b500      	push	{lr}
 800089e:	2904      	cmp	r1, #4
 80008a0:	d807      	bhi.n	80008b2 <_Unwind_VRS_Get+0x16>
 80008a2:	e8df f001 	tbb	[pc, r1]
 80008a6:	0903      	.short	0x0903
 80008a8:	0906      	.short	0x0906
 80008aa:	09          	.byte	0x09
 80008ab:	00          	.byte	0x00
 80008ac:	b90b      	cbnz	r3, 80008b2 <_Unwind_VRS_Get+0x16>
 80008ae:	2a0f      	cmp	r2, #15
 80008b0:	d905      	bls.n	80008be <_Unwind_VRS_Get+0x22>
 80008b2:	2002      	movs	r0, #2
 80008b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80008b8:	2001      	movs	r0, #1
 80008ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80008be:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80008c2:	4618      	mov	r0, r3
 80008c4:	6853      	ldr	r3, [r2, #4]
 80008c6:	9a01      	ldr	r2, [sp, #4]
 80008c8:	6013      	str	r3, [r2, #0]
 80008ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80008ce:	bf00      	nop

080008d0 <_Unwind_GetGR>:
 80008d0:	b510      	push	{r4, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	2300      	movs	r3, #0
 80008d6:	ac03      	add	r4, sp, #12
 80008d8:	460a      	mov	r2, r1
 80008da:	9400      	str	r4, [sp, #0]
 80008dc:	4619      	mov	r1, r3
 80008de:	f7ff ffdd 	bl	800089c <_Unwind_VRS_Get>
 80008e2:	9803      	ldr	r0, [sp, #12]
 80008e4:	b004      	add	sp, #16
 80008e6:	bd10      	pop	{r4, pc}

080008e8 <_Unwind_VRS_Set>:
 80008e8:	b500      	push	{lr}
 80008ea:	2904      	cmp	r1, #4
 80008ec:	d807      	bhi.n	80008fe <_Unwind_VRS_Set+0x16>
 80008ee:	e8df f001 	tbb	[pc, r1]
 80008f2:	0903      	.short	0x0903
 80008f4:	0906      	.short	0x0906
 80008f6:	09          	.byte	0x09
 80008f7:	00          	.byte	0x00
 80008f8:	b90b      	cbnz	r3, 80008fe <_Unwind_VRS_Set+0x16>
 80008fa:	2a0f      	cmp	r2, #15
 80008fc:	d905      	bls.n	800090a <_Unwind_VRS_Set+0x22>
 80008fe:	2002      	movs	r0, #2
 8000900:	f85d fb04 	ldr.w	pc, [sp], #4
 8000904:	2001      	movs	r0, #1
 8000906:	f85d fb04 	ldr.w	pc, [sp], #4
 800090a:	9901      	ldr	r1, [sp, #4]
 800090c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000910:	6809      	ldr	r1, [r1, #0]
 8000912:	6051      	str	r1, [r2, #4]
 8000914:	4618      	mov	r0, r3
 8000916:	f85d fb04 	ldr.w	pc, [sp], #4
 800091a:	bf00      	nop

0800091c <_Unwind_SetGR>:
 800091c:	b510      	push	{r4, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	ac04      	add	r4, sp, #16
 8000922:	2300      	movs	r3, #0
 8000924:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000928:	460a      	mov	r2, r1
 800092a:	9400      	str	r4, [sp, #0]
 800092c:	4619      	mov	r1, r3
 800092e:	f7ff ffdb 	bl	80008e8 <_Unwind_VRS_Set>
 8000932:	b004      	add	sp, #16
 8000934:	bd10      	pop	{r4, pc}
 8000936:	bf00      	nop

08000938 <__gnu_Unwind_Backtrace>:
 8000938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
 800093e:	1d15      	adds	r5, r2, #4
 8000940:	4607      	mov	r7, r0
 8000942:	460e      	mov	r6, r1
 8000944:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000946:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800094a:	ac17      	add	r4, sp, #92	; 0x5c
 800094c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800094e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000950:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000954:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000956:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800095a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800095e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000962:	9516      	str	r5, [sp, #88]	; 0x58
 8000964:	e010      	b.n	8000988 <__gnu_Unwind_Backtrace+0x50>
 8000966:	a816      	add	r0, sp, #88	; 0x58
 8000968:	f7ff ffd8 	bl	800091c <_Unwind_SetGR>
 800096c:	4631      	mov	r1, r6
 800096e:	a816      	add	r0, sp, #88	; 0x58
 8000970:	47b8      	blx	r7
 8000972:	aa16      	add	r2, sp, #88	; 0x58
 8000974:	4669      	mov	r1, sp
 8000976:	b978      	cbnz	r0, 8000998 <__gnu_Unwind_Backtrace+0x60>
 8000978:	9b04      	ldr	r3, [sp, #16]
 800097a:	2008      	movs	r0, #8
 800097c:	4798      	blx	r3
 800097e:	2805      	cmp	r0, #5
 8000980:	4604      	mov	r4, r0
 8000982:	d00a      	beq.n	800099a <__gnu_Unwind_Backtrace+0x62>
 8000984:	2809      	cmp	r0, #9
 8000986:	d007      	beq.n	8000998 <__gnu_Unwind_Backtrace+0x60>
 8000988:	9926      	ldr	r1, [sp, #152]	; 0x98
 800098a:	4668      	mov	r0, sp
 800098c:	f7ff fe06 	bl	800059c <get_eit_entry>
 8000990:	466a      	mov	r2, sp
 8000992:	210c      	movs	r1, #12
 8000994:	2800      	cmp	r0, #0
 8000996:	d0e6      	beq.n	8000966 <__gnu_Unwind_Backtrace+0x2e>
 8000998:	2409      	movs	r4, #9
 800099a:	a816      	add	r0, sp, #88	; 0x58
 800099c:	f7ff fe4e 	bl	800063c <restore_non_core_regs>
 80009a0:	4620      	mov	r0, r4
 80009a2:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80009a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080009a8 <__gnu_unwind_pr_common>:
 80009a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009ac:	460d      	mov	r5, r1
 80009ae:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80009b0:	b08b      	sub	sp, #44	; 0x2c
 80009b2:	1d0c      	adds	r4, r1, #4
 80009b4:	6809      	ldr	r1, [r1, #0]
 80009b6:	9107      	str	r1, [sp, #28]
 80009b8:	4691      	mov	r9, r2
 80009ba:	9408      	str	r4, [sp, #32]
 80009bc:	f000 0b03 	and.w	fp, r0, #3
 80009c0:	461e      	mov	r6, r3
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d160      	bne.n	8000a88 <__gnu_unwind_pr_common+0xe0>
 80009c6:	0209      	lsls	r1, r1, #8
 80009c8:	2303      	movs	r3, #3
 80009ca:	9107      	str	r1, [sp, #28]
 80009cc:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 80009d0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80009d4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80009d6:	f1bb 0f02 	cmp.w	fp, #2
 80009da:	bf08      	it	eq
 80009dc:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80009de:	f013 0301 	ands.w	r3, r3, #1
 80009e2:	d140      	bne.n	8000a66 <__gnu_unwind_pr_common+0xbe>
 80009e4:	9301      	str	r3, [sp, #4]
 80009e6:	f000 0308 	and.w	r3, r0, #8
 80009ea:	9303      	str	r3, [sp, #12]
 80009ec:	f8d4 8000 	ldr.w	r8, [r4]
 80009f0:	f1b8 0f00 	cmp.w	r8, #0
 80009f4:	d039      	beq.n	8000a6a <__gnu_unwind_pr_common+0xc2>
 80009f6:	2e02      	cmp	r6, #2
 80009f8:	d043      	beq.n	8000a82 <__gnu_unwind_pr_common+0xda>
 80009fa:	f8b4 8000 	ldrh.w	r8, [r4]
 80009fe:	8867      	ldrh	r7, [r4, #2]
 8000a00:	3404      	adds	r4, #4
 8000a02:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000a04:	f027 0a01 	bic.w	sl, r7, #1
 8000a08:	210f      	movs	r1, #15
 8000a0a:	4648      	mov	r0, r9
 8000a0c:	449a      	add	sl, r3
 8000a0e:	f7ff ff5f 	bl	80008d0 <_Unwind_GetGR>
 8000a12:	4582      	cmp	sl, r0
 8000a14:	d833      	bhi.n	8000a7e <__gnu_unwind_pr_common+0xd6>
 8000a16:	f028 0301 	bic.w	r3, r8, #1
 8000a1a:	449a      	add	sl, r3
 8000a1c:	4550      	cmp	r0, sl
 8000a1e:	bf2c      	ite	cs
 8000a20:	2000      	movcs	r0, #0
 8000a22:	2001      	movcc	r0, #1
 8000a24:	007f      	lsls	r7, r7, #1
 8000a26:	f007 0702 	and.w	r7, r7, #2
 8000a2a:	f008 0801 	and.w	r8, r8, #1
 8000a2e:	ea47 0708 	orr.w	r7, r7, r8
 8000a32:	2f01      	cmp	r7, #1
 8000a34:	d03e      	beq.n	8000ab4 <__gnu_unwind_pr_common+0x10c>
 8000a36:	d335      	bcc.n	8000aa4 <__gnu_unwind_pr_common+0xfc>
 8000a38:	2f02      	cmp	r7, #2
 8000a3a:	d11c      	bne.n	8000a76 <__gnu_unwind_pr_common+0xce>
 8000a3c:	6823      	ldr	r3, [r4, #0]
 8000a3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000a42:	9202      	str	r2, [sp, #8]
 8000a44:	f1bb 0f00 	cmp.w	fp, #0
 8000a48:	d176      	bne.n	8000b38 <__gnu_unwind_pr_common+0x190>
 8000a4a:	b128      	cbz	r0, 8000a58 <__gnu_unwind_pr_common+0xb0>
 8000a4c:	9903      	ldr	r1, [sp, #12]
 8000a4e:	2900      	cmp	r1, #0
 8000a50:	d07e      	beq.n	8000b50 <__gnu_unwind_pr_common+0x1a8>
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	f000 80a6 	beq.w	8000ba4 <__gnu_unwind_pr_common+0x1fc>
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	db77      	blt.n	8000b4c <__gnu_unwind_pr_common+0x1a4>
 8000a5c:	9b02      	ldr	r3, [sp, #8]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000a64:	e7c2      	b.n	80009ec <__gnu_unwind_pr_common+0x44>
 8000a66:	2300      	movs	r3, #0
 8000a68:	9301      	str	r3, [sp, #4]
 8000a6a:	2e02      	cmp	r6, #2
 8000a6c:	dd3e      	ble.n	8000aec <__gnu_unwind_pr_common+0x144>
 8000a6e:	f7ff fe17 	bl	80006a0 <__gnu_unwind_24bit.isra.1>
 8000a72:	2800      	cmp	r0, #0
 8000a74:	d040      	beq.n	8000af8 <__gnu_unwind_pr_common+0x150>
 8000a76:	2009      	movs	r0, #9
 8000a78:	b00b      	add	sp, #44	; 0x2c
 8000a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a7e:	2000      	movs	r0, #0
 8000a80:	e7d0      	b.n	8000a24 <__gnu_unwind_pr_common+0x7c>
 8000a82:	6867      	ldr	r7, [r4, #4]
 8000a84:	3408      	adds	r4, #8
 8000a86:	e7bc      	b.n	8000a02 <__gnu_unwind_pr_common+0x5a>
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	dca3      	bgt.n	80009d4 <__gnu_unwind_pr_common+0x2c>
 8000a8c:	0c0b      	lsrs	r3, r1, #16
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	0409      	lsls	r1, r1, #16
 8000a92:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000a96:	2302      	movs	r3, #2
 8000a98:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000a9c:	9107      	str	r1, [sp, #28]
 8000a9e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000aa2:	e797      	b.n	80009d4 <__gnu_unwind_pr_common+0x2c>
 8000aa4:	f1bb 0f00 	cmp.w	fp, #0
 8000aa8:	d002      	beq.n	8000ab0 <__gnu_unwind_pr_common+0x108>
 8000aaa:	2800      	cmp	r0, #0
 8000aac:	f040 80bd 	bne.w	8000c2a <__gnu_unwind_pr_common+0x282>
 8000ab0:	3404      	adds	r4, #4
 8000ab2:	e79b      	b.n	80009ec <__gnu_unwind_pr_common+0x44>
 8000ab4:	f1bb 0f00 	cmp.w	fp, #0
 8000ab8:	d125      	bne.n	8000b06 <__gnu_unwind_pr_common+0x15e>
 8000aba:	b1a8      	cbz	r0, 8000ae8 <__gnu_unwind_pr_common+0x140>
 8000abc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000ac0:	1c99      	adds	r1, r3, #2
 8000ac2:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000ac6:	d0d6      	beq.n	8000a76 <__gnu_unwind_pr_common+0xce>
 8000ac8:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000acc:	3301      	adds	r3, #1
 8000ace:	9106      	str	r1, [sp, #24]
 8000ad0:	f000 80a3 	beq.w	8000c1a <__gnu_unwind_pr_common+0x272>
 8000ad4:	1d20      	adds	r0, r4, #4
 8000ad6:	f7ff fddd 	bl	8000694 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000ada:	ab06      	add	r3, sp, #24
 8000adc:	4601      	mov	r1, r0
 8000ade:	4628      	mov	r0, r5
 8000ae0:	f3af 8000 	nop.w
 8000ae4:	2800      	cmp	r0, #0
 8000ae6:	d177      	bne.n	8000bd8 <__gnu_unwind_pr_common+0x230>
 8000ae8:	3408      	adds	r4, #8
 8000aea:	e77f      	b.n	80009ec <__gnu_unwind_pr_common+0x44>
 8000aec:	a907      	add	r1, sp, #28
 8000aee:	4648      	mov	r0, r9
 8000af0:	f000 faee 	bl	80010d0 <__gnu_unwind_execute>
 8000af4:	2800      	cmp	r0, #0
 8000af6:	d1be      	bne.n	8000a76 <__gnu_unwind_pr_common+0xce>
 8000af8:	9b01      	ldr	r3, [sp, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d15c      	bne.n	8000bb8 <__gnu_unwind_pr_common+0x210>
 8000afe:	2008      	movs	r0, #8
 8000b00:	b00b      	add	sp, #44	; 0x2c
 8000b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b06:	210d      	movs	r1, #13
 8000b08:	4648      	mov	r0, r9
 8000b0a:	6a2f      	ldr	r7, [r5, #32]
 8000b0c:	f7ff fee0 	bl	80008d0 <_Unwind_GetGR>
 8000b10:	4287      	cmp	r7, r0
 8000b12:	d1e9      	bne.n	8000ae8 <__gnu_unwind_pr_common+0x140>
 8000b14:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b16:	429c      	cmp	r4, r3
 8000b18:	d1e6      	bne.n	8000ae8 <__gnu_unwind_pr_common+0x140>
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	f7ff fcf0 	bl	8000500 <selfrel_offset31>
 8000b20:	210f      	movs	r1, #15
 8000b22:	4602      	mov	r2, r0
 8000b24:	4648      	mov	r0, r9
 8000b26:	f7ff fef9 	bl	800091c <_Unwind_SetGR>
 8000b2a:	4648      	mov	r0, r9
 8000b2c:	462a      	mov	r2, r5
 8000b2e:	2100      	movs	r1, #0
 8000b30:	f7ff fef4 	bl	800091c <_Unwind_SetGR>
 8000b34:	2007      	movs	r0, #7
 8000b36:	e79f      	b.n	8000a78 <__gnu_unwind_pr_common+0xd0>
 8000b38:	210d      	movs	r1, #13
 8000b3a:	4648      	mov	r0, r9
 8000b3c:	6a2f      	ldr	r7, [r5, #32]
 8000b3e:	f7ff fec7 	bl	80008d0 <_Unwind_GetGR>
 8000b42:	4287      	cmp	r7, r0
 8000b44:	d058      	beq.n	8000bf8 <__gnu_unwind_pr_common+0x250>
 8000b46:	6823      	ldr	r3, [r4, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	da87      	bge.n	8000a5c <__gnu_unwind_pr_common+0xb4>
 8000b4c:	3404      	adds	r4, #4
 8000b4e:	e785      	b.n	8000a5c <__gnu_unwind_pr_common+0xb4>
 8000b50:	9b02      	ldr	r3, [sp, #8]
 8000b52:	b33b      	cbz	r3, 8000ba4 <__gnu_unwind_pr_common+0x1fc>
 8000b54:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000b58:	1d27      	adds	r7, r4, #4
 8000b5a:	f8cd b010 	str.w	fp, [sp, #16]
 8000b5e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000b62:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000b66:	9605      	str	r6, [sp, #20]
 8000b68:	46a3      	mov	fp, r4
 8000b6a:	461c      	mov	r4, r3
 8000b6c:	e002      	b.n	8000b74 <__gnu_unwind_pr_common+0x1cc>
 8000b6e:	45b2      	cmp	sl, r6
 8000b70:	46b0      	mov	r8, r6
 8000b72:	d016      	beq.n	8000ba2 <__gnu_unwind_pr_common+0x1fa>
 8000b74:	4638      	mov	r0, r7
 8000b76:	9406      	str	r4, [sp, #24]
 8000b78:	f7ff fd8c 	bl	8000694 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000b7c:	ab06      	add	r3, sp, #24
 8000b7e:	4601      	mov	r1, r0
 8000b80:	2200      	movs	r2, #0
 8000b82:	4628      	mov	r0, r5
 8000b84:	f3af 8000 	nop.w
 8000b88:	f108 0601 	add.w	r6, r8, #1
 8000b8c:	3704      	adds	r7, #4
 8000b8e:	2800      	cmp	r0, #0
 8000b90:	d0ed      	beq.n	8000b6e <__gnu_unwind_pr_common+0x1c6>
 8000b92:	9b02      	ldr	r3, [sp, #8]
 8000b94:	9e05      	ldr	r6, [sp, #20]
 8000b96:	4543      	cmp	r3, r8
 8000b98:	465c      	mov	r4, fp
 8000b9a:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000b9e:	d1d2      	bne.n	8000b46 <__gnu_unwind_pr_common+0x19e>
 8000ba0:	e000      	b.n	8000ba4 <__gnu_unwind_pr_common+0x1fc>
 8000ba2:	465c      	mov	r4, fp
 8000ba4:	4648      	mov	r0, r9
 8000ba6:	210d      	movs	r1, #13
 8000ba8:	f7ff fe92 	bl	80008d0 <_Unwind_GetGR>
 8000bac:	9b06      	ldr	r3, [sp, #24]
 8000bae:	6228      	str	r0, [r5, #32]
 8000bb0:	62ac      	str	r4, [r5, #40]	; 0x28
 8000bb2:	626b      	str	r3, [r5, #36]	; 0x24
 8000bb4:	2006      	movs	r0, #6
 8000bb6:	e75f      	b.n	8000a78 <__gnu_unwind_pr_common+0xd0>
 8000bb8:	210f      	movs	r1, #15
 8000bba:	4648      	mov	r0, r9
 8000bbc:	f7ff fe88 	bl	80008d0 <_Unwind_GetGR>
 8000bc0:	210e      	movs	r1, #14
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	4648      	mov	r0, r9
 8000bc6:	f7ff fea9 	bl	800091c <_Unwind_SetGR>
 8000bca:	4648      	mov	r0, r9
 8000bcc:	4a29      	ldr	r2, [pc, #164]	; (8000c74 <__gnu_unwind_pr_common+0x2cc>)
 8000bce:	210f      	movs	r1, #15
 8000bd0:	f7ff fea4 	bl	800091c <_Unwind_SetGR>
 8000bd4:	2007      	movs	r0, #7
 8000bd6:	e74f      	b.n	8000a78 <__gnu_unwind_pr_common+0xd0>
 8000bd8:	4607      	mov	r7, r0
 8000bda:	210d      	movs	r1, #13
 8000bdc:	4648      	mov	r0, r9
 8000bde:	f7ff fe77 	bl	80008d0 <_Unwind_GetGR>
 8000be2:	2f02      	cmp	r7, #2
 8000be4:	6228      	str	r0, [r5, #32]
 8000be6:	d11d      	bne.n	8000c24 <__gnu_unwind_pr_common+0x27c>
 8000be8:	462b      	mov	r3, r5
 8000bea:	9a06      	ldr	r2, [sp, #24]
 8000bec:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000bf0:	626b      	str	r3, [r5, #36]	; 0x24
 8000bf2:	62ac      	str	r4, [r5, #40]	; 0x28
 8000bf4:	2006      	movs	r0, #6
 8000bf6:	e73f      	b.n	8000a78 <__gnu_unwind_pr_common+0xd0>
 8000bf8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000bfa:	429c      	cmp	r4, r3
 8000bfc:	d1a3      	bne.n	8000b46 <__gnu_unwind_pr_common+0x19e>
 8000bfe:	2204      	movs	r2, #4
 8000c00:	2700      	movs	r7, #0
 8000c02:	18a3      	adds	r3, r4, r2
 8000c04:	9902      	ldr	r1, [sp, #8]
 8000c06:	62a9      	str	r1, [r5, #40]	; 0x28
 8000c08:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000c0a:	632a      	str	r2, [r5, #48]	; 0x30
 8000c0c:	636b      	str	r3, [r5, #52]	; 0x34
 8000c0e:	6823      	ldr	r3, [r4, #0]
 8000c10:	42bb      	cmp	r3, r7
 8000c12:	db1d      	blt.n	8000c50 <__gnu_unwind_pr_common+0x2a8>
 8000c14:	2301      	movs	r3, #1
 8000c16:	9301      	str	r3, [sp, #4]
 8000c18:	e720      	b.n	8000a5c <__gnu_unwind_pr_common+0xb4>
 8000c1a:	4648      	mov	r0, r9
 8000c1c:	210d      	movs	r1, #13
 8000c1e:	f7ff fe57 	bl	80008d0 <_Unwind_GetGR>
 8000c22:	6228      	str	r0, [r5, #32]
 8000c24:	9b06      	ldr	r3, [sp, #24]
 8000c26:	626b      	str	r3, [r5, #36]	; 0x24
 8000c28:	e7e3      	b.n	8000bf2 <__gnu_unwind_pr_common+0x24a>
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	f7ff fc68 	bl	8000500 <selfrel_offset31>
 8000c30:	3404      	adds	r4, #4
 8000c32:	4606      	mov	r6, r0
 8000c34:	63ac      	str	r4, [r5, #56]	; 0x38
 8000c36:	4628      	mov	r0, r5
 8000c38:	f3af 8000 	nop.w
 8000c3c:	2800      	cmp	r0, #0
 8000c3e:	f43f af1a 	beq.w	8000a76 <__gnu_unwind_pr_common+0xce>
 8000c42:	4648      	mov	r0, r9
 8000c44:	4632      	mov	r2, r6
 8000c46:	210f      	movs	r1, #15
 8000c48:	f7ff fe68 	bl	800091c <_Unwind_SetGR>
 8000c4c:	2007      	movs	r0, #7
 8000c4e:	e713      	b.n	8000a78 <__gnu_unwind_pr_common+0xd0>
 8000c50:	4608      	mov	r0, r1
 8000c52:	3001      	adds	r0, #1
 8000c54:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000c58:	f7ff fc52 	bl	8000500 <selfrel_offset31>
 8000c5c:	210f      	movs	r1, #15
 8000c5e:	4602      	mov	r2, r0
 8000c60:	4648      	mov	r0, r9
 8000c62:	f7ff fe5b 	bl	800091c <_Unwind_SetGR>
 8000c66:	4648      	mov	r0, r9
 8000c68:	462a      	mov	r2, r5
 8000c6a:	4639      	mov	r1, r7
 8000c6c:	f7ff fe56 	bl	800091c <_Unwind_SetGR>
 8000c70:	2007      	movs	r0, #7
 8000c72:	e701      	b.n	8000a78 <__gnu_unwind_pr_common+0xd0>
 8000c74:	00000000 	.word	0x00000000

08000c78 <__aeabi_unwind_cpp_pr0>:
 8000c78:	2300      	movs	r3, #0
 8000c7a:	e695      	b.n	80009a8 <__gnu_unwind_pr_common>

08000c7c <__aeabi_unwind_cpp_pr1>:
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e693      	b.n	80009a8 <__gnu_unwind_pr_common>

08000c80 <__aeabi_unwind_cpp_pr2>:
 8000c80:	2302      	movs	r3, #2
 8000c82:	e691      	b.n	80009a8 <__gnu_unwind_pr_common>

08000c84 <_Unwind_VRS_Pop>:
 8000c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c86:	4604      	mov	r4, r0
 8000c88:	b0c5      	sub	sp, #276	; 0x114
 8000c8a:	2904      	cmp	r1, #4
 8000c8c:	d80d      	bhi.n	8000caa <_Unwind_VRS_Pop+0x26>
 8000c8e:	e8df f001 	tbb	[pc, r1]
 8000c92:	0353      	.short	0x0353
 8000c94:	310c      	.short	0x310c
 8000c96:	0f          	.byte	0x0f
 8000c97:	00          	.byte	0x00
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000c9e:	b295      	uxth	r5, r2
 8000ca0:	d162      	bne.n	8000d68 <_Unwind_VRS_Pop+0xe4>
 8000ca2:	1972      	adds	r2, r6, r5
 8000ca4:	2a10      	cmp	r2, #16
 8000ca6:	f240 809b 	bls.w	8000de0 <_Unwind_VRS_Pop+0x15c>
 8000caa:	2002      	movs	r0, #2
 8000cac:	b045      	add	sp, #276	; 0x114
 8000cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d1fa      	bne.n	8000caa <_Unwind_VRS_Pop+0x26>
 8000cb4:	2a10      	cmp	r2, #16
 8000cb6:	d8f8      	bhi.n	8000caa <_Unwind_VRS_Pop+0x26>
 8000cb8:	6823      	ldr	r3, [r4, #0]
 8000cba:	06d8      	lsls	r0, r3, #27
 8000cbc:	f100 80c6 	bmi.w	8000e4c <_Unwind_VRS_Pop+0x1c8>
 8000cc0:	ae22      	add	r6, sp, #136	; 0x88
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	9201      	str	r2, [sp, #4]
 8000cc6:	f000 f973 	bl	8000fb0 <__gnu_Unwind_Save_WMMXC>
 8000cca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000ccc:	9a01      	ldr	r2, [sp, #4]
 8000cce:	2300      	movs	r3, #0
 8000cd0:	2501      	movs	r5, #1
 8000cd2:	fa05 f103 	lsl.w	r1, r5, r3
 8000cd6:	4211      	tst	r1, r2
 8000cd8:	d003      	beq.n	8000ce2 <_Unwind_VRS_Pop+0x5e>
 8000cda:	6801      	ldr	r1, [r0, #0]
 8000cdc:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000ce0:	3004      	adds	r0, #4
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	2b04      	cmp	r3, #4
 8000ce6:	d1f4      	bne.n	8000cd2 <_Unwind_VRS_Pop+0x4e>
 8000ce8:	63a0      	str	r0, [r4, #56]	; 0x38
 8000cea:	4630      	mov	r0, r6
 8000cec:	f000 f956 	bl	8000f9c <__gnu_Unwind_Restore_WMMXC>
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	e7db      	b.n	8000cac <_Unwind_VRS_Pop+0x28>
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	d1d8      	bne.n	8000caa <_Unwind_VRS_Pop+0x26>
 8000cf8:	0c15      	lsrs	r5, r2, #16
 8000cfa:	b297      	uxth	r7, r2
 8000cfc:	19eb      	adds	r3, r5, r7
 8000cfe:	2b10      	cmp	r3, #16
 8000d00:	d8d3      	bhi.n	8000caa <_Unwind_VRS_Pop+0x26>
 8000d02:	6823      	ldr	r3, [r4, #0]
 8000d04:	071e      	lsls	r6, r3, #28
 8000d06:	f100 80b5 	bmi.w	8000e74 <_Unwind_VRS_Pop+0x1f0>
 8000d0a:	ae22      	add	r6, sp, #136	; 0x88
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	f000 f923 	bl	8000f58 <__gnu_Unwind_Save_WMMXD>
 8000d12:	00ed      	lsls	r5, r5, #3
 8000d14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d16:	b14f      	cbz	r7, 8000d2c <_Unwind_VRS_Pop+0xa8>
 8000d18:	3d04      	subs	r5, #4
 8000d1a:	1971      	adds	r1, r6, r5
 8000d1c:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8000d20:	f853 2b04 	ldr.w	r2, [r3], #4
 8000d24:	f841 2f04 	str.w	r2, [r1, #4]!
 8000d28:	4283      	cmp	r3, r0
 8000d2a:	d1f9      	bne.n	8000d20 <_Unwind_VRS_Pop+0x9c>
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	63a3      	str	r3, [r4, #56]	; 0x38
 8000d30:	f000 f8f0 	bl	8000f14 <__gnu_Unwind_Restore_WMMXD>
 8000d34:	2000      	movs	r0, #0
 8000d36:	e7b9      	b.n	8000cac <_Unwind_VRS_Pop+0x28>
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d1b6      	bne.n	8000caa <_Unwind_VRS_Pop+0x26>
 8000d3c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000d3e:	b297      	uxth	r7, r2
 8000d40:	1d20      	adds	r0, r4, #4
 8000d42:	2601      	movs	r6, #1
 8000d44:	fa06 f103 	lsl.w	r1, r6, r3
 8000d48:	4239      	tst	r1, r7
 8000d4a:	f103 0301 	add.w	r3, r3, #1
 8000d4e:	d002      	beq.n	8000d56 <_Unwind_VRS_Pop+0xd2>
 8000d50:	6829      	ldr	r1, [r5, #0]
 8000d52:	6001      	str	r1, [r0, #0]
 8000d54:	3504      	adds	r5, #4
 8000d56:	2b10      	cmp	r3, #16
 8000d58:	f100 0004 	add.w	r0, r0, #4
 8000d5c:	d1f2      	bne.n	8000d44 <_Unwind_VRS_Pop+0xc0>
 8000d5e:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000d62:	d13b      	bne.n	8000ddc <_Unwind_VRS_Pop+0x158>
 8000d64:	63a5      	str	r5, [r4, #56]	; 0x38
 8000d66:	e7a1      	b.n	8000cac <_Unwind_VRS_Pop+0x28>
 8000d68:	2b05      	cmp	r3, #5
 8000d6a:	d19e      	bne.n	8000caa <_Unwind_VRS_Pop+0x26>
 8000d6c:	1977      	adds	r7, r6, r5
 8000d6e:	2f20      	cmp	r7, #32
 8000d70:	d89b      	bhi.n	8000caa <_Unwind_VRS_Pop+0x26>
 8000d72:	2e0f      	cmp	r6, #15
 8000d74:	d966      	bls.n	8000e44 <_Unwind_VRS_Pop+0x1c0>
 8000d76:	462f      	mov	r7, r5
 8000d78:	2d00      	cmp	r5, #0
 8000d7a:	d13a      	bne.n	8000df2 <_Unwind_VRS_Pop+0x16e>
 8000d7c:	462a      	mov	r2, r5
 8000d7e:	2700      	movs	r7, #0
 8000d80:	2a00      	cmp	r2, #0
 8000d82:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000d84:	dd72      	ble.n	8000e6c <_Unwind_VRS_Pop+0x1e8>
 8000d86:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000d8a:	4601      	mov	r1, r0
 8000d8c:	a844      	add	r0, sp, #272	; 0x110
 8000d8e:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000d92:	388c      	subs	r0, #140	; 0x8c
 8000d94:	f851 5b04 	ldr.w	r5, [r1], #4
 8000d98:	f840 5f04 	str.w	r5, [r0, #4]!
 8000d9c:	4291      	cmp	r1, r2
 8000d9e:	d1f9      	bne.n	8000d94 <_Unwind_VRS_Pop+0x110>
 8000da0:	4608      	mov	r0, r1
 8000da2:	b197      	cbz	r7, 8000dca <_Unwind_VRS_Pop+0x146>
 8000da4:	2e10      	cmp	r6, #16
 8000da6:	4632      	mov	r2, r6
 8000da8:	a944      	add	r1, sp, #272	; 0x110
 8000daa:	bf38      	it	cc
 8000dac:	2210      	movcc	r2, #16
 8000dae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000db2:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000db6:	0079      	lsls	r1, r7, #1
 8000db8:	3a04      	subs	r2, #4
 8000dba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000dbe:	f850 5b04 	ldr.w	r5, [r0], #4
 8000dc2:	f842 5f04 	str.w	r5, [r2, #4]!
 8000dc6:	4288      	cmp	r0, r1
 8000dc8:	d1f9      	bne.n	8000dbe <_Unwind_VRS_Pop+0x13a>
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d048      	beq.n	8000e60 <_Unwind_VRS_Pop+0x1dc>
 8000dce:	2e0f      	cmp	r6, #15
 8000dd0:	63a1      	str	r1, [r4, #56]	; 0x38
 8000dd2:	d933      	bls.n	8000e3c <_Unwind_VRS_Pop+0x1b8>
 8000dd4:	b117      	cbz	r7, 8000ddc <_Unwind_VRS_Pop+0x158>
 8000dd6:	a802      	add	r0, sp, #8
 8000dd8:	f000 f894 	bl	8000f04 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000ddc:	2000      	movs	r0, #0
 8000dde:	e765      	b.n	8000cac <_Unwind_VRS_Pop+0x28>
 8000de0:	2e0f      	cmp	r6, #15
 8000de2:	f63f af62 	bhi.w	8000caa <_Unwind_VRS_Pop+0x26>
 8000de6:	2700      	movs	r7, #0
 8000de8:	6822      	ldr	r2, [r4, #0]
 8000dea:	07d1      	lsls	r1, r2, #31
 8000dec:	d417      	bmi.n	8000e1e <_Unwind_VRS_Pop+0x19a>
 8000dee:	2f00      	cmp	r7, #0
 8000df0:	d060      	beq.n	8000eb4 <_Unwind_VRS_Pop+0x230>
 8000df2:	6822      	ldr	r2, [r4, #0]
 8000df4:	0751      	lsls	r1, r2, #29
 8000df6:	d445      	bmi.n	8000e84 <_Unwind_VRS_Pop+0x200>
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d04d      	beq.n	8000e98 <_Unwind_VRS_Pop+0x214>
 8000dfc:	2e0f      	cmp	r6, #15
 8000dfe:	d806      	bhi.n	8000e0e <_Unwind_VRS_Pop+0x18a>
 8000e00:	a822      	add	r0, sp, #136	; 0x88
 8000e02:	9301      	str	r3, [sp, #4]
 8000e04:	f000 f87a 	bl	8000efc <__gnu_Unwind_Save_VFP_D>
 8000e08:	9b01      	ldr	r3, [sp, #4]
 8000e0a:	2f00      	cmp	r7, #0
 8000e0c:	d0b6      	beq.n	8000d7c <_Unwind_VRS_Pop+0xf8>
 8000e0e:	a802      	add	r0, sp, #8
 8000e10:	9301      	str	r3, [sp, #4]
 8000e12:	f000 f87b 	bl	8000f0c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e16:	9b01      	ldr	r3, [sp, #4]
 8000e18:	f1c6 0210 	rsb	r2, r6, #16
 8000e1c:	e7b0      	b.n	8000d80 <_Unwind_VRS_Pop+0xfc>
 8000e1e:	f022 0101 	bic.w	r1, r2, #1
 8000e22:	2b05      	cmp	r3, #5
 8000e24:	6021      	str	r1, [r4, #0]
 8000e26:	9301      	str	r3, [sp, #4]
 8000e28:	4620      	mov	r0, r4
 8000e2a:	d03b      	beq.n	8000ea4 <_Unwind_VRS_Pop+0x220>
 8000e2c:	f022 0203 	bic.w	r2, r2, #3
 8000e30:	f840 2b48 	str.w	r2, [r0], #72
 8000e34:	f000 f85a 	bl	8000eec <__gnu_Unwind_Save_VFP>
 8000e38:	9b01      	ldr	r3, [sp, #4]
 8000e3a:	e7d8      	b.n	8000dee <_Unwind_VRS_Pop+0x16a>
 8000e3c:	a822      	add	r0, sp, #136	; 0x88
 8000e3e:	f000 f859 	bl	8000ef4 <__gnu_Unwind_Restore_VFP_D>
 8000e42:	e7c7      	b.n	8000dd4 <_Unwind_VRS_Pop+0x150>
 8000e44:	2f10      	cmp	r7, #16
 8000e46:	d9ce      	bls.n	8000de6 <_Unwind_VRS_Pop+0x162>
 8000e48:	3f10      	subs	r7, #16
 8000e4a:	e7cd      	b.n	8000de8 <_Unwind_VRS_Pop+0x164>
 8000e4c:	f023 0310 	bic.w	r3, r3, #16
 8000e50:	6023      	str	r3, [r4, #0]
 8000e52:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000e56:	9201      	str	r2, [sp, #4]
 8000e58:	f000 f8aa 	bl	8000fb0 <__gnu_Unwind_Save_WMMXC>
 8000e5c:	9a01      	ldr	r2, [sp, #4]
 8000e5e:	e72f      	b.n	8000cc0 <_Unwind_VRS_Pop+0x3c>
 8000e60:	3104      	adds	r1, #4
 8000e62:	63a1      	str	r1, [r4, #56]	; 0x38
 8000e64:	a822      	add	r0, sp, #136	; 0x88
 8000e66:	f000 f83d 	bl	8000ee4 <__gnu_Unwind_Restore_VFP>
 8000e6a:	e7b7      	b.n	8000ddc <_Unwind_VRS_Pop+0x158>
 8000e6c:	2f00      	cmp	r7, #0
 8000e6e:	d199      	bne.n	8000da4 <_Unwind_VRS_Pop+0x120>
 8000e70:	4601      	mov	r1, r0
 8000e72:	e7aa      	b.n	8000dca <_Unwind_VRS_Pop+0x146>
 8000e74:	f023 0308 	bic.w	r3, r3, #8
 8000e78:	6023      	str	r3, [r4, #0]
 8000e7a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000e7e:	f000 f86b 	bl	8000f58 <__gnu_Unwind_Save_WMMXD>
 8000e82:	e742      	b.n	8000d0a <_Unwind_VRS_Pop+0x86>
 8000e84:	4620      	mov	r0, r4
 8000e86:	f022 0204 	bic.w	r2, r2, #4
 8000e8a:	f840 2bd0 	str.w	r2, [r0], #208
 8000e8e:	9301      	str	r3, [sp, #4]
 8000e90:	f000 f83c 	bl	8000f0c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e94:	9b01      	ldr	r3, [sp, #4]
 8000e96:	e7af      	b.n	8000df8 <_Unwind_VRS_Pop+0x174>
 8000e98:	a822      	add	r0, sp, #136	; 0x88
 8000e9a:	9301      	str	r3, [sp, #4]
 8000e9c:	f000 f826 	bl	8000eec <__gnu_Unwind_Save_VFP>
 8000ea0:	9b01      	ldr	r3, [sp, #4]
 8000ea2:	e7b9      	b.n	8000e18 <_Unwind_VRS_Pop+0x194>
 8000ea4:	f041 0102 	orr.w	r1, r1, #2
 8000ea8:	f840 1b48 	str.w	r1, [r0], #72
 8000eac:	f000 f826 	bl	8000efc <__gnu_Unwind_Save_VFP_D>
 8000eb0:	9b01      	ldr	r3, [sp, #4]
 8000eb2:	e79c      	b.n	8000dee <_Unwind_VRS_Pop+0x16a>
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d003      	beq.n	8000ec0 <_Unwind_VRS_Pop+0x23c>
 8000eb8:	2e0f      	cmp	r6, #15
 8000eba:	f63f af5f 	bhi.w	8000d7c <_Unwind_VRS_Pop+0xf8>
 8000ebe:	e79f      	b.n	8000e00 <_Unwind_VRS_Pop+0x17c>
 8000ec0:	a822      	add	r0, sp, #136	; 0x88
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	f000 f812 	bl	8000eec <__gnu_Unwind_Save_VFP>
 8000ec8:	9b01      	ldr	r3, [sp, #4]
 8000eca:	e757      	b.n	8000d7c <_Unwind_VRS_Pop+0xf8>

08000ecc <__restore_core_regs>:
 8000ecc:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000ed0:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000ed4:	469c      	mov	ip, r3
 8000ed6:	46a6      	mov	lr, r4
 8000ed8:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000edc:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000ee0:	46e5      	mov	sp, ip
 8000ee2:	bd00      	pop	{pc}

08000ee4 <__gnu_Unwind_Restore_VFP>:
 8000ee4:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <__gnu_Unwind_Save_VFP>:
 8000eec:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <__gnu_Unwind_Restore_VFP_D>:
 8000ef4:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <__gnu_Unwind_Save_VFP_D>:
 8000efc:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000f04:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000f0c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <__gnu_Unwind_Restore_WMMXD>:
 8000f14:	ecf0 0102 	ldfe	f0, [r0], #8
 8000f18:	ecf0 1102 	ldfe	f1, [r0], #8
 8000f1c:	ecf0 2102 	ldfe	f2, [r0], #8
 8000f20:	ecf0 3102 	ldfe	f3, [r0], #8
 8000f24:	ecf0 4102 	ldfe	f4, [r0], #8
 8000f28:	ecf0 5102 	ldfe	f5, [r0], #8
 8000f2c:	ecf0 6102 	ldfe	f6, [r0], #8
 8000f30:	ecf0 7102 	ldfe	f7, [r0], #8
 8000f34:	ecf0 8102 	ldfp	f0, [r0], #8
 8000f38:	ecf0 9102 	ldfp	f1, [r0], #8
 8000f3c:	ecf0 a102 	ldfp	f2, [r0], #8
 8000f40:	ecf0 b102 	ldfp	f3, [r0], #8
 8000f44:	ecf0 c102 	ldfp	f4, [r0], #8
 8000f48:	ecf0 d102 	ldfp	f5, [r0], #8
 8000f4c:	ecf0 e102 	ldfp	f6, [r0], #8
 8000f50:	ecf0 f102 	ldfp	f7, [r0], #8
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <__gnu_Unwind_Save_WMMXD>:
 8000f58:	ece0 0102 	stfe	f0, [r0], #8
 8000f5c:	ece0 1102 	stfe	f1, [r0], #8
 8000f60:	ece0 2102 	stfe	f2, [r0], #8
 8000f64:	ece0 3102 	stfe	f3, [r0], #8
 8000f68:	ece0 4102 	stfe	f4, [r0], #8
 8000f6c:	ece0 5102 	stfe	f5, [r0], #8
 8000f70:	ece0 6102 	stfe	f6, [r0], #8
 8000f74:	ece0 7102 	stfe	f7, [r0], #8
 8000f78:	ece0 8102 	stfp	f0, [r0], #8
 8000f7c:	ece0 9102 	stfp	f1, [r0], #8
 8000f80:	ece0 a102 	stfp	f2, [r0], #8
 8000f84:	ece0 b102 	stfp	f3, [r0], #8
 8000f88:	ece0 c102 	stfp	f4, [r0], #8
 8000f8c:	ece0 d102 	stfp	f5, [r0], #8
 8000f90:	ece0 e102 	stfp	f6, [r0], #8
 8000f94:	ece0 f102 	stfp	f7, [r0], #8
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <__gnu_Unwind_Restore_WMMXC>:
 8000f9c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000fa0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000fa4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000fa8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop

08000fb0 <__gnu_Unwind_Save_WMMXC>:
 8000fb0:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000fb4:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000fb8:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000fbc:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <_Unwind_RaiseException>:
 8000fc4:	46ec      	mov	ip, sp
 8000fc6:	b500      	push	{lr}
 8000fc8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000fcc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000fd0:	f04f 0300 	mov.w	r3, #0
 8000fd4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000fd8:	a901      	add	r1, sp, #4
 8000fda:	f7ff fbf3 	bl	80007c4 <__gnu_Unwind_RaiseException>
 8000fde:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000fe2:	b012      	add	sp, #72	; 0x48
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <_Unwind_Resume>:
 8000fe8:	46ec      	mov	ip, sp
 8000fea:	b500      	push	{lr}
 8000fec:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000ff0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000ff4:	f04f 0300 	mov.w	r3, #0
 8000ff8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000ffc:	a901      	add	r1, sp, #4
 8000ffe:	f7ff fc1b 	bl	8000838 <__gnu_Unwind_Resume>
 8001002:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001006:	b012      	add	sp, #72	; 0x48
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <_Unwind_Resume_or_Rethrow>:
 800100c:	46ec      	mov	ip, sp
 800100e:	b500      	push	{lr}
 8001010:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001014:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001018:	f04f 0300 	mov.w	r3, #0
 800101c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001020:	a901      	add	r1, sp, #4
 8001022:	f7ff fc2b 	bl	800087c <__gnu_Unwind_Resume_or_Rethrow>
 8001026:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800102a:	b012      	add	sp, #72	; 0x48
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <_Unwind_ForcedUnwind>:
 8001030:	46ec      	mov	ip, sp
 8001032:	b500      	push	{lr}
 8001034:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001038:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001044:	ab01      	add	r3, sp, #4
 8001046:	f7ff fbed 	bl	8000824 <__gnu_Unwind_ForcedUnwind>
 800104a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800104e:	b012      	add	sp, #72	; 0x48
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <_Unwind_Backtrace>:
 8001054:	46ec      	mov	ip, sp
 8001056:	b500      	push	{lr}
 8001058:	e92d 5000 	stmdb	sp!, {ip, lr}
 800105c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001068:	aa01      	add	r2, sp, #4
 800106a:	f7ff fc65 	bl	8000938 <__gnu_Unwind_Backtrace>
 800106e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001072:	b012      	add	sp, #72	; 0x48
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <next_unwind_byte>:
 8001078:	7a02      	ldrb	r2, [r0, #8]
 800107a:	b91a      	cbnz	r2, 8001084 <next_unwind_byte+0xc>
 800107c:	7a43      	ldrb	r3, [r0, #9]
 800107e:	b943      	cbnz	r3, 8001092 <next_unwind_byte+0x1a>
 8001080:	20b0      	movs	r0, #176	; 0xb0
 8001082:	4770      	bx	lr
 8001084:	6803      	ldr	r3, [r0, #0]
 8001086:	3a01      	subs	r2, #1
 8001088:	7202      	strb	r2, [r0, #8]
 800108a:	021a      	lsls	r2, r3, #8
 800108c:	6002      	str	r2, [r0, #0]
 800108e:	0e18      	lsrs	r0, r3, #24
 8001090:	4770      	bx	lr
 8001092:	6842      	ldr	r2, [r0, #4]
 8001094:	3b01      	subs	r3, #1
 8001096:	b410      	push	{r4}
 8001098:	7243      	strb	r3, [r0, #9]
 800109a:	6813      	ldr	r3, [r2, #0]
 800109c:	2103      	movs	r1, #3
 800109e:	1d14      	adds	r4, r2, #4
 80010a0:	7201      	strb	r1, [r0, #8]
 80010a2:	021a      	lsls	r2, r3, #8
 80010a4:	6044      	str	r4, [r0, #4]
 80010a6:	6002      	str	r2, [r0, #0]
 80010a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010ac:	0e18      	lsrs	r0, r3, #24
 80010ae:	4770      	bx	lr

080010b0 <_Unwind_GetGR.constprop.0>:
 80010b0:	b500      	push	{lr}
 80010b2:	b085      	sub	sp, #20
 80010b4:	aa03      	add	r2, sp, #12
 80010b6:	2300      	movs	r3, #0
 80010b8:	9200      	str	r2, [sp, #0]
 80010ba:	4619      	mov	r1, r3
 80010bc:	220c      	movs	r2, #12
 80010be:	f7ff fbed 	bl	800089c <_Unwind_VRS_Get>
 80010c2:	9803      	ldr	r0, [sp, #12]
 80010c4:	b005      	add	sp, #20
 80010c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80010ca:	bf00      	nop

080010cc <unwind_UCB_from_context>:
 80010cc:	e7f0      	b.n	80010b0 <_Unwind_GetGR.constprop.0>
 80010ce:	bf00      	nop

080010d0 <__gnu_unwind_execute>:
 80010d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010d4:	4606      	mov	r6, r0
 80010d6:	b085      	sub	sp, #20
 80010d8:	460f      	mov	r7, r1
 80010da:	f04f 0800 	mov.w	r8, #0
 80010de:	4638      	mov	r0, r7
 80010e0:	f7ff ffca 	bl	8001078 <next_unwind_byte>
 80010e4:	28b0      	cmp	r0, #176	; 0xb0
 80010e6:	4604      	mov	r4, r0
 80010e8:	d023      	beq.n	8001132 <__gnu_unwind_execute+0x62>
 80010ea:	0605      	lsls	r5, r0, #24
 80010ec:	d427      	bmi.n	800113e <__gnu_unwind_execute+0x6e>
 80010ee:	2300      	movs	r3, #0
 80010f0:	f10d 090c 	add.w	r9, sp, #12
 80010f4:	4619      	mov	r1, r3
 80010f6:	0085      	lsls	r5, r0, #2
 80010f8:	220d      	movs	r2, #13
 80010fa:	f8cd 9000 	str.w	r9, [sp]
 80010fe:	4630      	mov	r0, r6
 8001100:	f7ff fbcc 	bl	800089c <_Unwind_VRS_Get>
 8001104:	b2ed      	uxtb	r5, r5
 8001106:	9b03      	ldr	r3, [sp, #12]
 8001108:	f8cd 9000 	str.w	r9, [sp]
 800110c:	0660      	lsls	r0, r4, #25
 800110e:	f105 0504 	add.w	r5, r5, #4
 8001112:	bf4c      	ite	mi
 8001114:	1b5d      	submi	r5, r3, r5
 8001116:	18ed      	addpl	r5, r5, r3
 8001118:	2300      	movs	r3, #0
 800111a:	4619      	mov	r1, r3
 800111c:	220d      	movs	r2, #13
 800111e:	4630      	mov	r0, r6
 8001120:	9503      	str	r5, [sp, #12]
 8001122:	f7ff fbe1 	bl	80008e8 <_Unwind_VRS_Set>
 8001126:	4638      	mov	r0, r7
 8001128:	f7ff ffa6 	bl	8001078 <next_unwind_byte>
 800112c:	28b0      	cmp	r0, #176	; 0xb0
 800112e:	4604      	mov	r4, r0
 8001130:	d1db      	bne.n	80010ea <__gnu_unwind_execute+0x1a>
 8001132:	f1b8 0f00 	cmp.w	r8, #0
 8001136:	f000 8095 	beq.w	8001264 <__gnu_unwind_execute+0x194>
 800113a:	2000      	movs	r0, #0
 800113c:	e01c      	b.n	8001178 <__gnu_unwind_execute+0xa8>
 800113e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001142:	2b80      	cmp	r3, #128	; 0x80
 8001144:	d05d      	beq.n	8001202 <__gnu_unwind_execute+0x132>
 8001146:	2b90      	cmp	r3, #144	; 0x90
 8001148:	d019      	beq.n	800117e <__gnu_unwind_execute+0xae>
 800114a:	2ba0      	cmp	r3, #160	; 0xa0
 800114c:	d02c      	beq.n	80011a8 <__gnu_unwind_execute+0xd8>
 800114e:	2bb0      	cmp	r3, #176	; 0xb0
 8001150:	d03f      	beq.n	80011d2 <__gnu_unwind_execute+0x102>
 8001152:	2bc0      	cmp	r3, #192	; 0xc0
 8001154:	d06c      	beq.n	8001230 <__gnu_unwind_execute+0x160>
 8001156:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800115a:	2bd0      	cmp	r3, #208	; 0xd0
 800115c:	d10b      	bne.n	8001176 <__gnu_unwind_execute+0xa6>
 800115e:	f000 0207 	and.w	r2, r0, #7
 8001162:	3201      	adds	r2, #1
 8001164:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001168:	2305      	movs	r3, #5
 800116a:	2101      	movs	r1, #1
 800116c:	4630      	mov	r0, r6
 800116e:	f7ff fd89 	bl	8000c84 <_Unwind_VRS_Pop>
 8001172:	2800      	cmp	r0, #0
 8001174:	d0b3      	beq.n	80010de <__gnu_unwind_execute+0xe>
 8001176:	2009      	movs	r0, #9
 8001178:	b005      	add	sp, #20
 800117a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800117e:	f000 030d 	and.w	r3, r0, #13
 8001182:	2b0d      	cmp	r3, #13
 8001184:	d0f7      	beq.n	8001176 <__gnu_unwind_execute+0xa6>
 8001186:	ad03      	add	r5, sp, #12
 8001188:	2300      	movs	r3, #0
 800118a:	f000 020f 	and.w	r2, r0, #15
 800118e:	4619      	mov	r1, r3
 8001190:	9500      	str	r5, [sp, #0]
 8001192:	4630      	mov	r0, r6
 8001194:	f7ff fb82 	bl	800089c <_Unwind_VRS_Get>
 8001198:	2300      	movs	r3, #0
 800119a:	9500      	str	r5, [sp, #0]
 800119c:	4619      	mov	r1, r3
 800119e:	220d      	movs	r2, #13
 80011a0:	4630      	mov	r0, r6
 80011a2:	f7ff fba1 	bl	80008e8 <_Unwind_VRS_Set>
 80011a6:	e79a      	b.n	80010de <__gnu_unwind_execute+0xe>
 80011a8:	43c2      	mvns	r2, r0
 80011aa:	f002 0307 	and.w	r3, r2, #7
 80011ae:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80011b2:	411a      	asrs	r2, r3
 80011b4:	0701      	lsls	r1, r0, #28
 80011b6:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80011ba:	f04f 0300 	mov.w	r3, #0
 80011be:	bf48      	it	mi
 80011c0:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80011c4:	4619      	mov	r1, r3
 80011c6:	4630      	mov	r0, r6
 80011c8:	f7ff fd5c 	bl	8000c84 <_Unwind_VRS_Pop>
 80011cc:	2800      	cmp	r0, #0
 80011ce:	d1d2      	bne.n	8001176 <__gnu_unwind_execute+0xa6>
 80011d0:	e785      	b.n	80010de <__gnu_unwind_execute+0xe>
 80011d2:	28b1      	cmp	r0, #177	; 0xb1
 80011d4:	d057      	beq.n	8001286 <__gnu_unwind_execute+0x1b6>
 80011d6:	28b2      	cmp	r0, #178	; 0xb2
 80011d8:	d068      	beq.n	80012ac <__gnu_unwind_execute+0x1dc>
 80011da:	28b3      	cmp	r0, #179	; 0xb3
 80011dc:	f000 8095 	beq.w	800130a <__gnu_unwind_execute+0x23a>
 80011e0:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80011e4:	2bb4      	cmp	r3, #180	; 0xb4
 80011e6:	d0c6      	beq.n	8001176 <__gnu_unwind_execute+0xa6>
 80011e8:	f000 0207 	and.w	r2, r0, #7
 80011ec:	3201      	adds	r2, #1
 80011ee:	2301      	movs	r3, #1
 80011f0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80011f4:	4619      	mov	r1, r3
 80011f6:	4630      	mov	r0, r6
 80011f8:	f7ff fd44 	bl	8000c84 <_Unwind_VRS_Pop>
 80011fc:	2800      	cmp	r0, #0
 80011fe:	d1ba      	bne.n	8001176 <__gnu_unwind_execute+0xa6>
 8001200:	e76d      	b.n	80010de <__gnu_unwind_execute+0xe>
 8001202:	4638      	mov	r0, r7
 8001204:	f7ff ff38 	bl	8001078 <next_unwind_byte>
 8001208:	0224      	lsls	r4, r4, #8
 800120a:	4304      	orrs	r4, r0
 800120c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001210:	d0b1      	beq.n	8001176 <__gnu_unwind_execute+0xa6>
 8001212:	0124      	lsls	r4, r4, #4
 8001214:	2300      	movs	r3, #0
 8001216:	b2a2      	uxth	r2, r4
 8001218:	4619      	mov	r1, r3
 800121a:	4630      	mov	r0, r6
 800121c:	f7ff fd32 	bl	8000c84 <_Unwind_VRS_Pop>
 8001220:	2800      	cmp	r0, #0
 8001222:	d1a8      	bne.n	8001176 <__gnu_unwind_execute+0xa6>
 8001224:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001228:	bf18      	it	ne
 800122a:	f04f 0801 	movne.w	r8, #1
 800122e:	e756      	b.n	80010de <__gnu_unwind_execute+0xe>
 8001230:	28c6      	cmp	r0, #198	; 0xc6
 8001232:	d07d      	beq.n	8001330 <__gnu_unwind_execute+0x260>
 8001234:	28c7      	cmp	r0, #199	; 0xc7
 8001236:	f000 8086 	beq.w	8001346 <__gnu_unwind_execute+0x276>
 800123a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800123e:	2bc0      	cmp	r3, #192	; 0xc0
 8001240:	f000 8094 	beq.w	800136c <__gnu_unwind_execute+0x29c>
 8001244:	28c8      	cmp	r0, #200	; 0xc8
 8001246:	f000 809f 	beq.w	8001388 <__gnu_unwind_execute+0x2b8>
 800124a:	28c9      	cmp	r0, #201	; 0xc9
 800124c:	d193      	bne.n	8001176 <__gnu_unwind_execute+0xa6>
 800124e:	4638      	mov	r0, r7
 8001250:	f7ff ff12 	bl	8001078 <next_unwind_byte>
 8001254:	0302      	lsls	r2, r0, #12
 8001256:	f000 000f 	and.w	r0, r0, #15
 800125a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800125e:	3001      	adds	r0, #1
 8001260:	4302      	orrs	r2, r0
 8001262:	e781      	b.n	8001168 <__gnu_unwind_execute+0x98>
 8001264:	ac03      	add	r4, sp, #12
 8001266:	4643      	mov	r3, r8
 8001268:	220e      	movs	r2, #14
 800126a:	4641      	mov	r1, r8
 800126c:	9400      	str	r4, [sp, #0]
 800126e:	4630      	mov	r0, r6
 8001270:	f7ff fb14 	bl	800089c <_Unwind_VRS_Get>
 8001274:	9400      	str	r4, [sp, #0]
 8001276:	4630      	mov	r0, r6
 8001278:	4643      	mov	r3, r8
 800127a:	220f      	movs	r2, #15
 800127c:	4641      	mov	r1, r8
 800127e:	f7ff fb33 	bl	80008e8 <_Unwind_VRS_Set>
 8001282:	4640      	mov	r0, r8
 8001284:	e778      	b.n	8001178 <__gnu_unwind_execute+0xa8>
 8001286:	4638      	mov	r0, r7
 8001288:	f7ff fef6 	bl	8001078 <next_unwind_byte>
 800128c:	2800      	cmp	r0, #0
 800128e:	f43f af72 	beq.w	8001176 <__gnu_unwind_execute+0xa6>
 8001292:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001296:	f47f af6e 	bne.w	8001176 <__gnu_unwind_execute+0xa6>
 800129a:	4602      	mov	r2, r0
 800129c:	4619      	mov	r1, r3
 800129e:	4630      	mov	r0, r6
 80012a0:	f7ff fcf0 	bl	8000c84 <_Unwind_VRS_Pop>
 80012a4:	2800      	cmp	r0, #0
 80012a6:	f47f af66 	bne.w	8001176 <__gnu_unwind_execute+0xa6>
 80012aa:	e718      	b.n	80010de <__gnu_unwind_execute+0xe>
 80012ac:	2300      	movs	r3, #0
 80012ae:	f10d 090c 	add.w	r9, sp, #12
 80012b2:	220d      	movs	r2, #13
 80012b4:	4619      	mov	r1, r3
 80012b6:	f8cd 9000 	str.w	r9, [sp]
 80012ba:	4630      	mov	r0, r6
 80012bc:	f7ff faee 	bl	800089c <_Unwind_VRS_Get>
 80012c0:	4638      	mov	r0, r7
 80012c2:	f7ff fed9 	bl	8001078 <next_unwind_byte>
 80012c6:	0602      	lsls	r2, r0, #24
 80012c8:	f04f 0402 	mov.w	r4, #2
 80012cc:	d50c      	bpl.n	80012e8 <__gnu_unwind_execute+0x218>
 80012ce:	9b03      	ldr	r3, [sp, #12]
 80012d0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80012d4:	40a0      	lsls	r0, r4
 80012d6:	4403      	add	r3, r0
 80012d8:	4638      	mov	r0, r7
 80012da:	9303      	str	r3, [sp, #12]
 80012dc:	f7ff fecc 	bl	8001078 <next_unwind_byte>
 80012e0:	0603      	lsls	r3, r0, #24
 80012e2:	f104 0407 	add.w	r4, r4, #7
 80012e6:	d4f2      	bmi.n	80012ce <__gnu_unwind_execute+0x1fe>
 80012e8:	9b03      	ldr	r3, [sp, #12]
 80012ea:	f8cd 9000 	str.w	r9, [sp]
 80012ee:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80012f2:	40a2      	lsls	r2, r4
 80012f4:	f503 7401 	add.w	r4, r3, #516	; 0x204
 80012f8:	2300      	movs	r3, #0
 80012fa:	4414      	add	r4, r2
 80012fc:	4619      	mov	r1, r3
 80012fe:	220d      	movs	r2, #13
 8001300:	4630      	mov	r0, r6
 8001302:	9403      	str	r4, [sp, #12]
 8001304:	f7ff faf0 	bl	80008e8 <_Unwind_VRS_Set>
 8001308:	e6e9      	b.n	80010de <__gnu_unwind_execute+0xe>
 800130a:	4638      	mov	r0, r7
 800130c:	f7ff feb4 	bl	8001078 <next_unwind_byte>
 8001310:	0301      	lsls	r1, r0, #12
 8001312:	f000 000f 	and.w	r0, r0, #15
 8001316:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800131a:	1c42      	adds	r2, r0, #1
 800131c:	2301      	movs	r3, #1
 800131e:	430a      	orrs	r2, r1
 8001320:	4630      	mov	r0, r6
 8001322:	4619      	mov	r1, r3
 8001324:	f7ff fcae 	bl	8000c84 <_Unwind_VRS_Pop>
 8001328:	2800      	cmp	r0, #0
 800132a:	f47f af24 	bne.w	8001176 <__gnu_unwind_execute+0xa6>
 800132e:	e6d6      	b.n	80010de <__gnu_unwind_execute+0xe>
 8001330:	4638      	mov	r0, r7
 8001332:	f7ff fea1 	bl	8001078 <next_unwind_byte>
 8001336:	0301      	lsls	r1, r0, #12
 8001338:	f000 000f 	and.w	r0, r0, #15
 800133c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001340:	1c42      	adds	r2, r0, #1
 8001342:	2303      	movs	r3, #3
 8001344:	e7eb      	b.n	800131e <__gnu_unwind_execute+0x24e>
 8001346:	4638      	mov	r0, r7
 8001348:	f7ff fe96 	bl	8001078 <next_unwind_byte>
 800134c:	2800      	cmp	r0, #0
 800134e:	f43f af12 	beq.w	8001176 <__gnu_unwind_execute+0xa6>
 8001352:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001356:	f47f af0e 	bne.w	8001176 <__gnu_unwind_execute+0xa6>
 800135a:	4602      	mov	r2, r0
 800135c:	2104      	movs	r1, #4
 800135e:	4630      	mov	r0, r6
 8001360:	f7ff fc90 	bl	8000c84 <_Unwind_VRS_Pop>
 8001364:	2800      	cmp	r0, #0
 8001366:	f47f af06 	bne.w	8001176 <__gnu_unwind_execute+0xa6>
 800136a:	e6b8      	b.n	80010de <__gnu_unwind_execute+0xe>
 800136c:	f000 020f 	and.w	r2, r0, #15
 8001370:	3201      	adds	r2, #1
 8001372:	2303      	movs	r3, #3
 8001374:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001378:	4619      	mov	r1, r3
 800137a:	4630      	mov	r0, r6
 800137c:	f7ff fc82 	bl	8000c84 <_Unwind_VRS_Pop>
 8001380:	2800      	cmp	r0, #0
 8001382:	f47f aef8 	bne.w	8001176 <__gnu_unwind_execute+0xa6>
 8001386:	e6aa      	b.n	80010de <__gnu_unwind_execute+0xe>
 8001388:	4638      	mov	r0, r7
 800138a:	f7ff fe75 	bl	8001078 <next_unwind_byte>
 800138e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001392:	f000 030f 	and.w	r3, r0, #15
 8001396:	3210      	adds	r2, #16
 8001398:	3301      	adds	r3, #1
 800139a:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800139e:	e6e3      	b.n	8001168 <__gnu_unwind_execute+0x98>

080013a0 <__gnu_unwind_frame>:
 80013a0:	b510      	push	{r4, lr}
 80013a2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80013a4:	b084      	sub	sp, #16
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	2003      	movs	r0, #3
 80013aa:	f88d 000c 	strb.w	r0, [sp, #12]
 80013ae:	79dc      	ldrb	r4, [r3, #7]
 80013b0:	f88d 400d 	strb.w	r4, [sp, #13]
 80013b4:	0212      	lsls	r2, r2, #8
 80013b6:	3308      	adds	r3, #8
 80013b8:	4608      	mov	r0, r1
 80013ba:	a901      	add	r1, sp, #4
 80013bc:	9201      	str	r2, [sp, #4]
 80013be:	9302      	str	r3, [sp, #8]
 80013c0:	f7ff fe86 	bl	80010d0 <__gnu_unwind_execute>
 80013c4:	b004      	add	sp, #16
 80013c6:	bd10      	pop	{r4, pc}

080013c8 <_Unwind_GetRegionStart>:
 80013c8:	b508      	push	{r3, lr}
 80013ca:	f7ff fe7f 	bl	80010cc <unwind_UCB_from_context>
 80013ce:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80013d0:	bd08      	pop	{r3, pc}
 80013d2:	bf00      	nop

080013d4 <_Unwind_GetLanguageSpecificData>:
 80013d4:	b508      	push	{r3, lr}
 80013d6:	f7ff fe79 	bl	80010cc <unwind_UCB_from_context>
 80013da:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80013dc:	79c3      	ldrb	r3, [r0, #7]
 80013de:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80013e2:	3008      	adds	r0, #8
 80013e4:	bd08      	pop	{r3, pc}
 80013e6:	bf00      	nop

080013e8 <_Unwind_GetTextRelBase>:
 80013e8:	b508      	push	{r3, lr}
 80013ea:	f009 fa36 	bl	800a85a <abort>
 80013ee:	bf00      	nop

080013f0 <_Unwind_GetDataRelBase>:
 80013f0:	b508      	push	{r3, lr}
 80013f2:	f7ff fff9 	bl	80013e8 <_Unwind_GetTextRelBase>
 80013f6:	bf00      	nop

080013f8 <__aeabi_idiv0>:
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop

080013fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013fc:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <HAL_Init+0x30>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001406:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800140e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001416:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001418:	2003      	movs	r0, #3
 800141a:	f000 fb91 	bl	8001b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800141e:	2000      	movs	r0, #0
 8001420:	f006 f948 	bl	80076b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001424:	f006 f89c 	bl	8007560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001428:	2000      	movs	r0, #0
 800142a:	bd08      	pop	{r3, pc}
 800142c:	40023c00 	.word	0x40023c00

08001430 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001430:	4a03      	ldr	r2, [pc, #12]	; (8001440 <HAL_IncTick+0x10>)
 8001432:	4b04      	ldr	r3, [pc, #16]	; (8001444 <HAL_IncTick+0x14>)
 8001434:	6811      	ldr	r1, [r2, #0]
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	440b      	add	r3, r1
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	200048a0 	.word	0x200048a0
 8001444:	20000000 	.word	0x20000000

08001448 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001448:	4b01      	ldr	r3, [pc, #4]	; (8001450 <HAL_GetTick+0x8>)
 800144a:	6818      	ldr	r0, [r3, #0]
}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	200048a0 	.word	0x200048a0

08001454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001454:	b538      	push	{r3, r4, r5, lr}
 8001456:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001458:	f7ff fff6 	bl	8001448 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800145c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800145e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001460:	d002      	beq.n	8001468 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <HAL_Delay+0x20>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001468:	f7ff ffee 	bl	8001448 <HAL_GetTick>
 800146c:	1b40      	subs	r0, r0, r5
 800146e:	4284      	cmp	r4, r0
 8001470:	d8fa      	bhi.n	8001468 <HAL_Delay+0x14>
  {
  }
}
 8001472:	bd38      	pop	{r3, r4, r5, pc}
 8001474:	20000000 	.word	0x20000000

08001478 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001478:	2800      	cmp	r0, #0
 800147a:	d07c      	beq.n	8001576 <HAL_CAN_Init+0xfe>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800147c:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8001480:	b570      	push	{r4, r5, r6, lr}
 8001482:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001484:	2b00      	cmp	r3, #0
 8001486:	d073      	beq.n	8001570 <HAL_CAN_Init+0xf8>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001488:	6822      	ldr	r2, [r4, #0]
 800148a:	6813      	ldr	r3, [r2, #0]
 800148c:	f023 0302 	bic.w	r3, r3, #2
 8001490:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001492:	f7ff ffd9 	bl	8001448 <HAL_GetTick>
 8001496:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001498:	e004      	b.n	80014a4 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800149a:	f7ff ffd5 	bl	8001448 <HAL_GetTick>
 800149e:	1b40      	subs	r0, r0, r5
 80014a0:	280a      	cmp	r0, #10
 80014a2:	d85c      	bhi.n	800155e <HAL_CAN_Init+0xe6>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014a4:	6823      	ldr	r3, [r4, #0]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	0791      	lsls	r1, r2, #30
 80014aa:	d4f6      	bmi.n	800149a <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	f042 0201 	orr.w	r2, r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b4:	f7ff ffc8 	bl	8001448 <HAL_GetTick>
 80014b8:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014ba:	e004      	b.n	80014c6 <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014bc:	f7ff ffc4 	bl	8001448 <HAL_GetTick>
 80014c0:	1b40      	subs	r0, r0, r5
 80014c2:	280a      	cmp	r0, #10
 80014c4:	d84b      	bhi.n	800155e <HAL_CAN_Init+0xe6>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014c6:	6823      	ldr	r3, [r4, #0]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	07d2      	lsls	r2, r2, #31
 80014cc:	d5f6      	bpl.n	80014bc <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80014ce:	7e22      	ldrb	r2, [r4, #24]
 80014d0:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	bf0c      	ite	eq
 80014d6:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014da:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80014de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80014e0:	7e62      	ldrb	r2, [r4, #25]
 80014e2:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	bf0c      	ite	eq
 80014e8:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014ec:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80014f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80014f2:	7ea2      	ldrb	r2, [r4, #26]
 80014f4:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	bf0c      	ite	eq
 80014fa:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014fe:	f022 0220 	bicne.w	r2, r2, #32
 8001502:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001504:	7ee2      	ldrb	r2, [r4, #27]
 8001506:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	bf0c      	ite	eq
 800150c:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001510:	f042 0210 	orrne.w	r2, r2, #16
 8001514:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001516:	7f22      	ldrb	r2, [r4, #28]
 8001518:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	bf0c      	ite	eq
 800151e:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001522:	f022 0208 	bicne.w	r2, r2, #8
 8001526:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001528:	7f62      	ldrb	r2, [r4, #29]
 800152a:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	bf0c      	ite	eq
 8001530:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001534:	f022 0204 	bicne.w	r2, r2, #4
 8001538:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800153a:	68a2      	ldr	r2, [r4, #8]
 800153c:	68e6      	ldr	r6, [r4, #12]
 800153e:	6925      	ldr	r5, [r4, #16]
 8001540:	6960      	ldr	r0, [r4, #20]
 8001542:	6861      	ldr	r1, [r4, #4]
 8001544:	4332      	orrs	r2, r6
 8001546:	432a      	orrs	r2, r5
 8001548:	4302      	orrs	r2, r0
 800154a:	3901      	subs	r1, #1
 800154c:	430a      	orrs	r2, r1

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800154e:	2501      	movs	r5, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001550:	2100      	movs	r1, #0
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001552:	61da      	str	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 8001554:	4608      	mov	r0, r1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001556:	6261      	str	r1, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001558:	f884 5020 	strb.w	r5, [r4, #32]
  return HAL_OK;
 800155c:	bd70      	pop	{r4, r5, r6, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800155e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8001560:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001566:	6263      	str	r3, [r4, #36]	; 0x24
      return HAL_ERROR;
 8001568:	2001      	movs	r0, #1
      hcan->State = HAL_CAN_STATE_ERROR;
 800156a:	f884 2020 	strb.w	r2, [r4, #32]
      return HAL_ERROR;
 800156e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_CAN_MspInit(hcan);
 8001570:	f006 f818 	bl	80075a4 <HAL_CAN_MspInit>
 8001574:	e788      	b.n	8001488 <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 8001576:	2001      	movs	r0, #1
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop

0800157c <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 800157c:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8001580:	3b01      	subs	r3, #1
 8001582:	2b01      	cmp	r3, #1
 8001584:	d905      	bls.n	8001592 <HAL_CAN_ConfigFilter+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001586:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800158c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800158e:	2001      	movs	r0, #1
 8001590:	4770      	bx	lr
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001592:	4b3c      	ldr	r3, [pc, #240]	; (8001684 <HAL_CAN_ConfigFilter+0x108>)
 8001594:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001598:	f042 0201 	orr.w	r2, r2, #1
{
 800159c:	b4f0      	push	{r4, r5, r6, r7}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800159e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80015a2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80015a6:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80015aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80015ae:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80015b2:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80015b4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80015b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80015bc:	694a      	ldr	r2, [r1, #20]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80015be:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80015c2:	2401      	movs	r4, #1
 80015c4:	f002 001f 	and.w	r0, r2, #31
 80015c8:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80015cc:	43c4      	mvns	r4, r0
 80015ce:	4025      	ands	r5, r4
 80015d0:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80015d4:	69cd      	ldr	r5, [r1, #28]
 80015d6:	2d00      	cmp	r5, #0
 80015d8:	d03a      	beq.n	8001650 <HAL_CAN_ConfigFilter+0xd4>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80015da:	2d01      	cmp	r5, #1
 80015dc:	d115      	bne.n	800160a <HAL_CAN_ConfigFilter+0x8e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80015de:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 80015e2:	4305      	orrs	r5, r0
 80015e4:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
 80015e8:	00d2      	lsls	r2, r2, #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015ea:	680f      	ldr	r7, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015ec:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015ee:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80015f0:	898b      	ldrh	r3, [r1, #12]
 80015f2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80015f6:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015fa:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001602:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001606:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800160a:	698b      	ldr	r3, [r1, #24]
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800160c:	4a1d      	ldr	r2, [pc, #116]	; (8001684 <HAL_CAN_ConfigFilter+0x108>)
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800160e:	bb9b      	cbnz	r3, 8001678 <HAL_CAN_ConfigFilter+0xfc>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001610:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8001614:	4023      	ands	r3, r4
 8001616:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800161a:	690b      	ldr	r3, [r1, #16]
 800161c:	bb2b      	cbnz	r3, 800166a <HAL_CAN_ConfigFilter+0xee>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800161e:	4b19      	ldr	r3, [pc, #100]	; (8001684 <HAL_CAN_ConfigFilter+0x108>)
 8001620:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001624:	4014      	ands	r4, r2
 8001626:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800162a:	6a0b      	ldr	r3, [r1, #32]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d105      	bne.n	800163c <HAL_CAN_ConfigFilter+0xc0>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <HAL_CAN_ConfigFilter+0x108>)
 8001632:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001636:	4310      	orrs	r0, r2
 8001638:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800163c:	4a11      	ldr	r2, [pc, #68]	; (8001684 <HAL_CAN_ConfigFilter+0x108>)
 800163e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8001642:	f023 0301 	bic.w	r3, r3, #1
    return HAL_OK;
 8001646:	2000      	movs	r0, #0
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001648:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  }
}
 800164c:	bcf0      	pop	{r4, r5, r6, r7}
 800164e:	4770      	bx	lr
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001650:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8001654:	4025      	ands	r5, r4
 8001656:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
 800165a:	00d2      	lsls	r2, r2, #3
 800165c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001660:	68cf      	ldr	r7, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001662:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001664:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001666:	880b      	ldrh	r3, [r1, #0]
 8001668:	e7c5      	b.n	80015f6 <HAL_CAN_ConfigFilter+0x7a>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800166a:	4a06      	ldr	r2, [pc, #24]	; (8001684 <HAL_CAN_ConfigFilter+0x108>)
 800166c:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8001670:	4303      	orrs	r3, r0
 8001672:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8001676:	e7d8      	b.n	800162a <HAL_CAN_ConfigFilter+0xae>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001678:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 800167c:	4303      	orrs	r3, r0
 800167e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 8001682:	e7ca      	b.n	800161a <HAL_CAN_ConfigFilter+0x9e>
 8001684:	40006400 	.word	0x40006400

08001688 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001688:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800168a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d005      	beq.n	800169e <HAL_CAN_Start+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001692:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001694:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001698:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800169a:	2001      	movs	r0, #1
  }
}
 800169c:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800169e:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016a0:	2302      	movs	r3, #2
 80016a2:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016a6:	6813      	ldr	r3, [r2, #0]
 80016a8:	f023 0301 	bic.w	r3, r3, #1
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 80016b0:	f7ff feca 	bl	8001448 <HAL_GetTick>
 80016b4:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016b6:	e004      	b.n	80016c2 <HAL_CAN_Start+0x3a>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016b8:	f7ff fec6 	bl	8001448 <HAL_GetTick>
 80016bc:	1b40      	subs	r0, r0, r5
 80016be:	280a      	cmp	r0, #10
 80016c0:	d807      	bhi.n	80016d2 <HAL_CAN_Start+0x4a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016c2:	6823      	ldr	r3, [r4, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f013 0301 	ands.w	r3, r3, #1
 80016ca:	d1f5      	bne.n	80016b8 <HAL_CAN_Start+0x30>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016cc:	6263      	str	r3, [r4, #36]	; 0x24
    return HAL_OK;
 80016ce:	4618      	mov	r0, r3
 80016d0:	bd38      	pop	{r3, r4, r5, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80016d4:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016da:	6263      	str	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 80016dc:	2001      	movs	r0, #1
        hcan->State = HAL_CAN_STATE_ERROR;
 80016de:	f884 2020 	strb.w	r2, [r4, #32]
        return HAL_ERROR;
 80016e2:	bd38      	pop	{r3, r4, r5, pc}

080016e4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80016e4:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80016e6:	f890 4020 	ldrb.w	r4, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80016ea:	6805      	ldr	r5, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80016ec:	3c01      	subs	r4, #1
 80016ee:	2c01      	cmp	r4, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80016f0:	68ae      	ldr	r6, [r5, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80016f2:	d906      	bls.n	8001702 <HAL_CAN_AddTxMessage+0x1e>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80016f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016fa:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80016fc:	2001      	movs	r0, #1
  }
}
 80016fe:	bcf0      	pop	{r4, r5, r6, r7}
 8001700:	4770      	bx	lr
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001702:	f016 5fe0 	tst.w	r6, #469762048	; 0x1c000000
 8001706:	d02e      	beq.n	8001766 <HAL_CAN_AddTxMessage+0x82>
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001708:	f3c6 6601 	ubfx	r6, r6, #24, #2
      if (transmitmailbox > 2U)
 800170c:	2e03      	cmp	r6, #3
 800170e:	d031      	beq.n	8001774 <HAL_CAN_AddTxMessage+0x90>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001710:	2001      	movs	r0, #1
 8001712:	40b0      	lsls	r0, r6
 8001714:	6018      	str	r0, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8001716:	688b      	ldr	r3, [r1, #8]
 8001718:	bb93      	cbnz	r3, 8001780 <HAL_CAN_AddTxMessage+0x9c>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800171a:	680c      	ldr	r4, [r1, #0]
 800171c:	68c8      	ldr	r0, [r1, #12]
 800171e:	f106 0318 	add.w	r3, r6, #24
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	ea40 5044 	orr.w	r0, r0, r4, lsl #21
 8001728:	50e8      	str	r0, [r5, r3]
      if (pHeader->TransmitGlobalTime == ENABLE)
 800172a:	7d08      	ldrb	r0, [r1, #20]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800172c:	6909      	ldr	r1, [r1, #16]
 800172e:	0136      	lsls	r6, r6, #4
 8001730:	19ab      	adds	r3, r5, r6
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001732:	2801      	cmp	r0, #1
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001734:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001738:	d105      	bne.n	8001746 <HAL_CAN_AddTxMessage+0x62>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800173a:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
 800173e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001742:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001746:	4435      	add	r5, r6
 8001748:	6851      	ldr	r1, [r2, #4]
 800174a:	f8c5 118c 	str.w	r1, [r5, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	f8c5 2188 	str.w	r2, [r5, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001754:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8001758:	f042 0201 	orr.w	r2, r2, #1
      return HAL_OK;
 800175c:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800175e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
 8001762:	bcf0      	pop	{r4, r5, r6, r7}
 8001764:	4770      	bx	lr
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001766:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001768:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800176c:	6243      	str	r3, [r0, #36]	; 0x24
}
 800176e:	bcf0      	pop	{r4, r5, r6, r7}
      return HAL_ERROR;
 8001770:	2001      	movs	r0, #1
}
 8001772:	4770      	bx	lr
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001774:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001776:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800177a:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 800177c:	2001      	movs	r0, #1
 800177e:	e7be      	b.n	80016fe <HAL_CAN_AddTxMessage+0x1a>
                                                           pHeader->IDE |
 8001780:	68cf      	ldr	r7, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001782:	684c      	ldr	r4, [r1, #4]
 8001784:	f106 0018 	add.w	r0, r6, #24
                                                           pHeader->IDE |
 8001788:	433b      	orrs	r3, r7
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800178a:	0100      	lsls	r0, r0, #4
                                                           pHeader->IDE |
 800178c:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001790:	502b      	str	r3, [r5, r0]
 8001792:	e7ca      	b.n	800172a <HAL_CAN_AddTxMessage+0x46>

08001794 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8001798:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800179c:	3c01      	subs	r4, #1
 800179e:	2c01      	cmp	r4, #1
 80017a0:	d906      	bls.n	80017b0 <HAL_CAN_GetRxMessage+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a8:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80017aa:	2001      	movs	r0, #1
  }
}
 80017ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80017b0:	6805      	ldr	r5, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017b2:	2900      	cmp	r1, #0
 80017b4:	d05a      	beq.n	800186c <HAL_CAN_GetRxMessage+0xd8>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80017b6:	692c      	ldr	r4, [r5, #16]
 80017b8:	07a4      	lsls	r4, r4, #30
 80017ba:	d05a      	beq.n	8001872 <HAL_CAN_GetRxMessage+0xde>
 80017bc:	010c      	lsls	r4, r1, #4
 80017be:	192e      	adds	r6, r5, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80017c0:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 80017c4:	f007 0704 	and.w	r7, r7, #4
 80017c8:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80017ca:	2f00      	cmp	r7, #0
 80017cc:	d15f      	bne.n	800188e <HAL_CAN_GetRxMessage+0xfa>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80017ce:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 80017d2:	0d7f      	lsrs	r7, r7, #21
 80017d4:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80017d6:	f8d6 c1b0 	ldr.w	ip, [r6, #432]	; 0x1b0
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80017da:	f8d6 e1b4 	ldr.w	lr, [r6, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80017de:	f8d6 71b4 	ldr.w	r7, [r6, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80017e2:	f8d6 61b4 	ldr.w	r6, [r6, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80017e6:	4425      	add	r5, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80017e8:	f00c 0c02 	and.w	ip, ip, #2
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80017ec:	f8d5 81b8 	ldr.w	r8, [r5, #440]	; 0x1b8
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80017f0:	f8c2 c00c 	str.w	ip, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80017f4:	f00e 050f 	and.w	r5, lr, #15
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80017f8:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80017fc:	0c36      	lsrs	r6, r6, #16
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80017fe:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001800:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001802:	6156      	str	r6, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001804:	f883 8000 	strb.w	r8, [r3]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001808:	6802      	ldr	r2, [r0, #0]
 800180a:	4422      	add	r2, r4
 800180c:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001810:	0a12      	lsrs	r2, r2, #8
 8001812:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001814:	6802      	ldr	r2, [r0, #0]
 8001816:	4422      	add	r2, r4
 8001818:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800181c:	0c12      	lsrs	r2, r2, #16
 800181e:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001820:	6802      	ldr	r2, [r0, #0]
 8001822:	4422      	add	r2, r4
 8001824:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001828:	0e12      	lsrs	r2, r2, #24
 800182a:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800182c:	6802      	ldr	r2, [r0, #0]
 800182e:	4422      	add	r2, r4
 8001830:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001834:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001836:	6802      	ldr	r2, [r0, #0]
 8001838:	4422      	add	r2, r4
 800183a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800183e:	0a12      	lsrs	r2, r2, #8
 8001840:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001842:	6802      	ldr	r2, [r0, #0]
 8001844:	4422      	add	r2, r4
 8001846:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800184a:	0c12      	lsrs	r2, r2, #16
 800184c:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800184e:	6802      	ldr	r2, [r0, #0]
 8001850:	4414      	add	r4, r2
 8001852:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8001856:	0e12      	lsrs	r2, r2, #24
 8001858:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800185a:	6802      	ldr	r2, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800185c:	b981      	cbnz	r1, 8001880 <HAL_CAN_GetRxMessage+0xec>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800185e:	68d3      	ldr	r3, [r2, #12]
 8001860:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 8001864:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001866:	60d3      	str	r3, [r2, #12]
 8001868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800186c:	68ec      	ldr	r4, [r5, #12]
 800186e:	07a6      	lsls	r6, r4, #30
 8001870:	d1a4      	bne.n	80017bc <HAL_CAN_GetRxMessage+0x28>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001872:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001874:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001878:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 800187a:	2001      	movs	r0, #1
 800187c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001880:	6913      	ldr	r3, [r2, #16]
 8001882:	f043 0320 	orr.w	r3, r3, #32
 8001886:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 8001888:	2000      	movs	r0, #0
 800188a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800188e:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 8001892:	08ff      	lsrs	r7, r7, #3
 8001894:	6057      	str	r7, [r2, #4]
 8001896:	e79e      	b.n	80017d6 <HAL_CAN_GetRxMessage+0x42>

08001898 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8001898:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800189c:	3b01      	subs	r3, #1
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d905      	bls.n	80018ae <HAL_CAN_ActivateNotification+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80018a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a8:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80018aa:	2001      	movs	r0, #1
  }
}
 80018ac:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80018ae:	6802      	ldr	r2, [r0, #0]
 80018b0:	6953      	ldr	r3, [r2, #20]
 80018b2:	4319      	orrs	r1, r3
 80018b4:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 80018b6:	2000      	movs	r0, #0
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop

080018bc <HAL_CAN_TxMailbox0CompleteCallback>:
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop

080018c0 <HAL_CAN_TxMailbox1CompleteCallback>:
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop

080018c4 <HAL_CAN_TxMailbox2CompleteCallback>:
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop

080018c8 <HAL_CAN_TxMailbox0AbortCallback>:
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop

080018cc <HAL_CAN_TxMailbox1AbortCallback>:
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop

080018d0 <HAL_CAN_TxMailbox2AbortCallback>:
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop

080018d4 <HAL_CAN_RxFifo0FullCallback>:
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop

080018d8 <HAL_CAN_RxFifo1MsgPendingCallback>:
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop

080018dc <HAL_CAN_RxFifo1FullCallback>:
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop

080018e0 <HAL_CAN_SleepCallback>:
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop

080018e4 <HAL_CAN_WakeUpFromRxMsgCallback>:
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop

080018e8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop

080018ec <HAL_CAN_IRQHandler>:
{
 80018ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018f0:	6803      	ldr	r3, [r0, #0]
 80018f2:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80018f4:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80018f8:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80018fa:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80018fe:	f8d3 9010 	ldr.w	r9, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001902:	f8d3 a018 	ldr.w	sl, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001906:	f014 0501 	ands.w	r5, r4, #1
{
 800190a:	4606      	mov	r6, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800190c:	d025      	beq.n	800195a <HAL_CAN_IRQHandler+0x6e>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800190e:	f017 0501 	ands.w	r5, r7, #1
 8001912:	f040 809f 	bne.w	8001a54 <HAL_CAN_IRQHandler+0x168>
 8001916:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800191a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800191e:	05f8      	lsls	r0, r7, #23
 8001920:	d50d      	bpl.n	800193e <HAL_CAN_IRQHandler+0x52>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001922:	6833      	ldr	r3, [r6, #0]
 8001924:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001928:	6098      	str	r0, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800192a:	05bb      	lsls	r3, r7, #22
 800192c:	f100 80ca 	bmi.w	8001ac4 <HAL_CAN_IRQHandler+0x1d8>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001930:	0578      	lsls	r0, r7, #21
 8001932:	f100 80da 	bmi.w	8001aea <HAL_CAN_IRQHandler+0x1fe>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001936:	053b      	lsls	r3, r7, #20
 8001938:	f140 80eb 	bpl.w	8001b12 <HAL_CAN_IRQHandler+0x226>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800193c:	460d      	mov	r5, r1
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800193e:	03f8      	lsls	r0, r7, #15
 8001940:	d50b      	bpl.n	800195a <HAL_CAN_IRQHandler+0x6e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001942:	6833      	ldr	r3, [r6, #0]
 8001944:	f44f 3280 	mov.w	r2, #65536	; 0x10000
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001948:	03b9      	lsls	r1, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800194a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800194c:	f100 80b6 	bmi.w	8001abc <HAL_CAN_IRQHandler+0x1d0>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001950:	037a      	lsls	r2, r7, #13
 8001952:	f140 80cc 	bpl.w	8001aee <HAL_CAN_IRQHandler+0x202>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001956:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800195a:	0727      	lsls	r7, r4, #28
 800195c:	d502      	bpl.n	8001964 <HAL_CAN_IRQHandler+0x78>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800195e:	f01b 0f10 	tst.w	fp, #16
 8001962:	d171      	bne.n	8001a48 <HAL_CAN_IRQHandler+0x15c>
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001964:	0760      	lsls	r0, r4, #29
 8001966:	d503      	bpl.n	8001970 <HAL_CAN_IRQHandler+0x84>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001968:	f01b 0f08 	tst.w	fp, #8
 800196c:	f040 8082 	bne.w	8001a74 <HAL_CAN_IRQHandler+0x188>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001970:	07a1      	lsls	r1, r4, #30
 8001972:	d504      	bpl.n	800197e <HAL_CAN_IRQHandler+0x92>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001974:	6833      	ldr	r3, [r6, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	079a      	lsls	r2, r3, #30
 800197a:	f040 8090 	bne.w	8001a9e <HAL_CAN_IRQHandler+0x1b2>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800197e:	0663      	lsls	r3, r4, #25
 8001980:	d502      	bpl.n	8001988 <HAL_CAN_IRQHandler+0x9c>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001982:	f019 0f10 	tst.w	r9, #16
 8001986:	d159      	bne.n	8001a3c <HAL_CAN_IRQHandler+0x150>
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001988:	06a7      	lsls	r7, r4, #26
 800198a:	d503      	bpl.n	8001994 <HAL_CAN_IRQHandler+0xa8>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800198c:	f019 0f08 	tst.w	r9, #8
 8001990:	f040 8089 	bne.w	8001aa6 <HAL_CAN_IRQHandler+0x1ba>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001994:	06e0      	lsls	r0, r4, #27
 8001996:	d504      	bpl.n	80019a2 <HAL_CAN_IRQHandler+0xb6>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001998:	6833      	ldr	r3, [r6, #0]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	0799      	lsls	r1, r3, #30
 800199e:	f040 8089 	bne.w	8001ab4 <HAL_CAN_IRQHandler+0x1c8>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80019a2:	03a2      	lsls	r2, r4, #14
 80019a4:	d502      	bpl.n	80019ac <HAL_CAN_IRQHandler+0xc0>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80019a6:	f018 0f10 	tst.w	r8, #16
 80019aa:	d16a      	bne.n	8001a82 <HAL_CAN_IRQHandler+0x196>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80019ac:	03e3      	lsls	r3, r4, #15
 80019ae:	d502      	bpl.n	80019b6 <HAL_CAN_IRQHandler+0xca>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80019b0:	f018 0f08 	tst.w	r8, #8
 80019b4:	d16c      	bne.n	8001a90 <HAL_CAN_IRQHandler+0x1a4>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80019b6:	0427      	lsls	r7, r4, #16
 80019b8:	d505      	bpl.n	80019c6 <HAL_CAN_IRQHandler+0xda>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80019ba:	f018 0f04 	tst.w	r8, #4
 80019be:	d10b      	bne.n	80019d8 <HAL_CAN_IRQHandler+0xec>
 80019c0:	6833      	ldr	r3, [r6, #0]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80019c2:	2204      	movs	r2, #4
 80019c4:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 80019c6:	b12d      	cbz	r5, 80019d4 <HAL_CAN_IRQHandler+0xe8>
    hcan->ErrorCode |= errorcode;
 80019c8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80019ca:	431d      	orrs	r5, r3
 80019cc:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80019ce:	4630      	mov	r0, r6
 80019d0:	f7ff ff8a 	bl	80018e8 <HAL_CAN_ErrorCallback>
 80019d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019d8:	05e0      	lsls	r0, r4, #23
 80019da:	d504      	bpl.n	80019e6 <HAL_CAN_IRQHandler+0xfa>
 80019dc:	f01a 0f01 	tst.w	sl, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 80019e0:	bf18      	it	ne
 80019e2:	f045 0501 	orrne.w	r5, r5, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019e6:	05a1      	lsls	r1, r4, #22
 80019e8:	d504      	bpl.n	80019f4 <HAL_CAN_IRQHandler+0x108>
 80019ea:	f01a 0f02 	tst.w	sl, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 80019ee:	bf18      	it	ne
 80019f0:	f045 0502 	orrne.w	r5, r5, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019f4:	0562      	lsls	r2, r4, #21
 80019f6:	d504      	bpl.n	8001a02 <HAL_CAN_IRQHandler+0x116>
 80019f8:	f01a 0f04 	tst.w	sl, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 80019fc:	bf18      	it	ne
 80019fe:	f045 0504 	orrne.w	r5, r5, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a02:	0523      	lsls	r3, r4, #20
 8001a04:	d5dc      	bpl.n	80019c0 <HAL_CAN_IRQHandler+0xd4>
 8001a06:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 8001a0a:	d0d9      	beq.n	80019c0 <HAL_CAN_IRQHandler+0xd4>
        switch (esrflags & CAN_ESR_LEC)
 8001a0c:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8001a10:	f000 808d 	beq.w	8001b2e <HAL_CAN_IRQHandler+0x242>
 8001a14:	d970      	bls.n	8001af8 <HAL_CAN_IRQHandler+0x20c>
 8001a16:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 8001a1a:	f000 8085 	beq.w	8001b28 <HAL_CAN_IRQHandler+0x23c>
 8001a1e:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 8001a22:	f000 8087 	beq.w	8001b34 <HAL_CAN_IRQHandler+0x248>
 8001a26:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8001a2a:	d101      	bne.n	8001a30 <HAL_CAN_IRQHandler+0x144>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a2c:	f045 0540 	orr.w	r5, r5, #64	; 0x40
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a30:	6833      	ldr	r3, [r6, #0]
 8001a32:	699a      	ldr	r2, [r3, #24]
 8001a34:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a38:	619a      	str	r2, [r3, #24]
 8001a3a:	e7c2      	b.n	80019c2 <HAL_CAN_IRQHandler+0xd6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a3c:	6833      	ldr	r3, [r6, #0]
 8001a3e:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a40:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a44:	611a      	str	r2, [r3, #16]
 8001a46:	e79f      	b.n	8001988 <HAL_CAN_IRQHandler+0x9c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a48:	6833      	ldr	r3, [r6, #0]
 8001a4a:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a4c:	f445 7500 	orr.w	r5, r5, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	e787      	b.n	8001964 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a54:	2201      	movs	r2, #1
 8001a56:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a58:	07bb      	lsls	r3, r7, #30
 8001a5a:	d437      	bmi.n	8001acc <HAL_CAN_IRQHandler+0x1e0>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a5c:	077d      	lsls	r5, r7, #29
 8001a5e:	d43d      	bmi.n	8001adc <HAL_CAN_IRQHandler+0x1f0>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a60:	f017 0508 	ands.w	r5, r7, #8
 8001a64:	d059      	beq.n	8001b1a <HAL_CAN_IRQHandler+0x22e>
 8001a66:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8001a6a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a6e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8001a72:	e754      	b.n	800191e <HAL_CAN_IRQHandler+0x32>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a74:	6833      	ldr	r3, [r6, #0]
 8001a76:	2208      	movs	r2, #8
 8001a78:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a7a:	4630      	mov	r0, r6
 8001a7c:	f7ff ff2a 	bl	80018d4 <HAL_CAN_RxFifo0FullCallback>
 8001a80:	e776      	b.n	8001970 <HAL_CAN_IRQHandler+0x84>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a82:	6833      	ldr	r3, [r6, #0]
 8001a84:	2210      	movs	r2, #16
 8001a86:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8001a88:	4630      	mov	r0, r6
 8001a8a:	f7ff ff29 	bl	80018e0 <HAL_CAN_SleepCallback>
 8001a8e:	e78d      	b.n	80019ac <HAL_CAN_IRQHandler+0xc0>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a90:	6833      	ldr	r3, [r6, #0]
 8001a92:	2208      	movs	r2, #8
 8001a94:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a96:	4630      	mov	r0, r6
 8001a98:	f7ff ff24 	bl	80018e4 <HAL_CAN_WakeUpFromRxMsgCallback>
 8001a9c:	e78b      	b.n	80019b6 <HAL_CAN_IRQHandler+0xca>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a9e:	4630      	mov	r0, r6
 8001aa0:	f005 fad4 	bl	800704c <HAL_CAN_RxFifo0MsgPendingCallback>
 8001aa4:	e76b      	b.n	800197e <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001aa6:	6833      	ldr	r3, [r6, #0]
 8001aa8:	2208      	movs	r2, #8
 8001aaa:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001aac:	4630      	mov	r0, r6
 8001aae:	f7ff ff15 	bl	80018dc <HAL_CAN_RxFifo1FullCallback>
 8001ab2:	e76f      	b.n	8001994 <HAL_CAN_IRQHandler+0xa8>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ab4:	4630      	mov	r0, r6
 8001ab6:	f7ff ff0f 	bl	80018d8 <HAL_CAN_RxFifo1MsgPendingCallback>
 8001aba:	e772      	b.n	80019a2 <HAL_CAN_IRQHandler+0xb6>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001abc:	4630      	mov	r0, r6
 8001abe:	f7ff ff01 	bl	80018c4 <HAL_CAN_TxMailbox2CompleteCallback>
 8001ac2:	e74a      	b.n	800195a <HAL_CAN_IRQHandler+0x6e>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ac4:	4630      	mov	r0, r6
 8001ac6:	f7ff fefb 	bl	80018c0 <HAL_CAN_TxMailbox1CompleteCallback>
 8001aca:	e738      	b.n	800193e <HAL_CAN_IRQHandler+0x52>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001acc:	f7ff fef6 	bl	80018bc <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ad0:	2500      	movs	r5, #0
 8001ad2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ad6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ada:	e720      	b.n	800191e <HAL_CAN_IRQHandler+0x32>
 8001adc:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8001ae0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ae4:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8001ae8:	e719      	b.n	800191e <HAL_CAN_IRQHandler+0x32>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001aea:	4615      	mov	r5, r2
 8001aec:	e727      	b.n	800193e <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001aee:	033b      	lsls	r3, r7, #12
 8001af0:	d50b      	bpl.n	8001b0a <HAL_CAN_IRQHandler+0x21e>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001af2:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
 8001af6:	e730      	b.n	800195a <HAL_CAN_IRQHandler+0x6e>
        switch (esrflags & CAN_ESR_LEC)
 8001af8:	f1ba 0f10 	cmp.w	sl, #16
 8001afc:	d01d      	beq.n	8001b3a <HAL_CAN_IRQHandler+0x24e>
 8001afe:	f1ba 0f20 	cmp.w	sl, #32
 8001b02:	d195      	bne.n	8001a30 <HAL_CAN_IRQHandler+0x144>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b04:	f045 0510 	orr.w	r5, r5, #16
            break;
 8001b08:	e792      	b.n	8001a30 <HAL_CAN_IRQHandler+0x144>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b0a:	4630      	mov	r0, r6
 8001b0c:	f7ff fee0 	bl	80018d0 <HAL_CAN_TxMailbox2AbortCallback>
 8001b10:	e723      	b.n	800195a <HAL_CAN_IRQHandler+0x6e>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b12:	4630      	mov	r0, r6
 8001b14:	f7ff feda 	bl	80018cc <HAL_CAN_TxMailbox1AbortCallback>
 8001b18:	e711      	b.n	800193e <HAL_CAN_IRQHandler+0x52>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b1a:	f7ff fed5 	bl	80018c8 <HAL_CAN_TxMailbox0AbortCallback>
 8001b1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b26:	e6fa      	b.n	800191e <HAL_CAN_IRQHandler+0x32>
            errorcode |= HAL_CAN_ERROR_BD;
 8001b28:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            break;
 8001b2c:	e780      	b.n	8001a30 <HAL_CAN_IRQHandler+0x144>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001b2e:	f045 0520 	orr.w	r5, r5, #32
            break;
 8001b32:	e77d      	b.n	8001a30 <HAL_CAN_IRQHandler+0x144>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001b34:	f445 7580 	orr.w	r5, r5, #256	; 0x100
            break;
 8001b38:	e77a      	b.n	8001a30 <HAL_CAN_IRQHandler+0x144>
            errorcode |= HAL_CAN_ERROR_STF;
 8001b3a:	f045 0508 	orr.w	r5, r5, #8
            break;
 8001b3e:	e777      	b.n	8001a30 <HAL_CAN_IRQHandler+0x144>

08001b40 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b40:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001b42:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b44:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8001b48:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b4a:	0200      	lsls	r0, r0, #8
 8001b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b50:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001b58:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001b5a:	60d3      	str	r3, [r2, #12]
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b64:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b66:	b470      	push	{r4, r5, r6}
 8001b68:	68dc      	ldr	r4, [r3, #12]
 8001b6a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b6e:	f1c4 0607 	rsb	r6, r4, #7
 8001b72:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b74:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b78:	bf28      	it	cs
 8001b7a:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7c:	2b06      	cmp	r3, #6
 8001b7e:	d917      	bls.n	8001bb0 <HAL_NVIC_SetPriority+0x4c>
 8001b80:	3c03      	subs	r4, #3
 8001b82:	2501      	movs	r5, #1
 8001b84:	40a5      	lsls	r5, r4
 8001b86:	3d01      	subs	r5, #1
 8001b88:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	40b3      	lsls	r3, r6
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	4019      	ands	r1, r3
 8001b92:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8001b94:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b96:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001b9a:	db0c      	blt.n	8001bb6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001ba0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001ba4:	0109      	lsls	r1, r1, #4
 8001ba6:	b2c9      	uxtb	r1, r1
 8001ba8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001bac:	bc70      	pop	{r4, r5, r6}
 8001bae:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	4614      	mov	r4, r2
 8001bb4:	e7e9      	b.n	8001b8a <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb6:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <HAL_NVIC_SetPriority+0x68>)
 8001bb8:	f000 000f 	and.w	r0, r0, #15
 8001bbc:	0109      	lsls	r1, r1, #4
 8001bbe:	4403      	add	r3, r0
 8001bc0:	b2c9      	uxtb	r1, r1
 8001bc2:	7619      	strb	r1, [r3, #24]
 8001bc4:	bc70      	pop	{r4, r5, r6}
 8001bc6:	4770      	bx	lr
 8001bc8:	e000ed00 	.word	0xe000ed00
 8001bcc:	e000ecfc 	.word	0xe000ecfc

08001bd0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001bd0:	2800      	cmp	r0, #0
 8001bd2:	db07      	blt.n	8001be4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bd4:	f000 011f 	and.w	r1, r0, #31
 8001bd8:	2301      	movs	r3, #1
 8001bda:	0940      	lsrs	r0, r0, #5
 8001bdc:	4a02      	ldr	r2, [pc, #8]	; (8001be8 <HAL_NVIC_EnableIRQ+0x18>)
 8001bde:	408b      	lsls	r3, r1
 8001be0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000e100 	.word	0xe000e100

08001bec <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bec:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d003      	beq.n	8001bfc <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bfc:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bfe:	2305      	movs	r3, #5
 8001c00:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001c04:	6813      	ldr	r3, [r2, #0]
 8001c06:	f023 0301 	bic.w	r3, r3, #1
 8001c0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8001c0c:	2000      	movs	r0, #0
}
 8001c0e:	4770      	bx	lr

08001c10 <HAL_DMA_GetState>:
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  return hdma->State;
 8001c10:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop

08001c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c1c:	2500      	movs	r5, #0
{
 8001c1e:	b083      	sub	sp, #12
 8001c20:	468c      	mov	ip, r1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c22:	f8d1 8000 	ldr.w	r8, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c26:	f8df e204 	ldr.w	lr, [pc, #516]	; 8001e2c <HAL_GPIO_Init+0x214>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c2a:	462a      	mov	r2, r5
 8001c2c:	e005      	b.n	8001c3a <HAL_GPIO_Init+0x22>
 8001c2e:	3201      	adds	r2, #1
 8001c30:	2a10      	cmp	r2, #16
 8001c32:	f105 0502 	add.w	r5, r5, #2
 8001c36:	f000 8094 	beq.w	8001d62 <HAL_GPIO_Init+0x14a>
    ioposition = 0x01U << position;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	4093      	lsls	r3, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c3e:	ea03 0108 	and.w	r1, r3, r8
    if(iocurrent == ioposition)
 8001c42:	428b      	cmp	r3, r1
 8001c44:	d1f3      	bne.n	8001c2e <HAL_GPIO_Init+0x16>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c46:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8001c4a:	f026 0910 	bic.w	r9, r6, #16
 8001c4e:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8001c52:	2b01      	cmp	r3, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c54:	f04f 0303 	mov.w	r3, #3
 8001c58:	fa03 f305 	lsl.w	r3, r3, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c5c:	f240 8084 	bls.w	8001d68 <HAL_GPIO_Init+0x150>
      temp = GPIOx->PUPDR;
 8001c60:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c62:	f8dc 4008 	ldr.w	r4, [ip, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c66:	43db      	mvns	r3, r3
 8001c68:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c6a:	40ac      	lsls	r4, r5
 8001c6c:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8001c6e:	60c4      	str	r4, [r0, #12]
      temp = GPIOx->MODER;
 8001c70:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c72:	f006 0403 	and.w	r4, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c76:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c78:	4623      	mov	r3, r4
 8001c7a:	40ab      	lsls	r3, r5
 8001c7c:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 8001c7e:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c80:	00f3      	lsls	r3, r6, #3
 8001c82:	d5d4      	bpl.n	8001c2e <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c84:	f04f 0900 	mov.w	r9, #0
 8001c88:	4b61      	ldr	r3, [pc, #388]	; (8001e10 <HAL_GPIO_Init+0x1f8>)
 8001c8a:	f8cd 9004 	str.w	r9, [sp, #4]
 8001c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c90:	4c5f      	ldr	r4, [pc, #380]	; (8001e10 <HAL_GPIO_Init+0x1f8>)
 8001c92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c96:	6463      	str	r3, [r4, #68]	; 0x44
 8001c98:	6c64      	ldr	r4, [r4, #68]	; 0x44
 8001c9a:	f022 0303 	bic.w	r3, r2, #3
 8001c9e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ca2:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8001ca6:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8001caa:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cac:	f002 0403 	and.w	r4, r2, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb0:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001cb2:	f8d3 a008 	ldr.w	sl, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cb6:	00a4      	lsls	r4, r4, #2
 8001cb8:	270f      	movs	r7, #15
 8001cba:	40a7      	lsls	r7, r4
 8001cbc:	ea2a 0a07 	bic.w	sl, sl, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cc0:	4f54      	ldr	r7, [pc, #336]	; (8001e14 <HAL_GPIO_Init+0x1fc>)
 8001cc2:	42b8      	cmp	r0, r7
 8001cc4:	d022      	beq.n	8001d0c <HAL_GPIO_Init+0xf4>
 8001cc6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001cca:	42b8      	cmp	r0, r7
 8001ccc:	f000 8082 	beq.w	8001dd4 <HAL_GPIO_Init+0x1bc>
 8001cd0:	4f51      	ldr	r7, [pc, #324]	; (8001e18 <HAL_GPIO_Init+0x200>)
 8001cd2:	42b8      	cmp	r0, r7
 8001cd4:	f000 8083 	beq.w	8001dde <HAL_GPIO_Init+0x1c6>
 8001cd8:	4f50      	ldr	r7, [pc, #320]	; (8001e1c <HAL_GPIO_Init+0x204>)
 8001cda:	42b8      	cmp	r0, r7
 8001cdc:	f000 8084 	beq.w	8001de8 <HAL_GPIO_Init+0x1d0>
 8001ce0:	4f4f      	ldr	r7, [pc, #316]	; (8001e20 <HAL_GPIO_Init+0x208>)
 8001ce2:	42b8      	cmp	r0, r7
 8001ce4:	f000 8085 	beq.w	8001df2 <HAL_GPIO_Init+0x1da>
 8001ce8:	4f4e      	ldr	r7, [pc, #312]	; (8001e24 <HAL_GPIO_Init+0x20c>)
 8001cea:	42b8      	cmp	r0, r7
 8001cec:	f000 8086 	beq.w	8001dfc <HAL_GPIO_Init+0x1e4>
 8001cf0:	4f4d      	ldr	r7, [pc, #308]	; (8001e28 <HAL_GPIO_Init+0x210>)
 8001cf2:	42b8      	cmp	r0, r7
 8001cf4:	f000 8087 	beq.w	8001e06 <HAL_GPIO_Init+0x1ee>
 8001cf8:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8001e30 <HAL_GPIO_Init+0x218>
 8001cfc:	4548      	cmp	r0, r9
 8001cfe:	bf0c      	ite	eq
 8001d00:	f04f 0907 	moveq.w	r9, #7
 8001d04:	f04f 0908 	movne.w	r9, #8
 8001d08:	fa09 f904 	lsl.w	r9, r9, r4
 8001d0c:	ea4a 0709 	orr.w	r7, sl, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d10:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 8001d12:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8001d16:	43cc      	mvns	r4, r1
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d18:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 8001d1a:	bf54      	ite	pl
 8001d1c:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8001d1e:	430b      	orrmi	r3, r1
        }
        EXTI->IMR = temp;
 8001d20:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8001d24:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d28:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 8001d2a:	bf54      	ite	pl
 8001d2c:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8001d2e:	430b      	orrmi	r3, r1
        }
        EXTI->EMR = temp;
 8001d30:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d34:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d38:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 8001d3a:	bf54      	ite	pl
 8001d3c:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8001d3e:	430b      	orrmi	r3, r1
        }
        EXTI->RTSR = temp;
 8001d40:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8001d44:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d48:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d4a:	f102 0201 	add.w	r2, r2, #1
        temp &= ~((uint32_t)iocurrent);
 8001d4e:	bf54      	ite	pl
 8001d50:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8001d52:	430b      	orrmi	r3, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d54:	2a10      	cmp	r2, #16
        }
        EXTI->FTSR = temp;
 8001d56:	f8ce 300c 	str.w	r3, [lr, #12]
 8001d5a:	f105 0502 	add.w	r5, r5, #2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5e:	f47f af6c 	bne.w	8001c3a <HAL_GPIO_Init+0x22>
      }
    }
  }
}
 8001d62:	b003      	add	sp, #12
 8001d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8001d68:	6884      	ldr	r4, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d6a:	f8dc 7008 	ldr.w	r7, [ip, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	ea04 0a03 	and.w	sl, r4, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d74:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8001d78:	40ac      	lsls	r4, r5
 8001d7a:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->OSPEEDR = temp;
 8001d7e:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001d80:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d84:	f3c6 1400 	ubfx	r4, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d88:	ea2a 0a01 	bic.w	sl, sl, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d8c:	4094      	lsls	r4, r2
 8001d8e:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->OTYPER = temp;
 8001d92:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8001d94:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d96:	40af      	lsls	r7, r5
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d98:	401c      	ands	r4, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d9a:	4327      	orrs	r7, r4
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d9c:	f1b9 0f02 	cmp.w	r9, #2
      GPIOx->PUPDR = temp;
 8001da0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001da2:	f47f af65 	bne.w	8001c70 <HAL_GPIO_Init+0x58>
        temp = GPIOx->AFR[position >> 3U];
 8001da6:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 8001daa:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dae:	f002 0707 	and.w	r7, r2, #7
        temp = GPIOx->AFR[position >> 3U];
 8001db2:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001db6:	00bf      	lsls	r7, r7, #2
 8001db8:	f04f 0b0f 	mov.w	fp, #15
 8001dbc:	fa0b fb07 	lsl.w	fp, fp, r7
 8001dc0:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dc4:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8001dc8:	40bc      	lsls	r4, r7
 8001dca:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001dce:	f8c9 4020 	str.w	r4, [r9, #32]
 8001dd2:	e74d      	b.n	8001c70 <HAL_GPIO_Init+0x58>
 8001dd4:	f04f 0901 	mov.w	r9, #1
 8001dd8:	fa09 f904 	lsl.w	r9, r9, r4
 8001ddc:	e796      	b.n	8001d0c <HAL_GPIO_Init+0xf4>
 8001dde:	f04f 0902 	mov.w	r9, #2
 8001de2:	fa09 f904 	lsl.w	r9, r9, r4
 8001de6:	e791      	b.n	8001d0c <HAL_GPIO_Init+0xf4>
 8001de8:	f04f 0903 	mov.w	r9, #3
 8001dec:	fa09 f904 	lsl.w	r9, r9, r4
 8001df0:	e78c      	b.n	8001d0c <HAL_GPIO_Init+0xf4>
 8001df2:	f04f 0904 	mov.w	r9, #4
 8001df6:	fa09 f904 	lsl.w	r9, r9, r4
 8001dfa:	e787      	b.n	8001d0c <HAL_GPIO_Init+0xf4>
 8001dfc:	f04f 0905 	mov.w	r9, #5
 8001e00:	fa09 f904 	lsl.w	r9, r9, r4
 8001e04:	e782      	b.n	8001d0c <HAL_GPIO_Init+0xf4>
 8001e06:	f04f 0906 	mov.w	r9, #6
 8001e0a:	fa09 f904 	lsl.w	r9, r9, r4
 8001e0e:	e77d      	b.n	8001d0c <HAL_GPIO_Init+0xf4>
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020000 	.word	0x40020000
 8001e18:	40020800 	.word	0x40020800
 8001e1c:	40020c00 	.word	0x40020c00
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40021400 	.word	0x40021400
 8001e28:	40021800 	.word	0x40021800
 8001e2c:	40013c00 	.word	0x40013c00
 8001e30:	40021c00 	.word	0x40021c00

08001e34 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e34:	b902      	cbnz	r2, 8001e38 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e36:	0409      	lsls	r1, r1, #16
 8001e38:	6181      	str	r1, [r0, #24]
 8001e3a:	4770      	bx	lr

08001e3c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001e3c:	6943      	ldr	r3, [r0, #20]
 8001e3e:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e42:	bf08      	it	eq
 8001e44:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e46:	6181      	str	r1, [r0, #24]
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop

08001e4c <I2C_MemoryTransmit_TXE_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->EventCount == 0U)
 8001e4c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001e4e:	b95b      	cbnz	r3, 8001e68 <I2C_MemoryTransmit_TXE_BTF+0x1c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001e50:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001e52:	6802      	ldr	r2, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001e54:	2b01      	cmp	r3, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001e56:	6c83      	ldr	r3, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001e58:	d00d      	beq.n	8001e76 <I2C_MemoryTransmit_TXE_BTF+0x2a>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Send MSB of Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001e5a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001e5e:	6113      	str	r3, [r2, #16]

      hi2c->EventCount++;
 8001e60:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001e62:	3301      	adds	r3, #1
 8001e64:	6503      	str	r3, [r0, #80]	; 0x50
 8001e66:	4770      	bx	lr
    }
  }
  else if (hi2c->EventCount == 1U)
 8001e68:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d009      	beq.n	8001e82 <I2C_MemoryTransmit_TXE_BTF+0x36>
    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);

    hi2c->EventCount++;
  }
  else if (hi2c->EventCount == 2U)
 8001e6e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d00e      	beq.n	8001e92 <I2C_MemoryTransmit_TXE_BTF+0x46>
 8001e74:	4770      	bx	lr
 8001e76:	b2db      	uxtb	r3, r3
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001e78:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 8001e7a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001e7c:	3302      	adds	r3, #2
 8001e7e:	6503      	str	r3, [r0, #80]	; 0x50
 8001e80:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001e82:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001e84:	6802      	ldr	r2, [r0, #0]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	6113      	str	r3, [r2, #16]
    hi2c->EventCount++;
 8001e8a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	6503      	str	r3, [r0, #80]	; 0x50
 8001e90:	4770      	bx	lr
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e92:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e96:	2b22      	cmp	r3, #34	; 0x22
 8001e98:	d00e      	beq.n	8001eb8 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    {
      /* Generate Restart */
      hi2c->Instance->CR1 |= I2C_CR1_START;
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e9a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e9e:	2b21      	cmp	r3, #33	; 0x21
 8001ea0:	d1e8      	bne.n	8001e74 <I2C_MemoryTransmit_TXE_BTF+0x28>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ea2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001ea4:	6803      	ldr	r3, [r0, #0]
 8001ea6:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001eaa:	6119      	str	r1, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;

      /* Update counter */
      hi2c->XferCount--;
 8001eac:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8001eae:	6242      	str	r2, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001eb6:	e7dd      	b.n	8001e74 <I2C_MemoryTransmit_TXE_BTF+0x28>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001eb8:	6802      	ldr	r2, [r0, #0]
 8001eba:	6813      	ldr	r3, [r2, #0]
 8001ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	4770      	bx	lr

08001ec4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ec4:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8001ec8:	4604      	mov	r4, r0
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eca:	6800      	ldr	r0, [r0, #0]
{
 8001ecc:	4689      	mov	r9, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ece:	6801      	ldr	r1, [r0, #0]
 8001ed0:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001ed4:	6001      	str	r1, [r0, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ed6:	6801      	ldr	r1, [r0, #0]
{
 8001ed8:	b082      	sub	sp, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eda:	f441 7180 	orr.w	r1, r1, #256	; 0x100
{
 8001ede:	9d08      	ldr	r5, [sp, #32]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ee0:	6001      	str	r1, [r0, #0]
{
 8001ee2:	4616      	mov	r6, r2
 8001ee4:	461f      	mov	r7, r3
 8001ee6:	1c6b      	adds	r3, r5, #1
 8001ee8:	d145      	bne.n	8001f76 <I2C_RequestMemoryRead+0xb2>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001eea:	6943      	ldr	r3, [r0, #20]
 8001eec:	07d9      	lsls	r1, r3, #31
 8001eee:	d5fc      	bpl.n	8001eea <I2C_RequestMemoryRead+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ef0:	fa5f f989 	uxtb.w	r9, r9
 8001ef4:	f009 03fe 	and.w	r3, r9, #254	; 0xfe
 8001ef8:	6103      	str	r3, [r0, #16]
 8001efa:	1c69      	adds	r1, r5, #1
 8001efc:	d014      	beq.n	8001f28 <I2C_RequestMemoryRead+0x64>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001efe:	6943      	ldr	r3, [r0, #20]
 8001f00:	0799      	lsls	r1, r3, #30
 8001f02:	d414      	bmi.n	8001f2e <I2C_RequestMemoryRead+0x6a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f04:	6943      	ldr	r3, [r0, #20]
 8001f06:	055b      	lsls	r3, r3, #21
 8001f08:	d45a      	bmi.n	8001fc0 <I2C_RequestMemoryRead+0xfc>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f0a:	f7ff fa9d 	bl	8001448 <HAL_GetTick>
 8001f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f10:	1ac0      	subs	r0, r0, r3
 8001f12:	4285      	cmp	r5, r0
 8001f14:	f0c0 80e4 	bcc.w	80020e0 <I2C_RequestMemoryRead+0x21c>
 8001f18:	2d00      	cmp	r5, #0
 8001f1a:	f000 80e1 	beq.w	80020e0 <I2C_RequestMemoryRead+0x21c>
 8001f1e:	6820      	ldr	r0, [r4, #0]
 8001f20:	e7eb      	b.n	8001efa <I2C_RequestMemoryRead+0x36>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f22:	6943      	ldr	r3, [r0, #20]
 8001f24:	055b      	lsls	r3, r3, #21
 8001f26:	d44b      	bmi.n	8001fc0 <I2C_RequestMemoryRead+0xfc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f28:	6943      	ldr	r3, [r0, #20]
 8001f2a:	079a      	lsls	r2, r3, #30
 8001f2c:	d5f9      	bpl.n	8001f22 <I2C_RequestMemoryRead+0x5e>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f2e:	2300      	movs	r3, #0
 8001f30:	9301      	str	r3, [sp, #4]
 8001f32:	6943      	ldr	r3, [r0, #20]
 8001f34:	9301      	str	r3, [sp, #4]
 8001f36:	6983      	ldr	r3, [r0, #24]
 8001f38:	9301      	str	r3, [sp, #4]
 8001f3a:	9b01      	ldr	r3, [sp, #4]
 8001f3c:	1c6b      	adds	r3, r5, #1
 8001f3e:	d16f      	bne.n	8002020 <I2C_RequestMemoryRead+0x15c>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f40:	6943      	ldr	r3, [r0, #20]
 8001f42:	0619      	lsls	r1, r3, #24
 8001f44:	d454      	bmi.n	8001ff0 <I2C_RequestMemoryRead+0x12c>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f46:	6943      	ldr	r3, [r0, #20]
 8001f48:	055a      	lsls	r2, r3, #21
 8001f4a:	d5f9      	bpl.n	8001f40 <I2C_RequestMemoryRead+0x7c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f4c:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f4e:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f50:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8001f54:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f56:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f58:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f5c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f60:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f62:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f66:	f043 0304 	orr.w	r3, r3, #4
 8001f6a:	6423      	str	r3, [r4, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d066      	beq.n	8002040 <I2C_RequestMemoryRead+0x17c>
    return HAL_ERROR;
 8001f72:	2001      	movs	r0, #1
 8001f74:	e01d      	b.n	8001fb2 <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f76:	6943      	ldr	r3, [r0, #20]
 8001f78:	07da      	lsls	r2, r3, #31
 8001f7a:	d4b9      	bmi.n	8001ef0 <I2C_RequestMemoryRead+0x2c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f7c:	f7ff fa64 	bl	8001448 <HAL_GetTick>
 8001f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f82:	1ac0      	subs	r0, r0, r3
 8001f84:	4285      	cmp	r5, r0
 8001f86:	d302      	bcc.n	8001f8e <I2C_RequestMemoryRead+0xca>
 8001f88:	b10d      	cbz	r5, 8001f8e <I2C_RequestMemoryRead+0xca>
 8001f8a:	6820      	ldr	r0, [r4, #0]
 8001f8c:	e7ab      	b.n	8001ee6 <I2C_RequestMemoryRead+0x22>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f8e:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f90:	2320      	movs	r3, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f92:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f98:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001f9e:	6821      	ldr	r1, [r4, #0]
      __HAL_UNLOCK(hi2c);
 8001fa0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fa4:	f043 0320 	orr.w	r3, r3, #32
 8001fa8:	6423      	str	r3, [r4, #64]	; 0x40
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001faa:	680b      	ldr	r3, [r1, #0]
 8001fac:	05da      	lsls	r2, r3, #23
 8001fae:	d403      	bmi.n	8001fb8 <I2C_RequestMemoryRead+0xf4>
    return HAL_TIMEOUT;
 8001fb0:	2003      	movs	r0, #3
}
 8001fb2:	b002      	add	sp, #8
 8001fb4:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fbc:	6423      	str	r3, [r4, #64]	; 0x40
 8001fbe:	e7f7      	b.n	8001fb0 <I2C_RequestMemoryRead+0xec>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc0:	6803      	ldr	r3, [r0, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fc2:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fc4:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fcc:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fce:	6003      	str	r3, [r0, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fd0:	6145      	str	r5, [r0, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fd2:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fd4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fd8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001fde:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fe2:	f043 0304 	orr.w	r3, r3, #4
    return HAL_ERROR;
 8001fe6:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fe8:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001fea:	b002      	add	sp, #8
 8001fec:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ff0:	2f01      	cmp	r7, #1
 8001ff2:	d00a      	beq.n	800200a <I2C_RequestMemoryRead+0x146>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ff4:	0a33      	lsrs	r3, r6, #8
 8001ff6:	6103      	str	r3, [r0, #16]
 8001ff8:	1c6a      	adds	r2, r5, #1
 8001ffa:	d161      	bne.n	80020c0 <I2C_RequestMemoryRead+0x1fc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ffc:	6943      	ldr	r3, [r0, #20]
 8001ffe:	061b      	lsls	r3, r3, #24
 8002000:	d403      	bmi.n	800200a <I2C_RequestMemoryRead+0x146>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002002:	6943      	ldr	r3, [r0, #20]
 8002004:	055f      	lsls	r7, r3, #21
 8002006:	d4a1      	bmi.n	8001f4c <I2C_RequestMemoryRead+0x88>
 8002008:	e7f8      	b.n	8001ffc <I2C_RequestMemoryRead+0x138>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800200a:	b2f6      	uxtb	r6, r6
 800200c:	6106      	str	r6, [r0, #16]
 800200e:	1c6b      	adds	r3, r5, #1
 8002010:	d137      	bne.n	8002082 <I2C_RequestMemoryRead+0x1be>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002012:	6943      	ldr	r3, [r0, #20]
 8002014:	061f      	lsls	r7, r3, #24
 8002016:	d41a      	bmi.n	800204e <I2C_RequestMemoryRead+0x18a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002018:	6943      	ldr	r3, [r0, #20]
 800201a:	055e      	lsls	r6, r3, #21
 800201c:	d496      	bmi.n	8001f4c <I2C_RequestMemoryRead+0x88>
 800201e:	e7f8      	b.n	8002012 <I2C_RequestMemoryRead+0x14e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002020:	6943      	ldr	r3, [r0, #20]
 8002022:	061b      	lsls	r3, r3, #24
 8002024:	d4e4      	bmi.n	8001ff0 <I2C_RequestMemoryRead+0x12c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002026:	6943      	ldr	r3, [r0, #20]
 8002028:	055a      	lsls	r2, r3, #21
 800202a:	d48f      	bmi.n	8001f4c <I2C_RequestMemoryRead+0x88>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800202c:	f7ff fa0c 	bl	8001448 <HAL_GetTick>
 8002030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002032:	1ac0      	subs	r0, r0, r3
 8002034:	4285      	cmp	r5, r0
 8002036:	d361      	bcc.n	80020fc <I2C_RequestMemoryRead+0x238>
 8002038:	2d00      	cmp	r5, #0
 800203a:	d05f      	beq.n	80020fc <I2C_RequestMemoryRead+0x238>
 800203c:	6820      	ldr	r0, [r4, #0]
 800203e:	e77d      	b.n	8001f3c <I2C_RequestMemoryRead+0x78>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002040:	6822      	ldr	r2, [r4, #0]
 8002042:	6813      	ldr	r3, [r2, #0]
 8002044:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002048:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 800204a:	2001      	movs	r0, #1
 800204c:	e7b1      	b.n	8001fb2 <I2C_RequestMemoryRead+0xee>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800204e:	6803      	ldr	r3, [r0, #0]
 8002050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002054:	6003      	str	r3, [r0, #0]
 8002056:	1c6b      	adds	r3, r5, #1
 8002058:	d123      	bne.n	80020a2 <I2C_RequestMemoryRead+0x1de>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800205a:	6943      	ldr	r3, [r0, #20]
 800205c:	07df      	lsls	r7, r3, #31
 800205e:	d5fc      	bpl.n	800205a <I2C_RequestMemoryRead+0x196>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002060:	f049 0901 	orr.w	r9, r9, #1
 8002064:	f8c0 9010 	str.w	r9, [r0, #16]
 8002068:	1c6a      	adds	r2, r5, #1
 800206a:	d003      	beq.n	8002074 <I2C_RequestMemoryRead+0x1b0>
 800206c:	e054      	b.n	8002118 <I2C_RequestMemoryRead+0x254>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800206e:	6943      	ldr	r3, [r0, #20]
 8002070:	055b      	lsls	r3, r3, #21
 8002072:	d4a5      	bmi.n	8001fc0 <I2C_RequestMemoryRead+0xfc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002074:	6943      	ldr	r3, [r0, #20]
 8002076:	43db      	mvns	r3, r3
 8002078:	f013 0302 	ands.w	r3, r3, #2
 800207c:	d1f7      	bne.n	800206e <I2C_RequestMemoryRead+0x1aa>
  return HAL_OK;
 800207e:	4618      	mov	r0, r3
 8002080:	e797      	b.n	8001fb2 <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002082:	6943      	ldr	r3, [r0, #20]
 8002084:	0619      	lsls	r1, r3, #24
 8002086:	d4e2      	bmi.n	800204e <I2C_RequestMemoryRead+0x18a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002088:	6943      	ldr	r3, [r0, #20]
 800208a:	055a      	lsls	r2, r3, #21
 800208c:	f53f af5e 	bmi.w	8001f4c <I2C_RequestMemoryRead+0x88>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002090:	f7ff f9da 	bl	8001448 <HAL_GetTick>
 8002094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002096:	1ac0      	subs	r0, r0, r3
 8002098:	4285      	cmp	r5, r0
 800209a:	d32f      	bcc.n	80020fc <I2C_RequestMemoryRead+0x238>
 800209c:	b375      	cbz	r5, 80020fc <I2C_RequestMemoryRead+0x238>
 800209e:	6820      	ldr	r0, [r4, #0]
 80020a0:	e7b5      	b.n	800200e <I2C_RequestMemoryRead+0x14a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020a2:	6943      	ldr	r3, [r0, #20]
 80020a4:	07de      	lsls	r6, r3, #31
 80020a6:	d4db      	bmi.n	8002060 <I2C_RequestMemoryRead+0x19c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020a8:	f7ff f9ce 	bl	8001448 <HAL_GetTick>
 80020ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020ae:	1ac0      	subs	r0, r0, r3
 80020b0:	4285      	cmp	r5, r0
 80020b2:	f4ff af6c 	bcc.w	8001f8e <I2C_RequestMemoryRead+0xca>
 80020b6:	2d00      	cmp	r5, #0
 80020b8:	f43f af69 	beq.w	8001f8e <I2C_RequestMemoryRead+0xca>
 80020bc:	6820      	ldr	r0, [r4, #0]
 80020be:	e7ca      	b.n	8002056 <I2C_RequestMemoryRead+0x192>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020c0:	6943      	ldr	r3, [r0, #20]
 80020c2:	0619      	lsls	r1, r3, #24
 80020c4:	d4a1      	bmi.n	800200a <I2C_RequestMemoryRead+0x146>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020c6:	6943      	ldr	r3, [r0, #20]
 80020c8:	0559      	lsls	r1, r3, #21
 80020ca:	f53f af3f 	bmi.w	8001f4c <I2C_RequestMemoryRead+0x88>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ce:	f7ff f9bb 	bl	8001448 <HAL_GetTick>
 80020d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020d4:	1ac0      	subs	r0, r0, r3
 80020d6:	4285      	cmp	r5, r0
 80020d8:	d310      	bcc.n	80020fc <I2C_RequestMemoryRead+0x238>
 80020da:	b17d      	cbz	r5, 80020fc <I2C_RequestMemoryRead+0x238>
 80020dc:	6820      	ldr	r0, [r4, #0]
 80020de:	e78b      	b.n	8001ff8 <I2C_RequestMemoryRead+0x134>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020e0:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80020e2:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020e4:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ea:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80020f0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020f4:	f043 0320 	orr.w	r3, r3, #32
 80020f8:	6423      	str	r3, [r4, #64]	; 0x40
 80020fa:	e73a      	b.n	8001f72 <I2C_RequestMemoryRead+0xae>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80020fc:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80020fe:	2320      	movs	r3, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002100:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002102:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002106:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800210a:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800210c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002110:	f043 0320 	orr.w	r3, r3, #32
 8002114:	6423      	str	r3, [r4, #64]	; 0x40
 8002116:	e729      	b.n	8001f6c <I2C_RequestMemoryRead+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002118:	6943      	ldr	r3, [r0, #20]
 800211a:	43db      	mvns	r3, r3
 800211c:	f013 0302 	ands.w	r3, r3, #2
 8002120:	d0ad      	beq.n	800207e <I2C_RequestMemoryRead+0x1ba>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002122:	6943      	ldr	r3, [r0, #20]
 8002124:	0559      	lsls	r1, r3, #21
 8002126:	f53f af4b 	bmi.w	8001fc0 <I2C_RequestMemoryRead+0xfc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800212a:	f7ff f98d 	bl	8001448 <HAL_GetTick>
 800212e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002130:	1ac0      	subs	r0, r0, r3
 8002132:	4285      	cmp	r5, r0
 8002134:	d3d4      	bcc.n	80020e0 <I2C_RequestMemoryRead+0x21c>
 8002136:	2d00      	cmp	r5, #0
 8002138:	d0d2      	beq.n	80020e0 <I2C_RequestMemoryRead+0x21c>
 800213a:	6820      	ldr	r0, [r4, #0]
 800213c:	e794      	b.n	8002068 <I2C_RequestMemoryRead+0x1a4>
 800213e:	bf00      	nop

08002140 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002140:	2800      	cmp	r0, #0
 8002142:	f000 80b1 	beq.w	80022a8 <HAL_I2C_Init+0x168>
{
 8002146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002148:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800214c:	4604      	mov	r4, r0
 800214e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 8093 	beq.w	800227e <HAL_I2C_Init+0x13e>
  __HAL_I2C_DISABLE(hi2c);
 8002158:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800215a:	2224      	movs	r2, #36	; 0x24
 800215c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	f022 0201 	bic.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800216e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002176:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002178:	f002 f94a 	bl	8004410 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800217c:	6861      	ldr	r1, [r4, #4]
 800217e:	4b4b      	ldr	r3, [pc, #300]	; (80022ac <HAL_I2C_Init+0x16c>)
 8002180:	4299      	cmp	r1, r3
 8002182:	d84b      	bhi.n	800221c <HAL_I2C_Init+0xdc>
 8002184:	4b4a      	ldr	r3, [pc, #296]	; (80022b0 <HAL_I2C_Init+0x170>)
 8002186:	4298      	cmp	r0, r3
 8002188:	d977      	bls.n	800227a <HAL_I2C_Init+0x13a>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800218a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800218c:	4b49      	ldr	r3, [pc, #292]	; (80022b4 <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800218e:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002190:	fba3 6300 	umull	r6, r3, r3, r0
 8002194:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002196:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800219a:	431d      	orrs	r5, r3
 800219c:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800219e:	6a15      	ldr	r5, [r2, #32]
 80021a0:	3301      	adds	r3, #1
 80021a2:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80021a6:	432b      	orrs	r3, r5
 80021a8:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021aa:	69d5      	ldr	r5, [r2, #28]
 80021ac:	0049      	lsls	r1, r1, #1
 80021ae:	3801      	subs	r0, #1
 80021b0:	fbb0 f0f1 	udiv	r0, r0, r1
 80021b4:	3001      	adds	r0, #1
 80021b6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80021ba:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 80021be:	2804      	cmp	r0, #4
 80021c0:	bf38      	it	cc
 80021c2:	2004      	movcc	r0, #4
 80021c4:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80021c8:	4328      	orrs	r0, r5
 80021ca:	61d0      	str	r0, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021cc:	6815      	ldr	r5, [r2, #0]
 80021ce:	69e0      	ldr	r0, [r4, #28]
 80021d0:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021d2:	6921      	ldr	r1, [r4, #16]
 80021d4:	68e7      	ldr	r7, [r4, #12]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021d6:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021d8:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 80021dc:	4330      	orrs	r0, r6
 80021de:	4328      	orrs	r0, r5
 80021e0:	6010      	str	r0, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021e2:	6890      	ldr	r0, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021e4:	69a5      	ldr	r5, [r4, #24]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021e6:	f420 4003 	bic.w	r0, r0, #33536	; 0x8300
 80021ea:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80021ee:	4339      	orrs	r1, r7
 80021f0:	4301      	orrs	r1, r0
 80021f2:	6091      	str	r1, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021f4:	68d1      	ldr	r1, [r2, #12]
 80021f6:	432b      	orrs	r3, r5
 80021f8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80021fc:	430b      	orrs	r3, r1
 80021fe:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002200:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002202:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8002204:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8002208:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 800220a:	6011      	str	r1, [r2, #0]
  return HAL_OK;
 800220c:	4618      	mov	r0, r3
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800220e:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002210:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002214:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002216:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  return HAL_OK;
 800221a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800221c:	4b26      	ldr	r3, [pc, #152]	; (80022b8 <HAL_I2C_Init+0x178>)
 800221e:	4298      	cmp	r0, r3
 8002220:	d92b      	bls.n	800227a <HAL_I2C_Init+0x13a>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002222:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002224:	4b23      	ldr	r3, [pc, #140]	; (80022b4 <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002226:	6857      	ldr	r7, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002228:	f8df e090 	ldr.w	lr, [pc, #144]	; 80022bc <HAL_I2C_Init+0x17c>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800222c:	68a6      	ldr	r6, [r4, #8]
  freqrange = I2C_FREQRANGE(pclk1);
 800222e:	fba3 5300 	umull	r5, r3, r3, r0
 8002232:	0c9d      	lsrs	r5, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002234:	f027 073f 	bic.w	r7, r7, #63	; 0x3f
 8002238:	432f      	orrs	r7, r5
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800223a:	f44f 7396 	mov.w	r3, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800223e:	6057      	str	r7, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002240:	fb03 f305 	mul.w	r3, r3, r5
 8002244:	fbae 5303 	umull	r5, r3, lr, r3
 8002248:	6a15      	ldr	r5, [r2, #32]
 800224a:	099b      	lsrs	r3, r3, #6
 800224c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002250:	3301      	adds	r3, #1
 8002252:	432b      	orrs	r3, r5
 8002254:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002256:	69d5      	ldr	r5, [r2, #28]
 8002258:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 800225c:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8002260:	b996      	cbnz	r6, 8002288 <HAL_I2C_Init+0x148>
 8002262:	1e43      	subs	r3, r0, #1
 8002264:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002268:	fbb3 f3f1 	udiv	r3, r3, r1
 800226c:	3301      	adds	r3, #1
 800226e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002272:	b1bb      	cbz	r3, 80022a4 <HAL_I2C_Init+0x164>
 8002274:	f443 4000 	orr.w	r0, r3, #32768	; 0x8000
 8002278:	e7a6      	b.n	80021c8 <HAL_I2C_Init+0x88>
    return HAL_ERROR;
 800227a:	2001      	movs	r0, #1
 800227c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800227e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002282:	f005 f9d5 	bl	8007630 <HAL_I2C_MspInit>
 8002286:	e767      	b.n	8002158 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002288:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800228c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8002290:	1e43      	subs	r3, r0, #1
 8002292:	fbb3 f3f1 	udiv	r3, r3, r1
 8002296:	3301      	adds	r3, #1
 8002298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800229c:	b113      	cbz	r3, 80022a4 <HAL_I2C_Init+0x164>
 800229e:	f443 4040 	orr.w	r0, r3, #49152	; 0xc000
 80022a2:	e791      	b.n	80021c8 <HAL_I2C_Init+0x88>
 80022a4:	2001      	movs	r0, #1
 80022a6:	e78f      	b.n	80021c8 <HAL_I2C_Init+0x88>
    return HAL_ERROR;
 80022a8:	2001      	movs	r0, #1
}
 80022aa:	4770      	bx	lr
 80022ac:	000186a0 	.word	0x000186a0
 80022b0:	001e847f 	.word	0x001e847f
 80022b4:	431bde83 	.word	0x431bde83
 80022b8:	003d08ff 	.word	0x003d08ff
 80022bc:	10624dd3 	.word	0x10624dd3

080022c0 <HAL_I2C_Master_Transmit>:
{
 80022c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80022c4:	4604      	mov	r4, r0
 80022c6:	b083      	sub	sp, #12
 80022c8:	4698      	mov	r8, r3
 80022ca:	460e      	mov	r6, r1
 80022cc:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 80022ce:	f7ff f8bb 	bl	8001448 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80022d2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80022d6:	2b20      	cmp	r3, #32
 80022d8:	d003      	beq.n	80022e2 <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 80022da:	2002      	movs	r0, #2
}
 80022dc:	b003      	add	sp, #12
 80022de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80022e2:	4605      	mov	r5, r0
 80022e4:	e005      	b.n	80022f2 <HAL_I2C_Master_Transmit+0x32>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022e6:	f7ff f8af 	bl	8001448 <HAL_GetTick>
 80022ea:	1b40      	subs	r0, r0, r5
 80022ec:	2819      	cmp	r0, #25
 80022ee:	f200 80b0 	bhi.w	8002452 <HAL_I2C_Master_Transmit+0x192>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022f2:	6823      	ldr	r3, [r4, #0]
 80022f4:	699a      	ldr	r2, [r3, #24]
 80022f6:	43d2      	mvns	r2, r2
 80022f8:	f012 0902 	ands.w	r9, r2, #2
 80022fc:	d0f3      	beq.n	80022e6 <HAL_I2C_Master_Transmit+0x26>
    __HAL_LOCK(hi2c);
 80022fe:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8002302:	2a01      	cmp	r2, #1
 8002304:	d0e9      	beq.n	80022da <HAL_I2C_Master_Transmit+0x1a>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002306:	681a      	ldr	r2, [r3, #0]
    __HAL_LOCK(hi2c);
 8002308:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800230a:	07d0      	lsls	r0, r2, #31
    __HAL_LOCK(hi2c);
 800230c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002310:	d402      	bmi.n	8002318 <HAL_I2C_Master_Transmit+0x58>
      __HAL_I2C_ENABLE(hi2c);
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002318:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800231a:	48a2      	ldr	r0, [pc, #648]	; (80025a4 <HAL_I2C_Master_Transmit+0x2e4>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800231c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002320:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002322:	2221      	movs	r2, #33	; 0x21
 8002324:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002328:	2210      	movs	r2, #16
 800232a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800232e:	2200      	movs	r2, #0
 8002330:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002332:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002336:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002338:	62e0      	str	r0, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800233a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 800233c:	6267      	str	r7, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800233e:	2a08      	cmp	r2, #8
    hi2c->XferSize    = hi2c->XferCount;
 8002340:	8521      	strh	r1, [r4, #40]	; 0x28
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002342:	f000 80b1 	beq.w	80024a8 <HAL_I2C_Master_Transmit+0x1e8>
 8002346:	2a01      	cmp	r2, #1
 8002348:	f000 80ae 	beq.w	80024a8 <HAL_I2C_Master_Transmit+0x1e8>
 800234c:	4282      	cmp	r2, r0
 800234e:	f000 80ab 	beq.w	80024a8 <HAL_I2C_Master_Transmit+0x1e8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002352:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002354:	2a12      	cmp	r2, #18
 8002356:	f000 80a7 	beq.w	80024a8 <HAL_I2C_Master_Transmit+0x1e8>
 800235a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800235c:	3201      	adds	r2, #1
 800235e:	f040 8096 	bne.w	800248e <HAL_I2C_Master_Transmit+0x1ce>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	07d2      	lsls	r2, r2, #31
 8002366:	d5fc      	bpl.n	8002362 <HAL_I2C_Master_Transmit+0xa2>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002368:	6922      	ldr	r2, [r4, #16]
 800236a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800236e:	f040 80cb 	bne.w	8002508 <HAL_I2C_Master_Transmit+0x248>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002372:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8002376:	611e      	str	r6, [r3, #16]
 8002378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800237a:	3201      	adds	r2, #1
 800237c:	d004      	beq.n	8002388 <HAL_I2C_Master_Transmit+0xc8>
 800237e:	e0e3      	b.n	8002548 <HAL_I2C_Master_Transmit+0x288>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002380:	695a      	ldr	r2, [r3, #20]
 8002382:	0551      	lsls	r1, r2, #21
 8002384:	f100 80ab 	bmi.w	80024de <HAL_I2C_Master_Transmit+0x21e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	0790      	lsls	r0, r2, #30
 800238c:	d5f8      	bpl.n	8002380 <HAL_I2C_Master_Transmit+0xc0>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800238e:	2200      	movs	r2, #0
 8002390:	9201      	str	r2, [sp, #4]
 8002392:	695a      	ldr	r2, [r3, #20]
 8002394:	9201      	str	r2, [sp, #4]
 8002396:	699a      	ldr	r2, [r3, #24]
 8002398:	9201      	str	r2, [sp, #4]
 800239a:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 800239c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800239e:	2a00      	cmp	r2, #0
 80023a0:	f000 80c5 	beq.w	800252e <HAL_I2C_Master_Transmit+0x26e>
 80023a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80023a6:	3201      	adds	r2, #1
 80023a8:	d141      	bne.n	800242e <HAL_I2C_Master_Transmit+0x16e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023aa:	695a      	ldr	r2, [r3, #20]
 80023ac:	0616      	lsls	r6, r2, #24
 80023ae:	d418      	bmi.n	80023e2 <HAL_I2C_Master_Transmit+0x122>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023b0:	695a      	ldr	r2, [r3, #20]
 80023b2:	0550      	lsls	r0, r2, #21
 80023b4:	d5f9      	bpl.n	80023aa <HAL_I2C_Master_Transmit+0xea>
    hi2c->PreviousState       = I2C_STATE_NONE;
 80023b6:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023b8:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 80023bc:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023be:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80023c0:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023c2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023c6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80023cc:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023d0:	f043 0304 	orr.w	r3, r3, #4
 80023d4:	6423      	str	r3, [r4, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023d8:	2b04      	cmp	r3, #4
 80023da:	f000 80e5 	beq.w	80025a8 <HAL_I2C_Master_Transmit+0x2e8>
      return HAL_ERROR;
 80023de:	2001      	movs	r0, #1
 80023e0:	e77c      	b.n	80022dc <HAL_I2C_Master_Transmit+0x1c>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80023e4:	8d27      	ldrh	r7, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023e6:	4630      	mov	r0, r6
      hi2c->XferSize--;
 80023e8:	1e79      	subs	r1, r7, #1
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80023ee:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 80023f0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80023f2:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80023f4:	3a01      	subs	r2, #1
 80023f6:	b292      	uxth	r2, r2
 80023f8:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023fa:	6958      	ldr	r0, [r3, #20]
      hi2c->XferSize--;
 80023fc:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023fe:	0742      	lsls	r2, r0, #29
      hi2c->XferSize--;
 8002400:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002402:	d50a      	bpl.n	800241a <HAL_I2C_Master_Transmit+0x15a>
 8002404:	b149      	cbz	r1, 800241a <HAL_I2C_Master_Transmit+0x15a>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002406:	7872      	ldrb	r2, [r6, #1]
 8002408:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 800240a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800240c:	3a01      	subs	r2, #1
        hi2c->XferSize--;
 800240e:	3f02      	subs	r7, #2
        hi2c->pBuffPtr++;
 8002410:	3602      	adds	r6, #2
        hi2c->XferCount--;
 8002412:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 8002414:	8527      	strh	r7, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8002416:	6266      	str	r6, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002418:	8562      	strh	r2, [r4, #42]	; 0x2a
 800241a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800241c:	3201      	adds	r2, #1
 800241e:	d126      	bne.n	800246e <HAL_I2C_Master_Transmit+0x1ae>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002420:	695a      	ldr	r2, [r3, #20]
 8002422:	0750      	lsls	r0, r2, #29
 8002424:	d4ba      	bmi.n	800239c <HAL_I2C_Master_Transmit+0xdc>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002426:	695a      	ldr	r2, [r3, #20]
 8002428:	0551      	lsls	r1, r2, #21
 800242a:	d4c4      	bmi.n	80023b6 <HAL_I2C_Master_Transmit+0xf6>
 800242c:	e7f8      	b.n	8002420 <HAL_I2C_Master_Transmit+0x160>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800242e:	695a      	ldr	r2, [r3, #20]
 8002430:	0611      	lsls	r1, r2, #24
 8002432:	d4d6      	bmi.n	80023e2 <HAL_I2C_Master_Transmit+0x122>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002434:	695a      	ldr	r2, [r3, #20]
 8002436:	0557      	lsls	r7, r2, #21
 8002438:	d4bd      	bmi.n	80023b6 <HAL_I2C_Master_Transmit+0xf6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800243a:	f7ff f805 	bl	8001448 <HAL_GetTick>
 800243e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002440:	1b40      	subs	r0, r0, r5
 8002442:	4283      	cmp	r3, r0
 8002444:	f0c0 8090 	bcc.w	8002568 <HAL_I2C_Master_Transmit+0x2a8>
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 808d 	beq.w	8002568 <HAL_I2C_Master_Transmit+0x2a8>
 800244e:	6823      	ldr	r3, [r4, #0]
 8002450:	e7a8      	b.n	80023a4 <HAL_I2C_Master_Transmit+0xe4>
      hi2c->State               = HAL_I2C_STATE_READY;
 8002452:	2320      	movs	r3, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002454:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002458:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800245c:	f884 903e 	strb.w	r9, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002460:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002462:	f884 903c 	strb.w	r9, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002466:	f043 0320 	orr.w	r3, r3, #32
 800246a:	6423      	str	r3, [r4, #64]	; 0x40
 800246c:	e735      	b.n	80022da <HAL_I2C_Master_Transmit+0x1a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800246e:	695a      	ldr	r2, [r3, #20]
 8002470:	0752      	lsls	r2, r2, #29
 8002472:	d493      	bmi.n	800239c <HAL_I2C_Master_Transmit+0xdc>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002474:	695a      	ldr	r2, [r3, #20]
 8002476:	0556      	lsls	r6, r2, #21
 8002478:	d49d      	bmi.n	80023b6 <HAL_I2C_Master_Transmit+0xf6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800247a:	f7fe ffe5 	bl	8001448 <HAL_GetTick>
 800247e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002480:	1b40      	subs	r0, r0, r5
 8002482:	4283      	cmp	r3, r0
 8002484:	d370      	bcc.n	8002568 <HAL_I2C_Master_Transmit+0x2a8>
 8002486:	2b00      	cmp	r3, #0
 8002488:	d06e      	beq.n	8002568 <HAL_I2C_Master_Transmit+0x2a8>
 800248a:	6823      	ldr	r3, [r4, #0]
 800248c:	e7c5      	b.n	800241a <HAL_I2C_Master_Transmit+0x15a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800248e:	695a      	ldr	r2, [r3, #20]
 8002490:	07d7      	lsls	r7, r2, #31
 8002492:	f53f af69 	bmi.w	8002368 <HAL_I2C_Master_Transmit+0xa8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002496:	f7fe ffd7 	bl	8001448 <HAL_GetTick>
 800249a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800249c:	1b40      	subs	r0, r0, r5
 800249e:	4283      	cmp	r3, r0
 80024a0:	d307      	bcc.n	80024b2 <HAL_I2C_Master_Transmit+0x1f2>
 80024a2:	b133      	cbz	r3, 80024b2 <HAL_I2C_Master_Transmit+0x1f2>
 80024a4:	6823      	ldr	r3, [r4, #0]
 80024a6:	e758      	b.n	800235a <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	e753      	b.n	800235a <HAL_I2C_Master_Transmit+0x9a>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80024b2:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80024b4:	2320      	movs	r3, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80024b6:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024bc:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80024c2:	6821      	ldr	r1, [r4, #0]
      __HAL_UNLOCK(hi2c);
 80024c4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024c8:	f043 0320 	orr.w	r3, r3, #32
 80024cc:	6423      	str	r3, [r4, #64]	; 0x40
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80024ce:	680b      	ldr	r3, [r1, #0]
 80024d0:	05d9      	lsls	r1, r3, #23
 80024d2:	d584      	bpl.n	80023de <HAL_I2C_Master_Transmit+0x11e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024d8:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80024da:	2001      	movs	r0, #1
 80024dc:	e6fe      	b.n	80022dc <HAL_I2C_Master_Transmit+0x1c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024de:	6819      	ldr	r1, [r3, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80024e0:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024e2:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e6:	f441 7100 	orr.w	r1, r1, #512	; 0x200
      hi2c->State               = HAL_I2C_STATE_READY;
 80024ea:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ec:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024ee:	615d      	str	r5, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80024f0:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024f2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024f6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80024fc:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002500:	f043 0304 	orr.w	r3, r3, #4
 8002504:	6423      	str	r3, [r4, #64]	; 0x40
 8002506:	e76a      	b.n	80023de <HAL_I2C_Master_Transmit+0x11e>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002508:	11f2      	asrs	r2, r6, #7
 800250a:	f002 0206 	and.w	r2, r2, #6
 800250e:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8002512:	611a      	str	r2, [r3, #16]
 8002514:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002516:	3201      	adds	r2, #1
 8002518:	d003      	beq.n	8002522 <HAL_I2C_Master_Transmit+0x262>
 800251a:	e033      	b.n	8002584 <HAL_I2C_Master_Transmit+0x2c4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800251c:	695a      	ldr	r2, [r3, #20]
 800251e:	0552      	lsls	r2, r2, #21
 8002520:	d4dd      	bmi.n	80024de <HAL_I2C_Master_Transmit+0x21e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	0711      	lsls	r1, r2, #28
 8002526:	d5f9      	bpl.n	800251c <HAL_I2C_Master_Transmit+0x25c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002528:	b2f6      	uxtb	r6, r6
 800252a:	611e      	str	r6, [r3, #16]
 800252c:	e724      	b.n	8002378 <HAL_I2C_Master_Transmit+0xb8>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252e:	6819      	ldr	r1, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002530:	2520      	movs	r5, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002532:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8002536:	6019      	str	r1, [r3, #0]
    return HAL_OK;
 8002538:	4610      	mov	r0, r2
    hi2c->State = HAL_I2C_STATE_READY;
 800253a:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800253e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002542:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    return HAL_OK;
 8002546:	e6c9      	b.n	80022dc <HAL_I2C_Master_Transmit+0x1c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	0792      	lsls	r2, r2, #30
 800254c:	f53f af1f 	bmi.w	800238e <HAL_I2C_Master_Transmit+0xce>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002550:	695a      	ldr	r2, [r3, #20]
 8002552:	0556      	lsls	r6, r2, #21
 8002554:	d4c3      	bmi.n	80024de <HAL_I2C_Master_Transmit+0x21e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002556:	f7fe ff77 	bl	8001448 <HAL_GetTick>
 800255a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800255c:	1b40      	subs	r0, r0, r5
 800255e:	4283      	cmp	r3, r0
 8002560:	d329      	bcc.n	80025b6 <HAL_I2C_Master_Transmit+0x2f6>
 8002562:	b343      	cbz	r3, 80025b6 <HAL_I2C_Master_Transmit+0x2f6>
 8002564:	6823      	ldr	r3, [r4, #0]
 8002566:	e707      	b.n	8002378 <HAL_I2C_Master_Transmit+0xb8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002568:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800256a:	2320      	movs	r3, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800256c:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800256e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002572:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002576:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002578:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800257c:	f043 0320 	orr.w	r3, r3, #32
 8002580:	6423      	str	r3, [r4, #64]	; 0x40
 8002582:	e728      	b.n	80023d6 <HAL_I2C_Master_Transmit+0x116>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002584:	695a      	ldr	r2, [r3, #20]
 8002586:	0717      	lsls	r7, r2, #28
 8002588:	d4ce      	bmi.n	8002528 <HAL_I2C_Master_Transmit+0x268>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800258a:	695a      	ldr	r2, [r3, #20]
 800258c:	0550      	lsls	r0, r2, #21
 800258e:	d4a6      	bmi.n	80024de <HAL_I2C_Master_Transmit+0x21e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002590:	f7fe ff5a 	bl	8001448 <HAL_GetTick>
 8002594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002596:	1b40      	subs	r0, r0, r5
 8002598:	4283      	cmp	r3, r0
 800259a:	d30c      	bcc.n	80025b6 <HAL_I2C_Master_Transmit+0x2f6>
 800259c:	b15b      	cbz	r3, 80025b6 <HAL_I2C_Master_Transmit+0x2f6>
 800259e:	6823      	ldr	r3, [r4, #0]
 80025a0:	e7b8      	b.n	8002514 <HAL_I2C_Master_Transmit+0x254>
 80025a2:	bf00      	nop
 80025a4:	ffff0000 	.word	0xffff0000
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a8:	6822      	ldr	r2, [r4, #0]
 80025aa:	6813      	ldr	r3, [r2, #0]
 80025ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025b0:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80025b2:	2001      	movs	r0, #1
 80025b4:	e692      	b.n	80022dc <HAL_I2C_Master_Transmit+0x1c>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025b6:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80025b8:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025ba:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025c0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80025c6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025ca:	f043 0320 	orr.w	r3, r3, #32
 80025ce:	6423      	str	r3, [r4, #64]	; 0x40
 80025d0:	e705      	b.n	80023de <HAL_I2C_Master_Transmit+0x11e>
 80025d2:	bf00      	nop

080025d4 <HAL_I2C_Mem_Read>:
{
 80025d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025d8:	4604      	mov	r4, r0
 80025da:	b087      	sub	sp, #28
 80025dc:	4699      	mov	r9, r3
 80025de:	460f      	mov	r7, r1
 80025e0:	4690      	mov	r8, r2
 80025e2:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 80025e6:	9e12      	ldr	r6, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 80025e8:	f7fe ff2e 	bl	8001448 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ec:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80025f0:	2b20      	cmp	r3, #32
 80025f2:	d004      	beq.n	80025fe <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 80025f4:	2702      	movs	r7, #2
}
 80025f6:	4638      	mov	r0, r7
 80025f8:	b007      	add	sp, #28
 80025fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025fe:	4605      	mov	r5, r0
 8002600:	e004      	b.n	800260c <HAL_I2C_Mem_Read+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002602:	f7fe ff21 	bl	8001448 <HAL_GetTick>
 8002606:	1b40      	subs	r0, r0, r5
 8002608:	2819      	cmp	r0, #25
 800260a:	d848      	bhi.n	800269e <HAL_I2C_Mem_Read+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800260c:	6822      	ldr	r2, [r4, #0]
 800260e:	6993      	ldr	r3, [r2, #24]
 8002610:	43db      	mvns	r3, r3
 8002612:	f013 0b02 	ands.w	fp, r3, #2
 8002616:	d0f4      	beq.n	8002602 <HAL_I2C_Mem_Read+0x2e>
    __HAL_LOCK(hi2c);
 8002618:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800261c:	2b01      	cmp	r3, #1
 800261e:	d0e9      	beq.n	80025f4 <HAL_I2C_Mem_Read+0x20>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002620:	6813      	ldr	r3, [r2, #0]
    __HAL_LOCK(hi2c);
 8002622:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002624:	07db      	lsls	r3, r3, #31
    __HAL_LOCK(hi2c);
 8002626:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800262a:	d402      	bmi.n	8002632 <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800262c:	6813      	ldr	r3, [r2, #0]
 800262e:	430b      	orrs	r3, r1
 8002630:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002632:	6813      	ldr	r3, [r2, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002634:	489a      	ldr	r0, [pc, #616]	; (80028a0 <HAL_I2C_Mem_Read+0x2cc>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002636:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800263a:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800263c:	2322      	movs	r3, #34	; 0x22
 800263e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002642:	2240      	movs	r2, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002644:	2300      	movs	r3, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002646:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800264a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800264c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002650:	f8b4 e02a 	ldrh.w	lr, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8002654:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002656:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002658:	4639      	mov	r1, r7
 800265a:	9501      	str	r5, [sp, #4]
 800265c:	9600      	str	r6, [sp, #0]
 800265e:	464b      	mov	r3, r9
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002660:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002662:	4642      	mov	r2, r8
    hi2c->XferSize    = hi2c->XferCount;
 8002664:	f8a4 e028 	strh.w	lr, [r4, #40]	; 0x28
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002668:	4620      	mov	r0, r4
 800266a:	f7ff fc2b 	bl	8001ec4 <I2C_RequestMemoryRead>
 800266e:	4607      	mov	r7, r0
 8002670:	bb18      	cbnz	r0, 80026ba <HAL_I2C_Mem_Read+0xe6>
    if (hi2c->XferSize == 0U)
 8002672:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002674:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 8002676:	bb12      	cbnz	r2, 80026be <HAL_I2C_Mem_Read+0xea>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002678:	9002      	str	r0, [sp, #8]
 800267a:	695a      	ldr	r2, [r3, #20]
 800267c:	9202      	str	r2, [sp, #8]
 800267e:	699a      	ldr	r2, [r3, #24]
 8002680:	9202      	str	r2, [sp, #8]
 8002682:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800268a:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800268c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800268e:	2220      	movs	r2, #32
 8002690:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002694:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002698:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800269c:	e7ab      	b.n	80025f6 <HAL_I2C_Mem_Read+0x22>
      hi2c->State               = HAL_I2C_STATE_READY;
 800269e:	2320      	movs	r3, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80026a0:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026a8:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80026ae:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026b2:	f043 0320 	orr.w	r3, r3, #32
 80026b6:	6423      	str	r3, [r4, #64]	; 0x40
 80026b8:	e79c      	b.n	80025f4 <HAL_I2C_Mem_Read+0x20>
      return HAL_ERROR;
 80026ba:	2701      	movs	r7, #1
 80026bc:	e79b      	b.n	80025f6 <HAL_I2C_Mem_Read+0x22>
    else if (hi2c->XferSize == 1U)
 80026be:	2a01      	cmp	r2, #1
 80026c0:	f000 80df 	beq.w	8002882 <HAL_I2C_Mem_Read+0x2ae>
    else if (hi2c->XferSize == 2U)
 80026c4:	2a02      	cmp	r2, #2
 80026c6:	f000 80ed 	beq.w	80028a4 <HAL_I2C_Mem_Read+0x2d0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ca:	9005      	str	r0, [sp, #20]
 80026cc:	6959      	ldr	r1, [r3, #20]
 80026ce:	9105      	str	r1, [sp, #20]
 80026d0:	6999      	ldr	r1, [r3, #24]
 80026d2:	9105      	str	r1, [sp, #20]
 80026d4:	9905      	ldr	r1, [sp, #20]
      if (hi2c->XferSize <= 3U)
 80026d6:	2a03      	cmp	r2, #3
 80026d8:	d87f      	bhi.n	80027da <HAL_I2C_Mem_Read+0x206>
        if (hi2c->XferSize == 1U)
 80026da:	2a01      	cmp	r2, #1
 80026dc:	f000 80b2 	beq.w	8002844 <HAL_I2C_Mem_Read+0x270>
        else if (hi2c->XferSize == 2U)
 80026e0:	2a02      	cmp	r2, #2
 80026e2:	d04a      	beq.n	800277a <HAL_I2C_Mem_Read+0x1a6>
 80026e4:	1c70      	adds	r0, r6, #1
 80026e6:	d154      	bne.n	8002792 <HAL_I2C_Mem_Read+0x1be>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026e8:	695a      	ldr	r2, [r3, #20]
 80026ea:	0751      	lsls	r1, r2, #29
 80026ec:	d5fc      	bpl.n	80026e8 <HAL_I2C_Mem_Read+0x114>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ee:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026f6:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80026fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80026fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002700:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002702:	3b01      	subs	r3, #1
 8002704:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8002706:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8002708:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 800270a:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800270c:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800270e:	8522      	strh	r2, [r4, #40]	; 0x28
 8002710:	1c70      	adds	r0, r6, #1
 8002712:	6822      	ldr	r2, [r4, #0]
 8002714:	d148      	bne.n	80027a8 <HAL_I2C_Mem_Read+0x1d4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002716:	6953      	ldr	r3, [r2, #20]
 8002718:	0759      	lsls	r1, r3, #29
 800271a:	d5fc      	bpl.n	8002716 <HAL_I2C_Mem_Read+0x142>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271c:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800271e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002720:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002724:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002726:	6913      	ldr	r3, [r2, #16]
 8002728:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 800272a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800272c:	6a60      	ldr	r0, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800272e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002730:	6822      	ldr	r2, [r4, #0]
          hi2c->XferCount--;
 8002732:	3b01      	subs	r3, #1
 8002734:	b29b      	uxth	r3, r3
 8002736:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002738:	6912      	ldr	r2, [r2, #16]
          hi2c->pBuffPtr++;
 800273a:	f100 0e01 	add.w	lr, r0, #1
          hi2c->XferSize--;
 800273e:	1e4b      	subs	r3, r1, #1
          hi2c->pBuffPtr++;
 8002740:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002744:	8523      	strh	r3, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002746:	7042      	strb	r2, [r0, #1]
          hi2c->XferSize--;
 8002748:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800274a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800274c:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800274e:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8002750:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 8002752:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8002754:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8002756:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8002758:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800275a:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800275c:	6261      	str	r1, [r4, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 800275e:	2a00      	cmp	r2, #0
 8002760:	d094      	beq.n	800268c <HAL_I2C_Mem_Read+0xb8>
 8002762:	6823      	ldr	r3, [r4, #0]
 8002764:	e7b7      	b.n	80026d6 <HAL_I2C_Mem_Read+0x102>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002766:	695a      	ldr	r2, [r3, #20]
 8002768:	0752      	lsls	r2, r2, #29
 800276a:	d40b      	bmi.n	8002784 <HAL_I2C_Mem_Read+0x1b0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800276c:	f7fe fe6c 	bl	8001448 <HAL_GetTick>
 8002770:	1b40      	subs	r0, r0, r5
 8002772:	4286      	cmp	r6, r0
 8002774:	d322      	bcc.n	80027bc <HAL_I2C_Mem_Read+0x1e8>
 8002776:	b30e      	cbz	r6, 80027bc <HAL_I2C_Mem_Read+0x1e8>
 8002778:	6823      	ldr	r3, [r4, #0]
 800277a:	1c70      	adds	r0, r6, #1
 800277c:	d1f3      	bne.n	8002766 <HAL_I2C_Mem_Read+0x192>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800277e:	695a      	ldr	r2, [r3, #20]
 8002780:	0751      	lsls	r1, r2, #29
 8002782:	d5fc      	bpl.n	800277e <HAL_I2C_Mem_Read+0x1aa>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002784:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002786:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800278c:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	e7ca      	b.n	8002728 <HAL_I2C_Mem_Read+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002792:	695a      	ldr	r2, [r3, #20]
 8002794:	0752      	lsls	r2, r2, #29
 8002796:	d4aa      	bmi.n	80026ee <HAL_I2C_Mem_Read+0x11a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002798:	f7fe fe56 	bl	8001448 <HAL_GetTick>
 800279c:	1b40      	subs	r0, r0, r5
 800279e:	4286      	cmp	r6, r0
 80027a0:	d30c      	bcc.n	80027bc <HAL_I2C_Mem_Read+0x1e8>
 80027a2:	b15e      	cbz	r6, 80027bc <HAL_I2C_Mem_Read+0x1e8>
 80027a4:	6823      	ldr	r3, [r4, #0]
 80027a6:	e79d      	b.n	80026e4 <HAL_I2C_Mem_Read+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027a8:	6953      	ldr	r3, [r2, #20]
 80027aa:	075b      	lsls	r3, r3, #29
 80027ac:	d4b6      	bmi.n	800271c <HAL_I2C_Mem_Read+0x148>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ae:	f7fe fe4b 	bl	8001448 <HAL_GetTick>
 80027b2:	1b40      	subs	r0, r0, r5
 80027b4:	4286      	cmp	r6, r0
 80027b6:	d301      	bcc.n	80027bc <HAL_I2C_Mem_Read+0x1e8>
 80027b8:	2e00      	cmp	r6, #0
 80027ba:	d1a9      	bne.n	8002710 <HAL_I2C_Mem_Read+0x13c>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80027bc:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80027be:	2320      	movs	r3, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80027c0:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027c6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80027cc:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027d0:	f043 0320 	orr.w	r3, r3, #32
 80027d4:	6423      	str	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 80027d6:	2701      	movs	r7, #1
 80027d8:	e70d      	b.n	80025f6 <HAL_I2C_Mem_Read+0x22>
 80027da:	b94e      	cbnz	r6, 80027f0 <HAL_I2C_Mem_Read+0x21c>
 80027dc:	e044      	b.n	8002868 <HAL_I2C_Mem_Read+0x294>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80027de:	695a      	ldr	r2, [r3, #20]
 80027e0:	06d2      	lsls	r2, r2, #27
 80027e2:	d41f      	bmi.n	8002824 <HAL_I2C_Mem_Read+0x250>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e4:	f7fe fe30 	bl	8001448 <HAL_GetTick>
 80027e8:	1b40      	subs	r0, r0, r5
 80027ea:	4286      	cmp	r6, r0
 80027ec:	d3e6      	bcc.n	80027bc <HAL_I2C_Mem_Read+0x1e8>
 80027ee:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027f0:	695a      	ldr	r2, [r3, #20]
 80027f2:	0651      	lsls	r1, r2, #25
 80027f4:	d5f3      	bpl.n	80027de <HAL_I2C_Mem_Read+0x20a>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 80027fc:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027fe:	6823      	ldr	r3, [r4, #0]
        hi2c->XferSize--;
 8002800:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8002802:	6a60      	ldr	r0, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002804:	3901      	subs	r1, #1
 8002806:	b289      	uxth	r1, r1
 8002808:	8561      	strh	r1, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800280a:	6959      	ldr	r1, [r3, #20]
        hi2c->XferSize--;
 800280c:	3a01      	subs	r2, #1
 800280e:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8002810:	f100 0e01 	add.w	lr, r0, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002814:	0749      	lsls	r1, r1, #29
        hi2c->XferSize--;
 8002816:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8002818:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800281c:	d59f      	bpl.n	800275e <HAL_I2C_Mem_Read+0x18a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	7043      	strb	r3, [r0, #1]
 8002822:	e791      	b.n	8002748 <HAL_I2C_Mem_Read+0x174>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002824:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002826:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 800282a:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800282c:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800282e:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002830:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002834:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002838:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800283a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800283e:	6423      	str	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8002840:	2701      	movs	r7, #1
 8002842:	e6d8      	b.n	80025f6 <HAL_I2C_Mem_Read+0x22>
 8002844:	b94e      	cbnz	r6, 800285a <HAL_I2C_Mem_Read+0x286>
 8002846:	e018      	b.n	800287a <HAL_I2C_Mem_Read+0x2a6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	06d1      	lsls	r1, r2, #27
 800284c:	d4ea      	bmi.n	8002824 <HAL_I2C_Mem_Read+0x250>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800284e:	f7fe fdfb 	bl	8001448 <HAL_GetTick>
 8002852:	1b40      	subs	r0, r0, r5
 8002854:	4286      	cmp	r6, r0
 8002856:	d3b1      	bcc.n	80027bc <HAL_I2C_Mem_Read+0x1e8>
 8002858:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800285a:	695a      	ldr	r2, [r3, #20]
 800285c:	0650      	lsls	r0, r2, #25
 800285e:	d5f3      	bpl.n	8002848 <HAL_I2C_Mem_Read+0x274>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002860:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	7013      	strb	r3, [r2, #0]
 8002866:	e76f      	b.n	8002748 <HAL_I2C_Mem_Read+0x174>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	0650      	lsls	r0, r2, #25
 800286c:	d4c3      	bmi.n	80027f6 <HAL_I2C_Mem_Read+0x222>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	06d0      	lsls	r0, r2, #27
 8002872:	d4d7      	bmi.n	8002824 <HAL_I2C_Mem_Read+0x250>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002874:	f7fe fde8 	bl	8001448 <HAL_GetTick>
 8002878:	e7a0      	b.n	80027bc <HAL_I2C_Mem_Read+0x1e8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800287a:	695a      	ldr	r2, [r3, #20]
 800287c:	0652      	lsls	r2, r2, #25
 800287e:	d5f6      	bpl.n	800286e <HAL_I2C_Mem_Read+0x29a>
 8002880:	e7ee      	b.n	8002860 <HAL_I2C_Mem_Read+0x28c>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002882:	6819      	ldr	r1, [r3, #0]
 8002884:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002888:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800288a:	9003      	str	r0, [sp, #12]
 800288c:	6959      	ldr	r1, [r3, #20]
 800288e:	9103      	str	r1, [sp, #12]
 8002890:	6999      	ldr	r1, [r3, #24]
 8002892:	9103      	str	r1, [sp, #12]
 8002894:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002896:	6819      	ldr	r1, [r3, #0]
 8002898:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800289c:	6019      	str	r1, [r3, #0]
 800289e:	e71a      	b.n	80026d6 <HAL_I2C_Mem_Read+0x102>
 80028a0:	ffff0000 	.word	0xffff0000
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028a4:	6819      	ldr	r1, [r3, #0]
 80028a6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80028aa:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ac:	6819      	ldr	r1, [r3, #0]
 80028ae:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80028b2:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028b4:	9004      	str	r0, [sp, #16]
 80028b6:	6959      	ldr	r1, [r3, #20]
 80028b8:	9104      	str	r1, [sp, #16]
 80028ba:	6999      	ldr	r1, [r3, #24]
 80028bc:	9104      	str	r1, [sp, #16]
 80028be:	9904      	ldr	r1, [sp, #16]
 80028c0:	e709      	b.n	80026d6 <HAL_I2C_Mem_Read+0x102>
 80028c2:	bf00      	nop

080028c4 <HAL_I2C_MasterTxCpltCallback>:
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop

080028c8 <HAL_I2C_MasterRxCpltCallback>:
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop

080028cc <HAL_I2C_SlaveTxCpltCallback>:
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop

080028d0 <HAL_I2C_SlaveRxCpltCallback>:
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop

080028d4 <HAL_I2C_AddrCallback>:
{
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop

080028d8 <HAL_I2C_ListenCpltCallback>:
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop

080028dc <HAL_I2C_MemTxCpltCallback>:
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop

080028e0 <HAL_I2C_MemRxCpltCallback>:
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop

080028e4 <HAL_I2C_ErrorCallback>:
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop

080028e8 <HAL_I2C_AbortCpltCallback>:
{
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop

080028ec <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80028ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
 80028ee:	b570      	push	{r4, r5, r6, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028f0:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
  if (hi2c->hdmatx != NULL)
 80028f4:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 80028f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028f8:	b2ce      	uxtb	r6, r1
  if (hi2c->hdmatx != NULL)
 80028fa:	2c00      	cmp	r4, #0
 80028fc:	d033      	beq.n	8002966 <I2C_DMAAbort+0x7a>
    hi2c->hdmatx->XferCpltCallback = NULL;
 80028fe:	2100      	movs	r1, #0
 8002900:	63e1      	str	r1, [r4, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 8002902:	2800      	cmp	r0, #0
 8002904:	d038      	beq.n	8002978 <I2C_DMAAbort+0x8c>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002906:	681a      	ldr	r2, [r3, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002908:	63c1      	str	r1, [r0, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800290a:	6815      	ldr	r5, [r2, #0]
 800290c:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8002910:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8002912:	8559      	strh	r1, [r3, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002914:	6521      	str	r1, [r4, #80]	; 0x50
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002916:	2100      	movs	r1, #0
 8002918:	6501      	str	r1, [r0, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 800291a:	6811      	ldr	r1, [r2, #0]
 800291c:	f021 0101 	bic.w	r1, r1, #1
 8002920:	6011      	str	r1, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002922:	f893 003d 	ldrb.w	r0, [r3, #61]	; 0x3d
 8002926:	2860      	cmp	r0, #96	; 0x60
 8002928:	d02e      	beq.n	8002988 <I2C_DMAAbort+0x9c>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800292a:	f006 0128 	and.w	r1, r6, #40	; 0x28
 800292e:	2928      	cmp	r1, #40	; 0x28
 8002930:	d009      	beq.n	8002946 <I2C_DMAAbort+0x5a>
      hi2c->State = HAL_I2C_STATE_READY;
 8002932:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002934:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8002936:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 800293a:	4618      	mov	r0, r3
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002940:	f7ff ffd0 	bl	80028e4 <HAL_I2C_ErrorCallback>
}
 8002944:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_ENABLE(hi2c);
 8002946:	6810      	ldr	r0, [r2, #0]
 8002948:	f040 0001 	orr.w	r0, r0, #1
 800294c:	6010      	str	r0, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800294e:	6810      	ldr	r0, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002950:	2400      	movs	r4, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002952:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 8002956:	6010      	str	r0, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002958:	631c      	str	r4, [r3, #48]	; 0x30
    HAL_I2C_ErrorCallback(hi2c);
 800295a:	4618      	mov	r0, r3
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800295c:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 8002960:	f7ff ffc0 	bl	80028e4 <HAL_I2C_ErrorCallback>
}
 8002964:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->hdmarx != NULL)
 8002966:	b1d0      	cbz	r0, 800299e <I2C_DMAAbort+0xb2>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002968:	681a      	ldr	r2, [r3, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 800296a:	63c4      	str	r4, [r0, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800296c:	6811      	ldr	r1, [r2, #0]
 800296e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002972:	6011      	str	r1, [r2, #0]
  hi2c->XferCount = 0U;
 8002974:	855c      	strh	r4, [r3, #42]	; 0x2a
 8002976:	e7ce      	b.n	8002916 <I2C_DMAAbort+0x2a>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	6811      	ldr	r1, [r2, #0]
 800297c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002980:	6011      	str	r1, [r2, #0]
  hi2c->XferCount = 0U;
 8002982:	8558      	strh	r0, [r3, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002984:	6520      	str	r0, [r4, #80]	; 0x50
 8002986:	e7c8      	b.n	800291a <I2C_DMAAbort+0x2e>
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002988:	2200      	movs	r2, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 800298a:	2120      	movs	r1, #32
 800298c:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    HAL_I2C_AbortCpltCallback(hi2c);
 8002990:	4618      	mov	r0, r3
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002996:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8002998:	f7ff ffa6 	bl	80028e8 <HAL_I2C_AbortCpltCallback>
 800299c:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	6811      	ldr	r1, [r2, #0]
 80029a2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80029a6:	6011      	str	r1, [r2, #0]
  hi2c->XferCount = 0U;
 80029a8:	8558      	strh	r0, [r3, #42]	; 0x2a
 80029aa:	e7b6      	b.n	800291a <I2C_DMAAbort+0x2e>

080029ac <HAL_I2C_EV_IRQHandler>:
{
 80029ac:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80029ae:	6803      	ldr	r3, [r0, #0]
{
 80029b0:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80029b2:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80029b4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80029b6:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029ba:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80029be:	b2d2      	uxtb	r2, r2
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80029c0:	2a10      	cmp	r2, #16
{
 80029c2:	b08c      	sub	sp, #48	; 0x30
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80029c4:	d037      	beq.n	8002a36 <HAL_I2C_EV_IRQHandler+0x8a>
 80029c6:	2a40      	cmp	r2, #64	; 0x40
 80029c8:	d035      	beq.n	8002a36 <HAL_I2C_EV_IRQHandler+0x8a>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80029ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80029cc:	b2c9      	uxtb	r1, r1
 80029ce:	b9c2      	cbnz	r2, 8002a02 <HAL_I2C_EV_IRQHandler+0x56>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80029d0:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80029d2:	695a      	ldr	r2, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029d4:	f012 0602 	ands.w	r6, r2, #2
 80029d8:	d019      	beq.n	8002a0e <HAL_I2C_EV_IRQHandler+0x62>
 80029da:	0586      	lsls	r6, r0, #22
 80029dc:	d519      	bpl.n	8002a12 <HAL_I2C_EV_IRQHandler+0x66>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80029de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80029e0:	b102      	cbz	r2, 80029e4 <HAL_I2C_EV_IRQHandler+0x38>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80029e2:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80029e4:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80029e8:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80029ec:	2a28      	cmp	r2, #40	; 0x28
 80029ee:	f000 81b6 	beq.w	8002d5e <HAL_I2C_EV_IRQHandler+0x3b2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80029f2:	f06f 0102 	mvn.w	r1, #2
    __HAL_UNLOCK(hi2c);
 80029f6:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80029f8:	6159      	str	r1, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80029fa:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 80029fe:	b00c      	add	sp, #48	; 0x30
 8002a00:	bd70      	pop	{r4, r5, r6, pc}
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a02:	695a      	ldr	r2, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a04:	f012 0602 	ands.w	r6, r2, #2
  uint32_t sr2itflags               = 0U;
 8002a08:	f04f 0500 	mov.w	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a0c:	d1e5      	bne.n	80029da <HAL_I2C_EV_IRQHandler+0x2e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a0e:	06d5      	lsls	r5, r2, #27
 8002a10:	d468      	bmi.n	8002ae4 <HAL_I2C_EV_IRQHandler+0x138>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a12:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 8002a16:	2921      	cmp	r1, #33	; 0x21
 8002a18:	f000 812d 	beq.w	8002c76 <HAL_I2C_EV_IRQHandler+0x2ca>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a1c:	0656      	lsls	r6, r2, #25
 8002a1e:	f100 80f8 	bmi.w	8002c12 <HAL_I2C_EV_IRQHandler+0x266>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a22:	0752      	lsls	r2, r2, #29
 8002a24:	d5eb      	bpl.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
 8002a26:	0586      	lsls	r6, r0, #22
 8002a28:	d5e9      	bpl.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
  if (hi2c->XferCount != 0U)
 8002a2a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002a2c:	b292      	uxth	r2, r2
 8002a2e:	2a00      	cmp	r2, #0
 8002a30:	f040 817e 	bne.w	8002d30 <HAL_I2C_EV_IRQHandler+0x384>
 8002a34:	e7e3      	b.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a36:	6999      	ldr	r1, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a38:	695a      	ldr	r2, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002a3a:	07d6      	lsls	r6, r2, #31
 8002a3c:	d42b      	bmi.n	8002a96 <HAL_I2C_EV_IRQHandler+0xea>
 8002a3e:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 8002a42:	d0dc      	beq.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
 8002a44:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 8002a48:	d0d9      	beq.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a4a:	0716      	lsls	r6, r2, #28
 8002a4c:	f140 80c9 	bpl.w	8002be2 <HAL_I2C_EV_IRQHandler+0x236>
 8002a50:	0585      	lsls	r5, r0, #22
 8002a52:	f100 8198 	bmi.w	8002d86 <HAL_I2C_EV_IRQHandler+0x3da>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002a56:	f011 0f04 	tst.w	r1, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a5a:	6859      	ldr	r1, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002a5c:	f000 814b 	beq.w	8002cf6 <HAL_I2C_EV_IRQHandler+0x34a>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a60:	0509      	lsls	r1, r1, #20
 8002a62:	d4cc      	bmi.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a64:	0616      	lsls	r6, r2, #24
 8002a66:	f140 8102 	bpl.w	8002c6e <HAL_I2C_EV_IRQHandler+0x2c2>
 8002a6a:	0545      	lsls	r5, r0, #21
 8002a6c:	f140 80ff 	bpl.w	8002c6e <HAL_I2C_EV_IRQHandler+0x2c2>
 8002a70:	0751      	lsls	r1, r2, #29
 8002a72:	f140 8290 	bpl.w	8002f96 <HAL_I2C_EV_IRQHandler+0x5ea>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a76:	0586      	lsls	r6, r0, #22
 8002a78:	d5c1      	bpl.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a7a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a7c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002a80:	2a21      	cmp	r2, #33	; 0x21
 8002a82:	f000 82a7 	beq.w	8002fd4 <HAL_I2C_EV_IRQHandler+0x628>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a86:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002a8a:	2b40      	cmp	r3, #64	; 0x40
 8002a8c:	d1b7      	bne.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f7ff f9dc 	bl	8001e4c <I2C_MemoryTransmit_TXE_BTF>
 8002a94:	e7b3      	b.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a96:	0585      	lsls	r5, r0, #22
 8002a98:	f140 80a0 	bpl.w	8002bdc <HAL_I2C_EV_IRQHandler+0x230>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002a9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a9e:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8002aa2:	f000 8180 	beq.w	8002da6 <HAL_I2C_EV_IRQHandler+0x3fa>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002aa6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002aa8:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002aac:	bf04      	itt	eq
 8002aae:	2208      	moveq	r2, #8
 8002ab0:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ab2:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002ab6:	2a40      	cmp	r2, #64	; 0x40
 8002ab8:	f000 8178 	beq.w	8002dac <HAL_I2C_EV_IRQHandler+0x400>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002abc:	6922      	ldr	r2, [r4, #16]
 8002abe:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002ac2:	f000 817d 	beq.w	8002dc0 <HAL_I2C_EV_IRQHandler+0x414>
      if (hi2c->EventCount == 0U)
 8002ac6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002ac8:	2a00      	cmp	r2, #0
 8002aca:	f000 8140 	beq.w	8002d4e <HAL_I2C_EV_IRQHandler+0x3a2>
      else if (hi2c->EventCount == 1U)
 8002ace:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002ad0:	2a01      	cmp	r2, #1
 8002ad2:	d194      	bne.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002ad4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002ad6:	11d2      	asrs	r2, r2, #7
 8002ad8:	f002 0206 	and.w	r2, r2, #6
 8002adc:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8002ae0:	611a      	str	r2, [r3, #16]
 8002ae2:	e78c      	b.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ae4:	0585      	lsls	r5, r0, #22
 8002ae6:	d594      	bpl.n	8002a12 <HAL_I2C_EV_IRQHandler+0x66>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ae8:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002af2:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002af4:	960b      	str	r6, [sp, #44]	; 0x2c
 8002af6:	695a      	ldr	r2, [r3, #20]
 8002af8:	920b      	str	r2, [sp, #44]	; 0x2c
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	f042 0201 	orr.w	r2, r2, #1
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b0a:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	0510      	lsls	r0, r2, #20
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b10:	b2ed      	uxtb	r5, r5
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b12:	d520      	bpl.n	8002b56 <HAL_I2C_EV_IRQHandler+0x1aa>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b14:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8002b18:	2a22      	cmp	r2, #34	; 0x22
 8002b1a:	f000 816f 	beq.w	8002dfc <HAL_I2C_EV_IRQHandler+0x450>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002b1e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002b20:	6802      	ldr	r2, [r0, #0]
 8002b22:	6852      	ldr	r2, [r2, #4]
 8002b24:	b292      	uxth	r2, r2
 8002b26:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8002b28:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002b2a:	b292      	uxth	r2, r2
 8002b2c:	b11a      	cbz	r2, 8002b36 <HAL_I2C_EV_IRQHandler+0x18a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b2e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002b30:	f042 0204 	orr.w	r2, r2, #4
 8002b34:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b3c:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b3e:	f7ff f867 	bl	8001c10 <HAL_DMA_GetState>
 8002b42:	2801      	cmp	r0, #1
 8002b44:	d007      	beq.n	8002b56 <HAL_I2C_EV_IRQHandler+0x1aa>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b46:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002b48:	4b9c      	ldr	r3, [pc, #624]	; (8002dbc <HAL_I2C_EV_IRQHandler+0x410>)
 8002b4a:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b4c:	f7ff f84e 	bl	8001bec <HAL_DMA_Abort_IT>
 8002b50:	2800      	cmp	r0, #0
 8002b52:	f040 82f9 	bne.w	8003148 <HAL_I2C_EV_IRQHandler+0x79c>
  if (hi2c->XferCount != 0U)
 8002b56:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	b313      	cbz	r3, 8002ba2 <HAL_I2C_EV_IRQHandler+0x1f6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b5c:	6823      	ldr	r3, [r4, #0]
 8002b5e:	695a      	ldr	r2, [r3, #20]
 8002b60:	0751      	lsls	r1, r2, #29
 8002b62:	d50a      	bpl.n	8002b7a <HAL_I2C_EV_IRQHandler+0x1ce>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b64:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8002b6a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002b6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002b6e:	6823      	ldr	r3, [r4, #0]
      hi2c->XferCount--;
 8002b70:	3a01      	subs	r2, #1
 8002b72:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8002b74:	3101      	adds	r1, #1
      hi2c->XferCount--;
 8002b76:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002b78:	6261      	str	r1, [r4, #36]	; 0x24
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b7a:	695a      	ldr	r2, [r3, #20]
 8002b7c:	0652      	lsls	r2, r2, #25
 8002b7e:	d509      	bpl.n	8002b94 <HAL_I2C_EV_IRQHandler+0x1e8>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b80:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8002b86:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002b88:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8002b8e:	3201      	adds	r2, #1
      hi2c->XferCount--;
 8002b90:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002b92:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount != 0U)
 8002b94:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	b11b      	cbz	r3, 8002ba2 <HAL_I2C_EV_IRQHandler+0x1f6>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b9c:	f043 0304 	orr.w	r3, r3, #4
 8002ba0:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ba2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f040 8168 	bne.w	8002e7a <HAL_I2C_EV_IRQHandler+0x4ce>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002baa:	2d2a      	cmp	r5, #42	; 0x2a
 8002bac:	f000 81ba 	beq.w	8002f24 <HAL_I2C_EV_IRQHandler+0x578>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002bb0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002bb4:	2b28      	cmp	r3, #40	; 0x28
 8002bb6:	f000 81a1 	beq.w	8002efc <HAL_I2C_EV_IRQHandler+0x550>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002bba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002bbc:	2b22      	cmp	r3, #34	; 0x22
 8002bbe:	d002      	beq.n	8002bc6 <HAL_I2C_EV_IRQHandler+0x21a>
 8002bc0:	2d22      	cmp	r5, #34	; 0x22
 8002bc2:	f47f af1c 	bne.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002bc6:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002bc8:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002bca:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002bcc:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8002bce:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002bd6:	f7ff fe7b 	bl	80028d0 <HAL_I2C_SlaveRxCpltCallback>
 8002bda:	e710      	b.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bdc:	0715      	lsls	r5, r2, #28
 8002bde:	f53f af3a 	bmi.w	8002a56 <HAL_I2C_EV_IRQHandler+0xaa>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002be2:	0796      	lsls	r6, r2, #30
 8002be4:	f57f af37 	bpl.w	8002a56 <HAL_I2C_EV_IRQHandler+0xaa>
 8002be8:	0585      	lsls	r5, r0, #22
 8002bea:	f57f af34 	bpl.w	8002a56 <HAL_I2C_EV_IRQHandler+0xaa>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002bee:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002bf2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002bf4:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002bf6:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8002bfa:	2922      	cmp	r1, #34	; 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002bfc:	b2d2      	uxtb	r2, r2
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002bfe:	f000 811e 	beq.w	8002e3e <HAL_I2C_EV_IRQHandler+0x492>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c02:	2200      	movs	r2, #0
 8002c04:	920a      	str	r2, [sp, #40]	; 0x28
 8002c06:	695a      	ldr	r2, [r3, #20]
 8002c08:	920a      	str	r2, [sp, #40]	; 0x28
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	930a      	str	r3, [sp, #40]	; 0x28
 8002c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c10:	e6f5      	b.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c12:	0545      	lsls	r5, r0, #21
 8002c14:	f57f af05 	bpl.w	8002a22 <HAL_I2C_EV_IRQHandler+0x76>
 8002c18:	0751      	lsls	r1, r2, #29
 8002c1a:	f53f af04 	bmi.w	8002a26 <HAL_I2C_EV_IRQHandler+0x7a>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c1e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8002c22:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002c24:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c26:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8002c28:	2a00      	cmp	r2, #0
 8002c2a:	f43f aee8 	beq.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c2e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8002c34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8002c36:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c3e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8002c40:	3201      	adds	r2, #1
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c42:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8002c44:	6262      	str	r2, [r4, #36]	; 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f47f aed9 	bne.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
 8002c4c:	292a      	cmp	r1, #42	; 0x2a
 8002c4e:	f47f aed6 	bne.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c52:	6822      	ldr	r2, [r4, #0]
 8002c54:	6853      	ldr	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c56:	2522      	movs	r5, #34	; 0x22
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c5c:	2128      	movs	r1, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c5e:	6053      	str	r3, [r2, #4]
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c60:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c62:	6325      	str	r5, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c64:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c68:	f7ff fe32 	bl	80028d0 <HAL_I2C_SlaveRxCpltCallback>
 8002c6c:	e6c7      	b.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c6e:	0752      	lsls	r2, r2, #29
 8002c70:	f57f aec5 	bpl.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
 8002c74:	e6ff      	b.n	8002a76 <HAL_I2C_EV_IRQHandler+0xca>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c76:	0615      	lsls	r5, r2, #24
 8002c78:	d528      	bpl.n	8002ccc <HAL_I2C_EV_IRQHandler+0x320>
 8002c7a:	0546      	lsls	r6, r0, #21
 8002c7c:	d526      	bpl.n	8002ccc <HAL_I2C_EV_IRQHandler+0x320>
 8002c7e:	0755      	lsls	r5, r2, #29
 8002c80:	d427      	bmi.n	8002cd2 <HAL_I2C_EV_IRQHandler+0x326>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c82:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8002c86:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002c88:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c8a:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8002c8c:	2a00      	cmp	r2, #0
 8002c8e:	f43f aeb6 	beq.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c92:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002c94:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002c98:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 8002c9a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8002c9c:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002c9e:	3a01      	subs	r2, #1
 8002ca0:	b292      	uxth	r2, r2
 8002ca2:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ca4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002ca6:	b292      	uxth	r2, r2
 8002ca8:	2a00      	cmp	r2, #0
 8002caa:	f47f aea8 	bne.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
 8002cae:	2829      	cmp	r0, #41	; 0x29
 8002cb0:	f47f aea5 	bne.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cb4:	685a      	ldr	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002cb6:	2528      	movs	r5, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cbc:	605a      	str	r2, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002cbe:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002cc0:	6321      	str	r1, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002cc2:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002cc6:	f7ff fe01 	bl	80028cc <HAL_I2C_SlaveTxCpltCallback>
 8002cca:	e698      	b.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ccc:	0751      	lsls	r1, r2, #29
 8002cce:	f57f ae96 	bpl.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
 8002cd2:	0582      	lsls	r2, r0, #22
 8002cd4:	f57f ae93 	bpl.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
  if (hi2c->XferCount != 0U)
 8002cd8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002cda:	b292      	uxth	r2, r2
 8002cdc:	2a00      	cmp	r2, #0
 8002cde:	f43f ae8e 	beq.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ce2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002ce4:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002ce8:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 8002cea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8002cec:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002cf4:	e683      	b.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002cf6:	050d      	lsls	r5, r1, #20
 8002cf8:	f53f ae81 	bmi.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cfc:	0651      	lsls	r1, r2, #25
 8002cfe:	d522      	bpl.n	8002d46 <HAL_I2C_EV_IRQHandler+0x39a>
 8002d00:	0546      	lsls	r6, r0, #21
 8002d02:	d520      	bpl.n	8002d46 <HAL_I2C_EV_IRQHandler+0x39a>
 8002d04:	0755      	lsls	r5, r2, #29
 8002d06:	f140 8127 	bpl.w	8002f58 <HAL_I2C_EV_IRQHandler+0x5ac>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d0a:	0582      	lsls	r2, r0, #22
 8002d0c:	f57f ae77 	bpl.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d10:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8002d12:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002d14:	b292      	uxth	r2, r2
 8002d16:	2a04      	cmp	r2, #4
 8002d18:	f000 81b8 	beq.w	800308c <HAL_I2C_EV_IRQHandler+0x6e0>
  else if (hi2c->XferCount == 3U)
 8002d1c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002d1e:	b292      	uxth	r2, r2
 8002d20:	2a03      	cmp	r2, #3
 8002d22:	f000 81a4 	beq.w	800306e <HAL_I2C_EV_IRQHandler+0x6c2>
  else if (hi2c->XferCount == 2U)
 8002d26:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002d28:	b292      	uxth	r2, r2
 8002d2a:	2a02      	cmp	r2, #2
 8002d2c:	f000 81d0 	beq.w	80030d0 <HAL_I2C_EV_IRQHandler+0x724>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d30:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8002d36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8002d38:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8002d3e:	3201      	adds	r2, #1
    hi2c->XferCount--;
 8002d40:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8002d42:	6262      	str	r2, [r4, #36]	; 0x24
 8002d44:	e65b      	b.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d46:	0751      	lsls	r1, r2, #29
 8002d48:	f57f ae59 	bpl.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
 8002d4c:	e7dd      	b.n	8002d0a <HAL_I2C_EV_IRQHandler+0x35e>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002d4e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002d50:	11d2      	asrs	r2, r2, #7
 8002d52:	f002 0206 	and.w	r2, r2, #6
 8002d56:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8002d5a:	611a      	str	r2, [r3, #16]
 8002d5c:	e64f      	b.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d64:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002d66:	062e      	lsls	r6, r5, #24
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002d68:	f085 0104 	eor.w	r1, r5, #4
    __HAL_UNLOCK(hi2c);
 8002d6c:	f04f 0300 	mov.w	r3, #0
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002d70:	f3c1 0180 	ubfx	r1, r1, #2, #1
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002d74:	bf54      	ite	pl
 8002d76:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002d78:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8002d7a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002d7e:	4620      	mov	r0, r4
 8002d80:	f7ff fda8 	bl	80028d4 <HAL_I2C_AddrCallback>
 8002d84:	e63b      	b.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002d86:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d8a:	b2d2      	uxtb	r2, r2
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002d8c:	611a      	str	r2, [r3, #16]
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002d8e:	2900      	cmp	r1, #0
 8002d90:	f000 80c1 	beq.w	8002f16 <HAL_I2C_EV_IRQHandler+0x56a>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002d94:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8002d96:	2a00      	cmp	r2, #0
 8002d98:	f000 80c2 	beq.w	8002f20 <HAL_I2C_EV_IRQHandler+0x574>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002da2:	605a      	str	r2, [r3, #4]
 8002da4:	e62b      	b.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002da6:	2201      	movs	r2, #1
 8002da8:	62e2      	str	r2, [r4, #44]	; 0x2c
 8002daa:	e682      	b.n	8002ab2 <HAL_I2C_EV_IRQHandler+0x106>
    if (hi2c->EventCount == 0U)
 8002dac:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002dae:	b9fa      	cbnz	r2, 8002df0 <HAL_I2C_EV_IRQHandler+0x444>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002db0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002db2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002db6:	611a      	str	r2, [r3, #16]
 8002db8:	e621      	b.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
 8002dba:	bf00      	nop
 8002dbc:	080028ed 	.word	0x080028ed
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002dc0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002dc4:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002dc6:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002dc8:	bf16      	itet	ne
 8002dca:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002dce:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002dd2:	b2d2      	uxtbne	r2, r2
 8002dd4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002dd6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002dd8:	b112      	cbz	r2, 8002de0 <HAL_I2C_EV_IRQHandler+0x434>
 8002dda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ddc:	2a00      	cmp	r2, #0
 8002dde:	d1dd      	bne.n	8002d9c <HAL_I2C_EV_IRQHandler+0x3f0>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002de0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002de2:	2a00      	cmp	r2, #0
 8002de4:	f43f ae0b 	beq.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002de8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002dea:	2a00      	cmp	r2, #0
 8002dec:	d1d6      	bne.n	8002d9c <HAL_I2C_EV_IRQHandler+0x3f0>
 8002dee:	e606      	b.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002df0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002df2:	f042 0201 	orr.w	r2, r2, #1
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	611a      	str	r2, [r3, #16]
 8002dfa:	e600      	b.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002dfc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002dfe:	6802      	ldr	r2, [r0, #0]
 8002e00:	6852      	ldr	r2, [r2, #4]
 8002e02:	b292      	uxth	r2, r2
 8002e04:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8002e06:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002e08:	b292      	uxth	r2, r2
 8002e0a:	b11a      	cbz	r2, 8002e14 <HAL_I2C_EV_IRQHandler+0x468>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e0c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002e0e:	f042 0204 	orr.w	r2, r2, #4
 8002e12:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e1a:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e1c:	f7fe fef8 	bl	8001c10 <HAL_DMA_GetState>
 8002e20:	2801      	cmp	r0, #1
 8002e22:	f43f ae98 	beq.w	8002b56 <HAL_I2C_EV_IRQHandler+0x1aa>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e26:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002e28:	4ba6      	ldr	r3, [pc, #664]	; (80030c4 <HAL_I2C_EV_IRQHandler+0x718>)
 8002e2a:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e2c:	f7fe fede 	bl	8001bec <HAL_DMA_Abort_IT>
 8002e30:	2800      	cmp	r0, #0
 8002e32:	f43f ae90 	beq.w	8002b56 <HAL_I2C_EV_IRQHandler+0x1aa>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e36:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002e38:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002e3a:	4798      	blx	r3
 8002e3c:	e68b      	b.n	8002b56 <HAL_I2C_EV_IRQHandler+0x1aa>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002e3e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002e40:	b911      	cbnz	r1, 8002e48 <HAL_I2C_EV_IRQHandler+0x49c>
 8002e42:	2a40      	cmp	r2, #64	; 0x40
 8002e44:	f000 820e 	beq.w	8003264 <HAL_I2C_EV_IRQHandler+0x8b8>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002e48:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002e4a:	b922      	cbnz	r2, 8002e56 <HAL_I2C_EV_IRQHandler+0x4aa>
 8002e4c:	6921      	ldr	r1, [r4, #16]
 8002e4e:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 8002e52:	f000 820f 	beq.w	8003274 <HAL_I2C_EV_IRQHandler+0x8c8>
      if (hi2c->XferCount == 0U)
 8002e56:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002e58:	b292      	uxth	r2, r2
 8002e5a:	2a00      	cmp	r2, #0
 8002e5c:	f040 80df 	bne.w	800301e <HAL_I2C_EV_IRQHandler+0x672>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e60:	9203      	str	r2, [sp, #12]
 8002e62:	695a      	ldr	r2, [r3, #20]
 8002e64:	9203      	str	r2, [sp, #12]
 8002e66:	699a      	ldr	r2, [r3, #24]
 8002e68:	9203      	str	r2, [sp, #12]
 8002e6a:	9a03      	ldr	r2, [sp, #12]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e72:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	6523      	str	r3, [r4, #80]	; 0x50
 8002e78:	e5c1      	b.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e7a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002e7e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002e82:	2b10      	cmp	r3, #16
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e84:	b2d2      	uxtb	r2, r2
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002e86:	f000 810f 	beq.w	80030a8 <HAL_I2C_EV_IRQHandler+0x6fc>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e8a:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8002e8e:	2928      	cmp	r1, #40	; 0x28
 8002e90:	f000 8104 	beq.w	800309c <HAL_I2C_EV_IRQHandler+0x6f0>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002e94:	6823      	ldr	r3, [r4, #0]
 8002e96:	6859      	ldr	r1, [r3, #4]
 8002e98:	050d      	lsls	r5, r1, #20
 8002e9a:	d404      	bmi.n	8002ea6 <HAL_I2C_EV_IRQHandler+0x4fa>
 8002e9c:	2a60      	cmp	r2, #96	; 0x60
 8002e9e:	d002      	beq.n	8002ea6 <HAL_I2C_EV_IRQHandler+0x4fa>
      hi2c->State = HAL_I2C_STATE_READY;
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eaa:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8002eb4:	d03e      	beq.n	8002f34 <HAL_I2C_EV_IRQHandler+0x588>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002eb6:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002eb8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002eba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ebe:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002ec0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	f000 8143 	beq.w	8003150 <HAL_I2C_EV_IRQHandler+0x7a4>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002eca:	4b7e      	ldr	r3, [pc, #504]	; (80030c4 <HAL_I2C_EV_IRQHandler+0x718>)
 8002ecc:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002ece:	f7fe fe8d 	bl	8001bec <HAL_DMA_Abort_IT>
 8002ed2:	2800      	cmp	r0, #0
 8002ed4:	f040 8190 	bne.w	80031f8 <HAL_I2C_EV_IRQHandler+0x84c>
  CurrentError = hi2c->ErrorCode;
 8002ed8:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002eda:	071b      	lsls	r3, r3, #28
 8002edc:	d004      	beq.n	8002ee8 <HAL_I2C_EV_IRQHandler+0x53c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ede:	6822      	ldr	r2, [r4, #0]
 8002ee0:	6853      	ldr	r3, [r2, #4]
 8002ee2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ee6:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8002ee8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002eec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002eee:	0756      	lsls	r6, r2, #29
  CurrentState = hi2c->State;
 8002ef0:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002ef2:	f57f ad84 	bpl.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
 8002ef6:	2b28      	cmp	r3, #40	; 0x28
 8002ef8:	f47f ad81 	bne.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002efc:	4b72      	ldr	r3, [pc, #456]	; (80030c8 <HAL_I2C_EV_IRQHandler+0x71c>)
 8002efe:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8002f00:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f02:	2300      	movs	r3, #0
 8002f04:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 8002f06:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 8002f08:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002f10:	f7ff fce2 	bl	80028d8 <HAL_I2C_ListenCpltCallback>
 8002f14:	e573      	b.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002f16:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002f18:	2a00      	cmp	r2, #0
 8002f1a:	f47f af3b 	bne.w	8002d94 <HAL_I2C_EV_IRQHandler+0x3e8>
 8002f1e:	e56e      	b.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002f20:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002f22:	e761      	b.n	8002de8 <HAL_I2C_EV_IRQHandler+0x43c>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f24:	2228      	movs	r2, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f26:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f28:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f2a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f2e:	f7ff fccf 	bl	80028d0 <HAL_I2C_SlaveRxCpltCallback>
 8002f32:	e63d      	b.n	8002bb0 <HAL_I2C_EV_IRQHandler+0x204>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002f34:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8002f38:	2960      	cmp	r1, #96	; 0x60
 8002f3a:	f000 8127 	beq.w	800318c <HAL_I2C_EV_IRQHandler+0x7e0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f3e:	695a      	ldr	r2, [r3, #20]
 8002f40:	0652      	lsls	r2, r2, #25
 8002f42:	d505      	bpl.n	8002f50 <HAL_I2C_EV_IRQHandler+0x5a4>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f44:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002f4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8002f50:	4620      	mov	r0, r4
 8002f52:	f7ff fcc7 	bl	80028e4 <HAL_I2C_ErrorCallback>
 8002f56:	e7bf      	b.n	8002ed8 <HAL_I2C_EV_IRQHandler+0x52c>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f58:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002f5c:	2a22      	cmp	r2, #34	; 0x22
 8002f5e:	f47f ad4e 	bne.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
    tmp = hi2c->XferCount;
 8002f62:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002f64:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8002f66:	2a03      	cmp	r2, #3
 8002f68:	f240 8152 	bls.w	8003210 <HAL_I2C_EV_IRQHandler+0x864>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f6c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8002f72:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002f74:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8002f7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002f7e:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8002f80:	3201      	adds	r2, #1
      if (hi2c->XferCount == (uint16_t)3)
 8002f82:	2b03      	cmp	r3, #3
      hi2c->pBuffPtr++;
 8002f84:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->XferCount == (uint16_t)3)
 8002f86:	f47f ad3a 	bne.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f8a:	6822      	ldr	r2, [r4, #0]
 8002f8c:	6853      	ldr	r3, [r2, #4]
 8002f8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f92:	6053      	str	r3, [r2, #4]
 8002f94:	e533      	b.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f96:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f9a:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f9c:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002fa0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fa2:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002fa4:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002fa6:	2800      	cmp	r0, #0
 8002fa8:	f040 80ca 	bne.w	8003140 <HAL_I2C_EV_IRQHandler+0x794>
 8002fac:	2a21      	cmp	r2, #33	; 0x21
 8002fae:	f000 8174 	beq.w	800329a <HAL_I2C_EV_IRQHandler+0x8ee>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002fb2:	2940      	cmp	r1, #64	; 0x40
 8002fb4:	f47f ad23 	bne.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002fb8:	2a22      	cmp	r2, #34	; 0x22
 8002fba:	f47f ad20 	bne.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
    if (hi2c->XferCount == 0U)
 8002fbe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002fc0:	b292      	uxth	r2, r2
 8002fc2:	2a00      	cmp	r2, #0
 8002fc4:	f000 81bd 	beq.w	8003342 <HAL_I2C_EV_IRQHandler+0x996>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fc8:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002fcc:	2a40      	cmp	r2, #64	; 0x40
 8002fce:	f47f ae88 	bne.w	8002ce2 <HAL_I2C_EV_IRQHandler+0x336>
 8002fd2:	e55c      	b.n	8002a8e <HAL_I2C_EV_IRQHandler+0xe2>
    if (hi2c->XferCount != 0U)
 8002fd4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002fd6:	b292      	uxth	r2, r2
 8002fd8:	2a00      	cmp	r2, #0
 8002fda:	f47f ae82 	bne.w	8002ce2 <HAL_I2C_EV_IRQHandler+0x336>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fde:	2908      	cmp	r1, #8
 8002fe0:	d005      	beq.n	8002fee <HAL_I2C_EV_IRQHandler+0x642>
 8002fe2:	2920      	cmp	r1, #32
 8002fe4:	d003      	beq.n	8002fee <HAL_I2C_EV_IRQHandler+0x642>
 8002fe6:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8002fea:	f040 819d 	bne.w	8003328 <HAL_I2C_EV_IRQHandler+0x97c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ff4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff6:	6819      	ldr	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ff8:	2200      	movs	r2, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002ffa:	2020      	movs	r0, #32
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffc:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003000:	6019      	str	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003002:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003004:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003008:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800300c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003010:	2b40      	cmp	r3, #64	; 0x40
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003012:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003014:	f000 813d 	beq.w	8003292 <HAL_I2C_EV_IRQHandler+0x8e6>
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003018:	f7ff fc54 	bl	80028c4 <HAL_I2C_MasterTxCpltCallback>
 800301c:	e4ef      	b.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
      else if (hi2c->XferCount == 1U)
 800301e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003020:	b292      	uxth	r2, r2
 8003022:	2a01      	cmp	r2, #1
 8003024:	f000 80cc 	beq.w	80031c0 <HAL_I2C_EV_IRQHandler+0x814>
      else if (hi2c->XferCount == 2U)
 8003028:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800302a:	b292      	uxth	r2, r2
 800302c:	2a02      	cmp	r2, #2
 800302e:	f000 814f 	beq.w	80032d0 <HAL_I2C_EV_IRQHandler+0x924>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003038:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	0515      	lsls	r5, r2, #20
 800303e:	d50e      	bpl.n	800305e <HAL_I2C_EV_IRQHandler+0x6b2>
 8003040:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8003044:	d007      	beq.n	8003056 <HAL_I2C_EV_IRQHandler+0x6aa>
 8003046:	3801      	subs	r0, #1
 8003048:	281f      	cmp	r0, #31
 800304a:	d808      	bhi.n	800305e <HAL_I2C_EV_IRQHandler+0x6b2>
 800304c:	4a1f      	ldr	r2, [pc, #124]	; (80030cc <HAL_I2C_EV_IRQHandler+0x720>)
 800304e:	fa22 f000 	lsr.w	r0, r2, r0
 8003052:	07c0      	lsls	r0, r0, #31
 8003054:	d503      	bpl.n	800305e <HAL_I2C_EV_IRQHandler+0x6b2>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800305c:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800305e:	2200      	movs	r2, #0
 8003060:	9209      	str	r2, [sp, #36]	; 0x24
 8003062:	695a      	ldr	r2, [r3, #20]
 8003064:	9209      	str	r2, [sp, #36]	; 0x24
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	9309      	str	r3, [sp, #36]	; 0x24
 800306a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800306c:	e702      	b.n	8002e74 <HAL_I2C_EV_IRQHandler+0x4c8>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800306e:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003070:	2904      	cmp	r1, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003076:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003078:	f43f ae5a 	beq.w	8002d30 <HAL_I2C_EV_IRQHandler+0x384>
 800307c:	2902      	cmp	r1, #2
 800307e:	f43f ae57 	beq.w	8002d30 <HAL_I2C_EV_IRQHandler+0x384>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	e651      	b.n	8002d30 <HAL_I2C_EV_IRQHandler+0x384>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800308c:	685a      	ldr	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800308e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003094:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	700b      	strb	r3, [r1, #0]
 800309a:	e64c      	b.n	8002d36 <HAL_I2C_EV_IRQHandler+0x38a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800309c:	2300      	movs	r3, #0
 800309e:	6323      	str	r3, [r4, #48]	; 0x30
 80030a0:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80030a2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 80030a6:	e702      	b.n	8002eae <HAL_I2C_EV_IRQHandler+0x502>
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80030a8:	2a22      	cmp	r2, #34	; 0x22
 80030aa:	f47f aeee 	bne.w	8002e8a <HAL_I2C_EV_IRQHandler+0x4de>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80030ae:	6821      	ldr	r1, [r4, #0]
 80030b0:	680a      	ldr	r2, [r1, #0]
 80030b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030b6:	600a      	str	r2, [r1, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80030b8:	684a      	ldr	r2, [r1, #4]
 80030ba:	0516      	lsls	r6, r2, #20
 80030bc:	460b      	mov	r3, r1
 80030be:	f57f aeef 	bpl.w	8002ea0 <HAL_I2C_EV_IRQHandler+0x4f4>
 80030c2:	e6f0      	b.n	8002ea6 <HAL_I2C_EV_IRQHandler+0x4fa>
 80030c4:	080028ed 	.word	0x080028ed
 80030c8:	ffff0000 	.word	0xffff0000
 80030cc:	80008081 	.word	0x80008081
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80030d0:	2901      	cmp	r1, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030d2:	681a      	ldr	r2, [r3, #0]
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80030d4:	d070      	beq.n	80031b8 <HAL_I2C_EV_IRQHandler+0x80c>
 80030d6:	2910      	cmp	r1, #16
 80030d8:	d06e      	beq.n	80031b8 <HAL_I2C_EV_IRQHandler+0x80c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80030da:	2904      	cmp	r1, #4
 80030dc:	f000 8137 	beq.w	800334e <HAL_I2C_EV_IRQHandler+0x9a2>
 80030e0:	2902      	cmp	r1, #2
 80030e2:	f000 8134 	beq.w	800334e <HAL_I2C_EV_IRQHandler+0x9a2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 80030f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80030f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f6:	6821      	ldr	r1, [r4, #0]
    hi2c->XferCount--;
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030fe:	690b      	ldr	r3, [r1, #16]
    hi2c->pBuffPtr++;
 8003100:	1c51      	adds	r1, r2, #1
 8003102:	6261      	str	r1, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003104:	7053      	strb	r3, [r2, #1]
    hi2c->XferCount--;
 8003106:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003108:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr++;
 800310a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800310c:	3b01      	subs	r3, #1
 800310e:	b29b      	uxth	r3, r3
 8003110:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003112:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr++;
 8003114:	3201      	adds	r2, #1
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    hi2c->State = HAL_I2C_STATE_READY;
 800311a:	2020      	movs	r0, #32
    hi2c->pBuffPtr++;
 800311c:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800311e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003120:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003124:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8003128:	2b40      	cmp	r3, #64	; 0x40
 800312a:	f000 8092 	beq.w	8003252 <HAL_I2C_EV_IRQHandler+0x8a6>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800312e:	2200      	movs	r2, #0
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003130:	2312      	movs	r3, #18
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003132:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003136:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003138:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800313a:	f7ff fbc5 	bl	80028c8 <HAL_I2C_MasterRxCpltCallback>
 800313e:	e45e      	b.n	80029fe <HAL_I2C_EV_IRQHandler+0x52>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003140:	2a21      	cmp	r2, #33	; 0x21
 8003142:	f47f af36 	bne.w	8002fb2 <HAL_I2C_EV_IRQHandler+0x606>
 8003146:	e73a      	b.n	8002fbe <HAL_I2C_EV_IRQHandler+0x612>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003148:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800314a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800314c:	4798      	blx	r3
 800314e:	e502      	b.n	8002b56 <HAL_I2C_EV_IRQHandler+0x1aa>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003150:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003152:	4b9f      	ldr	r3, [pc, #636]	; (80033d0 <HAL_I2C_EV_IRQHandler+0xa24>)
 8003154:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003156:	f7fe fd49 	bl	8001bec <HAL_DMA_Abort_IT>
 800315a:	2800      	cmp	r0, #0
 800315c:	f43f aebc 	beq.w	8002ed8 <HAL_I2C_EV_IRQHandler+0x52c>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003160:	6823      	ldr	r3, [r4, #0]
 8003162:	695a      	ldr	r2, [r3, #20]
 8003164:	0650      	lsls	r0, r2, #25
 8003166:	d506      	bpl.n	8003176 <HAL_I2C_EV_IRQHandler+0x7ca>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003168:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 800316e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003170:	6823      	ldr	r3, [r4, #0]
 8003172:	3201      	adds	r2, #1
 8003174:	6262      	str	r2, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8003176:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003178:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 800317a:	f022 0201 	bic.w	r2, r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 800317e:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8003180:	601a      	str	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003182:	6d03      	ldr	r3, [r0, #80]	; 0x50
        hi2c->State = HAL_I2C_STATE_READY;
 8003184:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003188:	4798      	blx	r3
 800318a:	e6a5      	b.n	8002ed8 <HAL_I2C_EV_IRQHandler+0x52c>
    hi2c->State = HAL_I2C_STATE_READY;
 800318c:	2120      	movs	r1, #32
 800318e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003192:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	0651      	lsls	r1, r2, #25
 8003198:	d506      	bpl.n	80031a8 <HAL_I2C_EV_IRQHandler+0x7fc>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800319a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80031a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80031a2:	6823      	ldr	r3, [r4, #0]
 80031a4:	3201      	adds	r2, #1
 80031a6:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	f022 0201 	bic.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80031b0:	4620      	mov	r0, r4
 80031b2:	f7ff fb99 	bl	80028e8 <HAL_I2C_AbortCpltCallback>
 80031b6:	e68f      	b.n	8002ed8 <HAL_I2C_EV_IRQHandler+0x52c>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	e795      	b.n	80030ec <HAL_I2C_EV_IRQHandler+0x740>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80031c0:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 80031c4:	f000 80da 	beq.w	800337c <HAL_I2C_EV_IRQHandler+0x9d0>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80031c8:	2808      	cmp	r0, #8
 80031ca:	f000 80c7 	beq.w	800335c <HAL_I2C_EV_IRQHandler+0x9b0>
 80031ce:	2820      	cmp	r0, #32
 80031d0:	f000 80c4 	beq.w	800335c <HAL_I2C_EV_IRQHandler+0x9b0>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80031d4:	2d12      	cmp	r5, #18
 80031d6:	f000 80be 	beq.w	8003356 <HAL_I2C_EV_IRQHandler+0x9aa>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80031da:	2810      	cmp	r0, #16
 80031dc:	f240 80e2 	bls.w	80033a4 <HAL_I2C_EV_IRQHandler+0x9f8>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e6:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031e8:	2200      	movs	r2, #0
 80031ea:	9206      	str	r2, [sp, #24]
 80031ec:	695a      	ldr	r2, [r3, #20]
 80031ee:	9206      	str	r2, [sp, #24]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	9306      	str	r3, [sp, #24]
 80031f4:	9b06      	ldr	r3, [sp, #24]
 80031f6:	e63d      	b.n	8002e74 <HAL_I2C_EV_IRQHandler+0x4c8>
        __HAL_I2C_DISABLE(hi2c);
 80031f8:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80031fa:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 80031fc:	6813      	ldr	r3, [r2, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80031fe:	6d01      	ldr	r1, [r0, #80]	; 0x50
        __HAL_I2C_DISABLE(hi2c);
 8003200:	f023 0301 	bic.w	r3, r3, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8003204:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE(hi2c);
 8003206:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003208:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800320c:	4788      	blx	r1
 800320e:	e663      	b.n	8002ed8 <HAL_I2C_EV_IRQHandler+0x52c>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003210:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003212:	2902      	cmp	r1, #2
 8003214:	f43f abf3 	beq.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
 8003218:	2a01      	cmp	r2, #1
 800321a:	f63f abf0 	bhi.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800321e:	681a      	ldr	r2, [r3, #0]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003220:	6a61      	ldr	r1, [r4, #36]	; 0x24
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003226:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800322e:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	700b      	strb	r3, [r1, #0]
      hi2c->XferCount--;
 8003234:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003236:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003238:	3b01      	subs	r3, #1
 800323a:	b29b      	uxth	r3, r3
      hi2c->State = HAL_I2C_STATE_READY;
 800323c:	2120      	movs	r1, #32
      hi2c->XferCount--;
 800323e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8003240:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003244:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
      hi2c->pBuffPtr++;
 8003248:	3201      	adds	r2, #1
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800324a:	2b40      	cmp	r3, #64	; 0x40
      hi2c->pBuffPtr++;
 800324c:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800324e:	f47f af6e 	bne.w	800312e <HAL_I2C_EV_IRQHandler+0x782>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003252:	2300      	movs	r3, #0
 8003254:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003258:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 800325a:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800325c:	f7ff fb40 	bl	80028e0 <HAL_I2C_MemRxCpltCallback>
 8003260:	f7ff bbcd 	b.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003264:	9101      	str	r1, [sp, #4]
 8003266:	695a      	ldr	r2, [r3, #20]
 8003268:	9201      	str	r2, [sp, #4]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	9301      	str	r3, [sp, #4]
 800326e:	9b01      	ldr	r3, [sp, #4]
 8003270:	f7ff bbc5 	b.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003274:	9202      	str	r2, [sp, #8]
 8003276:	695a      	ldr	r2, [r3, #20]
 8003278:	9202      	str	r2, [sp, #8]
 800327a:	699a      	ldr	r2, [r3, #24]
 800327c:	9202      	str	r2, [sp, #8]
 800327e:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003286:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003288:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800328a:	3301      	adds	r3, #1
 800328c:	6523      	str	r3, [r4, #80]	; 0x50
 800328e:	f7ff bbb6 	b.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003292:	f7ff fb23 	bl	80028dc <HAL_I2C_MemTxCpltCallback>
 8003296:	f7ff bbb2 	b.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800329a:	2d08      	cmp	r5, #8
 800329c:	f43f aea7 	beq.w	8002fee <HAL_I2C_EV_IRQHandler+0x642>
 80032a0:	2d20      	cmp	r5, #32
 80032a2:	f43f aea4 	beq.w	8002fee <HAL_I2C_EV_IRQHandler+0x642>
 80032a6:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 80032aa:	f43f aea0 	beq.w	8002fee <HAL_I2C_EV_IRQHandler+0x642>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032ae:	685a      	ldr	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80032b0:	2611      	movs	r6, #17
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b6:	2500      	movs	r5, #0
      hi2c->State = HAL_I2C_STATE_READY;
 80032b8:	2120      	movs	r1, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032ba:	605a      	str	r2, [r3, #4]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80032bc:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80032be:	6326      	str	r6, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c0:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80032c4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80032c8:	f7ff fafc 	bl	80028c4 <HAL_I2C_MasterTxCpltCallback>
 80032cc:	f7ff bb97 	b.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80032d0:	2810      	cmp	r0, #16
 80032d2:	d920      	bls.n	8003316 <HAL_I2C_EV_IRQHandler+0x96a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032da:	601a      	str	r2, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032e2:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	0512      	lsls	r2, r2, #20
 80032e8:	d50d      	bpl.n	8003306 <HAL_I2C_EV_IRQHandler+0x95a>
 80032ea:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 80032ee:	d006      	beq.n	80032fe <HAL_I2C_EV_IRQHandler+0x952>
 80032f0:	3801      	subs	r0, #1
 80032f2:	281f      	cmp	r0, #31
 80032f4:	d807      	bhi.n	8003306 <HAL_I2C_EV_IRQHandler+0x95a>
 80032f6:	4a37      	ldr	r2, [pc, #220]	; (80033d4 <HAL_I2C_EV_IRQHandler+0xa28>)
 80032f8:	40c2      	lsrs	r2, r0
 80032fa:	07d6      	lsls	r6, r2, #31
 80032fc:	d503      	bpl.n	8003306 <HAL_I2C_EV_IRQHandler+0x95a>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003304:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003306:	2200      	movs	r2, #0
 8003308:	9208      	str	r2, [sp, #32]
 800330a:	695a      	ldr	r2, [r3, #20]
 800330c:	9208      	str	r2, [sp, #32]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	9308      	str	r3, [sp, #32]
 8003312:	9b08      	ldr	r3, [sp, #32]
 8003314:	e5ae      	b.n	8002e74 <HAL_I2C_EV_IRQHandler+0x4c8>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003316:	4a30      	ldr	r2, [pc, #192]	; (80033d8 <HAL_I2C_EV_IRQHandler+0xa2c>)
 8003318:	40c2      	lsrs	r2, r0
 800331a:	07d1      	lsls	r1, r2, #31
 800331c:	d5da      	bpl.n	80032d4 <HAL_I2C_EV_IRQHandler+0x928>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	e7dd      	b.n	80032e4 <HAL_I2C_EV_IRQHandler+0x938>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003328:	6859      	ldr	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800332a:	2611      	movs	r6, #17
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800332c:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
        hi2c->State = HAL_I2C_STATE_READY;
 8003330:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003332:	6059      	str	r1, [r3, #4]
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003334:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003336:	6326      	str	r6, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003338:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800333c:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
 8003340:	e66a      	b.n	8003018 <HAL_I2C_EV_IRQHandler+0x66c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003348:	605a      	str	r2, [r3, #4]
 800334a:	f7ff bb58 	b.w	80029fe <HAL_I2C_EV_IRQHandler+0x52>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800334e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	e6ca      	b.n	80030ec <HAL_I2C_EV_IRQHandler+0x740>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003356:	2801      	cmp	r0, #1
 8003358:	f43f af42 	beq.w	80031e0 <HAL_I2C_EV_IRQHandler+0x834>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800335c:	681a      	ldr	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800335e:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003364:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003366:	9107      	str	r1, [sp, #28]
 8003368:	695a      	ldr	r2, [r3, #20]
 800336a:	9207      	str	r2, [sp, #28]
 800336c:	699a      	ldr	r2, [r3, #24]
 800336e:	9207      	str	r2, [sp, #28]
 8003370:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	e57b      	b.n	8002e74 <HAL_I2C_EV_IRQHandler+0x4c8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003382:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 800338a:	d016      	beq.n	80033ba <HAL_I2C_EV_IRQHandler+0xa0e>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800338c:	681a      	ldr	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800338e:	2100      	movs	r1, #0
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003394:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003396:	9104      	str	r1, [sp, #16]
 8003398:	695a      	ldr	r2, [r3, #20]
 800339a:	9204      	str	r2, [sp, #16]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	9304      	str	r3, [sp, #16]
 80033a0:	9b04      	ldr	r3, [sp, #16]
 80033a2:	e567      	b.n	8002e74 <HAL_I2C_EV_IRQHandler+0x4c8>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80033a4:	4a0c      	ldr	r2, [pc, #48]	; (80033d8 <HAL_I2C_EV_IRQHandler+0xa2c>)
 80033a6:	fa22 f000 	lsr.w	r0, r2, r0
 80033aa:	07c0      	lsls	r0, r0, #31
 80033ac:	f57f af18 	bpl.w	80031e0 <HAL_I2C_EV_IRQHandler+0x834>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	e716      	b.n	80031e8 <HAL_I2C_EV_IRQHandler+0x83c>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ba:	9205      	str	r2, [sp, #20]
 80033bc:	695a      	ldr	r2, [r3, #20]
 80033be:	9205      	str	r2, [sp, #20]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	9205      	str	r2, [sp, #20]
 80033c4:	9a05      	ldr	r2, [sp, #20]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	e551      	b.n	8002e74 <HAL_I2C_EV_IRQHandler+0x4c8>
 80033d0:	080028ed 	.word	0x080028ed
 80033d4:	80008081 	.word	0x80008081
 80033d8:	00010014 	.word	0x00010014

080033dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033de:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033e0:	2800      	cmp	r0, #0
 80033e2:	f000 8086 	beq.w	80034f2 <HAL_PCD_Init+0x116>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033e6:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 80033ea:	6805      	ldr	r5, [r0, #0]
 80033ec:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d077      	beq.n	80034e6 <HAL_PCD_Init+0x10a>
 80033f6:	4628      	mov	r0, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033f8:	2303      	movs	r3, #3
 80033fa:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80033fe:	6beb      	ldr	r3, [r5, #60]	; 0x3c

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003400:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003402:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 8003406:	bf08      	it	eq
 8003408:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 800340a:	f001 fa89 	bl	8004920 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800340e:	f855 eb10 	ldr.w	lr, [r5], #16
 8003412:	462f      	mov	r7, r5
 8003414:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003416:	466e      	mov	r6, sp
 8003418:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800341a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800341c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800341e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8003422:	e886 0003 	stmia.w	r6, {r0, r1}
 8003426:	1d26      	adds	r6, r4, #4
 8003428:	4670      	mov	r0, lr
 800342a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800342e:	f001 f98b 	bl	8004748 <USB_CoreInit>
 8003432:	4607      	mov	r7, r0
 8003434:	b130      	cbz	r0, 8003444 <HAL_PCD_Init+0x68>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8003436:	2501      	movs	r5, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003438:	2302      	movs	r3, #2
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800343a:	4628      	mov	r0, r5
    hpcd->State = HAL_PCD_STATE_ERROR;
 800343c:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
}
 8003440:	b00b      	add	sp, #44	; 0x2c
 8003442:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003444:	4601      	mov	r1, r0
 8003446:	6820      	ldr	r0, [r4, #0]
 8003448:	f001 fa72 	bl	8004930 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800344c:	6860      	ldr	r0, [r4, #4]
 800344e:	b360      	cbz	r0, 80034aa <HAL_PCD_Init+0xce>
 8003450:	4639      	mov	r1, r7
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003452:	463a      	mov	r2, r7
    hpcd->IN_ep[i].is_in = 1U;
 8003454:	f04f 0e01 	mov.w	lr, #1
 8003458:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800345c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003460:	1c4f      	adds	r7, r1, #1
    hpcd->IN_ep[i].num = i;
 8003462:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003466:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800346a:	b2f9      	uxtb	r1, r7
 800346c:	4281      	cmp	r1, r0
    hpcd->IN_ep[i].is_in = 1U;
 800346e:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003472:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8003476:	645a      	str	r2, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003478:	649a      	str	r2, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 800347a:	651a      	str	r2, [r3, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800347c:	d3ec      	bcc.n	8003458 <HAL_PCD_Init+0x7c>
 800347e:	2200      	movs	r2, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8003480:	4611      	mov	r1, r2
 8003482:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8003486:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800348a:	1c57      	adds	r7, r2, #1
    hpcd->OUT_ep[i].num = i;
 800348c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003490:	b2fa      	uxtb	r2, r7
 8003492:	4282      	cmp	r2, r0
    hpcd->OUT_ep[i].is_in = 0U;
 8003494:	f883 11fd 	strb.w	r1, [r3, #509]	; 0x1fd
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003498:	f883 11ff 	strb.w	r1, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 800349c:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034a0:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034a4:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034a8:	d3eb      	bcc.n	8003482 <HAL_PCD_Init+0xa6>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034ac:	466f      	mov	r7, sp
 80034ae:	f8d4 e000 	ldr.w	lr, [r4]
 80034b2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80034b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034b6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80034b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80034bc:	e887 0003 	stmia.w	r7, {r0, r1}
 80034c0:	4670      	mov	r0, lr
 80034c2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80034c6:	f001 fa4f 	bl	8004968 <USB_DevInit>
 80034ca:	4605      	mov	r5, r0
 80034cc:	2800      	cmp	r0, #0
 80034ce:	d1b2      	bne.n	8003436 <HAL_PCD_Init+0x5a>
  hpcd->State = HAL_PCD_STATE_READY;
 80034d0:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80034d2:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  (void)USB_DevDisconnect(hpcd->Instance);
 80034d6:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 80034d8:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 80034dc:	f001 fe22 	bl	8005124 <USB_DevDisconnect>
}
 80034e0:	4628      	mov	r0, r5
 80034e2:	b00b      	add	sp, #44	; 0x2c
 80034e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80034e6:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 80034ea:	f004 fa11 	bl	8007910 <HAL_PCD_MspInit>
 80034ee:	6820      	ldr	r0, [r4, #0]
 80034f0:	e782      	b.n	80033f8 <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 80034f2:	2501      	movs	r5, #1
}
 80034f4:	4628      	mov	r0, r5
 80034f6:	b00b      	add	sp, #44	; 0x2c
 80034f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034fa:	bf00      	nop

080034fc <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80034fc:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8003500:	2b01      	cmp	r3, #1
 8003502:	d012      	beq.n	800352a <HAL_PCD_Start+0x2e>
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003504:	6a82      	ldr	r2, [r0, #40]	; 0x28
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003506:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hpcd);
 8003508:	2101      	movs	r1, #1
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800350a:	428a      	cmp	r2, r1
{
 800350c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800350e:	f880 13bc 	strb.w	r1, [r0, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003512:	d00c      	beq.n	800352e <HAL_PCD_Start+0x32>
 8003514:	4604      	mov	r4, r0
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003516:	4618      	mov	r0, r3
 8003518:	f001 fdf8 	bl	800510c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800351c:	6820      	ldr	r0, [r4, #0]
 800351e:	f001 f9f7 	bl	8004910 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003522:	2000      	movs	r0, #0
 8003524:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003528:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800352a:	2002      	movs	r0, #2
 800352c:	4770      	bx	lr
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800352e:	6982      	ldr	r2, [r0, #24]
 8003530:	428a      	cmp	r2, r1
 8003532:	d0ef      	beq.n	8003514 <HAL_PCD_Start+0x18>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003536:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800353a:	639a      	str	r2, [r3, #56]	; 0x38
 800353c:	e7ea      	b.n	8003514 <HAL_PCD_Start+0x18>
 800353e:	bf00      	nop

08003540 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003544:	6807      	ldr	r7, [r0, #0]
{
 8003546:	b089      	sub	sp, #36	; 0x24
 8003548:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800354a:	4638      	mov	r0, r7
 800354c:	f001 fe28 	bl	80051a0 <USB_GetMode>
 8003550:	b110      	cbz	r0, 8003558 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 8003552:	b009      	add	sp, #36	; 0x24
 8003554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003558:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800355a:	6820      	ldr	r0, [r4, #0]
 800355c:	f001 fdee 	bl	800513c <USB_ReadInterrupts>
 8003560:	2800      	cmp	r0, #0
 8003562:	d0f6      	beq.n	8003552 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003564:	6820      	ldr	r0, [r4, #0]
 8003566:	f001 fde9 	bl	800513c <USB_ReadInterrupts>
 800356a:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800356e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003570:	d003      	beq.n	800357a <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003572:	6943      	ldr	r3, [r0, #20]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800357a:	f001 fddf 	bl	800513c <USB_ReadInterrupts>
 800357e:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003582:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003584:	f040 813f 	bne.w	8003806 <HAL_PCD_IRQHandler+0x2c6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003588:	f001 fdd8 	bl	800513c <USB_ReadInterrupts>
 800358c:	0342      	lsls	r2, r0, #13
 800358e:	f100 80d4 	bmi.w	800373a <HAL_PCD_IRQHandler+0x1fa>
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	9303      	str	r3, [sp, #12]
 8003596:	4618      	mov	r0, r3
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003598:	f001 fdd0 	bl	800513c <USB_ReadInterrupts>
 800359c:	2800      	cmp	r0, #0
 800359e:	f2c0 818d 	blt.w	80038bc <HAL_PCD_IRQHandler+0x37c>
 80035a2:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80035a4:	f001 fdca 	bl	800513c <USB_ReadInterrupts>
 80035a8:	0501      	lsls	r1, r0, #20
 80035aa:	d448      	bmi.n	800363e <HAL_PCD_IRQHandler+0xfe>
 80035ac:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80035ae:	f001 fdc5 	bl	800513c <USB_ReadInterrupts>
 80035b2:	04c3      	lsls	r3, r0, #19
 80035b4:	d478      	bmi.n	80036a8 <HAL_PCD_IRQHandler+0x168>
 80035b6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80035b8:	f001 fdc0 	bl	800513c <USB_ReadInterrupts>
 80035bc:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 80035c0:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80035c2:	d15a      	bne.n	800367a <HAL_PCD_IRQHandler+0x13a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80035c4:	f001 fdba 	bl	800513c <USB_ReadInterrupts>
 80035c8:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035cc:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80035ce:	d011      	beq.n	80035f4 <HAL_PCD_IRQHandler+0xb4>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035d0:	6983      	ldr	r3, [r0, #24]
 80035d2:	f023 0310 	bic.w	r3, r3, #16
 80035d6:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 80035d8:	6a3d      	ldr	r5, [r7, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80035da:	f3c5 4343 	ubfx	r3, r5, #17, #4
 80035de:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80035e0:	f005 060f 	and.w	r6, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80035e4:	f000 822e 	beq.w	8003a44 <HAL_PCD_IRQHandler+0x504>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80035e8:	2b06      	cmp	r3, #6
 80035ea:	d033      	beq.n	8003654 <HAL_PCD_IRQHandler+0x114>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035ec:	6983      	ldr	r3, [r0, #24]
 80035ee:	f043 0310 	orr.w	r3, r3, #16
 80035f2:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80035f4:	f001 fda2 	bl	800513c <USB_ReadInterrupts>
 80035f8:	0707      	lsls	r7, r0, #28
 80035fa:	f100 814c 	bmi.w	8003896 <HAL_PCD_IRQHandler+0x356>
 80035fe:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003600:	f001 fd9c 	bl	800513c <USB_ReadInterrupts>
 8003604:	02c6      	lsls	r6, r0, #11
 8003606:	f100 813c 	bmi.w	8003882 <HAL_PCD_IRQHandler+0x342>
 800360a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800360c:	f001 fd96 	bl	800513c <USB_ReadInterrupts>
 8003610:	0285      	lsls	r5, r0, #10
 8003612:	f100 8149 	bmi.w	80038a8 <HAL_PCD_IRQHandler+0x368>
 8003616:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003618:	f001 fd90 	bl	800513c <USB_ReadInterrupts>
 800361c:	0040      	lsls	r0, r0, #1
 800361e:	f100 80e9 	bmi.w	80037f4 <HAL_PCD_IRQHandler+0x2b4>
 8003622:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003624:	f001 fd8a 	bl	800513c <USB_ReadInterrupts>
 8003628:	0741      	lsls	r1, r0, #29
 800362a:	d592      	bpl.n	8003552 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 800362c:	6823      	ldr	r3, [r4, #0]
 800362e:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003630:	076a      	lsls	r2, r5, #29
 8003632:	f100 81f3 	bmi.w	8003a1c <HAL_PCD_IRQHandler+0x4dc>
      hpcd->Instance->GOTGINT |= temp;
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	4315      	orrs	r5, r2
 800363a:	605d      	str	r5, [r3, #4]
 800363c:	e789      	b.n	8003552 <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800363e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8003642:	07da      	lsls	r2, r3, #31
 8003644:	f100 81ef 	bmi.w	8003a26 <HAL_PCD_IRQHandler+0x4e6>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003648:	6820      	ldr	r0, [r4, #0]
 800364a:	6943      	ldr	r3, [r0, #20]
 800364c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003650:	6143      	str	r3, [r0, #20]
 8003652:	e7ac      	b.n	80035ae <HAL_PCD_IRQHandler+0x6e>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003654:	2208      	movs	r2, #8
 8003656:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800365a:	4638      	mov	r0, r7
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800365c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003660:	f001 fcd6 	bl	8005010 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003664:	eb04 0286 	add.w	r2, r4, r6, lsl #2
 8003668:	f3c5 130a 	ubfx	r3, r5, #4, #11
 800366c:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8003670:	6820      	ldr	r0, [r4, #0]
 8003672:	440b      	add	r3, r1
 8003674:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8003678:	e7b8      	b.n	80035ec <HAL_PCD_IRQHandler+0xac>
      (void)USB_ActivateSetup(hpcd->Instance);
 800367a:	f001 fd95 	bl	80051a8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800367e:	6820      	ldr	r0, [r4, #0]
 8003680:	f001 fa84 	bl	8004b8c <USB_GetDevSpeed>
 8003684:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003686:	6825      	ldr	r5, [r4, #0]
 8003688:	f000 febc 	bl	8004404 <HAL_RCC_GetHCLKFreq>
 800368c:	7b22      	ldrb	r2, [r4, #12]
 800368e:	4601      	mov	r1, r0
 8003690:	4628      	mov	r0, r5
 8003692:	f001 f8c1 	bl	8004818 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8003696:	4620      	mov	r0, r4
 8003698:	f004 f9a2 	bl	80079e0 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800369c:	6820      	ldr	r0, [r4, #0]
 800369e:	6943      	ldr	r3, [r0, #20]
 80036a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036a4:	6143      	str	r3, [r0, #20]
 80036a6:	e78d      	b.n	80035c4 <HAL_PCD_IRQHandler+0x84>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036a8:	f507 6500 	add.w	r5, r7, #2048	; 0x800
 80036ac:	686b      	ldr	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80036ae:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036b0:	f023 0301 	bic.w	r3, r3, #1
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80036b4:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036b6:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80036b8:	f001 fa56 	bl	8004b68 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036bc:	f8d4 e004 	ldr.w	lr, [r4, #4]
 80036c0:	f1be 0f00 	cmp.w	lr, #0
 80036c4:	d015      	beq.n	80036f2 <HAL_PCD_IRQHandler+0x1b2>
 80036c6:	f507 6310 	add.w	r3, r7, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80036ca:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 80036ce:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80036d6:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80036d8:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80036dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036e0:	3601      	adds	r6, #1
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80036e2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036e6:	4576      	cmp	r6, lr
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80036e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80036ec:	f103 0320 	add.w	r3, r3, #32
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036f0:	d1ed      	bne.n	80036ce <HAL_PCD_IRQHandler+0x18e>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80036f2:	69eb      	ldr	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80036f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80036f6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80036fa:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80036fc:	2a00      	cmp	r2, #0
 80036fe:	f000 8196 	beq.w	8003a2e <HAL_PCD_IRQHandler+0x4ee>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003702:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8003706:	f043 030b 	orr.w	r3, r3, #11
 800370a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800370e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003710:	f043 030b 	orr.w	r3, r3, #11
 8003714:	646b      	str	r3, [r5, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003716:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800371a:	7c21      	ldrb	r1, [r4, #16]
 800371c:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800371e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003722:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003726:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800372a:	f001 fd59 	bl	80051e0 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800372e:	6820      	ldr	r0, [r4, #0]
 8003730:	6943      	ldr	r3, [r0, #20]
 8003732:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003736:	6143      	str	r3, [r0, #20]
 8003738:	e73e      	b.n	80035b8 <HAL_PCD_IRQHandler+0x78>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800373a:	6820      	ldr	r0, [r4, #0]
 800373c:	f001 fd0a 	bl	8005154 <USB_ReadDevAllInEpInterrupt>
 8003740:	6823      	ldr	r3, [r4, #0]
 8003742:	9303      	str	r3, [sp, #12]
      while (ep_intr != 0U)
 8003744:	4681      	mov	r9, r0
 8003746:	4618      	mov	r0, r3
 8003748:	f1b9 0f00 	cmp.w	r9, #0
 800374c:	f43f af24 	beq.w	8003598 <HAL_PCD_IRQHandler+0x58>
 8003750:	46a0      	mov	r8, r4
 8003752:	f507 6b10 	add.w	fp, r7, #2304	; 0x900
 8003756:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800375a:	9704      	str	r7, [sp, #16]
 800375c:	9605      	str	r6, [sp, #20]
 800375e:	e009      	b.n	8003774 <HAL_PCD_IRQHandler+0x234>
      while (ep_intr != 0U)
 8003760:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 8003764:	f10a 0a01 	add.w	sl, sl, #1
 8003768:	f108 081c 	add.w	r8, r8, #28
 800376c:	f10b 0b20 	add.w	fp, fp, #32
      while (ep_intr != 0U)
 8003770:	f000 80b8 	beq.w	80038e4 <HAL_PCD_IRQHandler+0x3a4>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003774:	f019 0f01 	tst.w	r9, #1
 8003778:	d0f2      	beq.n	8003760 <HAL_PCD_IRQHandler+0x220>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800377a:	fa5f f68a 	uxtb.w	r6, sl
 800377e:	9803      	ldr	r0, [sp, #12]
 8003780:	4631      	mov	r1, r6
 8003782:	f001 fcf9 	bl	8005178 <USB_ReadDevInEPInterrupt>
 8003786:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003788:	07e8      	lsls	r0, r5, #31
 800378a:	d519      	bpl.n	80037c0 <HAL_PCD_IRQHandler+0x280>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800378c:	9b04      	ldr	r3, [sp, #16]
            if (hpcd->Init.dma_enable == 1U)
 800378e:	6920      	ldr	r0, [r4, #16]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003790:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003794:	2701      	movs	r7, #1
 8003796:	f00a 010f 	and.w	r1, sl, #15
 800379a:	fa07 f101 	lsl.w	r1, r7, r1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800379e:	ea22 0201 	bic.w	r2, r2, r1
            if (hpcd->Init.dma_enable == 1U)
 80037a2:	42b8      	cmp	r0, r7
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037a4:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80037a8:	f8cb 7008 	str.w	r7, [fp, #8]
            if (hpcd->Init.dma_enable == 1U)
 80037ac:	f000 8175 	beq.w	8003a9a <HAL_PCD_IRQHandler+0x55a>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80037b0:	4631      	mov	r1, r6
 80037b2:	4620      	mov	r0, r4
 80037b4:	f004 f906 	bl	80079c4 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 80037b8:	6921      	ldr	r1, [r4, #16]
 80037ba:	2901      	cmp	r1, #1
 80037bc:	f000 815f 	beq.w	8003a7e <HAL_PCD_IRQHandler+0x53e>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80037c0:	0729      	lsls	r1, r5, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80037c2:	bf44      	itt	mi
 80037c4:	2308      	movmi	r3, #8
 80037c6:	f8cb 3008 	strmi.w	r3, [fp, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80037ca:	06ea      	lsls	r2, r5, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80037cc:	bf44      	itt	mi
 80037ce:	2310      	movmi	r3, #16
 80037d0:	f8cb 3008 	strmi.w	r3, [fp, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80037d4:	066b      	lsls	r3, r5, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80037d6:	bf44      	itt	mi
 80037d8:	2340      	movmi	r3, #64	; 0x40
 80037da:	f8cb 3008 	strmi.w	r3, [fp, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80037de:	07af      	lsls	r7, r5, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80037e0:	bf44      	itt	mi
 80037e2:	2302      	movmi	r3, #2
 80037e4:	f8cb 3008 	strmi.w	r3, [fp, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80037e8:	0628      	lsls	r0, r5, #24
 80037ea:	f100 80a2 	bmi.w	8003932 <HAL_PCD_IRQHandler+0x3f2>
 80037ee:	6823      	ldr	r3, [r4, #0]
 80037f0:	9303      	str	r3, [sp, #12]
 80037f2:	e7b5      	b.n	8003760 <HAL_PCD_IRQHandler+0x220>
      HAL_PCD_ConnectCallback(hpcd);
 80037f4:	4620      	mov	r0, r4
 80037f6:	f004 f92d 	bl	8007a54 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80037fa:	6820      	ldr	r0, [r4, #0]
 80037fc:	6943      	ldr	r3, [r0, #20]
 80037fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003802:	6143      	str	r3, [r0, #20]
 8003804:	e70e      	b.n	8003624 <HAL_PCD_IRQHandler+0xe4>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003806:	f001 fc9d 	bl	8005144 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 800380a:	4605      	mov	r5, r0
 800380c:	6820      	ldr	r0, [r4, #0]
 800380e:	2d00      	cmp	r5, #0
 8003810:	f43f aeba 	beq.w	8003588 <HAL_PCD_IRQHandler+0x48>
 8003814:	f507 6830 	add.w	r8, r7, #2816	; 0xb00
 8003818:	46a2      	mov	sl, r4
 800381a:	f04f 0900 	mov.w	r9, #0
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800381e:	9603      	str	r6, [sp, #12]
 8003820:	e007      	b.n	8003832 <HAL_PCD_IRQHandler+0x2f2>
      while (ep_intr != 0U)
 8003822:	086d      	lsrs	r5, r5, #1
        epnum++;
 8003824:	f109 0901 	add.w	r9, r9, #1
 8003828:	f108 0820 	add.w	r8, r8, #32
 800382c:	f10a 0a1c 	add.w	sl, sl, #28
      while (ep_intr != 0U)
 8003830:	d05c      	beq.n	80038ec <HAL_PCD_IRQHandler+0x3ac>
        if ((ep_intr & 0x1U) != 0U)
 8003832:	07eb      	lsls	r3, r5, #31
 8003834:	d5f5      	bpl.n	8003822 <HAL_PCD_IRQHandler+0x2e2>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003836:	fa5f f689 	uxtb.w	r6, r9
 800383a:	4631      	mov	r1, r6
 800383c:	f001 fc92 	bl	8005164 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003840:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003844:	4683      	mov	fp, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003846:	d153      	bne.n	80038f0 <HAL_PCD_IRQHandler+0x3b0>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003848:	f01b 0f08 	tst.w	fp, #8
 800384c:	f040 80c7 	bne.w	80039de <HAL_PCD_IRQHandler+0x49e>
 8003850:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003852:	f01b 0f10 	tst.w	fp, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003856:	bf1c      	itt	ne
 8003858:	2310      	movne	r3, #16
 800385a:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800385e:	f01b 0f20 	tst.w	fp, #32
 8003862:	d006      	beq.n	8003872 <HAL_PCD_IRQHandler+0x332>
            if (hpcd->Init.dma_enable == 1U)
 8003864:	6921      	ldr	r1, [r4, #16]
 8003866:	2901      	cmp	r1, #1
 8003868:	f000 816a 	beq.w	8003b40 <HAL_PCD_IRQHandler+0x600>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800386c:	2320      	movs	r3, #32
 800386e:	f8c8 3008 	str.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003872:	f41b 5f00 	tst.w	fp, #8192	; 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003876:	bf1c      	itt	ne
 8003878:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 800387c:	f8c8 3008 	strne.w	r3, [r8, #8]
 8003880:	e7cf      	b.n	8003822 <HAL_PCD_IRQHandler+0x2e2>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003882:	4620      	mov	r0, r4
 8003884:	2100      	movs	r1, #0
 8003886:	f004 f8e1 	bl	8007a4c <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800388a:	6820      	ldr	r0, [r4, #0]
 800388c:	6943      	ldr	r3, [r0, #20]
 800388e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003892:	6143      	str	r3, [r0, #20]
 8003894:	e6ba      	b.n	800360c <HAL_PCD_IRQHandler+0xcc>
      HAL_PCD_SOFCallback(hpcd);
 8003896:	4620      	mov	r0, r4
 8003898:	f004 f89e 	bl	80079d8 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800389c:	6820      	ldr	r0, [r4, #0]
 800389e:	6943      	ldr	r3, [r0, #20]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	6143      	str	r3, [r0, #20]
 80038a6:	e6ab      	b.n	8003600 <HAL_PCD_IRQHandler+0xc0>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80038a8:	4620      	mov	r0, r4
 80038aa:	2100      	movs	r1, #0
 80038ac:	f004 f8ca 	bl	8007a44 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80038b0:	6820      	ldr	r0, [r4, #0]
 80038b2:	6943      	ldr	r3, [r0, #20]
 80038b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038b8:	6143      	str	r3, [r0, #20]
 80038ba:	e6ad      	b.n	8003618 <HAL_PCD_IRQHandler+0xd8>
      if (hpcd->LPM_State == LPM_L1)
 80038bc:	f894 13f4 	ldrb.w	r1, [r4, #1012]	; 0x3f4
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038c0:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 80038c4:	2901      	cmp	r1, #1
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038c6:	f022 0201 	bic.w	r2, r2, #1
 80038ca:	f8c7 2804 	str.w	r2, [r7, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 80038ce:	f000 8107 	beq.w	8003ae0 <HAL_PCD_IRQHandler+0x5a0>
        HAL_PCD_ResumeCallback(hpcd);
 80038d2:	4620      	mov	r0, r4
 80038d4:	f004 f8b2 	bl	8007a3c <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80038d8:	6820      	ldr	r0, [r4, #0]
 80038da:	6943      	ldr	r3, [r0, #20]
 80038dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038e0:	6143      	str	r3, [r0, #20]
 80038e2:	e65f      	b.n	80035a4 <HAL_PCD_IRQHandler+0x64>
 80038e4:	9f04      	ldr	r7, [sp, #16]
 80038e6:	9e05      	ldr	r6, [sp, #20]
 80038e8:	9803      	ldr	r0, [sp, #12]
 80038ea:	e655      	b.n	8003598 <HAL_PCD_IRQHandler+0x58>
 80038ec:	9e03      	ldr	r6, [sp, #12]
 80038ee:	e64b      	b.n	8003588 <HAL_PCD_IRQHandler+0x48>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038f0:	6820      	ldr	r0, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 80038f2:	f8d4 e010 	ldr.w	lr, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038f6:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80038fa:	2101      	movs	r1, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038fc:	eb03 1349 	add.w	r3, r3, r9, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003900:	f8c8 1008 	str.w	r1, [r8, #8]
  if (hpcd->Init.dma_enable == 1U)
 8003904:	458e      	cmp	lr, r1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003906:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003908:	f8d3 c008 	ldr.w	ip, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 800390c:	f000 80fe 	beq.w	8003b0c <HAL_PCD_IRQHandler+0x5cc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003910:	49af      	ldr	r1, [pc, #700]	; (8003bd0 <HAL_PCD_IRQHandler+0x690>)
 8003912:	428a      	cmp	r2, r1
 8003914:	d108      	bne.n	8003928 <HAL_PCD_IRQHandler+0x3e8>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003916:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 800391a:	f040 8144 	bne.w	8003ba6 <HAL_PCD_IRQHandler+0x666>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800391e:	f01c 0f20 	tst.w	ip, #32
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003922:	bf1c      	itt	ne
 8003924:	2120      	movne	r1, #32
 8003926:	6099      	strne	r1, [r3, #8]
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003928:	4631      	mov	r1, r6
 800392a:	4620      	mov	r0, r4
 800392c:	f004 f840 	bl	80079b0 <HAL_PCD_DataOutStageCallback>
 8003930:	e78a      	b.n	8003848 <HAL_PCD_IRQHandler+0x308>
  if (ep->xfer_count > ep->xfer_len)
 8003932:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8003936:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800393a:	6827      	ldr	r7, [r4, #0]
 800393c:	9703      	str	r7, [sp, #12]
  if (ep->xfer_count > ep->xfer_len)
 800393e:	428b      	cmp	r3, r1
 8003940:	f63f af0e 	bhi.w	8003760 <HAL_PCD_IRQHandler+0x220>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003944:	f507 6210 	add.w	r2, r7, #2304	; 0x900
 8003948:	eb02 124a 	add.w	r2, r2, sl, lsl #5
 800394c:	4610      	mov	r0, r2
  if (len > ep->maxpacket)
 800394e:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003952:	9006      	str	r0, [sp, #24]
  len = ep->xfer_len - ep->xfer_count;
 8003954:	1acd      	subs	r5, r1, r3
  len32b = (len + 3U) / 4U;
 8003956:	4295      	cmp	r5, r2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003958:	6980      	ldr	r0, [r0, #24]
  len32b = (len + 3U) / 4U;
 800395a:	46ae      	mov	lr, r5
 800395c:	bf28      	it	cs
 800395e:	4696      	movcs	lr, r2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003960:	b280      	uxth	r0, r0
  len32b = (len + 3U) / 4U;
 8003962:	f10e 0e03 	add.w	lr, lr, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003966:	ebb0 0f9e 	cmp.w	r0, lr, lsr #2
 800396a:	d334      	bcc.n	80039d6 <HAL_PCD_IRQHandler+0x496>
 800396c:	428b      	cmp	r3, r1
 800396e:	f080 809f 	bcs.w	8003ab0 <HAL_PCD_IRQHandler+0x570>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003972:	2900      	cmp	r1, #0
 8003974:	f000 809c 	beq.w	8003ab0 <HAL_PCD_IRQHandler+0x570>
 8003978:	f8cd a01c 	str.w	sl, [sp, #28]
 800397c:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
 8003980:	f8dd a018 	ldr.w	sl, [sp, #24]
 8003984:	e007      	b.n	8003996 <HAL_PCD_IRQHandler+0x456>
 8003986:	f8d8 5050 	ldr.w	r5, [r8, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800398a:	429d      	cmp	r5, r3
 800398c:	f240 808d 	bls.w	8003aaa <HAL_PCD_IRQHandler+0x56a>
 8003990:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 8003994:	1aed      	subs	r5, r5, r3
 8003996:	4295      	cmp	r5, r2
 8003998:	bf28      	it	cs
 800399a:	4615      	movcs	r5, r2
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800399c:	7c23      	ldrb	r3, [r4, #16]
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	4632      	mov	r2, r6
 80039a2:	b2ab      	uxth	r3, r5
 80039a4:	4638      	mov	r0, r7
 80039a6:	f001 fb1d 	bl	8004fe4 <USB_WritePacket>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039aa:	f8da 2018 	ldr.w	r2, [sl, #24]
    ep->xfer_buff  += len;
 80039ae:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
    ep->xfer_count += len;
 80039b2:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    ep->xfer_buff  += len;
 80039b6:	4429      	add	r1, r5
    ep->xfer_count += len;
 80039b8:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039ba:	b292      	uxth	r2, r2
    len32b = (len + 3U) / 4U;
 80039bc:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039be:	ebb2 0f95 	cmp.w	r2, r5, lsr #2
    ep->xfer_buff  += len;
 80039c2:	f8c8 1048 	str.w	r1, [r8, #72]	; 0x48
    ep->xfer_count += len;
 80039c6:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039ca:	d2dc      	bcs.n	8003986 <HAL_PCD_IRQHandler+0x446>
 80039cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80039d0:	6827      	ldr	r7, [r4, #0]
 80039d2:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
  if (ep->xfer_len <= ep->xfer_count)
 80039d6:	4299      	cmp	r1, r3
 80039d8:	d96a      	bls.n	8003ab0 <HAL_PCD_IRQHandler+0x570>
 80039da:	9703      	str	r7, [sp, #12]
 80039dc:	e6c0      	b.n	8003760 <HAL_PCD_IRQHandler+0x220>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039de:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 80039e0:	6921      	ldr	r1, [r4, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e8:	eb03 1349 	add.w	r3, r3, r9, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 80039ec:	2901      	cmp	r1, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039ee:	6898      	ldr	r0, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 80039f0:	f000 8085 	beq.w	8003afe <HAL_PCD_IRQHandler+0x5be>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80039f4:	4976      	ldr	r1, [pc, #472]	; (8003bd0 <HAL_PCD_IRQHandler+0x690>)
 80039f6:	428a      	cmp	r2, r1
 80039f8:	d069      	beq.n	8003ace <HAL_PCD_IRQHandler+0x58e>

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80039fa:	4620      	mov	r0, r4
 80039fc:	9204      	str	r2, [sp, #16]
 80039fe:	f003 ffd1 	bl	80079a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a02:	4b74      	ldr	r3, [pc, #464]	; (8003bd4 <HAL_PCD_IRQHandler+0x694>)
 8003a04:	9a04      	ldr	r2, [sp, #16]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d903      	bls.n	8003a12 <HAL_PCD_IRQHandler+0x4d2>
 8003a0a:	6921      	ldr	r1, [r4, #16]
 8003a0c:	2901      	cmp	r1, #1
 8003a0e:	f000 80d4 	beq.w	8003bba <HAL_PCD_IRQHandler+0x67a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a12:	2308      	movs	r3, #8
 8003a14:	6820      	ldr	r0, [r4, #0]
 8003a16:	f8c8 3008 	str.w	r3, [r8, #8]
 8003a1a:	e71a      	b.n	8003852 <HAL_PCD_IRQHandler+0x312>
        HAL_PCD_DisconnectCallback(hpcd);
 8003a1c:	4620      	mov	r0, r4
 8003a1e:	f004 f81d 	bl	8007a5c <HAL_PCD_DisconnectCallback>
 8003a22:	6823      	ldr	r3, [r4, #0]
 8003a24:	e607      	b.n	8003636 <HAL_PCD_IRQHandler+0xf6>
        HAL_PCD_SuspendCallback(hpcd);
 8003a26:	4620      	mov	r0, r4
 8003a28:	f003 fff0 	bl	8007a0c <HAL_PCD_SuspendCallback>
 8003a2c:	e60c      	b.n	8003648 <HAL_PCD_IRQHandler+0x108>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a2e:	696b      	ldr	r3, [r5, #20]
 8003a30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a34:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003a38:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a3a:	692b      	ldr	r3, [r5, #16]
 8003a3c:	f043 030b 	orr.w	r3, r3, #11
 8003a40:	612b      	str	r3, [r5, #16]
 8003a42:	e668      	b.n	8003716 <HAL_PCD_IRQHandler+0x1d6>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003a44:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003a48:	421d      	tst	r5, r3
 8003a4a:	f43f adcf 	beq.w	80035ec <HAL_PCD_IRQHandler+0xac>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a4e:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8003a52:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8003a56:	f3c5 150a 	ubfx	r5, r5, #4, #11
 8003a5a:	462a      	mov	r2, r5
 8003a5c:	4638      	mov	r0, r7
 8003a5e:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 8003a62:	f001 fad5 	bl	8005010 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a66:	f8d6 2208 	ldr.w	r2, [r6, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a6a:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 8003a6e:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a70:	442a      	add	r2, r5
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a72:	442b      	add	r3, r5
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a74:	f8c6 2208 	str.w	r2, [r6, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a78:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
 8003a7c:	e5b6      	b.n	80035ec <HAL_PCD_IRQHandler+0xac>
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a7e:	f1ba 0f00 	cmp.w	sl, #0
 8003a82:	f47f ae9d 	bne.w	80037c0 <HAL_PCD_IRQHandler+0x280>
 8003a86:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f47f ae99 	bne.w	80037c0 <HAL_PCD_IRQHandler+0x280>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a8e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8003a92:	6820      	ldr	r0, [r4, #0]
 8003a94:	f001 fba4 	bl	80051e0 <USB_EP0_OutStart>
 8003a98:	e692      	b.n	80037c0 <HAL_PCD_IRQHandler+0x280>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a9a:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8003a9e:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
 8003aa8:	e682      	b.n	80037b0 <HAL_PCD_IRQHandler+0x270>
 8003aaa:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8003aae:	6827      	ldr	r7, [r4, #0]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ab0:	9b03      	ldr	r3, [sp, #12]
 8003ab2:	9703      	str	r7, [sp, #12]
 8003ab4:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ab8:	f00a 020f 	and.w	r2, sl, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003abc:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ac0:	2001      	movs	r0, #1
 8003ac2:	fa00 f202 	lsl.w	r2, r0, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ac6:	ea23 0302 	bic.w	r3, r3, r2
 8003aca:	634b      	str	r3, [r1, #52]	; 0x34
 8003acc:	e648      	b.n	8003760 <HAL_PCD_IRQHandler+0x220>
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003ace:	0406      	lsls	r6, r0, #16
 8003ad0:	d502      	bpl.n	8003ad8 <HAL_PCD_IRQHandler+0x598>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ad2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003ad6:	609a      	str	r2, [r3, #8]
  HAL_PCD_SetupStageCallback(hpcd);
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f003 ff63 	bl	80079a4 <HAL_PCD_SetupStageCallback>
 8003ade:	e794      	b.n	8003a0a <HAL_PCD_IRQHandler+0x4ca>
        hpcd->LPM_State = LPM_L0;
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ae6:	4620      	mov	r0, r4
 8003ae8:	f000 f9dc 	bl	8003ea4 <HAL_PCDEx_LPM_Callback>
 8003aec:	e6f4      	b.n	80038d8 <HAL_PCD_IRQHandler+0x398>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003aee:	2220      	movs	r2, #32
 8003af0:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003af2:	f01b 0f08 	tst.w	fp, #8
 8003af6:	f43f aeac 	beq.w	8003852 <HAL_PCD_IRQHandler+0x312>
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003afa:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003afc:	6898      	ldr	r0, [r3, #8]
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003afe:	4935      	ldr	r1, [pc, #212]	; (8003bd4 <HAL_PCD_IRQHandler+0x694>)
 8003b00:	428a      	cmp	r2, r1
 8003b02:	d8e4      	bhi.n	8003ace <HAL_PCD_IRQHandler+0x58e>
  HAL_PCD_SetupStageCallback(hpcd);
 8003b04:	4620      	mov	r0, r4
 8003b06:	f003 ff4d 	bl	80079a4 <HAL_PCD_SetupStageCallback>
 8003b0a:	e782      	b.n	8003a12 <HAL_PCD_IRQHandler+0x4d2>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003b0c:	f01c 0f08 	tst.w	ip, #8
 8003b10:	d01c      	beq.n	8003b4c <HAL_PCD_IRQHandler+0x60c>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b12:	4930      	ldr	r1, [pc, #192]	; (8003bd4 <HAL_PCD_IRQHandler+0x694>)
 8003b14:	428a      	cmp	r2, r1
 8003b16:	d905      	bls.n	8003b24 <HAL_PCD_IRQHandler+0x5e4>
 8003b18:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b1c:	bf1c      	itt	ne
 8003b1e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
 8003b22:	609a      	strne	r2, [r3, #8]
      HAL_PCD_SetupStageCallback(hpcd);
 8003b24:	4620      	mov	r0, r4
 8003b26:	9304      	str	r3, [sp, #16]
 8003b28:	f003 ff3c 	bl	80079a4 <HAL_PCD_SetupStageCallback>
      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b2c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8003b30:	2101      	movs	r1, #1
 8003b32:	6820      	ldr	r0, [r4, #0]
 8003b34:	f001 fb54 	bl	80051e0 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b38:	9b04      	ldr	r3, [sp, #16]
 8003b3a:	2208      	movs	r2, #8
 8003b3c:	609a      	str	r2, [r3, #8]
 8003b3e:	e683      	b.n	8003848 <HAL_PCD_IRQHandler+0x308>
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b40:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8003b44:	f001 fb4c 	bl	80051e0 <USB_EP0_OutStart>
 8003b48:	6820      	ldr	r0, [r4, #0]
 8003b4a:	e68f      	b.n	800386c <HAL_PCD_IRQHandler+0x32c>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003b4c:	f01c 0f20 	tst.w	ip, #32
 8003b50:	d1cd      	bne.n	8003aee <HAL_PCD_IRQHandler+0x5ae>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003b52:	f01c 0f28 	tst.w	ip, #40	; 0x28
 8003b56:	d1cc      	bne.n	8003af2 <HAL_PCD_IRQHandler+0x5b2>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b58:	491e      	ldr	r1, [pc, #120]	; (8003bd4 <HAL_PCD_IRQHandler+0x694>)
 8003b5a:	428a      	cmp	r2, r1
 8003b5c:	d902      	bls.n	8003b64 <HAL_PCD_IRQHandler+0x624>
 8003b5e:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 8003b62:	d130      	bne.n	8003bc6 <HAL_PCD_IRQHandler+0x686>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b64:	691b      	ldr	r3, [r3, #16]
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003b66:	f8da 1208 	ldr.w	r1, [sl, #520]	; 0x208
          hpcd->OUT_ep[epnum].maxpacket -
 8003b6a:	f8da 0204 	ldr.w	r0, [sl, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003b72:	1ac3      	subs	r3, r0, r3
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003b74:	4408      	add	r0, r1
 8003b76:	f8ca 0208 	str.w	r0, [sl, #520]	; 0x208
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b7a:	4631      	mov	r1, r6
        hpcd->OUT_ep[epnum].xfer_count =
 8003b7c:	f8ca 3214 	str.w	r3, [sl, #532]	; 0x214
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b80:	4620      	mov	r0, r4
 8003b82:	f003 ff15 	bl	80079b0 <HAL_PCD_DataOutStageCallback>
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b86:	f1b9 0f00 	cmp.w	r9, #0
 8003b8a:	f47f ae5d 	bne.w	8003848 <HAL_PCD_IRQHandler+0x308>
 8003b8e:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f47f ae58 	bne.w	8003848 <HAL_PCD_IRQHandler+0x308>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b98:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	6820      	ldr	r0, [r4, #0]
 8003ba0:	f001 fb1e 	bl	80051e0 <USB_EP0_OutStart>
 8003ba4:	e650      	b.n	8003848 <HAL_PCD_IRQHandler+0x308>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ba6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003baa:	f01b 0f08 	tst.w	fp, #8
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bae:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003bb0:	f43f ae4f 	beq.w	8003852 <HAL_PCD_IRQHandler+0x312>
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003bb4:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003bb6:	6898      	ldr	r0, [r3, #8]
 8003bb8:	e71c      	b.n	80039f4 <HAL_PCD_IRQHandler+0x4b4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bba:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8003bbe:	6820      	ldr	r0, [r4, #0]
 8003bc0:	f001 fb0e 	bl	80051e0 <USB_EP0_OutStart>
 8003bc4:	e725      	b.n	8003a12 <HAL_PCD_IRQHandler+0x4d2>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bc6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003bca:	609a      	str	r2, [r3, #8]
 8003bcc:	e791      	b.n	8003af2 <HAL_PCD_IRQHandler+0x5b2>
 8003bce:	bf00      	nop
 8003bd0:	4f54310a 	.word	0x4f54310a
 8003bd4:	4f54300a 	.word	0x4f54300a

08003bd8 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8003bd8:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8003bdc:	2a01      	cmp	r2, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_PCD_SetAddress+0xc>
 8003be0:	2002      	movs	r0, #2
 8003be2:	4770      	bx	lr
{
 8003be4:	b510      	push	{r4, lr}
 8003be6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003be8:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8003bea:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  __HAL_LOCK(hpcd);
 8003bee:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003bf2:	6800      	ldr	r0, [r0, #0]
 8003bf4:	f001 fa7a 	bl	80050ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003bf8:	2000      	movs	r0, #0
 8003bfa:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003bfe:	bd10      	pop	{r4, pc}

08003c00 <HAL_PCD_EP_Open>:
{
 8003c00:	b570      	push	{r4, r5, r6, lr}
 8003c02:	f001 040f 	and.w	r4, r1, #15
    ep->is_in = 1U;
 8003c06:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 8003c0a:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep->is_in = 1U;
 8003c0e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c12:	f04f 011c 	mov.w	r1, #28
  if ((ep_addr & 0x80U) == 0x80U)
 8003c16:	d121      	bne.n	8003c5c <HAL_PCD_EP_Open+0x5c>
    ep->is_in = 0U;
 8003c18:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c1a:	fb01 0104 	mla	r1, r1, r4, r0
    ep->is_in = 0U;
 8003c1e:	f885 61fd 	strb.w	r6, [r5, #509]	; 0x1fd
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c22:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  if (ep->is_in != 0U)
 8003c26:	784d      	ldrb	r5, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c28:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 8003c2a:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8003c2c:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8003c2e:	b105      	cbz	r5, 8003c32 <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 8003c30:	80cc      	strh	r4, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8003c32:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8003c34:	bf04      	itt	eq
 8003c36:	2300      	moveq	r3, #0
 8003c38:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8003c3a:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <HAL_PCD_EP_Open+0x46>
 8003c42:	2002      	movs	r0, #2
}
 8003c44:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8003c46:	2301      	movs	r3, #1
 8003c48:	4604      	mov	r4, r0
 8003c4a:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c4e:	6800      	ldr	r0, [r0, #0]
 8003c50:	f000 ffa8 	bl	8004ba4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c54:	2000      	movs	r0, #0
 8003c56:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return ret;
 8003c5a:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 1U;
 8003c5c:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c5e:	fb01 0104 	mla	r1, r1, r4, r0
    ep->is_in = 1U;
 8003c62:	f885 603d 	strb.w	r6, [r5, #61]	; 0x3d
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c66:	313c      	adds	r1, #60	; 0x3c
 8003c68:	e7dd      	b.n	8003c26 <HAL_PCD_EP_Open+0x26>
 8003c6a:	bf00      	nop

08003c6c <HAL_PCD_EP_Close>:
{
 8003c6c:	f001 030f 	and.w	r3, r1, #15
    ep->is_in = 1U;
 8003c70:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 8003c74:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8003c78:	b510      	push	{r4, lr}
    ep->is_in = 1U;
 8003c7a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c7e:	f04f 011c 	mov.w	r1, #28
  if ((ep_addr & 0x80U) == 0x80U)
 8003c82:	d118      	bne.n	8003cb6 <HAL_PCD_EP_Close+0x4a>
    ep->is_in = 0U;
 8003c84:	2400      	movs	r4, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c86:	fb01 0103 	mla	r1, r1, r3, r0
    ep->is_in = 0U;
 8003c8a:	f882 41fd 	strb.w	r4, [r2, #509]	; 0x1fd
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c8e:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003c92:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003c94:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_PCD_EP_Close+0x34>
 8003c9c:	2002      	movs	r0, #2
}
 8003c9e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	4604      	mov	r4, r0
 8003ca4:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ca8:	6800      	ldr	r0, [r0, #0]
 8003caa:	f000 ffc7 	bl	8004c3c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cae:	2000      	movs	r0, #0
 8003cb0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003cb4:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 8003cb6:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cb8:	fb01 0103 	mla	r1, r1, r3, r0
    ep->is_in = 1U;
 8003cbc:	f882 403d 	strb.w	r4, [r2, #61]	; 0x3d
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cc0:	313c      	adds	r1, #60	; 0x3c
 8003cc2:	e7e6      	b.n	8003c92 <HAL_PCD_EP_Close+0x26>

08003cc4 <HAL_PCD_EP_Receive>:
{
 8003cc4:	b538      	push	{r3, r4, r5, lr}
 8003cc6:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_buff = pBuf;
 8003cca:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
 8003cce:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep->xfer_count = 0U;
 8003cd2:	2100      	movs	r1, #0
  ep->xfer_buff = pBuf;
 8003cd4:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8003cd8:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8003cdc:	f884 11fd 	strb.w	r1, [r4, #509]	; 0x1fd
  ep->xfer_len = len;
 8003ce0:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ce4:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8003ce8:	6903      	ldr	r3, [r0, #16]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cea:	211c      	movs	r1, #28
 8003cec:	fb01 0105 	mla	r1, r1, r5, r0
  if (hpcd->Init.dma_enable == 1U)
 8003cf0:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8003cf2:	bf08      	it	eq
 8003cf4:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cf8:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d00:	b11d      	cbz	r5, 8003d0a <HAL_PCD_EP_Receive+0x46>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d02:	f000 ffd7 	bl	8004cb4 <USB_EPStartXfer>
}
 8003d06:	2000      	movs	r0, #0
 8003d08:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d0a:	f001 f8dd 	bl	8004ec8 <USB_EP0StartXfer>
}
 8003d0e:	2000      	movs	r0, #0
 8003d10:	bd38      	pop	{r3, r4, r5, pc}
 8003d12:	bf00      	nop

08003d14 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d14:	f001 010f 	and.w	r1, r1, #15
 8003d18:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003d1c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8003d20:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop

08003d28 <HAL_PCD_EP_Transmit>:
{
 8003d28:	b570      	push	{r4, r5, r6, lr}
 8003d2a:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_buff = pBuf;
 8003d2e:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
 8003d32:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep->is_in = 1U;
 8003d36:	2101      	movs	r1, #1
  ep->xfer_count = 0U;
 8003d38:	2600      	movs	r6, #0
  ep->xfer_buff = pBuf;
 8003d3a:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 8003d3c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  ep->xfer_len = len;
 8003d40:	6523      	str	r3, [r4, #80]	; 0x50
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d42:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8003d46:	6566      	str	r6, [r4, #84]	; 0x54
  if (hpcd->Init.dma_enable == 1U)
 8003d48:	6903      	ldr	r3, [r0, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d4a:	211c      	movs	r1, #28
 8003d4c:	fb01 0105 	mla	r1, r1, r5, r0
  if (hpcd->Init.dma_enable == 1U)
 8003d50:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8003d52:	bf08      	it	eq
 8003d54:	64e2      	streq	r2, [r4, #76]	; 0x4c
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d56:	313c      	adds	r1, #60	; 0x3c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d5c:	b11d      	cbz	r5, 8003d66 <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d5e:	f000 ffa9 	bl	8004cb4 <USB_EPStartXfer>
}
 8003d62:	2000      	movs	r0, #0
 8003d64:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d66:	f001 f8af 	bl	8004ec8 <USB_EP0StartXfer>
}
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	bd70      	pop	{r4, r5, r6, pc}
 8003d6e:	bf00      	nop

08003d70 <HAL_PCD_EP_SetStall>:
{
 8003d70:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d72:	6843      	ldr	r3, [r0, #4]
 8003d74:	f001 050f 	and.w	r5, r1, #15
 8003d78:	429d      	cmp	r5, r3
 8003d7a:	d816      	bhi.n	8003daa <HAL_PCD_EP_SetStall+0x3a>
  if ((0x80U & ep_addr) == 0x80U)
 8003d7c:	060b      	lsls	r3, r1, #24
 8003d7e:	d421      	bmi.n	8003dc4 <HAL_PCD_EP_SetStall+0x54>
    ep->is_in = 0U;
 8003d80:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8003d84:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8003d88:	241c      	movs	r4, #28
    ep->is_in = 0U;
 8003d8a:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8003d8c:	fb04 0101 	mla	r1, r4, r1, r0
    ep->is_in = 0U;
 8003d90:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
    ep = &hpcd->OUT_ep[ep_addr];
 8003d94:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->is_stall = 1U;
 8003d98:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d9a:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8003d9c:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8003d9e:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d103      	bne.n	8003dae <HAL_PCD_EP_SetStall+0x3e>
 8003da6:	2002      	movs	r0, #2
}
 8003da8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003daa:	2001      	movs	r0, #1
 8003dac:	bd38      	pop	{r3, r4, r5, pc}
 8003dae:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003db0:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003db4:	6800      	ldr	r0, [r0, #0]
 8003db6:	f001 f93f 	bl	8005038 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dba:	b17d      	cbz	r5, 8003ddc <HAL_PCD_EP_SetStall+0x6c>
  __HAL_UNLOCK(hpcd);
 8003dbc:	2000      	movs	r0, #0
 8003dbe:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003dc2:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8003dc4:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8003dc8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dcc:	211c      	movs	r1, #28
    ep->is_in = 1U;
 8003dce:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dd0:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dd8:	313c      	adds	r1, #60	; 0x3c
 8003dda:	e7dd      	b.n	8003d98 <HAL_PCD_EP_SetStall+0x28>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ddc:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8003de0:	7c21      	ldrb	r1, [r4, #16]
 8003de2:	6820      	ldr	r0, [r4, #0]
 8003de4:	f001 f9fc 	bl	80051e0 <USB_EP0_OutStart>
 8003de8:	e7e8      	b.n	8003dbc <HAL_PCD_EP_SetStall+0x4c>
 8003dea:	bf00      	nop

08003dec <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003dec:	6842      	ldr	r2, [r0, #4]
{
 8003dee:	b538      	push	{r3, r4, r5, lr}
 8003df0:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d818      	bhi.n	8003e2a <HAL_PCD_EP_ClrStall+0x3e>
    ep->is_in = 1U;
 8003df8:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8003dfc:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep->is_in = 1U;
 8003e00:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e04:	f04f 011c 	mov.w	r1, #28
  if ((0x80U & ep_addr) == 0x80U)
 8003e08:	d11c      	bne.n	8003e44 <HAL_PCD_EP_ClrStall+0x58>
    ep->is_in = 0U;
 8003e0a:	2400      	movs	r4, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e0c:	fb01 0103 	mla	r1, r1, r3, r0
    ep->is_in = 0U;
 8003e10:	f882 41fd 	strb.w	r4, [r2, #509]	; 0x1fd
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e14:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->is_stall = 0U;
 8003e18:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e1a:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8003e1c:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8003e1e:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d103      	bne.n	8003e2e <HAL_PCD_EP_ClrStall+0x42>
 8003e26:	2002      	movs	r0, #2
}
 8003e28:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003e2a:	2001      	movs	r0, #1
 8003e2c:	bd38      	pop	{r3, r4, r5, pc}
 8003e2e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003e30:	2301      	movs	r3, #1
 8003e32:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e36:	6800      	ldr	r0, [r0, #0]
 8003e38:	f001 f92c 	bl	8005094 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e3c:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003e40:	4628      	mov	r0, r5
 8003e42:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8003e44:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e46:	fb01 0103 	mla	r1, r1, r3, r0
    ep->is_in = 1U;
 8003e4a:	f882 403d 	strb.w	r4, [r2, #61]	; 0x3d
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e4e:	313c      	adds	r1, #60	; 0x3c
 8003e50:	e7e2      	b.n	8003e18 <HAL_PCD_EP_ClrStall+0x2c>
 8003e52:	bf00      	nop

08003e54 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e54:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e56:	6805      	ldr	r5, [r0, #0]
 8003e58:	6a6c      	ldr	r4, [r5, #36]	; 0x24

  if (fifo == 0U)
 8003e5a:	b1c9      	cbz	r1, 8003e90 <HAL_PCDEx_SetTxFiFo+0x3c>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e5c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8003e5e:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e60:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003e64:	d00b      	beq.n	8003e7e <HAL_PCDEx_SetTxFiFo+0x2a>
 8003e66:	2300      	movs	r3, #0
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e68:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8003e6c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8003e70:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e72:	6840      	ldr	r0, [r0, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	428b      	cmp	r3, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e78:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003e7c:	d3f4      	bcc.n	8003e68 <HAL_PCDEx_SetTxFiFo+0x14>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003e7e:	3140      	adds	r1, #64	; 0x40
 8003e80:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8003e84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8003e88:	604c      	str	r4, [r1, #4]
  }

  return HAL_OK;
}
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	bc30      	pop	{r4, r5}
 8003e8e:	4770      	bx	lr
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e90:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8003e94:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8003e96:	2000      	movs	r0, #0
 8003e98:	bc30      	pop	{r4, r5}
 8003e9a:	4770      	bx	lr

08003e9c <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8003e9c:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8003e9e:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8003ea0:	6259      	str	r1, [r3, #36]	; 0x24
}
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_PCDEx_LPM_Callback>:
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop

08003ea8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ea8:	2800      	cmp	r0, #0
 8003eaa:	f000 81d7 	beq.w	800425c <HAL_RCC_OscConfig+0x3b4>
{
 8003eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eb2:	6803      	ldr	r3, [r0, #0]
 8003eb4:	07dd      	lsls	r5, r3, #31
{
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eba:	d52f      	bpl.n	8003f1c <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ebc:	49ab      	ldr	r1, [pc, #684]	; (800416c <HAL_RCC_OscConfig+0x2c4>)
 8003ebe:	688a      	ldr	r2, [r1, #8]
 8003ec0:	f002 020c 	and.w	r2, r2, #12
 8003ec4:	2a04      	cmp	r2, #4
 8003ec6:	f000 8123 	beq.w	8004110 <HAL_RCC_OscConfig+0x268>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eca:	688a      	ldr	r2, [r1, #8]
 8003ecc:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ed0:	2a08      	cmp	r2, #8
 8003ed2:	f000 8119 	beq.w	8004108 <HAL_RCC_OscConfig+0x260>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ed6:	6863      	ldr	r3, [r4, #4]
 8003ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003edc:	f000 815a 	beq.w	8004194 <HAL_RCC_OscConfig+0x2ec>
 8003ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ee4:	f000 80e5 	beq.w	80040b2 <HAL_RCC_OscConfig+0x20a>
 8003ee8:	4da0      	ldr	r5, [pc, #640]	; (800416c <HAL_RCC_OscConfig+0x2c4>)
 8003eea:	682a      	ldr	r2, [r5, #0]
 8003eec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ef0:	602a      	str	r2, [r5, #0]
 8003ef2:	682a      	ldr	r2, [r5, #0]
 8003ef4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ef8:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f040 80e2 	bne.w	80040c4 <HAL_RCC_OscConfig+0x21c>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f00:	f7fd faa2 	bl	8001448 <HAL_GetTick>
 8003f04:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f06:	e005      	b.n	8003f14 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f08:	f7fd fa9e 	bl	8001448 <HAL_GetTick>
 8003f0c:	1b80      	subs	r0, r0, r6
 8003f0e:	2864      	cmp	r0, #100	; 0x64
 8003f10:	f200 80f6 	bhi.w	8004100 <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f14:	682b      	ldr	r3, [r5, #0]
 8003f16:	039b      	lsls	r3, r3, #14
 8003f18:	d4f6      	bmi.n	8003f08 <HAL_RCC_OscConfig+0x60>
 8003f1a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f1c:	079f      	lsls	r7, r3, #30
 8003f1e:	d528      	bpl.n	8003f72 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f20:	4a92      	ldr	r2, [pc, #584]	; (800416c <HAL_RCC_OscConfig+0x2c4>)
 8003f22:	6891      	ldr	r1, [r2, #8]
 8003f24:	f011 0f0c 	tst.w	r1, #12
 8003f28:	f000 8090 	beq.w	800404c <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f2c:	6891      	ldr	r1, [r2, #8]
 8003f2e:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f32:	2908      	cmp	r1, #8
 8003f34:	f000 8086 	beq.w	8004044 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f38:	68e3      	ldr	r3, [r4, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 810f 	beq.w	800415e <HAL_RCC_OscConfig+0x2b6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f40:	4b8b      	ldr	r3, [pc, #556]	; (8004170 <HAL_RCC_OscConfig+0x2c8>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f42:	4d8a      	ldr	r5, [pc, #552]	; (800416c <HAL_RCC_OscConfig+0x2c4>)
        __HAL_RCC_HSI_ENABLE();
 8003f44:	2201      	movs	r2, #1
 8003f46:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003f48:	f7fd fa7e 	bl	8001448 <HAL_GetTick>
 8003f4c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f4e:	e005      	b.n	8003f5c <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f50:	f7fd fa7a 	bl	8001448 <HAL_GetTick>
 8003f54:	1b80      	subs	r0, r0, r6
 8003f56:	2802      	cmp	r0, #2
 8003f58:	f200 80d2 	bhi.w	8004100 <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f5c:	682b      	ldr	r3, [r5, #0]
 8003f5e:	0798      	lsls	r0, r3, #30
 8003f60:	d5f6      	bpl.n	8003f50 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f62:	682b      	ldr	r3, [r5, #0]
 8003f64:	6922      	ldr	r2, [r4, #16]
 8003f66:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003f6a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003f6e:	602b      	str	r3, [r5, #0]
 8003f70:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f72:	071a      	lsls	r2, r3, #28
 8003f74:	d452      	bmi.n	800401c <HAL_RCC_OscConfig+0x174>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f76:	0758      	lsls	r0, r3, #29
 8003f78:	d530      	bpl.n	8003fdc <HAL_RCC_OscConfig+0x134>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f7a:	4a7c      	ldr	r2, [pc, #496]	; (800416c <HAL_RCC_OscConfig+0x2c4>)
 8003f7c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003f7e:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8003f82:	d07e      	beq.n	8004082 <HAL_RCC_OscConfig+0x1da>
    FlagStatus       pwrclkchanged = RESET;
 8003f84:	2600      	movs	r6, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f86:	4d7b      	ldr	r5, [pc, #492]	; (8004174 <HAL_RCC_OscConfig+0x2cc>)
 8003f88:	682b      	ldr	r3, [r5, #0]
 8003f8a:	05d9      	lsls	r1, r3, #23
 8003f8c:	f140 80a8 	bpl.w	80040e0 <HAL_RCC_OscConfig+0x238>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f90:	68a3      	ldr	r3, [r4, #8]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	f000 8128 	beq.w	80041e8 <HAL_RCC_OscConfig+0x340>
 8003f98:	2b05      	cmp	r3, #5
 8003f9a:	f000 80c3 	beq.w	8004124 <HAL_RCC_OscConfig+0x27c>
 8003f9e:	4d73      	ldr	r5, [pc, #460]	; (800416c <HAL_RCC_OscConfig+0x2c4>)
 8003fa0:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003fa2:	f022 0201 	bic.w	r2, r2, #1
 8003fa6:	672a      	str	r2, [r5, #112]	; 0x70
 8003fa8:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003faa:	f022 0204 	bic.w	r2, r2, #4
 8003fae:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f040 80c0 	bne.w	8004136 <HAL_RCC_OscConfig+0x28e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb6:	f7fd fa47 	bl	8001448 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fba:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003fbe:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc0:	e006      	b.n	8003fd0 <HAL_RCC_OscConfig+0x128>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fc2:	f7fd fa41 	bl	8001448 <HAL_GetTick>
 8003fc6:	eba0 0008 	sub.w	r0, r0, r8
 8003fca:	42b8      	cmp	r0, r7
 8003fcc:	f200 8098 	bhi.w	8004100 <HAL_RCC_OscConfig+0x258>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003fd2:	0798      	lsls	r0, r3, #30
 8003fd4:	d4f5      	bmi.n	8003fc2 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fd6:	2e00      	cmp	r6, #0
 8003fd8:	f040 810c 	bne.w	80041f4 <HAL_RCC_OscConfig+0x34c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fdc:	69a0      	ldr	r0, [r4, #24]
 8003fde:	b1c8      	cbz	r0, 8004014 <HAL_RCC_OscConfig+0x16c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fe0:	4d62      	ldr	r5, [pc, #392]	; (800416c <HAL_RCC_OscConfig+0x2c4>)
 8003fe2:	68aa      	ldr	r2, [r5, #8]
 8003fe4:	f002 020c 	and.w	r2, r2, #12
 8003fe8:	2a08      	cmp	r2, #8
 8003fea:	f000 80d9 	beq.w	80041a0 <HAL_RCC_OscConfig+0x2f8>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fee:	4a62      	ldr	r2, [pc, #392]	; (8004178 <HAL_RCC_OscConfig+0x2d0>)
 8003ff0:	2100      	movs	r1, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ff2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003ff4:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ff6:	f000 8103 	beq.w	8004200 <HAL_RCC_OscConfig+0x358>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffa:	f7fd fa25 	bl	8001448 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffe:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8004000:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004002:	e004      	b.n	800400e <HAL_RCC_OscConfig+0x166>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004004:	f7fd fa20 	bl	8001448 <HAL_GetTick>
 8004008:	1b40      	subs	r0, r0, r5
 800400a:	2802      	cmp	r0, #2
 800400c:	d878      	bhi.n	8004100 <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	019b      	lsls	r3, r3, #6
 8004012:	d4f7      	bmi.n	8004004 <HAL_RCC_OscConfig+0x15c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004014:	2000      	movs	r0, #0
}
 8004016:	b002      	add	sp, #8
 8004018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800401c:	6963      	ldr	r3, [r4, #20]
 800401e:	b303      	cbz	r3, 8004062 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8004020:	4b56      	ldr	r3, [pc, #344]	; (800417c <HAL_RCC_OscConfig+0x2d4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004022:	4d52      	ldr	r5, [pc, #328]	; (800416c <HAL_RCC_OscConfig+0x2c4>)
      __HAL_RCC_LSI_ENABLE();
 8004024:	2201      	movs	r2, #1
 8004026:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004028:	f7fd fa0e 	bl	8001448 <HAL_GetTick>
 800402c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800402e:	e004      	b.n	800403a <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004030:	f7fd fa0a 	bl	8001448 <HAL_GetTick>
 8004034:	1b80      	subs	r0, r0, r6
 8004036:	2802      	cmp	r0, #2
 8004038:	d862      	bhi.n	8004100 <HAL_RCC_OscConfig+0x258>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800403a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800403c:	079b      	lsls	r3, r3, #30
 800403e:	d5f7      	bpl.n	8004030 <HAL_RCC_OscConfig+0x188>
 8004040:	6823      	ldr	r3, [r4, #0]
 8004042:	e798      	b.n	8003f76 <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004044:	6852      	ldr	r2, [r2, #4]
 8004046:	0256      	lsls	r6, r2, #9
 8004048:	f53f af76 	bmi.w	8003f38 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800404c:	4a47      	ldr	r2, [pc, #284]	; (800416c <HAL_RCC_OscConfig+0x2c4>)
 800404e:	6812      	ldr	r2, [r2, #0]
 8004050:	0795      	lsls	r5, r2, #30
 8004052:	d522      	bpl.n	800409a <HAL_RCC_OscConfig+0x1f2>
 8004054:	68e2      	ldr	r2, [r4, #12]
 8004056:	2a01      	cmp	r2, #1
 8004058:	d01f      	beq.n	800409a <HAL_RCC_OscConfig+0x1f2>
        return HAL_ERROR;
 800405a:	2001      	movs	r0, #1
}
 800405c:	b002      	add	sp, #8
 800405e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004062:	4a46      	ldr	r2, [pc, #280]	; (800417c <HAL_RCC_OscConfig+0x2d4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004064:	4d41      	ldr	r5, [pc, #260]	; (800416c <HAL_RCC_OscConfig+0x2c4>)
      __HAL_RCC_LSI_DISABLE();
 8004066:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004068:	f7fd f9ee 	bl	8001448 <HAL_GetTick>
 800406c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800406e:	e004      	b.n	800407a <HAL_RCC_OscConfig+0x1d2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004070:	f7fd f9ea 	bl	8001448 <HAL_GetTick>
 8004074:	1b80      	subs	r0, r0, r6
 8004076:	2802      	cmp	r0, #2
 8004078:	d842      	bhi.n	8004100 <HAL_RCC_OscConfig+0x258>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800407a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800407c:	079f      	lsls	r7, r3, #30
 800407e:	d4f7      	bmi.n	8004070 <HAL_RCC_OscConfig+0x1c8>
 8004080:	e7de      	b.n	8004040 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004082:	9301      	str	r3, [sp, #4]
 8004084:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800408a:	6413      	str	r3, [r2, #64]	; 0x40
 800408c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800408e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004092:	9301      	str	r3, [sp, #4]
 8004094:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004096:	2601      	movs	r6, #1
 8004098:	e775      	b.n	8003f86 <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800409a:	4934      	ldr	r1, [pc, #208]	; (800416c <HAL_RCC_OscConfig+0x2c4>)
 800409c:	6920      	ldr	r0, [r4, #16]
 800409e:	680a      	ldr	r2, [r1, #0]
 80040a0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80040a4:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80040a8:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040aa:	071a      	lsls	r2, r3, #28
 80040ac:	f57f af63 	bpl.w	8003f76 <HAL_RCC_OscConfig+0xce>
 80040b0:	e7b4      	b.n	800401c <HAL_RCC_OscConfig+0x174>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040b2:	4b2e      	ldr	r3, [pc, #184]	; (800416c <HAL_RCC_OscConfig+0x2c4>)
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80040c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80040c4:	f7fd f9c0 	bl	8001448 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040c8:	4d28      	ldr	r5, [pc, #160]	; (800416c <HAL_RCC_OscConfig+0x2c4>)
        tickstart = HAL_GetTick();
 80040ca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040cc:	e004      	b.n	80040d8 <HAL_RCC_OscConfig+0x230>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040ce:	f7fd f9bb 	bl	8001448 <HAL_GetTick>
 80040d2:	1b80      	subs	r0, r0, r6
 80040d4:	2864      	cmp	r0, #100	; 0x64
 80040d6:	d813      	bhi.n	8004100 <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d8:	682b      	ldr	r3, [r5, #0]
 80040da:	039a      	lsls	r2, r3, #14
 80040dc:	d5f7      	bpl.n	80040ce <HAL_RCC_OscConfig+0x226>
 80040de:	e71c      	b.n	8003f1a <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040e0:	682b      	ldr	r3, [r5, #0]
 80040e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80040e8:	f7fd f9ae 	bl	8001448 <HAL_GetTick>
 80040ec:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ee:	682b      	ldr	r3, [r5, #0]
 80040f0:	05da      	lsls	r2, r3, #23
 80040f2:	f53f af4d 	bmi.w	8003f90 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f6:	f7fd f9a7 	bl	8001448 <HAL_GetTick>
 80040fa:	1bc0      	subs	r0, r0, r7
 80040fc:	2802      	cmp	r0, #2
 80040fe:	d9f6      	bls.n	80040ee <HAL_RCC_OscConfig+0x246>
            return HAL_TIMEOUT;
 8004100:	2003      	movs	r0, #3
}
 8004102:	b002      	add	sp, #8
 8004104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004108:	684a      	ldr	r2, [r1, #4]
 800410a:	0250      	lsls	r0, r2, #9
 800410c:	f57f aee3 	bpl.w	8003ed6 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004110:	4a16      	ldr	r2, [pc, #88]	; (800416c <HAL_RCC_OscConfig+0x2c4>)
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	0391      	lsls	r1, r2, #14
 8004116:	f57f af01 	bpl.w	8003f1c <HAL_RCC_OscConfig+0x74>
 800411a:	6862      	ldr	r2, [r4, #4]
 800411c:	2a00      	cmp	r2, #0
 800411e:	f47f aefd 	bne.w	8003f1c <HAL_RCC_OscConfig+0x74>
 8004122:	e79a      	b.n	800405a <HAL_RCC_OscConfig+0x1b2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004124:	4b11      	ldr	r3, [pc, #68]	; (800416c <HAL_RCC_OscConfig+0x2c4>)
 8004126:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004128:	f042 0204 	orr.w	r2, r2, #4
 800412c:	671a      	str	r2, [r3, #112]	; 0x70
 800412e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004130:	f042 0201 	orr.w	r2, r2, #1
 8004134:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004136:	f7fd f987 	bl	8001448 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800413a:	4d0c      	ldr	r5, [pc, #48]	; (800416c <HAL_RCC_OscConfig+0x2c4>)
      tickstart = HAL_GetTick();
 800413c:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800413e:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004142:	e005      	b.n	8004150 <HAL_RCC_OscConfig+0x2a8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004144:	f7fd f980 	bl	8001448 <HAL_GetTick>
 8004148:	eba0 0008 	sub.w	r0, r0, r8
 800414c:	42b8      	cmp	r0, r7
 800414e:	d8d7      	bhi.n	8004100 <HAL_RCC_OscConfig+0x258>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004150:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004152:	079b      	lsls	r3, r3, #30
 8004154:	d5f6      	bpl.n	8004144 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8004156:	2e00      	cmp	r6, #0
 8004158:	f43f af40 	beq.w	8003fdc <HAL_RCC_OscConfig+0x134>
 800415c:	e04a      	b.n	80041f4 <HAL_RCC_OscConfig+0x34c>
        __HAL_RCC_HSI_DISABLE();
 800415e:	4a04      	ldr	r2, [pc, #16]	; (8004170 <HAL_RCC_OscConfig+0x2c8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004160:	4d02      	ldr	r5, [pc, #8]	; (800416c <HAL_RCC_OscConfig+0x2c4>)
        __HAL_RCC_HSI_DISABLE();
 8004162:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004164:	f7fd f970 	bl	8001448 <HAL_GetTick>
 8004168:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800416a:	e00e      	b.n	800418a <HAL_RCC_OscConfig+0x2e2>
 800416c:	40023800 	.word	0x40023800
 8004170:	42470000 	.word	0x42470000
 8004174:	40007000 	.word	0x40007000
 8004178:	42470060 	.word	0x42470060
 800417c:	42470e80 	.word	0x42470e80
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004180:	f7fd f962 	bl	8001448 <HAL_GetTick>
 8004184:	1b80      	subs	r0, r0, r6
 8004186:	2802      	cmp	r0, #2
 8004188:	d8ba      	bhi.n	8004100 <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418a:	682b      	ldr	r3, [r5, #0]
 800418c:	0799      	lsls	r1, r3, #30
 800418e:	d4f7      	bmi.n	8004180 <HAL_RCC_OscConfig+0x2d8>
 8004190:	6823      	ldr	r3, [r4, #0]
 8004192:	e6ee      	b.n	8003f72 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004194:	4a32      	ldr	r2, [pc, #200]	; (8004260 <HAL_RCC_OscConfig+0x3b8>)
 8004196:	6813      	ldr	r3, [r2, #0]
 8004198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	e791      	b.n	80040c4 <HAL_RCC_OscConfig+0x21c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a0:	2801      	cmp	r0, #1
 80041a2:	f43f af38 	beq.w	8004016 <HAL_RCC_OscConfig+0x16e>
        pll_config = RCC->CFGR;
 80041a6:	68ab      	ldr	r3, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a8:	69e2      	ldr	r2, [r4, #28]
 80041aa:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80041ae:	4291      	cmp	r1, r2
 80041b0:	f47f af53 	bne.w	800405a <HAL_RCC_OscConfig+0x1b2>
 80041b4:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041b6:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ba:	4291      	cmp	r1, r2
 80041bc:	f47f af4d 	bne.w	800405a <HAL_RCC_OscConfig+0x1b2>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80041c0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80041c6:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041c8:	428a      	cmp	r2, r1
 80041ca:	f47f af46 	bne.w	800405a <HAL_RCC_OscConfig+0x1b2>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80041ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041d0:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80041d4:	4291      	cmp	r1, r2
 80041d6:	f47f af40 	bne.w	800405a <HAL_RCC_OscConfig+0x1b2>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041da:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80041dc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 80041e0:	1a18      	subs	r0, r3, r0
 80041e2:	bf18      	it	ne
 80041e4:	2001      	movne	r0, #1
 80041e6:	e716      	b.n	8004016 <HAL_RCC_OscConfig+0x16e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041e8:	4a1d      	ldr	r2, [pc, #116]	; (8004260 <HAL_RCC_OscConfig+0x3b8>)
 80041ea:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80041ec:	f043 0301 	orr.w	r3, r3, #1
 80041f0:	6713      	str	r3, [r2, #112]	; 0x70
 80041f2:	e7a0      	b.n	8004136 <HAL_RCC_OscConfig+0x28e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f4:	4a1a      	ldr	r2, [pc, #104]	; (8004260 <HAL_RCC_OscConfig+0x3b8>)
 80041f6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80041f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041fc:	6413      	str	r3, [r2, #64]	; 0x40
 80041fe:	e6ed      	b.n	8003fdc <HAL_RCC_OscConfig+0x134>
        tickstart = HAL_GetTick();
 8004200:	f7fd f922 	bl	8001448 <HAL_GetTick>
 8004204:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004206:	e005      	b.n	8004214 <HAL_RCC_OscConfig+0x36c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004208:	f7fd f91e 	bl	8001448 <HAL_GetTick>
 800420c:	1b80      	subs	r0, r0, r6
 800420e:	2802      	cmp	r0, #2
 8004210:	f63f af76 	bhi.w	8004100 <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004214:	682b      	ldr	r3, [r5, #0]
 8004216:	0199      	lsls	r1, r3, #6
 8004218:	d4f6      	bmi.n	8004208 <HAL_RCC_OscConfig+0x360>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800421a:	69e3      	ldr	r3, [r4, #28]
 800421c:	6a27      	ldr	r7, [r4, #32]
 800421e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004220:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004222:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8004224:	490f      	ldr	r1, [pc, #60]	; (8004264 <HAL_RCC_OscConfig+0x3bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004226:	4c0e      	ldr	r4, [pc, #56]	; (8004260 <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004228:	433b      	orrs	r3, r7
 800422a:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 800422e:	0852      	lsrs	r2, r2, #1
 8004230:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004234:	3a01      	subs	r2, #1
 8004236:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800423a:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800423c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800423e:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8004240:	f7fd f902 	bl	8001448 <HAL_GetTick>
 8004244:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004246:	e005      	b.n	8004254 <HAL_RCC_OscConfig+0x3ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004248:	f7fd f8fe 	bl	8001448 <HAL_GetTick>
 800424c:	1b40      	subs	r0, r0, r5
 800424e:	2802      	cmp	r0, #2
 8004250:	f63f af56 	bhi.w	8004100 <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	019a      	lsls	r2, r3, #6
 8004258:	d5f6      	bpl.n	8004248 <HAL_RCC_OscConfig+0x3a0>
 800425a:	e6db      	b.n	8004014 <HAL_RCC_OscConfig+0x16c>
    return HAL_ERROR;
 800425c:	2001      	movs	r0, #1
}
 800425e:	4770      	bx	lr
 8004260:	40023800 	.word	0x40023800
 8004264:	42470060 	.word	0x42470060

08004268 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004268:	4915      	ldr	r1, [pc, #84]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x58>)
{
 800426a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800426c:	688b      	ldr	r3, [r1, #8]
 800426e:	f003 030c 	and.w	r3, r3, #12
 8004272:	2b08      	cmp	r3, #8
 8004274:	d117      	bne.n	80042a6 <HAL_RCC_GetSysClockFreq+0x3e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004276:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004278:	684b      	ldr	r3, [r1, #4]
 800427a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800427e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004282:	d112      	bne.n	80042aa <HAL_RCC_GetSysClockFreq+0x42>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004284:	6849      	ldr	r1, [r1, #4]
 8004286:	480f      	ldr	r0, [pc, #60]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x5c>)
 8004288:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800428c:	fba1 0100 	umull	r0, r1, r1, r0
 8004290:	f7fb ffb0 	bl	80001f4 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004294:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x58>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800429c:	3301      	adds	r3, #1
 800429e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80042a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80042a4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80042a6:	4807      	ldr	r0, [pc, #28]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80042a8:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042aa:	684b      	ldr	r3, [r1, #4]
 80042ac:	4805      	ldr	r0, [pc, #20]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x5c>)
 80042ae:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80042b2:	fba3 0100 	umull	r0, r1, r3, r0
 80042b6:	2300      	movs	r3, #0
 80042b8:	f7fb ff9c 	bl	80001f4 <__aeabi_uldivmod>
 80042bc:	e7ea      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x2c>
 80042be:	bf00      	nop
 80042c0:	40023800 	.word	0x40023800
 80042c4:	00f42400 	.word	0x00f42400

080042c8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80042c8:	b160      	cbz	r0, 80042e4 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042ca:	4a49      	ldr	r2, [pc, #292]	; (80043f0 <HAL_RCC_ClockConfig+0x128>)
 80042cc:	6813      	ldr	r3, [r2, #0]
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	428b      	cmp	r3, r1
 80042d4:	d208      	bcs.n	80042e8 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d6:	b2cb      	uxtb	r3, r1
 80042d8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042da:	6813      	ldr	r3, [r2, #0]
 80042dc:	f003 030f 	and.w	r3, r3, #15
 80042e0:	4299      	cmp	r1, r3
 80042e2:	d001      	beq.n	80042e8 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 80042e4:	2001      	movs	r0, #1
}
 80042e6:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042e8:	6803      	ldr	r3, [r0, #0]
{
 80042ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ee:	079d      	lsls	r5, r3, #30
 80042f0:	d514      	bpl.n	800431c <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f2:	075c      	lsls	r4, r3, #29
 80042f4:	d504      	bpl.n	8004300 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042f6:	4c3f      	ldr	r4, [pc, #252]	; (80043f4 <HAL_RCC_ClockConfig+0x12c>)
 80042f8:	68a2      	ldr	r2, [r4, #8]
 80042fa:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80042fe:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004300:	071a      	lsls	r2, r3, #28
 8004302:	d504      	bpl.n	800430e <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004304:	4c3b      	ldr	r4, [pc, #236]	; (80043f4 <HAL_RCC_ClockConfig+0x12c>)
 8004306:	68a2      	ldr	r2, [r4, #8]
 8004308:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800430c:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800430e:	4c39      	ldr	r4, [pc, #228]	; (80043f4 <HAL_RCC_ClockConfig+0x12c>)
 8004310:	6885      	ldr	r5, [r0, #8]
 8004312:	68a2      	ldr	r2, [r4, #8]
 8004314:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004318:	432a      	orrs	r2, r5
 800431a:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800431c:	07df      	lsls	r7, r3, #31
 800431e:	4604      	mov	r4, r0
 8004320:	460d      	mov	r5, r1
 8004322:	d522      	bpl.n	800436a <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004324:	6842      	ldr	r2, [r0, #4]
 8004326:	2a01      	cmp	r2, #1
 8004328:	d05c      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x11c>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800432a:	1e93      	subs	r3, r2, #2
 800432c:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800432e:	4b31      	ldr	r3, [pc, #196]	; (80043f4 <HAL_RCC_ClockConfig+0x12c>)
 8004330:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004332:	d951      	bls.n	80043d8 <HAL_RCC_ClockConfig+0x110>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004334:	0799      	lsls	r1, r3, #30
 8004336:	d525      	bpl.n	8004384 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004338:	4e2e      	ldr	r6, [pc, #184]	; (80043f4 <HAL_RCC_ClockConfig+0x12c>)
 800433a:	68b3      	ldr	r3, [r6, #8]
 800433c:	f023 0303 	bic.w	r3, r3, #3
 8004340:	4313      	orrs	r3, r2
 8004342:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004344:	f7fd f880 	bl	8001448 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004348:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800434c:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434e:	e005      	b.n	800435c <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004350:	f7fd f87a 	bl	8001448 <HAL_GetTick>
 8004354:	eba0 0008 	sub.w	r0, r0, r8
 8004358:	42b8      	cmp	r0, r7
 800435a:	d840      	bhi.n	80043de <HAL_RCC_ClockConfig+0x116>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435c:	68b3      	ldr	r3, [r6, #8]
 800435e:	6862      	ldr	r2, [r4, #4]
 8004360:	f003 030c 	and.w	r3, r3, #12
 8004364:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004368:	d1f2      	bne.n	8004350 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800436a:	4a21      	ldr	r2, [pc, #132]	; (80043f0 <HAL_RCC_ClockConfig+0x128>)
 800436c:	6813      	ldr	r3, [r2, #0]
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	429d      	cmp	r5, r3
 8004374:	d209      	bcs.n	800438a <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004376:	b2eb      	uxtb	r3, r5
 8004378:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800437a:	6813      	ldr	r3, [r2, #0]
 800437c:	f003 030f 	and.w	r3, r3, #15
 8004380:	429d      	cmp	r5, r3
 8004382:	d002      	beq.n	800438a <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 8004384:	2001      	movs	r0, #1
 8004386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	075a      	lsls	r2, r3, #29
 800438e:	d506      	bpl.n	800439e <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004390:	4918      	ldr	r1, [pc, #96]	; (80043f4 <HAL_RCC_ClockConfig+0x12c>)
 8004392:	68e0      	ldr	r0, [r4, #12]
 8004394:	688a      	ldr	r2, [r1, #8]
 8004396:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800439a:	4302      	orrs	r2, r0
 800439c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800439e:	071b      	lsls	r3, r3, #28
 80043a0:	d507      	bpl.n	80043b2 <HAL_RCC_ClockConfig+0xea>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043a2:	4a14      	ldr	r2, [pc, #80]	; (80043f4 <HAL_RCC_ClockConfig+0x12c>)
 80043a4:	6921      	ldr	r1, [r4, #16]
 80043a6:	6893      	ldr	r3, [r2, #8]
 80043a8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80043ac:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80043b0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043b2:	f7ff ff59 	bl	8004268 <HAL_RCC_GetSysClockFreq>
 80043b6:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <HAL_RCC_ClockConfig+0x12c>)
 80043b8:	4c0f      	ldr	r4, [pc, #60]	; (80043f8 <HAL_RCC_ClockConfig+0x130>)
 80043ba:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 80043bc:	490f      	ldr	r1, [pc, #60]	; (80043fc <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043be:	4a10      	ldr	r2, [pc, #64]	; (8004400 <HAL_RCC_ClockConfig+0x138>)
 80043c0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80043c4:	5ce3      	ldrb	r3, [r4, r3]
 80043c6:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 80043ca:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043cc:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 80043ce:	f003 f971 	bl	80076b4 <HAL_InitTick>
  return HAL_OK;
 80043d2:	2000      	movs	r0, #0
 80043d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d8:	0198      	lsls	r0, r3, #6
 80043da:	d4ad      	bmi.n	8004338 <HAL_RCC_ClockConfig+0x70>
 80043dc:	e7d2      	b.n	8004384 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 80043de:	2003      	movs	r0, #3
}
 80043e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e4:	4b03      	ldr	r3, [pc, #12]	; (80043f4 <HAL_RCC_ClockConfig+0x12c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	039e      	lsls	r6, r3, #14
 80043ea:	d4a5      	bmi.n	8004338 <HAL_RCC_ClockConfig+0x70>
 80043ec:	e7ca      	b.n	8004384 <HAL_RCC_ClockConfig+0xbc>
 80043ee:	bf00      	nop
 80043f0:	40023c00 	.word	0x40023c00
 80043f4:	40023800 	.word	0x40023800
 80043f8:	0800a9a4 	.word	0x0800a9a4
 80043fc:	20000004 	.word	0x20000004
 8004400:	2000011c 	.word	0x2000011c

08004404 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004404:	4b01      	ldr	r3, [pc, #4]	; (800440c <HAL_RCC_GetHCLKFreq+0x8>)
}
 8004406:	6818      	ldr	r0, [r3, #0]
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	2000011c 	.word	0x2000011c

08004410 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004410:	4b04      	ldr	r3, [pc, #16]	; (8004424 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004412:	4a05      	ldr	r2, [pc, #20]	; (8004428 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004414:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8004416:	4905      	ldr	r1, [pc, #20]	; (800442c <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004418:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800441c:	6808      	ldr	r0, [r1, #0]
 800441e:	5cd3      	ldrb	r3, [r2, r3]
}
 8004420:	40d8      	lsrs	r0, r3
 8004422:	4770      	bx	lr
 8004424:	40023800 	.word	0x40023800
 8004428:	0800a9b4 	.word	0x0800a9b4
 800442c:	2000011c 	.word	0x2000011c

08004430 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004430:	4b0e      	ldr	r3, [pc, #56]	; (800446c <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004432:	220f      	movs	r2, #15
 8004434:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	f002 0203 	and.w	r2, r2, #3
 800443c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004444:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800444c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	08db      	lsrs	r3, r3, #3
{
 8004452:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004454:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004458:	4c05      	ldr	r4, [pc, #20]	; (8004470 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800445a:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800445c:	6823      	ldr	r3, [r4, #0]
}
 800445e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	600b      	str	r3, [r1, #0]
}
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	40023800 	.word	0x40023800
 8004470:	40023c00 	.word	0x40023c00

08004474 <HAL_TIM_Base_MspInit>:
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop

08004478 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004478:	2800      	cmp	r0, #0
 800447a:	f000 8098 	beq.w	80045ae <HAL_TIM_Base_Init+0x136>
{
 800447e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004480:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004484:	4604      	mov	r4, r0
 8004486:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800448a:	2b00      	cmp	r3, #0
 800448c:	d066      	beq.n	800455c <HAL_TIM_Base_Init+0xe4>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800448e:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004490:	4948      	ldr	r1, [pc, #288]	; (80045b4 <HAL_TIM_Base_Init+0x13c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004492:	2202      	movs	r2, #2
 8004494:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004498:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 800449a:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800449c:	d063      	beq.n	8004566 <HAL_TIM_Base_Init+0xee>
 800449e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a2:	d072      	beq.n	800458a <HAL_TIM_Base_Init+0x112>
 80044a4:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80044a8:	428b      	cmp	r3, r1
 80044aa:	d02d      	beq.n	8004508 <HAL_TIM_Base_Init+0x90>
 80044ac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80044b0:	428b      	cmp	r3, r1
 80044b2:	d029      	beq.n	8004508 <HAL_TIM_Base_Init+0x90>
 80044b4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80044b8:	428b      	cmp	r3, r1
 80044ba:	d025      	beq.n	8004508 <HAL_TIM_Base_Init+0x90>
 80044bc:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 80044c0:	428b      	cmp	r3, r1
 80044c2:	d021      	beq.n	8004508 <HAL_TIM_Base_Init+0x90>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044c4:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80044c8:	428b      	cmp	r3, r1
 80044ca:	d039      	beq.n	8004540 <HAL_TIM_Base_Init+0xc8>
 80044cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80044d0:	428b      	cmp	r3, r1
 80044d2:	d035      	beq.n	8004540 <HAL_TIM_Base_Init+0xc8>
 80044d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80044d8:	428b      	cmp	r3, r1
 80044da:	d031      	beq.n	8004540 <HAL_TIM_Base_Init+0xc8>
 80044dc:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 80044e0:	428b      	cmp	r3, r1
 80044e2:	d02d      	beq.n	8004540 <HAL_TIM_Base_Init+0xc8>
 80044e4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80044e8:	428b      	cmp	r3, r1
 80044ea:	d029      	beq.n	8004540 <HAL_TIM_Base_Init+0xc8>
 80044ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80044f0:	428b      	cmp	r3, r1
 80044f2:	d025      	beq.n	8004540 <HAL_TIM_Base_Init+0xc8>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044f4:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044f6:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044f8:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044fe:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8004500:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004502:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004504:	6299      	str	r1, [r3, #40]	; 0x28
 8004506:	e015      	b.n	8004534 <HAL_TIM_Base_Init+0xbc>
    tmpcr1 |= Structure->CounterMode;
 8004508:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800450a:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800450c:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800450e:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8004510:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004512:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004516:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8004518:	f422 7240 	bic.w	r2, r2, #768	; 0x300

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800451c:	4926      	ldr	r1, [pc, #152]	; (80045b8 <HAL_TIM_Base_Init+0x140>)
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800451e:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004520:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004524:	4302      	orrs	r2, r0
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004526:	428b      	cmp	r3, r1
  TIMx->CR1 = tmpcr1;
 8004528:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800452a:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800452c:	629d      	str	r5, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800452e:	d101      	bne.n	8004534 <HAL_TIM_Base_Init+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004530:	6962      	ldr	r2, [r4, #20]
 8004532:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004534:	2201      	movs	r2, #1
 8004536:	615a      	str	r2, [r3, #20]
  return HAL_OK;
 8004538:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800453a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  return HAL_OK;
 800453e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004540:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004542:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004544:	68e5      	ldr	r5, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8004546:	6861      	ldr	r1, [r4, #4]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004548:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800454c:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800454e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004552:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 8004554:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004556:	62dd      	str	r5, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004558:	6299      	str	r1, [r3, #40]	; 0x28
 800455a:	e7eb      	b.n	8004534 <HAL_TIM_Base_Init+0xbc>
    htim->Lock = HAL_UNLOCKED;
 800455c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004560:	f7ff ff88 	bl	8004474 <HAL_TIM_Base_MspInit>
 8004564:	e793      	b.n	800448e <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= Structure->CounterMode;
 8004566:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004568:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800456a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800456c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004570:	432a      	orrs	r2, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8004572:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004576:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004578:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800457c:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 800457e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004580:	68e2      	ldr	r2, [r4, #12]
 8004582:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004584:	6862      	ldr	r2, [r4, #4]
 8004586:	629a      	str	r2, [r3, #40]	; 0x28
 8004588:	e7d2      	b.n	8004530 <HAL_TIM_Base_Init+0xb8>
    tmpcr1 |= Structure->CounterMode;
 800458a:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800458c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800458e:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004590:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8004592:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004594:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004598:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 800459a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800459e:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045a4:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80045a6:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045a8:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80045aa:	629d      	str	r5, [r3, #40]	; 0x28
 80045ac:	e7c2      	b.n	8004534 <HAL_TIM_Base_Init+0xbc>
    return HAL_ERROR;
 80045ae:	2001      	movs	r0, #1
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	40010000 	.word	0x40010000
 80045b8:	40010400 	.word	0x40010400

080045bc <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045bc:	6803      	ldr	r3, [r0, #0]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	f042 0201 	orr.w	r2, r2, #1
 80045c4:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045cc:	2a06      	cmp	r2, #6
 80045ce:	d003      	beq.n	80045d8 <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	f042 0201 	orr.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]
}
 80045d8:	2000      	movs	r0, #0
 80045da:	4770      	bx	lr

080045dc <HAL_TIM_OC_DelayElapsedCallback>:
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop

080045e0 <HAL_TIM_IC_CaptureCallback>:
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop

080045e4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop

080045e8 <HAL_TIM_TriggerCallback>:
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop

080045ec <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045ec:	6803      	ldr	r3, [r0, #0]
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	0791      	lsls	r1, r2, #30
{
 80045f2:	b510      	push	{r4, lr}
 80045f4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045f6:	d502      	bpl.n	80045fe <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	0792      	lsls	r2, r2, #30
 80045fc:	d462      	bmi.n	80046c4 <HAL_TIM_IRQHandler+0xd8>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045fe:	691a      	ldr	r2, [r3, #16]
 8004600:	0750      	lsls	r0, r2, #29
 8004602:	d502      	bpl.n	800460a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	0751      	lsls	r1, r2, #29
 8004608:	d449      	bmi.n	800469e <HAL_TIM_IRQHandler+0xb2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	0712      	lsls	r2, r2, #28
 800460e:	d502      	bpl.n	8004616 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	0710      	lsls	r0, r2, #28
 8004614:	d431      	bmi.n	800467a <HAL_TIM_IRQHandler+0x8e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	06d2      	lsls	r2, r2, #27
 800461a:	d502      	bpl.n	8004622 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	06d0      	lsls	r0, r2, #27
 8004620:	d418      	bmi.n	8004654 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	07d1      	lsls	r1, r2, #31
 8004626:	d502      	bpl.n	800462e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	07d2      	lsls	r2, r2, #31
 800462c:	d46b      	bmi.n	8004706 <HAL_TIM_IRQHandler+0x11a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800462e:	691a      	ldr	r2, [r3, #16]
 8004630:	0610      	lsls	r0, r2, #24
 8004632:	d502      	bpl.n	800463a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	0611      	lsls	r1, r2, #24
 8004638:	d46d      	bmi.n	8004716 <HAL_TIM_IRQHandler+0x12a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	0652      	lsls	r2, r2, #25
 800463e:	d502      	bpl.n	8004646 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	0650      	lsls	r0, r2, #25
 8004644:	d457      	bmi.n	80046f6 <HAL_TIM_IRQHandler+0x10a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004646:	691a      	ldr	r2, [r3, #16]
 8004648:	0691      	lsls	r1, r2, #26
 800464a:	d502      	bpl.n	8004652 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	0692      	lsls	r2, r2, #26
 8004650:	d449      	bmi.n	80046e6 <HAL_TIM_IRQHandler+0xfa>
 8004652:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004654:	f06f 0210 	mvn.w	r2, #16
 8004658:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800465a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800465c:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800465e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004662:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004664:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004666:	d161      	bne.n	800472c <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004668:	f7ff ffb8 	bl	80045dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800466c:	4620      	mov	r0, r4
 800466e:	f7ff ffb9 	bl	80045e4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004672:	2200      	movs	r2, #0
 8004674:	6823      	ldr	r3, [r4, #0]
 8004676:	7722      	strb	r2, [r4, #28]
 8004678:	e7d3      	b.n	8004622 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800467a:	f06f 0208 	mvn.w	r2, #8
 800467e:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004680:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004682:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004684:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004686:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004688:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800468a:	d155      	bne.n	8004738 <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800468c:	f7ff ffa6 	bl	80045dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004690:	4620      	mov	r0, r4
 8004692:	f7ff ffa7 	bl	80045e4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004696:	2200      	movs	r2, #0
 8004698:	6823      	ldr	r3, [r4, #0]
 800469a:	7722      	strb	r2, [r4, #28]
 800469c:	e7bb      	b.n	8004616 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800469e:	f06f 0204 	mvn.w	r2, #4
 80046a2:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046a4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046a6:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046a8:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046ac:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80046ae:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046b0:	d13f      	bne.n	8004732 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046b2:	f7ff ff93 	bl	80045dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b6:	4620      	mov	r0, r4
 80046b8:	f7ff ff94 	bl	80045e4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046bc:	2200      	movs	r2, #0
 80046be:	6823      	ldr	r3, [r4, #0]
 80046c0:	7722      	strb	r2, [r4, #28]
 80046c2:	e7a2      	b.n	800460a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046c4:	f06f 0202 	mvn.w	r2, #2
 80046c8:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046ca:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046cc:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046ce:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046d0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046d2:	d128      	bne.n	8004726 <HAL_TIM_IRQHandler+0x13a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046d4:	f7ff ff82 	bl	80045dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d8:	4620      	mov	r0, r4
 80046da:	f7ff ff83 	bl	80045e4 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046de:	2200      	movs	r2, #0
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	7722      	strb	r2, [r4, #28]
 80046e4:	e78b      	b.n	80045fe <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046e6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80046ea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046ec:	611a      	str	r2, [r3, #16]
}
 80046ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80046f2:	f000 b825 	b.w	8004740 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046fa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80046fc:	4620      	mov	r0, r4
 80046fe:	f7ff ff73 	bl	80045e8 <HAL_TIM_TriggerCallback>
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	e79f      	b.n	8004646 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004706:	f06f 0201 	mvn.w	r2, #1
 800470a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800470c:	4620      	mov	r0, r4
 800470e:	f002 fcd3 	bl	80070b8 <HAL_TIM_PeriodElapsedCallback>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	e78b      	b.n	800462e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004716:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800471a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800471c:	4620      	mov	r0, r4
 800471e:	f000 f811 	bl	8004744 <HAL_TIMEx_BreakCallback>
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	e789      	b.n	800463a <HAL_TIM_IRQHandler+0x4e>
          HAL_TIM_IC_CaptureCallback(htim);
 8004726:	f7ff ff5b 	bl	80045e0 <HAL_TIM_IC_CaptureCallback>
 800472a:	e7d8      	b.n	80046de <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 800472c:	f7ff ff58 	bl	80045e0 <HAL_TIM_IC_CaptureCallback>
 8004730:	e79f      	b.n	8004672 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_IC_CaptureCallback(htim);
 8004732:	f7ff ff55 	bl	80045e0 <HAL_TIM_IC_CaptureCallback>
 8004736:	e7c1      	b.n	80046bc <HAL_TIM_IRQHandler+0xd0>
        HAL_TIM_IC_CaptureCallback(htim);
 8004738:	f7ff ff52 	bl	80045e0 <HAL_TIM_IC_CaptureCallback>
 800473c:	e7ab      	b.n	8004696 <HAL_TIM_IRQHandler+0xaa>
 800473e:	bf00      	nop

08004740 <HAL_TIMEx_CommutCallback>:
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop

08004744 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop

08004748 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004748:	b084      	sub	sp, #16
 800474a:	b430      	push	{r4, r5}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800474c:	9d08      	ldr	r5, [sp, #32]
{
 800474e:	ac03      	add	r4, sp, #12
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004750:	2d01      	cmp	r5, #1
{
 8004752:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004756:	d02c      	beq.n	80047b2 <USB_CoreInit+0x6a>
    ret = USB_CoreReset(USBx);
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004758:	68c2      	ldr	r2, [r0, #12]
 800475a:	4b2e      	ldr	r3, [pc, #184]	; (8004814 <USB_CoreInit+0xcc>)
 800475c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004760:	60c2      	str	r2, [r0, #12]
 8004762:	e001      	b.n	8004768 <USB_CoreInit+0x20>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004764:	3b01      	subs	r3, #1
 8004766:	d04e      	beq.n	8004806 <USB_CoreInit+0xbe>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004768:	6902      	ldr	r2, [r0, #16]
 800476a:	2a00      	cmp	r2, #0
 800476c:	dafa      	bge.n	8004764 <USB_CoreInit+0x1c>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800476e:	6903      	ldr	r3, [r0, #16]
 8004770:	4a28      	ldr	r2, [pc, #160]	; (8004814 <USB_CoreInit+0xcc>)
 8004772:	f043 0301 	orr.w	r3, r3, #1
 8004776:	6103      	str	r3, [r0, #16]
 8004778:	e001      	b.n	800477e <USB_CoreInit+0x36>

  do
  {
    if (++count > 200000U)
 800477a:	3a01      	subs	r2, #1
 800477c:	d043      	beq.n	8004806 <USB_CoreInit+0xbe>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800477e:	6903      	ldr	r3, [r0, #16]
 8004780:	f013 0301 	ands.w	r3, r3, #1
 8004784:	d1f9      	bne.n	800477a <USB_CoreInit+0x32>
    if (cfg.battery_charging_enable == 0U)
 8004786:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004788:	2a00      	cmp	r2, #0
 800478a:	d137      	bne.n	80047fc <USB_CoreInit+0xb4>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800478c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800478e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004792:	6382      	str	r2, [r0, #56]	; 0x38
  if (cfg.dma_enable == 1U)
 8004794:	9a06      	ldr	r2, [sp, #24]
 8004796:	2a01      	cmp	r2, #1
 8004798:	d107      	bne.n	80047aa <USB_CoreInit+0x62>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800479a:	6882      	ldr	r2, [r0, #8]
 800479c:	f042 0206 	orr.w	r2, r2, #6
 80047a0:	6082      	str	r2, [r0, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047a2:	6882      	ldr	r2, [r0, #8]
 80047a4:	f042 0220 	orr.w	r2, r2, #32
 80047a8:	6082      	str	r2, [r0, #8]
}
 80047aa:	bc30      	pop	{r4, r5}
 80047ac:	4618      	mov	r0, r3
 80047ae:	b004      	add	sp, #16
 80047b0:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 80047b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ba:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047bc:	68c3      	ldr	r3, [r0, #12]
 80047be:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80047c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047c6:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047c8:	68c3      	ldr	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80047ca:	2a01      	cmp	r2, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047cc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80047d0:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80047d2:	d01a      	beq.n	800480a <USB_CoreInit+0xc2>
{
 80047d4:	4b0f      	ldr	r3, [pc, #60]	; (8004814 <USB_CoreInit+0xcc>)
 80047d6:	e001      	b.n	80047dc <USB_CoreInit+0x94>
    if (++count > 200000U)
 80047d8:	3b01      	subs	r3, #1
 80047da:	d00d      	beq.n	80047f8 <USB_CoreInit+0xb0>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047dc:	6902      	ldr	r2, [r0, #16]
 80047de:	2a00      	cmp	r2, #0
 80047e0:	dafa      	bge.n	80047d8 <USB_CoreInit+0x90>
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80047e2:	6903      	ldr	r3, [r0, #16]
 80047e4:	4a0b      	ldr	r2, [pc, #44]	; (8004814 <USB_CoreInit+0xcc>)
 80047e6:	f043 0301 	orr.w	r3, r3, #1
 80047ea:	6103      	str	r3, [r0, #16]
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80047ec:	6903      	ldr	r3, [r0, #16]
 80047ee:	f013 0301 	ands.w	r3, r3, #1
 80047f2:	d0cf      	beq.n	8004794 <USB_CoreInit+0x4c>
    if (++count > 200000U)
 80047f4:	3a01      	subs	r2, #1
 80047f6:	d1f9      	bne.n	80047ec <USB_CoreInit+0xa4>
      return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e7cb      	b.n	8004794 <USB_CoreInit+0x4c>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047fc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80047fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004802:	6382      	str	r2, [r0, #56]	; 0x38
 8004804:	e7c6      	b.n	8004794 <USB_CoreInit+0x4c>
      return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e7bd      	b.n	8004786 <USB_CoreInit+0x3e>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800480a:	68c3      	ldr	r3, [r0, #12]
 800480c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004810:	60c3      	str	r3, [r0, #12]
 8004812:	e7df      	b.n	80047d4 <USB_CoreInit+0x8c>
 8004814:	00030d40 	.word	0x00030d40

08004818 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8004818:	2a02      	cmp	r2, #2
 800481a:	d00a      	beq.n	8004832 <USB_SetTurnaroundTime+0x1a>
 800481c:	f44f 5110 	mov.w	r1, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004820:	68c2      	ldr	r2, [r0, #12]
 8004822:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8004826:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004828:	68c3      	ldr	r3, [r0, #12]
 800482a:	430b      	orrs	r3, r1
 800482c:	60c3      	str	r3, [r0, #12]
}
 800482e:	2000      	movs	r0, #0
 8004830:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004832:	4b2d      	ldr	r3, [pc, #180]	; (80048e8 <USB_SetTurnaroundTime+0xd0>)
 8004834:	4a2d      	ldr	r2, [pc, #180]	; (80048ec <USB_SetTurnaroundTime+0xd4>)
 8004836:	440b      	add	r3, r1
 8004838:	4293      	cmp	r3, r2
 800483a:	d943      	bls.n	80048c4 <USB_SetTurnaroundTime+0xac>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800483c:	4b2c      	ldr	r3, [pc, #176]	; (80048f0 <USB_SetTurnaroundTime+0xd8>)
 800483e:	4a2d      	ldr	r2, [pc, #180]	; (80048f4 <USB_SetTurnaroundTime+0xdc>)
 8004840:	440b      	add	r3, r1
 8004842:	4293      	cmp	r3, r2
 8004844:	d93b      	bls.n	80048be <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004846:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 800484a:	4a2b      	ldr	r2, [pc, #172]	; (80048f8 <USB_SetTurnaroundTime+0xe0>)
 800484c:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8004850:	4293      	cmp	r3, r2
 8004852:	d93a      	bls.n	80048ca <USB_SetTurnaroundTime+0xb2>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004854:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 8004858:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 800485c:	32a0      	adds	r2, #160	; 0xa0
 800485e:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8004862:	4293      	cmp	r3, r2
 8004864:	d937      	bls.n	80048d6 <USB_SetTurnaroundTime+0xbe>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004866:	4b25      	ldr	r3, [pc, #148]	; (80048fc <USB_SetTurnaroundTime+0xe4>)
 8004868:	4a25      	ldr	r2, [pc, #148]	; (8004900 <USB_SetTurnaroundTime+0xe8>)
 800486a:	440b      	add	r3, r1
 800486c:	4293      	cmp	r3, r2
 800486e:	d92f      	bls.n	80048d0 <USB_SetTurnaroundTime+0xb8>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004870:	4b24      	ldr	r3, [pc, #144]	; (8004904 <USB_SetTurnaroundTime+0xec>)
 8004872:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 8004876:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 800487a:	440b      	add	r3, r1
 800487c:	4293      	cmp	r3, r2
 800487e:	d92d      	bls.n	80048dc <USB_SetTurnaroundTime+0xc4>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004880:	4b21      	ldr	r3, [pc, #132]	; (8004908 <USB_SetTurnaroundTime+0xf0>)
 8004882:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 8004886:	f502 7220 	add.w	r2, r2, #640	; 0x280
 800488a:	440b      	add	r3, r1
 800488c:	4293      	cmp	r3, r2
 800488e:	d9c5      	bls.n	800481c <USB_SetTurnaroundTime+0x4>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004890:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 8004894:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 8004898:	f502 7258 	add.w	r2, r2, #864	; 0x360
 800489c:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d91e      	bls.n	80048e2 <USB_SetTurnaroundTime+0xca>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80048a4:	4b19      	ldr	r3, [pc, #100]	; (800490c <USB_SetTurnaroundTime+0xf4>)
 80048a6:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
 80048aa:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 80048ae:	440b      	add	r3, r1
 80048b0:	4293      	cmp	r3, r2
 80048b2:	bf8c      	ite	hi
 80048b4:	f44f 51c0 	movhi.w	r1, #6144	; 0x1800
 80048b8:	f44f 51e0 	movls.w	r1, #7168	; 0x1c00
 80048bc:	e7b0      	b.n	8004820 <USB_SetTurnaroundTime+0x8>
 80048be:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80048c2:	e7ad      	b.n	8004820 <USB_SetTurnaroundTime+0x8>
 80048c4:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 80048c8:	e7aa      	b.n	8004820 <USB_SetTurnaroundTime+0x8>
 80048ca:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 80048ce:	e7a7      	b.n	8004820 <USB_SetTurnaroundTime+0x8>
 80048d0:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 80048d4:	e7a4      	b.n	8004820 <USB_SetTurnaroundTime+0x8>
 80048d6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80048da:	e7a1      	b.n	8004820 <USB_SetTurnaroundTime+0x8>
 80048dc:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 80048e0:	e79e      	b.n	8004820 <USB_SetTurnaroundTime+0x8>
 80048e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80048e6:	e79b      	b.n	8004820 <USB_SetTurnaroundTime+0x8>
 80048e8:	ff275340 	.word	0xff275340
 80048ec:	000c34ff 	.word	0x000c34ff
 80048f0:	ff1b1e40 	.word	0xff1b1e40
 80048f4:	000f423f 	.word	0x000f423f
 80048f8:	00124f7f 	.word	0x00124f7f
 80048fc:	fee5b660 	.word	0xfee5b660
 8004900:	0016e35f 	.word	0x0016e35f
 8004904:	feced300 	.word	0xfeced300
 8004908:	feb35bc0 	.word	0xfeb35bc0
 800490c:	fe5954e0 	.word	0xfe5954e0

08004910 <USB_EnableGlobalInt>:
{
 8004910:	4602      	mov	r2, r0
}
 8004912:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004914:	6893      	ldr	r3, [r2, #8]
 8004916:	f043 0301 	orr.w	r3, r3, #1
 800491a:	6093      	str	r3, [r2, #8]
}
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop

08004920 <USB_DisableGlobalInt>:
{
 8004920:	4602      	mov	r2, r0
}
 8004922:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004924:	6893      	ldr	r3, [r2, #8]
 8004926:	f023 0301 	bic.w	r3, r3, #1
 800492a:	6093      	str	r3, [r2, #8]
}
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop

08004930 <USB_SetCurrentMode>:
{
 8004930:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004932:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004934:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004936:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800493a:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800493c:	d00b      	beq.n	8004956 <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 800493e:	b941      	cbnz	r1, 8004952 <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004940:	68c3      	ldr	r3, [r0, #12]
 8004942:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004946:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8004948:	2032      	movs	r0, #50	; 0x32
 800494a:	f7fc fd83 	bl	8001454 <HAL_Delay>
  return HAL_OK;
 800494e:	2000      	movs	r0, #0
 8004950:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8004952:	2001      	movs	r0, #1
}
 8004954:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004956:	68c3      	ldr	r3, [r0, #12]
 8004958:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800495c:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800495e:	2032      	movs	r0, #50	; 0x32
 8004960:	f7fc fd78 	bl	8001454 <HAL_Delay>
  return HAL_OK;
 8004964:	2000      	movs	r0, #0
 8004966:	bd08      	pop	{r3, pc}

08004968 <USB_DevInit>:
{
 8004968:	b084      	sub	sp, #16
 800496a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800496e:	ac0a      	add	r4, sp, #40	; 0x28
 8004970:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8004974:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8004976:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    USBx->DIEPTXF[i] = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8004980:	468e      	mov	lr, r1
 8004982:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8004986:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 800498a:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 800498e:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8004992:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8004996:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
 800499a:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 800499e:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 80049a2:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 80049a6:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
 80049aa:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
 80049ae:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
 80049b2:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
 80049b6:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 80049ba:	2e00      	cmp	r6, #0
 80049bc:	f040 809c 	bne.w	8004af8 <USB_DevInit+0x190>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80049c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80049c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049c6:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80049c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80049ca:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80049ce:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80049d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80049d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049d6:	6383      	str	r3, [r0, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80049e0:	f8d0 2800 	ldr.w	r2, [r0, #2048]	; 0x800
 80049e4:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049e8:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80049ea:	f500 6500 	add.w	r5, r0, #2048	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049ee:	f000 809a 	beq.w	8004b26 <USB_DevInit+0x1be>
  USBx_DEVICE->DCFG |= speed;
 80049f2:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80049f6:	f043 0303 	orr.w	r3, r3, #3
 80049fa:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80049fe:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8004a02:	6103      	str	r3, [r0, #16]
 8004a04:	4a55      	ldr	r2, [pc, #340]	; (8004b5c <USB_DevInit+0x1f4>)
 8004a06:	e002      	b.n	8004a0e <USB_DevInit+0xa6>
    if (++count > 200000U)
 8004a08:	3a01      	subs	r2, #1
 8004a0a:	f000 809d 	beq.w	8004b48 <USB_DevInit+0x1e0>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a0e:	6903      	ldr	r3, [r0, #16]
 8004a10:	f013 0320 	ands.w	r3, r3, #32
 8004a14:	d1f8      	bne.n	8004a08 <USB_DevInit+0xa0>
  HAL_StatusTypeDef ret = HAL_OK;
 8004a16:	469c      	mov	ip, r3
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a18:	2210      	movs	r2, #16
 8004a1a:	6102      	str	r2, [r0, #16]
 8004a1c:	4a4f      	ldr	r2, [pc, #316]	; (8004b5c <USB_DevInit+0x1f4>)
 8004a1e:	e002      	b.n	8004a26 <USB_DevInit+0xbe>
    if (++count > 200000U)
 8004a20:	3a01      	subs	r2, #1
 8004a22:	f000 808e 	beq.w	8004b42 <USB_DevInit+0x1da>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a26:	6901      	ldr	r1, [r0, #16]
 8004a28:	06cb      	lsls	r3, r1, #27
 8004a2a:	d4f9      	bmi.n	8004a20 <USB_DevInit+0xb8>
  USBx_DEVICE->DIEPMSK = 0U;
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	6129      	str	r1, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a30:	6169      	str	r1, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a32:	61e9      	str	r1, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a34:	f1be 0f00 	cmp.w	lr, #0
 8004a38:	d019      	beq.n	8004a6e <USB_DevInit+0x106>
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a3a:	460f      	mov	r7, r1
 8004a3c:	f500 6210 	add.w	r2, r0, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a40:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a44:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a4c:	e007      	b.n	8004a5e <USB_DevInit+0xf6>
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a4e:	6017      	str	r7, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a50:	3101      	adds	r1, #1
 8004a52:	4571      	cmp	r1, lr
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a54:	6117      	str	r7, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a56:	6093      	str	r3, [r2, #8]
 8004a58:	f102 0220 	add.w	r2, r2, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a5c:	d031      	beq.n	8004ac2 <USB_DevInit+0x15a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a5e:	6814      	ldr	r4, [r2, #0]
 8004a60:	2c00      	cmp	r4, #0
 8004a62:	daf4      	bge.n	8004a4e <USB_DevInit+0xe6>
      if (i == 0U)
 8004a64:	2900      	cmp	r1, #0
 8004a66:	d072      	beq.n	8004b4e <USB_DevInit+0x1e6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a68:	f8c2 9000 	str.w	r9, [r2]
 8004a6c:	e7f0      	b.n	8004a50 <USB_DevInit+0xe8>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a6e:	692a      	ldr	r2, [r5, #16]
  if (cfg.dma_enable == 1U)
 8004a70:	f1bb 0f01 	cmp.w	fp, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a78:	612a      	str	r2, [r5, #16]
  if (cfg.dma_enable == 1U)
 8004a7a:	d046      	beq.n	8004b0a <USB_DevInit+0x1a2>
  USBx->GINTMSK = 0U;
 8004a7c:	2100      	movs	r1, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a7e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 8004a82:	6181      	str	r1, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a84:	6142      	str	r2, [r0, #20]
  if (cfg.dma_enable == 0U)
 8004a86:	f1bb 0f00 	cmp.w	fp, #0
 8004a8a:	d103      	bne.n	8004a94 <USB_DevInit+0x12c>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a8c:	6982      	ldr	r2, [r0, #24]
 8004a8e:	f042 0210 	orr.w	r2, r2, #16
 8004a92:	6182      	str	r2, [r0, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a94:	6984      	ldr	r4, [r0, #24]
 8004a96:	4a32      	ldr	r2, [pc, #200]	; (8004b60 <USB_DevInit+0x1f8>)
  if (cfg.Sof_enable != 0U)
 8004a98:	9910      	ldr	r1, [sp, #64]	; 0x40
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a9a:	4322      	orrs	r2, r4
 8004a9c:	6182      	str	r2, [r0, #24]
  if (cfg.Sof_enable != 0U)
 8004a9e:	b119      	cbz	r1, 8004aa8 <USB_DevInit+0x140>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004aa0:	6982      	ldr	r2, [r0, #24]
 8004aa2:	f042 0208 	orr.w	r2, r2, #8
 8004aa6:	6182      	str	r2, [r0, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8004aa8:	2e01      	cmp	r6, #1
 8004aaa:	d105      	bne.n	8004ab8 <USB_DevInit+0x150>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004aac:	6982      	ldr	r2, [r0, #24]
 8004aae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004ab2:	f042 0204 	orr.w	r2, r2, #4
 8004ab6:	6182      	str	r2, [r0, #24]
}
 8004ab8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004abc:	4660      	mov	r0, ip
 8004abe:	b004      	add	sp, #16
 8004ac0:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ac2:	2400      	movs	r4, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ac4:	4623      	mov	r3, r4
 8004ac6:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004aca:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ace:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ad2:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 8004ad6:	e008      	b.n	8004aea <USB_DevInit+0x182>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ad8:	6013      	str	r3, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ada:	3401      	adds	r4, #1
 8004adc:	42a1      	cmp	r1, r4
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ade:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ae0:	f8c2 8008 	str.w	r8, [r2, #8]
 8004ae4:	f102 0220 	add.w	r2, r2, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ae8:	d0c1      	beq.n	8004a6e <USB_DevInit+0x106>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004aea:	6817      	ldr	r7, [r2, #0]
 8004aec:	2f00      	cmp	r7, #0
 8004aee:	daf3      	bge.n	8004ad8 <USB_DevInit+0x170>
      if (i == 0U)
 8004af0:	b384      	cbz	r4, 8004b54 <USB_DevInit+0x1ec>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004af2:	f8c2 9000 	str.w	r9, [r2]
 8004af6:	e7f0      	b.n	8004ada <USB_DevInit+0x172>
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004af8:	6803      	ldr	r3, [r0, #0]
 8004afa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004afe:	6003      	str	r3, [r0, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004b00:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004b02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b06:	6383      	str	r3, [r0, #56]	; 0x38
 8004b08:	e766      	b.n	80049d8 <USB_DevInit+0x70>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8004b0a:	4a16      	ldr	r2, [pc, #88]	; (8004b64 <USB_DevInit+0x1fc>)
 8004b0c:	632a      	str	r2, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8004b0e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004b10:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004b14:	f042 0203 	orr.w	r2, r2, #3
  USBx->GINTMSK = 0U;
 8004b18:	2400      	movs	r4, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b1a:	f06f 4180 	mvn.w	r1, #1073741824	; 0x40000000
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8004b1e:	632a      	str	r2, [r5, #48]	; 0x30
  USBx->GINTMSK = 0U;
 8004b20:	6184      	str	r4, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b22:	6141      	str	r1, [r0, #20]
 8004b24:	e7b6      	b.n	8004a94 <USB_DevInit+0x12c>
    if (cfg.speed == USBD_HS_SPEED)
 8004b26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b28:	b923      	cbnz	r3, 8004b34 <USB_DevInit+0x1cc>
  USBx_DEVICE->DCFG |= speed;
 8004b2a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004b2e:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
 8004b32:	e764      	b.n	80049fe <USB_DevInit+0x96>
 8004b34:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004b38:	f043 0301 	orr.w	r3, r3, #1
 8004b3c:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
 8004b40:	e75d      	b.n	80049fe <USB_DevInit+0x96>
    ret = HAL_ERROR;
 8004b42:	f04f 0c01 	mov.w	ip, #1
 8004b46:	e771      	b.n	8004a2c <USB_DevInit+0xc4>
    ret = HAL_ERROR;
 8004b48:	f04f 0c01 	mov.w	ip, #1
 8004b4c:	e764      	b.n	8004a18 <USB_DevInit+0xb0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b4e:	f8c2 a000 	str.w	sl, [r2]
 8004b52:	e77d      	b.n	8004a50 <USB_DevInit+0xe8>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b54:	f8c2 a000 	str.w	sl, [r2]
 8004b58:	e7bf      	b.n	8004ada <USB_DevInit+0x172>
 8004b5a:	bf00      	nop
 8004b5c:	00030d40 	.word	0x00030d40
 8004b60:	803c3800 	.word	0x803c3800
 8004b64:	00800100 	.word	0x00800100

08004b68 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b68:	0189      	lsls	r1, r1, #6
 8004b6a:	f041 0120 	orr.w	r1, r1, #32
 8004b6e:	6101      	str	r1, [r0, #16]
 8004b70:	4a05      	ldr	r2, [pc, #20]	; (8004b88 <USB_FlushTxFifo+0x20>)
 8004b72:	e001      	b.n	8004b78 <USB_FlushTxFifo+0x10>
    if (++count > 200000U)
 8004b74:	3a01      	subs	r2, #1
 8004b76:	d005      	beq.n	8004b84 <USB_FlushTxFifo+0x1c>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b78:	6903      	ldr	r3, [r0, #16]
 8004b7a:	f013 0320 	ands.w	r3, r3, #32
 8004b7e:	d1f9      	bne.n	8004b74 <USB_FlushTxFifo+0xc>
  return HAL_OK;
 8004b80:	4618      	mov	r0, r3
 8004b82:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004b84:	2003      	movs	r0, #3
}
 8004b86:	4770      	bx	lr
 8004b88:	00030d40 	.word	0x00030d40

08004b8c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004b8c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004b90:	f013 0006 	ands.w	r0, r3, #6
 8004b94:	d004      	beq.n	8004ba0 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004b96:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 8004b9a:	bf14      	ite	ne
 8004b9c:	2002      	movne	r0, #2
 8004b9e:	200f      	moveq	r0, #15
}
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop

08004ba4 <USB_ActivateEndpoint>:
{
 8004ba4:	b470      	push	{r4, r5, r6}
  if (ep->is_in == 1U)
 8004ba6:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8004ba8:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d022      	beq.n	8004bf4 <USB_ActivateEndpoint+0x50>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004bae:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8004bb2:	f004 060f 	and.w	r6, r4, #15
 8004bb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bba:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8004bbe:	40b3      	lsls	r3, r6
 8004bc0:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004bc2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004bc6:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004bc8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004bcc:	041b      	lsls	r3, r3, #16
 8004bce:	d40e      	bmi.n	8004bee <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004bd0:	688a      	ldr	r2, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 8004bd2:	78cc      	ldrb	r4, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004bd4:	f8d0 1b00 	ldr.w	r1, [r0, #2816]	; 0xb00
 8004bd8:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8004bdc:	f042 5380 	orr.w	r3, r2, #268435456	; 0x10000000
 8004be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be4:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8004be8:	430b      	orrs	r3, r1
 8004bea:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8004bee:	2000      	movs	r0, #0
 8004bf0:	bc70      	pop	{r4, r5, r6}
 8004bf2:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004bf4:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 8004bf8:	f004 020f 	and.w	r2, r4, #15
 8004bfc:	fa03 f202 	lsl.w	r2, r3, r2
 8004c00:	4332      	orrs	r2, r6
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004c02:	eb00 1344 	add.w	r3, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004c06:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004c0a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8004c0e:	0412      	lsls	r2, r2, #16
 8004c10:	d4ed      	bmi.n	8004bee <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c12:	688a      	ldr	r2, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c14:	78cd      	ldrb	r5, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c16:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8004c1a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8004c1e:	f042 5080 	orr.w	r0, r2, #268435456	; 0x10000000
 8004c22:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8004c26:	ea40 4085 	orr.w	r0, r0, r5, lsl #18
 8004c2a:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 8004c2e:	4308      	orrs	r0, r1
 8004c30:	f8c3 0900 	str.w	r0, [r3, #2304]	; 0x900
}
 8004c34:	bc70      	pop	{r4, r5, r6}
 8004c36:	2000      	movs	r0, #0
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop

08004c3c <USB_DeactivateEndpoint>:
{
 8004c3c:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 8004c3e:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8004c40:	7809      	ldrb	r1, [r1, #0]
  if (ep->is_in == 1U)
 8004c42:	2b01      	cmp	r3, #1
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c44:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8004c48:	f001 040f 	and.w	r4, r1, #15
  if (ep->is_in == 1U)
 8004c4c:	d017      	beq.n	8004c7e <USB_DeactivateEndpoint+0x42>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c52:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8004c56:	40a3      	lsls	r3, r4
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	401d      	ands	r5, r3
 8004c5c:	f8c0 583c 	str.w	r5, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c60:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004c64:	4c11      	ldr	r4, [pc, #68]	; (8004cac <USB_DeactivateEndpoint+0x70>)
 8004c66:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c6a:	402b      	ands	r3, r5
 8004c6c:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004c6e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004c72:	401c      	ands	r4, r3
 8004c74:	f8c0 4b00 	str.w	r4, [r0, #2816]	; 0xb00
}
 8004c78:	2000      	movs	r0, #0
 8004c7a:	bc30      	pop	{r4, r5}
 8004c7c:	4770      	bx	lr
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c7e:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8004c82:	40a3      	lsls	r3, r4
 8004c84:	43db      	mvns	r3, r3
 8004c86:	401d      	ands	r5, r3
 8004c88:	f8c0 583c 	str.w	r5, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c8c:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004c90:	4c07      	ldr	r4, [pc, #28]	; (8004cb0 <USB_DeactivateEndpoint+0x74>)
 8004c92:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c96:	402b      	ands	r3, r5
 8004c98:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004c9a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004c9e:	401c      	ands	r4, r3
 8004ca0:	f8c0 4900 	str.w	r4, [r0, #2304]	; 0x900
}
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	bc30      	pop	{r4, r5}
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	eff37800 	.word	0xeff37800
 8004cb0:	ec337800 	.word	0xec337800

08004cb4 <USB_EPStartXfer>:
{
 8004cb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (ep->is_in == 1U)
 8004cb8:	784d      	ldrb	r5, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8004cba:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8004cbc:	2d01      	cmp	r5, #1
 8004cbe:	d053      	beq.n	8004d68 <USB_EPStartXfer+0xb4>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004cc0:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8004cc4:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8004cc8:	691e      	ldr	r6, [r3, #16]
    if (ep->xfer_len == 0U)
 8004cca:	694d      	ldr	r5, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ccc:	0cf6      	lsrs	r6, r6, #19
 8004cce:	04f6      	lsls	r6, r6, #19
 8004cd0:	611e      	str	r6, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004cd2:	691e      	ldr	r6, [r3, #16]
 8004cd4:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8004cd8:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8004cdc:	611e      	str	r6, [r3, #16]
    if (ep->xfer_len == 0U)
 8004cde:	b315      	cbz	r5, 8004d26 <USB_EPStartXfer+0x72>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ce0:	688e      	ldr	r6, [r1, #8]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004ce2:	4f78      	ldr	r7, [pc, #480]	; (8004ec4 <USB_EPStartXfer+0x210>)
 8004ce4:	f8d3 e010 	ldr.w	lr, [r3, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ce8:	4435      	add	r5, r6
 8004cea:	3d01      	subs	r5, #1
 8004cec:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004cf0:	ea07 47c5 	and.w	r7, r7, r5, lsl #19
 8004cf4:	ea47 070e 	orr.w	r7, r7, lr
 8004cf8:	611f      	str	r7, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004cfa:	b2ad      	uxth	r5, r5
 8004cfc:	fb06 f505 	mul.w	r5, r6, r5
 8004d00:	691e      	ldr	r6, [r3, #16]
 8004d02:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8004d06:	4335      	orrs	r5, r6
    if (dma == 1U)
 8004d08:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004d0a:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8004d0c:	d017      	beq.n	8004d3e <USB_EPStartXfer+0x8a>
    if (ep->type == EP_TYPE_ISOC)
 8004d0e:	78cb      	ldrb	r3, [r1, #3]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d01b      	beq.n	8004d4c <USB_EPStartXfer+0x98>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d14:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8004d18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d1c:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 8004d20:	2000      	movs	r0, #0
 8004d22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004d26:	688d      	ldr	r5, [r1, #8]
 8004d28:	691e      	ldr	r6, [r3, #16]
 8004d2a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8004d2e:	4335      	orrs	r5, r6
 8004d30:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d32:	691d      	ldr	r5, [r3, #16]
    if (dma == 1U)
 8004d34:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d36:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8004d3a:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8004d3c:	d1e7      	bne.n	8004d0e <USB_EPStartXfer+0x5a>
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d3e:	68ca      	ldr	r2, [r1, #12]
 8004d40:	2a00      	cmp	r2, #0
 8004d42:	d0e4      	beq.n	8004d0e <USB_EPStartXfer+0x5a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d44:	615a      	str	r2, [r3, #20]
    if (ep->type == EP_TYPE_ISOC)
 8004d46:	78cb      	ldrb	r3, [r1, #3]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d1e3      	bne.n	8004d14 <USB_EPStartXfer+0x60>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d4c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8004d50:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004d54:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8004d58:	bf0c      	ite	eq
 8004d5a:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004d5e:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8004d62:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 8004d66:	e7d5      	b.n	8004d14 <USB_EPStartXfer+0x60>
    if (ep->xfer_len == 0U)
 8004d68:	694e      	ldr	r6, [r1, #20]
 8004d6a:	2e00      	cmp	r6, #0
 8004d6c:	d03e      	beq.n	8004dec <USB_EPStartXfer+0x138>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d6e:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 8004d72:	f50c 6310 	add.w	r3, ip, #2304	; 0x900
 8004d76:	f8d3 e010 	ldr.w	lr, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004d7a:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8004d7e:	4f51      	ldr	r7, [pc, #324]	; (8004ec4 <USB_EPStartXfer+0x210>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d80:	ea4f 4ede 	mov.w	lr, lr, lsr #19
 8004d84:	ea4f 4ece 	mov.w	lr, lr, lsl #19
 8004d88:	f8c3 e010 	str.w	lr, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d8c:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8004d90:	f028 58ff 	bic.w	r8, r8, #534773760	; 0x1fe00000
 8004d94:	f428 18c0 	bic.w	r8, r8, #1572864	; 0x180000
 8004d98:	f8c3 8010 	str.w	r8, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004d9c:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8004da0:	eb06 0e09 	add.w	lr, r6, r9
 8004da4:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8004da8:	fbbe fef9 	udiv	lr, lr, r9
 8004dac:	ea07 47ce 	and.w	r7, r7, lr, lsl #19
 8004db0:	ea47 0708 	orr.w	r7, r7, r8
 8004db4:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004db6:	f8d3 e010 	ldr.w	lr, [r3, #16]
 8004dba:	f3c6 0712 	ubfx	r7, r6, #0, #19
 8004dbe:	ea47 070e 	orr.w	r7, r7, lr
 8004dc2:	611f      	str	r7, [r3, #16]
      if (ep->type == EP_TYPE_ISOC)
 8004dc4:	78cf      	ldrb	r7, [r1, #3]
 8004dc6:	2f01      	cmp	r7, #1
 8004dc8:	d058      	beq.n	8004e7c <USB_EPStartXfer+0x1c8>
    if (dma == 1U)
 8004dca:	2a01      	cmp	r2, #1
 8004dcc:	d076      	beq.n	8004ebc <USB_EPStartXfer+0x208>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dce:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 8004dd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dd6:	f8cc 3900 	str.w	r3, [ip, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004dda:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8004dde:	f004 040f 	and.w	r4, r4, #15
 8004de2:	40a5      	lsls	r5, r4
 8004de4:	431d      	orrs	r5, r3
 8004de6:	f8c0 5834 	str.w	r5, [r0, #2100]	; 0x834
  return HAL_OK;
 8004dea:	e799      	b.n	8004d20 <USB_EPStartXfer+0x6c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dec:	eb00 1e44 	add.w	lr, r0, r4, lsl #5
 8004df0:	f50e 6310 	add.w	r3, lr, #2304	; 0x900
 8004df4:	691d      	ldr	r5, [r3, #16]
 8004df6:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8004dfa:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8004dfe:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e00:	691d      	ldr	r5, [r3, #16]
 8004e02:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8004e06:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e08:	691d      	ldr	r5, [r3, #16]
 8004e0a:	0ced      	lsrs	r5, r5, #19
 8004e0c:	04ed      	lsls	r5, r5, #19
 8004e0e:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8004e10:	2a01      	cmp	r2, #1
 8004e12:	78cf      	ldrb	r7, [r1, #3]
 8004e14:	d028      	beq.n	8004e68 <USB_EPStartXfer+0x1b4>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e16:	f8de 5900 	ldr.w	r5, [lr, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8004e1a:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e1c:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 8004e20:	f8ce 5900 	str.w	r5, [lr, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8004e24:	f47f af7c 	bne.w	8004d20 <USB_EPStartXfer+0x6c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e28:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
 8004e2c:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e30:	681d      	ldr	r5, [r3, #0]
 8004e32:	bf0c      	ite	eq
 8004e34:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e38:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 8004e3c:	601d      	str	r5, [r3, #0]
  if (dma == 0U)
 8004e3e:	2a00      	cmp	r2, #0
 8004e40:	f47f af6e 	bne.w	8004d20 <USB_EPStartXfer+0x6c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8004e44:	b2b6      	uxth	r6, r6
 8004e46:	3603      	adds	r6, #3
    for (i = 0U; i < count32b; i++)
 8004e48:	08b6      	lsrs	r6, r6, #2
 8004e4a:	f43f af69 	beq.w	8004d20 <USB_EPStartXfer+0x6c>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004e4e:	68cb      	ldr	r3, [r1, #12]
 8004e50:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 8004e54:	eb03 0186 	add.w	r1, r3, r6, lsl #2
 8004e58:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004e5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e60:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8004e62:	428b      	cmp	r3, r1
 8004e64:	d1fa      	bne.n	8004e5c <USB_EPStartXfer+0x1a8>
 8004e66:	e75b      	b.n	8004d20 <USB_EPStartXfer+0x6c>
      if ((uint32_t)ep->dma_addr != 0U)
 8004e68:	690a      	ldr	r2, [r1, #16]
 8004e6a:	b102      	cbz	r2, 8004e6e <USB_EPStartXfer+0x1ba>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e6c:	615a      	str	r2, [r3, #20]
      if (ep->type == EP_TYPE_ISOC)
 8004e6e:	2f01      	cmp	r7, #1
 8004e70:	d018      	beq.n	8004ea4 <USB_EPStartXfer+0x1f0>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	e751      	b.n	8004d20 <USB_EPStartXfer+0x6c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004e7c:	691d      	ldr	r5, [r3, #16]
 8004e7e:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8004e82:	611d      	str	r5, [r3, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004e84:	691d      	ldr	r5, [r3, #16]
    if (dma == 1U)
 8004e86:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004e88:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004e8c:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8004e8e:	d006      	beq.n	8004e9e <USB_EPStartXfer+0x1ea>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e90:	f8dc 5900 	ldr.w	r5, [ip, #2304]	; 0x900
 8004e94:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 8004e98:	f8cc 5900 	str.w	r5, [ip, #2304]	; 0x900
 8004e9c:	e7c4      	b.n	8004e28 <USB_EPStartXfer+0x174>
      if ((uint32_t)ep->dma_addr != 0U)
 8004e9e:	690a      	ldr	r2, [r1, #16]
 8004ea0:	2a00      	cmp	r2, #0
 8004ea2:	d1e3      	bne.n	8004e6c <USB_EPStartXfer+0x1b8>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ea4:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8004ea8:	f412 7f80 	tst.w	r2, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	bf0c      	ite	eq
 8004eb0:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004eb4:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	e7da      	b.n	8004e72 <USB_EPStartXfer+0x1be>
      if ((uint32_t)ep->dma_addr != 0U)
 8004ebc:	690a      	ldr	r2, [r1, #16]
 8004ebe:	2a00      	cmp	r2, #0
 8004ec0:	d0d7      	beq.n	8004e72 <USB_EPStartXfer+0x1be>
 8004ec2:	e7d3      	b.n	8004e6c <USB_EPStartXfer+0x1b8>
 8004ec4:	1ff80000 	.word	0x1ff80000

08004ec8 <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 8004ec8:	784b      	ldrb	r3, [r1, #1]
 8004eca:	2b01      	cmp	r3, #1
{
 8004ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8004ece:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8004ed0:	d025      	beq.n	8004f1e <USB_EP0StartXfer+0x56>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ed2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8004ed6:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8004eda:	691c      	ldr	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8004edc:	694d      	ldr	r5, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ede:	0ce4      	lsrs	r4, r4, #19
 8004ee0:	04e4      	lsls	r4, r4, #19
 8004ee2:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ee4:	691c      	ldr	r4, [r3, #16]
 8004ee6:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8004eea:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8004eee:	611c      	str	r4, [r3, #16]
      ep->xfer_len = ep->maxpacket;
 8004ef0:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len > 0U)
 8004ef2:	b995      	cbnz	r5, 8004f1a <USB_EP0StartXfer+0x52>
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ef4:	691d      	ldr	r5, [r3, #16]
 8004ef6:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8004efa:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004efc:	691d      	ldr	r5, [r3, #16]
 8004efe:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8004f02:	432c      	orrs	r4, r5
    if (dma == 1U)
 8004f04:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004f06:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8004f08:	d042      	beq.n	8004f90 <USB_EP0StartXfer+0xc8>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f0a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004f0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f12:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8004f16:	2000      	movs	r0, #0
 8004f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ep->xfer_len = ep->maxpacket;
 8004f1a:	614c      	str	r4, [r1, #20]
 8004f1c:	e7ea      	b.n	8004ef4 <USB_EP0StartXfer+0x2c>
    if (ep->xfer_len == 0U)
 8004f1e:	694d      	ldr	r5, [r1, #20]
 8004f20:	2d00      	cmp	r5, #0
 8004f22:	d03a      	beq.n	8004f9a <USB_EP0StartXfer+0xd2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f24:	eb00 1744 	add.w	r7, r0, r4, lsl #5
 8004f28:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8004f2c:	691e      	ldr	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8004f2e:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f32:	0cf6      	lsrs	r6, r6, #19
 8004f34:	04f6      	lsls	r6, r6, #19
 8004f36:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f38:	691e      	ldr	r6, [r3, #16]
 8004f3a:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8004f3e:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8004f42:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f44:	691e      	ldr	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8004f46:	4575      	cmp	r5, lr
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f48:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
        ep->xfer_len = ep->maxpacket;
 8004f4c:	bf88      	it	hi
 8004f4e:	f8c1 e014 	strhi.w	lr, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f52:	611e      	str	r6, [r3, #16]
        ep->xfer_len = ep->maxpacket;
 8004f54:	bf88      	it	hi
 8004f56:	4675      	movhi	r5, lr
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f58:	f8d3 e010 	ldr.w	lr, [r3, #16]
 8004f5c:	f3c5 0612 	ubfx	r6, r5, #0, #19
 8004f60:	ea46 060e 	orr.w	r6, r6, lr
    if (dma == 1U)
 8004f64:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f66:	611e      	str	r6, [r3, #16]
    if (dma == 1U)
 8004f68:	d033      	beq.n	8004fd2 <USB_EP0StartXfer+0x10a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f6a:	f8d7 3900 	ldr.w	r3, [r7, #2304]	; 0x900
 8004f6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f72:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8004f76:	2d00      	cmp	r5, #0
 8004f78:	d0cd      	beq.n	8004f16 <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f7a:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8004f7e:	f004 000f 	and.w	r0, r4, #15
 8004f82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f84:	2401      	movs	r4, #1
 8004f86:	4084      	lsls	r4, r0
 8004f88:	4314      	orrs	r4, r2
 8004f8a:	635c      	str	r4, [r3, #52]	; 0x34
}
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f90:	68ca      	ldr	r2, [r1, #12]
 8004f92:	2a00      	cmp	r2, #0
 8004f94:	d0b9      	beq.n	8004f0a <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f96:	615a      	str	r2, [r3, #20]
 8004f98:	e7b7      	b.n	8004f0a <USB_EP0StartXfer+0x42>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f9a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8004f9e:	f500 6310 	add.w	r3, r0, #2304	; 0x900
 8004fa2:	691c      	ldr	r4, [r3, #16]
 8004fa4:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8004fa8:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8004fac:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fae:	691c      	ldr	r4, [r3, #16]
 8004fb0:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8004fb4:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fb6:	691c      	ldr	r4, [r3, #16]
 8004fb8:	0ce4      	lsrs	r4, r4, #19
 8004fba:	04e4      	lsls	r4, r4, #19
    if (dma == 1U)
 8004fbc:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fbe:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8004fc0:	d007      	beq.n	8004fd2 <USB_EP0StartXfer+0x10a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fc2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004fc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fca:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8004fce:	2000      	movs	r0, #0
 8004fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 8004fd2:	690a      	ldr	r2, [r1, #16]
 8004fd4:	b102      	cbz	r2, 8004fd8 <USB_EP0StartXfer+0x110>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004fd6:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	e799      	b.n	8004f16 <USB_EP0StartXfer+0x4e>
 8004fe2:	bf00      	nop

08004fe4 <USB_WritePacket>:
{
 8004fe4:	b410      	push	{r4}
 8004fe6:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8004fea:	b96c      	cbnz	r4, 8005008 <USB_WritePacket+0x24>
    count32b = ((uint32_t)len + 3U) / 4U;
 8004fec:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8004fee:	089b      	lsrs	r3, r3, #2
 8004ff0:	d00a      	beq.n	8005008 <USB_WritePacket+0x24>
 8004ff2:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8004ff6:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8004ffa:	eb01 0283 	add.w	r2, r1, r3, lsl #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ffe:	f851 3b04 	ldr.w	r3, [r1], #4
 8005002:	6003      	str	r3, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8005004:	4291      	cmp	r1, r2
 8005006:	d1fa      	bne.n	8004ffe <USB_WritePacket+0x1a>
}
 8005008:	2000      	movs	r0, #0
 800500a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800500e:	4770      	bx	lr

08005010 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005010:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 8005012:	0892      	lsrs	r2, r2, #2
 8005014:	d00d      	beq.n	8005032 <USB_ReadPacket+0x22>
{
 8005016:	b410      	push	{r4}
 8005018:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800501c:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8005020:	4608      	mov	r0, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	f840 3b04 	str.w	r3, [r0], #4
  for (i = 0U; i < count32b; i++)
 8005028:	4282      	cmp	r2, r0
 800502a:	d1fa      	bne.n	8005022 <USB_ReadPacket+0x12>
}
 800502c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005030:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 8005032:	4608      	mov	r0, r1
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop

08005038 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8005038:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800503a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800503c:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800503e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8005042:	d013      	beq.n	800506c <USB_EPSetStall+0x34>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005044:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8005048:	2a00      	cmp	r2, #0
 800504a:	db00      	blt.n	800504e <USB_EPSetStall+0x16>
 800504c:	b93b      	cbnz	r3, 800505e <USB_EPSetStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800504e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005052:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005056:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800505a:	2000      	movs	r0, #0
 800505c:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800505e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005062:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005066:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800506a:	e7f0      	b.n	800504e <USB_EPSetStall+0x16>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800506c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8005070:	2a00      	cmp	r2, #0
 8005072:	db06      	blt.n	8005082 <USB_EPSetStall+0x4a>
 8005074:	b12b      	cbz	r3, 8005082 <USB_EPSetStall+0x4a>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005076:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800507a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800507e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005082:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005086:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800508a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800508e:	2000      	movs	r0, #0
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop

08005094 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8005094:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8005096:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8005098:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800509a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800509e:	d013      	beq.n	80050c8 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80050a0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80050a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050a8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80050ac:	78cb      	ldrb	r3, [r1, #3]
 80050ae:	3b02      	subs	r3, #2
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d901      	bls.n	80050b8 <USB_EPClearStall+0x24>
}
 80050b4:	2000      	movs	r0, #0
 80050b6:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050b8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80050bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80050c4:	2000      	movs	r0, #0
 80050c6:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80050c8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80050cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050d0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80050d4:	78cb      	ldrb	r3, [r1, #3]
 80050d6:	3b02      	subs	r3, #2
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d8eb      	bhi.n	80050b4 <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050dc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80050e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80050e8:	e7e4      	b.n	80050b4 <USB_EPClearStall+0x20>
 80050ea:	bf00      	nop

080050ec <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80050ec:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80050f0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80050f4:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80050f8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80050fc:	0109      	lsls	r1, r1, #4
 80050fe:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8005102:	4319      	orrs	r1, r3
 8005104:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8005108:	2000      	movs	r0, #0
 800510a:	4770      	bx	lr

0800510c <USB_DevConnect>:
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800510c:	f500 6200 	add.w	r2, r0, #2048	; 0x800
{
 8005110:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005112:	6853      	ldr	r3, [r2, #4]
 8005114:	f023 0302 	bic.w	r3, r3, #2
  HAL_Delay(3U);
 8005118:	2003      	movs	r0, #3
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800511a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800511c:	f7fc f99a 	bl	8001454 <HAL_Delay>
}
 8005120:	2000      	movs	r0, #0
 8005122:	bd08      	pop	{r3, pc}

08005124 <USB_DevDisconnect>:
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005124:	f500 6200 	add.w	r2, r0, #2048	; 0x800
{
 8005128:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800512a:	6853      	ldr	r3, [r2, #4]
 800512c:	f043 0302 	orr.w	r3, r3, #2
  HAL_Delay(3U);
 8005130:	2003      	movs	r0, #3
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005132:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005134:	f7fc f98e 	bl	8001454 <HAL_Delay>
}
 8005138:	2000      	movs	r0, #0
 800513a:	bd08      	pop	{r3, pc}

0800513c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800513c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800513e:	6980      	ldr	r0, [r0, #24]
}
 8005140:	4010      	ands	r0, r2
 8005142:	4770      	bx	lr

08005144 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8005144:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8005148:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800514c:	69c0      	ldr	r0, [r0, #28]
 800514e:	4018      	ands	r0, r3
}
 8005150:	0c00      	lsrs	r0, r0, #16
 8005152:	4770      	bx	lr

08005154 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8005154:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8005158:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800515c:	69c0      	ldr	r0, [r0, #28]
 800515e:	4018      	ands	r0, r3
}
 8005160:	b280      	uxth	r0, r0
 8005162:	4770      	bx	lr

08005164 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005164:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005168:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800516c:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005170:	6940      	ldr	r0, [r0, #20]
}
 8005172:	4010      	ands	r0, r2
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop

08005178 <USB_ReadDevInEPInterrupt>:
{
 8005178:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 800517a:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800517e:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005182:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005186:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800518a:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800518e:	40cb      	lsrs	r3, r1
 8005190:	01db      	lsls	r3, r3, #7
 8005192:	b2db      	uxtb	r3, r3
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005194:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005196:	4323      	orrs	r3, r4
}
 8005198:	4018      	ands	r0, r3
 800519a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80051a0:	6940      	ldr	r0, [r0, #20]
}
 80051a2:	f000 0001 	and.w	r0, r0, #1
 80051a6:	4770      	bx	lr

080051a8 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80051a8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80051ac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80051b0:	f023 0307 	bic.w	r3, r3, #7
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80051b4:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80051b8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80051bc:	6893      	ldr	r3, [r2, #8]
 80051be:	f003 0306 	and.w	r3, r3, #6
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d105      	bne.n	80051d2 <USB_ActivateSetup+0x2a>
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80051c6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80051ca:	f043 0303 	orr.w	r3, r3, #3
 80051ce:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80051d2:	6853      	ldr	r3, [r2, #4]
 80051d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d8:	6053      	str	r3, [r2, #4]
}
 80051da:	2000      	movs	r0, #0
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop

080051e0 <USB_EP0_OutStart>:
{
 80051e0:	b410      	push	{r4}
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80051e2:	4b13      	ldr	r3, [pc, #76]	; (8005230 <USB_EP0_OutStart+0x50>)
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80051e4:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80051e6:	429c      	cmp	r4, r3
 80051e8:	d81a      	bhi.n	8005220 <USB_EP0_OutStart+0x40>
 80051ea:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051f2:	6903      	ldr	r3, [r0, #16]
 80051f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051f8:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80051fa:	6903      	ldr	r3, [r0, #16]
 80051fc:	f043 0318 	orr.w	r3, r3, #24
 8005200:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005202:	6903      	ldr	r3, [r0, #16]
  if (dma == 1U)
 8005204:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005206:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800520a:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 800520c:	d104      	bne.n	8005218 <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800520e:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005210:	6803      	ldr	r3, [r0, #0]
 8005212:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005216:	6003      	str	r3, [r0, #0]
}
 8005218:	2000      	movs	r0, #0
 800521a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800521e:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005220:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005224:	2b00      	cmp	r3, #0
 8005226:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 800522a:	dae0      	bge.n	80051ee <USB_EP0_OutStart+0xe>
 800522c:	e7f4      	b.n	8005218 <USB_EP0_OutStart+0x38>
 800522e:	bf00      	nop
 8005230:	4f54300a 	.word	0x4f54300a

08005234 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005234:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
{
 8005238:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800523a:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800523e:	b15b      	cbz	r3, 8005258 <USBD_CDC_EP0_RxReady+0x24>
 8005240:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8005244:	28ff      	cmp	r0, #255	; 0xff
 8005246:	d007      	beq.n	8005258 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800524e:	4621      	mov	r1, r4
 8005250:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 8005252:	23ff      	movs	r3, #255	; 0xff
 8005254:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8005258:	2000      	movs	r0, #0
 800525a:	bd10      	pop	{r4, pc}

0800525c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800525c:	2343      	movs	r3, #67	; 0x43
 800525e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8005260:	4800      	ldr	r0, [pc, #0]	; (8005264 <USBD_CDC_GetFSCfgDesc+0x8>)
 8005262:	4770      	bx	lr
 8005264:	20000040 	.word	0x20000040

08005268 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8005268:	2343      	movs	r3, #67	; 0x43
 800526a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800526c:	4800      	ldr	r0, [pc, #0]	; (8005270 <USBD_CDC_GetHSCfgDesc+0x8>)
 800526e:	4770      	bx	lr
 8005270:	20000084 	.word	0x20000084

08005274 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8005274:	2343      	movs	r3, #67	; 0x43
 8005276:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8005278:	4800      	ldr	r0, [pc, #0]	; (800527c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800527a:	4770      	bx	lr
 800527c:	200000d4 	.word	0x200000d4

08005280 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8005280:	230a      	movs	r3, #10
 8005282:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8005284:	4800      	ldr	r0, [pc, #0]	; (8005288 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8005286:	4770      	bx	lr
 8005288:	200000c8 	.word	0x200000c8

0800528c <USBD_CDC_DataOut>:
{
 800528c:	b538      	push	{r3, r4, r5, lr}
 800528e:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005290:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8005294:	f002 fc9e 	bl	8007bd4 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8005298:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800529c:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 80052a0:	b14b      	cbz	r3, 80052b6 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80052a2:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 80052a6:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80052b0:	4798      	blx	r3
    return USBD_OK;
 80052b2:	2000      	movs	r0, #0
 80052b4:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80052b6:	2002      	movs	r0, #2
}
 80052b8:	bd38      	pop	{r3, r4, r5, pc}
 80052ba:	bf00      	nop

080052bc <USBD_CDC_DataIn>:
{
 80052bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80052be:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if(pdev->pClassData != NULL)
 80052c2:	b1ae      	cbz	r6, 80052f0 <USBD_CDC_DataIn+0x34>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80052c4:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 80052c8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80052cc:	69ef      	ldr	r7, [r5, #28]
 80052ce:	b15f      	cbz	r7, 80052e8 <USBD_CDC_DataIn+0x2c>
 80052d0:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 80052d4:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80052d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80052dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052de:	fbb7 f4f3 	udiv	r4, r7, r3
 80052e2:	fb03 7414 	mls	r4, r3, r4, r7
 80052e6:	b12c      	cbz	r4, 80052f4 <USBD_CDC_DataIn+0x38>
      hcdc->TxState = 0U;
 80052e8:	2000      	movs	r0, #0
 80052ea:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 80052ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 80052f0:	2002      	movs	r0, #2
}
 80052f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pdev->ep_in[epnum].total_length = 0U;
 80052f4:	61ec      	str	r4, [r5, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80052f6:	4623      	mov	r3, r4
 80052f8:	4622      	mov	r2, r4
 80052fa:	f002 fc4f 	bl	8007b9c <USBD_LL_Transmit>
    return USBD_OK;
 80052fe:	4620      	mov	r0, r4
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8005300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005302:	bf00      	nop

08005304 <USBD_CDC_Setup>:
{
 8005304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005308:	780b      	ldrb	r3, [r1, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800530a:	f8d0 7290 	ldr.w	r7, [r0, #656]	; 0x290
{
 800530e:	b082      	sub	sp, #8
  uint8_t ifalt = 0U;
 8005310:	2400      	movs	r4, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005312:	f013 0860 	ands.w	r8, r3, #96	; 0x60
{
 8005316:	460d      	mov	r5, r1
 8005318:	4606      	mov	r6, r0
  uint8_t ifalt = 0U;
 800531a:	f88d 4005 	strb.w	r4, [sp, #5]
  uint16_t status_info = 0U;
 800531e:	f8ad 4006 	strh.w	r4, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005322:	d01c      	beq.n	800535e <USBD_CDC_Setup+0x5a>
 8005324:	f1b8 0f20 	cmp.w	r8, #32
 8005328:	d113      	bne.n	8005352 <USBD_CDC_Setup+0x4e>
    if (req->wLength)
 800532a:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 800532e:	f1b8 0f00 	cmp.w	r8, #0
 8005332:	d046      	beq.n	80053c2 <USBD_CDC_Setup+0xbe>
      if (req->bmRequest & 0x80U)
 8005334:	061b      	lsls	r3, r3, #24
 8005336:	d42b      	bmi.n	8005390 <USBD_CDC_Setup+0x8c>
        hcdc->CmdOpCode = req->bRequest;
 8005338:	784b      	ldrb	r3, [r1, #1]
 800533a:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800533e:	f887 8201 	strb.w	r8, [r7, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005342:	4642      	mov	r2, r8
 8005344:	4639      	mov	r1, r7
 8005346:	f000 fd17 	bl	8005d78 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 800534a:	4620      	mov	r0, r4
}
 800534c:	b002      	add	sp, #8
 800534e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_CtlError (pdev, req);
 8005352:	f000 fccb 	bl	8005cec <USBD_CtlError>
    ret = USBD_FAIL;
 8005356:	2002      	movs	r0, #2
}
 8005358:	b002      	add	sp, #8
 800535a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 800535e:	784c      	ldrb	r4, [r1, #1]
 8005360:	2c0a      	cmp	r4, #10
 8005362:	d023      	beq.n	80053ac <USBD_CDC_Setup+0xa8>
 8005364:	2c0b      	cmp	r4, #11
 8005366:	d00d      	beq.n	8005384 <USBD_CDC_Setup+0x80>
 8005368:	2c00      	cmp	r4, #0
 800536a:	d1f2      	bne.n	8005352 <USBD_CDC_Setup+0x4e>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800536c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005370:	2b03      	cmp	r3, #3
 8005372:	d02e      	beq.n	80053d2 <USBD_CDC_Setup+0xce>
        USBD_CtlError (pdev, req);
 8005374:	4630      	mov	r0, r6
 8005376:	4629      	mov	r1, r5
 8005378:	f000 fcb8 	bl	8005cec <USBD_CtlError>
			  ret = USBD_FAIL;
 800537c:	2002      	movs	r0, #2
}
 800537e:	b002      	add	sp, #8
 8005380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005384:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005388:	2b03      	cmp	r3, #3
 800538a:	d1f3      	bne.n	8005374 <USBD_CDC_Setup+0x70>
  uint8_t ret = USBD_OK;
 800538c:	4640      	mov	r0, r8
 800538e:	e7e3      	b.n	8005358 <USBD_CDC_Setup+0x54>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005390:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8005394:	7848      	ldrb	r0, [r1, #1]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	4642      	mov	r2, r8
 800539a:	4639      	mov	r1, r7
 800539c:	4798      	blx	r3
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800539e:	88ea      	ldrh	r2, [r5, #6]
 80053a0:	4639      	mov	r1, r7
 80053a2:	4630      	mov	r0, r6
 80053a4:	f000 fcd2 	bl	8005d4c <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80053a8:	4620      	mov	r0, r4
 80053aa:	e7d5      	b.n	8005358 <USBD_CDC_Setup+0x54>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053ac:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80053b0:	2b03      	cmp	r3, #3
 80053b2:	d1df      	bne.n	8005374 <USBD_CDC_Setup+0x70>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80053b4:	2201      	movs	r2, #1
 80053b6:	f10d 0105 	add.w	r1, sp, #5
 80053ba:	f000 fcc7 	bl	8005d4c <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80053be:	4640      	mov	r0, r8
 80053c0:	e7ca      	b.n	8005358 <USBD_CDC_Setup+0x54>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80053c2:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80053c6:	7848      	ldrb	r0, [r1, #1]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	4642      	mov	r2, r8
 80053cc:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 80053ce:	4640      	mov	r0, r8
 80053d0:	e7c2      	b.n	8005358 <USBD_CDC_Setup+0x54>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80053d2:	2202      	movs	r2, #2
 80053d4:	f10d 0106 	add.w	r1, sp, #6
 80053d8:	f000 fcb8 	bl	8005d4c <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80053dc:	4620      	mov	r0, r4
 80053de:	e7bb      	b.n	8005358 <USBD_CDC_Setup+0x54>

080053e0 <USBD_CDC_DeInit>:
{
 80053e0:	b538      	push	{r3, r4, r5, lr}
 80053e2:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80053e4:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80053e6:	2181      	movs	r1, #129	; 0x81
 80053e8:	f002 fb8c 	bl	8007b04 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80053ec:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80053ee:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80053f0:	4620      	mov	r0, r4
 80053f2:	f002 fb87 	bl	8007b04 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80053f6:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80053fa:	4620      	mov	r0, r4
 80053fc:	2182      	movs	r1, #130	; 0x82
 80053fe:	f002 fb81 	bl	8007b04 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8005402:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005406:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 8005408:	b14b      	cbz	r3, 800541e <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800540a:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005412:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 8005416:	f005 f8f5 	bl	800a604 <free>
    pdev->pClassData = NULL;
 800541a:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 800541e:	2000      	movs	r0, #0
 8005420:	bd38      	pop	{r3, r4, r5, pc}
 8005422:	bf00      	nop

08005424 <USBD_CDC_Init>:
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005424:	7c03      	ldrb	r3, [r0, #16]
{
 8005426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800542a:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800542c:	bbc3      	cbnz	r3, 80054a0 <USBD_CDC_Init+0x7c>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800542e:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005430:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005434:	2202      	movs	r2, #2
 8005436:	2181      	movs	r1, #129	; 0x81
 8005438:	f002 fb54 	bl	8007ae4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800543c:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800543e:	4629      	mov	r1, r5
 8005440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005444:	2202      	movs	r2, #2
 8005446:	4620      	mov	r0, r4
 8005448:	f002 fb4c 	bl	8007ae4 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800544c:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005450:	2308      	movs	r3, #8
 8005452:	2203      	movs	r2, #3
 8005454:	2182      	movs	r1, #130	; 0x82
 8005456:	4620      	mov	r0, r4
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005458:	2701      	movs	r7, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800545a:	f002 fb43 	bl	8007ae4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800545e:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8005460:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005464:	f005 f8c6 	bl	800a5f4 <malloc>
 8005468:	4605      	mov	r5, r0
 800546a:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 800546e:	b370      	cbz	r0, 80054ce <USBD_CDC_Init+0xaa>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005470:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005478:	f894 8010 	ldrb.w	r8, [r4, #16]
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800547c:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
    hcdc->TxState = 0U;
 8005480:	2600      	movs	r6, #0
 8005482:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005486:	4639      	mov	r1, r7
    hcdc->RxState = 0U;
 8005488:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800548c:	4620      	mov	r0, r4
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800548e:	f1b8 0f00 	cmp.w	r8, #0
 8005492:	d015      	beq.n	80054c0 <USBD_CDC_Init+0x9c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005494:	2340      	movs	r3, #64	; 0x40
 8005496:	f002 fb8f 	bl	8007bb8 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800549a:	4630      	mov	r0, r6
 800549c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80054a0:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80054a2:	2340      	movs	r3, #64	; 0x40
 80054a4:	2202      	movs	r2, #2
 80054a6:	2181      	movs	r1, #129	; 0x81
 80054a8:	f002 fb1c 	bl	8007ae4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80054ac:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80054ae:	4629      	mov	r1, r5
 80054b0:	2340      	movs	r3, #64	; 0x40
 80054b2:	2202      	movs	r2, #2
 80054b4:	4620      	mov	r0, r4
 80054b6:	f002 fb15 	bl	8007ae4 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80054ba:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
 80054be:	e7c7      	b.n	8005450 <USBD_CDC_Init+0x2c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80054c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054c4:	f002 fb78 	bl	8007bb8 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80054c8:	4640      	mov	r0, r8
 80054ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 80054ce:	4638      	mov	r0, r7
}
 80054d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080054d4 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 80054d4:	b119      	cbz	r1, 80054de <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80054d6:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 80054da:	2000      	movs	r0, #0
 80054dc:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80054de:	2002      	movs	r0, #2
  }

  return ret;
}
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop

080054e4 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80054e4:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 80054e8:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80054ea:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80054ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80054f2:	4770      	bx	lr

080054f4 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80054f4:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  return USBD_OK;
}
 80054f8:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80054fa:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 80054fe:	4770      	bx	lr

08005500 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005500:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  if(pdev->pClassData != NULL)
 8005504:	b19b      	cbz	r3, 800552e <USBD_CDC_TransmitPacket+0x2e>
{
 8005506:	b570      	push	{r4, r5, r6, lr}
  {
    if(hcdc->TxState == 0U)
 8005508:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
 800550c:	b10c      	cbz	r4, 8005512 <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 800550e:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8005510:	bd70      	pop	{r4, r5, r6, pc}
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005512:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005516:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
      hcdc->TxState = 1U;
 800551a:	2601      	movs	r6, #1
 800551c:	f8c3 6214 	str.w	r6, [r3, #532]	; 0x214
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005520:	2181      	movs	r1, #129	; 0x81
 8005522:	b2ab      	uxth	r3, r5
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005524:	6305      	str	r5, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005526:	f002 fb39 	bl	8007b9c <USBD_LL_Transmit>
      return USBD_OK;
 800552a:	4620      	mov	r0, r4
 800552c:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800552e:	2002      	movs	r0, #2
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop

08005534 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005534:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8005538:	b18a      	cbz	r2, 800555e <USBD_CDC_ReceivePacket+0x2a>
{
 800553a:	b510      	push	{r4, lr}
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800553c:	7c04      	ldrb	r4, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800553e:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005542:	b12c      	cbz	r4, 8005550 <USBD_CDC_ReceivePacket+0x1c>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005544:	2340      	movs	r3, #64	; 0x40
 8005546:	2101      	movs	r1, #1
 8005548:	f002 fb36 	bl	8007bb8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800554c:	2000      	movs	r0, #0
 800554e:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8005550:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005554:	2101      	movs	r1, #1
 8005556:	f002 fb2f 	bl	8007bb8 <USBD_LL_PrepareReceive>
    return USBD_OK;
 800555a:	4620      	mov	r0, r4
 800555c:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USBD_FAIL;
 800555e:	2002      	movs	r0, #2
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop

08005564 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8005564:	b188      	cbz	r0, 800558a <USBD_Init+0x26>
{
 8005566:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8005568:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800556c:	b113      	cbz	r3, 8005574 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800556e:	2300      	movs	r3, #0
 8005570:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8005574:	b109      	cbz	r1, 800557a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8005576:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800557a:	2301      	movs	r3, #1
  pdev->id = id;
 800557c:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800557e:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005582:	f002 fa6f 	bl	8007a64 <USBD_LL_Init>

  return USBD_OK;
 8005586:	2000      	movs	r0, #0
 8005588:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800558a:	2002      	movs	r0, #2
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop

08005590 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8005590:	b119      	cbz	r1, 800559a <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005592:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 8005596:	2000      	movs	r0, #0
 8005598:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800559a:	2002      	movs	r0, #2
  }

  return status;
}
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop

080055a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80055a0:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80055a2:	f002 fa91 	bl	8007ac8 <USBD_LL_Start>

  return USBD_OK;
}
 80055a6:	2000      	movs	r0, #0
 80055a8:	bd08      	pop	{r3, pc}
 80055aa:	bf00      	nop

080055ac <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80055ac:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 80055ae:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80055b2:	b113      	cbz	r3, 80055ba <USBD_SetClassConfig+0xe>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4798      	blx	r3
 80055b8:	b108      	cbz	r0, 80055be <USBD_SetClassConfig+0x12>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80055ba:	2002      	movs	r0, #2
 80055bc:	bd08      	pop	{r3, pc}
      ret = USBD_OK;
    }
  }

  return ret;
}
 80055be:	bd08      	pop	{r3, pc}

080055c0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80055c0:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80055c2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	4798      	blx	r3
  return USBD_OK;
}
 80055ca:	2000      	movs	r0, #0
 80055cc:	bd08      	pop	{r3, pc}
 80055ce:	bf00      	nop

080055d0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80055d0:	b538      	push	{r3, r4, r5, lr}
 80055d2:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80055d4:	f500 7520 	add.w	r5, r0, #640	; 0x280
 80055d8:	4628      	mov	r0, r5
 80055da:	f000 fb73 	bl	8005cc4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80055de:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_data_len = pdev->request.wLength;
 80055e2:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 80055e6:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  pdev->ep0_state = USBD_EP0_SETUP;
 80055ea:	2201      	movs	r2, #1
  switch (pdev->request.bmRequest & 0x1FU)
 80055ec:	f001 031f 	and.w	r3, r1, #31
 80055f0:	4293      	cmp	r3, r2
  pdev->ep0_state = USBD_EP0_SETUP;
 80055f2:	f8c4 226c 	str.w	r2, [r4, #620]	; 0x26c
  switch (pdev->request.bmRequest & 0x1FU)
 80055f6:	d015      	beq.n	8005624 <USBD_LL_SetupStage+0x54>
 80055f8:	d30e      	bcc.n	8005618 <USBD_LL_SetupStage+0x48>
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d006      	beq.n	800560c <USBD_LL_SetupStage+0x3c>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80055fe:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8005602:	4620      	mov	r0, r4
 8005604:	f002 fa8c 	bl	8007b20 <USBD_LL_StallEP>
    break;
  }

  return USBD_OK;
}
 8005608:	2000      	movs	r0, #0
 800560a:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdEPReq(pdev, &pdev->request);
 800560c:	4629      	mov	r1, r5
 800560e:	4620      	mov	r0, r4
 8005610:	f000 fab2 	bl	8005b78 <USBD_StdEPReq>
}
 8005614:	2000      	movs	r0, #0
 8005616:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdDevReq (pdev, &pdev->request);
 8005618:	4629      	mov	r1, r5
 800561a:	4620      	mov	r0, r4
 800561c:	f000 f908 	bl	8005830 <USBD_StdDevReq>
}
 8005620:	2000      	movs	r0, #0
 8005622:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8005624:	4629      	mov	r1, r5
 8005626:	4620      	mov	r0, r4
 8005628:	f000 fa70 	bl	8005b0c <USBD_StdItfReq>
}
 800562c:	2000      	movs	r0, #0
 800562e:	bd38      	pop	{r3, r4, r5, pc}

08005630 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005630:	b570      	push	{r4, r5, r6, lr}
 8005632:	4605      	mov	r5, r0
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8005634:	b941      	cbnz	r1, 8005648 <USBD_LL_DataOutStage+0x18>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005636:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800563a:	2b03      	cmp	r3, #3
 800563c:	d00e      	beq.n	800565c <USBD_LL_DataOutStage+0x2c>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800563e:	2b05      	cmp	r3, #5
 8005640:	460c      	mov	r4, r1
 8005642:	d02a      	beq.n	800569a <USBD_LL_DataOutStage+0x6a>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005644:	2000      	movs	r0, #0
 8005646:	bd70      	pop	{r4, r5, r6, pc}
  else if((pdev->pClass->DataOut != NULL) &&
 8005648:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	b11b      	cbz	r3, 8005658 <USBD_LL_DataOutStage+0x28>
 8005650:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8005654:	2a03      	cmp	r2, #3
 8005656:	d026      	beq.n	80056a6 <USBD_LL_DataOutStage+0x76>
    return USBD_FAIL;
 8005658:	2002      	movs	r0, #2
}
 800565a:	bd70      	pop	{r4, r5, r6, pc}
 800565c:	4616      	mov	r6, r2
      if(pep->rem_length > pep->maxpacket)
 800565e:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8005662:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8005666:	4293      	cmp	r3, r2
 8005668:	d90a      	bls.n	8005680 <USBD_LL_DataOutStage+0x50>
        pep->rem_length -=  pep->maxpacket;
 800566a:	1a9b      	subs	r3, r3, r2
        USBD_CtlContinueRx (pdev,
 800566c:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 800566e:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 8005672:	bf8c      	ite	hi
 8005674:	b29a      	uxthhi	r2, r3
 8005676:	b292      	uxthls	r2, r2
 8005678:	4631      	mov	r1, r6
 800567a:	f000 fb8d 	bl	8005d98 <USBD_CtlContinueRx>
 800567e:	e7e1      	b.n	8005644 <USBD_LL_DataOutStage+0x14>
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005680:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	b11b      	cbz	r3, 8005690 <USBD_LL_DataOutStage+0x60>
 8005688:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800568c:	2a03      	cmp	r2, #3
 800568e:	d00d      	beq.n	80056ac <USBD_LL_DataOutStage+0x7c>
        USBD_CtlSendStatus(pdev);
 8005690:	4628      	mov	r0, r5
 8005692:	f000 fb89 	bl	8005da8 <USBD_CtlSendStatus>
  return USBD_OK;
 8005696:	2000      	movs	r0, #0
 8005698:	bd70      	pop	{r4, r5, r6, pc}
        pdev->ep0_state = USBD_EP0_IDLE;
 800569a:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800569e:	f002 fa3f 	bl	8007b20 <USBD_LL_StallEP>
  return USBD_OK;
 80056a2:	4620      	mov	r0, r4
 80056a4:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClass->DataOut(pdev, epnum);
 80056a6:	4798      	blx	r3
  return USBD_OK;
 80056a8:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 80056aa:	bd70      	pop	{r4, r5, r6, pc}
          pdev->pClass->EP0_RxReady(pdev);
 80056ac:	4798      	blx	r3
 80056ae:	e7ef      	b.n	8005690 <USBD_LL_DataOutStage+0x60>

080056b0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80056b0:	b570      	push	{r4, r5, r6, lr}
 80056b2:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80056b4:	b971      	cbnz	r1, 80056d4 <USBD_LL_DataInStage+0x24>
 80056b6:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80056b8:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 80056bc:	2a02      	cmp	r2, #2
 80056be:	d01f      	beq.n	8005700 <USBD_LL_DataInStage+0x50>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80056c0:	f032 0304 	bics.w	r3, r2, #4
 80056c4:	d010      	beq.n	80056e8 <USBD_LL_DataInStage+0x38>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80056c6:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 80056ca:	2b01      	cmp	r3, #1
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80056cc:	f04f 0000 	mov.w	r0, #0
    if (pdev->dev_test_mode == 1U)
 80056d0:	d013      	beq.n	80056fa <USBD_LL_DataInStage+0x4a>
 80056d2:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80056d4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	b11b      	cbz	r3, 80056e4 <USBD_LL_DataInStage+0x34>
 80056dc:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80056e0:	2a03      	cmp	r2, #3
 80056e2:	d041      	beq.n	8005768 <USBD_LL_DataInStage+0xb8>
    pdev->pClass->DataIn(pdev, epnum);
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80056e4:	2002      	movs	r0, #2
  }

  return USBD_OK;
}
 80056e6:	bd70      	pop	{r4, r5, r6, pc}
        USBD_LL_StallEP(pdev, 0x80U);
 80056e8:	2180      	movs	r1, #128	; 0x80
 80056ea:	f002 fa19 	bl	8007b20 <USBD_LL_StallEP>
    if (pdev->dev_test_mode == 1U)
 80056ee:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 80056f2:	2b01      	cmp	r3, #1
      pdev->dev_test_mode = 0U;
 80056f4:	f04f 0000 	mov.w	r0, #0
    if (pdev->dev_test_mode == 1U)
 80056f8:	d1eb      	bne.n	80056d2 <USBD_LL_DataInStage+0x22>
      pdev->dev_test_mode = 0U;
 80056fa:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 80056fe:	bd70      	pop	{r4, r5, r6, pc}
      if(pep->rem_length > pep->maxpacket)
 8005700:	6a06      	ldr	r6, [r0, #32]
 8005702:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005704:	4296      	cmp	r6, r2
 8005706:	d827      	bhi.n	8005758 <USBD_LL_DataInStage+0xa8>
        if((pep->total_length % pep->maxpacket == 0U) &&
 8005708:	69c3      	ldr	r3, [r0, #28]
 800570a:	fbb3 f5f2 	udiv	r5, r3, r2
 800570e:	fb02 3515 	mls	r5, r2, r5, r3
 8005712:	b98d      	cbnz	r5, 8005738 <USBD_LL_DataInStage+0x88>
 8005714:	429a      	cmp	r2, r3
 8005716:	d80f      	bhi.n	8005738 <USBD_LL_DataInStage+0x88>
           (pep->total_length >= pep->maxpacket) &&
 8005718:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 800571c:	4293      	cmp	r3, r2
 800571e:	d20b      	bcs.n	8005738 <USBD_LL_DataInStage+0x88>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005720:	462a      	mov	r2, r5
 8005722:	f000 fb21 	bl	8005d68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005726:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800572a:	462b      	mov	r3, r5
 800572c:	462a      	mov	r2, r5
 800572e:	4629      	mov	r1, r5
 8005730:	4620      	mov	r0, r4
 8005732:	f002 fa41 	bl	8007bb8 <USBD_LL_PrepareReceive>
 8005736:	e7c6      	b.n	80056c6 <USBD_LL_DataInStage+0x16>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005738:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	b11b      	cbz	r3, 8005748 <USBD_LL_DataInStage+0x98>
 8005740:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 8005744:	2a03      	cmp	r2, #3
 8005746:	d012      	beq.n	800576e <USBD_LL_DataInStage+0xbe>
          USBD_LL_StallEP(pdev, 0x80U);
 8005748:	2180      	movs	r1, #128	; 0x80
 800574a:	4620      	mov	r0, r4
 800574c:	f002 f9e8 	bl	8007b20 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005750:	4620      	mov	r0, r4
 8005752:	f000 fb35 	bl	8005dc0 <USBD_CtlReceiveStatus>
 8005756:	e7b6      	b.n	80056c6 <USBD_LL_DataInStage+0x16>
        pep->rem_length -= pep->maxpacket;
 8005758:	1ab2      	subs	r2, r6, r2
 800575a:	460d      	mov	r5, r1
 800575c:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800575e:	4619      	mov	r1, r3
 8005760:	b292      	uxth	r2, r2
 8005762:	f000 fb01 	bl	8005d68 <USBD_CtlContinueSendData>
 8005766:	e7e0      	b.n	800572a <USBD_LL_DataInStage+0x7a>
    pdev->pClass->DataIn(pdev, epnum);
 8005768:	4798      	blx	r3
  return USBD_OK;
 800576a:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 800576c:	bd70      	pop	{r4, r5, r6, pc}
            pdev->pClass->EP0_TxSent(pdev);
 800576e:	4620      	mov	r0, r4
 8005770:	4798      	blx	r3
 8005772:	e7e9      	b.n	8005748 <USBD_LL_DataInStage+0x98>

08005774 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8005774:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005776:	2200      	movs	r2, #0
{
 8005778:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800577a:	2340      	movs	r3, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800577c:	461e      	mov	r6, r3
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800577e:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005780:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005782:	f002 f9af 	bl	8007ae4 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005786:	4633      	mov	r3, r6
 8005788:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800578a:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800578e:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005792:	4620      	mov	r0, r4
 8005794:	2200      	movs	r2, #0
 8005796:	f002 f9a5 	bl	8007ae4 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800579a:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800579e:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 80057a0:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80057a2:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057a4:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80057a8:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 80057ac:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80057ae:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 80057b2:	b123      	cbz	r3, 80057be <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80057b4:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80057b8:	4620      	mov	r0, r4
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	4798      	blx	r3
  }

  return USBD_OK;
}
 80057be:	2000      	movs	r0, #0
 80057c0:	bd70      	pop	{r4, r5, r6, pc}
 80057c2:	bf00      	nop

080057c4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80057c4:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80057c6:	2000      	movs	r0, #0
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop

080057cc <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80057cc:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80057d0:	f880 2275 	strb.w	r2, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80057d4:	2304      	movs	r3, #4
 80057d6:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 80057da:	2000      	movs	r0, #0
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop

080057e0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80057e0:	4603      	mov	r3, r0
  pdev->dev_state = pdev->dev_old_state;
  return USBD_OK;
}
 80057e2:	2000      	movs	r0, #0
  pdev->dev_state = pdev->dev_old_state;
 80057e4:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80057e8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
}
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop

080057f0 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80057f0:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80057f4:	2a03      	cmp	r2, #3
 80057f6:	d001      	beq.n	80057fc <USBD_LL_SOF+0xc>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 80057f8:	2000      	movs	r0, #0
 80057fa:	4770      	bx	lr
{
 80057fc:	b508      	push	{r3, lr}
    if(pdev->pClass->SOF != NULL)
 80057fe:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	b103      	cbz	r3, 8005808 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 8005806:	4798      	blx	r3
}
 8005808:	2000      	movs	r0, #0
 800580a:	bd08      	pop	{r3, pc}

0800580c <USBD_LL_IsoINIncomplete>:
 800580c:	2000      	movs	r0, #0
 800580e:	4770      	bx	lr

08005810 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8005810:	2000      	movs	r0, #0
 8005812:	4770      	bx	lr

08005814 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8005814:	2000      	movs	r0, #0
 8005816:	4770      	bx	lr

08005818 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8005818:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800581a:	2101      	movs	r1, #1
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800581c:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005820:	f880 1274 	strb.w	r1, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005824:	6852      	ldr	r2, [r2, #4]
 8005826:	7901      	ldrb	r1, [r0, #4]
 8005828:	4790      	blx	r2

  return USBD_OK;
}
 800582a:	2000      	movs	r0, #0
 800582c:	bd08      	pop	{r3, pc}
 800582e:	bf00      	nop

08005830 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005830:	b530      	push	{r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005832:	780b      	ldrb	r3, [r1, #0]
 8005834:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005838:	2b20      	cmp	r3, #32
{
 800583a:	b083      	sub	sp, #12
 800583c:	460c      	mov	r4, r1
 800583e:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005840:	d016      	beq.n	8005870 <USBD_StdDevReq+0x40>
 8005842:	2b40      	cmp	r3, #64	; 0x40
 8005844:	d014      	beq.n	8005870 <USBD_StdDevReq+0x40>
 8005846:	b14b      	cbz	r3, 800585c <USBD_StdDevReq+0x2c>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8005848:	2180      	movs	r1, #128	; 0x80
 800584a:	f002 f969 	bl	8007b20 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800584e:	4628      	mov	r0, r5
 8005850:	2100      	movs	r1, #0
 8005852:	f002 f965 	bl	8007b20 <USBD_LL_StallEP>
}
 8005856:	2000      	movs	r0, #0
 8005858:	b003      	add	sp, #12
 800585a:	bd30      	pop	{r4, r5, pc}
    switch (req->bRequest)
 800585c:	784b      	ldrb	r3, [r1, #1]
 800585e:	2b09      	cmp	r3, #9
 8005860:	d819      	bhi.n	8005896 <USBD_StdDevReq+0x66>
 8005862:	e8df f003 	tbb	[pc, r3]
 8005866:	5a43      	.short	0x5a43
 8005868:	6a186618 	.word	0x6a186618
 800586c:	239d1886 	.word	0x239d1886
    pdev->pClass->Setup(pdev, req);
 8005870:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
 8005874:	4621      	mov	r1, r4
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	4628      	mov	r0, r5
 800587a:	4798      	blx	r3
}
 800587c:	2000      	movs	r0, #0
 800587e:	b003      	add	sp, #12
 8005880:	bd30      	pop	{r4, r5, pc}
      if (cfgidx)
 8005882:	b379      	cbz	r1, 80058e4 <USBD_StdDevReq+0xb4>
        pdev->dev_config = cfgidx;
 8005884:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005886:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8005888:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800588a:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800588e:	f7ff fe8d 	bl	80055ac <USBD_SetClassConfig>
 8005892:	2802      	cmp	r0, #2
 8005894:	d126      	bne.n	80058e4 <USBD_StdDevReq+0xb4>
  USBD_LL_StallEP(pdev , 0x80U);
 8005896:	2180      	movs	r1, #128	; 0x80
 8005898:	4628      	mov	r0, r5
 800589a:	f002 f941 	bl	8007b20 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800589e:	4628      	mov	r0, r5
 80058a0:	2100      	movs	r1, #0
 80058a2:	f002 f93d 	bl	8007b20 <USBD_LL_StallEP>
}
 80058a6:	2000      	movs	r0, #0
 80058a8:	b003      	add	sp, #12
 80058aa:	bd30      	pop	{r4, r5, pc}
  cfgidx = (uint8_t)(req->wValue);
 80058ac:	7889      	ldrb	r1, [r1, #2]
 80058ae:	4c96      	ldr	r4, [pc, #600]	; (8005b08 <USBD_StdDevReq+0x2d8>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80058b0:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80058b2:	7021      	strb	r1, [r4, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80058b4:	d8ef      	bhi.n	8005896 <USBD_StdDevReq+0x66>
    switch (pdev->dev_state)
 80058b6:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d0e1      	beq.n	8005882 <USBD_StdDevReq+0x52>
 80058be:	2b03      	cmp	r3, #3
 80058c0:	f040 8102 	bne.w	8005ac8 <USBD_StdDevReq+0x298>
      if (cfgidx == 0U)
 80058c4:	2900      	cmp	r1, #0
 80058c6:	f000 8118 	beq.w	8005afa <USBD_StdDevReq+0x2ca>
      else if (cfgidx != pdev->dev_config)
 80058ca:	6841      	ldr	r1, [r0, #4]
 80058cc:	2901      	cmp	r1, #1
 80058ce:	d009      	beq.n	80058e4 <USBD_StdDevReq+0xb4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80058d0:	b2c9      	uxtb	r1, r1
 80058d2:	f7ff fe75 	bl	80055c0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80058d6:	7821      	ldrb	r1, [r4, #0]
 80058d8:	6069      	str	r1, [r5, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80058da:	4628      	mov	r0, r5
 80058dc:	f7ff fe66 	bl	80055ac <USBD_SetClassConfig>
 80058e0:	2802      	cmp	r0, #2
 80058e2:	d0d8      	beq.n	8005896 <USBD_StdDevReq+0x66>
        USBD_CtlSendStatus(pdev);
 80058e4:	4628      	mov	r0, r5
 80058e6:	f000 fa5f 	bl	8005da8 <USBD_CtlSendStatus>
 80058ea:	e7b4      	b.n	8005856 <USBD_StdDevReq+0x26>
  switch (pdev->dev_state)
 80058ec:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80058f0:	3b01      	subs	r3, #1
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	f04f 0203 	mov.w	r2, #3
 80058f8:	d8cd      	bhi.n	8005896 <USBD_StdDevReq+0x66>
    if(req->wLength != 0x2U)
 80058fa:	88cb      	ldrh	r3, [r1, #6]
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d1ca      	bne.n	8005896 <USBD_StdDevReq+0x66>
    if (pdev->dev_remote_wakeup)
 8005900:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005904:	2101      	movs	r1, #1
 8005906:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup)
 8005908:	b103      	cbz	r3, 800590c <USBD_StdDevReq+0xdc>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800590a:	60c2      	str	r2, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800590c:	2202      	movs	r2, #2
 800590e:	f105 010c 	add.w	r1, r5, #12
 8005912:	4628      	mov	r0, r5
 8005914:	f000 fa1a 	bl	8005d4c <USBD_CtlSendData>
 8005918:	e79d      	b.n	8005856 <USBD_StdDevReq+0x26>
  switch (pdev->dev_state)
 800591a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800591e:	3b01      	subs	r3, #1
 8005920:	2b02      	cmp	r3, #2
 8005922:	d8b8      	bhi.n	8005896 <USBD_StdDevReq+0x66>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005924:	884b      	ldrh	r3, [r1, #2]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d195      	bne.n	8005856 <USBD_StdDevReq+0x26>
      pdev->dev_remote_wakeup = 0U;
 800592a:	2300      	movs	r3, #0
 800592c:	f8c5 327c 	str.w	r3, [r5, #636]	; 0x27c
 8005930:	e7d8      	b.n	80058e4 <USBD_StdDevReq+0xb4>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005932:	884b      	ldrh	r3, [r1, #2]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d18e      	bne.n	8005856 <USBD_StdDevReq+0x26>
 8005938:	e7f8      	b.n	800592c <USBD_StdDevReq+0xfc>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800593a:	888b      	ldrh	r3, [r1, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1aa      	bne.n	8005896 <USBD_StdDevReq+0x66>
 8005940:	88cb      	ldrh	r3, [r1, #6]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1a7      	bne.n	8005896 <USBD_StdDevReq+0x66>
 8005946:	884c      	ldrh	r4, [r1, #2]
 8005948:	2c7f      	cmp	r4, #127	; 0x7f
 800594a:	d8a4      	bhi.n	8005896 <USBD_StdDevReq+0x66>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800594c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005950:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005952:	b2e1      	uxtb	r1, r4
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005954:	d09f      	beq.n	8005896 <USBD_StdDevReq+0x66>
      pdev->dev_address = dev_addr;
 8005956:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800595a:	f002 f911 	bl	8007b80 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800595e:	4628      	mov	r0, r5
 8005960:	f000 fa22 	bl	8005da8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8005964:	2c00      	cmp	r4, #0
 8005966:	f000 80c4 	beq.w	8005af2 <USBD_StdDevReq+0x2c2>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800596a:	2302      	movs	r3, #2
 800596c:	f885 3274 	strb.w	r3, [r5, #628]	; 0x274
 8005970:	e771      	b.n	8005856 <USBD_StdDevReq+0x26>
 8005972:	884a      	ldrh	r2, [r1, #2]
  switch (req->wValue >> 8)
 8005974:	0a13      	lsrs	r3, r2, #8
 8005976:	3b01      	subs	r3, #1
 8005978:	2b06      	cmp	r3, #6
 800597a:	d88c      	bhi.n	8005896 <USBD_StdDevReq+0x66>
 800597c:	a101      	add	r1, pc, #4	; (adr r1, 8005984 <USBD_StdDevReq+0x154>)
 800597e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005982:	bf00      	nop
 8005984:	08005a4b 	.word	0x08005a4b
 8005988:	08005a33 	.word	0x08005a33
 800598c:	08005a21 	.word	0x08005a21
 8005990:	08005897 	.word	0x08005897
 8005994:	08005897 	.word	0x08005897
 8005998:	08005a0b 	.word	0x08005a0b
 800599c:	080059c7 	.word	0x080059c7
  if (req->wLength != 1U)
 80059a0:	88ca      	ldrh	r2, [r1, #6]
 80059a2:	2a01      	cmp	r2, #1
 80059a4:	f47f af77 	bne.w	8005896 <USBD_StdDevReq+0x66>
    switch (pdev->dev_state)
 80059a8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f43f af72 	beq.w	8005896 <USBD_StdDevReq+0x66>
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	f240 8081 	bls.w	8005aba <USBD_StdDevReq+0x28a>
 80059b8:	2b03      	cmp	r3, #3
 80059ba:	f47f af6c 	bne.w	8005896 <USBD_StdDevReq+0x66>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80059be:	1d01      	adds	r1, r0, #4
 80059c0:	f000 f9c4 	bl	8005d4c <USBD_CtlSendData>
 80059c4:	e747      	b.n	8005856 <USBD_StdDevReq+0x26>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80059c6:	7c03      	ldrb	r3, [r0, #16]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f47f af64 	bne.w	8005896 <USBD_StdDevReq+0x66>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80059ce:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80059d2:	f10d 0006 	add.w	r0, sp, #6
 80059d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80059da:	2307      	movs	r3, #7
 80059dc:	7043      	strb	r3, [r0, #1]
  if((len != 0U) && (req->wLength != 0U))
 80059de:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80059e2:	b16b      	cbz	r3, 8005a00 <USBD_StdDevReq+0x1d0>
 80059e4:	88e2      	ldrh	r2, [r4, #6]
 80059e6:	2a00      	cmp	r2, #0
 80059e8:	f43f af7c 	beq.w	80058e4 <USBD_StdDevReq+0xb4>
    len = MIN(len, req->wLength);
 80059ec:	4293      	cmp	r3, r2
 80059ee:	bf28      	it	cs
 80059f0:	4613      	movcs	r3, r2
    USBD_CtlSendData (pdev, pbuf, len);
 80059f2:	4601      	mov	r1, r0
 80059f4:	461a      	mov	r2, r3
 80059f6:	4628      	mov	r0, r5
    len = MIN(len, req->wLength);
 80059f8:	f8ad 3006 	strh.w	r3, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 80059fc:	f000 f9a6 	bl	8005d4c <USBD_CtlSendData>
  if(req->wLength == 0U)
 8005a00:	88e3      	ldrh	r3, [r4, #6]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f47f af27 	bne.w	8005856 <USBD_StdDevReq+0x26>
 8005a08:	e76c      	b.n	80058e4 <USBD_StdDevReq+0xb4>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005a0a:	7c03      	ldrb	r3, [r0, #16]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f47f af42 	bne.w	8005896 <USBD_StdDevReq+0x66>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005a12:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005a16:	f10d 0006 	add.w	r0, sp, #6
 8005a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1c:	4798      	blx	r3
 8005a1e:	e7de      	b.n	80059de <USBD_StdDevReq+0x1ae>
    switch ((uint8_t)(req->wValue))
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	2a05      	cmp	r2, #5
 8005a24:	f63f af37 	bhi.w	8005896 <USBD_StdDevReq+0x66>
 8005a28:	e8df f002 	tbb	[pc, r2]
 8005a2c:	272f373f 	.word	0x272f373f
 8005a30:	171f      	.short	0x171f
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8005a32:	7c03      	ldrb	r3, [r0, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d153      	bne.n	8005ae0 <USBD_StdDevReq+0x2b0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005a38:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005a3c:	f10d 0006 	add.w	r0, sp, #6
 8005a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a42:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a44:	2302      	movs	r3, #2
 8005a46:	7043      	strb	r3, [r0, #1]
 8005a48:	e7c9      	b.n	80059de <USBD_StdDevReq+0x1ae>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005a4a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005a4e:	7c00      	ldrb	r0, [r0, #16]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f10d 0106 	add.w	r1, sp, #6
 8005a56:	4798      	blx	r3
 8005a58:	e7c1      	b.n	80059de <USBD_StdDevReq+0x1ae>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005a5a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005a5e:	7c00      	ldrb	r0, [r0, #16]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	f10d 0106 	add.w	r1, sp, #6
 8005a66:	4798      	blx	r3
 8005a68:	e7b9      	b.n	80059de <USBD_StdDevReq+0x1ae>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005a6a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005a6e:	7c00      	ldrb	r0, [r0, #16]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	f10d 0106 	add.w	r1, sp, #6
 8005a76:	4798      	blx	r3
 8005a78:	e7b1      	b.n	80059de <USBD_StdDevReq+0x1ae>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005a7a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005a7e:	7c00      	ldrb	r0, [r0, #16]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f10d 0106 	add.w	r1, sp, #6
 8005a86:	4798      	blx	r3
 8005a88:	e7a9      	b.n	80059de <USBD_StdDevReq+0x1ae>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005a8a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005a8e:	7c00      	ldrb	r0, [r0, #16]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f10d 0106 	add.w	r1, sp, #6
 8005a96:	4798      	blx	r3
 8005a98:	e7a1      	b.n	80059de <USBD_StdDevReq+0x1ae>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005a9a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005a9e:	7c00      	ldrb	r0, [r0, #16]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f10d 0106 	add.w	r1, sp, #6
 8005aa6:	4798      	blx	r3
 8005aa8:	e799      	b.n	80059de <USBD_StdDevReq+0x1ae>
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005aaa:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8005aae:	7c00      	ldrb	r0, [r0, #16]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f10d 0106 	add.w	r1, sp, #6
 8005ab6:	4798      	blx	r3
 8005ab8:	e791      	b.n	80059de <USBD_StdDevReq+0x1ae>
      pdev->dev_default_config = 0U;
 8005aba:	4601      	mov	r1, r0
 8005abc:	2300      	movs	r3, #0
 8005abe:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005ac2:	f000 f943 	bl	8005d4c <USBD_CtlSendData>
 8005ac6:	e6c6      	b.n	8005856 <USBD_StdDevReq+0x26>
  USBD_LL_StallEP(pdev , 0x80U);
 8005ac8:	2180      	movs	r1, #128	; 0x80
 8005aca:	f002 f829 	bl	8007b20 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005ace:	2100      	movs	r1, #0
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	f002 f825 	bl	8007b20 <USBD_LL_StallEP>
      USBD_ClrClassConfig(pdev, cfgidx);
 8005ad6:	7821      	ldrb	r1, [r4, #0]
 8005ad8:	4628      	mov	r0, r5
 8005ada:	f7ff fd71 	bl	80055c0 <USBD_ClrClassConfig>
 8005ade:	e6ba      	b.n	8005856 <USBD_StdDevReq+0x26>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005ae0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005ae4:	f10d 0006 	add.w	r0, sp, #6
 8005ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aea:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005aec:	2302      	movs	r3, #2
 8005aee:	7043      	strb	r3, [r0, #1]
 8005af0:	e775      	b.n	80059de <USBD_StdDevReq+0x1ae>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005af2:	2301      	movs	r3, #1
 8005af4:	f885 3274 	strb.w	r3, [r5, #628]	; 0x274
 8005af8:	e6ad      	b.n	8005856 <USBD_StdDevReq+0x26>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005afa:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 8005afc:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005afe:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        USBD_ClrClassConfig(pdev, cfgidx);
 8005b02:	f7ff fd5d 	bl	80055c0 <USBD_ClrClassConfig>
 8005b06:	e6ed      	b.n	80058e4 <USBD_StdDevReq+0xb4>
 8005b08:	200008f0 	.word	0x200008f0

08005b0c <USBD_StdItfReq>:
{
 8005b0c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b0e:	780b      	ldrb	r3, [r1, #0]
 8005b10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b14:	2b20      	cmp	r3, #32
{
 8005b16:	460d      	mov	r5, r1
 8005b18:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b1a:	d00b      	beq.n	8005b34 <USBD_StdItfReq+0x28>
 8005b1c:	2b40      	cmp	r3, #64	; 0x40
 8005b1e:	d009      	beq.n	8005b34 <USBD_StdItfReq+0x28>
 8005b20:	b143      	cbz	r3, 8005b34 <USBD_StdItfReq+0x28>
  USBD_LL_StallEP(pdev , 0x80U);
 8005b22:	2180      	movs	r1, #128	; 0x80
 8005b24:	f001 fffc 	bl	8007b20 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005b28:	4620      	mov	r0, r4
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	f001 fff8 	bl	8007b20 <USBD_LL_StallEP>
}
 8005b30:	2000      	movs	r0, #0
 8005b32:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 8005b34:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d802      	bhi.n	8005b44 <USBD_StdItfReq+0x38>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005b3e:	792b      	ldrb	r3, [r5, #4]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d909      	bls.n	8005b58 <USBD_StdItfReq+0x4c>
  USBD_LL_StallEP(pdev , 0x80U);
 8005b44:	2180      	movs	r1, #128	; 0x80
 8005b46:	4620      	mov	r0, r4
 8005b48:	f001 ffea 	bl	8007b20 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	2100      	movs	r1, #0
 8005b50:	f001 ffe6 	bl	8007b20 <USBD_LL_StallEP>
}
 8005b54:	2000      	movs	r0, #0
 8005b56:	bd38      	pop	{r3, r4, r5, pc}
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8005b58:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8005b5c:	4629      	mov	r1, r5
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	4620      	mov	r0, r4
 8005b62:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005b64:	88eb      	ldrh	r3, [r5, #6]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1f4      	bne.n	8005b54 <USBD_StdItfReq+0x48>
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	d1f2      	bne.n	8005b54 <USBD_StdItfReq+0x48>
          USBD_CtlSendStatus(pdev);
 8005b6e:	4620      	mov	r0, r4
 8005b70:	f000 f91a 	bl	8005da8 <USBD_CtlSendStatus>
 8005b74:	e7ee      	b.n	8005b54 <USBD_StdItfReq+0x48>
 8005b76:	bf00      	nop

08005b78 <USBD_StdEPReq>:
{
 8005b78:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b7a:	780c      	ldrb	r4, [r1, #0]
 8005b7c:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8005b80:	2c20      	cmp	r4, #32
{
 8005b82:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b84:	d025      	beq.n	8005bd2 <USBD_StdEPReq+0x5a>
 8005b86:	2c40      	cmp	r4, #64	; 0x40
 8005b88:	d023      	beq.n	8005bd2 <USBD_StdEPReq+0x5a>
 8005b8a:	b144      	cbz	r4, 8005b9e <USBD_StdEPReq+0x26>
  USBD_LL_StallEP(pdev , 0x80U);
 8005b8c:	2180      	movs	r1, #128	; 0x80
 8005b8e:	f001 ffc7 	bl	8007b20 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005b92:	4628      	mov	r0, r5
 8005b94:	2100      	movs	r1, #0
 8005b96:	f001 ffc3 	bl	8007b20 <USBD_LL_StallEP>
}
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 8005b9e:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8005ba0:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 8005ba2:	2b01      	cmp	r3, #1
  ep_addr  = LOBYTE(req->wIndex);
 8005ba4:	b2d6      	uxtb	r6, r2
    switch (req->bRequest)
 8005ba6:	d043      	beq.n	8005c30 <USBD_StdEPReq+0xb8>
 8005ba8:	d31a      	bcc.n	8005be0 <USBD_StdEPReq+0x68>
 8005baa:	2b03      	cmp	r3, #3
 8005bac:	d146      	bne.n	8005c3c <USBD_StdEPReq+0xc4>
      switch (pdev->dev_state)
 8005bae:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d04b      	beq.n	8005c4e <USBD_StdEPReq+0xd6>
 8005bb6:	2b03      	cmp	r3, #3
 8005bb8:	d140      	bne.n	8005c3c <USBD_StdEPReq+0xc4>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005bba:	884b      	ldrh	r3, [r1, #2]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d158      	bne.n	8005c72 <USBD_StdEPReq+0xfa>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005bc0:	0672      	lsls	r2, r6, #25
 8005bc2:	d056      	beq.n	8005c72 <USBD_StdEPReq+0xfa>
 8005bc4:	88cb      	ldrh	r3, [r1, #6]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d153      	bne.n	8005c72 <USBD_StdEPReq+0xfa>
            USBD_LL_StallEP(pdev, ep_addr);
 8005bca:	4631      	mov	r1, r6
 8005bcc:	f001 ffa8 	bl	8007b20 <USBD_LL_StallEP>
 8005bd0:	e04f      	b.n	8005c72 <USBD_StdEPReq+0xfa>
    pdev->pClass->Setup (pdev, req);
 8005bd2:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	4798      	blx	r3
}
 8005bdc:	2000      	movs	r0, #0
 8005bde:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8005be0:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d051      	beq.n	8005c8c <USBD_StdEPReq+0x114>
 8005be8:	2b03      	cmp	r3, #3
 8005bea:	d127      	bne.n	8005c3c <USBD_StdEPReq+0xc4>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005bec:	f006 030f 	and.w	r3, r6, #15
 8005bf0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 8005bf4:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005bf6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 8005bfa:	d456      	bmi.n	8005caa <USBD_StdEPReq+0x132>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005bfc:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d03a      	beq.n	8005c7a <USBD_StdEPReq+0x102>
 8005c04:	f006 037f 	and.w	r3, r6, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005c08:	2414      	movs	r4, #20
 8005c0a:	fb04 0403 	mla	r4, r4, r3, r0
 8005c0e:	f504 74a0 	add.w	r4, r4, #320	; 0x140
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005c12:	b133      	cbz	r3, 8005c22 <USBD_StdEPReq+0xaa>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8005c14:	4631      	mov	r1, r6
 8005c16:	4628      	mov	r0, r5
 8005c18:	f001 ff9e 	bl	8007b58 <USBD_LL_IsStallEP>
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	d04f      	beq.n	8005cc0 <USBD_StdEPReq+0x148>
            pep->status = 0x0001U;
 8005c20:	2301      	movs	r3, #1
 8005c22:	6023      	str	r3, [r4, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005c24:	4621      	mov	r1, r4
 8005c26:	4628      	mov	r0, r5
 8005c28:	2202      	movs	r2, #2
 8005c2a:	f000 f88f 	bl	8005d4c <USBD_CtlSendData>
          break;
 8005c2e:	e7b4      	b.n	8005b9a <USBD_StdEPReq+0x22>
      switch (pdev->dev_state)
 8005c30:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d00a      	beq.n	8005c4e <USBD_StdEPReq+0xd6>
 8005c38:	2b03      	cmp	r3, #3
 8005c3a:	d012      	beq.n	8005c62 <USBD_StdEPReq+0xea>
  USBD_LL_StallEP(pdev , 0x80U);
 8005c3c:	2180      	movs	r1, #128	; 0x80
 8005c3e:	f001 ff6f 	bl	8007b20 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005c42:	4621      	mov	r1, r4
 8005c44:	4628      	mov	r0, r5
 8005c46:	f001 ff6b 	bl	8007b20 <USBD_LL_StallEP>
}
 8005c4a:	2000      	movs	r0, #0
 8005c4c:	bd70      	pop	{r4, r5, r6, pc}
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c4e:	0673      	lsls	r3, r6, #25
 8005c50:	d013      	beq.n	8005c7a <USBD_StdEPReq+0x102>
          USBD_LL_StallEP(pdev, ep_addr);
 8005c52:	4631      	mov	r1, r6
 8005c54:	f001 ff64 	bl	8007b20 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005c58:	4628      	mov	r0, r5
 8005c5a:	2180      	movs	r1, #128	; 0x80
 8005c5c:	f001 ff60 	bl	8007b20 <USBD_LL_StallEP>
 8005c60:	e79b      	b.n	8005b9a <USBD_StdEPReq+0x22>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005c62:	884b      	ldrh	r3, [r1, #2]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d198      	bne.n	8005b9a <USBD_StdEPReq+0x22>
          if ((ep_addr & 0x7FU) != 0x00U)
 8005c68:	0674      	lsls	r4, r6, #25
 8005c6a:	d002      	beq.n	8005c72 <USBD_StdEPReq+0xfa>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8005c6c:	4631      	mov	r1, r6
 8005c6e:	f001 ff65 	bl	8007b3c <USBD_LL_ClearStallEP>
        USBD_CtlSendStatus(pdev);
 8005c72:	4628      	mov	r0, r5
 8005c74:	f000 f898 	bl	8005da8 <USBD_CtlSendStatus>
        break;
 8005c78:	e78f      	b.n	8005b9a <USBD_StdEPReq+0x22>
  USBD_LL_StallEP(pdev , 0x80U);
 8005c7a:	2180      	movs	r1, #128	; 0x80
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	f001 ff4f 	bl	8007b20 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005c82:	4628      	mov	r0, r5
 8005c84:	2100      	movs	r1, #0
 8005c86:	f001 ff4b 	bl	8007b20 <USBD_LL_StallEP>
 8005c8a:	e786      	b.n	8005b9a <USBD_StdEPReq+0x22>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c8c:	0670      	lsls	r0, r6, #25
 8005c8e:	d1f4      	bne.n	8005c7a <USBD_StdEPReq+0x102>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005c90:	0611      	lsls	r1, r2, #24
 8005c92:	bf4c      	ite	mi
 8005c94:	f105 0114 	addmi.w	r1, r5, #20
 8005c98:	f505 71a0 	addpl.w	r1, r5, #320	; 0x140
          pep->status = 0x0000U;
 8005c9c:	2300      	movs	r3, #0
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005c9e:	4628      	mov	r0, r5
          pep->status = 0x0000U;
 8005ca0:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	f000 f852 	bl	8005d4c <USBD_CtlSendData>
          break;
 8005ca8:	e777      	b.n	8005b9a <USBD_StdEPReq+0x22>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d0e4      	beq.n	8005c7a <USBD_StdEPReq+0x102>
 8005cb0:	f006 037f 	and.w	r3, r6, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005cb4:	1c5c      	adds	r4, r3, #1
 8005cb6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8005cba:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8005cbe:	e7a8      	b.n	8005c12 <USBD_StdEPReq+0x9a>
            pep->status = 0x0000U;
 8005cc0:	6020      	str	r0, [r4, #0]
 8005cc2:	e7af      	b.n	8005c24 <USBD_StdEPReq+0xac>

08005cc4 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8005cc4:	780b      	ldrb	r3, [r1, #0]
 8005cc6:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8005cc8:	784b      	ldrb	r3, [r1, #1]
 8005cca:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8005ccc:	78ca      	ldrb	r2, [r1, #3]
 8005cce:	788b      	ldrb	r3, [r1, #2]
 8005cd0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005cd4:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8005cd6:	794a      	ldrb	r2, [r1, #5]
 8005cd8:	790b      	ldrb	r3, [r1, #4]
 8005cda:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005cde:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8005ce0:	79ca      	ldrb	r2, [r1, #7]
 8005ce2:	798b      	ldrb	r3, [r1, #6]
 8005ce4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005ce8:	80c3      	strh	r3, [r0, #6]
 8005cea:	4770      	bx	lr

08005cec <USBD_CtlError>:
{
 8005cec:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 8005cee:	2180      	movs	r1, #128	; 0x80
{
 8005cf0:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8005cf2:	f001 ff15 	bl	8007b20 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	2100      	movs	r1, #0
}
 8005cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8005cfe:	f001 bf0f 	b.w	8007b20 <USBD_LL_StallEP>
 8005d02:	bf00      	nop

08005d04 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 8005d04:	b1f8      	cbz	r0, 8005d46 <USBD_GetString+0x42>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8005d06:	7803      	ldrb	r3, [r0, #0]
{
 8005d08:	b430      	push	{r4, r5}
    while (*buf != '\0')
 8005d0a:	b1eb      	cbz	r3, 8005d48 <USBD_GetString+0x44>
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	2300      	movs	r3, #0
 8005d10:	f814 5f01 	ldrb.w	r5, [r4, #1]!
    {
        len++;
 8005d14:	3301      	adds	r3, #1
 8005d16:	b2db      	uxtb	r3, r3
    while (*buf != '\0')
 8005d18:	2d00      	cmp	r5, #0
 8005d1a:	d1f9      	bne.n	8005d10 <USBD_GetString+0xc>
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	3302      	adds	r3, #2
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005d20:	2403      	movs	r4, #3
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005d22:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005d24:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005d26:	704c      	strb	r4, [r1, #1]
    while (*desc != '\0')
 8005d28:	7804      	ldrb	r4, [r0, #0]
 8005d2a:	b15c      	cbz	r4, 8005d44 <USBD_GetString+0x40>
 8005d2c:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 8005d2e:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 8005d30:	1c5a      	adds	r2, r3, #1
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 8005d36:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 8005d38:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 8005d3c:	3302      	adds	r3, #2
 8005d3e:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 8005d40:	2c00      	cmp	r4, #0
 8005d42:	d1f5      	bne.n	8005d30 <USBD_GetString+0x2c>
}
 8005d44:	bc30      	pop	{r4, r5}
 8005d46:	4770      	bx	lr
    while (*buf != '\0')
 8005d48:	2302      	movs	r3, #2
 8005d4a:	e7e9      	b.n	8005d20 <USBD_GetString+0x1c>

08005d4c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8005d4c:	b538      	push	{r3, r4, r5, lr}
 8005d4e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005d50:	2502      	movs	r5, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005d52:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
 8005d54:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8005d56:	6203      	str	r3, [r0, #32]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005d58:	f8c0 526c 	str.w	r5, [r0, #620]	; 0x26c
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	f001 ff1d 	bl	8007b9c <USBD_LL_Transmit>

  return USBD_OK;
}
 8005d62:	2000      	movs	r0, #0
 8005d64:	bd38      	pop	{r3, r4, r5, pc}
 8005d66:	bf00      	nop

08005d68 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8005d68:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	460a      	mov	r2, r1
 8005d6e:	2100      	movs	r1, #0
 8005d70:	f001 ff14 	bl	8007b9c <USBD_LL_Transmit>

  return USBD_OK;
}
 8005d74:	2000      	movs	r0, #0
 8005d76:	bd08      	pop	{r3, pc}

08005d78 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8005d78:	b538      	push	{r3, r4, r5, lr}
 8005d7a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005d7c:	2503      	movs	r5, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8005d7e:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
 8005d80:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8005d84:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005d88:	f8c0 526c 	str.w	r5, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	f001 ff13 	bl	8007bb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005d92:	2000      	movs	r0, #0
 8005d94:	bd38      	pop	{r3, r4, r5, pc}
 8005d96:	bf00      	nop

08005d98 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8005d98:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	460a      	mov	r2, r1
 8005d9e:	2100      	movs	r1, #0
 8005da0:	f001 ff0a 	bl	8007bb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005da4:	2000      	movs	r0, #0
 8005da6:	bd08      	pop	{r3, pc}

08005da8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8005da8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005daa:	2204      	movs	r2, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005dac:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005dae:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005db2:	4619      	mov	r1, r3
 8005db4:	461a      	mov	r2, r3
 8005db6:	f001 fef1 	bl	8007b9c <USBD_LL_Transmit>

  return USBD_OK;
}
 8005dba:	2000      	movs	r0, #0
 8005dbc:	bd08      	pop	{r3, pc}
 8005dbe:	bf00      	nop

08005dc0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8005dc0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005dc2:	2205      	movs	r2, #5

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005dc4:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005dc6:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005dca:	4619      	mov	r1, r3
 8005dcc:	461a      	mov	r2, r3
 8005dce:	f001 fef3 	bl	8007bb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	bd08      	pop	{r3, pc}
 8005dd6:	bf00      	nop

08005dd8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005dd8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8005dda:	f000 fd83 	bl	80068e4 <vTaskStartScheduler>
  
  return osOK;
}
 8005dde:	2000      	movs	r0, #0
 8005de0:	bd08      	pop	{r3, pc}
 8005de2:	bf00      	nop

08005de4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005de4:	b5f0      	push	{r4, r5, r6, r7, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005de6:	6945      	ldr	r5, [r0, #20]
{
 8005de8:	b087      	sub	sp, #28
 8005dea:	460b      	mov	r3, r1
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005dec:	b18d      	cbz	r5, 8005e12 <osThreadCreate+0x2e>
 8005dee:	6986      	ldr	r6, [r0, #24]
 8005df0:	b17e      	cbz	r6, 8005e12 <osThreadCreate+0x2e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005df2:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8005df6:	6902      	ldr	r2, [r0, #16]
 8005df8:	e890 0082 	ldmia.w	r0, {r1, r7}
  if (priority != osPriorityError) {
 8005dfc:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8005dfe:	bf14      	ite	ne
 8005e00:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005e02:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e04:	e88d 0070 	stmia.w	sp, {r4, r5, r6}
 8005e08:	4638      	mov	r0, r7
 8005e0a:	f000 fc91 	bl	8006730 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 8005e0e:	b007      	add	sp, #28
 8005e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e12:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8005e16:	8a02      	ldrh	r2, [r0, #16]
 8005e18:	e890 0042 	ldmia.w	r0, {r1, r6}
  if (priority != osPriorityError) {
 8005e1c:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8005e1e:	bf14      	ite	ne
 8005e20:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005e22:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e24:	ad05      	add	r5, sp, #20
 8005e26:	9400      	str	r4, [sp, #0]
 8005e28:	4630      	mov	r0, r6
 8005e2a:	9501      	str	r5, [sp, #4]
 8005e2c:	f000 fcb8 	bl	80067a0 <xTaskCreate>
 8005e30:	2801      	cmp	r0, #1
 8005e32:	bf0c      	ite	eq
 8005e34:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 8005e36:	2000      	movne	r0, #0
}
 8005e38:	b007      	add	sp, #28
 8005e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e3c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005e3c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	bf08      	it	eq
 8005e42:	2001      	moveq	r0, #1
 8005e44:	f000 fef2 	bl	8006c2c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005e48:	2000      	movs	r0, #0
 8005e4a:	bd08      	pop	{r3, pc}

08005e4c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e4c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e54:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e56:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e58:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e5a:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e5c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e5e:	6103      	str	r3, [r0, #16]
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop

08005e64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005e64:	2300      	movs	r3, #0
 8005e66:	6103      	str	r3, [r0, #16]
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop

08005e6c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e6c:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8005e6e:	6802      	ldr	r2, [r0, #0]
{
 8005e70:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e72:	689c      	ldr	r4, [r3, #8]
 8005e74:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e76:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8005e78:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8005e7a:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e7c:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e7e:	6099      	str	r1, [r3, #8]
}
 8005e80:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005e84:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005e86:	6002      	str	r2, [r0, #0]
}
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop

08005e8c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e8c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e8e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e90:	1c6b      	adds	r3, r5, #1
 8005e92:	d011      	beq.n	8005eb8 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e94:	f100 0208 	add.w	r2, r0, #8
 8005e98:	e000      	b.n	8005e9c <vListInsert+0x10>
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	6853      	ldr	r3, [r2, #4]
 8005e9e:	681c      	ldr	r4, [r3, #0]
 8005ea0:	42a5      	cmp	r5, r4
 8005ea2:	d2fa      	bcs.n	8005e9a <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8005ea4:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ea6:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8005ea8:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005eaa:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005eac:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005eae:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005eb0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005eb2:	6004      	str	r4, [r0, #0]
}
 8005eb4:	bc30      	pop	{r4, r5}
 8005eb6:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8005eb8:	6902      	ldr	r2, [r0, #16]
 8005eba:	6853      	ldr	r3, [r2, #4]
 8005ebc:	e7f2      	b.n	8005ea4 <vListInsert+0x18>
 8005ebe:	bf00      	nop

08005ec0 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ec0:	6842      	ldr	r2, [r0, #4]
 8005ec2:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005ec4:	6903      	ldr	r3, [r0, #16]
{
 8005ec6:	b410      	push	{r4}
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ec8:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005eca:	6881      	ldr	r1, [r0, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ecc:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ece:	604a      	str	r2, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8005ed0:	681a      	ldr	r2, [r3, #0]
	if( pxList->pxIndex == pxItemToRemove )
 8005ed2:	42a0      	cmp	r0, r4
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ed4:	bf08      	it	eq
 8005ed6:	6059      	streq	r1, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8005ed8:	3a01      	subs	r2, #1
	pxItemToRemove->pvContainer = NULL;
 8005eda:	2100      	movs	r1, #0
 8005edc:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005ede:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ee0:	6818      	ldr	r0, [r3, #0]
}
 8005ee2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005ee8:	4b0e      	ldr	r3, [pc, #56]	; (8005f24 <prvTaskExitError+0x3c>)
 8005eea:	681b      	ldr	r3, [r3, #0]
{
 8005eec:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8005eee:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8005ef0:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 8005ef2:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8005ef4:	d008      	beq.n	8005f08 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efa:	f383 8811 	msr	BASEPRI, r3
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	e7fe      	b.n	8005f06 <prvTaskExitError+0x1e>
 8005f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0c:	f383 8811 	msr	BASEPRI, r3
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f18:	9b01      	ldr	r3, [sp, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d0fc      	beq.n	8005f18 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f1e:	b002      	add	sp, #8
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	20000118 	.word	0x20000118

08005f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f28:	4808      	ldr	r0, [pc, #32]	; (8005f4c <prvPortStartFirstTask+0x24>)
 8005f2a:	6800      	ldr	r0, [r0, #0]
 8005f2c:	6800      	ldr	r0, [r0, #0]
 8005f2e:	f380 8808 	msr	MSP, r0
 8005f32:	f04f 0000 	mov.w	r0, #0
 8005f36:	f380 8814 	msr	CONTROL, r0
 8005f3a:	b662      	cpsie	i
 8005f3c:	b661      	cpsie	f
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	df00      	svc	0
 8005f48:	bf00      	nop
 8005f4a:	0000      	.short	0x0000
 8005f4c:	e000ed08 	.word	0xe000ed08

08005f50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f60 <vPortEnableVFP+0x10>
 8005f54:	6801      	ldr	r1, [r0, #0]
 8005f56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f5a:	6001      	str	r1, [r0, #0]
 8005f5c:	4770      	bx	lr
 8005f5e:	0000      	.short	0x0000
 8005f60:	e000ed88 	.word	0xe000ed88

08005f64 <pxPortInitialiseStack>:
{
 8005f64:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f66:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f6a:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f6e:	4c07      	ldr	r4, [pc, #28]	; (8005f8c <pxPortInitialiseStack+0x28>)
 8005f70:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f74:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f78:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f7c:	e900 0022 	stmdb	r0, {r1, r5}
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f80:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8005f84:	bc30      	pop	{r4, r5}
 8005f86:	3844      	subs	r0, #68	; 0x44
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	08005ee9 	.word	0x08005ee9

08005f90 <SVC_Handler>:
	__asm volatile (
 8005f90:	4b07      	ldr	r3, [pc, #28]	; (8005fb0 <pxCurrentTCBConst2>)
 8005f92:	6819      	ldr	r1, [r3, #0]
 8005f94:	6808      	ldr	r0, [r1, #0]
 8005f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f9a:	f380 8809 	msr	PSP, r0
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f04f 0000 	mov.w	r0, #0
 8005fa6:	f380 8811 	msr	BASEPRI, r0
 8005faa:	4770      	bx	lr
 8005fac:	f3af 8000 	nop.w

08005fb0 <pxCurrentTCBConst2>:
 8005fb0:	20004510 	.word	0x20004510

08005fb4 <vPortEnterCritical>:
 8005fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8005fc4:	4a0a      	ldr	r2, [pc, #40]	; (8005ff0 <vPortEnterCritical+0x3c>)
 8005fc6:	6813      	ldr	r3, [r2, #0]
 8005fc8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8005fca:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8005fcc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8005fce:	d000      	beq.n	8005fd2 <vPortEnterCritical+0x1e>
 8005fd0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005fd2:	4b08      	ldr	r3, [pc, #32]	; (8005ff4 <vPortEnterCritical+0x40>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005fda:	d0f9      	beq.n	8005fd0 <vPortEnterCritical+0x1c>
 8005fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	e7fe      	b.n	8005fec <vPortEnterCritical+0x38>
 8005fee:	bf00      	nop
 8005ff0:	20000118 	.word	0x20000118
 8005ff4:	e000ed04 	.word	0xe000ed04

08005ff8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005ff8:	4a08      	ldr	r2, [pc, #32]	; (800601c <vPortExitCritical+0x24>)
 8005ffa:	6813      	ldr	r3, [r2, #0]
 8005ffc:	b943      	cbnz	r3, 8006010 <vPortExitCritical+0x18>
 8005ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	e7fe      	b.n	800600e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006010:	3b01      	subs	r3, #1
 8006012:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006014:	b90b      	cbnz	r3, 800601a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006016:	f383 8811 	msr	BASEPRI, r3
 800601a:	4770      	bx	lr
 800601c:	20000118 	.word	0x20000118

08006020 <PendSV_Handler>:
	__asm volatile
 8006020:	f3ef 8009 	mrs	r0, PSP
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	4b15      	ldr	r3, [pc, #84]	; (8006080 <pxCurrentTCBConst>)
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	f01e 0f10 	tst.w	lr, #16
 8006030:	bf08      	it	eq
 8006032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800603a:	6010      	str	r0, [r2, #0]
 800603c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006040:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006044:	f380 8811 	msr	BASEPRI, r0
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f000 fe12 	bl	8006c78 <vTaskSwitchContext>
 8006054:	f04f 0000 	mov.w	r0, #0
 8006058:	f380 8811 	msr	BASEPRI, r0
 800605c:	bc09      	pop	{r0, r3}
 800605e:	6819      	ldr	r1, [r3, #0]
 8006060:	6808      	ldr	r0, [r1, #0]
 8006062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006066:	f01e 0f10 	tst.w	lr, #16
 800606a:	bf08      	it	eq
 800606c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006070:	f380 8809 	msr	PSP, r0
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	f3af 8000 	nop.w

08006080 <pxCurrentTCBConst>:
 8006080:	20004510 	.word	0x20004510

08006084 <SysTick_Handler>:
{
 8006084:	b508      	push	{r3, lr}
	__asm volatile
 8006086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608a:	f383 8811 	msr	BASEPRI, r3
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8006096:	f000 fc8f 	bl	80069b8 <xTaskIncrementTick>
 800609a:	b118      	cbz	r0, 80060a4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800609c:	4b03      	ldr	r3, [pc, #12]	; (80060ac <SysTick_Handler+0x28>)
 800609e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060a2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80060a4:	2300      	movs	r3, #0
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	bd08      	pop	{r3, pc}
 80060ac:	e000ed04 	.word	0xe000ed04

080060b0 <vPortSetupTimerInterrupt>:
{
 80060b0:	b430      	push	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80060b2:	4a09      	ldr	r2, [pc, #36]	; (80060d8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80060b4:	4d09      	ldr	r5, [pc, #36]	; (80060dc <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80060b6:	4b0a      	ldr	r3, [pc, #40]	; (80060e0 <vPortSetupTimerInterrupt+0x30>)
 80060b8:	4c0a      	ldr	r4, [pc, #40]	; (80060e4 <vPortSetupTimerInterrupt+0x34>)
 80060ba:	480b      	ldr	r0, [pc, #44]	; (80060e8 <vPortSetupTimerInterrupt+0x38>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80060bc:	2100      	movs	r1, #0
 80060be:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80060c0:	6029      	str	r1, [r5, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	fba4 1303 	umull	r1, r3, r4, r3
 80060c8:	099b      	lsrs	r3, r3, #6
 80060ca:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060cc:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80060ce:	6003      	str	r3, [r0, #0]
}
 80060d0:	bc30      	pop	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060d2:	6011      	str	r1, [r2, #0]
}
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	e000e010 	.word	0xe000e010
 80060dc:	e000e018 	.word	0xe000e018
 80060e0:	2000011c 	.word	0x2000011c
 80060e4:	10624dd3 	.word	0x10624dd3
 80060e8:	e000e014 	.word	0xe000e014

080060ec <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060ec:	4b3a      	ldr	r3, [pc, #232]	; (80061d8 <xPortStartScheduler+0xec>)
 80060ee:	4a3b      	ldr	r2, [pc, #236]	; (80061dc <xPortStartScheduler+0xf0>)
 80060f0:	6819      	ldr	r1, [r3, #0]
 80060f2:	4291      	cmp	r1, r2
 80060f4:	d038      	beq.n	8006168 <xPortStartScheduler+0x7c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	4b39      	ldr	r3, [pc, #228]	; (80061e0 <xPortStartScheduler+0xf4>)
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d03d      	beq.n	800617a <xPortStartScheduler+0x8e>
{
 80060fe:	b510      	push	{r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006100:	4b38      	ldr	r3, [pc, #224]	; (80061e4 <xPortStartScheduler+0xf8>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006102:	4839      	ldr	r0, [pc, #228]	; (80061e8 <xPortStartScheduler+0xfc>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006104:	781a      	ldrb	r2, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006106:	4c39      	ldr	r4, [pc, #228]	; (80061ec <xPortStartScheduler+0x100>)
{
 8006108:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800610a:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800610c:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800610e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006110:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	b2db      	uxtb	r3, r3
 8006116:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800611a:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800611e:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006122:	2107      	movs	r1, #7
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006124:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006128:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800612a:	0611      	lsls	r1, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800612c:	7023      	strb	r3, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800612e:	bf48      	it	mi
 8006130:	2306      	movmi	r3, #6
 8006132:	d401      	bmi.n	8006138 <xPortStartScheduler+0x4c>
 8006134:	e00f      	b.n	8006156 <xPortStartScheduler+0x6a>
 8006136:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006138:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800613c:	0052      	lsls	r2, r2, #1
 800613e:	b2d2      	uxtb	r2, r2
 8006140:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006144:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8006148:	0612      	lsls	r2, r2, #24
 800614a:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 800614e:	d4f2      	bmi.n	8006136 <xPortStartScheduler+0x4a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006150:	2b03      	cmp	r3, #3
 8006152:	6003      	str	r3, [r0, #0]
 8006154:	d01a      	beq.n	800618c <xPortStartScheduler+0xa0>
	__asm volatile
 8006156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	e7fe      	b.n	8006166 <xPortStartScheduler+0x7a>
 8006168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	e7fe      	b.n	8006178 <xPortStartScheduler+0x8c>
 800617a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617e:	f383 8811 	msr	BASEPRI, r3
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	e7fe      	b.n	800618a <xPortStartScheduler+0x9e>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800618c:	9901      	ldr	r1, [sp, #4]
 800618e:	4c15      	ldr	r4, [pc, #84]	; (80061e4 <xPortStartScheduler+0xf8>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006190:	4a17      	ldr	r2, [pc, #92]	; (80061f0 <xPortStartScheduler+0x104>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006192:	021b      	lsls	r3, r3, #8
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006194:	b2c9      	uxtb	r1, r1
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006196:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800619a:	6003      	str	r3, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800619c:	7021      	strb	r1, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800619e:	6813      	ldr	r3, [r2, #0]
 80061a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80061a6:	6813      	ldr	r3, [r2, #0]
 80061a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80061ac:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 80061ae:	f7ff ff7f 	bl	80060b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80061b2:	4b10      	ldr	r3, [pc, #64]	; (80061f4 <xPortStartScheduler+0x108>)
 80061b4:	2400      	movs	r4, #0
 80061b6:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80061b8:	f7ff feca 	bl	8005f50 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061bc:	4a0e      	ldr	r2, [pc, #56]	; (80061f8 <xPortStartScheduler+0x10c>)
 80061be:	6813      	ldr	r3, [r2, #0]
 80061c0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061c4:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80061c6:	f7ff feaf 	bl	8005f28 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80061ca:	f000 fd55 	bl	8006c78 <vTaskSwitchContext>
	prvTaskExitError();
 80061ce:	f7ff fe8b 	bl	8005ee8 <prvTaskExitError>
}
 80061d2:	4620      	mov	r0, r4
 80061d4:	b002      	add	sp, #8
 80061d6:	bd10      	pop	{r4, pc}
 80061d8:	e000ed00 	.word	0xe000ed00
 80061dc:	410fc271 	.word	0x410fc271
 80061e0:	410fc270 	.word	0x410fc270
 80061e4:	e000e400 	.word	0xe000e400
 80061e8:	200008f4 	.word	0x200008f4
 80061ec:	200008f1 	.word	0x200008f1
 80061f0:	e000ed20 	.word	0xe000ed20
 80061f4:	20000118 	.word	0x20000118
 80061f8:	e000ef34 	.word	0xe000ef34

080061fc <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80061fc:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80061fe:	4b11      	ldr	r3, [pc, #68]	; (8006244 <prvInsertBlockIntoFreeList+0x48>)
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	4282      	cmp	r2, r0
 8006204:	d201      	bcs.n	800620a <prvInsertBlockIntoFreeList+0xe>
 8006206:	4613      	mov	r3, r2
 8006208:	e7fa      	b.n	8006200 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800620a:	685c      	ldr	r4, [r3, #4]
 800620c:	1919      	adds	r1, r3, r4
 800620e:	4288      	cmp	r0, r1
 8006210:	d103      	bne.n	800621a <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006212:	6841      	ldr	r1, [r0, #4]
 8006214:	4421      	add	r1, r4
 8006216:	6059      	str	r1, [r3, #4]
 8006218:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800621a:	6844      	ldr	r4, [r0, #4]
 800621c:	1901      	adds	r1, r0, r4
 800621e:	428a      	cmp	r2, r1
 8006220:	d109      	bne.n	8006236 <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006222:	4909      	ldr	r1, [pc, #36]	; (8006248 <prvInsertBlockIntoFreeList+0x4c>)
 8006224:	6809      	ldr	r1, [r1, #0]
 8006226:	428a      	cmp	r2, r1
 8006228:	d005      	beq.n	8006236 <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800622a:	6851      	ldr	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800622c:	6812      	ldr	r2, [r2, #0]
 800622e:	6002      	str	r2, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006230:	4421      	add	r1, r4
 8006232:	6041      	str	r1, [r0, #4]
 8006234:	e000      	b.n	8006238 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006236:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006238:	4298      	cmp	r0, r3
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800623a:	bf18      	it	ne
 800623c:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800623e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	20004508 	.word	0x20004508
 8006248:	200008f8 	.word	0x200008f8

0800624c <pvPortMalloc>:
{
 800624c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624e:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006250:	f000 fbaa 	bl	80069a8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006254:	4840      	ldr	r0, [pc, #256]	; (8006358 <pvPortMalloc+0x10c>)
 8006256:	6803      	ldr	r3, [r0, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d056      	beq.n	800630a <pvPortMalloc+0xbe>
 800625c:	4a3f      	ldr	r2, [pc, #252]	; (800635c <pvPortMalloc+0x110>)
 800625e:	6815      	ldr	r5, [r2, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006260:	422c      	tst	r4, r5
 8006262:	d14d      	bne.n	8006300 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 8006264:	2c00      	cmp	r4, #0
 8006266:	d04b      	beq.n	8006300 <pvPortMalloc+0xb4>
				xWantedSize += xHeapStructSize;
 8006268:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800626c:	0750      	lsls	r0, r2, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800626e:	bf1c      	itt	ne
 8006270:	f022 0207 	bicne.w	r2, r2, #7
 8006274:	3208      	addne	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006276:	2a00      	cmp	r2, #0
 8006278:	d042      	beq.n	8006300 <pvPortMalloc+0xb4>
 800627a:	4f39      	ldr	r7, [pc, #228]	; (8006360 <pvPortMalloc+0x114>)
 800627c:	683e      	ldr	r6, [r7, #0]
 800627e:	42b2      	cmp	r2, r6
 8006280:	d83e      	bhi.n	8006300 <pvPortMalloc+0xb4>
				pxBlock = xStart.pxNextFreeBlock;
 8006282:	4838      	ldr	r0, [pc, #224]	; (8006364 <pvPortMalloc+0x118>)
 8006284:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006286:	e006      	b.n	8006296 <pvPortMalloc+0x4a>
 8006288:	f8d4 e000 	ldr.w	lr, [r4]
 800628c:	f1be 0f00 	cmp.w	lr, #0
 8006290:	d004      	beq.n	800629c <pvPortMalloc+0x50>
 8006292:	4620      	mov	r0, r4
 8006294:	4674      	mov	r4, lr
 8006296:	6861      	ldr	r1, [r4, #4]
 8006298:	428a      	cmp	r2, r1
 800629a:	d8f5      	bhi.n	8006288 <pvPortMalloc+0x3c>
				if( pxBlock != pxEnd )
 800629c:	429c      	cmp	r4, r3
 800629e:	d02f      	beq.n	8006300 <pvPortMalloc+0xb4>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80062a4:	1a8b      	subs	r3, r1, r2
 80062a6:	2b10      	cmp	r3, #16
 80062a8:	d910      	bls.n	80062cc <pvPortMalloc+0x80>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062aa:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062ac:	0741      	lsls	r1, r0, #29
 80062ae:	d008      	beq.n	80062c2 <pvPortMalloc+0x76>
 80062b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	e7fe      	b.n	80062c0 <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062c2:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80062c4:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80062c6:	f7ff ff99 	bl	80061fc <prvInsertBlockIntoFreeList>
 80062ca:	6861      	ldr	r1, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80062cc:	4a26      	ldr	r2, [pc, #152]	; (8006368 <pvPortMalloc+0x11c>)
 80062ce:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80062d0:	1a76      	subs	r6, r6, r1
					pxBlock->pxNextFreeBlock = NULL;
 80062d2:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80062d4:	4329      	orrs	r1, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80062d6:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80062d8:	6061      	str	r1, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062da:	6023      	str	r3, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80062dc:	f104 0408 	add.w	r4, r4, #8
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80062e0:	bf38      	it	cc
 80062e2:	6016      	strcc	r6, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80062e4:	603e      	str	r6, [r7, #0]
	( void ) xTaskResumeAll();
 80062e6:	f000 fc15 	bl	8006b14 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062ea:	0763      	lsls	r3, r4, #29
 80062ec:	d00b      	beq.n	8006306 <pvPortMalloc+0xba>
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	e7fe      	b.n	80062fe <pvPortMalloc+0xb2>
	( void ) xTaskResumeAll();
 8006300:	f000 fc08 	bl	8006b14 <xTaskResumeAll>
 8006304:	2400      	movs	r4, #0
}
 8006306:	4620      	mov	r0, r4
 8006308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uxAddress = ( size_t ) ucHeap;
 800630a:	4918      	ldr	r1, [pc, #96]	; (800636c <pvPortMalloc+0x120>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800630c:	074d      	lsls	r5, r1, #29
 800630e:	d01f      	beq.n	8006350 <pvPortMalloc+0x104>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006310:	1dca      	adds	r2, r1, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006312:	f022 0207 	bic.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006316:	f501 5370 	add.w	r3, r1, #15360	; 0x3c00
 800631a:	1a9b      	subs	r3, r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800631c:	4611      	mov	r1, r2
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800631e:	440b      	add	r3, r1
	uxAddress -= xHeapStructSize;
 8006320:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006322:	f023 0307 	bic.w	r3, r3, #7
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006326:	4d0e      	ldr	r5, [pc, #56]	; (8006360 <pvPortMalloc+0x114>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006328:	4e0e      	ldr	r6, [pc, #56]	; (8006364 <pvPortMalloc+0x118>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800632a:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8006368 <pvPortMalloc+0x11c>
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800632e:	4f0b      	ldr	r7, [pc, #44]	; (800635c <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8006330:	6003      	str	r3, [r0, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006332:	1a5a      	subs	r2, r3, r1
	xStart.xBlockSize = ( size_t ) 0;
 8006334:	2000      	movs	r0, #0
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006336:	602a      	str	r2, [r5, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006338:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	xStart.xBlockSize = ( size_t ) 0;
 800633c:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800633e:	6031      	str	r1, [r6, #0]
	pxEnd->xBlockSize = 0;
 8006340:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006342:	6018      	str	r0, [r3, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006344:	f8ce 2000 	str.w	r2, [lr]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006348:	603d      	str	r5, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800634a:	604a      	str	r2, [r1, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800634c:	600b      	str	r3, [r1, #0]
 800634e:	e787      	b.n	8006260 <pvPortMalloc+0x14>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006350:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006354:	e7e3      	b.n	800631e <pvPortMalloc+0xd2>
 8006356:	bf00      	nop
 8006358:	200008f8 	.word	0x200008f8
 800635c:	200044fc 	.word	0x200044fc
 8006360:	20004500 	.word	0x20004500
 8006364:	20004508 	.word	0x20004508
 8006368:	20004504 	.word	0x20004504
 800636c:	200008fc 	.word	0x200008fc

08006370 <vPortFree>:
	if( pv != NULL )
 8006370:	b1d0      	cbz	r0, 80063a8 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006372:	4a19      	ldr	r2, [pc, #100]	; (80063d8 <vPortFree+0x68>)
 8006374:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006378:	6812      	ldr	r2, [r2, #0]
 800637a:	4213      	tst	r3, r2
 800637c:	d108      	bne.n	8006390 <vPortFree+0x20>
 800637e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	e7fe      	b.n	800638e <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006390:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006394:	b149      	cbz	r1, 80063aa <vPortFree+0x3a>
 8006396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639a:	f383 8811 	msr	BASEPRI, r3
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	e7fe      	b.n	80063a6 <vPortFree+0x36>
 80063a8:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063aa:	ea23 0302 	bic.w	r3, r3, r2
{
 80063ae:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063b0:	f840 3c04 	str.w	r3, [r0, #-4]
 80063b4:	4604      	mov	r4, r0
				vTaskSuspendAll();
 80063b6:	f000 faf7 	bl	80069a8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063ba:	4a08      	ldr	r2, [pc, #32]	; (80063dc <vPortFree+0x6c>)
 80063bc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80063c0:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063c2:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063c6:	440b      	add	r3, r1
 80063c8:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063ca:	f7ff ff17 	bl	80061fc <prvInsertBlockIntoFreeList>
}
 80063ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80063d2:	f000 bb9f 	b.w	8006b14 <xTaskResumeAll>
 80063d6:	bf00      	nop
 80063d8:	200044fc 	.word	0x200044fc
 80063dc:	20004500 	.word	0x20004500

080063e0 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063e4:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063e6:	f7ff fde5 	bl	8005fb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063ea:	4a36      	ldr	r2, [pc, #216]	; (80064c4 <prvAddNewTaskToReadyList+0xe4>)
		if( pxCurrentTCB == NULL )
 80063ec:	4d36      	ldr	r5, [pc, #216]	; (80064c8 <prvAddNewTaskToReadyList+0xe8>)
		uxCurrentNumberOfTasks++;
 80063ee:	6813      	ldr	r3, [r2, #0]
 80063f0:	3301      	adds	r3, #1
 80063f2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063f4:	682b      	ldr	r3, [r5, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d035      	beq.n	8006466 <prvAddNewTaskToReadyList+0x86>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80063fa:	4f34      	ldr	r7, [pc, #208]	; (80064cc <prvAddNewTaskToReadyList+0xec>)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	b34b      	cbz	r3, 8006454 <prvAddNewTaskToReadyList+0x74>
 8006400:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006402:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 80064f0 <prvAddNewTaskToReadyList+0x110>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006406:	f8df e0ec 	ldr.w	lr, [pc, #236]	; 80064f4 <prvAddNewTaskToReadyList+0x114>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800640a:	4e31      	ldr	r6, [pc, #196]	; (80064d0 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 800640c:	f8de 2000 	ldr.w	r2, [lr]
		prvAddTaskToReadyList( pxNewTCB );
 8006410:	6831      	ldr	r1, [r6, #0]
 8006412:	2301      	movs	r3, #1
 8006414:	4083      	lsls	r3, r0
 8006416:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800641a:	430b      	orrs	r3, r1
		uxTaskNumber++;
 800641c:	3201      	adds	r2, #1
		prvAddTaskToReadyList( pxNewTCB );
 800641e:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8006422:	1d21      	adds	r1, r4, #4
 8006424:	6033      	str	r3, [r6, #0]
		uxTaskNumber++;
 8006426:	f8ce 2000 	str.w	r2, [lr]
		prvAddTaskToReadyList( pxNewTCB );
 800642a:	f7ff fd1f 	bl	8005e6c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800642e:	f7ff fde3 	bl	8005ff8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	b163      	cbz	r3, 8006450 <prvAddNewTaskToReadyList+0x70>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006436:	682a      	ldr	r2, [r5, #0]
 8006438:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800643a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800643c:	429a      	cmp	r2, r3
 800643e:	d207      	bcs.n	8006450 <prvAddNewTaskToReadyList+0x70>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006440:	4b24      	ldr	r3, [pc, #144]	; (80064d4 <prvAddNewTaskToReadyList+0xf4>)
 8006442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006454:	682b      	ldr	r3, [r5, #0]
 8006456:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645a:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80064f0 <prvAddNewTaskToReadyList+0x110>
 800645e:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8006460:	bf98      	it	ls
 8006462:	602c      	strls	r4, [r5, #0]
 8006464:	e7cf      	b.n	8006406 <prvAddNewTaskToReadyList+0x26>
			pxCurrentTCB = pxNewTCB;
 8006466:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006468:	6813      	ldr	r3, [r2, #0]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d004      	beq.n	8006478 <prvAddNewTaskToReadyList+0x98>
 800646e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006470:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80064f0 <prvAddNewTaskToReadyList+0x110>
 8006474:	4f15      	ldr	r7, [pc, #84]	; (80064cc <prvAddNewTaskToReadyList+0xec>)
 8006476:	e7c6      	b.n	8006406 <prvAddNewTaskToReadyList+0x26>
 8006478:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80064f0 <prvAddNewTaskToReadyList+0x110>
 800647c:	4646      	mov	r6, r8
 800647e:	f108 078c 	add.w	r7, r8, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006482:	4630      	mov	r0, r6
 8006484:	3614      	adds	r6, #20
 8006486:	f7ff fce1 	bl	8005e4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800648a:	42be      	cmp	r6, r7
 800648c:	d1f9      	bne.n	8006482 <prvAddNewTaskToReadyList+0xa2>
	}

	vListInitialise( &xDelayedTaskList1 );
 800648e:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80064f8 <prvAddNewTaskToReadyList+0x118>
	vListInitialise( &xDelayedTaskList2 );
 8006492:	4e11      	ldr	r6, [pc, #68]	; (80064d8 <prvAddNewTaskToReadyList+0xf8>)
 8006494:	4f0d      	ldr	r7, [pc, #52]	; (80064cc <prvAddNewTaskToReadyList+0xec>)
	vListInitialise( &xDelayedTaskList1 );
 8006496:	4648      	mov	r0, r9
 8006498:	f7ff fcd8 	bl	8005e4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800649c:	4630      	mov	r0, r6
 800649e:	f7ff fcd5 	bl	8005e4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80064a2:	480e      	ldr	r0, [pc, #56]	; (80064dc <prvAddNewTaskToReadyList+0xfc>)
 80064a4:	f7ff fcd2 	bl	8005e4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80064a8:	480d      	ldr	r0, [pc, #52]	; (80064e0 <prvAddNewTaskToReadyList+0x100>)
 80064aa:	f7ff fccf 	bl	8005e4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80064ae:	480d      	ldr	r0, [pc, #52]	; (80064e4 <prvAddNewTaskToReadyList+0x104>)
 80064b0:	f7ff fccc 	bl	8005e4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80064b4:	4a0c      	ldr	r2, [pc, #48]	; (80064e8 <prvAddNewTaskToReadyList+0x108>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80064b6:	4b0d      	ldr	r3, [pc, #52]	; (80064ec <prvAddNewTaskToReadyList+0x10c>)
	pxDelayedTaskList = &xDelayedTaskList1;
 80064b8:	f8c2 9000 	str.w	r9, [r2]
 80064bc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80064be:	601e      	str	r6, [r3, #0]
 80064c0:	e7a1      	b.n	8006406 <prvAddNewTaskToReadyList+0x26>
 80064c2:	bf00      	nop
 80064c4:	200045a8 	.word	0x200045a8
 80064c8:	20004510 	.word	0x20004510
 80064cc:	20004604 	.word	0x20004604
 80064d0:	200045bc 	.word	0x200045bc
 80064d4:	e000ed04 	.word	0xe000ed04
 80064d8:	200045d4 	.word	0x200045d4
 80064dc:	200045f0 	.word	0x200045f0
 80064e0:	2000461c 	.word	0x2000461c
 80064e4:	20004608 	.word	0x20004608
 80064e8:	20004514 	.word	0x20004514
 80064ec:	20004518 	.word	0x20004518
 80064f0:	2000451c 	.word	0x2000451c
 80064f4:	200045b8 	.word	0x200045b8
 80064f8:	200045c0 	.word	0x200045c0

080064fc <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80064fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006500:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006502:	780d      	ldrb	r5, [r1, #0]
 8006504:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006508:	6b26      	ldr	r6, [r4, #48]	; 0x30
		if( pcName[ x ] == 0x00 )
 800650a:	f891 e000 	ldrb.w	lr, [r1]
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800650e:	9d08      	ldr	r5, [sp, #32]
 8006510:	9f09      	ldr	r7, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006512:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006516:	3a01      	subs	r2, #1
 8006518:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800651c:	4681      	mov	r9, r0
 800651e:	469a      	mov	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006520:	f026 0607 	bic.w	r6, r6, #7
		if( pcName[ x ] == 0x00 )
 8006524:	f1be 0f00 	cmp.w	lr, #0
 8006528:	d047      	beq.n	80065ba <prvInitialiseNewTask.isra.2+0xbe>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800652a:	784b      	ldrb	r3, [r1, #1]
 800652c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
 8006530:	784b      	ldrb	r3, [r1, #1]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d041      	beq.n	80065ba <prvInitialiseNewTask.isra.2+0xbe>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006536:	788b      	ldrb	r3, [r1, #2]
 8006538:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
 800653c:	788b      	ldrb	r3, [r1, #2]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d03b      	beq.n	80065ba <prvInitialiseNewTask.isra.2+0xbe>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006542:	78cb      	ldrb	r3, [r1, #3]
 8006544:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
 8006548:	78cb      	ldrb	r3, [r1, #3]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d035      	beq.n	80065ba <prvInitialiseNewTask.isra.2+0xbe>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800654e:	790b      	ldrb	r3, [r1, #4]
 8006550:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
 8006554:	790b      	ldrb	r3, [r1, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d02f      	beq.n	80065ba <prvInitialiseNewTask.isra.2+0xbe>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800655a:	794b      	ldrb	r3, [r1, #5]
 800655c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
 8006560:	794b      	ldrb	r3, [r1, #5]
 8006562:	b353      	cbz	r3, 80065ba <prvInitialiseNewTask.isra.2+0xbe>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006564:	798b      	ldrb	r3, [r1, #6]
 8006566:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
 800656a:	798b      	ldrb	r3, [r1, #6]
 800656c:	b32b      	cbz	r3, 80065ba <prvInitialiseNewTask.isra.2+0xbe>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800656e:	79cb      	ldrb	r3, [r1, #7]
 8006570:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
 8006574:	79cb      	ldrb	r3, [r1, #7]
 8006576:	b303      	cbz	r3, 80065ba <prvInitialiseNewTask.isra.2+0xbe>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006578:	7a0b      	ldrb	r3, [r1, #8]
 800657a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if( pcName[ x ] == 0x00 )
 800657e:	7a0b      	ldrb	r3, [r1, #8]
 8006580:	b1db      	cbz	r3, 80065ba <prvInitialiseNewTask.isra.2+0xbe>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006582:	7a4b      	ldrb	r3, [r1, #9]
 8006584:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		if( pcName[ x ] == 0x00 )
 8006588:	7a4b      	ldrb	r3, [r1, #9]
 800658a:	b1b3      	cbz	r3, 80065ba <prvInitialiseNewTask.isra.2+0xbe>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800658c:	7a8b      	ldrb	r3, [r1, #10]
 800658e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		if( pcName[ x ] == 0x00 )
 8006592:	7a8b      	ldrb	r3, [r1, #10]
 8006594:	b18b      	cbz	r3, 80065ba <prvInitialiseNewTask.isra.2+0xbe>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006596:	7acb      	ldrb	r3, [r1, #11]
 8006598:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
		if( pcName[ x ] == 0x00 )
 800659c:	7acb      	ldrb	r3, [r1, #11]
 800659e:	b163      	cbz	r3, 80065ba <prvInitialiseNewTask.isra.2+0xbe>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065a0:	7b0b      	ldrb	r3, [r1, #12]
 80065a2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
		if( pcName[ x ] == 0x00 )
 80065a6:	7b0b      	ldrb	r3, [r1, #12]
 80065a8:	b13b      	cbz	r3, 80065ba <prvInitialiseNewTask.isra.2+0xbe>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065aa:	7b4b      	ldrb	r3, [r1, #13]
 80065ac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		if( pcName[ x ] == 0x00 )
 80065b0:	7b4b      	ldrb	r3, [r1, #13]
 80065b2:	b113      	cbz	r3, 80065ba <prvInitialiseNewTask.isra.2+0xbe>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065b4:	7b8b      	ldrb	r3, [r1, #14]
 80065b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065ba:	2d06      	cmp	r5, #6
 80065bc:	bf28      	it	cs
 80065be:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80065c0:	f04f 0800 	mov.w	r8, #0
	pxNewTCB->uxPriority = uxPriority;
 80065c4:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80065c6:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80065c8:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80065ca:	f884 8043 	strb.w	r8, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 80065ce:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80065d2:	f7ff fc47 	bl	8005e64 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065d6:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80065da:	f104 0018 	add.w	r0, r4, #24
 80065de:	f7ff fc41 	bl	8005e64 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80065e2:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065e6:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80065e8:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065ea:	f884 8050 	strb.w	r8, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80065ee:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065f0:	4652      	mov	r2, sl
 80065f2:	4649      	mov	r1, r9
 80065f4:	4630      	mov	r0, r6
 80065f6:	f7ff fcb5 	bl	8005f64 <pxPortInitialiseStack>
 80065fa:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80065fc:	b107      	cbz	r7, 8006600 <prvInitialiseNewTask.isra.2+0x104>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065fe:	603c      	str	r4, [r7, #0]
 8006600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006604 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006606:	4b1b      	ldr	r3, [pc, #108]	; (8006674 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006608:	4d1b      	ldr	r5, [pc, #108]	; (8006678 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800660a:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800660c:	682b      	ldr	r3, [r5, #0]
{
 800660e:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006610:	1d18      	adds	r0, r3, #4
{
 8006612:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006614:	f7ff fc54 	bl	8005ec0 <uxListRemove>
 8006618:	b940      	cbnz	r0, 800662c <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800661a:	682b      	ldr	r3, [r5, #0]
 800661c:	4917      	ldr	r1, [pc, #92]	; (800667c <prvAddCurrentTaskToDelayedList+0x78>)
 800661e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006620:	680b      	ldr	r3, [r1, #0]
 8006622:	2201      	movs	r2, #1
 8006624:	4082      	lsls	r2, r0
 8006626:	ea23 0302 	bic.w	r3, r3, r2
 800662a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800662c:	1c63      	adds	r3, r4, #1
 800662e:	d018      	beq.n	8006662 <prvAddCurrentTaskToDelayedList+0x5e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006630:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006632:	682b      	ldr	r3, [r5, #0]

			if( xTimeToWake < xConstTickCount )
 8006634:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006636:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006638:	d80b      	bhi.n	8006652 <prvAddCurrentTaskToDelayedList+0x4e>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800663a:	4b11      	ldr	r3, [pc, #68]	; (8006680 <prvAddCurrentTaskToDelayedList+0x7c>)
 800663c:	6818      	ldr	r0, [r3, #0]
 800663e:	6829      	ldr	r1, [r5, #0]
 8006640:	3104      	adds	r1, #4
 8006642:	f7ff fc23 	bl	8005e8c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8006646:	4b0f      	ldr	r3, [pc, #60]	; (8006684 <prvAddCurrentTaskToDelayedList+0x80>)
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 800664c:	bf38      	it	cc
 800664e:	601c      	strcc	r4, [r3, #0]
 8006650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006652:	4b0d      	ldr	r3, [pc, #52]	; (8006688 <prvAddCurrentTaskToDelayedList+0x84>)
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	6829      	ldr	r1, [r5, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006658:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800665c:	3104      	adds	r1, #4
 800665e:	f7ff bc15 	b.w	8005e8c <vListInsert>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006662:	2f00      	cmp	r7, #0
 8006664:	d0e4      	beq.n	8006630 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006666:	6829      	ldr	r1, [r5, #0]
 8006668:	4808      	ldr	r0, [pc, #32]	; (800668c <prvAddCurrentTaskToDelayedList+0x88>)
 800666a:	3104      	adds	r1, #4
}
 800666c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006670:	f7ff bbfc 	b.w	8005e6c <vListInsertEnd>
 8006674:	20004630 	.word	0x20004630
 8006678:	20004510 	.word	0x20004510
 800667c:	200045bc 	.word	0x200045bc
 8006680:	20004514 	.word	0x20004514
 8006684:	200045e8 	.word	0x200045e8
 8006688:	20004518 	.word	0x20004518
 800668c:	20004608 	.word	0x20004608

08006690 <prvIdleTask>:
{
 8006690:	f8df a090 	ldr.w	sl, [pc, #144]	; 8006724 <prvIdleTask+0x94>
 8006694:	4e21      	ldr	r6, [pc, #132]	; (800671c <prvIdleTask+0x8c>)
 8006696:	4d22      	ldr	r5, [pc, #136]	; (8006720 <prvIdleTask+0x90>)
 8006698:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8006728 <prvIdleTask+0x98>
				taskYIELD();
 800669c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800672c <prvIdleTask+0x9c>
{
 80066a0:	b580      	push	{r7, lr}
				taskYIELD();
 80066a2:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066a6:	682b      	ldr	r3, [r5, #0]
 80066a8:	b32b      	cbz	r3, 80066f6 <prvIdleTask+0x66>
			taskENTER_CRITICAL();
 80066aa:	f7ff fc83 	bl	8005fb4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80066ae:	f8da 300c 	ldr.w	r3, [sl, #12]
 80066b2:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066b4:	1d20      	adds	r0, r4, #4
 80066b6:	f7ff fc03 	bl	8005ec0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80066ba:	6833      	ldr	r3, [r6, #0]
 80066bc:	3b01      	subs	r3, #1
 80066be:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 80066c0:	682b      	ldr	r3, [r5, #0]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 80066c6:	f7ff fc97 	bl	8005ff8 <vPortExitCritical>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80066ca:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80066ce:	b1eb      	cbz	r3, 800670c <prvIdleTask+0x7c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d00a      	beq.n	80066ea <prvIdleTask+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d0e6      	beq.n	80066a6 <prvIdleTask+0x16>
 80066d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066dc:	f383 8811 	msr	BASEPRI, r3
 80066e0:	f3bf 8f6f 	isb	sy
 80066e4:	f3bf 8f4f 	dsb	sy
 80066e8:	e7fe      	b.n	80066e8 <prvIdleTask+0x58>
				vPortFree( pxTCB );
 80066ea:	4620      	mov	r0, r4
 80066ec:	f7ff fe40 	bl	8006370 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066f0:	682b      	ldr	r3, [r5, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1d9      	bne.n	80066aa <prvIdleTask+0x1a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80066f6:	f8d9 3000 	ldr.w	r3, [r9]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d9d3      	bls.n	80066a6 <prvIdleTask+0x16>
				taskYIELD();
 80066fe:	f8c8 7000 	str.w	r7, [r8]
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	e7cc      	b.n	80066a6 <prvIdleTask+0x16>
				vPortFree( pxTCB->pxStack );
 800670c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800670e:	f7ff fe2f 	bl	8006370 <vPortFree>
				vPortFree( pxTCB );
 8006712:	4620      	mov	r0, r4
 8006714:	f7ff fe2c 	bl	8006370 <vPortFree>
 8006718:	e7c5      	b.n	80066a6 <prvIdleTask+0x16>
 800671a:	bf00      	nop
 800671c:	200045a8 	.word	0x200045a8
 8006720:	200045ac 	.word	0x200045ac
 8006724:	2000461c 	.word	0x2000461c
 8006728:	2000451c 	.word	0x2000451c
 800672c:	e000ed04 	.word	0xe000ed04

08006730 <xTaskCreateStatic>:
	{
 8006730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006732:	b087      	sub	sp, #28
 8006734:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006736:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006738:	9c0e      	ldr	r4, [sp, #56]	; 0x38
		configASSERT( puxStackBuffer != NULL );
 800673a:	b175      	cbz	r5, 800675a <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800673c:	b334      	cbz	r4, 800678c <xTaskCreateStatic+0x5c>
			volatile size_t xSize = sizeof( StaticTask_t );
 800673e:	2754      	movs	r7, #84	; 0x54
 8006740:	9704      	str	r7, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006742:	9f04      	ldr	r7, [sp, #16]
 8006744:	2f54      	cmp	r7, #84	; 0x54
 8006746:	d011      	beq.n	800676c <xTaskCreateStatic+0x3c>
 8006748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	e7fe      	b.n	8006758 <xTaskCreateStatic+0x28>
 800675a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	e7fe      	b.n	800676a <xTaskCreateStatic+0x3a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800676c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800676e:	2702      	movs	r7, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006770:	ad05      	add	r5, sp, #20
 8006772:	9402      	str	r4, [sp, #8]
 8006774:	9600      	str	r6, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006776:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800677a:	9501      	str	r5, [sp, #4]
 800677c:	f7ff febe 	bl	80064fc <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006780:	4620      	mov	r0, r4
 8006782:	f7ff fe2d 	bl	80063e0 <prvAddNewTaskToReadyList>
	}
 8006786:	9805      	ldr	r0, [sp, #20]
 8006788:	b007      	add	sp, #28
 800678a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800678c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006790:	f383 8811 	msr	BASEPRI, r3
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	e7fe      	b.n	800679c <xTaskCreateStatic+0x6c>
 800679e:	bf00      	nop

080067a0 <xTaskCreate>:
	{
 80067a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067a4:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80067a8:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067aa:	4650      	mov	r0, sl
	{
 80067ac:	460d      	mov	r5, r1
 80067ae:	4699      	mov	r9, r3
 80067b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067b2:	f7ff fd4b 	bl	800624c <pvPortMalloc>
			if( pxStack != NULL )
 80067b6:	2800      	cmp	r0, #0
 80067b8:	f000 8089 	beq.w	80068ce <xTaskCreate+0x12e>
 80067bc:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80067be:	2054      	movs	r0, #84	; 0x54
 80067c0:	f7ff fd44 	bl	800624c <pvPortMalloc>
				if( pxNewTCB != NULL )
 80067c4:	4604      	mov	r4, r0
 80067c6:	2800      	cmp	r0, #0
 80067c8:	f000 8085 	beq.w	80068d6 <xTaskCreate+0x136>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80067cc:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 80067ce:	6306      	str	r6, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80067d0:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067d4:	782b      	ldrb	r3, [r5, #0]
 80067d6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80067da:	f1aa 0a04 	sub.w	sl, sl, #4
		if( pcName[ x ] == 0x00 )
 80067de:	782b      	ldrb	r3, [r5, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80067e0:	4456      	add	r6, sl
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80067e2:	f026 0607 	bic.w	r6, r6, #7
		if( pcName[ x ] == 0x00 )
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d047      	beq.n	800687a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067ea:	786b      	ldrb	r3, [r5, #1]
 80067ec:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
 80067f0:	786b      	ldrb	r3, [r5, #1]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d041      	beq.n	800687a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067f6:	78ab      	ldrb	r3, [r5, #2]
 80067f8:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
 80067fc:	78ab      	ldrb	r3, [r5, #2]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d03b      	beq.n	800687a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006802:	78eb      	ldrb	r3, [r5, #3]
 8006804:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
 8006808:	78eb      	ldrb	r3, [r5, #3]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d035      	beq.n	800687a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800680e:	792b      	ldrb	r3, [r5, #4]
 8006810:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
 8006814:	792b      	ldrb	r3, [r5, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d02f      	beq.n	800687a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800681a:	796b      	ldrb	r3, [r5, #5]
 800681c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
 8006820:	796b      	ldrb	r3, [r5, #5]
 8006822:	b353      	cbz	r3, 800687a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006824:	79ab      	ldrb	r3, [r5, #6]
 8006826:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
 800682a:	79ab      	ldrb	r3, [r5, #6]
 800682c:	b32b      	cbz	r3, 800687a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800682e:	79eb      	ldrb	r3, [r5, #7]
 8006830:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
 8006834:	79eb      	ldrb	r3, [r5, #7]
 8006836:	b303      	cbz	r3, 800687a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006838:	7a2b      	ldrb	r3, [r5, #8]
 800683a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
		if( pcName[ x ] == 0x00 )
 800683e:	7a2b      	ldrb	r3, [r5, #8]
 8006840:	b1db      	cbz	r3, 800687a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006842:	7a6b      	ldrb	r3, [r5, #9]
 8006844:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		if( pcName[ x ] == 0x00 )
 8006848:	7a6b      	ldrb	r3, [r5, #9]
 800684a:	b1b3      	cbz	r3, 800687a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800684c:	7aab      	ldrb	r3, [r5, #10]
 800684e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
		if( pcName[ x ] == 0x00 )
 8006852:	7aab      	ldrb	r3, [r5, #10]
 8006854:	b18b      	cbz	r3, 800687a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006856:	7aeb      	ldrb	r3, [r5, #11]
 8006858:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
		if( pcName[ x ] == 0x00 )
 800685c:	7aeb      	ldrb	r3, [r5, #11]
 800685e:	b163      	cbz	r3, 800687a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006860:	7b2b      	ldrb	r3, [r5, #12]
 8006862:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
		if( pcName[ x ] == 0x00 )
 8006866:	7b2b      	ldrb	r3, [r5, #12]
 8006868:	b13b      	cbz	r3, 800687a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800686a:	7b6b      	ldrb	r3, [r5, #13]
 800686c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
		if( pcName[ x ] == 0x00 )
 8006870:	7b6b      	ldrb	r3, [r5, #13]
 8006872:	b113      	cbz	r3, 800687a <xTaskCreate+0xda>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006874:	7bab      	ldrb	r3, [r5, #14]
 8006876:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 800687a:	9d08      	ldr	r5, [sp, #32]
 800687c:	2d06      	cmp	r5, #6
 800687e:	bf28      	it	cs
 8006880:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006882:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8006886:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006888:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800688a:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800688c:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8006890:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006894:	f7ff fae6 	bl	8005e64 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006898:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800689c:	f104 0018 	add.w	r0, r4, #24
 80068a0:	f7ff fae0 	bl	8005e64 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80068a4:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068a8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80068aa:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068ac:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80068b0:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068b2:	464a      	mov	r2, r9
 80068b4:	4641      	mov	r1, r8
 80068b6:	4630      	mov	r0, r6
 80068b8:	f7ff fb54 	bl	8005f64 <pxPortInitialiseStack>
 80068bc:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80068be:	b107      	cbz	r7, 80068c2 <xTaskCreate+0x122>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068c0:	603c      	str	r4, [r7, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 80068c2:	4620      	mov	r0, r4
 80068c4:	f7ff fd8c 	bl	80063e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80068c8:	2001      	movs	r0, #1
 80068ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80068ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 80068d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					vPortFree( pxStack );
 80068d6:	4630      	mov	r0, r6
 80068d8:	f7ff fd4a 	bl	8006370 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80068dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080068e4 <vTaskStartScheduler>:
{
 80068e4:	b530      	push	{r4, r5, lr}
 80068e6:	b08b      	sub	sp, #44	; 0x2c
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80068e8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80068ea:	aa07      	add	r2, sp, #28
 80068ec:	a906      	add	r1, sp, #24
 80068ee:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80068f0:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80068f2:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80068f4:	f000 f9f8 	bl	8006ce8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80068f8:	9b06      	ldr	r3, [sp, #24]
		configASSERT( puxStackBuffer != NULL );
 80068fa:	b18b      	cbz	r3, 8006920 <vTaskStartScheduler+0x3c>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80068fc:	9d05      	ldr	r5, [sp, #20]
		configASSERT( pxTaskBuffer != NULL );
 80068fe:	2d00      	cmp	r5, #0
 8006900:	d03e      	beq.n	8006980 <vTaskStartScheduler+0x9c>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006902:	2254      	movs	r2, #84	; 0x54
 8006904:	9208      	str	r2, [sp, #32]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006906:	9908      	ldr	r1, [sp, #32]
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006908:	9a07      	ldr	r2, [sp, #28]
			configASSERT( xSize == sizeof( TCB_t ) );
 800690a:	2954      	cmp	r1, #84	; 0x54
 800690c:	d011      	beq.n	8006932 <vTaskStartScheduler+0x4e>
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	e7fe      	b.n	800691e <vTaskStartScheduler+0x3a>
 8006920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	e7fe      	b.n	8006930 <vTaskStartScheduler+0x4c>
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006932:	2002      	movs	r0, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006934:	a909      	add	r1, sp, #36	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006936:	632b      	str	r3, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006938:	f885 0051 	strb.w	r0, [r5, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800693c:	4623      	mov	r3, r4
 800693e:	9101      	str	r1, [sp, #4]
 8006940:	4814      	ldr	r0, [pc, #80]	; (8006994 <vTaskStartScheduler+0xb0>)
 8006942:	4915      	ldr	r1, [pc, #84]	; (8006998 <vTaskStartScheduler+0xb4>)
 8006944:	9502      	str	r5, [sp, #8]
 8006946:	9400      	str	r4, [sp, #0]
 8006948:	f7ff fdd8 	bl	80064fc <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800694c:	4628      	mov	r0, r5
 800694e:	f7ff fd47 	bl	80063e0 <prvAddNewTaskToReadyList>
		return xReturn;
 8006952:	9b09      	ldr	r3, [sp, #36]	; 0x24
		if( xIdleTaskHandle != NULL )
 8006954:	b193      	cbz	r3, 800697c <vTaskStartScheduler+0x98>
 8006956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8006966:	480d      	ldr	r0, [pc, #52]	; (800699c <vTaskStartScheduler+0xb8>)
		xSchedulerRunning = pdTRUE;
 8006968:	4a0d      	ldr	r2, [pc, #52]	; (80069a0 <vTaskStartScheduler+0xbc>)
		xTickCount = ( TickType_t ) 0U;
 800696a:	4b0e      	ldr	r3, [pc, #56]	; (80069a4 <vTaskStartScheduler+0xc0>)
		xNextTaskUnblockTime = portMAX_DELAY;
 800696c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		xSchedulerRunning = pdTRUE;
 8006970:	2101      	movs	r1, #1
		xNextTaskUnblockTime = portMAX_DELAY;
 8006972:	6005      	str	r5, [r0, #0]
		xSchedulerRunning = pdTRUE;
 8006974:	6011      	str	r1, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 8006976:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8006978:	f7ff fbb8 	bl	80060ec <xPortStartScheduler>
}
 800697c:	b00b      	add	sp, #44	; 0x2c
 800697e:	bd30      	pop	{r4, r5, pc}
 8006980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	e7fe      	b.n	8006990 <vTaskStartScheduler+0xac>
 8006992:	bf00      	nop
 8006994:	08006691 	.word	0x08006691
 8006998:	0800a978 	.word	0x0800a978
 800699c:	200045e8 	.word	0x200045e8
 80069a0:	20004604 	.word	0x20004604
 80069a4:	20004630 	.word	0x20004630

080069a8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80069a8:	4a02      	ldr	r2, [pc, #8]	; (80069b4 <vTaskSuspendAll+0xc>)
 80069aa:	6813      	ldr	r3, [r2, #0]
 80069ac:	3301      	adds	r3, #1
 80069ae:	6013      	str	r3, [r2, #0]
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	200045b4 	.word	0x200045b4

080069b8 <xTaskIncrementTick>:
{
 80069b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069bc:	4b4a      	ldr	r3, [pc, #296]	; (8006ae8 <xTaskIncrementTick+0x130>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d153      	bne.n	8006a6c <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80069c4:	4b49      	ldr	r3, [pc, #292]	; (8006aec <xTaskIncrementTick+0x134>)
 80069c6:	681e      	ldr	r6, [r3, #0]
 80069c8:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 80069ca:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80069cc:	2e00      	cmp	r6, #0
 80069ce:	d05a      	beq.n	8006a86 <xTaskIncrementTick+0xce>
 80069d0:	f8df b138 	ldr.w	fp, [pc, #312]	; 8006b0c <xTaskIncrementTick+0x154>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069d4:	f8db 2000 	ldr.w	r2, [fp]
 80069d8:	4296      	cmp	r6, r2
 80069da:	d361      	bcc.n	8006aa0 <xTaskIncrementTick+0xe8>
 80069dc:	4d44      	ldr	r5, [pc, #272]	; (8006af0 <xTaskIncrementTick+0x138>)
 80069de:	4f45      	ldr	r7, [pc, #276]	; (8006af4 <xTaskIncrementTick+0x13c>)
 80069e0:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8006b10 <xTaskIncrementTick+0x158>
 80069e4:	2400      	movs	r4, #0
 80069e6:	e02e      	b.n	8006a46 <xTaskIncrementTick+0x8e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80069e8:	682a      	ldr	r2, [r5, #0]
 80069ea:	68d2      	ldr	r2, [r2, #12]
 80069ec:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069f4:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 80069f8:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069fa:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 80069fc:	d36a      	bcc.n	8006ad4 <xTaskIncrementTick+0x11c>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069fe:	f7ff fa5f 	bl	8005ec0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a02:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a06:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a0a:	b109      	cbz	r1, 8006a10 <xTaskIncrementTick+0x58>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a0c:	f7ff fa58 	bl	8005ec0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a10:	4b39      	ldr	r3, [pc, #228]	; (8006af8 <xTaskIncrementTick+0x140>)
 8006a12:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	fa02 fe00 	lsl.w	lr, r2, r0
 8006a1e:	ea4e 0e03 	orr.w	lr, lr, r3
 8006a22:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006a26:	4b34      	ldr	r3, [pc, #208]	; (8006af8 <xTaskIncrementTick+0x140>)
 8006a28:	4651      	mov	r1, sl
 8006a2a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8006a2e:	f8c3 e000 	str.w	lr, [r3]
 8006a32:	f7ff fa1b 	bl	8005e6c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a36:	f8d8 0000 	ldr.w	r0, [r8]
 8006a3a:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 8006a3e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8006a40:	4291      	cmp	r1, r2
 8006a42:	bf28      	it	cs
 8006a44:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a46:	682a      	ldr	r2, [r5, #0]
 8006a48:	6812      	ldr	r2, [r2, #0]
 8006a4a:	2a00      	cmp	r2, #0
 8006a4c:	d1cc      	bne.n	80069e8 <xTaskIncrementTick+0x30>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a52:	f8cb 2000 	str.w	r2, [fp]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a56:	f8d8 3000 	ldr.w	r3, [r8]
 8006a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	bf28      	it	cs
 8006a68:	2401      	movcs	r4, #1
 8006a6a:	e004      	b.n	8006a76 <xTaskIncrementTick+0xbe>
		++uxPendedTicks;
 8006a6c:	4a23      	ldr	r2, [pc, #140]	; (8006afc <xTaskIncrementTick+0x144>)
 8006a6e:	6813      	ldr	r3, [r2, #0]
 8006a70:	3301      	adds	r3, #1
 8006a72:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8006a74:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8006a76:	4b22      	ldr	r3, [pc, #136]	; (8006b00 <xTaskIncrementTick+0x148>)
 8006a78:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	bf18      	it	ne
 8006a7e:	2401      	movne	r4, #1
}
 8006a80:	4620      	mov	r0, r4
 8006a82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8006a86:	4d1a      	ldr	r5, [pc, #104]	; (8006af0 <xTaskIncrementTick+0x138>)
 8006a88:	682b      	ldr	r3, [r5, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	b16b      	cbz	r3, 8006aaa <xTaskIncrementTick+0xf2>
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	e7fe      	b.n	8006a9e <xTaskIncrementTick+0xe6>
 8006aa0:	4f14      	ldr	r7, [pc, #80]	; (8006af4 <xTaskIncrementTick+0x13c>)
 8006aa2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8006b10 <xTaskIncrementTick+0x158>
BaseType_t xSwitchRequired = pdFALSE;
 8006aa6:	2400      	movs	r4, #0
 8006aa8:	e7d5      	b.n	8006a56 <xTaskIncrementTick+0x9e>
			taskSWITCH_DELAYED_LISTS();
 8006aaa:	4b16      	ldr	r3, [pc, #88]	; (8006b04 <xTaskIncrementTick+0x14c>)
 8006aac:	6829      	ldr	r1, [r5, #0]
 8006aae:	4a16      	ldr	r2, [pc, #88]	; (8006b08 <xTaskIncrementTick+0x150>)
 8006ab0:	6818      	ldr	r0, [r3, #0]
 8006ab2:	6028      	str	r0, [r5, #0]
 8006ab4:	6019      	str	r1, [r3, #0]
 8006ab6:	6813      	ldr	r3, [r2, #0]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006abc:	682b      	ldr	r3, [r5, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	b15b      	cbz	r3, 8006ada <xTaskIncrementTick+0x122>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ac2:	682a      	ldr	r2, [r5, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ac4:	f8df b044 	ldr.w	fp, [pc, #68]	; 8006b0c <xTaskIncrementTick+0x154>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ac8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006aca:	68d2      	ldr	r2, [r2, #12]
 8006acc:	6852      	ldr	r2, [r2, #4]
 8006ace:	f8cb 2000 	str.w	r2, [fp]
 8006ad2:	e77f      	b.n	80069d4 <xTaskIncrementTick+0x1c>
						xNextTaskUnblockTime = xItemValue;
 8006ad4:	f8cb 1000 	str.w	r1, [fp]
						break;
 8006ad8:	e7bd      	b.n	8006a56 <xTaskIncrementTick+0x9e>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ada:	f8df b030 	ldr.w	fp, [pc, #48]	; 8006b0c <xTaskIncrementTick+0x154>
 8006ade:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ae2:	f8cb 2000 	str.w	r2, [fp]
 8006ae6:	e775      	b.n	80069d4 <xTaskIncrementTick+0x1c>
 8006ae8:	200045b4 	.word	0x200045b4
 8006aec:	20004630 	.word	0x20004630
 8006af0:	20004514 	.word	0x20004514
 8006af4:	2000451c 	.word	0x2000451c
 8006af8:	200045bc 	.word	0x200045bc
 8006afc:	200045b0 	.word	0x200045b0
 8006b00:	20004634 	.word	0x20004634
 8006b04:	20004518 	.word	0x20004518
 8006b08:	200045ec 	.word	0x200045ec
 8006b0c:	200045e8 	.word	0x200045e8
 8006b10:	20004510 	.word	0x20004510

08006b14 <xTaskResumeAll>:
{
 8006b14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 8006b18:	4c39      	ldr	r4, [pc, #228]	; (8006c00 <xTaskResumeAll+0xec>)
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	b943      	cbnz	r3, 8006b30 <xTaskResumeAll+0x1c>
 8006b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	e7fe      	b.n	8006b2e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8006b30:	f7ff fa40 	bl	8005fb4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006b34:	6823      	ldr	r3, [r4, #0]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b3a:	6824      	ldr	r4, [r4, #0]
 8006b3c:	2c00      	cmp	r4, #0
 8006b3e:	d151      	bne.n	8006be4 <xTaskResumeAll+0xd0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b40:	4b30      	ldr	r3, [pc, #192]	; (8006c04 <xTaskResumeAll+0xf0>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d04d      	beq.n	8006be4 <xTaskResumeAll+0xd0>
 8006b48:	4d2f      	ldr	r5, [pc, #188]	; (8006c08 <xTaskResumeAll+0xf4>)
 8006b4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006c20 <xTaskResumeAll+0x10c>
					prvAddTaskToReadyList( pxTCB );
 8006b4e:	4e2f      	ldr	r6, [pc, #188]	; (8006c0c <xTaskResumeAll+0xf8>)
 8006b50:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8006c24 <xTaskResumeAll+0x110>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b54:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8006c28 <xTaskResumeAll+0x114>
 8006b58:	e01f      	b.n	8006b9a <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006b5a:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006b5e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b60:	f104 0804 	add.w	r8, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b64:	f104 0018 	add.w	r0, r4, #24
 8006b68:	f7ff f9aa 	bl	8005ec0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b6c:	4640      	mov	r0, r8
 8006b6e:	f7ff f9a7 	bl	8005ec0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b72:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006b74:	6832      	ldr	r2, [r6, #0]
 8006b76:	fa07 f300 	lsl.w	r3, r7, r0
 8006b7a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	4641      	mov	r1, r8
 8006b82:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8006b86:	6033      	str	r3, [r6, #0]
 8006b88:	f7ff f970 	bl	8005e6c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b8c:	f8db 3000 	ldr.w	r3, [fp]
 8006b90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b94:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8006b96:	bf28      	it	cs
 8006b98:	602f      	strcs	r7, [r5, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b9a:	f8da 3000 	ldr.w	r3, [sl]
					prvAddTaskToReadyList( pxTCB );
 8006b9e:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1da      	bne.n	8006b5a <xTaskResumeAll+0x46>
				if( pxTCB != NULL )
 8006ba4:	b13c      	cbz	r4, 8006bb6 <xTaskResumeAll+0xa2>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ba6:	4b1a      	ldr	r3, [pc, #104]	; (8006c10 <xTaskResumeAll+0xfc>)
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	6812      	ldr	r2, [r2, #0]
 8006bac:	bb02      	cbnz	r2, 8006bf0 <xTaskResumeAll+0xdc>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bae:	4b19      	ldr	r3, [pc, #100]	; (8006c14 <xTaskResumeAll+0x100>)
 8006bb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bb4:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006bb6:	4e18      	ldr	r6, [pc, #96]	; (8006c18 <xTaskResumeAll+0x104>)
 8006bb8:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006bba:	b13c      	cbz	r4, 8006bcc <xTaskResumeAll+0xb8>
								xYieldPending = pdTRUE;
 8006bbc:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8006bbe:	f7ff fefb 	bl	80069b8 <xTaskIncrementTick>
 8006bc2:	b100      	cbz	r0, 8006bc6 <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 8006bc4:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006bc6:	3c01      	subs	r4, #1
 8006bc8:	d1f9      	bne.n	8006bbe <xTaskResumeAll+0xaa>
						uxPendedTicks = 0;
 8006bca:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8006bcc:	682b      	ldr	r3, [r5, #0]
 8006bce:	b14b      	cbz	r3, 8006be4 <xTaskResumeAll+0xd0>
					taskYIELD_IF_USING_PREEMPTION();
 8006bd0:	4b12      	ldr	r3, [pc, #72]	; (8006c1c <xTaskResumeAll+0x108>)
 8006bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bd6:	601a      	str	r2, [r3, #0]
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006be0:	2401      	movs	r4, #1
 8006be2:	e000      	b.n	8006be6 <xTaskResumeAll+0xd2>
BaseType_t xAlreadyYielded = pdFALSE;
 8006be4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006be6:	f7ff fa07 	bl	8005ff8 <vPortExitCritical>
}
 8006bea:	4620      	mov	r0, r4
 8006bec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006bf0:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006bf2:	4b08      	ldr	r3, [pc, #32]	; (8006c14 <xTaskResumeAll+0x100>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006bf4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006bf6:	68d2      	ldr	r2, [r2, #12]
 8006bf8:	6852      	ldr	r2, [r2, #4]
 8006bfa:	601a      	str	r2, [r3, #0]
 8006bfc:	e7db      	b.n	8006bb6 <xTaskResumeAll+0xa2>
 8006bfe:	bf00      	nop
 8006c00:	200045b4 	.word	0x200045b4
 8006c04:	200045a8 	.word	0x200045a8
 8006c08:	20004634 	.word	0x20004634
 8006c0c:	200045bc 	.word	0x200045bc
 8006c10:	20004514 	.word	0x20004514
 8006c14:	200045e8 	.word	0x200045e8
 8006c18:	200045b0 	.word	0x200045b0
 8006c1c:	e000ed04 	.word	0xe000ed04
 8006c20:	200045f0 	.word	0x200045f0
 8006c24:	2000451c 	.word	0x2000451c
 8006c28:	20004510 	.word	0x20004510

08006c2c <vTaskDelay>:
	{
 8006c2c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c2e:	b158      	cbz	r0, 8006c48 <vTaskDelay+0x1c>
			configASSERT( uxSchedulerSuspended == 0 );
 8006c30:	4b0f      	ldr	r3, [pc, #60]	; (8006c70 <vTaskDelay+0x44>)
 8006c32:	6819      	ldr	r1, [r3, #0]
 8006c34:	b189      	cbz	r1, 8006c5a <vTaskDelay+0x2e>
 8006c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3a:	f383 8811 	msr	BASEPRI, r3
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	e7fe      	b.n	8006c46 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8006c48:	4b0a      	ldr	r3, [pc, #40]	; (8006c74 <vTaskDelay+0x48>)
 8006c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c4e:	601a      	str	r2, [r3, #0]
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	bd08      	pop	{r3, pc}
	++uxSchedulerSuspended;
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	3201      	adds	r2, #1
 8006c5e:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c60:	f7ff fcd0 	bl	8006604 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006c64:	f7ff ff56 	bl	8006b14 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	d0ed      	beq.n	8006c48 <vTaskDelay+0x1c>
 8006c6c:	bd08      	pop	{r3, pc}
 8006c6e:	bf00      	nop
 8006c70:	200045b4 	.word	0x200045b4
 8006c74:	e000ed04 	.word	0xe000ed04

08006c78 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c78:	4b16      	ldr	r3, [pc, #88]	; (8006cd4 <vTaskSwitchContext+0x5c>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	bb33      	cbnz	r3, 8006ccc <vTaskSwitchContext+0x54>
		xYieldPending = pdFALSE;
 8006c7e:	4916      	ldr	r1, [pc, #88]	; (8006cd8 <vTaskSwitchContext+0x60>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006c80:	4a16      	ldr	r2, [pc, #88]	; (8006cdc <vTaskSwitchContext+0x64>)
		xYieldPending = pdFALSE;
 8006c82:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006c84:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006c86:	fab3 f383 	clz	r3, r3
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	f1c3 031f 	rsb	r3, r3, #31
 8006c90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4912      	ldr	r1, [pc, #72]	; (8006ce0 <vTaskSwitchContext+0x68>)
 8006c98:	58ca      	ldr	r2, [r1, r3]
 8006c9a:	18c8      	adds	r0, r1, r3
 8006c9c:	b942      	cbnz	r2, 8006cb0 <vTaskSwitchContext+0x38>
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	e7fe      	b.n	8006cae <vTaskSwitchContext+0x36>
 8006cb0:	6842      	ldr	r2, [r0, #4]
 8006cb2:	3308      	adds	r3, #8
 8006cb4:	6852      	ldr	r2, [r2, #4]
 8006cb6:	6042      	str	r2, [r0, #4]
 8006cb8:	440b      	add	r3, r1
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	bf08      	it	eq
 8006cbe:	6852      	ldreq	r2, [r2, #4]
 8006cc0:	4b08      	ldr	r3, [pc, #32]	; (8006ce4 <vTaskSwitchContext+0x6c>)
 8006cc2:	bf08      	it	eq
 8006cc4:	6042      	streq	r2, [r0, #4]
 8006cc6:	68d2      	ldr	r2, [r2, #12]
 8006cc8:	601a      	str	r2, [r3, #0]
 8006cca:	4770      	bx	lr
		xYieldPending = pdTRUE;
 8006ccc:	4b02      	ldr	r3, [pc, #8]	; (8006cd8 <vTaskSwitchContext+0x60>)
 8006cce:	2201      	movs	r2, #1
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	4770      	bx	lr
 8006cd4:	200045b4 	.word	0x200045b4
 8006cd8:	20004634 	.word	0x20004634
 8006cdc:	200045bc 	.word	0x200045bc
 8006ce0:	2000451c 	.word	0x2000451c
 8006ce4:	20004510 	.word	0x20004510

08006ce8 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8006ce8:	4b04      	ldr	r3, [pc, #16]	; (8006cfc <vApplicationGetIdleTaskMemory+0x14>)
 8006cea:	6003      	str	r3, [r0, #0]
{
 8006cec:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8006cee:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8006cf0:	4c03      	ldr	r4, [pc, #12]	; (8006d00 <vApplicationGetIdleTaskMemory+0x18>)
 8006cf2:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8006cf4:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 8006cf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	20004838 	.word	0x20004838
 8006d00:	20004638 	.word	0x20004638

08006d04 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8006d04:	b508      	push	{r3, lr}
    
    
                 
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8006d06:	f000 fd75 	bl	80077f4 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  gyro_handler();
 8006d0a:	f001 ffa5 	bl	8008c58 <gyro_handler>
	  osDelay(5);
 8006d0e:	2005      	movs	r0, #5
 8006d10:	f7ff f894 	bl	8005e3c <osDelay>
	  accel_handler();
 8006d14:	f002 f88a 	bl	8008e2c <accel_handler>
	  osDelay(5);
 8006d18:	2005      	movs	r0, #5
 8006d1a:	f7ff f88f 	bl	8005e3c <osDelay>
 8006d1e:	e7f4      	b.n	8006d0a <StartDefaultTask+0x6>

08006d20 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8006d20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	MPU6050_getAllData(allData);
 8006d22:	4c04      	ldr	r4, [pc, #16]	; (8006d34 <StartTask02+0x14>)
 8006d24:	4620      	mov	r0, r4
 8006d26:	f000 fb19 	bl	800735c <MPU6050_getAllData>
    osDelay(20);
 8006d2a:	2014      	movs	r0, #20
 8006d2c:	f7ff f886 	bl	8005e3c <osDelay>
 8006d30:	e7f8      	b.n	8006d24 <StartTask02+0x4>
 8006d32:	bf00      	nop
 8006d34:	20004ba0 	.word	0x20004ba0

08006d38 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8006d38:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 8006d3c:	f8df a088 	ldr.w	sl, [pc, #136]	; 8006dc8 <StartTask03+0x90>
 8006d40:	4f1b      	ldr	r7, [pc, #108]	; (8006db0 <StartTask03+0x78>)
 8006d42:	f8df b088 	ldr.w	fp, [pc, #136]	; 8006dcc <StartTask03+0x94>
 8006d46:	4e1b      	ldr	r6, [pc, #108]	; (8006db4 <StartTask03+0x7c>)
 8006d48:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8006dd0 <StartTask03+0x98>
 8006d4c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8006dd4 <StartTask03+0x9c>
	r_wheel_data[0] = sideDataRight;
	r_wheel_data[1] = speedDataRight;
	l_wheel_data[0] = sideDataLeft;
	l_wheel_data[1] = speedDataLeft;

	HAL_CAN_AddTxMessage(&hcan1, &l_wheelHeader, &l_wheel_data, &TxMailbox);
 8006d50:	4d19      	ldr	r5, [pc, #100]	; (8006db8 <StartTask03+0x80>)
 8006d52:	4c1a      	ldr	r4, [pc, #104]	; (8006dbc <StartTask03+0x84>)
	r_wheel_data[0] = sideDataRight;
 8006d54:	f89b 3000 	ldrb.w	r3, [fp]
	r_wheel_data[1] = speedDataRight;
 8006d58:	f89a 0000 	ldrb.w	r0, [sl]
	l_wheel_data[0] = sideDataLeft;
 8006d5c:	f899 c000 	ldrb.w	ip, [r9]
	l_wheel_data[1] = speedDataLeft;
 8006d60:	f898 e000 	ldrb.w	lr, [r8]
	HAL_CAN_AddTxMessage(&hcan1, &l_wheelHeader, &l_wheel_data, &TxMailbox);
 8006d64:	4a13      	ldr	r2, [pc, #76]	; (8006db4 <StartTask03+0x7c>)
 8006d66:	4916      	ldr	r1, [pc, #88]	; (8006dc0 <StartTask03+0x88>)
	r_wheel_data[0] = sideDataRight;
 8006d68:	703b      	strb	r3, [r7, #0]
	r_wheel_data[1] = speedDataRight;
 8006d6a:	7078      	strb	r0, [r7, #1]
	HAL_CAN_AddTxMessage(&hcan1, &l_wheelHeader, &l_wheel_data, &TxMailbox);
 8006d6c:	462b      	mov	r3, r5
 8006d6e:	4620      	mov	r0, r4
	l_wheel_data[0] = sideDataLeft;
 8006d70:	f886 c000 	strb.w	ip, [r6]
	l_wheel_data[1] = speedDataLeft;
 8006d74:	f886 e001 	strb.w	lr, [r6, #1]
	HAL_CAN_AddTxMessage(&hcan1, &l_wheelHeader, &l_wheel_data, &TxMailbox);
 8006d78:	f7fa fcb4 	bl	80016e4 <HAL_CAN_AddTxMessage>
	osDelay(5);
 8006d7c:	2005      	movs	r0, #5
 8006d7e:	f7ff f85d 	bl	8005e3c <osDelay>
	HAL_CAN_AddTxMessage(&hcan1, &r_wheelHeader, &r_wheel_data, &TxMailbox);
 8006d82:	462b      	mov	r3, r5
 8006d84:	4a0a      	ldr	r2, [pc, #40]	; (8006db0 <StartTask03+0x78>)
 8006d86:	490f      	ldr	r1, [pc, #60]	; (8006dc4 <StartTask03+0x8c>)
 8006d88:	4620      	mov	r0, r4
 8006d8a:	f7fa fcab 	bl	80016e4 <HAL_CAN_AddTxMessage>
	osDelay(5);
 8006d8e:	2005      	movs	r0, #5
 8006d90:	f7ff f854 	bl	8005e3c <osDelay>
	rpm_right_handler();
 8006d94:	f001 fe98 	bl	8008ac8 <rpm_right_handler>
	osDelay(5);
 8006d98:	2005      	movs	r0, #5
 8006d9a:	f7ff f84f 	bl	8005e3c <osDelay>
	rpm_left_handler();
 8006d9e:	f001 fef7 	bl	8008b90 <rpm_left_handler>
	osDelay(5);
 8006da2:	2005      	movs	r0, #5
 8006da4:	f7ff f84a 	bl	8005e3c <osDelay>
	spinOnce();
 8006da8:	f002 fe8c 	bl	8009ac4 <spinOnce>
 8006dac:	e7d2      	b.n	8006d54 <StartTask03+0x1c>
 8006dae:	bf00      	nop
 8006db0:	20004be4 	.word	0x20004be4
 8006db4:	20004970 	.word	0x20004970
 8006db8:	20004b98 	.word	0x20004b98
 8006dbc:	20004bb0 	.word	0x20004bb0
 8006dc0:	20004be8 	.word	0x20004be8
 8006dc4:	20004978 	.word	0x20004978
 8006dc8:	20004bac 	.word	0x20004bac
 8006dcc:	20004934 	.word	0x20004934
 8006dd0:	20004be2 	.word	0x20004be2
 8006dd4:	20004990 	.word	0x20004990

08006dd8 <SystemClock_Config>:
{
 8006dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dda:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006ddc:	a808      	add	r0, sp, #32
 8006dde:	2230      	movs	r2, #48	; 0x30
 8006de0:	2100      	movs	r1, #0
 8006de2:	f003 fc3c 	bl	800a65e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006de6:	2400      	movs	r4, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8006de8:	4a1f      	ldr	r2, [pc, #124]	; (8006e68 <SystemClock_Config+0x90>)
 8006dea:	9401      	str	r4, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006dec:	9404      	str	r4, [sp, #16]
 8006dee:	9403      	str	r4, [sp, #12]
 8006df0:	9405      	str	r4, [sp, #20]
 8006df2:	9406      	str	r4, [sp, #24]
 8006df4:	9407      	str	r4, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006df6:	6c11      	ldr	r1, [r2, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006df8:	4b1c      	ldr	r3, [pc, #112]	; (8006e6c <SystemClock_Config+0x94>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8006dfa:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8006dfe:	6411      	str	r1, [r2, #64]	; 0x40
 8006e00:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006e02:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8006e06:	9201      	str	r2, [sp, #4]
 8006e08:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e0a:	9402      	str	r4, [sp, #8]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e1a:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006e1c:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006e1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006e22:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006e24:	2108      	movs	r1, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006e26:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006e28:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 168;
 8006e2a:	22a8      	movs	r2, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006e2c:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006e2e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006e30:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 8006e34:	960f      	str	r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006e36:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8006e38:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006e3a:	9313      	str	r3, [sp, #76]	; 0x4c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e3c:	9f02      	ldr	r7, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006e3e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006e40:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006e42:	260f      	movs	r6, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006e44:	f7fd f830 	bl	8003ea8 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006e48:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006e50:	a803      	add	r0, sp, #12
 8006e52:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006e54:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006e56:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006e58:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006e5a:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006e5c:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006e5e:	f7fd fa33 	bl	80042c8 <HAL_RCC_ClockConfig>
}
 8006e62:	b015      	add	sp, #84	; 0x54
 8006e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e66:	bf00      	nop
 8006e68:	40023800 	.word	0x40023800
 8006e6c:	40007000 	.word	0x40007000

08006e70 <main>:
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b09a      	sub	sp, #104	; 0x68
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e74:	2400      	movs	r4, #0
  HAL_Init();
 8006e76:	f7fa fac1 	bl	80013fc <HAL_Init>
  SystemClock_Config();
 8006e7a:	f7ff ffad 	bl	8006dd8 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006e7e:	4b66      	ldr	r3, [pc, #408]	; (8007018 <main+0x1a8>)
 8006e80:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e82:	9414      	str	r4, [sp, #80]	; 0x50
 8006e84:	9413      	str	r4, [sp, #76]	; 0x4c
 8006e86:	9415      	str	r4, [sp, #84]	; 0x54
 8006e88:	9416      	str	r4, [sp, #88]	; 0x58
 8006e8a:	9417      	str	r4, [sp, #92]	; 0x5c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hcan1.Instance = CAN1;
 8006e8e:	4e63      	ldr	r6, [pc, #396]	; (800701c <main+0x1ac>)
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8006e90:	4863      	ldr	r0, [pc, #396]	; (8007020 <main+0x1b0>)
  hcan1.Instance = CAN1;
 8006e92:	4f64      	ldr	r7, [pc, #400]	; (8007024 <main+0x1b4>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8006e94:	4d64      	ldr	r5, [pc, #400]	; (8007028 <main+0x1b8>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006e96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e9a:	631a      	str	r2, [r3, #48]	; 0x30
 8006e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e9e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8006ea2:	9200      	str	r2, [sp, #0]
 8006ea4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006ea6:	9401      	str	r4, [sp, #4]
 8006ea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eaa:	f042 0210 	orr.w	r2, r2, #16
 8006eae:	631a      	str	r2, [r3, #48]	; 0x30
 8006eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eb2:	f002 0210 	and.w	r2, r2, #16
 8006eb6:	9201      	str	r2, [sp, #4]
 8006eb8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006eba:	9402      	str	r4, [sp, #8]
 8006ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ebe:	f042 0201 	orr.w	r2, r2, #1
 8006ec2:	631a      	str	r2, [r3, #48]	; 0x30
 8006ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ec6:	f002 0201 	and.w	r2, r2, #1
 8006eca:	9202      	str	r2, [sp, #8]
 8006ecc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ece:	9403      	str	r4, [sp, #12]
 8006ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ed2:	f042 0208 	orr.w	r2, r2, #8
 8006ed6:	631a      	str	r2, [r3, #48]	; 0x30
 8006ed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eda:	f002 0208 	and.w	r2, r2, #8
 8006ede:	9203      	str	r2, [sp, #12]
 8006ee0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ee2:	9404      	str	r4, [sp, #16]
 8006ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ee6:	f042 0202 	orr.w	r2, r2, #2
 8006eea:	631a      	str	r2, [r3, #48]	; 0x30
 8006eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eee:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8006ef2:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ef4:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8006ef6:	f44f 7180 	mov.w	r1, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006efa:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006efe:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8006f00:	f7fa ff98 	bl	8001e34 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006f04:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006f08:	a913      	add	r1, sp, #76	; 0x4c
 8006f0a:	4845      	ldr	r0, [pc, #276]	; (8007020 <main+0x1b0>)
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006f0c:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f0e:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f10:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f12:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006f16:	f7fa fe7f 	bl	8001c18 <HAL_GPIO_Init>
  hcan1.Init.Prescaler = 3;
 8006f1a:	2103      	movs	r1, #3
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8006f1c:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8006f20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8006f24:	4630      	mov	r0, r6
  hcan1.Instance = CAN1;
 8006f26:	6037      	str	r7, [r6, #0]
  hcan1.Init.Prescaler = 3;
 8006f28:	6071      	str	r1, [r6, #4]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8006f2a:	6132      	str	r2, [r6, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8006f2c:	6173      	str	r3, [r6, #20]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8006f2e:	60b4      	str	r4, [r6, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006f30:	60f4      	str	r4, [r6, #12]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8006f32:	7634      	strb	r4, [r6, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8006f34:	7674      	strb	r4, [r6, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8006f36:	76b4      	strb	r4, [r6, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8006f38:	76f4      	strb	r4, [r6, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8006f3a:	7734      	strb	r4, [r6, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8006f3c:	7774      	strb	r4, [r6, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8006f3e:	f7fa fa9b 	bl	8001478 <HAL_CAN_Init>
  hi2c1.Instance = I2C1;
 8006f42:	4b3a      	ldr	r3, [pc, #232]	; (800702c <main+0x1bc>)
  hi2c1.Init.ClockSpeed = 100000;
 8006f44:	493a      	ldr	r1, [pc, #232]	; (8007030 <main+0x1c0>)
 8006f46:	6059      	str	r1, [r3, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006f48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006f4c:	4618      	mov	r0, r3
  hi2c1.Instance = I2C1;
 8006f4e:	f5a7 5780 	sub.w	r7, r7, #4096	; 0x1000
 8006f52:	601f      	str	r7, [r3, #0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006f54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006f56:	609c      	str	r4, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006f58:	60dc      	str	r4, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006f5a:	615c      	str	r4, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006f5c:	619c      	str	r4, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006f5e:	61dc      	str	r4, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006f60:	621c      	str	r4, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006f62:	f7fb f8ed 	bl	8002140 <HAL_I2C_Init>
  sensor_ini();
 8006f66:	f000 f8b3 	bl	80070d0 <sensor_ini>
  MPU6050_init();
 8006f6a:	f000 f9c7 	bl	80072fc <MPU6050_init>
  HAL_Delay(1000);
 8006f6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006f72:	f7fa fa6f 	bl	8001454 <HAL_Delay>
  init_ROS();
 8006f76:	f001 fc6f 	bl	8008858 <init_ROS>
  r_wheelHeader.DLC = 2;
 8006f7a:	492e      	ldr	r1, [pc, #184]	; (8007034 <main+0x1c4>)
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8006f7c:	4b2e      	ldr	r3, [pc, #184]	; (8007038 <main+0x1c8>)
  l_wheelHeader.DLC = 2;
 8006f7e:	4a2f      	ldr	r2, [pc, #188]	; (800703c <main+0x1cc>)
  r_wheelHeader.IDE = CAN_ID_STD;
 8006f80:	608c      	str	r4, [r1, #8]
  r_wheelHeader.StdId = 0xF;
 8006f82:	270f      	movs	r7, #15
 8006f84:	600f      	str	r7, [r1, #0]
  r_wheelHeader.DLC = 2;
 8006f86:	2702      	movs	r7, #2
 8006f88:	610f      	str	r7, [r1, #16]
  r_wheelHeader.RTR = CAN_RTR_DATA;
 8006f8a:	60cc      	str	r4, [r1, #12]
  l_wheelHeader.StdId = 0x1F;
 8006f8c:	211f      	movs	r1, #31
 8006f8e:	6011      	str	r1, [r2, #0]
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8006f90:	4630      	mov	r0, r6
 8006f92:	4619      	mov	r1, r3
  l_wheelHeader.DLC = 2;
 8006f94:	6117      	str	r7, [r2, #16]
  l_wheelHeader.IDE = CAN_ID_STD;
 8006f96:	6094      	str	r4, [r2, #8]
  l_wheelHeader.RTR = CAN_RTR_DATA;
 8006f98:	60d4      	str	r4, [r2, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8006f9a:	611c      	str	r4, [r3, #16]
  sFilterConfig.FilterIdHigh = 0;
 8006f9c:	601c      	str	r4, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 8006f9e:	605c      	str	r4, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 8006fa0:	609c      	str	r4, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 8006fa2:	60dc      	str	r4, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8006fa4:	f8c3 801c 	str.w	r8, [r3, #28]
  sFilterConfig.FilterActivation = ENABLE;
 8006fa8:	f8c3 8020 	str.w	r8, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8006fac:	f7fa fae6 	bl	800157c <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	f7fa fb69 	bl	8001688 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8006fb6:	4639      	mov	r1, r7
 8006fb8:	4630      	mov	r0, r6
 8006fba:	f7fa fc6d 	bl	8001898 <HAL_CAN_ActivateNotification>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8006fbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fc0:	ae05      	add	r6, sp, #20
 8006fc2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006fc4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006fc8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8006fcc:	4621      	mov	r1, r4
 8006fce:	a805      	add	r0, sp, #20
 8006fd0:	f7fe ff08 	bl	8005de4 <osThreadCreate>
 8006fd4:	4b1a      	ldr	r3, [pc, #104]	; (8007040 <main+0x1d0>)
  osThreadDef(IMUtask, StartTask02, osPriorityNormal, 0, 128);
 8006fd6:	f105 070c 	add.w	r7, r5, #12
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8006fda:	6018      	str	r0, [r3, #0]
  osThreadDef(IMUtask, StartTask02, osPriorityNormal, 0, 128);
 8006fdc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006fde:	ae0c      	add	r6, sp, #48	; 0x30
 8006fe0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006fe2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8006fe6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  IMUtaskHandle = osThreadCreate(osThread(IMUtask), NULL);
 8006fea:	4621      	mov	r1, r4
 8006fec:	a80c      	add	r0, sp, #48	; 0x30
 8006fee:	f7fe fef9 	bl	8005de4 <osThreadCreate>
 8006ff2:	4b14      	ldr	r3, [pc, #80]	; (8007044 <main+0x1d4>)
  osThreadDef(wheelControltas, StartTask03, osPriorityHigh, 0, 128);
 8006ff4:	3528      	adds	r5, #40	; 0x28
  IMUtaskHandle = osThreadCreate(osThread(IMUtask), NULL);
 8006ff6:	6018      	str	r0, [r3, #0]
  osThreadDef(wheelControltas, StartTask03, osPriorityHigh, 0, 128);
 8006ff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ffa:	ae13      	add	r6, sp, #76	; 0x4c
 8006ffc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006ffe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007002:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  wheelControltasHandle = osThreadCreate(osThread(wheelControltas), NULL);
 8007006:	4621      	mov	r1, r4
 8007008:	a813      	add	r0, sp, #76	; 0x4c
 800700a:	f7fe feeb 	bl	8005de4 <osThreadCreate>
 800700e:	4b0e      	ldr	r3, [pc, #56]	; (8007048 <main+0x1d8>)
 8007010:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8007012:	f7fe fee1 	bl	8005dd8 <osKernelStart>
 8007016:	e7fe      	b.n	8007016 <main+0x1a6>
 8007018:	40023800 	.word	0x40023800
 800701c:	20004bb0 	.word	0x20004bb0
 8007020:	40021000 	.word	0x40021000
 8007024:	40006400 	.word	0x40006400
 8007028:	0800a908 	.word	0x0800a908
 800702c:	200048dc 	.word	0x200048dc
 8007030:	000186a0 	.word	0x000186a0
 8007034:	20004978 	.word	0x20004978
 8007038:	200048a4 	.word	0x200048a4
 800703c:	20004be8 	.word	0x20004be8
 8007040:	200048d0 	.word	0x200048d0
 8007044:	200048d4 	.word	0x200048d4
 8007048:	20004940 	.word	0x20004940

0800704c <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800704c:	b538      	push	{r3, r4, r5, lr}
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &wheel_RxHeader, &speedRXData);
 800704e:	4c13      	ldr	r4, [pc, #76]	; (800709c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8007050:	4d13      	ldr	r5, [pc, #76]	; (80070a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8007052:	4814      	ldr	r0, [pc, #80]	; (80070a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8007054:	462b      	mov	r3, r5
 8007056:	4622      	mov	r2, r4
 8007058:	2100      	movs	r1, #0
 800705a:	f7fa fb9b 	bl	8001794 <HAL_CAN_GetRxMessage>
	if (wheel_RxHeader.StdId == 0xFFF) {
 800705e:	6823      	ldr	r3, [r4, #0]
 8007060:	f640 72ff 	movw	r2, #4095	; 0xfff
 8007064:	4293      	cmp	r3, r2
 8007066:	d003      	beq.n	8007070 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
	else if (wheel_RxHeader.StdId == 0x7F) {
 8007068:	2b7f      	cmp	r3, #127	; 0x7f
 800706a:	d00d      	beq.n	8007088 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
	else if (wheel_RxHeader.StdId == 0x3F) {
 800706c:	2b3f      	cmp	r3, #63	; 0x3f
 800706e:	d002      	beq.n	8007076 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
	wheel_RxHeader.StdId = 0x0000;
 8007070:	2300      	movs	r3, #0
 8007072:	6023      	str	r3, [r4, #0]
 8007074:	bd38      	pop	{r3, r4, r5, pc}
		sideRXDataRight = speedRXData[1];
 8007076:	4b0c      	ldr	r3, [pc, #48]	; (80070a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
		speedRXDataRight = speedRXData[0];
 8007078:	490c      	ldr	r1, [pc, #48]	; (80070ac <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800707a:	7828      	ldrb	r0, [r5, #0]
		sideRXDataRight = speedRXData[1];
 800707c:	786a      	ldrb	r2, [r5, #1]
		speedRXDataRight = speedRXData[0];
 800707e:	7008      	strb	r0, [r1, #0]
		sideRXDataRight = speedRXData[1];
 8007080:	701a      	strb	r2, [r3, #0]
	wheel_RxHeader.StdId = 0x0000;
 8007082:	2300      	movs	r3, #0
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	bd38      	pop	{r3, r4, r5, pc}
		sideRXDataLeft = speedRXData[1];
 8007088:	4b09      	ldr	r3, [pc, #36]	; (80070b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
		speedRXDataLeft = speedRXData[0];
 800708a:	490a      	ldr	r1, [pc, #40]	; (80070b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800708c:	7828      	ldrb	r0, [r5, #0]
		sideRXDataLeft = speedRXData[1];
 800708e:	786a      	ldrb	r2, [r5, #1]
		speedRXDataLeft = speedRXData[0];
 8007090:	7008      	strb	r0, [r1, #0]
		sideRXDataLeft = speedRXData[1];
 8007092:	701a      	strb	r2, [r3, #0]
	wheel_RxHeader.StdId = 0x0000;
 8007094:	2300      	movs	r3, #0
 8007096:	6023      	str	r3, [r4, #0]
 8007098:	bd38      	pop	{r3, r4, r5, pc}
 800709a:	bf00      	nop
 800709c:	20004948 	.word	0x20004948
 80070a0:	20004938 	.word	0x20004938
 80070a4:	20004bb0 	.word	0x20004bb0
 80070a8:	20004b95 	.word	0x20004b95
 80070ac:	20004b94 	.word	0x20004b94
 80070b0:	20004bdc 	.word	0x20004bdc
 80070b4:	20004944 	.word	0x20004944

080070b8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80070b8:	6802      	ldr	r2, [r0, #0]
 80070ba:	4b03      	ldr	r3, [pc, #12]	; (80070c8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80070bc:	429a      	cmp	r2, r3
 80070be:	d000      	beq.n	80070c2 <HAL_TIM_PeriodElapsedCallback+0xa>
 80070c0:	4770      	bx	lr
    HAL_IncTick();
 80070c2:	f7fa b9b5 	b.w	8001430 <HAL_IncTick>
 80070c6:	bf00      	nop
 80070c8:	40000400 	.word	0x40000400

080070cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop

080070d0 <sensor_ini>:

void ledOff(void) {
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_12,GPIO_PIN_RESET);
}

void sensor_ini(void) {
 80070d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_Delay(100);
 80070d2:	2064      	movs	r0, #100	; 0x64
void sensor_ini(void) {
 80070d4:	b085      	sub	sp, #20
	HAL_Delay(100);
 80070d6:	f7fa f9bd 	bl	8001454 <HAL_Delay>
	value = 0;
 80070da:	4c83      	ldr	r4, [pc, #524]	; (80072e8 <sensor_ini+0x218>)
		a = 2;
	}
}

uint8_t read_id(void) {
	ctrl = 0x00;
 80070dc:	4d83      	ldr	r5, [pc, #524]	; (80072ec <sensor_ini+0x21c>)
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 80070de:	9400      	str	r4, [sp, #0]
 80070e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80070e4:	2601      	movs	r6, #1
	ctrl = 0x00;
 80070e6:	2700      	movs	r7, #0
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 80070e8:	9302      	str	r3, [sp, #8]
 80070ea:	9601      	str	r6, [sp, #4]
 80070ec:	4633      	mov	r3, r6
 80070ee:	2275      	movs	r2, #117	; 0x75
 80070f0:	21d0      	movs	r1, #208	; 0xd0
 80070f2:	487f      	ldr	r0, [pc, #508]	; (80072f0 <sensor_ini+0x220>)
	ctrl = 0x00;
 80070f4:	702f      	strb	r7, [r5, #0]
	value = 0;
 80070f6:	7027      	strb	r7, [r4, #0]
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 80070f8:	f7fb fa6c 	bl	80025d4 <HAL_I2C_Mem_Read>
	if(status != HAL_OK)
 80070fc:	2800      	cmp	r0, #0
 80070fe:	d03c      	beq.n	800717a <sensor_ini+0xaa>
		a = 1;
 8007100:	4b7c      	ldr	r3, [pc, #496]	; (80072f4 <sensor_ini+0x224>)
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8007102:	487d      	ldr	r0, [pc, #500]	; (80072f8 <sensor_ini+0x228>)
		a = 1;
 8007104:	701e      	strb	r6, [r3, #0]
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8007106:	f44f 7180 	mov.w	r1, #256	; 0x100
 800710a:	f7fa fe97 	bl	8001e3c <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 800710e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007112:	f7fa f99f 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8007116:	f44f 7180 	mov.w	r1, #256	; 0x100
 800711a:	4877      	ldr	r0, [pc, #476]	; (80072f8 <sensor_ini+0x228>)
 800711c:	f7fa fe8e 	bl	8001e3c <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8007120:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007124:	f7fa f996 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8007128:	f44f 7180 	mov.w	r1, #256	; 0x100
 800712c:	4872      	ldr	r0, [pc, #456]	; (80072f8 <sensor_ini+0x228>)
 800712e:	f7fa fe85 	bl	8001e3c <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8007132:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007136:	f7fa f98d 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 800713a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800713e:	486e      	ldr	r0, [pc, #440]	; (80072f8 <sensor_ini+0x228>)
 8007140:	f7fa fe7c 	bl	8001e3c <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8007144:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007148:	f7fa f984 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 800714c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007150:	4869      	ldr	r0, [pc, #420]	; (80072f8 <sensor_ini+0x228>)
 8007152:	f7fa fe73 	bl	8001e3c <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8007156:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800715a:	f7fa f97b 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 800715e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007162:	4865      	ldr	r0, [pc, #404]	; (80072f8 <sensor_ini+0x228>)
 8007164:	f7fa fe6a 	bl	8001e3c <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8007168:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800716c:	f7fa f972 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8007170:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007174:	4860      	ldr	r0, [pc, #384]	; (80072f8 <sensor_ini+0x228>)
 8007176:	f7fa fe61 	bl	8001e3c <HAL_GPIO_TogglePin>
	if ((read_id()==0xFF)||(read_id()==0x70)||(read_id()==0x48)) {
 800717a:	7823      	ldrb	r3, [r4, #0]
 800717c:	2bff      	cmp	r3, #255	; 0xff
 800717e:	d029      	beq.n	80071d4 <sensor_ini+0x104>
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8007180:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007184:	2601      	movs	r6, #1
	ctrl = 0x00;
 8007186:	2700      	movs	r7, #0
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8007188:	9302      	str	r3, [sp, #8]
 800718a:	9400      	str	r4, [sp, #0]
 800718c:	9601      	str	r6, [sp, #4]
 800718e:	4633      	mov	r3, r6
 8007190:	2275      	movs	r2, #117	; 0x75
 8007192:	21d0      	movs	r1, #208	; 0xd0
 8007194:	4856      	ldr	r0, [pc, #344]	; (80072f0 <sensor_ini+0x220>)
	ctrl = 0x00;
 8007196:	702f      	strb	r7, [r5, #0]
	value = 0;
 8007198:	7027      	strb	r7, [r4, #0]
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 800719a:	f7fb fa1b 	bl	80025d4 <HAL_I2C_Mem_Read>
	if(status != HAL_OK)
 800719e:	b9f8      	cbnz	r0, 80071e0 <sensor_ini+0x110>
	if ((read_id()==0xFF)||(read_id()==0x70)||(read_id()==0x48)) {
 80071a0:	7823      	ldrb	r3, [r4, #0]
 80071a2:	2b70      	cmp	r3, #112	; 0x70
 80071a4:	d016      	beq.n	80071d4 <sensor_ini+0x104>
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 80071a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80071aa:	2601      	movs	r6, #1
	ctrl = 0x00;
 80071ac:	2700      	movs	r7, #0
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 80071ae:	9302      	str	r3, [sp, #8]
 80071b0:	9400      	str	r4, [sp, #0]
 80071b2:	9601      	str	r6, [sp, #4]
 80071b4:	4633      	mov	r3, r6
 80071b6:	2275      	movs	r2, #117	; 0x75
 80071b8:	21d0      	movs	r1, #208	; 0xd0
 80071ba:	484d      	ldr	r0, [pc, #308]	; (80072f0 <sensor_ini+0x220>)
	ctrl = 0x00;
 80071bc:	702f      	strb	r7, [r5, #0]
	value = 0;
 80071be:	7027      	strb	r7, [r4, #0]
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 80071c0:	f7fb fa08 	bl	80025d4 <HAL_I2C_Mem_Read>
	if(status != HAL_OK)
 80071c4:	2800      	cmp	r0, #0
 80071c6:	d14c      	bne.n	8007262 <sensor_ini+0x192>
	return value;
 80071c8:	7823      	ldrb	r3, [r4, #0]
	ctrl = sensor_io_read(0x68, 0x75);
 80071ca:	702b      	strb	r3, [r5, #0]
	if ((read_id()==0xFF)||(read_id()==0x70)||(read_id()==0x48)) {
 80071cc:	2b48      	cmp	r3, #72	; 0x48
 80071ce:	d002      	beq.n	80071d6 <sensor_ini+0x106>
}
 80071d0:	b005      	add	sp, #20
 80071d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ctrl = sensor_io_read(0x68, 0x75);
 80071d4:	702b      	strb	r3, [r5, #0]
		a = 2;
 80071d6:	4b47      	ldr	r3, [pc, #284]	; (80072f4 <sensor_ini+0x224>)
 80071d8:	2202      	movs	r2, #2
 80071da:	701a      	strb	r2, [r3, #0]
}
 80071dc:	b005      	add	sp, #20
 80071de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		a = 1;
 80071e0:	4b44      	ldr	r3, [pc, #272]	; (80072f4 <sensor_ini+0x224>)
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 80071e2:	4845      	ldr	r0, [pc, #276]	; (80072f8 <sensor_ini+0x228>)
		a = 1;
 80071e4:	701e      	strb	r6, [r3, #0]
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 80071e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80071ea:	f7fa fe27 	bl	8001e3c <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 80071ee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80071f2:	f7fa f92f 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 80071f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80071fa:	483f      	ldr	r0, [pc, #252]	; (80072f8 <sensor_ini+0x228>)
 80071fc:	f7fa fe1e 	bl	8001e3c <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8007200:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007204:	f7fa f926 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8007208:	f44f 7180 	mov.w	r1, #256	; 0x100
 800720c:	483a      	ldr	r0, [pc, #232]	; (80072f8 <sensor_ini+0x228>)
 800720e:	f7fa fe15 	bl	8001e3c <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8007212:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007216:	f7fa f91d 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 800721a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800721e:	4836      	ldr	r0, [pc, #216]	; (80072f8 <sensor_ini+0x228>)
 8007220:	f7fa fe0c 	bl	8001e3c <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8007224:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007228:	f7fa f914 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 800722c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007230:	4831      	ldr	r0, [pc, #196]	; (80072f8 <sensor_ini+0x228>)
 8007232:	f7fa fe03 	bl	8001e3c <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8007236:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800723a:	f7fa f90b 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 800723e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007242:	482d      	ldr	r0, [pc, #180]	; (80072f8 <sensor_ini+0x228>)
 8007244:	f7fa fdfa 	bl	8001e3c <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8007248:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800724c:	f7fa f902 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8007250:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007254:	4828      	ldr	r0, [pc, #160]	; (80072f8 <sensor_ini+0x228>)
 8007256:	f7fa fdf1 	bl	8001e3c <HAL_GPIO_TogglePin>
	if ((read_id()==0xFF)||(read_id()==0x70)||(read_id()==0x48)) {
 800725a:	7823      	ldrb	r3, [r4, #0]
 800725c:	2b70      	cmp	r3, #112	; 0x70
 800725e:	d1a2      	bne.n	80071a6 <sensor_ini+0xd6>
 8007260:	e7b8      	b.n	80071d4 <sensor_ini+0x104>
		a = 1;
 8007262:	4b24      	ldr	r3, [pc, #144]	; (80072f4 <sensor_ini+0x224>)
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8007264:	4824      	ldr	r0, [pc, #144]	; (80072f8 <sensor_ini+0x228>)
		a = 1;
 8007266:	701e      	strb	r6, [r3, #0]
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8007268:	f44f 7180 	mov.w	r1, #256	; 0x100
 800726c:	f7fa fde6 	bl	8001e3c <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8007270:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007274:	f7fa f8ee 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8007278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800727c:	481e      	ldr	r0, [pc, #120]	; (80072f8 <sensor_ini+0x228>)
 800727e:	f7fa fddd 	bl	8001e3c <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8007282:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007286:	f7fa f8e5 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 800728a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800728e:	481a      	ldr	r0, [pc, #104]	; (80072f8 <sensor_ini+0x228>)
 8007290:	f7fa fdd4 	bl	8001e3c <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8007294:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007298:	f7fa f8dc 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 800729c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80072a0:	4815      	ldr	r0, [pc, #84]	; (80072f8 <sensor_ini+0x228>)
 80072a2:	f7fa fdcb 	bl	8001e3c <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 80072a6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80072aa:	f7fa f8d3 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 80072ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80072b2:	4811      	ldr	r0, [pc, #68]	; (80072f8 <sensor_ini+0x228>)
 80072b4:	f7fa fdc2 	bl	8001e3c <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 80072b8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80072bc:	f7fa f8ca 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 80072c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80072c4:	480c      	ldr	r0, [pc, #48]	; (80072f8 <sensor_ini+0x228>)
 80072c6:	f7fa fdb9 	bl	8001e3c <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 80072ca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80072ce:	f7fa f8c1 	bl	8001454 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 80072d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80072d6:	4808      	ldr	r0, [pc, #32]	; (80072f8 <sensor_ini+0x228>)
 80072d8:	f7fa fdb0 	bl	8001e3c <HAL_GPIO_TogglePin>
	return value;
 80072dc:	7823      	ldrb	r3, [r4, #0]
	ctrl = sensor_io_read(0x68, 0x75);
 80072de:	702b      	strb	r3, [r5, #0]
	if ((read_id()==0xFF)||(read_id()==0x70)||(read_id()==0x48)) {
 80072e0:	2b48      	cmp	r3, #72	; 0x48
 80072e2:	f47f af75 	bne.w	80071d0 <sensor_ini+0x100>
 80072e6:	e776      	b.n	80071d6 <sensor_ini+0x106>
 80072e8:	2000488d 	.word	0x2000488d
 80072ec:	2000488c 	.word	0x2000488c
 80072f0:	200048dc 	.word	0x200048dc
 80072f4:	200008ec 	.word	0x200008ec
 80072f8:	40021000 	.word	0x40021000

080072fc <MPU6050_init>:
	return ctrl;
}

void MPU6050_init(void)
{
 80072fc:	b570      	push	{r4, r5, r6, lr}
void MPU6050_writeReg(uint16_t Addr, uint8_t reg, uint8_t value)
{
	uint8_t buf[2];
	buf[0] = reg;
	buf[1] = value;
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 80072fe:	4c16      	ldr	r4, [pc, #88]	; (8007358 <MPU6050_init+0x5c>)
{
 8007300:	b084      	sub	sp, #16
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 8007302:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	buf[0] = reg;
 8007306:	216b      	movs	r1, #107	; 0x6b
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 8007308:	aa03      	add	r2, sp, #12
 800730a:	9500      	str	r5, [sp, #0]
	buf[0] = reg;
 800730c:	f88d 100c 	strb.w	r1, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 8007310:	4620      	mov	r0, r4
	buf[1] = value;
 8007312:	2600      	movs	r6, #0
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 8007314:	2302      	movs	r3, #2
 8007316:	21d0      	movs	r1, #208	; 0xd0
	buf[1] = value;
 8007318:	f88d 600d 	strb.w	r6, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 800731c:	f7fa ffd0 	bl	80022c0 <HAL_I2C_Master_Transmit>
	buf[0] = reg;
 8007320:	211b      	movs	r1, #27
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 8007322:	9500      	str	r5, [sp, #0]
 8007324:	aa03      	add	r2, sp, #12
	buf[0] = reg;
 8007326:	f88d 100c 	strb.w	r1, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 800732a:	4620      	mov	r0, r4
	buf[1] = value;
 800732c:	2608      	movs	r6, #8
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 800732e:	2302      	movs	r3, #2
 8007330:	21d0      	movs	r1, #208	; 0xd0
	buf[1] = value;
 8007332:	f88d 600d 	strb.w	r6, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 8007336:	f7fa ffc3 	bl	80022c0 <HAL_I2C_Master_Transmit>
 800733a:	9500      	str	r5, [sp, #0]
 800733c:	aa03      	add	r2, sp, #12
 800733e:	4620      	mov	r0, r4
	buf[0] = reg;
 8007340:	251c      	movs	r5, #28
	buf[1] = value;
 8007342:	2410      	movs	r4, #16
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 8007344:	2302      	movs	r3, #2
 8007346:	21d0      	movs	r1, #208	; 0xd0
	buf[0] = reg;
 8007348:	f88d 500c 	strb.w	r5, [sp, #12]
	buf[1] = value;
 800734c:	f88d 400d 	strb.w	r4, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 8007350:	f7fa ffb6 	bl	80022c0 <HAL_I2C_Master_Transmit>
}
 8007354:	b004      	add	sp, #16
 8007356:	bd70      	pop	{r4, r5, r6, pc}
 8007358:	200048dc 	.word	0x200048dc

0800735c <MPU6050_getAllData>:
{
 800735c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007360:	b08d      	sub	sp, #52	; 0x34

// Read an 8-bit register
uint8_t MPU6050_readReg(uint16_t Addr, uint8_t reg)
{
  uint8_t value;
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8007362:	2401      	movs	r4, #1
 8007364:	f10d 062f 	add.w	r6, sp, #47	; 0x2f
 8007368:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 800736c:	9702      	str	r7, [sp, #8]
 800736e:	9401      	str	r4, [sp, #4]
 8007370:	4623      	mov	r3, r4
 8007372:	9600      	str	r6, [sp, #0]
 8007374:	2243      	movs	r2, #67	; 0x43
 8007376:	21d0      	movs	r1, #208	; 0xd0
 8007378:	4870      	ldr	r0, [pc, #448]	; (800753c <MPU6050_getAllData+0x1e0>)
 800737a:	f7fb f92b 	bl	80025d4 <HAL_I2C_Mem_Read>
 800737e:	9702      	str	r7, [sp, #8]
 8007380:	9401      	str	r4, [sp, #4]
 8007382:	9600      	str	r6, [sp, #0]
 8007384:	4623      	mov	r3, r4
 8007386:	2244      	movs	r2, #68	; 0x44
 8007388:	21d0      	movs	r1, #208	; 0xd0
 800738a:	486c      	ldr	r0, [pc, #432]	; (800753c <MPU6050_getAllData+0x1e0>)
  return value;
 800738c:	f89d a02f 	ldrb.w	sl, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8007390:	f7fb f920 	bl	80025d4 <HAL_I2C_Mem_Read>
  return value;
 8007394:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8007398:	9702      	str	r7, [sp, #8]
 800739a:	9401      	str	r4, [sp, #4]
 800739c:	9600      	str	r6, [sp, #0]
 800739e:	4623      	mov	r3, r4
 80073a0:	2245      	movs	r2, #69	; 0x45
 80073a2:	21d0      	movs	r1, #208	; 0xd0
 80073a4:	4865      	ldr	r0, [pc, #404]	; (800753c <MPU6050_getAllData+0x1e0>)
  return value;
 80073a6:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 80073a8:	f7fb f914 	bl	80025d4 <HAL_I2C_Mem_Read>
 80073ac:	9702      	str	r7, [sp, #8]
 80073ae:	9401      	str	r4, [sp, #4]
 80073b0:	9600      	str	r6, [sp, #0]
 80073b2:	4623      	mov	r3, r4
 80073b4:	2246      	movs	r2, #70	; 0x46
 80073b6:	21d0      	movs	r1, #208	; 0xd0
 80073b8:	4860      	ldr	r0, [pc, #384]	; (800753c <MPU6050_getAllData+0x1e0>)
  return value;
 80073ba:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 80073be:	f7fb f909 	bl	80025d4 <HAL_I2C_Mem_Read>
  return value;
 80073c2:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 80073c6:	9702      	str	r7, [sp, #8]
 80073c8:	9401      	str	r4, [sp, #4]
 80073ca:	9600      	str	r6, [sp, #0]
 80073cc:	4623      	mov	r3, r4
 80073ce:	2247      	movs	r2, #71	; 0x47
 80073d0:	21d0      	movs	r1, #208	; 0xd0
 80073d2:	485a      	ldr	r0, [pc, #360]	; (800753c <MPU6050_getAllData+0x1e0>)
  return value;
 80073d4:	9508      	str	r5, [sp, #32]
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 80073d6:	f7fb f8fd 	bl	80025d4 <HAL_I2C_Mem_Read>
  return value;
 80073da:	f89d e02f 	ldrb.w	lr, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 80073de:	9702      	str	r7, [sp, #8]
 80073e0:	9401      	str	r4, [sp, #4]
 80073e2:	9600      	str	r6, [sp, #0]
 80073e4:	4623      	mov	r3, r4
 80073e6:	2248      	movs	r2, #72	; 0x48
 80073e8:	21d0      	movs	r1, #208	; 0xd0
 80073ea:	4854      	ldr	r0, [pc, #336]	; (800753c <MPU6050_getAllData+0x1e0>)
  return value;
 80073ec:	f8cd e01c 	str.w	lr, [sp, #28]
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 80073f0:	f7fb f8f0 	bl	80025d4 <HAL_I2C_Mem_Read>
  return value;
 80073f4:	f89d e02f 	ldrb.w	lr, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 80073f8:	9702      	str	r7, [sp, #8]
 80073fa:	9401      	str	r4, [sp, #4]
 80073fc:	9600      	str	r6, [sp, #0]
 80073fe:	4623      	mov	r3, r4
 8007400:	223b      	movs	r2, #59	; 0x3b
 8007402:	21d0      	movs	r1, #208	; 0xd0
 8007404:	484d      	ldr	r0, [pc, #308]	; (800753c <MPU6050_getAllData+0x1e0>)
  return value;
 8007406:	f8cd e018 	str.w	lr, [sp, #24]
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 800740a:	f7fb f8e3 	bl	80025d4 <HAL_I2C_Mem_Read>
  return value;
 800740e:	f89d e02f 	ldrb.w	lr, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8007412:	9702      	str	r7, [sp, #8]
 8007414:	9401      	str	r4, [sp, #4]
 8007416:	9600      	str	r6, [sp, #0]
 8007418:	4623      	mov	r3, r4
 800741a:	223c      	movs	r2, #60	; 0x3c
 800741c:	21d0      	movs	r1, #208	; 0xd0
 800741e:	4847      	ldr	r0, [pc, #284]	; (800753c <MPU6050_getAllData+0x1e0>)
  return value;
 8007420:	f8cd e014 	str.w	lr, [sp, #20]
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8007424:	f7fb f8d6 	bl	80025d4 <HAL_I2C_Mem_Read>
  return value;
 8007428:	f89d e02f 	ldrb.w	lr, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 800742c:	9702      	str	r7, [sp, #8]
 800742e:	9401      	str	r4, [sp, #4]
 8007430:	9600      	str	r6, [sp, #0]
 8007432:	4623      	mov	r3, r4
 8007434:	223d      	movs	r2, #61	; 0x3d
 8007436:	21d0      	movs	r1, #208	; 0xd0
 8007438:	4840      	ldr	r0, [pc, #256]	; (800753c <MPU6050_getAllData+0x1e0>)
  return value;
 800743a:	f8cd e010 	str.w	lr, [sp, #16]
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 800743e:	f7fb f8c9 	bl	80025d4 <HAL_I2C_Mem_Read>
 8007442:	9702      	str	r7, [sp, #8]
 8007444:	9401      	str	r4, [sp, #4]
 8007446:	9600      	str	r6, [sp, #0]
 8007448:	4623      	mov	r3, r4
 800744a:	223e      	movs	r2, #62	; 0x3e
 800744c:	21d0      	movs	r1, #208	; 0xd0
 800744e:	483b      	ldr	r0, [pc, #236]	; (800753c <MPU6050_getAllData+0x1e0>)
  return value;
 8007450:	f89d 802f 	ldrb.w	r8, [sp, #47]	; 0x2f
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 8007454:	4d3a      	ldr	r5, [pc, #232]	; (8007540 <MPU6050_getAllData+0x1e4>)
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8007456:	f7fb f8bd 	bl	80025d4 <HAL_I2C_Mem_Read>
 800745a:	9702      	str	r7, [sp, #8]
 800745c:	9401      	str	r4, [sp, #4]
 800745e:	9600      	str	r6, [sp, #0]
 8007460:	4623      	mov	r3, r4
 8007462:	223f      	movs	r2, #63	; 0x3f
 8007464:	21d0      	movs	r1, #208	; 0xd0
 8007466:	4835      	ldr	r0, [pc, #212]	; (800753c <MPU6050_getAllData+0x1e0>)
  return value;
 8007468:	f89d b02f 	ldrb.w	fp, [sp, #47]	; 0x2f
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 800746c:	f7fb f8b2 	bl	80025d4 <HAL_I2C_Mem_Read>
 8007470:	9702      	str	r7, [sp, #8]
 8007472:	9401      	str	r4, [sp, #4]
 8007474:	9600      	str	r6, [sp, #0]
 8007476:	4623      	mov	r3, r4
 8007478:	2240      	movs	r2, #64	; 0x40
 800747a:	21d0      	movs	r1, #208	; 0xd0
 800747c:	482f      	ldr	r0, [pc, #188]	; (800753c <MPU6050_getAllData+0x1e0>)
  return value;
 800747e:	f89d 402f 	ldrb.w	r4, [sp, #47]	; 0x2f
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 8007482:	4e30      	ldr	r6, [pc, #192]	; (8007544 <MPU6050_getAllData+0x1e8>)
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8007484:	f7fb f8a6 	bl	80025d4 <HAL_I2C_Mem_Read>
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 8007488:	9b07      	ldr	r3, [sp, #28]
  return value;
 800748a:	f89d 702f 	ldrb.w	r7, [sp, #47]	; 0x2f
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 800748e:	ed9f 4a2e 	vldr	s8, [pc, #184]	; 8007548 <MPU6050_getAllData+0x1ec>
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 8007492:	eddf 4a2e 	vldr	s9, [pc, #184]	; 800754c <MPU6050_getAllData+0x1f0>
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 8007496:	482e      	ldr	r0, [pc, #184]	; (8007550 <MPU6050_getAllData+0x1f4>)
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 8007498:	492e      	ldr	r1, [pc, #184]	; (8007554 <MPU6050_getAllData+0x1f8>)
	accelY=(((int16_t)((uint16_t)buffer[8] << 8) + buffer[9]))/4096.0f*9.8f;
 800749a:	4a2f      	ldr	r2, [pc, #188]	; (8007558 <MPU6050_getAllData+0x1fc>)
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 800749c:	ea4f 2e03 	mov.w	lr, r3, lsl #8
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 80074a0:	9b05      	ldr	r3, [sp, #20]
 80074a2:	ea4f 2c03 	mov.w	ip, r3, lsl #8
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 80074a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a8:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 80074ac:	fa03 fa8a 	sxtah	sl, r3, sl
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 80074b0:	9b08      	ldr	r3, [sp, #32]
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 80074b2:	ee07 aa90 	vmov	s15, sl
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 80074b6:	ea4f 2909 	mov.w	r9, r9, lsl #8
 80074ba:	fa03 f989 	sxtah	r9, r3, r9
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 80074be:	9b06      	ldr	r3, [sp, #24]
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 80074c0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
	accelY=(((int16_t)((uint16_t)buffer[8] << 8) + buffer[9]))/4096.0f*9.8f;
 80074c4:	ea4f 2808 	mov.w	r8, r8, lsl #8
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 80074c8:	ee07 9a90 	vmov	s15, r9
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 80074cc:	fa03 fe8e 	sxtah	lr, r3, lr
	accelY=(((int16_t)((uint16_t)buffer[8] << 8) + buffer[9]))/4096.0f*9.8f;
 80074d0:	fa0b f888 	sxtah	r8, fp, r8
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 80074d4:	9b04      	ldr	r3, [sp, #16]
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 80074d6:	eef8 5ae7 	vcvt.f32.s32	s11, s15
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 80074da:	0224      	lsls	r4, r4, #8
	accelY=(((int16_t)((uint16_t)buffer[8] << 8) + buffer[9]))/4096.0f*9.8f;
 80074dc:	ee07 8a90 	vmov	s15, r8
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 80074e0:	fa03 f38c 	sxtah	r3, r3, ip
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 80074e4:	fa07 f484 	sxtah	r4, r7, r4
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 80074e8:	ee06 ea10 	vmov	s12, lr
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 80074ec:	ee06 3a90 	vmov	s13, r3
	accelY=(((int16_t)((uint16_t)buffer[8] << 8) + buffer[9]))/4096.0f*9.8f;
 80074f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 80074f4:	ee07 4a90 	vmov	s15, r4
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 80074f8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 80074fc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 8007500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 8007504:	ee25 5a04 	vmul.f32	s10, s10, s8
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 8007508:	ee65 5a84 	vmul.f32	s11, s11, s8
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 800750c:	ee26 6a04 	vmul.f32	s12, s12, s8
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 8007510:	ee66 6aa4 	vmul.f32	s13, s13, s9
	accelY=(((int16_t)((uint16_t)buffer[8] << 8) + buffer[9]))/4096.0f*9.8f;
 8007514:	ee27 7a24 	vmul.f32	s14, s14, s9
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 8007518:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800751c:	4b0f      	ldr	r3, [pc, #60]	; (800755c <MPU6050_getAllData+0x200>)
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 800751e:	ed86 5a00 	vstr	s10, [r6]
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 8007522:	edc5 5a00 	vstr	s11, [r5]
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 8007526:	ed80 6a00 	vstr	s12, [r0]
	accelX=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
 800752a:	edc1 6a00 	vstr	s13, [r1]
	accelY=(((int16_t)((uint16_t)buffer[8] << 8) + buffer[9]))/4096.0f*9.8f;
 800752e:	ed82 7a00 	vstr	s14, [r2]
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 8007532:	edc3 7a00 	vstr	s15, [r3]
}
 8007536:	b00d      	add	sp, #52	; 0x34
 8007538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800753c:	200048dc 	.word	0x200048dc
 8007540:	20004bd8 	.word	0x20004bd8
 8007544:	20004930 	.word	0x20004930
 8007548:	398ba1dc 	.word	0x398ba1dc
 800754c:	3b1ccccd 	.word	0x3b1ccccd
 8007550:	20004968 	.word	0x20004968
 8007554:	200048d8 	.word	0x200048d8
 8007558:	200048cc 	.word	0x200048cc
 800755c:	20004b9c 	.word	0x20004b9c

08007560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007560:	b500      	push	{lr}
 8007562:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007564:	4b0e      	ldr	r3, [pc, #56]	; (80075a0 <HAL_MspInit+0x40>)
 8007566:	2200      	movs	r2, #0
 8007568:	9200      	str	r2, [sp, #0]
 800756a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800756c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8007570:	6459      	str	r1, [r3, #68]	; 0x44
 8007572:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007574:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8007578:	9100      	str	r1, [sp, #0]
 800757a:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800757c:	9201      	str	r2, [sp, #4]
 800757e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007580:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8007584:	6419      	str	r1, [r3, #64]	; 0x40
 8007586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800758c:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800758e:	210f      	movs	r1, #15
 8007590:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8007594:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007596:	f7fa fae5 	bl	8001b64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800759a:	b003      	add	sp, #12
 800759c:	f85d fb04 	ldr.w	pc, [sp], #4
 80075a0:	40023800 	.word	0x40023800

080075a4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80075a4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcan->Instance==CAN1)
 80075a6:	6802      	ldr	r2, [r0, #0]
 80075a8:	4b1f      	ldr	r3, [pc, #124]	; (8007628 <HAL_CAN_MspInit+0x84>)
{
 80075aa:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075ac:	2400      	movs	r4, #0
  if(hcan->Instance==CAN1)
 80075ae:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075b0:	9404      	str	r4, [sp, #16]
 80075b2:	9403      	str	r4, [sp, #12]
 80075b4:	9405      	str	r4, [sp, #20]
 80075b6:	9406      	str	r4, [sp, #24]
 80075b8:	9407      	str	r4, [sp, #28]
  if(hcan->Instance==CAN1)
 80075ba:	d001      	beq.n	80075c0 <HAL_CAN_MspInit+0x1c>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80075bc:	b008      	add	sp, #32
 80075be:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 80075c0:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80075c4:	9401      	str	r4, [sp, #4]
 80075c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80075c8:	4818      	ldr	r0, [pc, #96]	; (800762c <HAL_CAN_MspInit+0x88>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80075ca:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80075ce:	641a      	str	r2, [r3, #64]	; 0x40
 80075d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075d2:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80075d6:	9201      	str	r2, [sp, #4]
 80075d8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80075da:	9402      	str	r4, [sp, #8]
 80075dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075de:	f042 0208 	orr.w	r2, r2, #8
 80075e2:	631a      	str	r2, [r3, #48]	; 0x30
 80075e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e6:	f003 0308 	and.w	r3, r3, #8
 80075ea:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80075ec:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80075ee:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80075f0:	2209      	movs	r2, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075f2:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80075f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075f6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80075f8:	9207      	str	r2, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80075fa:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075fc:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80075fe:	f7fa fb0b 	bl	8001c18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8007602:	4622      	mov	r2, r4
 8007604:	2105      	movs	r1, #5
 8007606:	2014      	movs	r0, #20
 8007608:	f7fa faac 	bl	8001b64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800760c:	2014      	movs	r0, #20
 800760e:	f7fa fadf 	bl	8001bd0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8007612:	4622      	mov	r2, r4
 8007614:	2105      	movs	r1, #5
 8007616:	2015      	movs	r0, #21
 8007618:	f7fa faa4 	bl	8001b64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800761c:	2015      	movs	r0, #21
 800761e:	f7fa fad7 	bl	8001bd0 <HAL_NVIC_EnableIRQ>
}
 8007622:	b008      	add	sp, #32
 8007624:	bd70      	pop	{r4, r5, r6, pc}
 8007626:	bf00      	nop
 8007628:	40006400 	.word	0x40006400
 800762c:	40020c00 	.word	0x40020c00

08007630 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007630:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 8007632:	6802      	ldr	r2, [r0, #0]
 8007634:	4b1c      	ldr	r3, [pc, #112]	; (80076a8 <HAL_I2C_MspInit+0x78>)
{
 8007636:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007638:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 800763a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800763c:	9404      	str	r4, [sp, #16]
 800763e:	9403      	str	r4, [sp, #12]
 8007640:	9405      	str	r4, [sp, #20]
 8007642:	9406      	str	r4, [sp, #24]
 8007644:	9407      	str	r4, [sp, #28]
  if(hi2c->Instance==I2C1)
 8007646:	d001      	beq.n	800764c <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007648:	b009      	add	sp, #36	; 0x24
 800764a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800764c:	4d17      	ldr	r5, [pc, #92]	; (80076ac <HAL_I2C_MspInit+0x7c>)
 800764e:	9401      	str	r4, [sp, #4]
 8007650:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007652:	4817      	ldr	r0, [pc, #92]	; (80076b0 <HAL_I2C_MspInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007654:	f043 0302 	orr.w	r3, r3, #2
 8007658:	632b      	str	r3, [r5, #48]	; 0x30
 800765a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800765c:	f003 0302 	and.w	r3, r3, #2
 8007660:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007662:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007664:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007666:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007668:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800766a:	2712      	movs	r7, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800766c:	2304      	movs	r3, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800766e:	2601      	movs	r6, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007670:	f8dd e004 	ldr.w	lr, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007674:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007676:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007678:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800767a:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800767c:	f7fa facc 	bl	8001c18 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007680:	9402      	str	r4, [sp, #8]
 8007682:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8007684:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007688:	642b      	str	r3, [r5, #64]	; 0x40
 800768a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800768c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8007690:	4622      	mov	r2, r4
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007692:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8007694:	2105      	movs	r1, #5
 8007696:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007698:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800769a:	f7fa fa63 	bl	8001b64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800769e:	201f      	movs	r0, #31
 80076a0:	f7fa fa96 	bl	8001bd0 <HAL_NVIC_EnableIRQ>
}
 80076a4:	b009      	add	sp, #36	; 0x24
 80076a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076a8:	40005400 	.word	0x40005400
 80076ac:	40023800 	.word	0x40023800
 80076b0:	40020400 	.word	0x40020400

080076b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80076b4:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 80076b6:	4601      	mov	r1, r0
{
 80076b8:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 80076ba:	2200      	movs	r2, #0
 80076bc:	201d      	movs	r0, #29
 80076be:	f7fa fa51 	bl	8001b64 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 80076c2:	201d      	movs	r0, #29
 80076c4:	f7fa fa84 	bl	8001bd0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80076c8:	2500      	movs	r5, #0
 80076ca:	4b15      	ldr	r3, [pc, #84]	; (8007720 <HAL_InitTick+0x6c>)
 80076cc:	9502      	str	r5, [sp, #8]
 80076ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80076d0:	4c14      	ldr	r4, [pc, #80]	; (8007724 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM3_CLK_ENABLE();
 80076d2:	f042 0202 	orr.w	r2, r2, #2
 80076d6:	641a      	str	r2, [r3, #64]	; 0x40
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	f003 0302 	and.w	r3, r3, #2
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80076de:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM3_CLK_ENABLE();
 80076e0:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80076e2:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM3_CLK_ENABLE();
 80076e4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80076e6:	f7fc fea3 	bl	8004430 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80076ea:	f7fc fe91 	bl	8004410 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80076ee:	4a0e      	ldr	r2, [pc, #56]	; (8007728 <HAL_InitTick+0x74>)
  htim3.Instance = TIM3;
 80076f0:	490e      	ldr	r1, [pc, #56]	; (800772c <HAL_InitTick+0x78>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
  htim3.Init.Prescaler = uwPrescalerValue;
  htim3.Init.ClockDivision = 0;
 80076f2:	6125      	str	r5, [r4, #16]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80076f4:	0043      	lsls	r3, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80076f6:	fba2 2303 	umull	r2, r3, r2, r3
 80076fa:	0c9b      	lsrs	r3, r3, #18
 80076fc:	3b01      	subs	r3, #1
  htim3.Init.Period = (1000000 / 1000) - 1;
 80076fe:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8007702:	4620      	mov	r0, r4
  htim3.Instance = TIM3;
 8007704:	e884 002a 	stmia.w	r4, {r1, r3, r5}
  htim3.Init.Period = (1000000 / 1000) - 1;
 8007708:	60e2      	str	r2, [r4, #12]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 800770a:	f7fc feb5 	bl	8004478 <HAL_TIM_Base_Init>
 800770e:	b110      	cbz	r0, 8007716 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8007710:	2001      	movs	r0, #1
}
 8007712:	b009      	add	sp, #36	; 0x24
 8007714:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim3);
 8007716:	4620      	mov	r0, r4
 8007718:	f7fc ff50 	bl	80045bc <HAL_TIM_Base_Start_IT>
}
 800771c:	b009      	add	sp, #36	; 0x24
 800771e:	bd30      	pop	{r4, r5, pc}
 8007720:	40023800 	.word	0x40023800
 8007724:	20004c04 	.word	0x20004c04
 8007728:	431bde83 	.word	0x431bde83
 800772c:	40000400 	.word	0x40000400

08007730 <NMI_Handler>:
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop

08007734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007734:	e7fe      	b.n	8007734 <HardFault_Handler>
 8007736:	bf00      	nop

08007738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007738:	e7fe      	b.n	8007738 <MemManage_Handler>
 800773a:	bf00      	nop

0800773c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800773c:	e7fe      	b.n	800773c <BusFault_Handler>
 800773e:	bf00      	nop

08007740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007740:	e7fe      	b.n	8007740 <UsageFault_Handler>
 8007742:	bf00      	nop

08007744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop

08007748 <CAN1_RX0_IRQHandler>:
 8007748:	4801      	ldr	r0, [pc, #4]	; (8007750 <CAN1_RX0_IRQHandler+0x8>)
 800774a:	f7fa b8cf 	b.w	80018ec <HAL_CAN_IRQHandler>
 800774e:	bf00      	nop
 8007750:	20004bb0 	.word	0x20004bb0

08007754 <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007754:	4801      	ldr	r0, [pc, #4]	; (800775c <CAN1_RX1_IRQHandler+0x8>)
 8007756:	f7fa b8c9 	b.w	80018ec <HAL_CAN_IRQHandler>
 800775a:	bf00      	nop
 800775c:	20004bb0 	.word	0x20004bb0

08007760 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007760:	4801      	ldr	r0, [pc, #4]	; (8007768 <TIM3_IRQHandler+0x8>)
 8007762:	f7fc bf43 	b.w	80045ec <HAL_TIM_IRQHandler>
 8007766:	bf00      	nop
 8007768:	20004c04 	.word	0x20004c04

0800776c <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800776c:	4801      	ldr	r0, [pc, #4]	; (8007774 <I2C1_EV_IRQHandler+0x8>)
 800776e:	f7fb b91d 	b.w	80029ac <HAL_I2C_EV_IRQHandler>
 8007772:	bf00      	nop
 8007774:	200048dc 	.word	0x200048dc

08007778 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8007778:	4801      	ldr	r0, [pc, #4]	; (8007780 <OTG_FS_IRQHandler+0x8>)
 800777a:	f7fb bee1 	b.w	8003540 <HAL_PCD_IRQHandler>
 800777e:	bf00      	nop
 8007780:	200056e0 	.word	0x200056e0

08007784 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8007784:	2001      	movs	r0, #1
 8007786:	4770      	bx	lr

08007788 <_kill>:

int _kill(int pid, int sig)
{
 8007788:	b508      	push	{r3, lr}
	errno = EINVAL;
 800778a:	f002 ff09 	bl	800a5a0 <__errno>
 800778e:	2316      	movs	r3, #22
 8007790:	6003      	str	r3, [r0, #0]
	return -1;
}
 8007792:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007796:	bd08      	pop	{r3, pc}

08007798 <_exit>:

void _exit (int status)
{
 8007798:	b508      	push	{r3, lr}
	errno = EINVAL;
 800779a:	f002 ff01 	bl	800a5a0 <__errno>
 800779e:	2316      	movs	r3, #22
 80077a0:	6003      	str	r3, [r0, #0]
 80077a2:	e7fe      	b.n	80077a2 <_exit+0xa>

080077a4 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80077a4:	4a0a      	ldr	r2, [pc, #40]	; (80077d0 <_sbrk+0x2c>)
{
 80077a6:	b508      	push	{r3, lr}
	if (heap_end == 0)
 80077a8:	6813      	ldr	r3, [r2, #0]
 80077aa:	b173      	cbz	r3, 80077ca <_sbrk+0x26>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80077ac:	4418      	add	r0, r3
 80077ae:	4669      	mov	r1, sp
 80077b0:	4288      	cmp	r0, r1
 80077b2:	d802      	bhi.n	80077ba <_sbrk+0x16>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80077b4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	bd08      	pop	{r3, pc}
		errno = ENOMEM;
 80077ba:	f002 fef1 	bl	800a5a0 <__errno>
 80077be:	230c      	movs	r3, #12
 80077c0:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80077c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80077ca:	4b02      	ldr	r3, [pc, #8]	; (80077d4 <_sbrk+0x30>)
 80077cc:	6013      	str	r3, [r2, #0]
 80077ce:	e7ed      	b.n	80077ac <_sbrk+0x8>
 80077d0:	20004890 	.word	0x20004890
 80077d4:	20005cec 	.word	0x20005cec

080077d8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80077d8:	4b05      	ldr	r3, [pc, #20]	; (80077f0 <SystemInit+0x18>)
 80077da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80077de:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80077e2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80077e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80077ea:	6099      	str	r1, [r3, #8]
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	e000ed00 	.word	0xe000ed00

080077f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80077f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80077f6:	2200      	movs	r2, #0
 80077f8:	4910      	ldr	r1, [pc, #64]	; (800783c <MX_USB_DEVICE_Init+0x48>)
 80077fa:	4811      	ldr	r0, [pc, #68]	; (8007840 <MX_USB_DEVICE_Init+0x4c>)
 80077fc:	f7fd feb2 	bl	8005564 <USBD_Init>
 8007800:	b9c0      	cbnz	r0, 8007834 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007802:	4910      	ldr	r1, [pc, #64]	; (8007844 <MX_USB_DEVICE_Init+0x50>)
 8007804:	480e      	ldr	r0, [pc, #56]	; (8007840 <MX_USB_DEVICE_Init+0x4c>)
 8007806:	f7fd fec3 	bl	8005590 <USBD_RegisterClass>
 800780a:	b980      	cbnz	r0, 800782e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800780c:	490e      	ldr	r1, [pc, #56]	; (8007848 <MX_USB_DEVICE_Init+0x54>)
 800780e:	480c      	ldr	r0, [pc, #48]	; (8007840 <MX_USB_DEVICE_Init+0x4c>)
 8007810:	f7fd fe60 	bl	80054d4 <USBD_CDC_RegisterInterface>
 8007814:	b940      	cbnz	r0, 8007828 <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007816:	480a      	ldr	r0, [pc, #40]	; (8007840 <MX_USB_DEVICE_Init+0x4c>)
 8007818:	f7fd fec2 	bl	80055a0 <USBD_Start>
 800781c:	b900      	cbnz	r0, 8007820 <MX_USB_DEVICE_Init+0x2c>
 800781e:	bd08      	pop	{r3, pc}
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007820:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8007824:	f7ff bc52 	b.w	80070cc <Error_Handler>
    Error_Handler();
 8007828:	f7ff fc50 	bl	80070cc <Error_Handler>
 800782c:	e7f3      	b.n	8007816 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800782e:	f7ff fc4d 	bl	80070cc <Error_Handler>
 8007832:	e7eb      	b.n	800780c <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8007834:	f7ff fc4a 	bl	80070cc <Error_Handler>
 8007838:	e7e3      	b.n	8007802 <MX_USB_DEVICE_Init+0xe>
 800783a:	bf00      	nop
 800783c:	20000130 	.word	0x20000130
 8007840:	20004c44 	.word	0x20004c44
 8007844:	20000008 	.word	0x20000008
 8007848:	20000120 	.word	0x20000120

0800784c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800784c:	2000      	movs	r0, #0
 800784e:	4770      	bx	lr

08007850 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8007850:	2000      	movs	r0, #0
 8007852:	4770      	bx	lr

08007854 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007856:	b083      	sub	sp, #12
  /* USER CODE BEGIN 6 */


  volatile uint32_t counter = 0;
 8007858:	2300      	movs	r3, #0
{
 800785a:	4605      	mov	r5, r0
 800785c:	460f      	mov	r7, r1
  volatile uint32_t counter = 0;
 800785e:	9301      	str	r3, [sp, #4]

  while(counter < *Len)
  {
       RxBuffer[RxFifoIndex ] = Buf[counter];
 8007860:	4e12      	ldr	r6, [pc, #72]	; (80078ac <CDC_Receive_FS+0x58>)
 8007862:	4c13      	ldr	r4, [pc, #76]	; (80078b0 <CDC_Receive_FS+0x5c>)
  while(counter < *Len)
 8007864:	e014      	b.n	8007890 <CDC_Receive_FS+0x3c>
       RxBuffer[RxFifoIndex ] = Buf[counter];
 8007866:	9a01      	ldr	r2, [sp, #4]
 8007868:	6823      	ldr	r3, [r4, #0]
 800786a:	5caa      	ldrb	r2, [r5, r2]
 800786c:	54f2      	strb	r2, [r6, r3]
       cdc_receive_put(Buf[counter]);
 800786e:	9b01      	ldr	r3, [sp, #4]
 8007870:	5ce8      	ldrb	r0, [r5, r3]
 8007872:	f000 ffeb 	bl	800884c <cdc_receive_put>
       counter++, RxFifoIndex++;
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	9a01      	ldr	r2, [sp, #4]
 800787a:	3301      	adds	r3, #1
       if(RxFifoIndex  == RxBufferSize)
 800787c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
       counter++, RxFifoIndex++;
 8007880:	6023      	str	r3, [r4, #0]
 8007882:	f102 0201 	add.w	r2, r2, #1
            RxFifoIndex  = 0;
 8007886:	bf08      	it	eq
 8007888:	2300      	moveq	r3, #0
       counter++, RxFifoIndex++;
 800788a:	9201      	str	r2, [sp, #4]
            RxFifoIndex  = 0;
 800788c:	bf08      	it	eq
 800788e:	6023      	streq	r3, [r4, #0]
  while(counter < *Len)
 8007890:	9b01      	ldr	r3, [sp, #4]
 8007892:	683a      	ldr	r2, [r7, #0]
 8007894:	429a      	cmp	r2, r3
 8007896:	d8e6      	bhi.n	8007866 <CDC_Receive_FS+0x12>
   }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007898:	4629      	mov	r1, r5
 800789a:	4806      	ldr	r0, [pc, #24]	; (80078b4 <CDC_Receive_FS+0x60>)
 800789c:	f7fd fe2a 	bl	80054f4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80078a0:	4804      	ldr	r0, [pc, #16]	; (80078b4 <CDC_Receive_FS+0x60>)
 80078a2:	f7fd fe47 	bl	8005534 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
  /* USER CODE END 6 */
}
 80078a6:	2000      	movs	r0, #0
 80078a8:	b003      	add	sp, #12
 80078aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078ac:	200052e0 	.word	0x200052e0
 80078b0:	20004894 	.word	0x20004894
 80078b4:	20004c44 	.word	0x20004c44

080078b8 <CDC_Init_FS>:
{
 80078b8:	b510      	push	{r4, lr}
	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80078ba:	4c07      	ldr	r4, [pc, #28]	; (80078d8 <CDC_Init_FS+0x20>)
 80078bc:	4907      	ldr	r1, [pc, #28]	; (80078dc <CDC_Init_FS+0x24>)
 80078be:	2200      	movs	r2, #0
 80078c0:	4620      	mov	r0, r4
 80078c2:	f7fd fe0f 	bl	80054e4 <USBD_CDC_SetTxBuffer>
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80078c6:	4906      	ldr	r1, [pc, #24]	; (80078e0 <CDC_Init_FS+0x28>)
 80078c8:	4620      	mov	r0, r4
 80078ca:	f7fd fe13 	bl	80054f4 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);                                         //This is new to the function, the rest is standard HAL
 80078ce:	4620      	mov	r0, r4
 80078d0:	f7fd fe30 	bl	8005534 <USBD_CDC_ReceivePacket>
}
 80078d4:	2000      	movs	r0, #0
 80078d6:	bd10      	pop	{r4, pc}
 80078d8:	20004c44 	.word	0x20004c44
 80078dc:	200050e0 	.word	0x200050e0
 80078e0:	20004ee0 	.word	0x20004ee0

080078e4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80078e4:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80078e6:	4c09      	ldr	r4, [pc, #36]	; (800790c <CDC_Transmit_FS+0x28>)
 80078e8:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  if (hcdc->TxState != 0){
 80078ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80078f0:	b10b      	cbz	r3, 80078f6 <CDC_Transmit_FS+0x12>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 80078f2:	2001      	movs	r0, #1
 80078f4:	bd10      	pop	{r4, pc}
 80078f6:	460a      	mov	r2, r1
 80078f8:	4601      	mov	r1, r0
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80078fa:	4620      	mov	r0, r4
 80078fc:	f7fd fdf2 	bl	80054e4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007900:	4620      	mov	r0, r4
}
 8007902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007906:	f7fd bdfb 	b.w	8005500 <USBD_CDC_TransmitPacket>
 800790a:	bf00      	nop
 800790c:	20004c44 	.word	0x20004c44

08007910 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007910:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 8007912:	6803      	ldr	r3, [r0, #0]
{
 8007914:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007916:	2400      	movs	r4, #0
  if(pcdHandle->Instance==USB_OTG_FS)
 8007918:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800791c:	9404      	str	r4, [sp, #16]
 800791e:	9403      	str	r4, [sp, #12]
 8007920:	9405      	str	r4, [sp, #20]
 8007922:	9406      	str	r4, [sp, #24]
 8007924:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007926:	d001      	beq.n	800792c <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007928:	b009      	add	sp, #36	; 0x24
 800792a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800792c:	4d1b      	ldr	r5, [pc, #108]	; (800799c <HAL_PCD_MspInit+0x8c>)
 800792e:	9401      	str	r4, [sp, #4]
 8007930:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007932:	481b      	ldr	r0, [pc, #108]	; (80079a0 <HAL_PCD_MspInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007934:	f043 0301 	orr.w	r3, r3, #1
 8007938:	632b      	str	r3, [r5, #48]	; 0x30
 800793a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800793c:	f003 0301 	and.w	r3, r3, #1
 8007940:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007942:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007944:	f44f 7300 	mov.w	r3, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007948:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800794a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800794c:	f44f 57c0 	mov.w	r7, #6144	; 0x1800
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007950:	f7fa f962 	bl	8001c18 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007954:	2602      	movs	r6, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007956:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007958:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800795a:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800795c:	4810      	ldr	r0, [pc, #64]	; (80079a0 <HAL_PCD_MspInit+0x90>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800795e:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007960:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007962:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007964:	9703      	str	r7, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007966:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007968:	f7fa f956 	bl	8001c18 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800796c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800796e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007972:	636b      	str	r3, [r5, #52]	; 0x34
 8007974:	9402      	str	r4, [sp, #8]
 8007976:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800797c:	646b      	str	r3, [r5, #68]	; 0x44
 800797e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8007984:	4622      	mov	r2, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007986:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8007988:	2105      	movs	r1, #5
 800798a:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800798c:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800798e:	f7fa f8e9 	bl	8001b64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007992:	2043      	movs	r0, #67	; 0x43
 8007994:	f7fa f91c 	bl	8001bd0 <HAL_NVIC_EnableIRQ>
}
 8007998:	b009      	add	sp, #36	; 0x24
 800799a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800799c:	40023800 	.word	0x40023800
 80079a0:	40020000 	.word	0x40020000

080079a4 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80079a4:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 80079a8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80079ac:	f7fd be10 	b.w	80055d0 <USBD_LL_SetupStage>

080079b0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80079b0:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80079b4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80079b8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80079bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80079c0:	f7fd be36 	b.w	8005630 <USBD_LL_DataOutStage>

080079c4 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80079c4:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80079c8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80079cc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80079d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079d2:	f7fd be6d 	b.w	80056b0 <USBD_LL_DataInStage>
 80079d6:	bf00      	nop

080079d8 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80079d8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80079dc:	f7fd bf08 	b.w	80057f0 <USBD_LL_SOF>

080079e0 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80079e0:	68c1      	ldr	r1, [r0, #12]
{ 
 80079e2:	b510      	push	{r4, lr}
 80079e4:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80079e6:	b121      	cbz	r1, 80079f2 <HAL_PCD_ResetCallback+0x12>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80079e8:	2902      	cmp	r1, #2
 80079ea:	d00c      	beq.n	8007a06 <HAL_PCD_ResetCallback+0x26>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 80079ec:	f7ff fb6e 	bl	80070cc <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80079f0:	2101      	movs	r1, #1
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80079f2:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 80079f6:	f7fd fee5 	bl	80057c4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80079fa:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 80079fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a02:	f7fd beb7 	b.w	8005774 <USBD_LL_Reset>
    speed = USBD_SPEED_FULL;
 8007a06:	2101      	movs	r1, #1
 8007a08:	e7f3      	b.n	80079f2 <HAL_PCD_ResetCallback+0x12>
 8007a0a:	bf00      	nop

08007a0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a0c:	b510      	push	{r4, lr}
 8007a0e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a10:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007a14:	f7fd feda 	bl	80057cc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007a18:	6822      	ldr	r2, [r4, #0]
 8007a1a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8007a1e:	f043 0301 	orr.w	r3, r3, #1
 8007a22:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007a26:	6a23      	ldr	r3, [r4, #32]
 8007a28:	b123      	cbz	r3, 8007a34 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a2a:	4a03      	ldr	r2, [pc, #12]	; (8007a38 <HAL_PCD_SuspendCallback+0x2c>)
 8007a2c:	6913      	ldr	r3, [r2, #16]
 8007a2e:	f043 0306 	orr.w	r3, r3, #6
 8007a32:	6113      	str	r3, [r2, #16]
 8007a34:	bd10      	pop	{r4, pc}
 8007a36:	bf00      	nop
 8007a38:	e000ed00 	.word	0xe000ed00

08007a3c <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007a3c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007a40:	f7fd bece 	b.w	80057e0 <USBD_LL_Resume>

08007a44 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a44:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007a48:	f7fd bee2 	b.w	8005810 <USBD_LL_IsoOUTIncomplete>

08007a4c <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a4c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007a50:	f7fd bedc 	b.w	800580c <USBD_LL_IsoINIncomplete>

08007a54 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a54:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007a58:	f7fd bedc 	b.w	8005814 <USBD_LL_DevConnected>

08007a5c <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a5c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007a60:	f7fd beda 	b.w	8005818 <USBD_LL_DevDisconnected>

08007a64 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007a64:	7802      	ldrb	r2, [r0, #0]
 8007a66:	b10a      	cbz	r2, 8007a6c <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8007a68:	2000      	movs	r0, #0
 8007a6a:	4770      	bx	lr
  hpcd_USB_OTG_FS.pData = pdev;
 8007a6c:	4b15      	ldr	r3, [pc, #84]	; (8007ac4 <USBD_LL_Init+0x60>)
{
 8007a6e:	b570      	push	{r4, r5, r6, lr}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007a70:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.pData = pdev;
 8007a72:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007a76:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007a7a:	2504      	movs	r5, #4
  pdev->pData = &hpcd_USB_OTG_FS;
 8007a7c:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007a80:	2401      	movs	r4, #1
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007a82:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007a84:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007a86:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007a88:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007a8a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007a8c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007a8e:	601e      	str	r6, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007a90:	605d      	str	r5, [r3, #4]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007a92:	62dc      	str	r4, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007a94:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007a96:	6199      	str	r1, [r3, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007a98:	f7fb fca0 	bl	80033dc <HAL_PCD_Init>
 8007a9c:	b978      	cbnz	r0, 8007abe <USBD_LL_Init+0x5a>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007a9e:	2180      	movs	r1, #128	; 0x80
 8007aa0:	4808      	ldr	r0, [pc, #32]	; (8007ac4 <USBD_LL_Init+0x60>)
 8007aa2:	f7fc f9fb 	bl	8003e9c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007aa6:	2240      	movs	r2, #64	; 0x40
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	4806      	ldr	r0, [pc, #24]	; (8007ac4 <USBD_LL_Init+0x60>)
 8007aac:	f7fc f9d2 	bl	8003e54 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007ab0:	2280      	movs	r2, #128	; 0x80
 8007ab2:	2101      	movs	r1, #1
 8007ab4:	4803      	ldr	r0, [pc, #12]	; (8007ac4 <USBD_LL_Init+0x60>)
 8007ab6:	f7fc f9cd 	bl	8003e54 <HAL_PCDEx_SetTxFiFo>
}
 8007aba:	2000      	movs	r0, #0
 8007abc:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler( );
 8007abe:	f7ff fb05 	bl	80070cc <Error_Handler>
 8007ac2:	e7ec      	b.n	8007a9e <USBD_LL_Init+0x3a>
 8007ac4:	200056e0 	.word	0x200056e0

08007ac8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ac8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007aca:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007ace:	f7fb fd15 	bl	80034fc <HAL_PCD_Start>
 8007ad2:	2803      	cmp	r0, #3
 8007ad4:	bf9a      	itte	ls
 8007ad6:	4b02      	ldrls	r3, [pc, #8]	; (8007ae0 <USBD_LL_Start+0x18>)
 8007ad8:	5c18      	ldrbls	r0, [r3, r0]
 8007ada:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
  
  return usb_status;
}
 8007adc:	bd08      	pop	{r3, pc}
 8007ade:	bf00      	nop
 8007ae0:	0800a9bc 	.word	0x0800a9bc

08007ae4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007ae4:	b510      	push	{r4, lr}
 8007ae6:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ae8:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007aec:	4613      	mov	r3, r2
 8007aee:	4622      	mov	r2, r4
 8007af0:	f7fc f886 	bl	8003c00 <HAL_PCD_EP_Open>
 8007af4:	2803      	cmp	r0, #3
 8007af6:	bf9a      	itte	ls
 8007af8:	4b01      	ldrls	r3, [pc, #4]	; (8007b00 <USBD_LL_OpenEP+0x1c>)
 8007afa:	5c18      	ldrbls	r0, [r3, r0]
 8007afc:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8007afe:	bd10      	pop	{r4, pc}
 8007b00:	0800a9bc 	.word	0x0800a9bc

08007b04 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b04:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b06:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007b0a:	f7fc f8af 	bl	8003c6c <HAL_PCD_EP_Close>
 8007b0e:	2803      	cmp	r0, #3
 8007b10:	bf9a      	itte	ls
 8007b12:	4b02      	ldrls	r3, [pc, #8]	; (8007b1c <USBD_LL_CloseEP+0x18>)
 8007b14:	5c18      	ldrbls	r0, [r3, r0]
 8007b16:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 
  return usb_status;  
}
 8007b18:	bd08      	pop	{r3, pc}
 8007b1a:	bf00      	nop
 8007b1c:	0800a9bc 	.word	0x0800a9bc

08007b20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b20:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b22:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007b26:	f7fc f923 	bl	8003d70 <HAL_PCD_EP_SetStall>
 8007b2a:	2803      	cmp	r0, #3
 8007b2c:	bf9a      	itte	ls
 8007b2e:	4b02      	ldrls	r3, [pc, #8]	; (8007b38 <USBD_LL_StallEP+0x18>)
 8007b30:	5c18      	ldrbls	r0, [r3, r0]
 8007b32:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 8007b34:	bd08      	pop	{r3, pc}
 8007b36:	bf00      	nop
 8007b38:	0800a9bc 	.word	0x0800a9bc

08007b3c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b3c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b3e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007b42:	f7fc f953 	bl	8003dec <HAL_PCD_EP_ClrStall>
 8007b46:	2803      	cmp	r0, #3
 8007b48:	bf9a      	itte	ls
 8007b4a:	4b02      	ldrls	r3, [pc, #8]	; (8007b54 <USBD_LL_ClearStallEP+0x18>)
 8007b4c:	5c18      	ldrbls	r0, [r3, r0]
 8007b4e:	2002      	movhi	r0, #2
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
  
  return usb_status; 
}
 8007b50:	bd08      	pop	{r3, pc}
 8007b52:	bf00      	nop
 8007b54:	0800a9bc 	.word	0x0800a9bc

08007b58 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8007b58:	060b      	lsls	r3, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007b5a:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
  if((ep_addr & 0x80) == 0x80)
 8007b5e:	d406      	bmi.n	8007b6e <USBD_LL_IsStallEP+0x16>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007b60:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007b64:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8007b68:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 8007b6c:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007b6e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8007b72:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007b76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007b7a:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 8007b7e:	4770      	bx	lr

08007b80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007b80:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007b82:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007b86:	f7fc f827 	bl	8003bd8 <HAL_PCD_SetAddress>
 8007b8a:	2803      	cmp	r0, #3
 8007b8c:	bf9a      	itte	ls
 8007b8e:	4b02      	ldrls	r3, [pc, #8]	; (8007b98 <USBD_LL_SetUSBAddress+0x18>)
 8007b90:	5c18      	ldrbls	r0, [r3, r0]
 8007b92:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 8007b94:	bd08      	pop	{r3, pc}
 8007b96:	bf00      	nop
 8007b98:	0800a9bc 	.word	0x0800a9bc

08007b9c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007b9c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b9e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007ba2:	f7fc f8c1 	bl	8003d28 <HAL_PCD_EP_Transmit>
 8007ba6:	2803      	cmp	r0, #3
 8007ba8:	bf9a      	itte	ls
 8007baa:	4b02      	ldrls	r3, [pc, #8]	; (8007bb4 <USBD_LL_Transmit+0x18>)
 8007bac:	5c18      	ldrbls	r0, [r3, r0]
 8007bae:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
  
  return usb_status;    
}
 8007bb0:	bd08      	pop	{r3, pc}
 8007bb2:	bf00      	nop
 8007bb4:	0800a9bc 	.word	0x0800a9bc

08007bb8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007bb8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007bba:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007bbe:	f7fc f881 	bl	8003cc4 <HAL_PCD_EP_Receive>
 8007bc2:	2803      	cmp	r0, #3
 8007bc4:	bf9a      	itte	ls
 8007bc6:	4b02      	ldrls	r3, [pc, #8]	; (8007bd0 <USBD_LL_PrepareReceive+0x18>)
 8007bc8:	5c18      	ldrbls	r0, [r3, r0]
 8007bca:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
  
  return usb_status; 
}
 8007bcc:	bd08      	pop	{r3, pc}
 8007bce:	bf00      	nop
 8007bd0:	0800a9bc 	.word	0x0800a9bc

08007bd4 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007bd4:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8007bd8:	f7fc b89c 	b.w	8003d14 <HAL_PCD_EP_GetRxCount>

08007bdc <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007bdc:	2312      	movs	r3, #18
 8007bde:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8007be0:	4800      	ldr	r0, [pc, #0]	; (8007be4 <USBD_FS_DeviceDescriptor+0x8>)
 8007be2:	4770      	bx	lr
 8007be4:	2000014c 	.word	0x2000014c

08007be8 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007be8:	2304      	movs	r3, #4
 8007bea:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8007bec:	4800      	ldr	r0, [pc, #0]	; (8007bf0 <USBD_FS_LangIDStrDescriptor+0x8>)
 8007bee:	4770      	bx	lr
 8007bf0:	20000160 	.word	0x20000160

08007bf4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bf4:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007bf6:	4c04      	ldr	r4, [pc, #16]	; (8007c08 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8007bf8:	4804      	ldr	r0, [pc, #16]	; (8007c0c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8007bfa:	460a      	mov	r2, r1
 8007bfc:	4621      	mov	r1, r4
 8007bfe:	f7fe f881 	bl	8005d04 <USBD_GetString>
  return USBD_StrDesc;
}
 8007c02:	4620      	mov	r0, r4
 8007c04:	bd10      	pop	{r4, pc}
 8007c06:	bf00      	nop
 8007c08:	20005ae8 	.word	0x20005ae8
 8007c0c:	0800a9dc 	.word	0x0800a9dc

08007c10 <USBD_FS_ProductStrDescriptor>:
{
 8007c10:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c12:	4c04      	ldr	r4, [pc, #16]	; (8007c24 <USBD_FS_ProductStrDescriptor+0x14>)
 8007c14:	4804      	ldr	r0, [pc, #16]	; (8007c28 <USBD_FS_ProductStrDescriptor+0x18>)
 8007c16:	460a      	mov	r2, r1
 8007c18:	4621      	mov	r1, r4
 8007c1a:	f7fe f873 	bl	8005d04 <USBD_GetString>
}
 8007c1e:	4620      	mov	r0, r4
 8007c20:	bd10      	pop	{r4, pc}
 8007c22:	bf00      	nop
 8007c24:	20005ae8 	.word	0x20005ae8
 8007c28:	0800a9f0 	.word	0x0800a9f0

08007c2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c2c:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c2e:	4c04      	ldr	r4, [pc, #16]	; (8007c40 <USBD_FS_ConfigStrDescriptor+0x14>)
 8007c30:	4804      	ldr	r0, [pc, #16]	; (8007c44 <USBD_FS_ConfigStrDescriptor+0x18>)
 8007c32:	460a      	mov	r2, r1
 8007c34:	4621      	mov	r1, r4
 8007c36:	f7fe f865 	bl	8005d04 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	bd10      	pop	{r4, pc}
 8007c3e:	bf00      	nop
 8007c40:	20005ae8 	.word	0x20005ae8
 8007c44:	0800a9c0 	.word	0x0800a9c0

08007c48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c48:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c4a:	4c04      	ldr	r4, [pc, #16]	; (8007c5c <USBD_FS_InterfaceStrDescriptor+0x14>)
 8007c4c:	4804      	ldr	r0, [pc, #16]	; (8007c60 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8007c4e:	460a      	mov	r2, r1
 8007c50:	4621      	mov	r1, r4
 8007c52:	f7fe f857 	bl	8005d04 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8007c56:	4620      	mov	r0, r4
 8007c58:	bd10      	pop	{r4, pc}
 8007c5a:	bf00      	nop
 8007c5c:	20005ae8 	.word	0x20005ae8
 8007c60:	0800a9cc 	.word	0x0800a9cc

08007c64 <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007c64:	4a40      	ldr	r2, [pc, #256]	; (8007d68 <USBD_FS_SerialStrDescriptor+0x104>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007c66:	4b41      	ldr	r3, [pc, #260]	; (8007d6c <USBD_FS_SerialStrDescriptor+0x108>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007c68:	6812      	ldr	r2, [r2, #0]

  deviceserial0 += deviceserial2;
 8007c6a:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 8007c6c:	201a      	movs	r0, #26

  if (deviceserial0 != 0)
 8007c6e:	18d2      	adds	r2, r2, r3
  *length = USB_SIZ_STRING_SERIAL;
 8007c70:	8008      	strh	r0, [r1, #0]
  if (deviceserial0 != 0)
 8007c72:	d101      	bne.n	8007c78 <USBD_FS_SerialStrDescriptor+0x14>
}
 8007c74:	483e      	ldr	r0, [pc, #248]	; (8007d70 <USBD_FS_SerialStrDescriptor+0x10c>)
 8007c76:	4770      	bx	lr
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c78:	4b3e      	ldr	r3, [pc, #248]	; (8007d74 <USBD_FS_SerialStrDescriptor+0x110>)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 8007c7a:	0f10      	lsrs	r0, r2, #28
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c7c:	6819      	ldr	r1, [r3, #0]
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c7e:	4b3c      	ldr	r3, [pc, #240]	; (8007d70 <USBD_FS_SerialStrDescriptor+0x10c>)
    if (((value >> 28)) < 0xA)
 8007c80:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c82:	bf94      	ite	ls
 8007c84:	3030      	addls	r0, #48	; 0x30
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c86:	3037      	addhi	r0, #55	; 0x37
{
 8007c88:	b410      	push	{r4}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c8a:	7098      	strb	r0, [r3, #2]
    if (((value >> 28)) < 0xA)
 8007c8c:	f3c2 6003 	ubfx	r0, r2, #24, #4
 8007c90:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c92:	bf94      	ite	ls
 8007c94:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c96:	3037      	addhi	r0, #55	; 0x37
 8007c98:	7118      	strb	r0, [r3, #4]
    if (((value >> 28)) < 0xA)
 8007c9a:	f3c2 5003 	ubfx	r0, r2, #20, #4
 8007c9e:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ca0:	bf94      	ite	ls
 8007ca2:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ca4:	3037      	addhi	r0, #55	; 0x37
 8007ca6:	7198      	strb	r0, [r3, #6]
    if (((value >> 28)) < 0xA)
 8007ca8:	f3c2 4003 	ubfx	r0, r2, #16, #4
 8007cac:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8007cae:	bf94      	ite	ls
 8007cb0:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007cb2:	3037      	addhi	r0, #55	; 0x37
 8007cb4:	7218      	strb	r0, [r3, #8]
    if (((value >> 28)) < 0xA)
 8007cb6:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8007cba:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8007cbc:	bf94      	ite	ls
 8007cbe:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007cc0:	3037      	addhi	r0, #55	; 0x37
 8007cc2:	7298      	strb	r0, [r3, #10]
    if (((value >> 28)) < 0xA)
 8007cc4:	f3c2 2003 	ubfx	r0, r2, #8, #4
 8007cc8:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8007cca:	bf94      	ite	ls
 8007ccc:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007cce:	3037      	addhi	r0, #55	; 0x37
 8007cd0:	7318      	strb	r0, [r3, #12]
    if (((value >> 28)) < 0xA)
 8007cd2:	f3c2 1003 	ubfx	r0, r2, #4, #4
 8007cd6:	2809      	cmp	r0, #9
 8007cd8:	f002 020f 	and.w	r2, r2, #15
      pbuf[2 * idx] = (value >> 28) + '0';
 8007cdc:	bf94      	ite	ls
 8007cde:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ce0:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8007ce2:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ce4:	bf94      	ite	ls
 8007ce6:	3230      	addls	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ce8:	3237      	addhi	r2, #55	; 0x37
 8007cea:	741a      	strb	r2, [r3, #16]
    if (((value >> 28)) < 0xA)
 8007cec:	0f0a      	lsrs	r2, r1, #28
 8007cee:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8007cf0:	bf94      	ite	ls
 8007cf2:	3230      	addls	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007cf4:	3237      	addhi	r2, #55	; 0x37
 8007cf6:	749a      	strb	r2, [r3, #18]
    if (((value >> 28)) < 0xA)
 8007cf8:	f3c1 6203 	ubfx	r2, r1, #24, #4
 8007cfc:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8007cfe:	bf94      	ite	ls
 8007d00:	3230      	addls	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d02:	3237      	addhi	r2, #55	; 0x37
 8007d04:	751a      	strb	r2, [r3, #20]
    if (((value >> 28)) < 0xA)
 8007d06:	f3c1 5203 	ubfx	r2, r1, #20, #4
 8007d0a:	2a09      	cmp	r2, #9
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8007d0c:	f04f 0400 	mov.w	r4, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d10:	bf94      	ite	ls
 8007d12:	3230      	addls	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d14:	3237      	addhi	r2, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 8007d16:	70dc      	strb	r4, [r3, #3]
 8007d18:	2400      	movs	r4, #0
 8007d1a:	715c      	strb	r4, [r3, #5]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d1c:	7398      	strb	r0, [r3, #14]
    pbuf[2 * idx + 1] = 0;
 8007d1e:	2400      	movs	r4, #0
 8007d20:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d22:	759a      	strb	r2, [r3, #22]
    if (((value >> 28)) < 0xA)
 8007d24:	f3c1 4203 	ubfx	r2, r1, #16, #4
 8007d28:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 8007d2a:	71dc      	strb	r4, [r3, #7]
 8007d2c:	73d8      	strb	r0, [r3, #15]
 8007d2e:	f04f 0400 	mov.w	r4, #0
 8007d32:	f04f 0000 	mov.w	r0, #0
 8007d36:	725c      	strb	r4, [r3, #9]
 8007d38:	7458      	strb	r0, [r3, #17]
 8007d3a:	f04f 0400 	mov.w	r4, #0
 8007d3e:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d42:	bf94      	ite	ls
 8007d44:	3230      	addls	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d46:	3237      	addhi	r2, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 8007d48:	72dc      	strb	r4, [r3, #11]
 8007d4a:	74d8      	strb	r0, [r3, #19]
 8007d4c:	2400      	movs	r4, #0
 8007d4e:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d50:	761a      	strb	r2, [r3, #24]
    pbuf[2 * idx + 1] = 0;
 8007d52:	2100      	movs	r1, #0
 8007d54:	2200      	movs	r2, #0
 8007d56:	7558      	strb	r0, [r3, #21]
 8007d58:	735c      	strb	r4, [r3, #13]
 8007d5a:	75d9      	strb	r1, [r3, #23]
 8007d5c:	765a      	strb	r2, [r3, #25]
}
 8007d5e:	4804      	ldr	r0, [pc, #16]	; (8007d70 <USBD_FS_SerialStrDescriptor+0x10c>)
 8007d60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	1fff7a10 	.word	0x1fff7a10
 8007d6c:	1fff7a18 	.word	0x1fff7a18
 8007d70:	20000164 	.word	0x20000164
 8007d74:	1fff7a14 	.word	0x1fff7a14

08007d78 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8007d78:	b470      	push	{r4, r5, r6}
  uint32_t nsec_part = nsec % 1000000000UL;
 8007d7a:	680d      	ldr	r5, [r1, #0]
  uint32_t sec_part = nsec / 1000000000UL;
 8007d7c:	4b06      	ldr	r3, [pc, #24]	; (8007d98 <_ZN3ros16normalizeSecNSecERmS0_+0x20>)
  sec += sec_part;
 8007d7e:	6804      	ldr	r4, [r0, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8007d80:	4e06      	ldr	r6, [pc, #24]	; (8007d9c <_ZN3ros16normalizeSecNSecERmS0_+0x24>)
  uint32_t sec_part = nsec / 1000000000UL;
 8007d82:	0a6a      	lsrs	r2, r5, #9
 8007d84:	fba3 3202 	umull	r3, r2, r3, r2
 8007d88:	09d3      	lsrs	r3, r2, #7
  sec += sec_part;
 8007d8a:	441c      	add	r4, r3
  uint32_t nsec_part = nsec % 1000000000UL;
 8007d8c:	fb06 5313 	mls	r3, r6, r3, r5
  sec += sec_part;
 8007d90:	6004      	str	r4, [r0, #0]
  nsec = nsec_part;
 8007d92:	600b      	str	r3, [r1, #0]
}
 8007d94:	bc70      	pop	{r4, r5, r6}
 8007d96:	4770      	bx	lr
 8007d98:	00044b83 	.word	0x00044b83
 8007d9c:	3b9aca00 	.word	0x3b9aca00

08007da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007dd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007da4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007da6:	e003      	b.n	8007db0 <LoopCopyDataInit>

08007da8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007da8:	4b0c      	ldr	r3, [pc, #48]	; (8007ddc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007daa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007dac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007dae:	3104      	adds	r1, #4

08007db0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007db0:	480b      	ldr	r0, [pc, #44]	; (8007de0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007db2:	4b0c      	ldr	r3, [pc, #48]	; (8007de4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007db4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007db6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007db8:	d3f6      	bcc.n	8007da8 <CopyDataInit>
  ldr  r2, =_sbss
 8007dba:	4a0b      	ldr	r2, [pc, #44]	; (8007de8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007dbc:	e002      	b.n	8007dc4 <LoopFillZerobss>

08007dbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007dbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007dc0:	f842 3b04 	str.w	r3, [r2], #4

08007dc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007dc4:	4b09      	ldr	r3, [pc, #36]	; (8007dec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007dc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007dc8:	d3f9      	bcc.n	8007dbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007dca:	f7ff fd05 	bl	80077d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007dce:	f002 fbed 	bl	800a5ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007dd2:	f7ff f84d 	bl	8006e70 <main>
  bx  lr    
 8007dd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007dd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007ddc:	0800b210 	.word	0x0800b210
  ldr  r0, =_sdata
 8007de0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007de4:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8007de8:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8007dec:	20005cec 	.word	0x20005cec

08007df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007df0:	e7fe      	b.n	8007df0 <ADC_IRQHandler>
	...

08007df4 <_ZNK8std_msgs4Time9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8007df4:	6843      	ldr	r3, [r0, #4]
 8007df6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8007df8:	6843      	ldr	r3, [r0, #4]
 8007dfa:	0a1b      	lsrs	r3, r3, #8
 8007dfc:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8007dfe:	88c3      	ldrh	r3, [r0, #6]
 8007e00:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8007e02:	79c3      	ldrb	r3, [r0, #7]
 8007e04:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->data.sec);
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8007e06:	6883      	ldr	r3, [r0, #8]
 8007e08:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8007e0a:	6883      	ldr	r3, [r0, #8]
 8007e0c:	0a1b      	lsrs	r3, r3, #8
 8007e0e:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8007e10:	8943      	ldrh	r3, [r0, #10]
 8007e12:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8007e14:	7ac3      	ldrb	r3, [r0, #11]
 8007e16:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->data.nsec);
      return offset;
    }
 8007e18:	2008      	movs	r0, #8
 8007e1a:	4770      	bx	lr

08007e1c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8007e1c:	780b      	ldrb	r3, [r1, #0]
 8007e1e:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007e20:	784a      	ldrb	r2, [r1, #1]
 8007e22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007e26:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007e28:	788a      	ldrb	r2, [r1, #2]
 8007e2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e2e:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007e30:	78ca      	ldrb	r2, [r1, #3]
 8007e32:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007e36:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->data.sec);
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8007e38:	790b      	ldrb	r3, [r1, #4]
 8007e3a:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007e3c:	794a      	ldrb	r2, [r1, #5]
 8007e3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007e42:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007e44:	798a      	ldrb	r2, [r1, #6]
 8007e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e4a:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007e4c:	79ca      	ldrb	r2, [r1, #7]
 8007e4e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007e52:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->data.nsec);
     return offset;
    }
 8007e54:	2008      	movs	r0, #8
 8007e56:	4770      	bx	lr

08007e58 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8007e58:	4800      	ldr	r0, [pc, #0]	; (8007e5c <_ZN8std_msgs4Time7getTypeEv+0x4>)
 8007e5a:	4770      	bx	lr
 8007e5c:	0800af14 	.word	0x0800af14

08007e60 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8007e60:	4800      	ldr	r0, [pc, #0]	; (8007e64 <_ZN8std_msgs4Time6getMD5Ev+0x4>)
 8007e62:	4770      	bx	lr
 8007e64:	0800aef0 	.word	0x0800aef0

08007e68 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8007e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8007e6c:	780b      	ldrb	r3, [r1, #0]
 8007e6e:	8083      	strh	r3, [r0, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007e70:	784a      	ldrb	r2, [r1, #1]
 8007e72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007e76:	8083      	strh	r3, [r0, #4]
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
  {
    var = 0;
    for (size_t i = 0; i < sizeof(V); i++)
      var |= (arr[i] << (8 * i));
 8007e78:	790d      	ldrb	r5, [r1, #4]
 8007e7a:	78ca      	ldrb	r2, [r1, #3]
 8007e7c:	794b      	ldrb	r3, [r1, #5]
 8007e7e:	042d      	lsls	r5, r5, #16
    virtual int deserialize(unsigned char *inbuffer)
 8007e80:	4607      	mov	r7, r0
 8007e82:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8007e86:	7888      	ldrb	r0, [r1, #2]
 8007e88:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 8007e8c:	4305      	orrs	r5, r0
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8007e8e:	f105 0806 	add.w	r8, r5, #6
 8007e92:	f1b8 0f06 	cmp.w	r8, #6
    virtual int deserialize(unsigned char *inbuffer)
 8007e96:	460e      	mov	r6, r1
 8007e98:	f101 0405 	add.w	r4, r1, #5
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8007e9c:	d904      	bls.n	8007ea8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x40>
 8007e9e:	462a      	mov	r2, r5
 8007ea0:	3106      	adds	r1, #6
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f002 fbc1 	bl	800a62a <memmove>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_topic_name-1]=0;
 8007ea8:	1973      	adds	r3, r6, r5
 8007eaa:	2200      	movs	r2, #0
 8007eac:	715a      	strb	r2, [r3, #5]
      this->topic_name = (char *)(inbuffer + offset-1);
 8007eae:	60bc      	str	r4, [r7, #8]
 8007eb0:	79dc      	ldrb	r4, [r3, #7]
 8007eb2:	7a1a      	ldrb	r2, [r3, #8]
 8007eb4:	7a5b      	ldrb	r3, [r3, #9]
 8007eb6:	f816 0008 	ldrb.w	r0, [r6, r8]
 8007eba:	0224      	lsls	r4, r4, #8
 8007ebc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007ec0:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
      offset += length_topic_name;
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
      offset += 4;
 8007ec4:	f108 0804 	add.w	r8, r8, #4
 8007ec8:	4304      	orrs	r4, r0
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8007eca:	4444      	add	r4, r8
 8007ecc:	45a0      	cmp	r8, r4
 8007ece:	d20f      	bcs.n	8007ef0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x88>
          inbuffer[k-1]=inbuffer[k];
 8007ed0:	1b63      	subs	r3, r4, r5
 8007ed2:	3b0a      	subs	r3, #10
 8007ed4:	f105 020b 	add.w	r2, r5, #11
 8007ed8:	f105 010a 	add.w	r1, r5, #10
 8007edc:	f105 0009 	add.w	r0, r5, #9
 8007ee0:	4294      	cmp	r4, r2
 8007ee2:	bf2c      	ite	cs
 8007ee4:	461a      	movcs	r2, r3
 8007ee6:	2201      	movcc	r2, #1
 8007ee8:	4431      	add	r1, r6
 8007eea:	4430      	add	r0, r6
 8007eec:	f002 fb9d 	bl	800a62a <memmove>
      }
      inbuffer[offset+length_message_type-1]=0;
 8007ef0:	1933      	adds	r3, r6, r4
      this->message_type = (char *)(inbuffer + offset-1);
 8007ef2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007ef6:	eb06 0208 	add.w	r2, r6, r8
      inbuffer[offset+length_message_type-1]=0;
 8007efa:	2100      	movs	r1, #0
 8007efc:	f803 1c01 	strb.w	r1, [r3, #-1]
      this->message_type = (char *)(inbuffer + offset-1);
 8007f00:	60fa      	str	r2, [r7, #12]
 8007f02:	785d      	ldrb	r5, [r3, #1]
 8007f04:	789a      	ldrb	r2, [r3, #2]
 8007f06:	78db      	ldrb	r3, [r3, #3]
 8007f08:	5d30      	ldrb	r0, [r6, r4]
 8007f0a:	022d      	lsls	r5, r5, #8
 8007f0c:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
 8007f10:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
      offset += length_message_type;
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
      offset += 4;
 8007f14:	f104 0804 	add.w	r8, r4, #4
 8007f18:	4305      	orrs	r5, r0
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8007f1a:	4445      	add	r5, r8
 8007f1c:	45a8      	cmp	r8, r5
 8007f1e:	d20c      	bcs.n	8007f3a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xd2>
          inbuffer[k-1]=inbuffer[k];
 8007f20:	1b2b      	subs	r3, r5, r4
 8007f22:	3b04      	subs	r3, #4
 8007f24:	1d62      	adds	r2, r4, #5
 8007f26:	1ce0      	adds	r0, r4, #3
 8007f28:	4295      	cmp	r5, r2
 8007f2a:	bf2c      	ite	cs
 8007f2c:	461a      	movcs	r2, r3
 8007f2e:	2201      	movcc	r2, #1
 8007f30:	4430      	add	r0, r6
 8007f32:	eb06 0108 	add.w	r1, r6, r8
 8007f36:	f002 fb78 	bl	800a62a <memmove>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8007f3a:	1972      	adds	r2, r6, r5
      this->md5sum = (char *)(inbuffer + offset-1);
 8007f3c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007f40:	eb06 0308 	add.w	r3, r6, r8
      inbuffer[offset+length_md5sum-1]=0;
 8007f44:	2100      	movs	r1, #0
 8007f46:	f802 1c01 	strb.w	r1, [r2, #-1]
      this->md5sum = (char *)(inbuffer + offset-1);
 8007f4a:	613b      	str	r3, [r7, #16]
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007f4c:	7893      	ldrb	r3, [r2, #2]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007f4e:	7850      	ldrb	r0, [r2, #1]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007f50:	5d71      	ldrb	r1, [r6, r5]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007f52:	78d2      	ldrb	r2, [r2, #3]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007f54:	041b      	lsls	r3, r3, #16
 8007f56:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8007f5a:	430b      	orrs	r3, r1
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007f5c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      this->buffer_size = u_buffer_size.real;
      offset += sizeof(this->buffer_size);
 8007f60:	1d28      	adds	r0, r5, #4
      this->buffer_size = u_buffer_size.real;
 8007f62:	617b      	str	r3, [r7, #20]
     return offset;
    }
 8007f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007f68 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8007f68:	4800      	ldr	r0, [pc, #0]	; (8007f6c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x4>)
 8007f6a:	4770      	bx	lr
 8007f6c:	0800ae30 	.word	0x0800ae30

08007f70 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8007f70:	4800      	ldr	r0, [pc, #0]	; (8007f74 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x4>)
 8007f72:	4770      	bx	lr
 8007f74:	0800ae0c 	.word	0x0800ae0c

08007f78 <_ZN14rosserial_msgs3Log11deserializeEPh>:
      memcpy(outbuffer + offset, this->msg, length_msg);
      offset += length_msg;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8007f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8007f7a:	460b      	mov	r3, r1
    virtual int deserialize(unsigned char *inbuffer)
 8007f7c:	460d      	mov	r5, r1
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8007f7e:	f813 2b04 	ldrb.w	r2, [r3], #4
 8007f82:	7102      	strb	r2, [r0, #4]
 8007f84:	78cc      	ldrb	r4, [r1, #3]
 8007f86:	786a      	ldrb	r2, [r5, #1]
    virtual int deserialize(unsigned char *inbuffer)
 8007f88:	4606      	mov	r6, r0
 8007f8a:	7888      	ldrb	r0, [r1, #2]
 8007f8c:	7909      	ldrb	r1, [r1, #4]
 8007f8e:	0424      	lsls	r4, r4, #16
 8007f90:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8007f94:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8007f98:	4314      	orrs	r4, r2
      offset += sizeof(this->level);
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8007f9a:	1d67      	adds	r7, r4, #5
 8007f9c:	2f05      	cmp	r7, #5
 8007f9e:	d905      	bls.n	8007fac <_ZN14rosserial_msgs3Log11deserializeEPh+0x34>
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	4622      	mov	r2, r4
 8007fa4:	1d69      	adds	r1, r5, #5
 8007fa6:	f002 fb40 	bl	800a62a <memmove>
 8007faa:	4603      	mov	r3, r0
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_msg-1]=0;
 8007fac:	442c      	add	r4, r5
 8007fae:	2200      	movs	r2, #0
 8007fb0:	7122      	strb	r2, [r4, #4]
      this->msg = (char *)(inbuffer + offset-1);
      offset += length_msg;
     return offset;
    }
 8007fb2:	4638      	mov	r0, r7
      this->msg = (char *)(inbuffer + offset-1);
 8007fb4:	60b3      	str	r3, [r6, #8]
    }
 8007fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007fb8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8007fb8:	4800      	ldr	r0, [pc, #0]	; (8007fbc <_ZN14rosserial_msgs3Log7getTypeEv+0x4>)
 8007fba:	4770      	bx	lr
 8007fbc:	0800adf8 	.word	0x0800adf8

08007fc0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8007fc0:	4800      	ldr	r0, [pc, #0]	; (8007fc4 <_ZN14rosserial_msgs3Log6getMD5Ev+0x4>)
 8007fc2:	4770      	bx	lr
 8007fc4:	0800add4 	.word	0x0800add4

08007fc8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }

    const char * getType(){ return REQUESTPARAM; };
 8007fc8:	4800      	ldr	r0, [pc, #0]	; (8007fcc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x4>)
 8007fca:	4770      	bx	lr
 8007fcc:	0800a95c 	.word	0x0800a95c

08007fd0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8007fd0:	4800      	ldr	r0, [pc, #0]	; (8007fd4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x4>)
 8007fd2:	4770      	bx	lr
 8007fd4:	0800adb0 	.word	0x0800adb0

08007fd8 <_ZNK8std_msgs4Byte9serializeEPh>:
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8007fd8:	7903      	ldrb	r3, [r0, #4]
 8007fda:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
      return offset;
    }
 8007fdc:	2001      	movs	r0, #1
 8007fde:	4770      	bx	lr

08007fe0 <_ZN8std_msgs4Byte11deserializeEPh>:
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
      this->data = u_data.real;
 8007fe0:	780b      	ldrb	r3, [r1, #0]
 8007fe2:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
 8007fe4:	2001      	movs	r0, #1
 8007fe6:	4770      	bx	lr

08007fe8 <_ZN8std_msgs4Byte7getTypeEv>:

    const char * getType(){ return "std_msgs/Byte"; };
 8007fe8:	4800      	ldr	r0, [pc, #0]	; (8007fec <_ZN8std_msgs4Byte7getTypeEv+0x4>)
 8007fea:	4770      	bx	lr
 8007fec:	0800aeac 	.word	0x0800aeac

08007ff0 <_ZN8std_msgs4Byte6getMD5Ev>:
    const char * getMD5(){ return "ad736a2e8818154c487bb80fe42ce43b"; };
 8007ff0:	4800      	ldr	r0, [pc, #0]	; (8007ff4 <_ZN8std_msgs4Byte6getMD5Ev+0x4>)
 8007ff2:	4770      	bx	lr
 8007ff4:	0800ae88 	.word	0x0800ae88

08007ff8 <_ZN8std_msgs6String11deserializeEPh>:
      memcpy(outbuffer + offset, this->data, length_data);
      offset += length_data;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8007ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ffa:	460d      	mov	r5, r1
 8007ffc:	788c      	ldrb	r4, [r1, #2]
 8007ffe:	7849      	ldrb	r1, [r1, #1]
 8008000:	78ea      	ldrb	r2, [r5, #3]
 8008002:	782b      	ldrb	r3, [r5, #0]
 8008004:	0424      	lsls	r4, r4, #16
 8008006:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
 800800a:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
 800800e:	431c      	orrs	r4, r3
    {
      int offset = 0;
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8008010:	1d26      	adds	r6, r4, #4
 8008012:	2e04      	cmp	r6, #4
    virtual int deserialize(unsigned char *inbuffer)
 8008014:	4607      	mov	r7, r0
 8008016:	f105 0303 	add.w	r3, r5, #3
      for(unsigned int k= offset; k< offset+length_data; ++k){
 800801a:	d905      	bls.n	8008028 <_ZN8std_msgs6String11deserializeEPh+0x30>
 800801c:	4618      	mov	r0, r3
 800801e:	4622      	mov	r2, r4
 8008020:	1d29      	adds	r1, r5, #4
 8008022:	f002 fb02 	bl	800a62a <memmove>
 8008026:	4603      	mov	r3, r0
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_data-1]=0;
 8008028:	442c      	add	r4, r5
 800802a:	2200      	movs	r2, #0
 800802c:	70e2      	strb	r2, [r4, #3]
      this->data = (char *)(inbuffer + offset-1);
      offset += length_data;
     return offset;
    }
 800802e:	4630      	mov	r0, r6
      this->data = (char *)(inbuffer + offset-1);
 8008030:	607b      	str	r3, [r7, #4]
    }
 8008032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008034 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8008034:	4800      	ldr	r0, [pc, #0]	; (8008038 <_ZN8std_msgs6String7getTypeEv+0x4>)
 8008036:	4770      	bx	lr
 8008038:	0800af48 	.word	0x0800af48

0800803c <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 800803c:	4800      	ldr	r0, [pc, #0]	; (8008040 <_ZN8std_msgs6String6getMD5Ev+0x4>)
 800803e:	4770      	bx	lr
 8008040:	0800af24 	.word	0x0800af24

08008044 <_ZNK8std_msgs4Int89serializeEPh>:
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8008044:	7903      	ldrb	r3, [r0, #4]
 8008046:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
      return offset;
    }
 8008048:	2001      	movs	r0, #1
 800804a:	4770      	bx	lr

0800804c <_ZN8std_msgs4Int811deserializeEPh>:
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
      this->data = u_data.real;
 800804c:	780b      	ldrb	r3, [r1, #0]
 800804e:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
 8008050:	2001      	movs	r0, #1
 8008052:	4770      	bx	lr

08008054 <_ZN8std_msgs4Int87getTypeEv>:

    const char * getType(){ return "std_msgs/Int8"; };
 8008054:	4800      	ldr	r0, [pc, #0]	; (8008058 <_ZN8std_msgs4Int87getTypeEv+0x4>)
 8008056:	4770      	bx	lr
 8008058:	0800aee0 	.word	0x0800aee0

0800805c <_ZN8std_msgs4Int86getMD5Ev>:
    const char * getMD5(){ return "27ffa0c9c4b8fb8492252bcad9e5c57b"; };
 800805c:	4800      	ldr	r0, [pc, #0]	; (8008060 <_ZN8std_msgs4Int86getMD5Ev+0x4>)
 800805e:	4770      	bx	lr
 8008060:	0800aebc 	.word	0x0800aebc

08008064 <_ZNK8std_msgs6UInt329serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 8008064:	6843      	ldr	r3, [r0, #4]
 8008066:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->data >> (8 * 1)) & 0xFF;
 8008068:	6843      	ldr	r3, [r0, #4]
 800806a:	0a1b      	lsrs	r3, r3, #8
 800806c:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->data >> (8 * 2)) & 0xFF;
 800806e:	88c3      	ldrh	r3, [r0, #6]
 8008070:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->data >> (8 * 3)) & 0xFF;
 8008072:	79c3      	ldrb	r3, [r0, #7]
 8008074:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->data);
      return offset;
    }
 8008076:	2004      	movs	r0, #4
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop

0800807c <_ZN8std_msgs6UInt3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data =  ((uint32_t) (*(inbuffer + offset)));
 800807c:	780b      	ldrb	r3, [r1, #0]
 800807e:	6043      	str	r3, [r0, #4]
      this->data |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8008080:	784a      	ldrb	r2, [r1, #1]
 8008082:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008086:	6043      	str	r3, [r0, #4]
      this->data |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008088:	788a      	ldrb	r2, [r1, #2]
 800808a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800808e:	6043      	str	r3, [r0, #4]
      this->data |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008090:	78ca      	ldrb	r2, [r1, #3]
 8008092:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008096:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
 8008098:	2004      	movs	r0, #4
 800809a:	4770      	bx	lr

0800809c <_ZN8std_msgs6UInt327getTypeEv>:

    const char * getType(){ return "std_msgs/UInt32"; };
 800809c:	4800      	ldr	r0, [pc, #0]	; (80080a0 <_ZN8std_msgs6UInt327getTypeEv+0x4>)
 800809e:	4770      	bx	lr
 80080a0:	0800af7c 	.word	0x0800af7c

080080a4 <_ZN8std_msgs6UInt326getMD5Ev>:
    const char * getMD5(){ return "304a39449588c7f8ce2df6e8001c5fce"; };
 80080a4:	4800      	ldr	r0, [pc, #0]	; (80080a8 <_ZN8std_msgs6UInt326getMD5Ev+0x4>)
 80080a6:	4770      	bx	lr
 80080a8:	0800af58 	.word	0x0800af58

080080ac <_ZN13geometry_msgs7Vector37getTypeEv>:
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
     return offset;
    }

    const char * getType(){ return "geometry_msgs/Vector3"; };
 80080ac:	4800      	ldr	r0, [pc, #0]	; (80080b0 <_ZN13geometry_msgs7Vector37getTypeEv+0x4>)
 80080ae:	4770      	bx	lr
 80080b0:	0800ad98 	.word	0x0800ad98

080080b4 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 80080b4:	4800      	ldr	r0, [pc, #0]	; (80080b8 <_ZN13geometry_msgs7Vector36getMD5Ev+0x4>)
 80080b6:	4770      	bx	lr
 80080b8:	0800ad74 	.word	0x0800ad74

080080bc <rpm_right_subCb>:
}

extern "C" void rpm_right_subCb(const std_msgs::Int8& msg)
{
	//speedDataRight = 0;
	if (msg.data >= 6) {
 80080bc:	f990 3004 	ldrsb.w	r3, [r0, #4]
 80080c0:	2b05      	cmp	r3, #5
 80080c2:	dc0c      	bgt.n	80080de <rpm_right_subCb+0x22>
		speedDataRight = msg.data;
		sideDataRight = 1;
	}
	else if (msg.data <= -6) {
 80080c4:	1d5a      	adds	r2, r3, #5
 80080c6:	db03      	blt.n	80080d0 <rpm_right_subCb+0x14>
		speedDataRight = -(msg.data);
		sideDataRight = 0;
	}
	else {
		speedDataRight = 0;
 80080c8:	4b08      	ldr	r3, [pc, #32]	; (80080ec <rpm_right_subCb+0x30>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	701a      	strb	r2, [r3, #0]
 80080ce:	4770      	bx	lr
		speedDataRight = -(msg.data);
 80080d0:	4806      	ldr	r0, [pc, #24]	; (80080ec <rpm_right_subCb+0x30>)
		sideDataRight = 0;
 80080d2:	4a07      	ldr	r2, [pc, #28]	; (80080f0 <rpm_right_subCb+0x34>)
		speedDataRight = -(msg.data);
 80080d4:	425b      	negs	r3, r3
		sideDataRight = 0;
 80080d6:	2100      	movs	r1, #0
		speedDataRight = -(msg.data);
 80080d8:	7003      	strb	r3, [r0, #0]
		sideDataRight = 0;
 80080da:	7011      	strb	r1, [r2, #0]
 80080dc:	4770      	bx	lr
		speedDataRight = msg.data;
 80080de:	4903      	ldr	r1, [pc, #12]	; (80080ec <rpm_right_subCb+0x30>)
		sideDataRight = 1;
 80080e0:	4a03      	ldr	r2, [pc, #12]	; (80080f0 <rpm_right_subCb+0x34>)
		speedDataRight = msg.data;
 80080e2:	700b      	strb	r3, [r1, #0]
		sideDataRight = 1;
 80080e4:	2301      	movs	r3, #1
 80080e6:	7013      	strb	r3, [r2, #0]
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	20004bac 	.word	0x20004bac
 80080f0:	20004934 	.word	0x20004934

080080f4 <rpm_left_subCb>:
}

extern "C" void rpm_left_subCb(const std_msgs::Int8& msg)
{
	//speedDataLeft = 0;
	if (msg.data >= 6) {
 80080f4:	f990 3004 	ldrsb.w	r3, [r0, #4]
 80080f8:	2b05      	cmp	r3, #5
 80080fa:	dc0c      	bgt.n	8008116 <rpm_left_subCb+0x22>
		speedDataLeft = msg.data;
		sideDataLeft = 0;
	}
	else if (msg.data <= -6) {
 80080fc:	1d5a      	adds	r2, r3, #5
 80080fe:	db03      	blt.n	8008108 <rpm_left_subCb+0x14>
		speedDataLeft = -(msg.data);
		sideDataLeft = 1;
	}
	else {
		speedDataLeft = 0;
 8008100:	4b08      	ldr	r3, [pc, #32]	; (8008124 <rpm_left_subCb+0x30>)
 8008102:	2200      	movs	r2, #0
 8008104:	701a      	strb	r2, [r3, #0]
 8008106:	4770      	bx	lr
		speedDataLeft = -(msg.data);
 8008108:	4806      	ldr	r0, [pc, #24]	; (8008124 <rpm_left_subCb+0x30>)
		sideDataLeft = 1;
 800810a:	4a07      	ldr	r2, [pc, #28]	; (8008128 <rpm_left_subCb+0x34>)
		speedDataLeft = -(msg.data);
 800810c:	425b      	negs	r3, r3
		sideDataLeft = 1;
 800810e:	2101      	movs	r1, #1
		speedDataLeft = -(msg.data);
 8008110:	7003      	strb	r3, [r0, #0]
		sideDataLeft = 1;
 8008112:	7011      	strb	r1, [r2, #0]
 8008114:	4770      	bx	lr
		speedDataLeft = msg.data;
 8008116:	4903      	ldr	r1, [pc, #12]	; (8008124 <rpm_left_subCb+0x30>)
		sideDataLeft = 0;
 8008118:	4a03      	ldr	r2, [pc, #12]	; (8008128 <rpm_left_subCb+0x34>)
		speedDataLeft = msg.data;
 800811a:	700b      	strb	r3, [r1, #0]
		sideDataLeft = 0;
 800811c:	2300      	movs	r3, #0
 800811e:	7013      	strb	r3, [r2, #0]
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	20004990 	.word	0x20004990
 8008128:	20004be2 	.word	0x20004be2

0800812c <messageSpeed>:
{
	//sideData = msg.data;
}

extern "C" void messageSpeed(const std_msgs::Byte& msg)
{
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop

08008130 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE8callbackEPh>:
      this->data = u_data.real;
 8008130:	780b      	ldrb	r3, [r1, #0]
 8008132:	7403      	strb	r3, [r0, #16]
  };

  virtual void callback(unsigned char* data)
  {
    msg.deserialize(data);
    this->cb_(msg);
 8008134:	6943      	ldr	r3, [r0, #20]
 8008136:	300c      	adds	r0, #12
 8008138:	4718      	bx	r3
 800813a:	bf00      	nop

0800813c <_ZN3ros10SubscriberIN8std_msgs4Int8EvE15getEndpointTypeEv>:
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
  {
    return endpoint_;
  }
 800813c:	6980      	ldr	r0, [r0, #24]
 800813e:	4770      	bx	lr

08008140 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE10getMsgTypeEv>:
  }
 8008140:	4800      	ldr	r0, [pc, #0]	; (8008144 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE10getMsgTypeEv+0x4>)
 8008142:	4770      	bx	lr
 8008144:	0800aee0 	.word	0x0800aee0

08008148 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE9getMsgMD5Ev>:
  }
 8008148:	4800      	ldr	r0, [pc, #0]	; (800814c <_ZN3ros10SubscriberIN8std_msgs4Int8EvE9getMsgMD5Ev+0x4>)
 800814a:	4770      	bx	lr
 800814c:	0800aebc 	.word	0x0800aebc

08008150 <_ZN3ros10SubscriberIN8std_msgs4ByteEvE8callbackEPh>:
      this->data = u_data.real;
 8008150:	780b      	ldrb	r3, [r1, #0]
 8008152:	7403      	strb	r3, [r0, #16]
    this->cb_(msg);
 8008154:	6943      	ldr	r3, [r0, #20]
 8008156:	300c      	adds	r0, #12
 8008158:	4718      	bx	r3
 800815a:	bf00      	nop

0800815c <_ZN3ros10SubscriberIN8std_msgs4ByteEvE15getEndpointTypeEv>:
  }
 800815c:	6980      	ldr	r0, [r0, #24]
 800815e:	4770      	bx	lr

08008160 <_ZN3ros10SubscriberIN8std_msgs4ByteEvE10getMsgTypeEv>:
  }
 8008160:	4800      	ldr	r0, [pc, #0]	; (8008164 <_ZN3ros10SubscriberIN8std_msgs4ByteEvE10getMsgTypeEv+0x4>)
 8008162:	4770      	bx	lr
 8008164:	0800aeac 	.word	0x0800aeac

08008168 <_ZN3ros10SubscriberIN8std_msgs4ByteEvE9getMsgMD5Ev>:
  }
 8008168:	4800      	ldr	r0, [pc, #0]	; (800816c <_ZN3ros10SubscriberIN8std_msgs4ByteEvE9getMsgMD5Ev+0x4>)
 800816a:	4770      	bx	lr
 800816c:	0800ae88 	.word	0x0800ae88

08008170 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:

  /* Are we connected to the PC? */
  virtual bool connected()
  {
    return configured_;
  };
 8008170:	f890 04f4 	ldrb.w	r0, [r0, #1268]	; 0x4f4
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop

08008178 <_ZNK8std_msgs6String9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 8008178:	b570      	push	{r4, r5, r6, lr}
 800817a:	4606      	mov	r6, r0
      uint32_t length_data = strlen(this->data);
 800817c:	6840      	ldr	r0, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const
 800817e:	460d      	mov	r5, r1
      uint32_t length_data = strlen(this->data);
 8008180:	f7f8 f830 	bl	80001e4 <strlen>
      arr[i] = (var >> (8 * i));
 8008184:	0e03      	lsrs	r3, r0, #24
 8008186:	0a01      	lsrs	r1, r0, #8
 8008188:	0c02      	lsrs	r2, r0, #16
 800818a:	4604      	mov	r4, r0
 800818c:	7028      	strb	r0, [r5, #0]
 800818e:	70aa      	strb	r2, [r5, #2]
 8008190:	7069      	strb	r1, [r5, #1]
 8008192:	70eb      	strb	r3, [r5, #3]
      memcpy(outbuffer + offset, this->data, length_data);
 8008194:	6871      	ldr	r1, [r6, #4]
 8008196:	1d28      	adds	r0, r5, #4
 8008198:	4622      	mov	r2, r4
 800819a:	f002 fa3b 	bl	800a614 <memcpy>
    }
 800819e:	1d20      	adds	r0, r4, #4
 80081a0:	bd70      	pop	{r4, r5, r6, pc}
 80081a2:	bf00      	nop

080081a4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80081a4:	6843      	ldr	r3, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const
 80081a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80081aa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80081ac:	6843      	ldr	r3, [r0, #4]
 80081ae:	0a1b      	lsrs	r3, r3, #8
 80081b0:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80081b2:	88c3      	ldrh	r3, [r0, #6]
 80081b4:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80081b6:	79c3      	ldrb	r3, [r0, #7]
 80081b8:	70cb      	strb	r3, [r1, #3]
      for( uint32_t i = 0; i < ints_length; i++){
 80081ba:	6843      	ldr	r3, [r0, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f000 8084 	beq.w	80082ca <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x126>
 80081c2:	460a      	mov	r2, r1
 80081c4:	2500      	movs	r5, #0
 80081c6:	2604      	movs	r6, #4
      u_intsi.real = this->ints[i];
 80081c8:	68c3      	ldr	r3, [r0, #12]
 80081ca:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80081ce:	7113      	strb	r3, [r2, #4]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80081d0:	0c1c      	lsrs	r4, r3, #16
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80081d2:	0a1f      	lsrs	r7, r3, #8
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80081d4:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80081d6:	7194      	strb	r4, [r2, #6]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80081d8:	7157      	strb	r7, [r2, #5]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80081da:	71d3      	strb	r3, [r2, #7]
      for( uint32_t i = 0; i < ints_length; i++){
 80081dc:	6843      	ldr	r3, [r0, #4]
 80081de:	3501      	adds	r5, #1
 80081e0:	42ab      	cmp	r3, r5
 80081e2:	4634      	mov	r4, r6
 80081e4:	f102 0204 	add.w	r2, r2, #4
 80081e8:	f106 0604 	add.w	r6, r6, #4
 80081ec:	d8ec      	bhi.n	80081c8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x24>
 80081ee:	f104 0708 	add.w	r7, r4, #8
 80081f2:	f104 0a05 	add.w	sl, r4, #5
 80081f6:	f104 0906 	add.w	r9, r4, #6
 80081fa:	f104 0807 	add.w	r8, r4, #7
 80081fe:	f104 0c09 	add.w	ip, r4, #9
 8008202:	f104 0e0a 	add.w	lr, r4, #10
 8008206:	f104 050b 	add.w	r5, r4, #11
 800820a:	463a      	mov	r2, r7
 800820c:	340c      	adds	r4, #12
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800820e:	6903      	ldr	r3, [r0, #16]
 8008210:	558b      	strb	r3, [r1, r6]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8008212:	6903      	ldr	r3, [r0, #16]
 8008214:	0a1b      	lsrs	r3, r3, #8
 8008216:	f801 300a 	strb.w	r3, [r1, sl]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800821a:	8a43      	ldrh	r3, [r0, #18]
 800821c:	f801 3009 	strb.w	r3, [r1, r9]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8008220:	7cc3      	ldrb	r3, [r0, #19]
 8008222:	f801 3008 	strb.w	r3, [r1, r8]
      for( uint32_t i = 0; i < floats_length; i++){
 8008226:	6903      	ldr	r3, [r0, #16]
 8008228:	b1f3      	cbz	r3, 8008268 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xc4>
 800822a:	2500      	movs	r5, #0
      u_floatsi.real = this->floats[i];
 800822c:	6983      	ldr	r3, [r0, #24]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800822e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008232:	2200      	movs	r2, #0
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8008234:	0a1c      	lsrs	r4, r3, #8
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8008236:	f363 0207 	bfi	r2, r3, #0, #8
 800823a:	f364 220f 	bfi	r2, r4, #8, #8
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800823e:	0c1c      	lsrs	r4, r3, #16
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8008240:	f364 4217 	bfi	r2, r4, #16, #8
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8008244:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8008246:	f363 621f 	bfi	r2, r3, #24, #8
 800824a:	51ca      	str	r2, [r1, r7]
      for( uint32_t i = 0; i < floats_length; i++){
 800824c:	6903      	ldr	r3, [r0, #16]
 800824e:	3501      	adds	r5, #1
 8008250:	42ab      	cmp	r3, r5
 8008252:	463c      	mov	r4, r7
 8008254:	f107 0704 	add.w	r7, r7, #4
 8008258:	d8e8      	bhi.n	800822c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x88>
 800825a:	f104 0c05 	add.w	ip, r4, #5
 800825e:	f104 0e06 	add.w	lr, r4, #6
 8008262:	1de5      	adds	r5, r4, #7
 8008264:	463a      	mov	r2, r7
 8008266:	3408      	adds	r4, #8
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8008268:	69c3      	ldr	r3, [r0, #28]
 800826a:	548b      	strb	r3, [r1, r2]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800826c:	69c3      	ldr	r3, [r0, #28]
 800826e:	0a1b      	lsrs	r3, r3, #8
 8008270:	f801 300c 	strb.w	r3, [r1, ip]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8008274:	8bc3      	ldrh	r3, [r0, #30]
 8008276:	f801 300e 	strb.w	r3, [r1, lr]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800827a:	7fc3      	ldrb	r3, [r0, #31]
 800827c:	554b      	strb	r3, [r1, r5]
      for( uint32_t i = 0; i < strings_length; i++){
 800827e:	69c3      	ldr	r3, [r0, #28]
 8008280:	b303      	cbz	r3, 80082c4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x120>
 8008282:	4688      	mov	r8, r1
 8008284:	4607      	mov	r7, r0
 8008286:	2600      	movs	r6, #0
      uint32_t length_stringsi = strlen(this->strings[i]);
 8008288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800828e:	f7f7 ffa9 	bl	80001e4 <strlen>
 8008292:	eb08 0304 	add.w	r3, r8, r4
 8008296:	4605      	mov	r5, r0
 8008298:	f808 0004 	strb.w	r0, [r8, r4]
 800829c:	0c29      	lsrs	r1, r5, #16
 800829e:	0a00      	lsrs	r0, r0, #8
 80082a0:	0e2a      	lsrs	r2, r5, #24
 80082a2:	7058      	strb	r0, [r3, #1]
 80082a4:	70da      	strb	r2, [r3, #3]
 80082a6:	7099      	strb	r1, [r3, #2]
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80082a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      offset += 4;
 80082aa:	3404      	adds	r4, #4
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80082ac:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80082b0:	eb08 0004 	add.w	r0, r8, r4
 80082b4:	462a      	mov	r2, r5
 80082b6:	f002 f9ad 	bl	800a614 <memcpy>
      for( uint32_t i = 0; i < strings_length; i++){
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	3601      	adds	r6, #1
 80082be:	42b3      	cmp	r3, r6
      offset += length_stringsi;
 80082c0:	442c      	add	r4, r5
      for( uint32_t i = 0; i < strings_length; i++){
 80082c2:	d8e1      	bhi.n	8008288 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xe4>
    }
 80082c4:	4620      	mov	r0, r4
 80082c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      for( uint32_t i = 0; i < ints_length; i++){
 80082ca:	2208      	movs	r2, #8
 80082cc:	4617      	mov	r7, r2
 80082ce:	240c      	movs	r4, #12
 80082d0:	250b      	movs	r5, #11
 80082d2:	f04f 0e0a 	mov.w	lr, #10
 80082d6:	f04f 0c09 	mov.w	ip, #9
 80082da:	f04f 0807 	mov.w	r8, #7
 80082de:	f04f 0906 	mov.w	r9, #6
 80082e2:	f04f 0a05 	mov.w	sl, #5
 80082e6:	2604      	movs	r6, #4
 80082e8:	e791      	b.n	800820e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x6a>
 80082ea:	bf00      	nop

080082ec <_ZNK14rosserial_msgs3Log9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 80082ec:	b570      	push	{r4, r5, r6, lr}
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80082ee:	7903      	ldrb	r3, [r0, #4]
 80082f0:	700b      	strb	r3, [r1, #0]
    virtual int serialize(unsigned char *outbuffer) const
 80082f2:	4606      	mov	r6, r0
      uint32_t length_msg = strlen(this->msg);
 80082f4:	6880      	ldr	r0, [r0, #8]
    virtual int serialize(unsigned char *outbuffer) const
 80082f6:	460d      	mov	r5, r1
      uint32_t length_msg = strlen(this->msg);
 80082f8:	f7f7 ff74 	bl	80001e4 <strlen>
 80082fc:	2300      	movs	r3, #0
 80082fe:	0a02      	lsrs	r2, r0, #8
 8008300:	f360 0307 	bfi	r3, r0, #0, #8
 8008304:	f362 230f 	bfi	r3, r2, #8, #8
 8008308:	0c02      	lsrs	r2, r0, #16
 800830a:	f362 4317 	bfi	r3, r2, #16, #8
 800830e:	0e02      	lsrs	r2, r0, #24
 8008310:	f362 631f 	bfi	r3, r2, #24, #8
 8008314:	4604      	mov	r4, r0
 8008316:	f8c5 3001 	str.w	r3, [r5, #1]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800831a:	68b1      	ldr	r1, [r6, #8]
 800831c:	1d68      	adds	r0, r5, #5
 800831e:	4622      	mov	r2, r4
 8008320:	f002 f978 	bl	800a614 <memcpy>
    }
 8008324:	1d60      	adds	r0, r4, #5
 8008326:	bd70      	pop	{r4, r5, r6, pc}

08008328 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8008328:	8883      	ldrh	r3, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const
 800832a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800832e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8008330:	8883      	ldrh	r3, [r0, #4]
 8008332:	0a1b      	lsrs	r3, r3, #8
 8008334:	704b      	strb	r3, [r1, #1]
    virtual int serialize(unsigned char *outbuffer) const
 8008336:	4607      	mov	r7, r0
      uint32_t length_topic_name = strlen(this->topic_name);
 8008338:	6880      	ldr	r0, [r0, #8]
    virtual int serialize(unsigned char *outbuffer) const
 800833a:	460c      	mov	r4, r1
      uint32_t length_topic_name = strlen(this->topic_name);
 800833c:	f7f7 ff52 	bl	80001e4 <strlen>
 8008340:	2300      	movs	r3, #0
 8008342:	0a02      	lsrs	r2, r0, #8
 8008344:	f360 0307 	bfi	r3, r0, #0, #8
 8008348:	f362 230f 	bfi	r3, r2, #8, #8
 800834c:	0c02      	lsrs	r2, r0, #16
 800834e:	f362 4317 	bfi	r3, r2, #16, #8
 8008352:	0e02      	lsrs	r2, r0, #24
 8008354:	f362 631f 	bfi	r3, r2, #24, #8
 8008358:	f8c4 3002 	str.w	r3, [r4, #2]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800835c:	68b9      	ldr	r1, [r7, #8]
 800835e:	4602      	mov	r2, r0
      uint32_t length_topic_name = strlen(this->topic_name);
 8008360:	4680      	mov	r8, r0
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8008362:	1da0      	adds	r0, r4, #6
 8008364:	f002 f956 	bl	800a614 <memcpy>
      uint32_t length_message_type = strlen(this->message_type);
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f7f7 ff3b 	bl	80001e4 <strlen>
 800836e:	2300      	movs	r3, #0
 8008370:	0a02      	lsrs	r2, r0, #8
 8008372:	f360 0307 	bfi	r3, r0, #0, #8
 8008376:	f362 230f 	bfi	r3, r2, #8, #8
 800837a:	0c02      	lsrs	r2, r0, #16
 800837c:	0e01      	lsrs	r1, r0, #24
 800837e:	f362 4317 	bfi	r3, r2, #16, #8
      offset += length_topic_name;
 8008382:	f108 0206 	add.w	r2, r8, #6
 8008386:	f361 631f 	bfi	r3, r1, #24, #8
 800838a:	50a3      	str	r3, [r4, r2]
      uint32_t length_message_type = strlen(this->message_type);
 800838c:	4605      	mov	r5, r0
      offset += 4;
 800838e:	f108 080a 	add.w	r8, r8, #10
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8008392:	68f9      	ldr	r1, [r7, #12]
 8008394:	462a      	mov	r2, r5
 8008396:	eb04 0008 	add.w	r0, r4, r8
 800839a:	f002 f93b 	bl	800a614 <memcpy>
      uint32_t length_md5sum = strlen(this->md5sum);
 800839e:	6938      	ldr	r0, [r7, #16]
 80083a0:	f7f7 ff20 	bl	80001e4 <strlen>
 80083a4:	2300      	movs	r3, #0
 80083a6:	0a02      	lsrs	r2, r0, #8
 80083a8:	f360 0307 	bfi	r3, r0, #0, #8
 80083ac:	f362 230f 	bfi	r3, r2, #8, #8
 80083b0:	0c02      	lsrs	r2, r0, #16
      offset += length_message_type;
 80083b2:	4445      	add	r5, r8
 80083b4:	f362 4317 	bfi	r3, r2, #16, #8
 80083b8:	0e02      	lsrs	r2, r0, #24
 80083ba:	f362 631f 	bfi	r3, r2, #24, #8
 80083be:	5163      	str	r3, [r4, r5]
      uint32_t length_md5sum = strlen(this->md5sum);
 80083c0:	4606      	mov	r6, r0
      offset += 4;
 80083c2:	3504      	adds	r5, #4
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80083c4:	6939      	ldr	r1, [r7, #16]
 80083c6:	1960      	adds	r0, r4, r5
 80083c8:	4632      	mov	r2, r6
      offset += length_md5sum;
 80083ca:	4435      	add	r5, r6
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80083cc:	f002 f922 	bl	800a614 <memcpy>
      u_buffer_size.real = this->buffer_size;
 80083d0:	697b      	ldr	r3, [r7, #20]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80083d2:	5563      	strb	r3, [r4, r5]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80083d4:	442c      	add	r4, r5
 80083d6:	0a19      	lsrs	r1, r3, #8
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80083d8:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80083da:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80083dc:	7061      	strb	r1, [r4, #1]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80083de:	70a2      	strb	r2, [r4, #2]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80083e0:	70e3      	strb	r3, [r4, #3]
    }
 80083e2:	1d28      	adds	r0, r5, #4
 80083e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080083e8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
 80083e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if(ints_lengthT > ints_length)
 80083ec:	6843      	ldr	r3, [r0, #4]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80083ee:	680c      	ldr	r4, [r1, #0]
      if(ints_lengthT > ints_length)
 80083f0:	429c      	cmp	r4, r3
    virtual int deserialize(unsigned char *inbuffer)
 80083f2:	b083      	sub	sp, #12
 80083f4:	4605      	mov	r5, r0
 80083f6:	460e      	mov	r6, r1
      if(ints_lengthT > ints_length)
 80083f8:	f200 80b4 	bhi.w	8008564 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x17c>
      ints_length = ints_lengthT;
 80083fc:	606c      	str	r4, [r5, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80083fe:	2c00      	cmp	r4, #0
 8008400:	f000 80b9 	beq.w	8008576 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x18e>
 8008404:	4631      	mov	r1, r6
 8008406:	2000      	movs	r0, #0
 8008408:	2704      	movs	r7, #4
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800840a:	798b      	ldrb	r3, [r1, #6]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800840c:	f891 c005 	ldrb.w	ip, [r1, #5]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8008410:	f891 e004 	ldrb.w	lr, [r1, #4]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008414:	79cc      	ldrb	r4, [r1, #7]
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8008416:	68ea      	ldr	r2, [r5, #12]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008418:	041b      	lsls	r3, r3, #16
 800841a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800841e:	ea43 030e 	orr.w	r3, r3, lr
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008422:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
      this->st_ints = u_st_ints.real;
 8008426:	60ab      	str	r3, [r5, #8]
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8008428:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
      for( uint32_t i = 0; i < ints_length; i++){
 800842c:	686b      	ldr	r3, [r5, #4]
 800842e:	3001      	adds	r0, #1
 8008430:	4283      	cmp	r3, r0
 8008432:	46bb      	mov	fp, r7
 8008434:	f101 0104 	add.w	r1, r1, #4
 8008438:	f107 0704 	add.w	r7, r7, #4
 800843c:	d8e5      	bhi.n	800840a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x22>
 800843e:	f10b 0408 	add.w	r4, fp, #8
 8008442:	4639      	mov	r1, r7
 8008444:	f10b 0005 	add.w	r0, fp, #5
 8008448:	f10b 0306 	add.w	r3, fp, #6
 800844c:	f10b 0207 	add.w	r2, fp, #7
 8008450:	f10b 0a09 	add.w	sl, fp, #9
 8008454:	f10b 070a 	add.w	r7, fp, #10
 8008458:	f10b 090b 	add.w	r9, fp, #11
 800845c:	46a0      	mov	r8, r4
 800845e:	f10b 0b0c 	add.w	fp, fp, #12
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8008462:	5cf3      	ldrb	r3, [r6, r3]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8008464:	f816 e000 	ldrb.w	lr, [r6, r0]
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8008468:	5c70      	ldrb	r0, [r6, r1]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800846a:	5cb1      	ldrb	r1, [r6, r2]
      if(floats_lengthT > floats_length)
 800846c:	692a      	ldr	r2, [r5, #16]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800846e:	041b      	lsls	r3, r3, #16
 8008470:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 8008474:	4303      	orrs	r3, r0
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8008476:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      if(floats_lengthT > floats_length)
 800847a:	4293      	cmp	r3, r2
 800847c:	f200 8090 	bhi.w	80085a0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1b8>
      floats_length = floats_lengthT;
 8008480:	612b      	str	r3, [r5, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8008482:	b323      	cbz	r3, 80084ce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xe6>
 8008484:	1931      	adds	r1, r6, r4
 8008486:	2000      	movs	r0, #0
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008488:	788b      	ldrb	r3, [r1, #2]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800848a:	f891 c001 	ldrb.w	ip, [r1, #1]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800848e:	f891 e000 	ldrb.w	lr, [r1]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8008492:	78cf      	ldrb	r7, [r1, #3]
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8008494:	69aa      	ldr	r2, [r5, #24]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8008496:	041b      	lsls	r3, r3, #16
 8008498:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800849c:	ea43 030e 	orr.w	r3, r3, lr
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80084a0:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
      this->st_floats = u_st_floats.real;
 80084a4:	616b      	str	r3, [r5, #20]
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80084a6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
      for( uint32_t i = 0; i < floats_length; i++){
 80084aa:	692b      	ldr	r3, [r5, #16]
 80084ac:	3001      	adds	r0, #1
 80084ae:	4283      	cmp	r3, r0
 80084b0:	46a3      	mov	fp, r4
 80084b2:	f101 0104 	add.w	r1, r1, #4
 80084b6:	f104 0404 	add.w	r4, r4, #4
 80084ba:	d8e5      	bhi.n	8008488 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xa0>
 80084bc:	f10b 0a05 	add.w	sl, fp, #5
 80084c0:	f10b 0706 	add.w	r7, fp, #6
 80084c4:	f10b 0907 	add.w	r9, fp, #7
 80084c8:	46a0      	mov	r8, r4
 80084ca:	f10b 0b08 	add.w	fp, fp, #8
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80084ce:	5df4      	ldrb	r4, [r6, r7]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80084d0:	f816 000a 	ldrb.w	r0, [r6, sl]
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80084d4:	f816 1008 	ldrb.w	r1, [r6, r8]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80084d8:	f816 2009 	ldrb.w	r2, [r6, r9]
      if(strings_lengthT > strings_length)
 80084dc:	69eb      	ldr	r3, [r5, #28]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80084de:	0424      	lsls	r4, r4, #16
 80084e0:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 80084e4:	430c      	orrs	r4, r1
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80084e6:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
      if(strings_lengthT > strings_length)
 80084ea:	429c      	cmp	r4, r3
 80084ec:	d852      	bhi.n	8008594 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1ac>
      strings_length = strings_lengthT;
 80084ee:	61ec      	str	r4, [r5, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80084f0:	b3a4      	cbz	r4, 800855c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x174>
 80084f2:	f04f 0a00 	mov.w	sl, #0
      inbuffer[offset+length_st_strings-1]=0;
 80084f6:	46d1      	mov	r9, sl
          inbuffer[k-1]=inbuffer[k];
 80084f8:	f06f 0803 	mvn.w	r8, #3
      var |= (arr[i] << (8 * i));
 80084fc:	eb06 030b 	add.w	r3, r6, fp
 8008500:	f10b 0003 	add.w	r0, fp, #3
 8008504:	789c      	ldrb	r4, [r3, #2]
 8008506:	7859      	ldrb	r1, [r3, #1]
 8008508:	f816 200b 	ldrb.w	r2, [r6, fp]
 800850c:	5c33      	ldrb	r3, [r6, r0]
 800850e:	0424      	lsls	r4, r4, #16
 8008510:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
 8008514:	4314      	orrs	r4, r2
      offset += 4;
 8008516:	f10b 0704 	add.w	r7, fp, #4
 800851a:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800851e:	443c      	add	r4, r7
          inbuffer[k-1]=inbuffer[k];
 8008520:	eba8 020b 	sub.w	r2, r8, fp
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8008524:	42a7      	cmp	r7, r4
          inbuffer[k-1]=inbuffer[k];
 8008526:	4422      	add	r2, r4
 8008528:	f10b 0b05 	add.w	fp, fp, #5
 800852c:	4430      	add	r0, r6
 800852e:	eb06 0107 	add.w	r1, r6, r7
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8008532:	d204      	bcs.n	800853e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x156>
 8008534:	45a3      	cmp	fp, r4
 8008536:	bf88      	it	hi
 8008538:	2201      	movhi	r2, #1
 800853a:	f002 f876 	bl	800a62a <memmove>
      inbuffer[offset+length_st_strings-1]=0;
 800853e:	1933      	adds	r3, r6, r4
      this->st_strings = (char *)(inbuffer + offset-1);
 8008540:	3f01      	subs	r7, #1
      inbuffer[offset+length_st_strings-1]=0;
 8008542:	f803 9c01 	strb.w	r9, [r3, #-1]
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8008546:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      this->st_strings = (char *)(inbuffer + offset-1);
 8008548:	4437      	add	r7, r6
 800854a:	622f      	str	r7, [r5, #32]
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800854c:	f843 702a 	str.w	r7, [r3, sl, lsl #2]
      for( uint32_t i = 0; i < strings_length; i++){
 8008550:	69eb      	ldr	r3, [r5, #28]
 8008552:	f10a 0a01 	add.w	sl, sl, #1
 8008556:	4553      	cmp	r3, sl
      offset += length_st_strings;
 8008558:	46a3      	mov	fp, r4
      for( uint32_t i = 0; i < strings_length; i++){
 800855a:	d8cf      	bhi.n	80084fc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x114>
    }
 800855c:	4658      	mov	r0, fp
 800855e:	b003      	add	sp, #12
 8008560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8008564:	00a1      	lsls	r1, r4, #2
 8008566:	68c0      	ldr	r0, [r0, #12]
 8008568:	f002 f92e 	bl	800a7c8 <realloc>
      ints_length = ints_lengthT;
 800856c:	606c      	str	r4, [r5, #4]
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800856e:	60e8      	str	r0, [r5, #12]
      for( uint32_t i = 0; i < ints_length; i++){
 8008570:	2c00      	cmp	r4, #0
 8008572:	f47f af47 	bne.w	8008404 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1c>
 8008576:	f04f 0808 	mov.w	r8, #8
 800857a:	4644      	mov	r4, r8
 800857c:	f04f 0b0c 	mov.w	fp, #12
 8008580:	f04f 090b 	mov.w	r9, #11
 8008584:	270a      	movs	r7, #10
 8008586:	f04f 0a09 	mov.w	sl, #9
 800858a:	2207      	movs	r2, #7
 800858c:	2306      	movs	r3, #6
 800858e:	2005      	movs	r0, #5
 8008590:	2104      	movs	r1, #4
 8008592:	e766      	b.n	8008462 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7a>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8008594:	00a1      	lsls	r1, r4, #2
 8008596:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008598:	f002 f916 	bl	800a7c8 <realloc>
 800859c:	6268      	str	r0, [r5, #36]	; 0x24
 800859e:	e7a6      	b.n	80084ee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x106>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80085a0:	0099      	lsls	r1, r3, #2
 80085a2:	69a8      	ldr	r0, [r5, #24]
 80085a4:	9301      	str	r3, [sp, #4]
 80085a6:	f002 f90f 	bl	800a7c8 <realloc>
 80085aa:	9b01      	ldr	r3, [sp, #4]
 80085ac:	61a8      	str	r0, [r5, #24]
 80085ae:	e767      	b.n	8008480 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x98>

080085b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
      }
    }
    configured_ = true;
  }

  virtual int publish(int id, const Msg * msg)
 80085b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    if (id >= 100 && !configured_)
 80085b2:	2963      	cmp	r1, #99	; 0x63
  virtual int publish(int id, const Msg * msg)
 80085b4:	b085      	sub	sp, #20
    if (id >= 100 && !configured_)
 80085b6:	dd03      	ble.n	80085c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10>
 80085b8:	f890 44f4 	ldrb.w	r4, [r0, #1268]	; 0x4f4
 80085bc:	2c00      	cmp	r4, #0
 80085be:	d03a      	beq.n	8008636 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x86>
      return 0;

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80085c0:	6813      	ldr	r3, [r2, #0]
 80085c2:	4605      	mov	r5, r0
 80085c4:	460c      	mov	r4, r1
 80085c6:	4610      	mov	r0, r2
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f205 211f 	addw	r1, r5, #543	; 0x21f
 80085ce:	4798      	blx	r3

    /* setup the header */
    message_out[0] = 0xff;
    message_out[1] = PROTOCOL_VER;
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80085d0:	b2c6      	uxtb	r6, r0
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80085d2:	f3c0 2107 	ubfx	r1, r0, #8, #8
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80085d6:	1872      	adds	r2, r6, r1
 80085d8:	43d2      	mvns	r2, r2
    message_out[5] = (uint8_t)((int16_t)id & 255);
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80085da:	f344 2707 	sbfx	r7, r4, #8, #8
    message_out[0] = 0xff;
 80085de:	23ff      	movs	r3, #255	; 0xff
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80085e0:	f885 421d 	strb.w	r4, [r5, #541]	; 0x21d
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80085e4:	f885 221c 	strb.w	r2, [r5, #540]	; 0x21c
    message_out[1] = PROTOCOL_VER;
 80085e8:	24fe      	movs	r4, #254	; 0xfe

    /* calculate checksum */
    int chk = 0;
    for (int i = 5; i < l + 7; i++)
 80085ea:	1c42      	adds	r2, r0, #1
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80085ec:	f885 721e 	strb.w	r7, [r5, #542]	; 0x21e
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80085f0:	f885 621a 	strb.w	r6, [r5, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80085f4:	f885 121b 	strb.w	r1, [r5, #539]	; 0x21b
    message_out[0] = 0xff;
 80085f8:	f885 3218 	strb.w	r3, [r5, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 80085fc:	f885 4219 	strb.w	r4, [r5, #537]	; 0x219
    for (int i = 5; i < l + 7; i++)
 8008600:	db0c      	blt.n	800861c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x6c>
 8008602:	f200 241e 	addw	r4, r0, #542	; 0x21e
 8008606:	442c      	add	r4, r5
 8008608:	f505 7307 	add.w	r3, r5, #540	; 0x21c
 800860c:	2200      	movs	r2, #0
      chk += message_out[i];
 800860e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 8008612:	42a3      	cmp	r3, r4
      chk += message_out[i];
 8008614:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
 8008616:	d1fa      	bne.n	800860e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x5e>
 8008618:	43d3      	mvns	r3, r2
 800861a:	b2db      	uxtb	r3, r3
    l += 7;
    message_out[l++] = 255 - (chk % 256);
 800861c:	182a      	adds	r2, r5, r0
 800861e:	f100 0408 	add.w	r4, r0, #8

    if (l <= OUTPUT_SIZE)
 8008622:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    message_out[l++] = 255 - (chk % 256);
 8008626:	f882 321f 	strb.w	r3, [r2, #543]	; 0x21f
    if (l <= OUTPUT_SIZE)
 800862a:	dc07      	bgt.n	800863c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x8c>


	// Send a byte of data to ROS connection
	void write(uint8_t* data, int length)
	{
		CDC_Transmit_FS(data, length);
 800862c:	f505 7006 	add.w	r0, r5, #536	; 0x218
 8008630:	b2a1      	uxth	r1, r4
 8008632:	f7ff f957 	bl	80078e4 <CDC_Transmit_FS>
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
      return -1;
    }
  }
 8008636:	4620      	mov	r0, r4
 8008638:	b005      	add	sp, #20
 800863a:	bdf0      	pop	{r4, r5, r6, r7, pc}

private:
  void log(char byte, const char * msg)
  {
    rosserial_msgs::Log l;
    l.level = byte;
 800863c:	2203      	movs	r2, #3
    l.msg = (char*)msg;
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800863e:	682b      	ldr	r3, [r5, #0]
    l.level = byte;
 8008640:	f88d 2008 	strb.w	r2, [sp, #8]
      msg("")
 8008644:	4905      	ldr	r1, [pc, #20]	; (800865c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xac>)
    l.msg = (char*)msg;
 8008646:	4a06      	ldr	r2, [pc, #24]	; (8008660 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xb0>)
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	9101      	str	r1, [sp, #4]
    l.msg = (char*)msg;
 800864c:	9203      	str	r2, [sp, #12]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800864e:	4628      	mov	r0, r5
 8008650:	aa01      	add	r2, sp, #4
 8008652:	2107      	movs	r1, #7
 8008654:	4798      	blx	r3
 8008656:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800865a:	e7ec      	b.n	8008636 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x86>
 800865c:	0800ac90 	.word	0x0800ac90
 8008660:	0800ae4c 	.word	0x0800ae4c

08008664 <messageSide>:
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop

08008668 <_ZN13geometry_msgs7Vector311deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
 8008668:	78cb      	ldrb	r3, [r1, #3]
 800866a:	095b      	lsrs	r3, r3, #5
 800866c:	b430      	push	{r4, r5}
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 800866e:	6043      	str	r3, [r0, #4]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 8008670:	790a      	ldrb	r2, [r1, #4]
 8008672:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008676:	6043      	str	r3, [r0, #4]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 8008678:	794a      	ldrb	r2, [r1, #5]
 800867a:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 800867e:	6043      	str	r3, [r0, #4]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 8008680:	798a      	ldrb	r2, [r1, #6]
 8008682:	04d2      	lsls	r2, r2, #19
 8008684:	f402 02f0 	and.w	r2, r2, #7864320	; 0x780000
 8008688:	4313      	orrs	r3, r2
 800868a:	6043      	str	r3, [r0, #4]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 800868c:	79ca      	ldrb	r2, [r1, #7]
 800868e:	798d      	ldrb	r5, [r1, #6]
 8008690:	0114      	lsls	r4, r2, #4
 8008692:	f404 64fe 	and.w	r4, r4, #2032	; 0x7f0
    if (exp != 0)
 8008696:	ea54 1415 	orrs.w	r4, r4, r5, lsr #4
 800869a:	d005      	beq.n	80086a8 <_ZN13geometry_msgs7Vector311deserializeEPh+0x40>
      *val |= ((exp) - 1023 + 127) << 23;
 800869c:	f5a4 7460 	sub.w	r4, r4, #896	; 0x380
 80086a0:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
 80086a4:	6043      	str	r3, [r0, #4]
 80086a6:	79ca      	ldrb	r2, [r1, #7]
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 80086a8:	0612      	lsls	r2, r2, #24
 80086aa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80086ae:	4313      	orrs	r3, r2
 80086b0:	6043      	str	r3, [r0, #4]
 80086b2:	7acb      	ldrb	r3, [r1, #11]
 80086b4:	095b      	lsrs	r3, r3, #5
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 80086b6:	6083      	str	r3, [r0, #8]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 80086b8:	7b0a      	ldrb	r2, [r1, #12]
 80086ba:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80086be:	6083      	str	r3, [r0, #8]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 80086c0:	7b4a      	ldrb	r2, [r1, #13]
 80086c2:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80086c6:	6083      	str	r3, [r0, #8]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 80086c8:	7b8a      	ldrb	r2, [r1, #14]
 80086ca:	04d2      	lsls	r2, r2, #19
 80086cc:	f402 02f0 	and.w	r2, r2, #7864320	; 0x780000
 80086d0:	4313      	orrs	r3, r2
 80086d2:	6083      	str	r3, [r0, #8]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 80086d4:	7bca      	ldrb	r2, [r1, #15]
 80086d6:	7b8d      	ldrb	r5, [r1, #14]
 80086d8:	0114      	lsls	r4, r2, #4
 80086da:	f404 64fe 	and.w	r4, r4, #2032	; 0x7f0
    if (exp != 0)
 80086de:	ea54 1415 	orrs.w	r4, r4, r5, lsr #4
 80086e2:	d005      	beq.n	80086f0 <_ZN13geometry_msgs7Vector311deserializeEPh+0x88>
      *val |= ((exp) - 1023 + 127) << 23;
 80086e4:	f5a4 7460 	sub.w	r4, r4, #896	; 0x380
 80086e8:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
 80086ec:	6083      	str	r3, [r0, #8]
 80086ee:	7bca      	ldrb	r2, [r1, #15]
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 80086f0:	0612      	lsls	r2, r2, #24
 80086f2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80086f6:	4313      	orrs	r3, r2
 80086f8:	6083      	str	r3, [r0, #8]
 80086fa:	7ccb      	ldrb	r3, [r1, #19]
 80086fc:	095b      	lsrs	r3, r3, #5
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 80086fe:	60c3      	str	r3, [r0, #12]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 8008700:	7d0a      	ldrb	r2, [r1, #20]
 8008702:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008706:	60c3      	str	r3, [r0, #12]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 8008708:	7d4a      	ldrb	r2, [r1, #21]
 800870a:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 800870e:	60c3      	str	r3, [r0, #12]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 8008710:	7d8a      	ldrb	r2, [r1, #22]
 8008712:	04d2      	lsls	r2, r2, #19
 8008714:	f402 02f0 	and.w	r2, r2, #7864320	; 0x780000
 8008718:	4313      	orrs	r3, r2
 800871a:	60c3      	str	r3, [r0, #12]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 800871c:	7dca      	ldrb	r2, [r1, #23]
 800871e:	7d8d      	ldrb	r5, [r1, #22]
 8008720:	0114      	lsls	r4, r2, #4
 8008722:	f404 64fe 	and.w	r4, r4, #2032	; 0x7f0
    if (exp != 0)
 8008726:	ea54 1415 	orrs.w	r4, r4, r5, lsr #4
 800872a:	d005      	beq.n	8008738 <_ZN13geometry_msgs7Vector311deserializeEPh+0xd0>
      *val |= ((exp) - 1023 + 127) << 23;
 800872c:	f5a4 7460 	sub.w	r4, r4, #896	; 0x380
 8008730:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
 8008734:	60c3      	str	r3, [r0, #12]
 8008736:	7dca      	ldrb	r2, [r1, #23]
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 8008738:	0612      	lsls	r2, r2, #24
 800873a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800873e:	4313      	orrs	r3, r2
 8008740:	60c3      	str	r3, [r0, #12]
    }
 8008742:	bc30      	pop	{r4, r5}
 8008744:	2018      	movs	r0, #24
 8008746:	4770      	bx	lr

08008748 <_ZNK13geometry_msgs7Vector39serializeEPh>:
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 8008748:	edd0 7a01 	vldr	s15, [r0, #4]
    int32_t exp = ((*val >> 23) & 255);
 800874c:	ee17 3a90 	vmov	r3, s15
 8008750:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    virtual int serialize(unsigned char *outbuffer) const
 8008754:	b4f0      	push	{r4, r5, r6, r7}
    if (exp != 0)
 8008756:	2a00      	cmp	r2, #0
 8008758:	d071      	beq.n	800883e <_ZNK13geometry_msgs7Vector39serializeEPh+0xf6>
      exp += 1023 - 127;
 800875a:	f502 7260 	add.w	r2, r2, #896	; 0x380
 800875e:	0114      	lsls	r4, r2, #4
 8008760:	b264      	sxtb	r4, r4
 8008762:	f3c2 1207 	ubfx	r2, r2, #4, #8
    if (f < 0)
 8008766:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800876a:	f3c3 45c3 	ubfx	r5, r3, #19, #4
    if (f < 0)
 800876e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008772:	ea44 0405 	orr.w	r4, r4, r5
    *(outbuffer++) = (sig << 5) & 0xff;
 8008776:	ea4f 1743 	mov.w	r7, r3, lsl #5
    *(outbuffer++) = 0;
 800877a:	f04f 0500 	mov.w	r5, #0
    *(outbuffer++) = (sig >> 3) & 0xff;
 800877e:	ea4f 06e3 	mov.w	r6, r3, asr #3
      *(outbuffer - 1) |= 0x80;
 8008782:	bf48      	it	mi
 8008784:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = (sig >> 11) & 0xff;
 8008788:	12db      	asrs	r3, r3, #11
 800878a:	714b      	strb	r3, [r1, #5]
      *(outbuffer - 1) |= 0x80;
 800878c:	71ca      	strb	r2, [r1, #7]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800878e:	718c      	strb	r4, [r1, #6]
    *(outbuffer++) = 0;
 8008790:	700d      	strb	r5, [r1, #0]
    *(outbuffer++) = 0;
 8008792:	704d      	strb	r5, [r1, #1]
    *(outbuffer++) = 0;
 8008794:	708d      	strb	r5, [r1, #2]
    *(outbuffer++) = (sig << 5) & 0xff;
 8008796:	70cf      	strb	r7, [r1, #3]
    *(outbuffer++) = (sig >> 3) & 0xff;
 8008798:	710e      	strb	r6, [r1, #4]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 800879a:	edd0 7a02 	vldr	s15, [r0, #8]
    int32_t exp = ((*val >> 23) & 255);
 800879e:	ee17 3a90 	vmov	r3, s15
 80087a2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    if (exp != 0)
 80087a6:	2a00      	cmp	r2, #0
 80087a8:	d04d      	beq.n	8008846 <_ZNK13geometry_msgs7Vector39serializeEPh+0xfe>
      exp += 1023 - 127;
 80087aa:	f502 7260 	add.w	r2, r2, #896	; 0x380
 80087ae:	0114      	lsls	r4, r2, #4
 80087b0:	b264      	sxtb	r4, r4
 80087b2:	f3c2 1207 	ubfx	r2, r2, #4, #8
    if (f < 0)
 80087b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 80087ba:	f3c3 45c3 	ubfx	r5, r3, #19, #4
    if (f < 0)
 80087be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 80087c2:	ea44 0405 	orr.w	r4, r4, r5
    *(outbuffer++) = (sig << 5) & 0xff;
 80087c6:	ea4f 1743 	mov.w	r7, r3, lsl #5
    *(outbuffer++) = 0;
 80087ca:	f04f 0500 	mov.w	r5, #0
    *(outbuffer++) = (sig >> 3) & 0xff;
 80087ce:	ea4f 06e3 	mov.w	r6, r3, asr #3
      *(outbuffer - 1) |= 0x80;
 80087d2:	bf48      	it	mi
 80087d4:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = (sig >> 11) & 0xff;
 80087d8:	12db      	asrs	r3, r3, #11
 80087da:	734b      	strb	r3, [r1, #13]
      *(outbuffer - 1) |= 0x80;
 80087dc:	73ca      	strb	r2, [r1, #15]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 80087de:	738c      	strb	r4, [r1, #14]
    *(outbuffer++) = 0;
 80087e0:	720d      	strb	r5, [r1, #8]
    *(outbuffer++) = 0;
 80087e2:	724d      	strb	r5, [r1, #9]
    *(outbuffer++) = 0;
 80087e4:	728d      	strb	r5, [r1, #10]
    *(outbuffer++) = (sig << 5) & 0xff;
 80087e6:	72cf      	strb	r7, [r1, #11]
    *(outbuffer++) = (sig >> 3) & 0xff;
 80087e8:	730e      	strb	r6, [r1, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 80087ea:	edd0 7a03 	vldr	s15, [r0, #12]
    int32_t exp = ((*val >> 23) & 255);
 80087ee:	ee17 3a90 	vmov	r3, s15
 80087f2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    if (exp != 0)
 80087f6:	b322      	cbz	r2, 8008842 <_ZNK13geometry_msgs7Vector39serializeEPh+0xfa>
      exp += 1023 - 127;
 80087f8:	f502 7260 	add.w	r2, r2, #896	; 0x380
 80087fc:	0110      	lsls	r0, r2, #4
 80087fe:	b240      	sxtb	r0, r0
 8008800:	f3c2 1207 	ubfx	r2, r2, #4, #8
    if (f < 0)
 8008804:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008808:	f3c3 44c3 	ubfx	r4, r3, #19, #4
    if (f < 0)
 800880c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008810:	ea40 0004 	orr.w	r0, r0, r4
    *(outbuffer++) = (sig << 5) & 0xff;
 8008814:	ea4f 1643 	mov.w	r6, r3, lsl #5
    *(outbuffer++) = 0;
 8008818:	f04f 0400 	mov.w	r4, #0
    *(outbuffer++) = (sig >> 3) & 0xff;
 800881c:	ea4f 05e3 	mov.w	r5, r3, asr #3
      *(outbuffer - 1) |= 0x80;
 8008820:	bf48      	it	mi
 8008822:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = (sig >> 11) & 0xff;
 8008826:	12db      	asrs	r3, r3, #11
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008828:	7588      	strb	r0, [r1, #22]
    *(outbuffer++) = 0;
 800882a:	740c      	strb	r4, [r1, #16]
    *(outbuffer++) = 0;
 800882c:	744c      	strb	r4, [r1, #17]
    *(outbuffer++) = 0;
 800882e:	748c      	strb	r4, [r1, #18]
    *(outbuffer++) = (sig << 5) & 0xff;
 8008830:	74ce      	strb	r6, [r1, #19]
    *(outbuffer++) = (sig >> 3) & 0xff;
 8008832:	750d      	strb	r5, [r1, #20]
    }
 8008834:	2018      	movs	r0, #24
    *(outbuffer++) = (sig >> 11) & 0xff;
 8008836:	754b      	strb	r3, [r1, #21]
      *(outbuffer - 1) |= 0x80;
 8008838:	75ca      	strb	r2, [r1, #23]
 800883a:	bcf0      	pop	{r4, r5, r6, r7}
 800883c:	4770      	bx	lr
    if (exp != 0)
 800883e:	4614      	mov	r4, r2
 8008840:	e791      	b.n	8008766 <_ZNK13geometry_msgs7Vector39serializeEPh+0x1e>
 8008842:	4610      	mov	r0, r2
 8008844:	e7de      	b.n	8008804 <_ZNK13geometry_msgs7Vector39serializeEPh+0xbc>
 8008846:	4614      	mov	r4, r2
 8008848:	e7b5      	b.n	80087b6 <_ZNK13geometry_msgs7Vector39serializeEPh+0x6e>
 800884a:	bf00      	nop

0800884c <cdc_receive_put>:
	//speedData = msg.data;
}

extern "C" void cdc_receive_put(uint8_t value)
{
	ringbuffer_putchar(&rb, value);
 800884c:	4601      	mov	r1, r0
 800884e:	4801      	ldr	r0, [pc, #4]	; (8008854 <cdc_receive_put+0x8>)
 8008850:	f001 bcfa 	b.w	800a248 <_Z18ringbuffer_putcharP10ringbufferh>
 8008854:	20000200 	.word	0x20000200

08008858 <init_ROS>:
}

extern "C" void init_ROS(void)
{
 8008858:	b538      	push	{r3, r4, r5, lr}
	ringbuffer_init(&rb, RxBuffer, RxBufferSize);
 800885a:	4c85      	ldr	r4, [pc, #532]	; (8008a70 <init_ROS+0x218>)
 800885c:	4985      	ldr	r1, [pc, #532]	; (8008a74 <init_ROS+0x21c>)
 800885e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008862:	4620      	mov	r0, r4
 8008864:	f001 fd74 	bl	800a350 <_Z15ringbuffer_initP10ringbufferPhs>
    mode_ = 0;
 8008868:	2300      	movs	r3, #0
 800886a:	f504 6284 	add.w	r2, r4, #1056	; 0x420
    topic_ = 0;
 800886e:	4611      	mov	r1, r2
    mode_ = 0;
 8008870:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
    bytes_ = 0;
 8008874:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
    index_ = 0;
 8008878:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
    topic_ = 0;
 800887c:	f8c4 34f4 	str.w	r3, [r4, #1268]	; 0x4f4
 8008880:	e002      	b.n	8008888 <init_ROS+0x30>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8008882:	3301      	adds	r3, #1
 8008884:	2b19      	cmp	r3, #25
 8008886:	d00f      	beq.n	80088a8 <init_ROS+0x50>
      if (publishers[i] == 0) // empty slot
 8008888:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800888c:	2800      	cmp	r0, #0
 800888e:	d1f8      	bne.n	8008882 <init_ROS+0x2a>
        publishers[i] = &p;
 8008890:	4979      	ldr	r1, [pc, #484]	; (8008a78 <init_ROS+0x220>)
 8008892:	eb04 0583 	add.w	r5, r4, r3, lsl #2
        p.nh_ = this;
 8008896:	f5a1 60a6 	sub.w	r0, r1, #1328	; 0x530
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800889a:	337d      	adds	r3, #125	; 0x7d
        publishers[i] = &p;
 800889c:	f8c5 1424 	str.w	r1, [r5, #1060]	; 0x424
        p.nh_ = this;
 80088a0:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80088a4:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80088a8:	4611      	mov	r1, r2
 80088aa:	2300      	movs	r3, #0
 80088ac:	e002      	b.n	80088b4 <init_ROS+0x5c>
 80088ae:	3301      	adds	r3, #1
 80088b0:	2b19      	cmp	r3, #25
 80088b2:	d00f      	beq.n	80088d4 <init_ROS+0x7c>
      if (publishers[i] == 0) // empty slot
 80088b4:	f851 0f04 	ldr.w	r0, [r1, #4]!
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d1f8      	bne.n	80088ae <init_ROS+0x56>
        publishers[i] = &p;
 80088bc:	496f      	ldr	r1, [pc, #444]	; (8008a7c <init_ROS+0x224>)
 80088be:	eb04 0583 	add.w	r5, r4, r3, lsl #2
        p.nh_ = this;
 80088c2:	f2a1 5044 	subw	r0, r1, #1348	; 0x544
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80088c6:	337d      	adds	r3, #125	; 0x7d
        publishers[i] = &p;
 80088c8:	f8c5 1424 	str.w	r1, [r5, #1060]	; 0x424
        p.nh_ = this;
 80088cc:	f8c4 055c 	str.w	r0, [r4, #1372]	; 0x55c
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80088d0:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80088d4:	4611      	mov	r1, r2
 80088d6:	2300      	movs	r3, #0
 80088d8:	e002      	b.n	80088e0 <init_ROS+0x88>
 80088da:	3301      	adds	r3, #1
 80088dc:	2b19      	cmp	r3, #25
 80088de:	d00f      	beq.n	8008900 <init_ROS+0xa8>
      if (publishers[i] == 0) // empty slot
 80088e0:	f851 0f04 	ldr.w	r0, [r1, #4]!
 80088e4:	2800      	cmp	r0, #0
 80088e6:	d1f8      	bne.n	80088da <init_ROS+0x82>
        publishers[i] = &p;
 80088e8:	4965      	ldr	r1, [pc, #404]	; (8008a80 <init_ROS+0x228>)
 80088ea:	eb04 0583 	add.w	r5, r4, r3, lsl #2
        p.nh_ = this;
 80088ee:	f5a1 60ab 	sub.w	r0, r1, #1368	; 0x558
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80088f2:	337d      	adds	r3, #125	; 0x7d
        publishers[i] = &p;
 80088f4:	f8c5 1424 	str.w	r1, [r5, #1060]	; 0x424
        p.nh_ = this;
 80088f8:	f8c4 0570 	str.w	r0, [r4, #1392]	; 0x570
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80088fc:	f8c4 356c 	str.w	r3, [r4, #1388]	; 0x56c
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8008900:	4611      	mov	r1, r2
 8008902:	2300      	movs	r3, #0
 8008904:	e002      	b.n	800890c <init_ROS+0xb4>
 8008906:	3301      	adds	r3, #1
 8008908:	2b19      	cmp	r3, #25
 800890a:	d00f      	beq.n	800892c <init_ROS+0xd4>
      if (publishers[i] == 0) // empty slot
 800890c:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8008910:	2800      	cmp	r0, #0
 8008912:	d1f8      	bne.n	8008906 <init_ROS+0xae>
        publishers[i] = &p;
 8008914:	495b      	ldr	r1, [pc, #364]	; (8008a84 <init_ROS+0x22c>)
 8008916:	eb04 0583 	add.w	r5, r4, r3, lsl #2
        p.nh_ = this;
 800891a:	f2a1 506c 	subw	r0, r1, #1388	; 0x56c
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800891e:	337d      	adds	r3, #125	; 0x7d
        publishers[i] = &p;
 8008920:	f8c5 1424 	str.w	r1, [r5, #1060]	; 0x424
        p.nh_ = this;
 8008924:	f8c4 0584 	str.w	r0, [r4, #1412]	; 0x584
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8008928:	f8c4 3580 	str.w	r3, [r4, #1408]	; 0x580
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800892c:	4611      	mov	r1, r2
 800892e:	2300      	movs	r3, #0
 8008930:	e002      	b.n	8008938 <init_ROS+0xe0>
 8008932:	3301      	adds	r3, #1
 8008934:	2b19      	cmp	r3, #25
 8008936:	d00f      	beq.n	8008958 <init_ROS+0x100>
      if (publishers[i] == 0) // empty slot
 8008938:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800893c:	2800      	cmp	r0, #0
 800893e:	d1f8      	bne.n	8008932 <init_ROS+0xda>
        publishers[i] = &p;
 8008940:	4951      	ldr	r1, [pc, #324]	; (8008a88 <init_ROS+0x230>)
 8008942:	eb04 0583 	add.w	r5, r4, r3, lsl #2
        p.nh_ = this;
 8008946:	f5a1 60b0 	sub.w	r0, r1, #1408	; 0x580
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800894a:	337d      	adds	r3, #125	; 0x7d
        publishers[i] = &p;
 800894c:	f8c5 1424 	str.w	r1, [r5, #1060]	; 0x424
        p.nh_ = this;
 8008950:	f8c4 0598 	str.w	r0, [r4, #1432]	; 0x598
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8008954:	f8c4 3594 	str.w	r3, [r4, #1428]	; 0x594
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8008958:	4611      	mov	r1, r2
 800895a:	2300      	movs	r3, #0
 800895c:	e002      	b.n	8008964 <init_ROS+0x10c>
 800895e:	3301      	adds	r3, #1
 8008960:	2b19      	cmp	r3, #25
 8008962:	d00f      	beq.n	8008984 <init_ROS+0x12c>
      if (publishers[i] == 0) // empty slot
 8008964:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8008968:	2800      	cmp	r0, #0
 800896a:	d1f8      	bne.n	800895e <init_ROS+0x106>
        publishers[i] = &p;
 800896c:	4947      	ldr	r1, [pc, #284]	; (8008a8c <init_ROS+0x234>)
 800896e:	eb04 0583 	add.w	r5, r4, r3, lsl #2
        p.nh_ = this;
 8008972:	f2a1 5094 	subw	r0, r1, #1428	; 0x594
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8008976:	337d      	adds	r3, #125	; 0x7d
        publishers[i] = &p;
 8008978:	f8c5 1424 	str.w	r1, [r5, #1060]	; 0x424
        p.nh_ = this;
 800897c:	f8c4 05ac 	str.w	r0, [r4, #1452]	; 0x5ac
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8008980:	f8c4 35a8 	str.w	r3, [r4, #1448]	; 0x5a8
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8008984:	4611      	mov	r1, r2
 8008986:	2300      	movs	r3, #0
 8008988:	e002      	b.n	8008990 <init_ROS+0x138>
 800898a:	3301      	adds	r3, #1
 800898c:	2b19      	cmp	r3, #25
 800898e:	d00f      	beq.n	80089b0 <init_ROS+0x158>
      if (publishers[i] == 0) // empty slot
 8008990:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8008994:	2800      	cmp	r0, #0
 8008996:	d1f8      	bne.n	800898a <init_ROS+0x132>
        publishers[i] = &p;
 8008998:	493d      	ldr	r1, [pc, #244]	; (8008a90 <init_ROS+0x238>)
 800899a:	eb04 0583 	add.w	r5, r4, r3, lsl #2
        p.nh_ = this;
 800899e:	f5a1 60b5 	sub.w	r0, r1, #1448	; 0x5a8
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80089a2:	337d      	adds	r3, #125	; 0x7d
        publishers[i] = &p;
 80089a4:	f8c5 1424 	str.w	r1, [r5, #1060]	; 0x424
        p.nh_ = this;
 80089a8:	f8c4 05c0 	str.w	r0, [r4, #1472]	; 0x5c0
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80089ac:	f8c4 35bc 	str.w	r3, [r4, #1468]	; 0x5bc
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80089b0:	2300      	movs	r3, #0
 80089b2:	e002      	b.n	80089ba <init_ROS+0x162>
 80089b4:	3301      	adds	r3, #1
 80089b6:	2b19      	cmp	r3, #25
 80089b8:	d00f      	beq.n	80089da <init_ROS+0x182>
      if (publishers[i] == 0) // empty slot
 80089ba:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80089be:	2900      	cmp	r1, #0
 80089c0:	d1f8      	bne.n	80089b4 <init_ROS+0x15c>
        publishers[i] = &p;
 80089c2:	4a34      	ldr	r2, [pc, #208]	; (8008a94 <init_ROS+0x23c>)
 80089c4:	eb04 0083 	add.w	r0, r4, r3, lsl #2
        p.nh_ = this;
 80089c8:	f2a2 51bc 	subw	r1, r2, #1468	; 0x5bc
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80089cc:	337d      	adds	r3, #125	; 0x7d
        publishers[i] = &p;
 80089ce:	f8c0 2424 	str.w	r2, [r0, #1060]	; 0x424
        p.nh_ = this;
 80089d2:	f8c4 15d4 	str.w	r1, [r4, #1492]	; 0x5d4
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80089d6:	f8c4 35d0 	str.w	r3, [r4, #1488]	; 0x5d0
 80089da:	4a2f      	ldr	r2, [pc, #188]	; (8008a98 <init_ROS+0x240>)
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80089dc:	2300      	movs	r3, #0
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80089de:	4611      	mov	r1, r2
 80089e0:	e002      	b.n	80089e8 <init_ROS+0x190>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80089e2:	3301      	adds	r3, #1
 80089e4:	2b19      	cmp	r3, #25
 80089e6:	d00b      	beq.n	8008a00 <init_ROS+0x1a8>
      if (subscribers[i] == 0) // empty slot
 80089e8:	f851 0f04 	ldr.w	r0, [r1, #4]!
 80089ec:	2800      	cmp	r0, #0
 80089ee:	d1f8      	bne.n	80089e2 <init_ROS+0x18a>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80089f0:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 80089f4:	4829      	ldr	r0, [pc, #164]	; (8008a9c <init_ROS+0x244>)
 80089f6:	f8c1 0488 	str.w	r0, [r1, #1160]	; 0x488
        s.id_ = i + 100;
 80089fa:	3364      	adds	r3, #100	; 0x64
 80089fc:	f8c4 35e0 	str.w	r3, [r4, #1504]	; 0x5e0
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8008a00:	2300      	movs	r3, #0
 8008a02:	e002      	b.n	8008a0a <init_ROS+0x1b2>
 8008a04:	3301      	adds	r3, #1
 8008a06:	2b19      	cmp	r3, #25
 8008a08:	d00b      	beq.n	8008a22 <init_ROS+0x1ca>
      if (subscribers[i] == 0) // empty slot
 8008a0a:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8008a0e:	2900      	cmp	r1, #0
 8008a10:	d1f8      	bne.n	8008a04 <init_ROS+0x1ac>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8008a12:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008a16:	4922      	ldr	r1, [pc, #136]	; (8008aa0 <init_ROS+0x248>)
 8008a18:	f8c2 1488 	str.w	r1, [r2, #1160]	; 0x488
        s.id_ = i + 100;
 8008a1c:	3364      	adds	r3, #100	; 0x64
 8008a1e:	f8c4 35fc 	str.w	r3, [r4, #1532]	; 0x5fc
//	nh.subscribe(speedD);
	nh.subscribe(rpm_left_sub);
	nh.subscribe(rpm_right_sub);


	NBT_init(&right_can_msg_nbt, 9);
 8008a22:	2109      	movs	r1, #9
 8008a24:	481f      	ldr	r0, [pc, #124]	; (8008aa4 <init_ROS+0x24c>)
 8008a26:	f001 fbf5 	bl	800a214 <_Z8NBT_initP5nbt_tm>
	NBT_init(&left_can_msg_nbt, 9);
 8008a2a:	2109      	movs	r1, #9
 8008a2c:	481e      	ldr	r0, [pc, #120]	; (8008aa8 <init_ROS+0x250>)
 8008a2e:	f001 fbf1 	bl	800a214 <_Z8NBT_initP5nbt_tm>
	NBT_init(&rpm_left_nbt, 9);
 8008a32:	2109      	movs	r1, #9
 8008a34:	481d      	ldr	r0, [pc, #116]	; (8008aac <init_ROS+0x254>)
 8008a36:	f001 fbed 	bl	800a214 <_Z8NBT_initP5nbt_tm>
	NBT_init(&rpm_right_nbt, 9);
 8008a3a:	2109      	movs	r1, #9
 8008a3c:	481c      	ldr	r0, [pc, #112]	; (8008ab0 <init_ROS+0x258>)
 8008a3e:	f001 fbe9 	bl	800a214 <_Z8NBT_initP5nbt_tm>
	NBT_init(&gyro_nbt, 9);
 8008a42:	2109      	movs	r1, #9
 8008a44:	481b      	ldr	r0, [pc, #108]	; (8008ab4 <init_ROS+0x25c>)
 8008a46:	f001 fbe5 	bl	800a214 <_Z8NBT_initP5nbt_tm>
	NBT_init(&vector_nbt, 9);
 8008a4a:	2109      	movs	r1, #9
 8008a4c:	481a      	ldr	r0, [pc, #104]	; (8008ab8 <init_ROS+0x260>)
 8008a4e:	f001 fbe1 	bl	800a214 <_Z8NBT_initP5nbt_tm>
	NBT_init(&accel_nbt, 9);
 8008a52:	2109      	movs	r1, #9
 8008a54:	4819      	ldr	r0, [pc, #100]	; (8008abc <init_ROS+0x264>)
 8008a56:	f001 fbdd 	bl	800a214 <_Z8NBT_initP5nbt_tm>
	NBT_init(&ros_nbt, 1);
 8008a5a:	2101      	movs	r1, #1
 8008a5c:	4818      	ldr	r0, [pc, #96]	; (8008ac0 <init_ROS+0x268>)
 8008a5e:	f001 fbd9 	bl	800a214 <_Z8NBT_initP5nbt_tm>
	NBT_init(&id_nbt, 9);
 8008a62:	2109      	movs	r1, #9
 8008a64:	4817      	ldr	r0, [pc, #92]	; (8008ac4 <init_ROS+0x26c>)
}
 8008a66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	NBT_init(&id_nbt, 9);
 8008a6a:	f001 bbd3 	b.w	800a214 <_Z8NBT_initP5nbt_tm>
 8008a6e:	bf00      	nop
 8008a70:	20000200 	.word	0x20000200
 8008a74:	200052e0 	.word	0x200052e0
 8008a78:	2000073c 	.word	0x2000073c
 8008a7c:	20000750 	.word	0x20000750
 8008a80:	20000764 	.word	0x20000764
 8008a84:	20000778 	.word	0x20000778
 8008a88:	2000078c 	.word	0x2000078c
 8008a8c:	200007a0 	.word	0x200007a0
 8008a90:	200007b4 	.word	0x200007b4
 8008a94:	200007c8 	.word	0x200007c8
 8008a98:	20000684 	.word	0x20000684
 8008a9c:	200007dc 	.word	0x200007dc
 8008aa0:	200007f8 	.word	0x200007f8
 8008aa4:	20000814 	.word	0x20000814
 8008aa8:	2000081c 	.word	0x2000081c
 8008aac:	20000824 	.word	0x20000824
 8008ab0:	2000082c 	.word	0x2000082c
 8008ab4:	20000834 	.word	0x20000834
 8008ab8:	2000083c 	.word	0x2000083c
 8008abc:	20000844 	.word	0x20000844
 8008ac0:	2000084c 	.word	0x2000084c
 8008ac4:	20000854 	.word	0x20000854

08008ac8 <rpm_right_handler>:
	  }
}


extern "C" void rpm_right_handler(void)
{
 8008ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  if (NBT_handler(&rpm_right_nbt))
 8008acc:	4c2b      	ldr	r4, [pc, #172]	; (8008b7c <rpm_right_handler+0xb4>)
 8008ace:	f204 602c 	addw	r0, r4, #1580	; 0x62c
 8008ad2:	f001 fba7 	bl	800a224 <_Z11NBT_handlerP5nbt_t>
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	d03c      	beq.n	8008b54 <rpm_right_handler+0x8c>
	  {
		  if (sideRXDataRight == 1) {
 8008ada:	4b29      	ldr	r3, [pc, #164]	; (8008b80 <rpm_right_handler+0xb8>)
 8008adc:	f993 3000 	ldrsb.w	r3, [r3]
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d039      	beq.n	8008b58 <rpm_right_handler+0x90>

			  uint_msg_right.data = speedRXDataRight;

		  }
		  else if (sideRXDataRight == 2) {
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d042      	beq.n	8008b6e <rpm_right_handler+0xa6>

			  uint_msg_right.data = -speedRXDataRight;

		  }
		  else {
			  uint_msg_right.data = 0;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	f884 3678 	strb.w	r3, [r4, #1656]	; 0x678
 8008aee:	f8d4 0584 	ldr.w	r0, [r4, #1412]	; 0x584
 8008af2:	4a24      	ldr	r2, [pc, #144]	; (8008b84 <rpm_right_handler+0xbc>)
    msg_(msg),
    endpoint_(endpoint) {};

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
 8008af4:	6805      	ldr	r5, [r0, #0]
 8008af6:	f8d4 1580 	ldr.w	r1, [r4, #1408]	; 0x580
 8008afa:	682c      	ldr	r4, [r5, #0]
 8008afc:	4294      	cmp	r4, r2
 8008afe:	d131      	bne.n	8008b64 <rpm_right_handler+0x9c>
    if (id >= 100 && !configured_)
 8008b00:	2963      	cmp	r1, #99	; 0x63
 8008b02:	dd02      	ble.n	8008b0a <rpm_right_handler+0x42>
 8008b04:	f890 24f4 	ldrb.w	r2, [r0, #1268]	; 0x4f4
 8008b08:	b322      	cbz	r2, 8008b54 <rpm_right_handler+0x8c>
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8008b0a:	f341 2507 	sbfx	r5, r1, #8, #8
      chk += message_out[i];
 8008b0e:	b2ea      	uxtb	r2, r5
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	fa52 f281 	uxtab	r2, r2, r1
 8008b16:	441a      	add	r2, r3
    message_out[1] = PROTOCOL_VER;
 8008b18:	24fe      	movs	r4, #254	; 0xfe
 8008b1a:	f880 321f 	strb.w	r3, [r0, #543]	; 0x21f
    message_out[0] = 0xff;
 8008b1e:	27ff      	movs	r7, #255	; 0xff
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8008b20:	2601      	movs	r6, #1
    message_out[l++] = 255 - (chk % 256);
 8008b22:	43d2      	mvns	r2, r2
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8008b24:	2300      	movs	r3, #0
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8008b26:	f880 121d 	strb.w	r1, [r0, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8008b2a:	f880 521e 	strb.w	r5, [r0, #542]	; 0x21e
    message_out[l++] = 255 - (chk % 256);
 8008b2e:	f880 2220 	strb.w	r2, [r0, #544]	; 0x220
    message_out[0] = 0xff;
 8008b32:	f880 7218 	strb.w	r7, [r0, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 8008b36:	f880 4219 	strb.w	r4, [r0, #537]	; 0x219
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8008b3a:	f880 421c 	strb.w	r4, [r0, #540]	; 0x21c
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8008b3e:	f880 621a 	strb.w	r6, [r0, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8008b42:	f880 321b 	strb.w	r3, [r0, #539]	; 0x21b
 8008b46:	2109      	movs	r1, #9
 8008b48:	f500 7006 	add.w	r0, r0, #536	; 0x218
		  }
//		  if (uint_msg_right.data !=0)
		  rpm_right.publish(&uint_msg_right);
	  }
}
 8008b4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b50:	f7fe bec8 	b.w	80078e4 <CDC_Transmit_FS>
 8008b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			  uint_msg_right.data = speedRXDataRight;
 8008b58:	4b0b      	ldr	r3, [pc, #44]	; (8008b88 <rpm_right_handler+0xc0>)
 8008b5a:	f993 3000 	ldrsb.w	r3, [r3]
 8008b5e:	f884 3678 	strb.w	r3, [r4, #1656]	; 0x678
 8008b62:	e7c4      	b.n	8008aee <rpm_right_handler+0x26>
 8008b64:	4623      	mov	r3, r4
 8008b66:	4a09      	ldr	r2, [pc, #36]	; (8008b8c <rpm_right_handler+0xc4>)
}
 8008b68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b6c:	4718      	bx	r3
			  uint_msg_right.data = -speedRXDataRight;
 8008b6e:	4b06      	ldr	r3, [pc, #24]	; (8008b88 <rpm_right_handler+0xc0>)
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	425b      	negs	r3, r3
 8008b74:	b25b      	sxtb	r3, r3
 8008b76:	f884 3678 	strb.w	r3, [r4, #1656]	; 0x678
 8008b7a:	e7b8      	b.n	8008aee <rpm_right_handler+0x26>
 8008b7c:	20000200 	.word	0x20000200
 8008b80:	20004b95 	.word	0x20004b95
 8008b84:	080085b1 	.word	0x080085b1
 8008b88:	20004b94 	.word	0x20004b94
 8008b8c:	20000874 	.word	0x20000874

08008b90 <rpm_left_handler>:

extern "C" void rpm_left_handler(void)
{
 8008b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  if (NBT_handler(&rpm_left_nbt))
 8008b94:	4c2b      	ldr	r4, [pc, #172]	; (8008c44 <rpm_left_handler+0xb4>)
 8008b96:	f204 6024 	addw	r0, r4, #1572	; 0x624
 8008b9a:	f001 fb43 	bl	800a224 <_Z11NBT_handlerP5nbt_t>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	d03c      	beq.n	8008c1c <rpm_left_handler+0x8c>
	  {
		  if (sideRXDataLeft == 2) {
 8008ba2:	4b29      	ldr	r3, [pc, #164]	; (8008c48 <rpm_left_handler+0xb8>)
 8008ba4:	f993 3000 	ldrsb.w	r3, [r3]
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d039      	beq.n	8008c20 <rpm_left_handler+0x90>

			  uint_msg_left.data = speedRXDataLeft;

		  }
		  else if (sideRXDataLeft == 1) {
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d042      	beq.n	8008c36 <rpm_left_handler+0xa6>

			  uint_msg_left.data = -speedRXDataLeft;

		  }
		  else {
			  uint_msg_left.data = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	f884 3680 	strb.w	r3, [r4, #1664]	; 0x680
 8008bb6:	f8d4 0598 	ldr.w	r0, [r4, #1432]	; 0x598
 8008bba:	4a24      	ldr	r2, [pc, #144]	; (8008c4c <rpm_left_handler+0xbc>)
 8008bbc:	6805      	ldr	r5, [r0, #0]
 8008bbe:	f8d4 1594 	ldr.w	r1, [r4, #1428]	; 0x594
 8008bc2:	682c      	ldr	r4, [r5, #0]
 8008bc4:	4294      	cmp	r4, r2
 8008bc6:	d131      	bne.n	8008c2c <rpm_left_handler+0x9c>
    if (id >= 100 && !configured_)
 8008bc8:	2963      	cmp	r1, #99	; 0x63
 8008bca:	dd02      	ble.n	8008bd2 <rpm_left_handler+0x42>
 8008bcc:	f890 24f4 	ldrb.w	r2, [r0, #1268]	; 0x4f4
 8008bd0:	b322      	cbz	r2, 8008c1c <rpm_left_handler+0x8c>
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8008bd2:	f341 2507 	sbfx	r5, r1, #8, #8
      chk += message_out[i];
 8008bd6:	b2ea      	uxtb	r2, r5
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	fa52 f281 	uxtab	r2, r2, r1
 8008bde:	441a      	add	r2, r3
    message_out[1] = PROTOCOL_VER;
 8008be0:	24fe      	movs	r4, #254	; 0xfe
 8008be2:	f880 321f 	strb.w	r3, [r0, #543]	; 0x21f
    message_out[0] = 0xff;
 8008be6:	27ff      	movs	r7, #255	; 0xff
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8008be8:	2601      	movs	r6, #1
    message_out[l++] = 255 - (chk % 256);
 8008bea:	43d2      	mvns	r2, r2
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8008bec:	2300      	movs	r3, #0
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8008bee:	f880 121d 	strb.w	r1, [r0, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8008bf2:	f880 521e 	strb.w	r5, [r0, #542]	; 0x21e
    message_out[l++] = 255 - (chk % 256);
 8008bf6:	f880 2220 	strb.w	r2, [r0, #544]	; 0x220
    message_out[0] = 0xff;
 8008bfa:	f880 7218 	strb.w	r7, [r0, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 8008bfe:	f880 4219 	strb.w	r4, [r0, #537]	; 0x219
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8008c02:	f880 421c 	strb.w	r4, [r0, #540]	; 0x21c
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8008c06:	f880 621a 	strb.w	r6, [r0, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8008c0a:	f880 321b 	strb.w	r3, [r0, #539]	; 0x21b
 8008c0e:	2109      	movs	r1, #9
 8008c10:	f500 7006 	add.w	r0, r0, #536	; 0x218
		  }
		  rpm_left.publish(&uint_msg_left);
	  }
}
 8008c14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c18:	f7fe be64 	b.w	80078e4 <CDC_Transmit_FS>
 8008c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			  uint_msg_left.data = speedRXDataLeft;
 8008c20:	4b0b      	ldr	r3, [pc, #44]	; (8008c50 <rpm_left_handler+0xc0>)
 8008c22:	f993 3000 	ldrsb.w	r3, [r3]
 8008c26:	f884 3680 	strb.w	r3, [r4, #1664]	; 0x680
 8008c2a:	e7c4      	b.n	8008bb6 <rpm_left_handler+0x26>
 8008c2c:	4623      	mov	r3, r4
 8008c2e:	4a09      	ldr	r2, [pc, #36]	; (8008c54 <rpm_left_handler+0xc4>)
}
 8008c30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c34:	4718      	bx	r3
			  uint_msg_left.data = -speedRXDataLeft;
 8008c36:	4b06      	ldr	r3, [pc, #24]	; (8008c50 <rpm_left_handler+0xc0>)
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	425b      	negs	r3, r3
 8008c3c:	b25b      	sxtb	r3, r3
 8008c3e:	f884 3680 	strb.w	r3, [r4, #1664]	; 0x680
 8008c42:	e7b8      	b.n	8008bb6 <rpm_left_handler+0x26>
 8008c44:	20000200 	.word	0x20000200
 8008c48:	20004bdc 	.word	0x20004bdc
 8008c4c:	080085b1 	.word	0x080085b1
 8008c50:	20004944 	.word	0x20004944
 8008c54:	2000087c 	.word	0x2000087c

08008c58 <gyro_handler>:
	 }

}

extern "C" void gyro_handler(void)
{
 8008c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (NBT_handler(&gyro_nbt))
 8008c5c:	4c6e      	ldr	r4, [pc, #440]	; (8008e18 <gyro_handler+0x1c0>)
 8008c5e:	f204 6034 	addw	r0, r4, #1588	; 0x634
 8008c62:	f001 fadf 	bl	800a224 <_Z11NBT_handlerP5nbt_t>
 8008c66:	b908      	cbnz	r0, 8008c6c <gyro_handler+0x14>
 8008c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c6c:	f8d4 055c 	ldr.w	r0, [r4, #1372]	; 0x55c
	   {

		  gyro_msg.x = gyroX;
 8008c70:	4d6a      	ldr	r5, [pc, #424]	; (8008e1c <gyro_handler+0x1c4>)
 8008c72:	6803      	ldr	r3, [r0, #0]
		  gyro_msg.y = gyroY;
 8008c74:	496a      	ldr	r1, [pc, #424]	; (8008e20 <gyro_handler+0x1c8>)
		  gyro_msg.z = gyroZ;
 8008c76:	4a6b      	ldr	r2, [pc, #428]	; (8008e24 <gyro_handler+0x1cc>)
 8008c78:	681b      	ldr	r3, [r3, #0]
		  gyro_msg.x = gyroX;
 8008c7a:	edd5 6a00 	vldr	s13, [r5]
 8008c7e:	4d6a      	ldr	r5, [pc, #424]	; (8008e28 <gyro_handler+0x1d0>)
		  gyro_msg.y = gyroY;
 8008c80:	ed91 7a00 	vldr	s14, [r1]
		  gyro_msg.z = gyroZ;
 8008c84:	edd2 7a00 	vldr	s15, [r2]
 8008c88:	f8d4 1558 	ldr.w	r1, [r4, #1368]	; 0x558
		  gyro_msg.x = gyroX;
 8008c8c:	f204 628c 	addw	r2, r4, #1676	; 0x68c
 8008c90:	42ab      	cmp	r3, r5
 8008c92:	edc2 6a01 	vstr	s13, [r2, #4]
		  gyro_msg.y = gyroY;
 8008c96:	ed82 7a02 	vstr	s14, [r2, #8]
		  gyro_msg.z = gyroZ;
 8008c9a:	edc2 7a03 	vstr	s15, [r2, #12]
 8008c9e:	f040 80b8 	bne.w	8008e12 <gyro_handler+0x1ba>
    if (id >= 100 && !configured_)
 8008ca2:	2963      	cmp	r1, #99	; 0x63
 8008ca4:	dd03      	ble.n	8008cae <gyro_handler+0x56>
 8008ca6:	f890 34f4 	ldrb.w	r3, [r0, #1268]	; 0x4f4
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d0dc      	beq.n	8008c68 <gyro_handler+0x10>
    int32_t exp = ((*val >> 23) & 255);
 8008cae:	ee16 3a90 	vmov	r3, s13
 8008cb2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    if (exp != 0)
 8008cb6:	2a00      	cmp	r2, #0
 8008cb8:	f040 80a0 	bne.w	8008dfc <gyro_handler+0x1a4>
 8008cbc:	4614      	mov	r4, r2
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008cbe:	f3c3 45c3 	ubfx	r5, r3, #19, #4
    *(outbuffer++) = (sig << 5) & 0xff;
 8008cc2:	015f      	lsls	r7, r3, #5
    *(outbuffer++) = (sig >> 3) & 0xff;
 8008cc4:	10de      	asrs	r6, r3, #3
    if (f < 0)
 8008cc6:	eef5 6ac0 	vcmpe.f32	s13, #0.0
    *(outbuffer++) = (sig >> 11) & 0xff;
 8008cca:	12db      	asrs	r3, r3, #11
 8008ccc:	f880 3224 	strb.w	r3, [r0, #548]	; 0x224
    if (f < 0)
 8008cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    int32_t exp = ((*val >> 23) & 255);
 8008cd4:	ee17 3a10 	vmov	r3, s14
      *(outbuffer - 1) |= 0x80;
 8008cd8:	bf48      	it	mi
 8008cda:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008cde:	432c      	orrs	r4, r5
      *(outbuffer - 1) |= 0x80;
 8008ce0:	f880 2226 	strb.w	r2, [r0, #550]	; 0x226
    *(outbuffer++) = 0;
 8008ce4:	2500      	movs	r5, #0
    int32_t exp = ((*val >> 23) & 255);
 8008ce6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008cea:	f880 4225 	strb.w	r4, [r0, #549]	; 0x225
    *(outbuffer++) = 0;
 8008cee:	f880 521f 	strb.w	r5, [r0, #543]	; 0x21f
    *(outbuffer++) = 0;
 8008cf2:	f880 5220 	strb.w	r5, [r0, #544]	; 0x220
    *(outbuffer++) = 0;
 8008cf6:	f880 5221 	strb.w	r5, [r0, #545]	; 0x221
    *(outbuffer++) = (sig << 5) & 0xff;
 8008cfa:	f880 7222 	strb.w	r7, [r0, #546]	; 0x222
    *(outbuffer++) = (sig >> 3) & 0xff;
 8008cfe:	f880 6223 	strb.w	r6, [r0, #547]	; 0x223
    if (exp != 0)
 8008d02:	2a00      	cmp	r2, #0
 8008d04:	f000 8083 	beq.w	8008e0e <gyro_handler+0x1b6>
      exp += 1023 - 127;
 8008d08:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8008d0c:	0114      	lsls	r4, r2, #4
 8008d0e:	b264      	sxtb	r4, r4
 8008d10:	f3c2 1207 	ubfx	r2, r2, #4, #8
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008d14:	f3c3 45c3 	ubfx	r5, r3, #19, #4
    *(outbuffer++) = (sig << 5) & 0xff;
 8008d18:	015f      	lsls	r7, r3, #5
    *(outbuffer++) = (sig >> 3) & 0xff;
 8008d1a:	10de      	asrs	r6, r3, #3
    if (f < 0)
 8008d1c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    *(outbuffer++) = (sig >> 11) & 0xff;
 8008d20:	12db      	asrs	r3, r3, #11
 8008d22:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
    if (f < 0)
 8008d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    int32_t exp = ((*val >> 23) & 255);
 8008d2a:	ee17 3a90 	vmov	r3, s15
      *(outbuffer - 1) |= 0x80;
 8008d2e:	bf48      	it	mi
 8008d30:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008d34:	432c      	orrs	r4, r5
      *(outbuffer - 1) |= 0x80;
 8008d36:	f880 222e 	strb.w	r2, [r0, #558]	; 0x22e
    *(outbuffer++) = 0;
 8008d3a:	2500      	movs	r5, #0
    int32_t exp = ((*val >> 23) & 255);
 8008d3c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008d40:	f880 422d 	strb.w	r4, [r0, #557]	; 0x22d
    *(outbuffer++) = 0;
 8008d44:	f880 5227 	strb.w	r5, [r0, #551]	; 0x227
    *(outbuffer++) = 0;
 8008d48:	f880 5228 	strb.w	r5, [r0, #552]	; 0x228
    *(outbuffer++) = 0;
 8008d4c:	f880 5229 	strb.w	r5, [r0, #553]	; 0x229
    *(outbuffer++) = (sig << 5) & 0xff;
 8008d50:	f880 722a 	strb.w	r7, [r0, #554]	; 0x22a
    *(outbuffer++) = (sig >> 3) & 0xff;
 8008d54:	f880 622b 	strb.w	r6, [r0, #555]	; 0x22b
    if (exp != 0)
 8008d58:	2a00      	cmp	r2, #0
 8008d5a:	d056      	beq.n	8008e0a <gyro_handler+0x1b2>
      exp += 1023 - 127;
 8008d5c:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8008d60:	0114      	lsls	r4, r2, #4
 8008d62:	b264      	sxtb	r4, r4
 8008d64:	f3c2 1207 	ubfx	r2, r2, #4, #8
    if (f < 0)
 8008d68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008d6c:	f3c3 45c3 	ubfx	r5, r3, #19, #4
    if (f < 0)
 8008d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008d74:	ea44 0405 	orr.w	r4, r4, r5
    *(outbuffer++) = (sig << 5) & 0xff;
 8008d78:	ea4f 1743 	mov.w	r7, r3, lsl #5
    *(outbuffer++) = 0;
 8008d7c:	f04f 0500 	mov.w	r5, #0
    *(outbuffer++) = (sig >> 3) & 0xff;
 8008d80:	ea4f 06e3 	mov.w	r6, r3, asr #3
      *(outbuffer - 1) |= 0x80;
 8008d84:	bf48      	it	mi
 8008d86:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = (sig >> 11) & 0xff;
 8008d8a:	12db      	asrs	r3, r3, #11
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008d8c:	f880 4235 	strb.w	r4, [r0, #565]	; 0x235
    *(outbuffer++) = 0;
 8008d90:	f880 522f 	strb.w	r5, [r0, #559]	; 0x22f
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8008d94:	2418      	movs	r4, #24
    *(outbuffer++) = 0;
 8008d96:	f880 5230 	strb.w	r5, [r0, #560]	; 0x230
    *(outbuffer++) = 0;
 8008d9a:	f880 5231 	strb.w	r5, [r0, #561]	; 0x231
    *(outbuffer++) = (sig << 5) & 0xff;
 8008d9e:	f880 7232 	strb.w	r7, [r0, #562]	; 0x232
    *(outbuffer++) = (sig >> 3) & 0xff;
 8008da2:	f880 6233 	strb.w	r6, [r0, #563]	; 0x233
    *(outbuffer++) = (sig >> 11) & 0xff;
 8008da6:	f880 3234 	strb.w	r3, [r0, #564]	; 0x234
      *(outbuffer - 1) |= 0x80;
 8008daa:	f880 2236 	strb.w	r2, [r0, #566]	; 0x236
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8008dae:	23e7      	movs	r3, #231	; 0xe7
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8008db0:	f341 2707 	sbfx	r7, r1, #8, #8
    message_out[0] = 0xff;
 8008db4:	26ff      	movs	r6, #255	; 0xff
    message_out[1] = PROTOCOL_VER;
 8008db6:	25fe      	movs	r5, #254	; 0xfe
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8008db8:	2200      	movs	r2, #0
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8008dba:	f880 421a 	strb.w	r4, [r0, #538]	; 0x21a
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8008dbe:	f880 321c 	strb.w	r3, [r0, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8008dc2:	f880 121d 	strb.w	r1, [r0, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8008dc6:	f880 721e 	strb.w	r7, [r0, #542]	; 0x21e
    message_out[0] = 0xff;
 8008dca:	f880 6218 	strb.w	r6, [r0, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 8008dce:	f880 5219 	strb.w	r5, [r0, #537]	; 0x219
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8008dd2:	f880 221b 	strb.w	r2, [r0, #539]	; 0x21b
 8008dd6:	f500 7307 	add.w	r3, r0, #540	; 0x21c
 8008dda:	f200 2436 	addw	r4, r0, #566	; 0x236
      chk += message_out[i];
 8008dde:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 8008de2:	429c      	cmp	r4, r3
      chk += message_out[i];
 8008de4:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
 8008de6:	d1fa      	bne.n	8008dde <gyro_handler+0x186>
    message_out[l++] = 255 - (chk % 256);
 8008de8:	43d2      	mvns	r2, r2
 8008dea:	f880 2237 	strb.w	r2, [r0, #567]	; 0x237
 8008dee:	2120      	movs	r1, #32
 8008df0:	f500 7006 	add.w	r0, r0, #536	; 0x218
//		  vx++;
//		  vy++;
//		  vz++;

       }
}
 8008df4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008df8:	f7fe bd74 	b.w	80078e4 <CDC_Transmit_FS>
      exp += 1023 - 127;
 8008dfc:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8008e00:	0114      	lsls	r4, r2, #4
 8008e02:	b264      	sxtb	r4, r4
 8008e04:	f3c2 1207 	ubfx	r2, r2, #4, #8
 8008e08:	e759      	b.n	8008cbe <gyro_handler+0x66>
    if (exp != 0)
 8008e0a:	4614      	mov	r4, r2
 8008e0c:	e7ac      	b.n	8008d68 <gyro_handler+0x110>
 8008e0e:	4614      	mov	r4, r2
 8008e10:	e780      	b.n	8008d14 <gyro_handler+0xbc>
 8008e12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e16:	4718      	bx	r3
 8008e18:	20000200 	.word	0x20000200
 8008e1c:	20004930 	.word	0x20004930
 8008e20:	20004bd8 	.word	0x20004bd8
 8008e24:	20004968 	.word	0x20004968
 8008e28:	080085b1 	.word	0x080085b1

08008e2c <accel_handler>:

extern "C" void accel_handler(void)
{
 8008e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (NBT_handler(&accel_nbt))
 8008e30:	4c6e      	ldr	r4, [pc, #440]	; (8008fec <accel_handler+0x1c0>)
 8008e32:	f204 6044 	addw	r0, r4, #1604	; 0x644
 8008e36:	f001 f9f5 	bl	800a224 <_Z11NBT_handlerP5nbt_t>
 8008e3a:	b908      	cbnz	r0, 8008e40 <accel_handler+0x14>
 8008e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e40:	f8d4 0570 	ldr.w	r0, [r4, #1392]	; 0x570
	   {
          accel_msg.x = accelX;
 8008e44:	4d6a      	ldr	r5, [pc, #424]	; (8008ff0 <accel_handler+0x1c4>)
 8008e46:	6803      	ldr	r3, [r0, #0]
		  accel_msg.y = accelY;
 8008e48:	496a      	ldr	r1, [pc, #424]	; (8008ff4 <accel_handler+0x1c8>)
		  accel_msg.z = accelZ;
 8008e4a:	4a6b      	ldr	r2, [pc, #428]	; (8008ff8 <accel_handler+0x1cc>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
          accel_msg.x = accelX;
 8008e4e:	edd5 6a00 	vldr	s13, [r5]
 8008e52:	4d6a      	ldr	r5, [pc, #424]	; (8008ffc <accel_handler+0x1d0>)
		  accel_msg.y = accelY;
 8008e54:	ed91 7a00 	vldr	s14, [r1]
		  accel_msg.z = accelZ;
 8008e58:	edd2 7a00 	vldr	s15, [r2]
 8008e5c:	f8d4 156c 	ldr.w	r1, [r4, #1388]	; 0x56c
          accel_msg.x = accelX;
 8008e60:	f204 629c 	addw	r2, r4, #1692	; 0x69c
 8008e64:	42ab      	cmp	r3, r5
 8008e66:	edc2 6a01 	vstr	s13, [r2, #4]
		  accel_msg.y = accelY;
 8008e6a:	ed82 7a02 	vstr	s14, [r2, #8]
		  accel_msg.z = accelZ;
 8008e6e:	edc2 7a03 	vstr	s15, [r2, #12]
 8008e72:	f040 80b8 	bne.w	8008fe6 <accel_handler+0x1ba>
    if (id >= 100 && !configured_)
 8008e76:	2963      	cmp	r1, #99	; 0x63
 8008e78:	dd03      	ble.n	8008e82 <accel_handler+0x56>
 8008e7a:	f890 34f4 	ldrb.w	r3, [r0, #1268]	; 0x4f4
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d0dc      	beq.n	8008e3c <accel_handler+0x10>
    int32_t exp = ((*val >> 23) & 255);
 8008e82:	ee16 3a90 	vmov	r3, s13
 8008e86:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    if (exp != 0)
 8008e8a:	2a00      	cmp	r2, #0
 8008e8c:	f040 80a0 	bne.w	8008fd0 <accel_handler+0x1a4>
 8008e90:	4614      	mov	r4, r2
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008e92:	f3c3 45c3 	ubfx	r5, r3, #19, #4
    *(outbuffer++) = (sig << 5) & 0xff;
 8008e96:	015f      	lsls	r7, r3, #5
    *(outbuffer++) = (sig >> 3) & 0xff;
 8008e98:	10de      	asrs	r6, r3, #3
    if (f < 0)
 8008e9a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
    *(outbuffer++) = (sig >> 11) & 0xff;
 8008e9e:	12db      	asrs	r3, r3, #11
 8008ea0:	f880 3224 	strb.w	r3, [r0, #548]	; 0x224
    if (f < 0)
 8008ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    int32_t exp = ((*val >> 23) & 255);
 8008ea8:	ee17 3a10 	vmov	r3, s14
      *(outbuffer - 1) |= 0x80;
 8008eac:	bf48      	it	mi
 8008eae:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008eb2:	432c      	orrs	r4, r5
      *(outbuffer - 1) |= 0x80;
 8008eb4:	f880 2226 	strb.w	r2, [r0, #550]	; 0x226
    *(outbuffer++) = 0;
 8008eb8:	2500      	movs	r5, #0
    int32_t exp = ((*val >> 23) & 255);
 8008eba:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008ebe:	f880 4225 	strb.w	r4, [r0, #549]	; 0x225
    *(outbuffer++) = 0;
 8008ec2:	f880 521f 	strb.w	r5, [r0, #543]	; 0x21f
    *(outbuffer++) = 0;
 8008ec6:	f880 5220 	strb.w	r5, [r0, #544]	; 0x220
    *(outbuffer++) = 0;
 8008eca:	f880 5221 	strb.w	r5, [r0, #545]	; 0x221
    *(outbuffer++) = (sig << 5) & 0xff;
 8008ece:	f880 7222 	strb.w	r7, [r0, #546]	; 0x222
    *(outbuffer++) = (sig >> 3) & 0xff;
 8008ed2:	f880 6223 	strb.w	r6, [r0, #547]	; 0x223
    if (exp != 0)
 8008ed6:	2a00      	cmp	r2, #0
 8008ed8:	f000 8083 	beq.w	8008fe2 <accel_handler+0x1b6>
      exp += 1023 - 127;
 8008edc:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8008ee0:	0114      	lsls	r4, r2, #4
 8008ee2:	b264      	sxtb	r4, r4
 8008ee4:	f3c2 1207 	ubfx	r2, r2, #4, #8
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008ee8:	f3c3 45c3 	ubfx	r5, r3, #19, #4
    *(outbuffer++) = (sig << 5) & 0xff;
 8008eec:	015f      	lsls	r7, r3, #5
    *(outbuffer++) = (sig >> 3) & 0xff;
 8008eee:	10de      	asrs	r6, r3, #3
    if (f < 0)
 8008ef0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    *(outbuffer++) = (sig >> 11) & 0xff;
 8008ef4:	12db      	asrs	r3, r3, #11
 8008ef6:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
    if (f < 0)
 8008efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    int32_t exp = ((*val >> 23) & 255);
 8008efe:	ee17 3a90 	vmov	r3, s15
      *(outbuffer - 1) |= 0x80;
 8008f02:	bf48      	it	mi
 8008f04:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008f08:	432c      	orrs	r4, r5
      *(outbuffer - 1) |= 0x80;
 8008f0a:	f880 222e 	strb.w	r2, [r0, #558]	; 0x22e
    *(outbuffer++) = 0;
 8008f0e:	2500      	movs	r5, #0
    int32_t exp = ((*val >> 23) & 255);
 8008f10:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008f14:	f880 422d 	strb.w	r4, [r0, #557]	; 0x22d
    *(outbuffer++) = 0;
 8008f18:	f880 5227 	strb.w	r5, [r0, #551]	; 0x227
    *(outbuffer++) = 0;
 8008f1c:	f880 5228 	strb.w	r5, [r0, #552]	; 0x228
    *(outbuffer++) = 0;
 8008f20:	f880 5229 	strb.w	r5, [r0, #553]	; 0x229
    *(outbuffer++) = (sig << 5) & 0xff;
 8008f24:	f880 722a 	strb.w	r7, [r0, #554]	; 0x22a
    *(outbuffer++) = (sig >> 3) & 0xff;
 8008f28:	f880 622b 	strb.w	r6, [r0, #555]	; 0x22b
    if (exp != 0)
 8008f2c:	2a00      	cmp	r2, #0
 8008f2e:	d056      	beq.n	8008fde <accel_handler+0x1b2>
      exp += 1023 - 127;
 8008f30:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8008f34:	0114      	lsls	r4, r2, #4
 8008f36:	b264      	sxtb	r4, r4
 8008f38:	f3c2 1207 	ubfx	r2, r2, #4, #8
    if (f < 0)
 8008f3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008f40:	f3c3 45c3 	ubfx	r5, r3, #19, #4
    if (f < 0)
 8008f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008f48:	ea44 0405 	orr.w	r4, r4, r5
    *(outbuffer++) = (sig << 5) & 0xff;
 8008f4c:	ea4f 1743 	mov.w	r7, r3, lsl #5
    *(outbuffer++) = 0;
 8008f50:	f04f 0500 	mov.w	r5, #0
    *(outbuffer++) = (sig >> 3) & 0xff;
 8008f54:	ea4f 06e3 	mov.w	r6, r3, asr #3
      *(outbuffer - 1) |= 0x80;
 8008f58:	bf48      	it	mi
 8008f5a:	f062 027f 	ornmi	r2, r2, #127	; 0x7f
    *(outbuffer++) = (sig >> 11) & 0xff;
 8008f5e:	12db      	asrs	r3, r3, #11
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8008f60:	f880 4235 	strb.w	r4, [r0, #565]	; 0x235
    *(outbuffer++) = 0;
 8008f64:	f880 522f 	strb.w	r5, [r0, #559]	; 0x22f
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8008f68:	2418      	movs	r4, #24
    *(outbuffer++) = 0;
 8008f6a:	f880 5230 	strb.w	r5, [r0, #560]	; 0x230
    *(outbuffer++) = 0;
 8008f6e:	f880 5231 	strb.w	r5, [r0, #561]	; 0x231
    *(outbuffer++) = (sig << 5) & 0xff;
 8008f72:	f880 7232 	strb.w	r7, [r0, #562]	; 0x232
    *(outbuffer++) = (sig >> 3) & 0xff;
 8008f76:	f880 6233 	strb.w	r6, [r0, #563]	; 0x233
    *(outbuffer++) = (sig >> 11) & 0xff;
 8008f7a:	f880 3234 	strb.w	r3, [r0, #564]	; 0x234
      *(outbuffer - 1) |= 0x80;
 8008f7e:	f880 2236 	strb.w	r2, [r0, #566]	; 0x236
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8008f82:	23e7      	movs	r3, #231	; 0xe7
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8008f84:	f341 2707 	sbfx	r7, r1, #8, #8
    message_out[0] = 0xff;
 8008f88:	26ff      	movs	r6, #255	; 0xff
    message_out[1] = PROTOCOL_VER;
 8008f8a:	25fe      	movs	r5, #254	; 0xfe
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8008f8c:	2200      	movs	r2, #0
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8008f8e:	f880 421a 	strb.w	r4, [r0, #538]	; 0x21a
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8008f92:	f880 321c 	strb.w	r3, [r0, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8008f96:	f880 121d 	strb.w	r1, [r0, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8008f9a:	f880 721e 	strb.w	r7, [r0, #542]	; 0x21e
    message_out[0] = 0xff;
 8008f9e:	f880 6218 	strb.w	r6, [r0, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 8008fa2:	f880 5219 	strb.w	r5, [r0, #537]	; 0x219
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8008fa6:	f880 221b 	strb.w	r2, [r0, #539]	; 0x21b
 8008faa:	f500 7307 	add.w	r3, r0, #540	; 0x21c
 8008fae:	f200 2436 	addw	r4, r0, #566	; 0x236
      chk += message_out[i];
 8008fb2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 8008fb6:	429c      	cmp	r4, r3
      chk += message_out[i];
 8008fb8:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
 8008fba:	d1fa      	bne.n	8008fb2 <accel_handler+0x186>
    message_out[l++] = 255 - (chk % 256);
 8008fbc:	43d2      	mvns	r2, r2
 8008fbe:	f880 2237 	strb.w	r2, [r0, #567]	; 0x237
 8008fc2:	2120      	movs	r1, #32
 8008fc4:	f500 7006 	add.w	r0, r0, #536	; 0x218
//		  vx++;
//		  vy++;
//		  vz++;

       }
}
 8008fc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fcc:	f7fe bc8a 	b.w	80078e4 <CDC_Transmit_FS>
      exp += 1023 - 127;
 8008fd0:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8008fd4:	0114      	lsls	r4, r2, #4
 8008fd6:	b264      	sxtb	r4, r4
 8008fd8:	f3c2 1207 	ubfx	r2, r2, #4, #8
 8008fdc:	e759      	b.n	8008e92 <accel_handler+0x66>
    if (exp != 0)
 8008fde:	4614      	mov	r4, r2
 8008fe0:	e7ac      	b.n	8008f3c <accel_handler+0x110>
 8008fe2:	4614      	mov	r4, r2
 8008fe4:	e780      	b.n	8008ee8 <accel_handler+0xbc>
 8008fe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fea:	4718      	bx	r3
 8008fec:	20000200 	.word	0x20000200
 8008ff0:	200048d8 	.word	0x200048d8
 8008ff4:	200048cc 	.word	0x200048cc
 8008ff8:	20004b9c 	.word	0x20004b9c
 8008ffc:	080085b1 	.word	0x080085b1

08009000 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8009000:	b530      	push	{r4, r5, lr}
    publish(TopicInfo::ID_TIME, &t);
 8009002:	6801      	ldr	r1, [r0, #0]
 8009004:	4a18      	ldr	r2, [pc, #96]	; (8009068 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv+0x68>)
 8009006:	680d      	ldr	r5, [r1, #0]
      data()
 8009008:	4b18      	ldr	r3, [pc, #96]	; (800906c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv+0x6c>)
  void requestSyncTime()
 800900a:	b085      	sub	sp, #20
 800900c:	4295      	cmp	r5, r2
 800900e:	9301      	str	r3, [sp, #4]
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8009010:	f04f 0300 	mov.w	r3, #0
 8009014:	4604      	mov	r4, r0
 8009016:	9302      	str	r3, [sp, #8]
 8009018:	9303      	str	r3, [sp, #12]
 800901a:	d11c      	bne.n	8009056 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv+0x56>
    message_out[l++] = 255 - (chk % 256);
 800901c:	f06f 020a 	mvn.w	r2, #10
    message_out[0] = 0xff;
 8009020:	4813      	ldr	r0, [pc, #76]	; (8009070 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv+0x70>)
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8009022:	f884 3224 	strb.w	r3, [r4, #548]	; 0x224
 8009026:	f640 21f7 	movw	r1, #2807	; 0xaf7
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800902a:	f884 3225 	strb.w	r3, [r4, #549]	; 0x225
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800902e:	f884 3226 	strb.w	r3, [r4, #550]	; 0x226
 8009032:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
 8009036:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
 800903a:	f8c4 121c 	str.w	r1, [r4, #540]	; 0x21c
    message_out[l++] = 255 - (chk % 256);
 800903e:	f884 2227 	strb.w	r2, [r4, #551]	; 0x227
 8009042:	2110      	movs	r1, #16
 8009044:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8009048:	f7fe fc4c 	bl	80078e4 <CDC_Transmit_FS>
	}

	// Returns milliseconds since start of program
	unsigned long time(void)
	{
		return HAL_GetTick();
 800904c:	f7f8 f9fc 	bl	8001448 <HAL_GetTick>
    rt_time = hardware_.time();
 8009050:	60a0      	str	r0, [r4, #8]
  }
 8009052:	b005      	add	sp, #20
 8009054:	bd30      	pop	{r4, r5, pc}
    publish(TopicInfo::ID_TIME, &t);
 8009056:	aa01      	add	r2, sp, #4
 8009058:	210a      	movs	r1, #10
 800905a:	47a8      	blx	r5
 800905c:	f7f8 f9f4 	bl	8001448 <HAL_GetTick>
    rt_time = hardware_.time();
 8009060:	60a0      	str	r0, [r4, #8]
  }
 8009062:	b005      	add	sp, #20
 8009064:	bd30      	pop	{r4, r5, pc}
 8009066:	bf00      	nop
 8009068:	080085b1 	.word	0x080085b1
 800906c:	0800ac60 	.word	0x0800ac60
 8009070:	0008feff 	.word	0x0008feff

08009074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
  void negotiateTopics()
 8009074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009078:	b08d      	sub	sp, #52	; 0x34
      buffer_size(0)
 800907a:	4ad7      	ldr	r2, [pc, #860]	; (80093d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x364>)
 800907c:	4bd7      	ldr	r3, [pc, #860]	; (80093dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x368>)
 800907e:	9206      	str	r2, [sp, #24]
 8009080:	2200      	movs	r2, #0
 8009082:	4606      	mov	r6, r0
 8009084:	f500 6783 	add.w	r7, r0, #1048	; 0x418
 8009088:	f200 4b7c 	addw	fp, r0, #1148	; 0x47c
 800908c:	f8ad 201c 	strh.w	r2, [sp, #28]
 8009090:	920b      	str	r2, [sp, #44]	; 0x2c
 8009092:	9308      	str	r3, [sp, #32]
 8009094:	9309      	str	r3, [sp, #36]	; 0x24
 8009096:	930a      	str	r3, [sp, #40]	; 0x28
      if (publishers[i] != 0) // non-empty slot
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	f000 80bb 	beq.w	8009216 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80090a0:	6858      	ldr	r0, [r3, #4]
        ti.topic_id = publishers[i]->id_;
 80090a2:	6899      	ldr	r1, [r3, #8]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80090a4:	6804      	ldr	r4, [r0, #0]
        ti.topic_name = (char *) publishers[i]->topic_;
 80090a6:	681a      	ldr	r2, [r3, #0]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80090a8:	68a3      	ldr	r3, [r4, #8]
        ti.topic_id = publishers[i]->id_;
 80090aa:	f8ad 101c 	strh.w	r1, [sp, #28]
        ti.topic_name = (char *) publishers[i]->topic_;
 80090ae:	9208      	str	r2, [sp, #32]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80090b0:	4798      	blx	r3
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80090b2:	683b      	ldr	r3, [r7, #0]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80090b4:	9009      	str	r0, [sp, #36]	; 0x24
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80090b6:	6858      	ldr	r0, [r3, #4]
 80090b8:	6803      	ldr	r3, [r0, #0]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	4798      	blx	r3
        publish(publishers[i]->getEndpointType(), &ti);
 80090be:	6833      	ldr	r3, [r6, #0]
 80090c0:	6839      	ldr	r1, [r7, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	690d      	ldr	r5, [r1, #16]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80090c6:	900a      	str	r0, [sp, #40]	; 0x28
        ti.buffer_size = OUTPUT_SIZE;
 80090c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090cc:	920b      	str	r2, [sp, #44]	; 0x2c
 80090ce:	4ac4      	ldr	r2, [pc, #784]	; (80093e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x36c>)
 80090d0:	4293      	cmp	r3, r2
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80090d2:	4682      	mov	sl, r0
 80090d4:	f040 817a 	bne.w	80093cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x358>
    if (id >= 100 && !configured_)
 80090d8:	2d63      	cmp	r5, #99	; 0x63
 80090da:	dd04      	ble.n	80090e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x72>
 80090dc:	f896 34f4 	ldrb.w	r3, [r6, #1268]	; 0x4f4
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f000 8095 	beq.w	8009210 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x19c>
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80090e6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80090ea:	f8dd 8020 	ldr.w	r8, [sp, #32]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80090ee:	f886 321f 	strb.w	r3, [r6, #543]	; 0x21f
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80090f2:	0a1b      	lsrs	r3, r3, #8
 80090f4:	f886 3220 	strb.w	r3, [r6, #544]	; 0x220
      uint32_t length_topic_name = strlen(this->topic_name);
 80090f8:	4640      	mov	r0, r8
 80090fa:	f7f7 f873 	bl	80001e4 <strlen>
 80090fe:	4604      	mov	r4, r0
      arr[i] = (var >> (8 * i));
 8009100:	0e23      	lsrs	r3, r4, #24
 8009102:	0c22      	lsrs	r2, r4, #16
 8009104:	0a00      	lsrs	r0, r0, #8
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8009106:	4641      	mov	r1, r8
 8009108:	f886 3224 	strb.w	r3, [r6, #548]	; 0x224
 800910c:	f886 4221 	strb.w	r4, [r6, #545]	; 0x221
 8009110:	f886 0222 	strb.w	r0, [r6, #546]	; 0x222
 8009114:	f886 2223 	strb.w	r2, [r6, #547]	; 0x223
 8009118:	f206 2025 	addw	r0, r6, #549	; 0x225
 800911c:	4622      	mov	r2, r4
 800911e:	f001 fa79 	bl	800a614 <memcpy>
      uint32_t length_message_type = strlen(this->message_type);
 8009122:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009126:	4648      	mov	r0, r9
 8009128:	f7f7 f85c 	bl	80001e4 <strlen>
    int l = msg->serialize(message_out + 7);
 800912c:	f206 281f 	addw	r8, r6, #543	; 0x21f
 8009130:	eb08 0304 	add.w	r3, r8, r4
      offset += length_topic_name;
 8009134:	f104 0e06 	add.w	lr, r4, #6
      uint32_t length_message_type = strlen(this->message_type);
 8009138:	4602      	mov	r2, r0
 800913a:	0a00      	lsrs	r0, r0, #8
 800913c:	f808 200e 	strb.w	r2, [r8, lr]
      offset += 4;
 8009140:	340a      	adds	r4, #10
 8009142:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009146:	71d8      	strb	r0, [r3, #7]
 8009148:	0e10      	lsrs	r0, r2, #24
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800914a:	4649      	mov	r1, r9
 800914c:	f883 e008 	strb.w	lr, [r3, #8]
 8009150:	7258      	strb	r0, [r3, #9]
 8009152:	eb08 0004 	add.w	r0, r8, r4
      offset += length_message_type;
 8009156:	eb02 0904 	add.w	r9, r2, r4
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800915a:	f001 fa5b 	bl	800a614 <memcpy>
      uint32_t length_md5sum = strlen(this->md5sum);
 800915e:	4650      	mov	r0, sl
 8009160:	f7f7 f840 	bl	80001e4 <strlen>
 8009164:	eb08 0209 	add.w	r2, r8, r9
 8009168:	f808 0009 	strb.w	r0, [r8, r9]
 800916c:	4603      	mov	r3, r0
      offset += 4;
 800916e:	f109 0404 	add.w	r4, r9, #4
 8009172:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8009176:	ea4f 4e10 	mov.w	lr, r0, lsr #16
 800917a:	0e00      	lsrs	r0, r0, #24
 800917c:	f882 c001 	strb.w	ip, [r2, #1]
 8009180:	f882 e002 	strb.w	lr, [r2, #2]
 8009184:	70d0      	strb	r0, [r2, #3]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8009186:	4651      	mov	r1, sl
 8009188:	461a      	mov	r2, r3
 800918a:	eb08 0004 	add.w	r0, r8, r4
 800918e:	9301      	str	r3, [sp, #4]
 8009190:	f001 fa40 	bl	800a614 <memcpy>
      offset += length_md5sum;
 8009194:	9b01      	ldr	r3, [sp, #4]
 8009196:	191a      	adds	r2, r3, r4
      offset += sizeof(this->buffer_size);
 8009198:	1d14      	adds	r4, r2, #4
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800919a:	f3c4 2007 	ubfx	r0, r4, #8, #8
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800919e:	fa5f fe84 	uxtb.w	lr, r4
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80091a2:	eb0e 0100 	add.w	r1, lr, r0
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80091a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091aa:	f848 3002 	str.w	r3, [r8, r2]
 80091ae:	43c9      	mvns	r1, r1
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80091b0:	f345 2907 	sbfx	r9, r5, #8, #8
    message_out[0] = 0xff;
 80091b4:	23ff      	movs	r3, #255	; 0xff
    message_out[1] = PROTOCOL_VER;
 80091b6:	f04f 0cfe 	mov.w	ip, #254	; 0xfe
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80091ba:	f886 021b 	strb.w	r0, [r6, #539]	; 0x21b
    for (int i = 5; i < l + 7; i++)
 80091be:	1c60      	adds	r0, r4, #1
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80091c0:	f886 521d 	strb.w	r5, [r6, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80091c4:	f886 921e 	strb.w	r9, [r6, #542]	; 0x21e
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80091c8:	f886 e21a 	strb.w	lr, [r6, #538]	; 0x21a
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80091cc:	f886 121c 	strb.w	r1, [r6, #540]	; 0x21c
    message_out[0] = 0xff;
 80091d0:	f886 3218 	strb.w	r3, [r6, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 80091d4:	f886 c219 	strb.w	ip, [r6, #537]	; 0x219
    for (int i = 5; i < l + 7; i++)
 80091d8:	db0c      	blt.n	80091f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x180>
 80091da:	f202 2222 	addw	r2, r2, #546	; 0x222
 80091de:	18b0      	adds	r0, r6, r2
 80091e0:	f506 7307 	add.w	r3, r6, #540	; 0x21c
 80091e4:	2200      	movs	r2, #0
      chk += message_out[i];
 80091e6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 80091ea:	4298      	cmp	r0, r3
      chk += message_out[i];
 80091ec:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
 80091ee:	d1fa      	bne.n	80091e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x172>
 80091f0:	43d3      	mvns	r3, r2
 80091f2:	b2db      	uxtb	r3, r3
    message_out[l++] = 255 - (chk % 256);
 80091f4:	1932      	adds	r2, r6, r4
 80091f6:	f104 0108 	add.w	r1, r4, #8
    if (l <= OUTPUT_SIZE)
 80091fa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    message_out[l++] = 255 - (chk % 256);
 80091fe:	f882 321f 	strb.w	r3, [r2, #543]	; 0x21f
    if (l <= OUTPUT_SIZE)
 8009202:	f300 80f4 	bgt.w	80093ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x37a>
		CDC_Transmit_FS(data, length);
 8009206:	b289      	uxth	r1, r1
 8009208:	f506 7006 	add.w	r0, r6, #536	; 0x218
 800920c:	f7fe fb6a 	bl	80078e4 <CDC_Transmit_FS>
        HAL_Delay(1);
 8009210:	2001      	movs	r0, #1
 8009212:	f7f8 f91f 	bl	8001454 <HAL_Delay>
 8009216:	3704      	adds	r7, #4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8009218:	45bb      	cmp	fp, r7
 800921a:	f47f af3d 	bne.w	8009098 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x24>
 800921e:	f506 6b9c 	add.w	fp, r6, #1248	; 0x4e0
      if (subscribers[i] != 0) // non-empty slot
 8009222:	6838      	ldr	r0, [r7, #0]
 8009224:	2800      	cmp	r0, #0
 8009226:	f000 80c7 	beq.w	80093b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x344>
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800922a:	6803      	ldr	r3, [r0, #0]
        ti.topic_id = subscribers[i]->id_;
 800922c:	6841      	ldr	r1, [r0, #4]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800922e:	6882      	ldr	r2, [r0, #8]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8009230:	689b      	ldr	r3, [r3, #8]
        ti.topic_id = subscribers[i]->id_;
 8009232:	f8ad 101c 	strh.w	r1, [sp, #28]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8009236:	9208      	str	r2, [sp, #32]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8009238:	4798      	blx	r3
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800923a:	683b      	ldr	r3, [r7, #0]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800923c:	9009      	str	r0, [sp, #36]	; 0x24
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	4618      	mov	r0, r3
 8009242:	68d3      	ldr	r3, [r2, #12]
 8009244:	4798      	blx	r3
        publish(subscribers[i]->getEndpointType(), &ti);
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	6831      	ldr	r1, [r6, #0]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	680c      	ldr	r4, [r1, #0]
 800924e:	6852      	ldr	r2, [r2, #4]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8009250:	900a      	str	r0, [sp, #40]	; 0x28
        ti.buffer_size = INPUT_SIZE;
 8009252:	f44f 7100 	mov.w	r1, #512	; 0x200
        publish(subscribers[i]->getEndpointType(), &ti);
 8009256:	4618      	mov	r0, r3
        ti.buffer_size = INPUT_SIZE;
 8009258:	910b      	str	r1, [sp, #44]	; 0x2c
        publish(subscribers[i]->getEndpointType(), &ti);
 800925a:	4790      	blx	r2
 800925c:	4b60      	ldr	r3, [pc, #384]	; (80093e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x36c>)
 800925e:	429c      	cmp	r4, r3
 8009260:	4605      	mov	r5, r0
 8009262:	f040 80bf 	bne.w	80093e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x370>
    if (id >= 100 && !configured_)
 8009266:	2863      	cmp	r0, #99	; 0x63
 8009268:	dd04      	ble.n	8009274 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x200>
 800926a:	f896 34f4 	ldrb.w	r3, [r6, #1268]	; 0x4f4
 800926e:	2b00      	cmp	r3, #0
 8009270:	f000 809f 	beq.w	80093b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x33e>
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8009274:	f8bd 301c 	ldrh.w	r3, [sp, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8009278:	f8dd 8020 	ldr.w	r8, [sp, #32]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800927c:	f886 321f 	strb.w	r3, [r6, #543]	; 0x21f
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8009280:	0a1b      	lsrs	r3, r3, #8
 8009282:	f886 3220 	strb.w	r3, [r6, #544]	; 0x220
      uint32_t length_topic_name = strlen(this->topic_name);
 8009286:	4640      	mov	r0, r8
 8009288:	f7f6 ffac 	bl	80001e4 <strlen>
 800928c:	4604      	mov	r4, r0
 800928e:	0e23      	lsrs	r3, r4, #24
 8009290:	0c22      	lsrs	r2, r4, #16
 8009292:	0a00      	lsrs	r0, r0, #8
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8009294:	4641      	mov	r1, r8
 8009296:	f886 3224 	strb.w	r3, [r6, #548]	; 0x224
 800929a:	f886 4221 	strb.w	r4, [r6, #545]	; 0x221
 800929e:	f886 0222 	strb.w	r0, [r6, #546]	; 0x222
 80092a2:	f886 2223 	strb.w	r2, [r6, #547]	; 0x223
 80092a6:	f206 2025 	addw	r0, r6, #549	; 0x225
 80092aa:	4622      	mov	r2, r4
 80092ac:	f001 f9b2 	bl	800a614 <memcpy>
      uint32_t length_message_type = strlen(this->message_type);
 80092b0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80092b4:	4650      	mov	r0, sl
 80092b6:	f7f6 ff95 	bl	80001e4 <strlen>
    int l = msg->serialize(message_out + 7);
 80092ba:	f206 281f 	addw	r8, r6, #543	; 0x21f
 80092be:	eb08 0304 	add.w	r3, r8, r4
 80092c2:	4681      	mov	r9, r0
      offset += length_topic_name;
 80092c4:	f104 0e06 	add.w	lr, r4, #6
 80092c8:	ea4f 2c10 	mov.w	ip, r0, lsr #8
      offset += 4;
 80092cc:	340a      	adds	r4, #10
 80092ce:	ea4f 6219 	mov.w	r2, r9, lsr #24
 80092d2:	0c00      	lsrs	r0, r0, #16
 80092d4:	f808 900e 	strb.w	r9, [r8, lr]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80092d8:	4651      	mov	r1, sl
 80092da:	f883 c007 	strb.w	ip, [r3, #7]
 80092de:	7218      	strb	r0, [r3, #8]
 80092e0:	725a      	strb	r2, [r3, #9]
 80092e2:	eb08 0004 	add.w	r0, r8, r4
 80092e6:	464a      	mov	r2, r9
 80092e8:	f001 f994 	bl	800a614 <memcpy>
      uint32_t length_md5sum = strlen(this->md5sum);
 80092ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 80092ee:	9101      	str	r1, [sp, #4]
 80092f0:	4608      	mov	r0, r1
 80092f2:	f7f6 ff77 	bl	80001e4 <strlen>
      offset += length_message_type;
 80092f6:	44a1      	add	r9, r4
 80092f8:	eb08 0309 	add.w	r3, r8, r9
      uint32_t length_md5sum = strlen(this->md5sum);
 80092fc:	4682      	mov	sl, r0
      offset += 4;
 80092fe:	f109 0404 	add.w	r4, r9, #4
 8009302:	ea4f 2e10 	mov.w	lr, r0, lsr #8
 8009306:	ea4f 621a 	mov.w	r2, sl, lsr #24
 800930a:	0c00      	lsrs	r0, r0, #16
 800930c:	f808 a009 	strb.w	sl, [r8, r9]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8009310:	9901      	ldr	r1, [sp, #4]
 8009312:	f883 e001 	strb.w	lr, [r3, #1]
 8009316:	7098      	strb	r0, [r3, #2]
 8009318:	70da      	strb	r2, [r3, #3]
 800931a:	eb08 0004 	add.w	r0, r8, r4
 800931e:	4652      	mov	r2, sl
 8009320:	f001 f978 	bl	800a614 <memcpy>
      offset += length_md5sum;
 8009324:	eb0a 0204 	add.w	r2, sl, r4
      u_buffer_size.real = this->buffer_size;
 8009328:	990b      	ldr	r1, [sp, #44]	; 0x2c
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800932a:	f808 1002 	strb.w	r1, [r8, r2]
      offset += sizeof(this->buffer_size);
 800932e:	1d14      	adds	r4, r2, #4
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8009330:	4490      	add	r8, r2
 8009332:	ea4f 2911 	mov.w	r9, r1, lsr #8
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8009336:	fa5f fc84 	uxtb.w	ip, r4
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800933a:	f3c4 2e07 	ubfx	lr, r4, #8, #8
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800933e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8009342:	0e09      	lsrs	r1, r1, #24
 8009344:	f888 1003 	strb.w	r1, [r8, #3]
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8009348:	eb0c 000e 	add.w	r0, ip, lr
    message_out[1] = PROTOCOL_VER;
 800934c:	21fe      	movs	r1, #254	; 0xfe
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800934e:	f888 9001 	strb.w	r9, [r8, #1]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8009352:	f888 a002 	strb.w	sl, [r8, #2]
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8009356:	43c0      	mvns	r0, r0
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8009358:	f345 2907 	sbfx	r9, r5, #8, #8
    message_out[0] = 0xff;
 800935c:	23ff      	movs	r3, #255	; 0xff
    message_out[1] = PROTOCOL_VER;
 800935e:	f886 1219 	strb.w	r1, [r6, #537]	; 0x219
    for (int i = 5; i < l + 7; i++)
 8009362:	1c61      	adds	r1, r4, #1
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8009364:	f886 021c 	strb.w	r0, [r6, #540]	; 0x21c
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8009368:	f886 c21a 	strb.w	ip, [r6, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800936c:	f886 e21b 	strb.w	lr, [r6, #539]	; 0x21b
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8009370:	f886 521d 	strb.w	r5, [r6, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8009374:	f886 921e 	strb.w	r9, [r6, #542]	; 0x21e
    message_out[0] = 0xff;
 8009378:	f886 3218 	strb.w	r3, [r6, #536]	; 0x218
    for (int i = 5; i < l + 7; i++)
 800937c:	db0c      	blt.n	8009398 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x324>
 800937e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8009382:	18b0      	adds	r0, r6, r2
 8009384:	f506 7307 	add.w	r3, r6, #540	; 0x21c
 8009388:	2200      	movs	r2, #0
      chk += message_out[i];
 800938a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 800938e:	4298      	cmp	r0, r3
      chk += message_out[i];
 8009390:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
 8009392:	d1fa      	bne.n	800938a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x316>
 8009394:	43d3      	mvns	r3, r2
 8009396:	b2db      	uxtb	r3, r3
    message_out[l++] = 255 - (chk % 256);
 8009398:	1932      	adds	r2, r6, r4
 800939a:	f104 0108 	add.w	r1, r4, #8
    if (l <= OUTPUT_SIZE)
 800939e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    message_out[l++] = 255 - (chk % 256);
 80093a2:	f882 321f 	strb.w	r3, [r2, #543]	; 0x21f
    if (l <= OUTPUT_SIZE)
 80093a6:	dc75      	bgt.n	8009494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x420>
 80093a8:	b289      	uxth	r1, r1
 80093aa:	f506 7006 	add.w	r0, r6, #536	; 0x218
 80093ae:	f7fe fa99 	bl	80078e4 <CDC_Transmit_FS>
        HAL_Delay(1);
 80093b2:	2001      	movs	r0, #1
 80093b4:	f7f8 f84e 	bl	8001454 <HAL_Delay>
 80093b8:	3704      	adds	r7, #4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80093ba:	45bb      	cmp	fp, r7
 80093bc:	f47f af31 	bne.w	8009222 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    configured_ = true;
 80093c0:	2301      	movs	r3, #1
 80093c2:	f886 34f4 	strb.w	r3, [r6, #1268]	; 0x4f4
  }
 80093c6:	b00d      	add	sp, #52	; 0x34
 80093c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        publish(publishers[i]->getEndpointType(), &ti);
 80093cc:	4629      	mov	r1, r5
 80093ce:	aa06      	add	r2, sp, #24
 80093d0:	4630      	mov	r0, r6
 80093d2:	4798      	blx	r3
 80093d4:	e71c      	b.n	8009210 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x19c>
 80093d6:	bf00      	nop
 80093d8:	0800ac78 	.word	0x0800ac78
 80093dc:	0800ae84 	.word	0x0800ae84
 80093e0:	080085b1 	.word	0x080085b1
        publish(subscribers[i]->getEndpointType(), &ti);
 80093e4:	4601      	mov	r1, r0
 80093e6:	aa06      	add	r2, sp, #24
 80093e8:	4630      	mov	r0, r6
 80093ea:	47a0      	blx	r4
 80093ec:	e7e1      	b.n	80093b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x33e>
    l.level = byte;
 80093ee:	2203      	movs	r2, #3
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80093f0:	6833      	ldr	r3, [r6, #0]
 80093f2:	4956      	ldr	r1, [pc, #344]	; (800954c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x4d8>)
    l.level = byte;
 80093f4:	f88d 2010 	strb.w	r2, [sp, #16]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	9103      	str	r1, [sp, #12]
    l.msg = (char*)msg;
 80093fc:	4954      	ldr	r1, [pc, #336]	; (8009550 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x4dc>)
 80093fe:	9105      	str	r1, [sp, #20]
 8009400:	4954      	ldr	r1, [pc, #336]	; (8009554 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x4e0>)
 8009402:	428b      	cmp	r3, r1
 8009404:	f040 809d 	bne.w	8009542 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x4ce>
      memcpy(outbuffer + offset, this->msg, length_msg);
 8009408:	4c51      	ldr	r4, [pc, #324]	; (8009550 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x4dc>)
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800940a:	f886 221f 	strb.w	r2, [r6, #543]	; 0x21f
 800940e:	2300      	movs	r3, #0
 8009410:	2238      	movs	r2, #56	; 0x38
      memcpy(outbuffer + offset, this->msg, length_msg);
 8009412:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8009416:	f886 2220 	strb.w	r2, [r6, #544]	; 0x220
 800941a:	f886 3221 	strb.w	r3, [r6, #545]	; 0x221
 800941e:	f886 3222 	strb.w	r3, [r6, #546]	; 0x222
 8009422:	f886 3223 	strb.w	r3, [r6, #547]	; 0x223
 8009426:	f506 7509 	add.w	r5, r6, #548	; 0x224
 800942a:	46a6      	mov	lr, r4
 800942c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009430:	45e6      	cmp	lr, ip
 8009432:	6028      	str	r0, [r5, #0]
 8009434:	6069      	str	r1, [r5, #4]
 8009436:	60aa      	str	r2, [r5, #8]
 8009438:	60eb      	str	r3, [r5, #12]
 800943a:	4674      	mov	r4, lr
 800943c:	f105 0510 	add.w	r5, r5, #16
 8009440:	d1f3      	bne.n	800942a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x3b6>
 8009442:	cc03      	ldmia	r4!, {r0, r1}
    message_out[1] = PROTOCOL_VER;
 8009444:	23fe      	movs	r3, #254	; 0xfe
 8009446:	6028      	str	r0, [r5, #0]
 8009448:	6069      	str	r1, [r5, #4]
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800944a:	203d      	movs	r0, #61	; 0x3d
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800944c:	2200      	movs	r2, #0
    message_out[0] = 0xff;
 800944e:	24ff      	movs	r4, #255	; 0xff
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8009450:	21c2      	movs	r1, #194	; 0xc2
    message_out[1] = PROTOCOL_VER;
 8009452:	f886 3219 	strb.w	r3, [r6, #537]	; 0x219
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8009456:	2307      	movs	r3, #7
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8009458:	f886 021a 	strb.w	r0, [r6, #538]	; 0x21a
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800945c:	f886 321d 	strb.w	r3, [r6, #541]	; 0x21d
    message_out[0] = 0xff;
 8009460:	f886 4218 	strb.w	r4, [r6, #536]	; 0x218
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8009464:	f886 221b 	strb.w	r2, [r6, #539]	; 0x21b
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8009468:	f886 221e 	strb.w	r2, [r6, #542]	; 0x21e
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800946c:	f886 121c 	strb.w	r1, [r6, #540]	; 0x21c
 8009470:	f506 7307 	add.w	r3, r6, #540	; 0x21c
 8009474:	f206 205b 	addw	r0, r6, #603	; 0x25b
      chk += message_out[i];
 8009478:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 800947c:	4283      	cmp	r3, r0
      chk += message_out[i];
 800947e:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
 8009480:	d1fa      	bne.n	8009478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x404>
    message_out[l++] = 255 - (chk % 256);
 8009482:	43d2      	mvns	r2, r2
 8009484:	f886 225c 	strb.w	r2, [r6, #604]	; 0x25c
 8009488:	2145      	movs	r1, #69	; 0x45
 800948a:	f506 7006 	add.w	r0, r6, #536	; 0x218
 800948e:	f7fe fa29 	bl	80078e4 <CDC_Transmit_FS>
 8009492:	e6bd      	b.n	8009210 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x19c>
    l.level = byte;
 8009494:	2203      	movs	r2, #3
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8009496:	6833      	ldr	r3, [r6, #0]
      msg("")
 8009498:	492c      	ldr	r1, [pc, #176]	; (800954c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x4d8>)
    l.level = byte;
 800949a:	f88d 2010 	strb.w	r2, [sp, #16]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	9103      	str	r1, [sp, #12]
    l.msg = (char*)msg;
 80094a2:	492b      	ldr	r1, [pc, #172]	; (8009550 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x4dc>)
 80094a4:	9105      	str	r1, [sp, #20]
 80094a6:	492b      	ldr	r1, [pc, #172]	; (8009554 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x4e0>)
 80094a8:	428b      	cmp	r3, r1
 80094aa:	d145      	bne.n	8009538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x4c4>
      memcpy(outbuffer + offset, this->msg, length_msg);
 80094ac:	4c28      	ldr	r4, [pc, #160]	; (8009550 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x4dc>)
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80094ae:	f886 221f 	strb.w	r2, [r6, #543]	; 0x21f
 80094b2:	2300      	movs	r3, #0
 80094b4:	2238      	movs	r2, #56	; 0x38
      memcpy(outbuffer + offset, this->msg, length_msg);
 80094b6:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80094ba:	f886 2220 	strb.w	r2, [r6, #544]	; 0x220
 80094be:	f886 3221 	strb.w	r3, [r6, #545]	; 0x221
 80094c2:	f886 3222 	strb.w	r3, [r6, #546]	; 0x222
 80094c6:	f886 3223 	strb.w	r3, [r6, #547]	; 0x223
 80094ca:	f506 7509 	add.w	r5, r6, #548	; 0x224
 80094ce:	46a6      	mov	lr, r4
 80094d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80094d4:	45e6      	cmp	lr, ip
 80094d6:	6028      	str	r0, [r5, #0]
 80094d8:	6069      	str	r1, [r5, #4]
 80094da:	60aa      	str	r2, [r5, #8]
 80094dc:	60eb      	str	r3, [r5, #12]
 80094de:	4674      	mov	r4, lr
 80094e0:	f105 0510 	add.w	r5, r5, #16
 80094e4:	d1f3      	bne.n	80094ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x45a>
 80094e6:	cc03      	ldmia	r4!, {r0, r1}
    message_out[1] = PROTOCOL_VER;
 80094e8:	23fe      	movs	r3, #254	; 0xfe
 80094ea:	6028      	str	r0, [r5, #0]
 80094ec:	6069      	str	r1, [r5, #4]
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80094ee:	203d      	movs	r0, #61	; 0x3d
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80094f0:	2200      	movs	r2, #0
    message_out[0] = 0xff;
 80094f2:	24ff      	movs	r4, #255	; 0xff
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80094f4:	21c2      	movs	r1, #194	; 0xc2
    message_out[1] = PROTOCOL_VER;
 80094f6:	f886 3219 	strb.w	r3, [r6, #537]	; 0x219
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80094fa:	2307      	movs	r3, #7
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80094fc:	f886 021a 	strb.w	r0, [r6, #538]	; 0x21a
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8009500:	f886 321d 	strb.w	r3, [r6, #541]	; 0x21d
    message_out[0] = 0xff;
 8009504:	f886 4218 	strb.w	r4, [r6, #536]	; 0x218
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8009508:	f886 221b 	strb.w	r2, [r6, #539]	; 0x21b
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800950c:	f886 221e 	strb.w	r2, [r6, #542]	; 0x21e
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8009510:	f886 121c 	strb.w	r1, [r6, #540]	; 0x21c
 8009514:	f506 7307 	add.w	r3, r6, #540	; 0x21c
 8009518:	f206 205b 	addw	r0, r6, #603	; 0x25b
      chk += message_out[i];
 800951c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (int i = 5; i < l + 7; i++)
 8009520:	4283      	cmp	r3, r0
      chk += message_out[i];
 8009522:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
 8009524:	d1fa      	bne.n	800951c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x4a8>
    message_out[l++] = 255 - (chk % 256);
 8009526:	43d2      	mvns	r2, r2
 8009528:	f886 225c 	strb.w	r2, [r6, #604]	; 0x25c
 800952c:	2145      	movs	r1, #69	; 0x45
 800952e:	f506 7006 	add.w	r0, r6, #536	; 0x218
 8009532:	f7fe f9d7 	bl	80078e4 <CDC_Transmit_FS>
 8009536:	e73c      	b.n	80093b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x33e>
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8009538:	aa03      	add	r2, sp, #12
 800953a:	2107      	movs	r1, #7
 800953c:	4630      	mov	r0, r6
 800953e:	4798      	blx	r3
 8009540:	e737      	b.n	80093b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x33e>
 8009542:	aa03      	add	r2, sp, #12
 8009544:	2107      	movs	r1, #7
 8009546:	4630      	mov	r0, r6
 8009548:	4798      	blx	r3
 800954a:	e661      	b.n	8009210 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x19c>
 800954c:	0800ac90 	.word	0x0800ac90
 8009550:	0800ae4c 	.word	0x0800ae4c
 8009554:	080085b1 	.word	0x080085b1

08009558 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8009558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955c:	4604      	mov	r4, r0
 800955e:	b08b      	sub	sp, #44	; 0x2c
		return HAL_GetTick();
 8009560:	f7f7 ff72 	bl	8001448 <HAL_GetTick>
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8009564:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
 8009568:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800956c:	1ac3      	subs	r3, r0, r3
 800956e:	4293      	cmp	r3, r2
      configured_ = false;
 8009570:	bf84      	itt	hi
 8009572:	2300      	movhi	r3, #0
 8009574:	f884 34f4 	strbhi.w	r3, [r4, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8009578:	f8d4 34e0 	ldr.w	r3, [r4, #1248]	; 0x4e0
 800957c:	4607      	mov	r7, r0
 800957e:	b133      	cbz	r3, 800958e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      if (c_time > last_msg_timeout_time)
 8009580:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
 8009584:	4283      	cmp	r3, r0
        mode_ = MODE_FIRST_FF;
 8009586:	bf3c      	itt	cc
 8009588:	2300      	movcc	r3, #0
 800958a:	f8c4 34e0 	strcc.w	r3, [r4, #1248]	; 0x4e0
		r = ringbuffer_getchar(&rb, &ch);
 800958e:	4e9c      	ldr	r6, [pc, #624]	; (8009800 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2a8>)
 8009590:	f8df a27c 	ldr.w	sl, [pc, #636]	; 8009810 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2b8>
    t.data.sec += offset / 1000;
 8009594:	f8df b27c 	ldr.w	fp, [pc, #636]	; 8009814 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2bc>
      if (spin_timeout_ > 0)
 8009598:	6963      	ldr	r3, [r4, #20]
 800959a:	b133      	cbz	r3, 80095aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52>
		return HAL_GetTick();
 800959c:	f7f7 ff54 	bl	8001448 <HAL_GetTick>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80095a0:	6963      	ldr	r3, [r4, #20]
 80095a2:	1bc0      	subs	r0, r0, r7
 80095a4:	4298      	cmp	r0, r3
 80095a6:	f200 80ec 	bhi.w	8009782 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x22a>
		uint8_t ch = -1;
 80095aa:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80095ae:	23ff      	movs	r3, #255	; 0xff
 80095b0:	f808 3d0c 	strb.w	r3, [r8, #-12]!
		r = ringbuffer_getchar(&rb, &ch);
 80095b4:	4630      	mov	r0, r6
 80095b6:	4641      	mov	r1, r8
 80095b8:	f000 fe8a 	bl	800a2d0 <_Z18ringbuffer_getcharP10ringbufferPh>
		if (1 == r)
 80095bc:	2801      	cmp	r0, #1
 80095be:	d00e      	beq.n	80095de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x86>
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80095c0:	f894 04f4 	ldrb.w	r0, [r4, #1268]	; 0x4f4
 80095c4:	b140      	cbz	r0, 80095d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
 80095c6:	f8d4 34f8 	ldr.w	r3, [r4, #1272]	; 0x4f8
 80095ca:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80095ce:	1afb      	subs	r3, r7, r3
 80095d0:	4293      	cmp	r3, r2
 80095d2:	f200 80db 	bhi.w	800978c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x234>
    return SPIN_OK;
 80095d6:	2000      	movs	r0, #0
  }
 80095d8:	b00b      	add	sp, #44	; 0x2c
 80095da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      checksum_ += data;
 80095de:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
			return ch;
 80095e2:	f89d 201c 	ldrb.w	r2, [sp, #28]
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80095e6:	f8d4 54e0 	ldr.w	r5, [r4, #1248]	; 0x4e0
      checksum_ += data;
 80095ea:	4413      	add	r3, r2
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80095ec:	2d07      	cmp	r5, #7
      checksum_ += data;
 80095ee:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80095f2:	d040      	beq.n	8009676 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x11e>
      else if (mode_ == MODE_FIRST_FF)
 80095f4:	b945      	cbnz	r5, 8009608 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xb0>
        if (data == 0xff)
 80095f6:	2aff      	cmp	r2, #255	; 0xff
 80095f8:	d14f      	bne.n	800969a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80095fa:	f107 0314 	add.w	r3, r7, #20
          mode_++;
 80095fe:	f8c4 04e0 	str.w	r0, [r4, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8009602:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
 8009606:	e7c7      	b.n	8009598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
      else if (mode_ == MODE_PROTOCOL_VER)
 8009608:	2d01      	cmp	r5, #1
 800960a:	d055      	beq.n	80096b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x160>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800960c:	2d02      	cmp	r5, #2
 800960e:	d07d      	beq.n	800970c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b4>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8009610:	2d03      	cmp	r5, #3
 8009612:	f000 8086 	beq.w	8009722 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1ca>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8009616:	2d04      	cmp	r5, #4
 8009618:	f000 808d 	beq.w	8009736 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1de>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800961c:	2d05      	cmp	r5, #5
 800961e:	f000 809a 	beq.w	8009756 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1fe>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8009622:	2d06      	cmp	r5, #6
 8009624:	f000 809f 	beq.w	8009766 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x20e>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8009628:	2d08      	cmp	r5, #8
 800962a:	d1b5      	bne.n	8009598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
        if ((checksum_ % 256) == 255)
 800962c:	425a      	negs	r2, r3
 800962e:	b2d2      	uxtb	r2, r2
 8009630:	b2db      	uxtb	r3, r3
 8009632:	bf58      	it	pl
 8009634:	4253      	negpl	r3, r2
 8009636:	2bff      	cmp	r3, #255	; 0xff
        mode_ = MODE_FIRST_FF;
 8009638:	f04f 0200 	mov.w	r2, #0
 800963c:	f8c4 24e0 	str.w	r2, [r4, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 8009640:	d1aa      	bne.n	8009598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8009642:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 8009646:	2b00      	cmp	r3, #0
 8009648:	f000 8211 	beq.w	8009a6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x516>
          else if (topic_ == TopicInfo::ID_TIME)
 800964c:	2b0a      	cmp	r3, #10
 800964e:	f000 81df 	beq.w	8009a10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4b8>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8009652:	2b06      	cmp	r3, #6
 8009654:	f000 80e0 	beq.w	8009818 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8009658:	2b0b      	cmp	r3, #11
 800965a:	f000 80cd 	beq.w	80097f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2a0>
            if (subscribers[topic_ - 100])
 800965e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009662:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8009666:	2800      	cmp	r0, #0
 8009668:	d096      	beq.n	8009598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
              subscribers[topic_ - 100]->callback(message_in);
 800966a:	6803      	ldr	r3, [r0, #0]
 800966c:	f104 0118 	add.w	r1, r4, #24
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4798      	blx	r3
 8009674:	e790      	b.n	8009598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
        message_in[index_++] = data;
 8009676:	f8d4 34ec 	ldr.w	r3, [r4, #1260]	; 0x4ec
 800967a:	18e1      	adds	r1, r4, r3
 800967c:	3301      	adds	r3, #1
 800967e:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
 8009682:	760a      	strb	r2, [r1, #24]
        bytes_--;
 8009684:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
 8009688:	3b01      	subs	r3, #1
 800968a:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800968e:	2b00      	cmp	r3, #0
 8009690:	d182      	bne.n	8009598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
          mode_ = MODE_MSG_CHECKSUM;
 8009692:	2308      	movs	r3, #8
 8009694:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 8009698:	e77e      	b.n	8009598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
		return HAL_GetTick();
 800969a:	f7f7 fed5 	bl	8001448 <HAL_GetTick>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800969e:	f241 3388 	movw	r3, #5000	; 0x1388
 80096a2:	1bc0      	subs	r0, r0, r7
 80096a4:	4298      	cmp	r0, r3
 80096a6:	f67f af77 	bls.w	8009598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
          return SPIN_TIMEOUT;
 80096aa:	f06f 0001 	mvn.w	r0, #1
          configured_ = false;
 80096ae:	f884 54f4 	strb.w	r5, [r4, #1268]	; 0x4f4
  }
 80096b2:	b00b      	add	sp, #44	; 0x2c
 80096b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (data == PROTOCOL_VER)
 80096b8:	2afe      	cmp	r2, #254	; 0xfe
 80096ba:	d048      	beq.n	800974e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f6>
          if (configured_ == false)
 80096bc:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
          mode_ = MODE_FIRST_FF;
 80096c0:	2200      	movs	r2, #0
 80096c2:	f8c4 24e0 	str.w	r2, [r4, #1248]	; 0x4e0
          if (configured_ == false)
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f47f af66 	bne.w	8009598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
    publish(TopicInfo::ID_TIME, &t);
 80096cc:	6821      	ldr	r1, [r4, #0]
 80096ce:	4a4d      	ldr	r2, [pc, #308]	; (8009804 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ac>)
 80096d0:	680d      	ldr	r5, [r1, #0]
      data()
 80096d2:	494d      	ldr	r1, [pc, #308]	; (8009808 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2b0>)
 80096d4:	9308      	str	r3, [sp, #32]
 80096d6:	4295      	cmp	r5, r2
 80096d8:	9309      	str	r3, [sp, #36]	; 0x24
 80096da:	9107      	str	r1, [sp, #28]
 80096dc:	f040 8082 	bne.w	80097e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x28c>
    message_out[0] = 0xff;
 80096e0:	494a      	ldr	r1, [pc, #296]	; (800980c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2b4>)
 80096e2:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
 80096e6:	f640 22f7 	movw	r2, #2807	; 0xaf7
 80096ea:	f04f 4375 	mov.w	r3, #4110417920	; 0xf5000000
 80096ee:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
 80096f2:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
 80096f6:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
		CDC_Transmit_FS(data, length);
 80096fa:	2110      	movs	r1, #16
 80096fc:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8009700:	f7fe f8f0 	bl	80078e4 <CDC_Transmit_FS>
		return HAL_GetTick();
 8009704:	f7f7 fea0 	bl	8001448 <HAL_GetTick>
    rt_time = hardware_.time();
 8009708:	60a0      	str	r0, [r4, #8]
 800970a:	e745      	b.n	8009598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
        index_ = 0;
 800970c:	2100      	movs	r1, #0
        mode_++;
 800970e:	2303      	movs	r3, #3
        bytes_ = data;
 8009710:	f8c4 24e4 	str.w	r2, [r4, #1252]	; 0x4e4
        checksum_ = data;               /* first byte for calculating size checksum */
 8009714:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
        index_ = 0;
 8009718:	f8c4 14ec 	str.w	r1, [r4, #1260]	; 0x4ec
        mode_++;
 800971c:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 8009720:	e73a      	b.n	8009598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
        bytes_ += data << 8;
 8009722:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
        mode_++;
 8009726:	2104      	movs	r1, #4
        bytes_ += data << 8;
 8009728:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 800972c:	f8c4 24e4 	str.w	r2, [r4, #1252]	; 0x4e4
        mode_++;
 8009730:	f8c4 14e0 	str.w	r1, [r4, #1248]	; 0x4e0
 8009734:	e730      	b.n	8009598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
        if ((checksum_ % 256) == 255)
 8009736:	425a      	negs	r2, r3
 8009738:	b2d2      	uxtb	r2, r2
 800973a:	b2db      	uxtb	r3, r3
 800973c:	bf58      	it	pl
 800973e:	4253      	negpl	r3, r2
 8009740:	2bff      	cmp	r3, #255	; 0xff
          mode_++;
 8009742:	bf0c      	ite	eq
 8009744:	2305      	moveq	r3, #5
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8009746:	2300      	movne	r3, #0
 8009748:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 800974c:	e724      	b.n	8009598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
          mode_++;
 800974e:	2302      	movs	r3, #2
 8009750:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 8009754:	e720      	b.n	8009598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
        mode_++;
 8009756:	2306      	movs	r3, #6
        topic_ = data;
 8009758:	f8c4 24e8 	str.w	r2, [r4, #1256]	; 0x4e8
        checksum_ = data;               /* first byte included in checksum */
 800975c:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
        mode_++;
 8009760:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 8009764:	e718      	b.n	8009598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
        topic_ += data << 8;
 8009766:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
        if (bytes_ == 0)
 800976a:	f8d4 14e4 	ldr.w	r1, [r4, #1252]	; 0x4e4
        topic_ += data << 8;
 800976e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
        mode_ = MODE_MESSAGE;
 8009772:	2207      	movs	r2, #7
        topic_ += data << 8;
 8009774:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 8009778:	f8c4 24e0 	str.w	r2, [r4, #1248]	; 0x4e0
        if (bytes_ == 0)
 800977c:	2900      	cmp	r1, #0
 800977e:	d088      	beq.n	8009692 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x13a>
 8009780:	e70a      	b.n	8009598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
          return SPIN_TIMEOUT;
 8009782:	f06f 0001 	mvn.w	r0, #1
  }
 8009786:	b00b      	add	sp, #44	; 0x2c
 8009788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    publish(TopicInfo::ID_TIME, &t);
 800978c:	6823      	ldr	r3, [r4, #0]
 800978e:	4a1d      	ldr	r2, [pc, #116]	; (8009804 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ac>)
 8009790:	681d      	ldr	r5, [r3, #0]
 8009792:	4b1d      	ldr	r3, [pc, #116]	; (8009808 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2b0>)
 8009794:	9307      	str	r3, [sp, #28]
 8009796:	4295      	cmp	r5, r2
 8009798:	f04f 0300 	mov.w	r3, #0
 800979c:	9308      	str	r3, [sp, #32]
 800979e:	9309      	str	r3, [sp, #36]	; 0x24
 80097a0:	d125      	bne.n	80097ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x296>
    message_out[0] = 0xff;
 80097a2:	481a      	ldr	r0, [pc, #104]	; (800980c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2b4>)
 80097a4:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
 80097a8:	f640 21f7 	movw	r1, #2807	; 0xaf7
    message_out[l++] = 255 - (chk % 256);
 80097ac:	f06f 020a 	mvn.w	r2, #10
    message_out[0] = 0xff;
 80097b0:	f8c4 121c 	str.w	r1, [r4, #540]	; 0x21c
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80097b4:	f884 3224 	strb.w	r3, [r4, #548]	; 0x224
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80097b8:	f884 3225 	strb.w	r3, [r4, #549]	; 0x225
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80097bc:	f884 3226 	strb.w	r3, [r4, #550]	; 0x226
 80097c0:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
    message_out[l++] = 255 - (chk % 256);
 80097c4:	f884 2227 	strb.w	r2, [r4, #551]	; 0x227
		CDC_Transmit_FS(data, length);
 80097c8:	2110      	movs	r1, #16
 80097ca:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80097ce:	f7fe f889 	bl	80078e4 <CDC_Transmit_FS>
		return HAL_GetTick();
 80097d2:	f7f7 fe39 	bl	8001448 <HAL_GetTick>
    rt_time = hardware_.time();
 80097d6:	60a0      	str	r0, [r4, #8]
    return SPIN_OK;
 80097d8:	2000      	movs	r0, #0
      last_sync_time = c_time;
 80097da:	f8c4 74f8 	str.w	r7, [r4, #1272]	; 0x4f8
  }
 80097de:	b00b      	add	sp, #44	; 0x2c
 80097e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    publish(TopicInfo::ID_TIME, &t);
 80097e4:	4642      	mov	r2, r8
 80097e6:	210a      	movs	r1, #10
 80097e8:	4620      	mov	r0, r4
 80097ea:	47a8      	blx	r5
 80097ec:	e78a      	b.n	8009704 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1ac>
 80097ee:	4642      	mov	r2, r8
 80097f0:	210a      	movs	r1, #10
 80097f2:	4620      	mov	r0, r4
 80097f4:	47a8      	blx	r5
 80097f6:	e7ec      	b.n	80097d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27a>
            configured_ = false;
 80097f8:	f884 24f4 	strb.w	r2, [r4, #1268]	; 0x4f4
 80097fc:	e6cc      	b.n	8009598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
 80097fe:	bf00      	nop
 8009800:	20000200 	.word	0x20000200
 8009804:	080085b1 	.word	0x080085b1
 8009808:	0800ac60 	.word	0x0800ac60
 800980c:	0008feff 	.word	0x0008feff
 8009810:	3b9aca00 	.word	0x3b9aca00
 8009814:	10624dd3 	.word	0x10624dd3
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8009818:	f8d4 9018 	ldr.w	r9, [r4, #24]
      if(ints_lengthT > ints_length)
 800981c:	f8d4 350c 	ldr.w	r3, [r4, #1292]	; 0x50c
 8009820:	4599      	cmp	r9, r3
            req_param_resp.deserialize(message_in);
 8009822:	f104 0818 	add.w	r8, r4, #24
 8009826:	d907      	bls.n	8009838 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e0>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8009828:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800982c:	f8d4 0514 	ldr.w	r0, [r4, #1300]	; 0x514
 8009830:	f000 ffca 	bl	800a7c8 <realloc>
 8009834:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
      ints_length = ints_lengthT;
 8009838:	f8c4 950c 	str.w	r9, [r4, #1292]	; 0x50c
      for( uint32_t i = 0; i < ints_length; i++){
 800983c:	f1b9 0f00 	cmp.w	r9, #0
 8009840:	f000 812c 	beq.w	8009a9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x544>
 8009844:	4640      	mov	r0, r8
 8009846:	2104      	movs	r1, #4
 8009848:	2500      	movs	r5, #0
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800984a:	7983      	ldrb	r3, [r0, #6]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800984c:	f890 e005 	ldrb.w	lr, [r0, #5]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8009850:	7902      	ldrb	r2, [r0, #4]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009852:	041b      	lsls	r3, r3, #16
 8009854:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009858:	f890 e007 	ldrb.w	lr, [r0, #7]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800985c:	4313      	orrs	r3, r2
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800985e:	f8d4 2514 	ldr.w	r2, [r4, #1300]	; 0x514
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009862:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
      this->st_ints = u_st_ints.real;
 8009866:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800986a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
      for( uint32_t i = 0; i < ints_length; i++){
 800986e:	f8d4 350c 	ldr.w	r3, [r4, #1292]	; 0x50c
 8009872:	3501      	adds	r5, #1
 8009874:	42ab      	cmp	r3, r5
 8009876:	460a      	mov	r2, r1
 8009878:	f100 0004 	add.w	r0, r0, #4
 800987c:	f101 0104 	add.w	r1, r1, #4
 8009880:	d8e3      	bhi.n	800984a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f2>
 8009882:	f102 0309 	add.w	r3, r2, #9
 8009886:	f102 0508 	add.w	r5, r2, #8
 800988a:	4689      	mov	r9, r1
 800988c:	f102 010b 	add.w	r1, r2, #11
 8009890:	1d50      	adds	r0, r2, #5
 8009892:	f102 0e06 	add.w	lr, r2, #6
 8009896:	f102 0c07 	add.w	ip, r2, #7
 800989a:	9301      	str	r3, [sp, #4]
 800989c:	9503      	str	r5, [sp, #12]
 800989e:	f102 030a 	add.w	r3, r2, #10
 80098a2:	9102      	str	r1, [sp, #8]
 80098a4:	320c      	adds	r2, #12
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80098a6:	f818 e00e 	ldrb.w	lr, [r8, lr]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80098aa:	f818 0000 	ldrb.w	r0, [r8, r0]
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80098ae:	f818 9009 	ldrb.w	r9, [r8, r9]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80098b2:	f818 c00c 	ldrb.w	ip, [r8, ip]
      if(floats_lengthT > floats_length)
 80098b6:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80098ba:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 80098be:	ea4e 2e00 	orr.w	lr, lr, r0, lsl #8
 80098c2:	ea4e 0909 	orr.w	r9, lr, r9
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80098c6:	ea49 690c 	orr.w	r9, r9, ip, lsl #24
      if(floats_lengthT > floats_length)
 80098ca:	4589      	cmp	r9, r1
 80098cc:	d90b      	bls.n	80098e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x38e>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80098ce:	ea4f 0189 	mov.w	r1, r9, lsl #2
 80098d2:	f8d4 0520 	ldr.w	r0, [r4, #1312]	; 0x520
 80098d6:	9205      	str	r2, [sp, #20]
 80098d8:	9304      	str	r3, [sp, #16]
 80098da:	f000 ff75 	bl	800a7c8 <realloc>
 80098de:	9a05      	ldr	r2, [sp, #20]
 80098e0:	9b04      	ldr	r3, [sp, #16]
 80098e2:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
      floats_length = floats_lengthT;
 80098e6:	f8c4 9518 	str.w	r9, [r4, #1304]	; 0x518
      for( uint32_t i = 0; i < floats_length; i++){
 80098ea:	f1b9 0f00 	cmp.w	r9, #0
 80098ee:	d027      	beq.n	8009940 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3e8>
 80098f0:	eb08 0105 	add.w	r1, r8, r5
 80098f4:	2000      	movs	r0, #0
 80098f6:	f504 6ea1 	add.w	lr, r4, #1288	; 0x508
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80098fa:	788b      	ldrb	r3, [r1, #2]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80098fc:	f891 c001 	ldrb.w	ip, [r1, #1]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8009900:	780a      	ldrb	r2, [r1, #0]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009902:	041b      	lsls	r3, r3, #16
 8009904:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009908:	f891 c003 	ldrb.w	ip, [r1, #3]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800990c:	4313      	orrs	r3, r2
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800990e:	f8d4 2520 	ldr.w	r2, [r4, #1312]	; 0x520
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009912:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
      this->st_floats = u_st_floats.real;
 8009916:	f8ce 3014 	str.w	r3, [lr, #20]
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800991a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
      for( uint32_t i = 0; i < floats_length; i++){
 800991e:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
 8009922:	3001      	adds	r0, #1
 8009924:	4283      	cmp	r3, r0
 8009926:	462a      	mov	r2, r5
 8009928:	f101 0104 	add.w	r1, r1, #4
 800992c:	f105 0504 	add.w	r5, r5, #4
 8009930:	d8e3      	bhi.n	80098fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
 8009932:	1d53      	adds	r3, r2, #5
 8009934:	1dd1      	adds	r1, r2, #7
 8009936:	9301      	str	r3, [sp, #4]
 8009938:	9503      	str	r5, [sp, #12]
 800993a:	1d93      	adds	r3, r2, #6
 800993c:	9102      	str	r1, [sp, #8]
 800993e:	3208      	adds	r2, #8
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8009940:	f818 1003 	ldrb.w	r1, [r8, r3]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8009944:	9b01      	ldr	r3, [sp, #4]
 8009946:	f818 5003 	ldrb.w	r5, [r8, r3]
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800994a:	9b03      	ldr	r3, [sp, #12]
 800994c:	f818 e003 	ldrb.w	lr, [r8, r3]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8009950:	9b02      	ldr	r3, [sp, #8]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8009952:	0409      	lsls	r1, r1, #16
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8009954:	f818 0003 	ldrb.w	r0, [r8, r3]
      if(strings_lengthT > strings_length)
 8009958:	f8d4 3524 	ldr.w	r3, [r4, #1316]	; 0x524
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800995c:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
 8009960:	ea45 050e 	orr.w	r5, r5, lr
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8009964:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
      if(strings_lengthT > strings_length)
 8009968:	429d      	cmp	r5, r3
 800996a:	d908      	bls.n	800997e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x426>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800996c:	00a9      	lsls	r1, r5, #2
 800996e:	f8d4 052c 	ldr.w	r0, [r4, #1324]	; 0x52c
 8009972:	9201      	str	r2, [sp, #4]
 8009974:	f000 ff28 	bl	800a7c8 <realloc>
 8009978:	9a01      	ldr	r2, [sp, #4]
 800997a:	f8c4 052c 	str.w	r0, [r4, #1324]	; 0x52c
      strings_length = strings_lengthT;
 800997e:	f8c4 5524 	str.w	r5, [r4, #1316]	; 0x524
      for( uint32_t i = 0; i < strings_length; i++){
 8009982:	2d00      	cmp	r5, #0
 8009984:	d040      	beq.n	8009a08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4b0>
 8009986:	2300      	movs	r3, #0
          inbuffer[k-1]=inbuffer[k];
 8009988:	9701      	str	r7, [sp, #4]
 800998a:	461f      	mov	r7, r3
      var |= (arr[i] << (8 * i));
 800998c:	eb08 0002 	add.w	r0, r8, r2
 8009990:	f818 e002 	ldrb.w	lr, [r8, r2]
 8009994:	7885      	ldrb	r5, [r0, #2]
 8009996:	f890 c001 	ldrb.w	ip, [r0, #1]
 800999a:	78c0      	ldrb	r0, [r0, #3]
 800999c:	042d      	lsls	r5, r5, #16
 800999e:	ea45 250c 	orr.w	r5, r5, ip, lsl #8
 80099a2:	ea45 050e 	orr.w	r5, r5, lr
      offset += 4;
 80099a6:	f102 0904 	add.w	r9, r2, #4
 80099aa:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
          inbuffer[k-1]=inbuffer[k];
 80099ae:	f06f 0103 	mvn.w	r1, #3
 80099b2:	1a89      	subs	r1, r1, r2
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80099b4:	444d      	add	r5, r9
          inbuffer[k-1]=inbuffer[k];
 80099b6:	eb01 0e05 	add.w	lr, r1, r5
 80099ba:	f102 0c05 	add.w	ip, r2, #5
 80099be:	f102 011c 	add.w	r1, r2, #28
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80099c2:	45a9      	cmp	r9, r5
          inbuffer[k-1]=inbuffer[k];
 80099c4:	f102 021b 	add.w	r2, r2, #27
 80099c8:	4421      	add	r1, r4
 80099ca:	eb04 0002 	add.w	r0, r4, r2
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80099ce:	d205      	bcs.n	80099dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x484>
 80099d0:	4565      	cmp	r5, ip
 80099d2:	bf2c      	ite	cs
 80099d4:	4672      	movcs	r2, lr
 80099d6:	2201      	movcc	r2, #1
 80099d8:	f000 fe27 	bl	800a62a <memmove>
      inbuffer[offset+length_st_strings-1]=0;
 80099dc:	eb08 0105 	add.w	r1, r8, r5
 80099e0:	f04f 0300 	mov.w	r3, #0
 80099e4:	f801 3c01 	strb.w	r3, [r1, #-1]
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80099e8:	f8d4 152c 	ldr.w	r1, [r4, #1324]	; 0x52c
      this->st_strings = (char *)(inbuffer + offset-1);
 80099ec:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 80099f0:	4442      	add	r2, r8
 80099f2:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80099f6:	f841 2027 	str.w	r2, [r1, r7, lsl #2]
      for( uint32_t i = 0; i < strings_length; i++){
 80099fa:	f8d4 1524 	ldr.w	r1, [r4, #1316]	; 0x524
 80099fe:	3701      	adds	r7, #1
 8009a00:	42b9      	cmp	r1, r7
      offset += length_st_strings;
 8009a02:	462a      	mov	r2, r5
      for( uint32_t i = 0; i < strings_length; i++){
 8009a04:	d8c2      	bhi.n	800998c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x434>
 8009a06:	9f01      	ldr	r7, [sp, #4]
            param_recieved = true;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	f884 3504 	strb.w	r3, [r4, #1284]	; 0x504
 8009a0e:	e5c3      	b.n	8009598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
 8009a10:	f7f7 fd1a 	bl	8001448 <HAL_GetTick>
    uint32_t offset = hardware_.time() - rt_time;
 8009a14:	68a5      	ldr	r5, [r4, #8]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009a16:	f8d4 9018 	ldr.w	r9, [r4, #24]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009a1a:	f8d4 801c 	ldr.w	r8, [r4, #28]
 8009a1e:	1b45      	subs	r5, r0, r5
 8009a20:	f7f7 fd12 	bl	8001448 <HAL_GetTick>
    t.data.sec += offset / 1000;
 8009a24:	fbab 3205 	umull	r3, r2, fp, r5
 8009a28:	0992      	lsrs	r2, r2, #6
    t.data.nsec += (offset % 1000) * 1000000UL;
 8009a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009a2e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009a32:	fb03 5112 	mls	r1, r3, r2, r5
 8009a36:	f8df e088 	ldr.w	lr, [pc, #136]	; 8009ac0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x568>
    sec_offset = new_now.sec - ms / 1000 - 1;
 8009a3a:	eb02 0509 	add.w	r5, r2, r9
 8009a3e:	fbab c200 	umull	ip, r2, fp, r0
 8009a42:	0992      	lsrs	r2, r2, #6
 8009a44:	44d0      	add	r8, sl
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8009a46:	fb0e 8801 	mla	r8, lr, r1, r8
 8009a4a:	fb03 0312 	mls	r3, r3, r2, r0
 8009a4e:	4621      	mov	r1, r4
 8009a50:	fb0e 8313 	mls	r3, lr, r3, r8
    sec_offset = new_now.sec - ms / 1000 - 1;
 8009a54:	1aaa      	subs	r2, r5, r2
 8009a56:	60e2      	str	r2, [r4, #12]
    normalizeSecNSec(sec_offset, nsec_offset);
 8009a58:	f104 000c 	add.w	r0, r4, #12
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8009a5c:	f841 3f10 	str.w	r3, [r1, #16]!
    normalizeSecNSec(sec_offset, nsec_offset);
 8009a60:	f7fe f98a 	bl	8007d78 <_ZN3ros16normalizeSecNSecERmS0_>
 8009a64:	f7f7 fcf0 	bl	8001448 <HAL_GetTick>
    last_sync_receive_time = hardware_.time();
 8009a68:	f8c4 04fc 	str.w	r0, [r4, #1276]	; 0x4fc
 8009a6c:	e594      	b.n	8009598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x40>
    publish(TopicInfo::ID_TIME, &t);
 8009a6e:	6820      	ldr	r0, [r4, #0]
      data()
 8009a70:	4912      	ldr	r1, [pc, #72]	; (8009abc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x564>)
 8009a72:	9308      	str	r3, [sp, #32]
 8009a74:	4642      	mov	r2, r8
 8009a76:	9309      	str	r3, [sp, #36]	; 0x24
 8009a78:	6803      	ldr	r3, [r0, #0]
 8009a7a:	9107      	str	r1, [sp, #28]
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	210a      	movs	r1, #10
 8009a80:	4798      	blx	r3
 8009a82:	f7f7 fce1 	bl	8001448 <HAL_GetTick>
    rt_time = hardware_.time();
 8009a86:	60a0      	str	r0, [r4, #8]
            negotiateTopics();
 8009a88:	4620      	mov	r0, r4
 8009a8a:	f7ff faf3 	bl	8009074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8009a8e:	f8c4 74f8 	str.w	r7, [r4, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 8009a92:	f8c4 74fc 	str.w	r7, [r4, #1276]	; 0x4fc
            return SPIN_ERR;
 8009a96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a9a:	e59d      	b.n	80095d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
      for( uint32_t i = 0; i < ints_length; i++){
 8009a9c:	2109      	movs	r1, #9
 8009a9e:	230b      	movs	r3, #11
 8009aa0:	9101      	str	r1, [sp, #4]
 8009aa2:	2108      	movs	r1, #8
 8009aa4:	9302      	str	r3, [sp, #8]
 8009aa6:	220c      	movs	r2, #12
 8009aa8:	230a      	movs	r3, #10
 8009aaa:	9103      	str	r1, [sp, #12]
 8009aac:	f04f 0c07 	mov.w	ip, #7
 8009ab0:	f04f 0e06 	mov.w	lr, #6
 8009ab4:	2005      	movs	r0, #5
 8009ab6:	f04f 0904 	mov.w	r9, #4
 8009aba:	e6f4      	b.n	80098a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x34e>
 8009abc:	0800ac60 	.word	0x0800ac60
 8009ac0:	000f4240 	.word	0x000f4240

08009ac4 <spinOnce>:


extern "C" void spinOnce(void)
{
 8009ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//nh.spinOnce();
	  if (NBT_handler(&ros_nbt))
 8009ac8:	4cab      	ldr	r4, [pc, #684]	; (8009d78 <spinOnce+0x2b4>)
{
 8009aca:	b089      	sub	sp, #36	; 0x24
	  if (NBT_handler(&ros_nbt))
 8009acc:	f204 604c 	addw	r0, r4, #1612	; 0x64c
 8009ad0:	f000 fba8 	bl	800a224 <_Z11NBT_handlerP5nbt_t>
 8009ad4:	b910      	cbnz	r0, 8009adc <spinOnce+0x18>
	  {

		nh.spinOnce();

	  }
}
 8009ad6:	b009      	add	sp, #36	; 0x24
 8009ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009adc:	f7f7 fcb4 	bl	8001448 <HAL_GetTick>
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8009ae0:	f8d4 3508 	ldr.w	r3, [r4, #1288]	; 0x508
 8009ae4:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8009ae8:	1ac3      	subs	r3, r0, r3
 8009aea:	4293      	cmp	r3, r2
      configured_ = false;
 8009aec:	bf84      	itt	hi
 8009aee:	2300      	movhi	r3, #0
 8009af0:	f884 3500 	strbhi.w	r3, [r4, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 8009af4:	f8d4 34ec 	ldr.w	r3, [r4, #1260]	; 0x4ec
 8009af8:	4605      	mov	r5, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f040 80f6 	bne.w	8009cec <spinOnce+0x228>
          inbuffer[k-1]=inbuffer[k];
 8009b00:	4f9e      	ldr	r7, [pc, #632]	; (8009d7c <spinOnce+0x2b8>)
 8009b02:	f8df 928c 	ldr.w	r9, [pc, #652]	; 8009d90 <spinOnce+0x2cc>
    t.data.sec += offset / 1000;
 8009b06:	f8df a28c 	ldr.w	sl, [pc, #652]	; 8009d94 <spinOnce+0x2d0>
    normalizeSecNSec(sec_offset, nsec_offset);
 8009b0a:	f107 0b0c 	add.w	fp, r7, #12
      if (spin_timeout_ > 0)
 8009b0e:	6a23      	ldr	r3, [r4, #32]
 8009b10:	b12b      	cbz	r3, 8009b1e <spinOnce+0x5a>
 8009b12:	f7f7 fc99 	bl	8001448 <HAL_GetTick>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8009b16:	6a23      	ldr	r3, [r4, #32]
 8009b18:	1b40      	subs	r0, r0, r5
 8009b1a:	4298      	cmp	r0, r3
 8009b1c:	d8db      	bhi.n	8009ad6 <spinOnce+0x12>
		uint8_t ch = -1;
 8009b1e:	a908      	add	r1, sp, #32
 8009b20:	23ff      	movs	r3, #255	; 0xff
 8009b22:	f801 3d01 	strb.w	r3, [r1, #-1]!
		r = ringbuffer_getchar(&rb, &ch);
 8009b26:	4894      	ldr	r0, [pc, #592]	; (8009d78 <spinOnce+0x2b4>)
 8009b28:	f000 fbd2 	bl	800a2d0 <_Z18ringbuffer_getcharP10ringbufferPh>
		if (1 == r)
 8009b2c:	2801      	cmp	r0, #1
 8009b2e:	d029      	beq.n	8009b84 <spinOnce+0xc0>
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8009b30:	f894 3500 	ldrb.w	r3, [r4, #1280]	; 0x500
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d0ce      	beq.n	8009ad6 <spinOnce+0x12>
 8009b38:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
 8009b3c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009b40:	1aeb      	subs	r3, r5, r3
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d9c7      	bls.n	8009ad6 <spinOnce+0x12>
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8009b46:	2300      	movs	r3, #0
    message_out[l++] = 255 - (chk % 256);
 8009b48:	f06f 020a 	mvn.w	r2, #10
		CDC_Transmit_FS(data, length);
 8009b4c:	2110      	movs	r1, #16
    message_out[0] = 0xff;
 8009b4e:	4f8c      	ldr	r7, [pc, #560]	; (8009d80 <spinOnce+0x2bc>)
 8009b50:	f884 3230 	strb.w	r3, [r4, #560]	; 0x230
 8009b54:	f640 26f7 	movw	r6, #2807	; 0xaf7
 8009b58:	f504 7009 	add.w	r0, r4, #548	; 0x224
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8009b5c:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8009b60:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
 8009b64:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
    message_out[l++] = 255 - (chk % 256);
 8009b68:	f884 2233 	strb.w	r2, [r4, #563]	; 0x233
    message_out[0] = 0xff;
 8009b6c:	f8c4 7224 	str.w	r7, [r4, #548]	; 0x224
 8009b70:	f8c4 6228 	str.w	r6, [r4, #552]	; 0x228
 8009b74:	f7fd feb6 	bl	80078e4 <CDC_Transmit_FS>
		return HAL_GetTick();
 8009b78:	f7f7 fc66 	bl	8001448 <HAL_GetTick>
      last_sync_time = c_time;
 8009b7c:	f8c4 5504 	str.w	r5, [r4, #1284]	; 0x504
    rt_time = hardware_.time();
 8009b80:	6160      	str	r0, [r4, #20]
 8009b82:	e7a8      	b.n	8009ad6 <spinOnce+0x12>
      checksum_ += data;
 8009b84:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
			return ch;
 8009b88:	f89d 201f 	ldrb.w	r2, [sp, #31]
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8009b8c:	f8d4 64ec 	ldr.w	r6, [r4, #1260]	; 0x4ec
      checksum_ += data;
 8009b90:	4413      	add	r3, r2
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8009b92:	2e07      	cmp	r6, #7
      checksum_ += data;
 8009b94:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8009b98:	d03d      	beq.n	8009c16 <spinOnce+0x152>
      else if (mode_ == MODE_FIRST_FF)
 8009b9a:	b946      	cbnz	r6, 8009bae <spinOnce+0xea>
        if (data == 0xff)
 8009b9c:	2aff      	cmp	r2, #255	; 0xff
 8009b9e:	d14e      	bne.n	8009c3e <spinOnce+0x17a>
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8009ba0:	f105 0314 	add.w	r3, r5, #20
          mode_++;
 8009ba4:	f8c4 04ec 	str.w	r0, [r4, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8009ba8:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
 8009bac:	e7af      	b.n	8009b0e <spinOnce+0x4a>
      else if (mode_ == MODE_PROTOCOL_VER)
 8009bae:	2e01      	cmp	r6, #1
 8009bb0:	d050      	beq.n	8009c54 <spinOnce+0x190>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8009bb2:	2e02      	cmp	r6, #2
 8009bb4:	d06d      	beq.n	8009c92 <spinOnce+0x1ce>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8009bb6:	2e03      	cmp	r6, #3
 8009bb8:	d076      	beq.n	8009ca8 <spinOnce+0x1e4>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8009bba:	2e04      	cmp	r6, #4
 8009bbc:	d07e      	beq.n	8009cbc <spinOnce+0x1f8>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8009bbe:	2e05      	cmp	r6, #5
 8009bc0:	f000 808c 	beq.w	8009cdc <spinOnce+0x218>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8009bc4:	2e06      	cmp	r6, #6
 8009bc6:	f000 8099 	beq.w	8009cfc <spinOnce+0x238>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8009bca:	2e08      	cmp	r6, #8
 8009bcc:	d19f      	bne.n	8009b0e <spinOnce+0x4a>
        if ((checksum_ % 256) == 255)
 8009bce:	425a      	negs	r2, r3
 8009bd0:	b2d2      	uxtb	r2, r2
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	bf58      	it	pl
 8009bd6:	4253      	negpl	r3, r2
 8009bd8:	2bff      	cmp	r3, #255	; 0xff
        mode_ = MODE_FIRST_FF;
 8009bda:	f04f 0200 	mov.w	r2, #0
 8009bde:	f8c4 24ec 	str.w	r2, [r4, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 8009be2:	d194      	bne.n	8009b0e <spinOnce+0x4a>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8009be4:	f8d4 34f4 	ldr.w	r3, [r4, #1268]	; 0x4f4
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f000 81eb 	beq.w	8009fc4 <spinOnce+0x500>
          else if (topic_ == TopicInfo::ID_TIME)
 8009bee:	2b0a      	cmp	r3, #10
 8009bf0:	f000 8095 	beq.w	8009d1e <spinOnce+0x25a>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8009bf4:	2b06      	cmp	r3, #6
 8009bf6:	f000 80d1 	beq.w	8009d9c <spinOnce+0x2d8>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8009bfa:	2b0b      	cmp	r3, #11
 8009bfc:	f000 808c 	beq.w	8009d18 <spinOnce+0x254>
            if (subscribers[topic_ - 100])
 8009c00:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c04:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	d080      	beq.n	8009b0e <spinOnce+0x4a>
              subscribers[topic_ - 100]->callback(message_in);
 8009c0c:	6803      	ldr	r3, [r0, #0]
 8009c0e:	495d      	ldr	r1, [pc, #372]	; (8009d84 <spinOnce+0x2c0>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4798      	blx	r3
 8009c14:	e77b      	b.n	8009b0e <spinOnce+0x4a>
        message_in[index_++] = data;
 8009c16:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
        bytes_--;
 8009c1a:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
        message_in[index_++] = data;
 8009c1e:	1860      	adds	r0, r4, r1
        bytes_--;
 8009c20:	3b01      	subs	r3, #1
        message_in[index_++] = data;
 8009c22:	3101      	adds	r1, #1
 8009c24:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8009c28:	f8c4 14f8 	str.w	r1, [r4, #1272]	; 0x4f8
        bytes_--;
 8009c2c:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f47f af6c 	bne.w	8009b0e <spinOnce+0x4a>
          mode_ = MODE_MSG_CHECKSUM;
 8009c36:	2308      	movs	r3, #8
 8009c38:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
 8009c3c:	e767      	b.n	8009b0e <spinOnce+0x4a>
		return HAL_GetTick();
 8009c3e:	f7f7 fc03 	bl	8001448 <HAL_GetTick>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8009c42:	f241 3388 	movw	r3, #5000	; 0x1388
 8009c46:	1b40      	subs	r0, r0, r5
 8009c48:	4298      	cmp	r0, r3
 8009c4a:	f67f af60 	bls.w	8009b0e <spinOnce+0x4a>
          configured_ = false;
 8009c4e:	f884 6500 	strb.w	r6, [r4, #1280]	; 0x500
 8009c52:	e740      	b.n	8009ad6 <spinOnce+0x12>
        if (data == PROTOCOL_VER)
 8009c54:	2afe      	cmp	r2, #254	; 0xfe
 8009c56:	d03d      	beq.n	8009cd4 <spinOnce+0x210>
          if (configured_ == false)
 8009c58:	f894 3500 	ldrb.w	r3, [r4, #1280]	; 0x500
          mode_ = MODE_FIRST_FF;
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f8c4 24ec 	str.w	r2, [r4, #1260]	; 0x4ec
          if (configured_ == false)
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	f47f af53 	bne.w	8009b0e <spinOnce+0x4a>
    message_out[0] = 0xff;
 8009c68:	4945      	ldr	r1, [pc, #276]	; (8009d80 <spinOnce+0x2bc>)
 8009c6a:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
 8009c6e:	f640 22f7 	movw	r2, #2807	; 0xaf7
 8009c72:	f04f 4375 	mov.w	r3, #4110417920	; 0xf5000000
 8009c76:	f8c4 1224 	str.w	r1, [r4, #548]	; 0x224
		CDC_Transmit_FS(data, length);
 8009c7a:	4843      	ldr	r0, [pc, #268]	; (8009d88 <spinOnce+0x2c4>)
 8009c7c:	f8c4 2228 	str.w	r2, [r4, #552]	; 0x228
 8009c80:	2110      	movs	r1, #16
 8009c82:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
 8009c86:	f7fd fe2d 	bl	80078e4 <CDC_Transmit_FS>
		return HAL_GetTick();
 8009c8a:	f7f7 fbdd 	bl	8001448 <HAL_GetTick>
    rt_time = hardware_.time();
 8009c8e:	6160      	str	r0, [r4, #20]
 8009c90:	e73d      	b.n	8009b0e <spinOnce+0x4a>
        index_ = 0;
 8009c92:	2100      	movs	r1, #0
        mode_++;
 8009c94:	2303      	movs	r3, #3
        bytes_ = data;
 8009c96:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
        checksum_ = data;               /* first byte for calculating size checksum */
 8009c9a:	f8c4 24fc 	str.w	r2, [r4, #1276]	; 0x4fc
        index_ = 0;
 8009c9e:	f8c4 14f8 	str.w	r1, [r4, #1272]	; 0x4f8
        mode_++;
 8009ca2:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
 8009ca6:	e732      	b.n	8009b0e <spinOnce+0x4a>
        bytes_ += data << 8;
 8009ca8:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
 8009cac:	eb03 2202 	add.w	r2, r3, r2, lsl #8
        mode_++;
 8009cb0:	2304      	movs	r3, #4
        bytes_ += data << 8;
 8009cb2:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
        mode_++;
 8009cb6:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
 8009cba:	e728      	b.n	8009b0e <spinOnce+0x4a>
        if ((checksum_ % 256) == 255)
 8009cbc:	425a      	negs	r2, r3
 8009cbe:	b2d2      	uxtb	r2, r2
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	bf58      	it	pl
 8009cc4:	4253      	negpl	r3, r2
 8009cc6:	2bff      	cmp	r3, #255	; 0xff
          mode_++;
 8009cc8:	bf0c      	ite	eq
 8009cca:	2305      	moveq	r3, #5
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8009ccc:	2300      	movne	r3, #0
 8009cce:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
 8009cd2:	e71c      	b.n	8009b0e <spinOnce+0x4a>
          mode_++;
 8009cd4:	2302      	movs	r3, #2
 8009cd6:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
 8009cda:	e718      	b.n	8009b0e <spinOnce+0x4a>
        mode_++;
 8009cdc:	2306      	movs	r3, #6
        topic_ = data;
 8009cde:	f8c4 24f4 	str.w	r2, [r4, #1268]	; 0x4f4
        checksum_ = data;               /* first byte included in checksum */
 8009ce2:	f8c4 24fc 	str.w	r2, [r4, #1276]	; 0x4fc
        mode_++;
 8009ce6:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
 8009cea:	e710      	b.n	8009b0e <spinOnce+0x4a>
      if (c_time > last_msg_timeout_time)
 8009cec:	f8d4 350c 	ldr.w	r3, [r4, #1292]	; 0x50c
 8009cf0:	4298      	cmp	r0, r3
        mode_ = MODE_FIRST_FF;
 8009cf2:	bf84      	itt	hi
 8009cf4:	2300      	movhi	r3, #0
 8009cf6:	f8c4 34ec 	strhi.w	r3, [r4, #1260]	; 0x4ec
 8009cfa:	e701      	b.n	8009b00 <spinOnce+0x3c>
        topic_ += data << 8;
 8009cfc:	f8d4 34f4 	ldr.w	r3, [r4, #1268]	; 0x4f4
        if (bytes_ == 0)
 8009d00:	f8d4 14f0 	ldr.w	r1, [r4, #1264]	; 0x4f0
        topic_ += data << 8;
 8009d04:	eb03 2302 	add.w	r3, r3, r2, lsl #8
        mode_ = MODE_MESSAGE;
 8009d08:	2207      	movs	r2, #7
        topic_ += data << 8;
 8009d0a:	f8c4 34f4 	str.w	r3, [r4, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 8009d0e:	f8c4 24ec 	str.w	r2, [r4, #1260]	; 0x4ec
        if (bytes_ == 0)
 8009d12:	2900      	cmp	r1, #0
 8009d14:	d08f      	beq.n	8009c36 <spinOnce+0x172>
 8009d16:	e6fa      	b.n	8009b0e <spinOnce+0x4a>
            configured_ = false;
 8009d18:	f884 2500 	strb.w	r2, [r4, #1280]	; 0x500
 8009d1c:	e6f7      	b.n	8009b0e <spinOnce+0x4a>
 8009d1e:	f7f7 fb93 	bl	8001448 <HAL_GetTick>
 8009d22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d24:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    uint32_t offset = hardware_.time() - rt_time;
 8009d26:	6966      	ldr	r6, [r4, #20]
 8009d28:	3b01      	subs	r3, #1
 8009d2a:	1b86      	subs	r6, r0, r6
 8009d2c:	9301      	str	r3, [sp, #4]
 8009d2e:	eb02 0809 	add.w	r8, r2, r9
 8009d32:	f7f7 fb89 	bl	8001448 <HAL_GetTick>
    t.data.sec += offset / 1000;
 8009d36:	fbaa 3106 	umull	r3, r1, sl, r6
    sec_offset = new_now.sec - ms / 1000 - 1;
 8009d3a:	9b01      	ldr	r3, [sp, #4]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8009d3c:	f8df e058 	ldr.w	lr, [pc, #88]	; 8009d98 <spinOnce+0x2d4>
    t.data.sec += offset / 1000;
 8009d40:	0989      	lsrs	r1, r1, #6
    t.data.nsec += (offset % 1000) * 1000000UL;
 8009d42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009d46:	fb02 6611 	mls	r6, r2, r1, r6
    sec_offset = new_now.sec - ms / 1000 - 1;
 8009d4a:	440b      	add	r3, r1
 8009d4c:	fbaa c100 	umull	ip, r1, sl, r0
 8009d50:	0989      	lsrs	r1, r1, #6
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8009d52:	fb0e 8606 	mla	r6, lr, r6, r8
 8009d56:	fb02 0211 	mls	r2, r2, r1, r0
    sec_offset = new_now.sec - ms / 1000 - 1;
 8009d5a:	1a5b      	subs	r3, r3, r1
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8009d5c:	fb0e 6212 	mls	r2, lr, r2, r6
    normalizeSecNSec(sec_offset, nsec_offset);
 8009d60:	490a      	ldr	r1, [pc, #40]	; (8009d8c <spinOnce+0x2c8>)
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8009d62:	61e2      	str	r2, [r4, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8009d64:	4658      	mov	r0, fp
    sec_offset = new_now.sec - ms / 1000 - 1;
 8009d66:	61a3      	str	r3, [r4, #24]
    normalizeSecNSec(sec_offset, nsec_offset);
 8009d68:	f7fe f806 	bl	8007d78 <_ZN3ros16normalizeSecNSecERmS0_>
 8009d6c:	f7f7 fb6c 	bl	8001448 <HAL_GetTick>
    last_sync_receive_time = hardware_.time();
 8009d70:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
 8009d74:	e6cb      	b.n	8009b0e <spinOnce+0x4a>
 8009d76:	bf00      	nop
 8009d78:	20000200 	.word	0x20000200
 8009d7c:	2000020c 	.word	0x2000020c
 8009d80:	0008feff 	.word	0x0008feff
 8009d84:	20000224 	.word	0x20000224
 8009d88:	20000424 	.word	0x20000424
 8009d8c:	2000021c 	.word	0x2000021c
 8009d90:	3b9aca00 	.word	0x3b9aca00
 8009d94:	10624dd3 	.word	0x10624dd3
 8009d98:	000f4240 	.word	0x000f4240
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8009d9c:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
      if(ints_lengthT > ints_length)
 8009da0:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
 8009da4:	4598      	cmp	r8, r3
 8009da6:	d907      	bls.n	8009db8 <spinOnce+0x2f4>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8009da8:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8009dac:	f8d4 0520 	ldr.w	r0, [r4, #1312]	; 0x520
 8009db0:	f000 fd0a 	bl	800a7c8 <realloc>
 8009db4:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
      ints_length = ints_lengthT;
 8009db8:	f8c4 8518 	str.w	r8, [r4, #1304]	; 0x518
      for( uint32_t i = 0; i < ints_length; i++){
 8009dbc:	f1b8 0f00 	cmp.w	r8, #0
 8009dc0:	f000 80f0 	beq.w	8009fa4 <spinOnce+0x4e0>
 8009dc4:	4885      	ldr	r0, [pc, #532]	; (8009fdc <spinOnce+0x518>)
 8009dc6:	2104      	movs	r1, #4
 8009dc8:	2600      	movs	r6, #0
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009dca:	7f83      	ldrb	r3, [r0, #30]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8009dcc:	f890 e01d 	ldrb.w	lr, [r0, #29]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8009dd0:	7f02      	ldrb	r2, [r0, #28]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009dd2:	041b      	lsls	r3, r3, #16
 8009dd4:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009dd8:	f890 e01f 	ldrb.w	lr, [r0, #31]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009ddc:	4313      	orrs	r3, r2
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8009dde:	f8d4 2520 	ldr.w	r2, [r4, #1312]	; 0x520
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009de2:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
      this->st_ints = u_st_ints.real;
 8009de6:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8009dea:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
      for( uint32_t i = 0; i < ints_length; i++){
 8009dee:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
 8009df2:	3601      	adds	r6, #1
 8009df4:	42b3      	cmp	r3, r6
 8009df6:	460a      	mov	r2, r1
 8009df8:	f100 0004 	add.w	r0, r0, #4
 8009dfc:	f101 0104 	add.w	r1, r1, #4
 8009e00:	d8e3      	bhi.n	8009dca <spinOnce+0x306>
 8009e02:	9104      	str	r1, [sp, #16]
 8009e04:	f102 010b 	add.w	r1, r2, #11
 8009e08:	f102 0309 	add.w	r3, r2, #9
 8009e0c:	f102 0608 	add.w	r6, r2, #8
 8009e10:	9102      	str	r1, [sp, #8]
 8009e12:	9904      	ldr	r1, [sp, #16]
 8009e14:	9301      	str	r3, [sp, #4]
 8009e16:	1d50      	adds	r0, r2, #5
 8009e18:	f102 0e06 	add.w	lr, r2, #6
 8009e1c:	f102 0c07 	add.w	ip, r2, #7
 8009e20:	f102 030a 	add.w	r3, r2, #10
 8009e24:	9603      	str	r6, [sp, #12]
 8009e26:	320c      	adds	r2, #12
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8009e28:	44a6      	add	lr, r4
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8009e2a:	4420      	add	r0, r4
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8009e2c:	f89e e024 	ldrb.w	lr, [lr, #36]	; 0x24
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8009e30:	f890 8024 	ldrb.w	r8, [r0, #36]	; 0x24
      if(floats_lengthT > floats_length)
 8009e34:	f8d4 0524 	ldr.w	r0, [r4, #1316]	; 0x524
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8009e38:	4421      	add	r1, r4
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8009e3a:	44a4      	add	ip, r4
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8009e3c:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8009e40:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8009e44:	f89c c024 	ldrb.w	ip, [ip, #36]	; 0x24
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8009e48:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
 8009e4c:	ea4e 0101 	orr.w	r1, lr, r1
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8009e50:	ea41 680c 	orr.w	r8, r1, ip, lsl #24
      if(floats_lengthT > floats_length)
 8009e54:	4580      	cmp	r8, r0
 8009e56:	d90b      	bls.n	8009e70 <spinOnce+0x3ac>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8009e58:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8009e5c:	f8d4 052c 	ldr.w	r0, [r4, #1324]	; 0x52c
 8009e60:	9205      	str	r2, [sp, #20]
 8009e62:	9304      	str	r3, [sp, #16]
 8009e64:	f000 fcb0 	bl	800a7c8 <realloc>
 8009e68:	9a05      	ldr	r2, [sp, #20]
 8009e6a:	9b04      	ldr	r3, [sp, #16]
 8009e6c:	f8c4 052c 	str.w	r0, [r4, #1324]	; 0x52c
      floats_length = floats_lengthT;
 8009e70:	f8c4 8524 	str.w	r8, [r4, #1316]	; 0x524
      for( uint32_t i = 0; i < floats_length; i++){
 8009e74:	f1b8 0f00 	cmp.w	r8, #0
 8009e78:	d026      	beq.n	8009ec8 <spinOnce+0x404>
 8009e7a:	f8df e168 	ldr.w	lr, [pc, #360]	; 8009fe4 <spinOnce+0x520>
 8009e7e:	19b9      	adds	r1, r7, r6
 8009e80:	2000      	movs	r0, #0
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009e82:	7e8b      	ldrb	r3, [r1, #26]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8009e84:	f891 c019 	ldrb.w	ip, [r1, #25]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8009e88:	7e0a      	ldrb	r2, [r1, #24]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009e8a:	041b      	lsls	r3, r3, #16
 8009e8c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009e90:	f891 c01b 	ldrb.w	ip, [r1, #27]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009e94:	4313      	orrs	r3, r2
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8009e96:	f8d4 252c 	ldr.w	r2, [r4, #1324]	; 0x52c
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009e9a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
      this->st_floats = u_st_floats.real;
 8009e9e:	f8ce 3000 	str.w	r3, [lr]
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8009ea2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
      for( uint32_t i = 0; i < floats_length; i++){
 8009ea6:	f8d4 3524 	ldr.w	r3, [r4, #1316]	; 0x524
 8009eaa:	3001      	adds	r0, #1
 8009eac:	4283      	cmp	r3, r0
 8009eae:	4632      	mov	r2, r6
 8009eb0:	f101 0104 	add.w	r1, r1, #4
 8009eb4:	f106 0604 	add.w	r6, r6, #4
 8009eb8:	d8e3      	bhi.n	8009e82 <spinOnce+0x3be>
 8009eba:	1d53      	adds	r3, r2, #5
 8009ebc:	1dd1      	adds	r1, r2, #7
 8009ebe:	9301      	str	r3, [sp, #4]
 8009ec0:	9603      	str	r6, [sp, #12]
 8009ec2:	1d93      	adds	r3, r2, #6
 8009ec4:	9102      	str	r1, [sp, #8]
 8009ec6:	3208      	adds	r2, #8
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8009ec8:	9901      	ldr	r1, [sp, #4]
 8009eca:	4421      	add	r1, r4
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8009ecc:	4423      	add	r3, r4
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8009ece:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8009ed2:	9903      	ldr	r1, [sp, #12]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8009ed4:	f893 6024 	ldrb.w	r6, [r3, #36]	; 0x24
      if(strings_lengthT > strings_length)
 8009ed8:	f8d4 3530 	ldr.w	r3, [r4, #1328]	; 0x530
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8009edc:	4421      	add	r1, r4
 8009ede:	468e      	mov	lr, r1
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8009ee0:	9902      	ldr	r1, [sp, #8]
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8009ee2:	f89e e024 	ldrb.w	lr, [lr, #36]	; 0x24
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8009ee6:	4421      	add	r1, r4
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8009ee8:	0436      	lsls	r6, r6, #16
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8009eea:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8009eee:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
 8009ef2:	ea46 060e 	orr.w	r6, r6, lr
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8009ef6:	ea46 6601 	orr.w	r6, r6, r1, lsl #24
      if(strings_lengthT > strings_length)
 8009efa:	429e      	cmp	r6, r3
 8009efc:	d908      	bls.n	8009f10 <spinOnce+0x44c>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8009efe:	00b1      	lsls	r1, r6, #2
 8009f00:	f8d4 0538 	ldr.w	r0, [r4, #1336]	; 0x538
 8009f04:	9201      	str	r2, [sp, #4]
 8009f06:	f000 fc5f 	bl	800a7c8 <realloc>
 8009f0a:	9a01      	ldr	r2, [sp, #4]
 8009f0c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
      strings_length = strings_lengthT;
 8009f10:	f8c4 6530 	str.w	r6, [r4, #1328]	; 0x530
      for( uint32_t i = 0; i < strings_length; i++){
 8009f14:	2e00      	cmp	r6, #0
 8009f16:	d041      	beq.n	8009f9c <spinOnce+0x4d8>
 8009f18:	2300      	movs	r3, #0
          inbuffer[k-1]=inbuffer[k];
 8009f1a:	9501      	str	r5, [sp, #4]
 8009f1c:	461d      	mov	r5, r3
 8009f1e:	18a0      	adds	r0, r4, r2
      offset += 4;
 8009f20:	f102 0804 	add.w	r8, r2, #4
 8009f24:	f890 6025 	ldrb.w	r6, [r0, #37]	; 0x25
 8009f28:	f890 c026 	ldrb.w	ip, [r0, #38]	; 0x26
 8009f2c:	f890 e024 	ldrb.w	lr, [r0, #36]	; 0x24
 8009f30:	f890 0027 	ldrb.w	r0, [r0, #39]	; 0x27
 8009f34:	0236      	lsls	r6, r6, #8
 8009f36:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 8009f3a:	ea46 060e 	orr.w	r6, r6, lr
 8009f3e:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
          inbuffer[k-1]=inbuffer[k];
 8009f42:	f06f 0103 	mvn.w	r1, #3
 8009f46:	1a89      	subs	r1, r1, r2
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8009f48:	4446      	add	r6, r8
          inbuffer[k-1]=inbuffer[k];
 8009f4a:	eb01 0e06 	add.w	lr, r1, r6
 8009f4e:	f102 0c05 	add.w	ip, r2, #5
 8009f52:	f102 011c 	add.w	r1, r2, #28
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8009f56:	45b0      	cmp	r8, r6
          inbuffer[k-1]=inbuffer[k];
 8009f58:	f102 021b 	add.w	r2, r2, #27
 8009f5c:	4439      	add	r1, r7
 8009f5e:	eb07 0002 	add.w	r0, r7, r2
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8009f62:	d205      	bcs.n	8009f70 <spinOnce+0x4ac>
 8009f64:	45b4      	cmp	ip, r6
 8009f66:	bf94      	ite	ls
 8009f68:	4672      	movls	r2, lr
 8009f6a:	2201      	movhi	r2, #1
 8009f6c:	f000 fb5d 	bl	800a62a <memmove>
      inbuffer[offset+length_st_strings-1]=0;
 8009f70:	19a1      	adds	r1, r4, r6
 8009f72:	f04f 0300 	mov.w	r3, #0
 8009f76:	f881 3023 	strb.w	r3, [r1, #35]	; 0x23
      this->st_strings = (char *)(inbuffer + offset-1);
 8009f7a:	4b19      	ldr	r3, [pc, #100]	; (8009fe0 <spinOnce+0x51c>)
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8009f7c:	f8d4 1538 	ldr.w	r1, [r4, #1336]	; 0x538
      this->st_strings = (char *)(inbuffer + offset-1);
 8009f80:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8009f84:	441a      	add	r2, r3
 8009f86:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8009f8a:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
      for( uint32_t i = 0; i < strings_length; i++){
 8009f8e:	f8d4 1530 	ldr.w	r1, [r4, #1328]	; 0x530
 8009f92:	3501      	adds	r5, #1
 8009f94:	42a9      	cmp	r1, r5
      offset += length_st_strings;
 8009f96:	4632      	mov	r2, r6
      for( uint32_t i = 0; i < strings_length; i++){
 8009f98:	d8c1      	bhi.n	8009f1e <spinOnce+0x45a>
 8009f9a:	9d01      	ldr	r5, [sp, #4]
            param_recieved = true;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
 8009fa2:	e5b4      	b.n	8009b0e <spinOnce+0x4a>
      for( uint32_t i = 0; i < ints_length; i++){
 8009fa4:	2109      	movs	r1, #9
 8009fa6:	9101      	str	r1, [sp, #4]
 8009fa8:	2108      	movs	r1, #8
 8009faa:	230b      	movs	r3, #11
 8009fac:	9103      	str	r1, [sp, #12]
 8009fae:	2104      	movs	r1, #4
 8009fb0:	9302      	str	r3, [sp, #8]
 8009fb2:	220c      	movs	r2, #12
 8009fb4:	230a      	movs	r3, #10
 8009fb6:	f04f 0c07 	mov.w	ip, #7
 8009fba:	f04f 0e06 	mov.w	lr, #6
 8009fbe:	2005      	movs	r0, #5
 8009fc0:	9104      	str	r1, [sp, #16]
 8009fc2:	e731      	b.n	8009e28 <spinOnce+0x364>
            requestSyncTime();
 8009fc4:	4805      	ldr	r0, [pc, #20]	; (8009fdc <spinOnce+0x518>)
 8009fc6:	f7ff f81b 	bl	8009000 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8009fca:	4804      	ldr	r0, [pc, #16]	; (8009fdc <spinOnce+0x518>)
 8009fcc:	f7ff f852 	bl	8009074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8009fd0:	f8c4 5504 	str.w	r5, [r4, #1284]	; 0x504
            last_sync_receive_time = c_time;
 8009fd4:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
 8009fd8:	e57d      	b.n	8009ad6 <spinOnce+0x12>
 8009fda:	bf00      	nop
 8009fdc:	2000020c 	.word	0x2000020c
 8009fe0:	20000224 	.word	0x20000224
 8009fe4:	20000728 	.word	0x20000728

08009fe8 <_GLOBAL__sub_I_rb>:
 8009fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  NodeHandle_() : configured_(false)
 8009fec:	4c6f      	ldr	r4, [pc, #444]	; (800a1ac <_GLOBAL__sub_I_rb+0x1c4>)
      strings_length(0), strings(NULL)
 8009fee:	4b70      	ldr	r3, [pc, #448]	; (800a1b0 <_GLOBAL__sub_I_rb+0x1c8>)
 8009ff0:	4a70      	ldr	r2, [pc, #448]	; (800a1b4 <_GLOBAL__sub_I_rb+0x1cc>)
 8009ff2:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
 8009ff6:	2500      	movs	r5, #0
 8009ff8:	2764      	movs	r7, #100	; 0x64
 8009ffa:	60e2      	str	r2, [r4, #12]
 8009ffc:	4629      	mov	r1, r5
 8009ffe:	463a      	mov	r2, r7
 800a000:	f204 4024 	addw	r0, r4, #1060	; 0x424
 800a004:	f8c4 5518 	str.w	r5, [r4, #1304]	; 0x518
 800a008:	f8c4 5520 	str.w	r5, [r4, #1312]	; 0x520
 800a00c:	f8c4 5524 	str.w	r5, [r4, #1316]	; 0x524
 800a010:	f8c4 552c 	str.w	r5, [r4, #1324]	; 0x52c
 800a014:	f8c4 5530 	str.w	r5, [r4, #1328]	; 0x530
 800a018:	f8c4 5538 	str.w	r5, [r4, #1336]	; 0x538
 800a01c:	f44f 7600 	mov.w	r6, #512	; 0x200
 800a020:	f884 5500 	strb.w	r5, [r4, #1280]	; 0x500
 800a024:	f000 fb1b 	bl	800a65e <memset>
 800a028:	463a      	mov	r2, r7
 800a02a:	4629      	mov	r1, r5
 800a02c:	f504 6091 	add.w	r0, r4, #1160	; 0x488
 800a030:	f000 fb15 	bl	800a65e <memset>
 800a034:	4632      	mov	r2, r6
 800a036:	4629      	mov	r1, r5
 800a038:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a03c:	f000 fb0f 	bl	800a65e <memset>
 800a040:	4632      	mov	r2, r6
 800a042:	4629      	mov	r1, r5
 800a044:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800a048:	f000 fb09 	bl	800a65e <memset>
      data("")
 800a04c:	485a      	ldr	r0, [pc, #360]	; (800a1b8 <_GLOBAL__sub_I_rb+0x1d0>)
 800a04e:	f8c4 06ac 	str.w	r0, [r4, #1708]	; 0x6ac
    endpoint_(endpoint) {};
 800a052:	f204 60ac 	addw	r0, r4, #1708	; 0x6ac
 800a056:	4f59      	ldr	r7, [pc, #356]	; (800a1bc <_GLOBAL__sub_I_rb+0x1d4>)
 800a058:	4959      	ldr	r1, [pc, #356]	; (800a1c0 <_GLOBAL__sub_I_rb+0x1d8>)
 800a05a:	f8c4 0540 	str.w	r0, [r4, #1344]	; 0x540
      z(0)
 800a05e:	f204 608c 	addw	r0, r4, #1676	; 0x68c
 800a062:	2300      	movs	r3, #0
 800a064:	4e57      	ldr	r6, [pc, #348]	; (800a1c4 <_GLOBAL__sub_I_rb+0x1dc>)
 800a066:	f8c4 76b0 	str.w	r7, [r4, #1712]	; 0x6b0
 800a06a:	f8c4 1564 	str.w	r1, [r4, #1380]	; 0x564
 800a06e:	f204 6774 	addw	r7, r4, #1652	; 0x674
 800a072:	f204 619c 	addw	r1, r4, #1692	; 0x69c
      data(0)
 800a076:	4a54      	ldr	r2, [pc, #336]	; (800a1c8 <_GLOBAL__sub_I_rb+0x1e0>)
 800a078:	6043      	str	r3, [r0, #4]
 800a07a:	6083      	str	r3, [r0, #8]
 800a07c:	60c3      	str	r3, [r0, #12]
 800a07e:	f8c4 6578 	str.w	r6, [r4, #1400]	; 0x578
 800a082:	f8c4 757c 	str.w	r7, [r4, #1404]	; 0x57c
      data(0)
 800a086:	4e51      	ldr	r6, [pc, #324]	; (800a1cc <_GLOBAL__sub_I_rb+0x1e4>)
 800a088:	4f51      	ldr	r7, [pc, #324]	; (800a1d0 <_GLOBAL__sub_I_rb+0x1e8>)
 800a08a:	f8c4 0554 	str.w	r0, [r4, #1364]	; 0x554
 800a08e:	4851      	ldr	r0, [pc, #324]	; (800a1d4 <_GLOBAL__sub_I_rb+0x1ec>)
 800a090:	604b      	str	r3, [r1, #4]
 800a092:	608b      	str	r3, [r1, #8]
 800a094:	60cb      	str	r3, [r1, #12]
 800a096:	f8c4 1568 	str.w	r1, [r4, #1384]	; 0x568
 800a09a:	f8c4 2674 	str.w	r2, [r4, #1652]	; 0x674
 800a09e:	f8c4 267c 	str.w	r2, [r4, #1660]	; 0x67c
 800a0a2:	f8c4 665c 	str.w	r6, [r4, #1628]	; 0x65c
 800a0a6:	f8c4 6664 	str.w	r6, [r4, #1636]	; 0x664
 800a0aa:	f8c4 666c 	str.w	r6, [r4, #1644]	; 0x66c
 800a0ae:	f8c4 768c 	str.w	r7, [r4, #1676]	; 0x68c
 800a0b2:	f8c4 769c 	str.w	r7, [r4, #1692]	; 0x69c
 800a0b6:	f204 6164 	addw	r1, r4, #1636	; 0x664
 800a0ba:	f8c4 053c 	str.w	r0, [r4, #1340]	; 0x53c
 800a0be:	f8c4 0550 	str.w	r0, [r4, #1360]	; 0x550
 800a0c2:	4b45      	ldr	r3, [pc, #276]	; (800a1d8 <_GLOBAL__sub_I_rb+0x1f0>)
 800a0c4:	4f45      	ldr	r7, [pc, #276]	; (800a1dc <_GLOBAL__sub_I_rb+0x1f4>)
    spin_timeout_ = 0;
 800a0c6:	6225      	str	r5, [r4, #32]
 800a0c8:	f204 665c 	addw	r6, r4, #1628	; 0x65c
 800a0cc:	f884 5678 	strb.w	r5, [r4, #1656]	; 0x678
 800a0d0:	f884 5680 	strb.w	r5, [r4, #1664]	; 0x680
 800a0d4:	f8c4 5660 	str.w	r5, [r4, #1632]	; 0x660
 800a0d8:	f8c4 5668 	str.w	r5, [r4, #1640]	; 0x668
 800a0dc:	f8c4 5670 	str.w	r5, [r4, #1648]	; 0x670
 800a0e0:	f8c4 554c 	str.w	r5, [r4, #1356]	; 0x54c
 800a0e4:	f8c4 5560 	str.w	r5, [r4, #1376]	; 0x560
 800a0e8:	f8c4 5574 	str.w	r5, [r4, #1396]	; 0x574
 800a0ec:	f8c4 5588 	str.w	r5, [r4, #1416]	; 0x588
 800a0f0:	f8c4 2604 	str.w	r2, [r4, #1540]	; 0x604
 800a0f4:	f8c4 25e8 	str.w	r2, [r4, #1512]	; 0x5e8
 800a0f8:	f204 626c 	addw	r2, r4, #1644	; 0x66c
    endpoint_(endpoint)
 800a0fc:	4838      	ldr	r0, [pc, #224]	; (800a1e0 <_GLOBAL__sub_I_rb+0x1f8>)
 800a0fe:	f8c4 15a4 	str.w	r1, [r4, #1444]	; 0x5a4
 800a102:	f8c4 35b4 	str.w	r3, [r4, #1460]	; 0x5b4
    topic_ = topic_name;
 800a106:	4937      	ldr	r1, [pc, #220]	; (800a1e4 <_GLOBAL__sub_I_rb+0x1fc>)
    endpoint_(endpoint)
 800a108:	4b37      	ldr	r3, [pc, #220]	; (800a1e8 <_GLOBAL__sub_I_rb+0x200>)
 800a10a:	f8c4 25b8 	str.w	r2, [r4, #1464]	; 0x5b8
 800a10e:	f8c4 75c8 	str.w	r7, [r4, #1480]	; 0x5c8
    topic_ = topic_name;
 800a112:	4a36      	ldr	r2, [pc, #216]	; (800a1ec <_GLOBAL__sub_I_rb+0x204>)
    endpoint_(endpoint)
 800a114:	4f36      	ldr	r7, [pc, #216]	; (800a1f0 <_GLOBAL__sub_I_rb+0x208>)
 800a116:	f8c4 65cc 	str.w	r6, [r4, #1484]	; 0x5cc
    topic_ = topic_name;
 800a11a:	4e36      	ldr	r6, [pc, #216]	; (800a1f4 <_GLOBAL__sub_I_rb+0x20c>)
    endpoint_(endpoint)
 800a11c:	f8c4 06c8 	str.w	r0, [r4, #1736]	; 0x6c8
    topic_ = topic_name;
 800a120:	f8c4 16bc 	str.w	r1, [r4, #1724]	; 0x6bc
    endpoint_(endpoint)
 800a124:	4834      	ldr	r0, [pc, #208]	; (800a1f8 <_GLOBAL__sub_I_rb+0x210>)
      data(0)
 800a126:	4935      	ldr	r1, [pc, #212]	; (800a1fc <_GLOBAL__sub_I_rb+0x214>)
 800a128:	f8c4 36e4 	str.w	r3, [r4, #1764]	; 0x6e4
    topic_ = topic_name;
 800a12c:	f8c4 26d8 	str.w	r2, [r4, #1752]	; 0x6d8
    endpoint_(endpoint)
 800a130:	2301      	movs	r3, #1
 800a132:	4a33      	ldr	r2, [pc, #204]	; (800a200 <_GLOBAL__sub_I_rb+0x218>)
 800a134:	f8c4 760c 	str.w	r7, [r4, #1548]	; 0x60c
    topic_ = topic_name;
 800a138:	f8c4 6600 	str.w	r6, [r4, #1536]	; 0x600
 800a13c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800a20c <_GLOBAL__sub_I_rb+0x224>
 800a140:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 800a210 <_GLOBAL__sub_I_rb+0x228>
    endpoint_(endpoint)
 800a144:	4f2f      	ldr	r7, [pc, #188]	; (800a204 <_GLOBAL__sub_I_rb+0x21c>)
    topic_ = topic_name;
 800a146:	4e30      	ldr	r6, [pc, #192]	; (800a208 <_GLOBAL__sub_I_rb+0x220>)
 800a148:	f8c4 559c 	str.w	r5, [r4, #1436]	; 0x59c
 800a14c:	f204 6c7c 	addw	ip, r4, #1660	; 0x67c
 800a150:	f8c4 55b0 	str.w	r5, [r4, #1456]	; 0x5b0
 800a154:	f8c4 55c4 	str.w	r5, [r4, #1476]	; 0x5c4
 800a158:	f8c4 55d8 	str.w	r5, [r4, #1496]	; 0x5d8
 800a15c:	f884 56c4 	strb.w	r5, [r4, #1732]	; 0x6c4
 800a160:	f884 56e0 	strb.w	r5, [r4, #1760]	; 0x6e0
 800a164:	f884 5608 	strb.w	r5, [r4, #1544]	; 0x608
 800a168:	f8c4 858c 	str.w	r8, [r4, #1420]	; 0x58c
 800a16c:	f8c4 c590 	str.w	ip, [r4, #1424]	; 0x590
 800a170:	f8c4 e5a0 	str.w	lr, [r4, #1440]	; 0x5a0
    endpoint_(endpoint)
 800a174:	f8c4 06b4 	str.w	r0, [r4, #1716]	; 0x6b4
 800a178:	f8c4 06d0 	str.w	r0, [r4, #1744]	; 0x6d0
 800a17c:	f8c4 16c0 	str.w	r1, [r4, #1728]	; 0x6c0
 800a180:	f8c4 16dc 	str.w	r1, [r4, #1756]	; 0x6dc
 800a184:	f8c4 36cc 	str.w	r3, [r4, #1740]	; 0x6cc
 800a188:	f8c4 36e8 	str.w	r3, [r4, #1768]	; 0x6e8
 800a18c:	f8c4 3610 	str.w	r3, [r4, #1552]	; 0x610
 800a190:	f8c4 25f8 	str.w	r2, [r4, #1528]	; 0x5f8
 800a194:	f8c4 25dc 	str.w	r2, [r4, #1500]	; 0x5dc
 800a198:	f884 55ec 	strb.w	r5, [r4, #1516]	; 0x5ec
 800a19c:	f8c4 35f4 	str.w	r3, [r4, #1524]	; 0x5f4
 800a1a0:	f8c4 75f0 	str.w	r7, [r4, #1520]	; 0x5f0
    topic_ = topic_name;
 800a1a4:	f8c4 65e4 	str.w	r6, [r4, #1508]	; 0x5e4
 800a1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1ac:	20000200 	.word	0x20000200
 800a1b0:	0800aca8 	.word	0x0800aca8
 800a1b4:	0800ad38 	.word	0x0800ad38
 800a1b8:	0800acd8 	.word	0x0800acd8
 800a1bc:	0800ae84 	.word	0x0800ae84
 800a1c0:	0800af94 	.word	0x0800af94
 800a1c4:	0800af9c 	.word	0x0800af9c
 800a1c8:	0800acf0 	.word	0x0800acf0
 800a1cc:	0800ad08 	.word	0x0800ad08
 800a1d0:	0800ad20 	.word	0x0800ad20
 800a1d4:	0800af8c 	.word	0x0800af8c
 800a1d8:	0800afc4 	.word	0x0800afc4
 800a1dc:	0800afd4 	.word	0x0800afd4
 800a1e0:	08008665 	.word	0x08008665
 800a1e4:	0800afd8 	.word	0x0800afd8
 800a1e8:	0800812d 	.word	0x0800812d
 800a1ec:	0800afe0 	.word	0x0800afe0
 800a1f0:	080080bd 	.word	0x080080bd
 800a1f4:	0800afe8 	.word	0x0800afe8
 800a1f8:	0800ad4c 	.word	0x0800ad4c
 800a1fc:	0800acc0 	.word	0x0800acc0
 800a200:	0800ad64 	.word	0x0800ad64
 800a204:	080080f5 	.word	0x080080f5
 800a208:	0800aff8 	.word	0x0800aff8
 800a20c:	0800afa8 	.word	0x0800afa8
 800a210:	0800afb4 	.word	0x0800afb4

0800a214 <_Z8NBT_initP5nbt_tm>:
#include "stm32f4xx_hal.h"
#include "nbt.h"

//NBT - Non Blocking Timer
void NBT_init(nbt_t * nbt, uint32_t interval)
{
 800a214:	b510      	push	{r4, lr}
	nbt->timeout = interval;
 800a216:	6001      	str	r1, [r0, #0]
{
 800a218:	4604      	mov	r4, r0
	nbt->previousMillis = HAL_GetTick();
 800a21a:	f7f7 f915 	bl	8001448 <HAL_GetTick>
 800a21e:	6060      	str	r0, [r4, #4]
 800a220:	bd10      	pop	{r4, pc}
 800a222:	bf00      	nop

0800a224 <_Z11NBT_handlerP5nbt_t>:
}

bool NBT_handler(nbt_t * nbt)
{
 800a224:	b510      	push	{r4, lr}
 800a226:	4604      	mov	r4, r0
	if(HAL_GetTick()-nbt->previousMillis>nbt->timeout){
 800a228:	f7f7 f90e 	bl	8001448 <HAL_GetTick>
 800a22c:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a230:	1ac0      	subs	r0, r0, r3
 800a232:	4290      	cmp	r0, r2
 800a234:	d802      	bhi.n	800a23c <_Z11NBT_handlerP5nbt_t+0x18>
		nbt->previousMillis = HAL_GetTick();
		return true;
	}

	return false;
 800a236:	2300      	movs	r3, #0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	bd10      	pop	{r4, pc}
		nbt->previousMillis = HAL_GetTick();
 800a23c:	f7f7 f904 	bl	8001448 <HAL_GetTick>
		return true;
 800a240:	2301      	movs	r3, #1
		nbt->previousMillis = HAL_GetTick();
 800a242:	6060      	str	r0, [r4, #4]
}
 800a244:	4618      	mov	r0, r3
 800a246:	bd10      	pop	{r4, pc}

0800a248 <_Z18ringbuffer_putcharP10ringbufferh>:

#define ASSERT(EX)                                                         \

__inline enum ringbuffer_state  ringbuffer_status(struct  ringbuffer *rb)
{
	if (rb->read_index == rb->write_index) {
 800a248:	8882      	ldrh	r2, [r0, #4]
 800a24a:	88c3      	ldrh	r3, [r0, #6]
 800a24c:	f3c2 024e 	ubfx	r2, r2, #1, #15
 800a250:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800a254:	429a      	cmp	r2, r3

/**
 * put a character into ring buffer
 */
uint32_t  ringbuffer_putchar(struct  ringbuffer *rb, const uint8_t ch)
{
 800a256:	b430      	push	{r4, r5}
    ASSERT(rb != NULL);

    /* whether has enough space */
	if (! ringbuffer_empty_space(rb))
 800a258:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
	if (rb->read_index == rb->write_index) {
 800a25c:	d017      	beq.n	800a28e <_Z18ringbuffer_putcharP10ringbufferh+0x46>
		if (rb->write_index > rb->read_index)
 800a25e:	4293      	cmp	r3, r2
 800a260:	dc23      	bgt.n	800a2aa <_Z18ringbuffer_putcharP10ringbufferh+0x62>
			return rb->buffer_size - (rb->read_index - rb->write_index);
 800a262:	195c      	adds	r4, r3, r5
 800a264:	1aa2      	subs	r2, r4, r2
 800a266:	b292      	uxth	r2, r2
	if (! ringbuffer_empty_space(rb))
 800a268:	4295      	cmp	r5, r2
 800a26a:	d01b      	beq.n	800a2a4 <_Z18ringbuffer_putcharP10ringbufferh+0x5c>
		return 0;

	rb->buffer_ptr[rb->write_index] = ch;
 800a26c:	6802      	ldr	r2, [r0, #0]
 800a26e:	54d1      	strb	r1, [r2, r3]

	/* flip mirror */
	if (rb->write_index == rb->buffer_size - 1) {
 800a270:	88c3      	ldrh	r3, [r0, #6]
 800a272:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800a276:	f3c3 024e 	ubfx	r2, r3, #1, #15
 800a27a:	3901      	subs	r1, #1
 800a27c:	428a      	cmp	r2, r1
 800a27e:	d017      	beq.n	800a2b0 <_Z18ringbuffer_putcharP10ringbufferh+0x68>
		rb->write_mirror = ~rb->write_mirror;
		rb->write_index = 0;
	} else {
		rb->write_index++;
 800a280:	3201      	adds	r2, #1
 800a282:	f362 034f 	bfi	r3, r2, #1, #15
 800a286:	80c3      	strh	r3, [r0, #6]
	}

	return 1;
}
 800a288:	bc30      	pop	{r4, r5}
	return 1;
 800a28a:	2001      	movs	r0, #1
}
 800a28c:	4770      	bx	lr
		if (rb->read_mirror == rb->write_mirror)
 800a28e:	7904      	ldrb	r4, [r0, #4]
 800a290:	7982      	ldrb	r2, [r0, #6]
 800a292:	f004 0401 	and.w	r4, r4, #1
 800a296:	f002 0201 	and.w	r2, r2, #1
 800a29a:	4294      	cmp	r4, r2
 800a29c:	d016      	beq.n	800a2cc <_Z18ringbuffer_putcharP10ringbufferh+0x84>
 800a29e:	b2aa      	uxth	r2, r5
	if (! ringbuffer_empty_space(rb))
 800a2a0:	4295      	cmp	r5, r2
 800a2a2:	d1e3      	bne.n	800a26c <_Z18ringbuffer_putcharP10ringbufferh+0x24>
		return 0;
 800a2a4:	2000      	movs	r0, #0
}
 800a2a6:	bc30      	pop	{r4, r5}
 800a2a8:	4770      	bx	lr
			return rb->write_index - rb->read_index;
 800a2aa:	1a9a      	subs	r2, r3, r2
 800a2ac:	b292      	uxth	r2, r2
 800a2ae:	e7db      	b.n	800a268 <_Z18ringbuffer_putcharP10ringbufferh+0x20>
		rb->write_mirror = ~rb->write_mirror;
 800a2b0:	7983      	ldrb	r3, [r0, #6]
 800a2b2:	f3c3 0200 	ubfx	r2, r3, #0, #1
 800a2b6:	43d2      	mvns	r2, r2
 800a2b8:	f362 0300 	bfi	r3, r2, #0, #1
 800a2bc:	7183      	strb	r3, [r0, #6]
		rb->write_index = 0;
 800a2be:	88c3      	ldrh	r3, [r0, #6]
 800a2c0:	f36f 034f 	bfc	r3, #1, #15
 800a2c4:	80c3      	strh	r3, [r0, #6]
}
 800a2c6:	bc30      	pop	{r4, r5}
	return 1;
 800a2c8:	2001      	movs	r0, #1
}
 800a2ca:	4770      	bx	lr
		if (rb->read_mirror == rb->write_mirror)
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	e7cb      	b.n	800a268 <_Z18ringbuffer_putcharP10ringbufferh+0x20>

0800a2d0 <_Z18ringbuffer_getcharP10ringbufferPh>:
	if (rb->read_index == rb->write_index) {
 800a2d0:	8882      	ldrh	r2, [r0, #4]
 800a2d2:	88c3      	ldrh	r3, [r0, #6]
 800a2d4:	f3c2 024e 	ubfx	r2, r2, #1, #15
 800a2d8:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800a2dc:	429a      	cmp	r2, r3

/**
 * get a character from a ringbuffer
 */
uint32_t  ringbuffer_getchar(struct  ringbuffer *rb, uint8_t *ch)
{
 800a2de:	b410      	push	{r4}
	if (rb->read_index == rb->write_index) {
 800a2e0:	d01d      	beq.n	800a31e <_Z18ringbuffer_getcharP10ringbufferPh+0x4e>
		if (rb->write_index > rb->read_index)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	dc01      	bgt.n	800a2ea <_Z18ringbuffer_getcharP10ringbufferPh+0x1a>
			return rb->buffer_size - (rb->read_index - rb->write_index);
 800a2e6:	8904      	ldrh	r4, [r0, #8]
 800a2e8:	4423      	add	r3, r4
 800a2ea:	1a9b      	subs	r3, r3, r2
 800a2ec:	b29b      	uxth	r3, r3
    ASSERT(rb != NULL);

    /* ringbuffer is empty */
    if (! ringbuffer_data_len(rb))
 800a2ee:	b193      	cbz	r3, 800a316 <_Z18ringbuffer_getcharP10ringbufferPh+0x46>
        return 0;

    /* put character */
    *ch = rb->buffer_ptr[rb->read_index];
 800a2f0:	6803      	ldr	r3, [r0, #0]
 800a2f2:	5c9b      	ldrb	r3, [r3, r2]
 800a2f4:	700b      	strb	r3, [r1, #0]

    if (rb->read_index == rb->buffer_size-1)
 800a2f6:	8883      	ldrh	r3, [r0, #4]
 800a2f8:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800a2fc:	f3c3 024e 	ubfx	r2, r3, #1, #15
 800a300:	3901      	subs	r1, #1
 800a302:	428a      	cmp	r2, r1
 800a304:	d015      	beq.n	800a332 <_Z18ringbuffer_getcharP10ringbufferPh+0x62>
        rb->read_mirror = ~rb->read_mirror;
        rb->read_index = 0;
    }
    else
    {
        rb->read_index++;
 800a306:	3201      	adds	r2, #1
 800a308:	f362 034f 	bfi	r3, r2, #1, #15
 800a30c:	8083      	strh	r3, [r0, #4]
    }

    return 1;
}
 800a30e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return 1;
 800a312:	2001      	movs	r0, #1
}
 800a314:	4770      	bx	lr
        return 0;
 800a316:	2000      	movs	r0, #0
}
 800a318:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a31c:	4770      	bx	lr
		if (rb->read_mirror == rb->write_mirror)
 800a31e:	7904      	ldrb	r4, [r0, #4]
 800a320:	7983      	ldrb	r3, [r0, #6]
 800a322:	f004 0401 	and.w	r4, r4, #1
 800a326:	f003 0301 	and.w	r3, r3, #1
 800a32a:	429c      	cmp	r4, r3
 800a32c:	d0f3      	beq.n	800a316 <_Z18ringbuffer_getcharP10ringbufferPh+0x46>
		return rb->buffer_size;
 800a32e:	8903      	ldrh	r3, [r0, #8]
 800a330:	e7dd      	b.n	800a2ee <_Z18ringbuffer_getcharP10ringbufferPh+0x1e>
        rb->read_mirror = ~rb->read_mirror;
 800a332:	7903      	ldrb	r3, [r0, #4]
}
 800a334:	f85d 4b04 	ldr.w	r4, [sp], #4
        rb->read_mirror = ~rb->read_mirror;
 800a338:	f3c3 0200 	ubfx	r2, r3, #0, #1
 800a33c:	43d2      	mvns	r2, r2
 800a33e:	f362 0300 	bfi	r3, r2, #0, #1
 800a342:	7103      	strb	r3, [r0, #4]
        rb->read_index = 0;
 800a344:	8883      	ldrh	r3, [r0, #4]
 800a346:	f36f 034f 	bfc	r3, #1, #15
 800a34a:	8083      	strh	r3, [r0, #4]
    return 1;
 800a34c:	2001      	movs	r0, #1
}
 800a34e:	4770      	bx	lr

0800a350 <_Z15ringbuffer_initP10ringbufferPhs>:
}

void  ringbuffer_init(struct  ringbuffer *rb,
                        uint8_t           *pool,
                        int16_t            size)
{
 800a350:	b430      	push	{r4, r5}
    ASSERT(rb != NULL);
    ASSERT(size > 0);

    /* initialize read and write index */
    rb->read_mirror = rb->read_index = 0;
    rb->write_mirror = rb->write_index = 0;
 800a352:	88c3      	ldrh	r3, [r0, #6]
    rb->read_mirror = rb->read_index = 0;
 800a354:	8884      	ldrh	r4, [r0, #4]

    /* set buffer pool and size */
    rb->buffer_ptr = pool;
 800a356:	6001      	str	r1, [r0, #0]
    rb->read_mirror = rb->read_index = 0;
 800a358:	f36f 044f 	bfc	r4, #1, #15
    rb->write_mirror = rb->write_index = 0;
 800a35c:	f36f 034f 	bfc	r3, #1, #15
    rb->read_mirror = rb->read_index = 0;
 800a360:	4625      	mov	r5, r4
    rb->write_mirror = rb->write_index = 0;
 800a362:	4619      	mov	r1, r3
    rb->read_mirror = rb->read_index = 0;
 800a364:	f36f 0500 	bfc	r5, #0, #1
    rb->write_mirror = rb->write_index = 0;
 800a368:	f36f 0100 	bfc	r1, #0, #1
    rb->read_mirror = rb->read_index = 0;
 800a36c:	8084      	strh	r4, [r0, #4]
    rb->write_mirror = rb->write_index = 0;
 800a36e:	80c3      	strh	r3, [r0, #6]
    rb->read_mirror = rb->read_index = 0;
 800a370:	7105      	strb	r5, [r0, #4]
    rb->buffer_size = size; //ALIGN_DOWN(size, ALIGN_SIZE);
 800a372:	8102      	strh	r2, [r0, #8]
    rb->write_mirror = rb->write_index = 0;
 800a374:	7181      	strb	r1, [r0, #6]
}
 800a376:	bc30      	pop	{r4, r5}
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop

0800a37c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 800a37c:	b510      	push	{r4, lr}
 800a37e:	4b03      	ldr	r3, [pc, #12]	; (800a38c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800a380:	6003      	str	r3, [r0, #0]
 800a382:	4604      	mov	r4, r0
 800a384:	f000 f8a0 	bl	800a4c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800a388:	4620      	mov	r0, r4
 800a38a:	bd10      	pop	{r4, pc}
 800a38c:	0800b044 	.word	0x0800b044

0800a390 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 800a390:	b510      	push	{r4, lr}
 800a392:	4604      	mov	r4, r0
 800a394:	f7ff fff2 	bl	800a37c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 800a398:	4620      	mov	r0, r4
 800a39a:	210c      	movs	r1, #12
 800a39c:	f000 f871 	bl	800a482 <_ZdlPvj>
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	bd10      	pop	{r4, pc}

0800a3a4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 800a3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a8:	9e06      	ldr	r6, [sp, #24]
 800a3aa:	4296      	cmp	r6, r2
 800a3ac:	4680      	mov	r8, r0
 800a3ae:	460f      	mov	r7, r1
 800a3b0:	4614      	mov	r4, r2
 800a3b2:	461d      	mov	r5, r3
 800a3b4:	d103      	bne.n	800a3be <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	f000 f8da 	bl	800a570 <_ZNKSt9type_infoeqERKS_>
 800a3bc:	b958      	cbnz	r0, 800a3d6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x32>
 800a3be:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800a3c2:	6803      	ldr	r3, [r0, #0]
 800a3c4:	9606      	str	r6, [sp, #24]
 800a3c6:	6a1e      	ldr	r6, [r3, #32]
 800a3c8:	4622      	mov	r2, r4
 800a3ca:	462b      	mov	r3, r5
 800a3cc:	4639      	mov	r1, r7
 800a3ce:	46b4      	mov	ip, r6
 800a3d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3d4:	4760      	bx	ip
 800a3d6:	2006      	movs	r0, #6
 800a3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a3dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 800a3dc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e0:	460e      	mov	r6, r1
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	4683      	mov	fp, r0
 800a3e6:	4617      	mov	r7, r2
 800a3e8:	4699      	mov	r9, r3
 800a3ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a3ec:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800a3f0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800a3f4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a3f6:	f000 f8bb 	bl	800a570 <_ZNKSt9type_infoeqERKS_>
 800a3fa:	b190      	cbz	r0, 800a422 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46>
 800a3fc:	2e00      	cmp	r6, #0
 800a3fe:	602c      	str	r4, [r5, #0]
 800a400:	712f      	strb	r7, [r5, #4]
 800a402:	db09      	blt.n	800a418 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 800a404:	4434      	add	r4, r6
 800a406:	45a0      	cmp	r8, r4
 800a408:	bf0c      	ite	eq
 800a40a:	2406      	moveq	r4, #6
 800a40c:	2401      	movne	r4, #1
 800a40e:	71ac      	strb	r4, [r5, #6]
 800a410:	2000      	movs	r0, #0
 800a412:	b001      	add	sp, #4
 800a414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a418:	3602      	adds	r6, #2
 800a41a:	d1f9      	bne.n	800a410 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 800a41c:	2301      	movs	r3, #1
 800a41e:	71ab      	strb	r3, [r5, #6]
 800a420:	e7f6      	b.n	800a410 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 800a422:	4544      	cmp	r4, r8
 800a424:	d104      	bne.n	800a430 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 800a426:	4651      	mov	r1, sl
 800a428:	4658      	mov	r0, fp
 800a42a:	f000 f8a1 	bl	800a570 <_ZNKSt9type_infoeqERKS_>
 800a42e:	b988      	cbnz	r0, 800a454 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 800a430:	f8db 0008 	ldr.w	r0, [fp, #8]
 800a434:	6803      	ldr	r3, [r0, #0]
 800a436:	950d      	str	r5, [sp, #52]	; 0x34
 800a438:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800a43c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 800a440:	940a      	str	r4, [sp, #40]	; 0x28
 800a442:	69dc      	ldr	r4, [r3, #28]
 800a444:	463a      	mov	r2, r7
 800a446:	464b      	mov	r3, r9
 800a448:	4631      	mov	r1, r6
 800a44a:	46a4      	mov	ip, r4
 800a44c:	b001      	add	sp, #4
 800a44e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a452:	4760      	bx	ip
 800a454:	716f      	strb	r7, [r5, #5]
 800a456:	e7db      	b.n	800a410 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

0800a458 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800a458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a45c:	4604      	mov	r4, r0
 800a45e:	460d      	mov	r5, r1
 800a460:	4616      	mov	r6, r2
 800a462:	461f      	mov	r7, r3
 800a464:	f000 f844 	bl	800a4f0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800a468:	b948      	cbnz	r0, 800a47e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 800a46a:	68a0      	ldr	r0, [r4, #8]
 800a46c:	6803      	ldr	r3, [r0, #0]
 800a46e:	699c      	ldr	r4, [r3, #24]
 800a470:	4632      	mov	r2, r6
 800a472:	463b      	mov	r3, r7
 800a474:	4629      	mov	r1, r5
 800a476:	46a4      	mov	ip, r4
 800a478:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a47c:	4760      	bx	ip
 800a47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a482 <_ZdlPvj>:
 800a482:	f000 b88b 	b.w	800a59c <_ZdlPv>

0800a486 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800a486:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a488:	2310      	movs	r3, #16
 800a48a:	9302      	str	r3, [sp, #8]
 800a48c:	6803      	ldr	r3, [r0, #0]
 800a48e:	2400      	movs	r4, #0
 800a490:	4615      	mov	r5, r2
 800a492:	699e      	ldr	r6, [r3, #24]
 800a494:	9400      	str	r4, [sp, #0]
 800a496:	466b      	mov	r3, sp
 800a498:	f88d 4004 	strb.w	r4, [sp, #4]
 800a49c:	9403      	str	r4, [sp, #12]
 800a49e:	6812      	ldr	r2, [r2, #0]
 800a4a0:	47b0      	blx	r6
 800a4a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a4a6:	f003 0306 	and.w	r3, r3, #6
 800a4aa:	2b06      	cmp	r3, #6
 800a4ac:	bf03      	ittte	eq
 800a4ae:	9b00      	ldreq	r3, [sp, #0]
 800a4b0:	602b      	streq	r3, [r5, #0]
 800a4b2:	2001      	moveq	r0, #1
 800a4b4:	4620      	movne	r0, r4
 800a4b6:	b004      	add	sp, #16
 800a4b8:	bd70      	pop	{r4, r5, r6, pc}

0800a4ba <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 800a4ba:	9800      	ldr	r0, [sp, #0]
 800a4bc:	4290      	cmp	r0, r2
 800a4be:	bf0c      	ite	eq
 800a4c0:	2006      	moveq	r0, #6
 800a4c2:	2001      	movne	r0, #1
 800a4c4:	4770      	bx	lr
	...

0800a4c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 800a4c8:	b510      	push	{r4, lr}
 800a4ca:	4b03      	ldr	r3, [pc, #12]	; (800a4d8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 800a4cc:	6003      	str	r3, [r0, #0]
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	f000 f84b 	bl	800a56a <_ZNSt9type_infoD1Ev>
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	bd10      	pop	{r4, pc}
 800a4d8:	0800b0a0 	.word	0x0800b0a0

0800a4dc <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 800a4dc:	b510      	push	{r4, lr}
 800a4de:	4604      	mov	r4, r0
 800a4e0:	f7ff fff2 	bl	800a4c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	2108      	movs	r1, #8
 800a4e8:	f7ff ffcb 	bl	800a482 <_ZdlPvj>
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	bd10      	pop	{r4, pc}

0800a4f0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800a4f0:	b538      	push	{r3, r4, r5, lr}
 800a4f2:	4615      	mov	r5, r2
 800a4f4:	461c      	mov	r4, r3
 800a4f6:	f000 f83b 	bl	800a570 <_ZNKSt9type_infoeqERKS_>
 800a4fa:	b120      	cbz	r0, 800a506 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 800a4fc:	2308      	movs	r3, #8
 800a4fe:	60e3      	str	r3, [r4, #12]
 800a500:	2306      	movs	r3, #6
 800a502:	6025      	str	r5, [r4, #0]
 800a504:	7123      	strb	r3, [r4, #4]
 800a506:	bd38      	pop	{r3, r4, r5, pc}

0800a508 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 800a508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a50c:	4605      	mov	r5, r0
 800a50e:	460c      	mov	r4, r1
 800a510:	4616      	mov	r6, r2
 800a512:	461f      	mov	r7, r3
 800a514:	f000 f82c 	bl	800a570 <_ZNKSt9type_infoeqERKS_>
 800a518:	b948      	cbnz	r0, 800a52e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800a51a:	2f03      	cmp	r7, #3
 800a51c:	d807      	bhi.n	800a52e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800a51e:	6823      	ldr	r3, [r4, #0]
 800a520:	4632      	mov	r2, r6
 800a522:	4629      	mov	r1, r5
 800a524:	4620      	mov	r0, r4
 800a526:	695b      	ldr	r3, [r3, #20]
 800a528:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a52c:	4718      	bx	r3
 800a52e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a532 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 800a532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a536:	9e06      	ldr	r6, [sp, #24]
 800a538:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a53a:	4698      	mov	r8, r3
 800a53c:	9b08      	ldr	r3, [sp, #32]
 800a53e:	429e      	cmp	r6, r3
 800a540:	4607      	mov	r7, r0
 800a542:	4615      	mov	r5, r2
 800a544:	d103      	bne.n	800a54e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1c>
 800a546:	9907      	ldr	r1, [sp, #28]
 800a548:	f000 f812 	bl	800a570 <_ZNKSt9type_infoeqERKS_>
 800a54c:	b958      	cbnz	r0, 800a566 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 800a54e:	4641      	mov	r1, r8
 800a550:	4638      	mov	r0, r7
 800a552:	f000 f80d 	bl	800a570 <_ZNKSt9type_infoeqERKS_>
 800a556:	b118      	cbz	r0, 800a560 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 800a558:	2301      	movs	r3, #1
 800a55a:	6026      	str	r6, [r4, #0]
 800a55c:	7125      	strb	r5, [r4, #4]
 800a55e:	71a3      	strb	r3, [r4, #6]
 800a560:	2000      	movs	r0, #0
 800a562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a566:	7165      	strb	r5, [r4, #5]
 800a568:	e7fa      	b.n	800a560 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>

0800a56a <_ZNSt9type_infoD1Ev>:
 800a56a:	4770      	bx	lr

0800a56c <_ZNKSt9type_info14__is_pointer_pEv>:
 800a56c:	2000      	movs	r0, #0
 800a56e:	4770      	bx	lr

0800a570 <_ZNKSt9type_infoeqERKS_>:
 800a570:	4281      	cmp	r1, r0
 800a572:	b508      	push	{r3, lr}
 800a574:	d00e      	beq.n	800a594 <_ZNKSt9type_infoeqERKS_+0x24>
 800a576:	6840      	ldr	r0, [r0, #4]
 800a578:	7803      	ldrb	r3, [r0, #0]
 800a57a:	2b2a      	cmp	r3, #42	; 0x2a
 800a57c:	d00c      	beq.n	800a598 <_ZNKSt9type_infoeqERKS_+0x28>
 800a57e:	6849      	ldr	r1, [r1, #4]
 800a580:	780b      	ldrb	r3, [r1, #0]
 800a582:	2b2a      	cmp	r3, #42	; 0x2a
 800a584:	bf08      	it	eq
 800a586:	3101      	addeq	r1, #1
 800a588:	f7f5 fe22 	bl	80001d0 <strcmp>
 800a58c:	fab0 f080 	clz	r0, r0
 800a590:	0940      	lsrs	r0, r0, #5
 800a592:	bd08      	pop	{r3, pc}
 800a594:	2001      	movs	r0, #1
 800a596:	bd08      	pop	{r3, pc}
 800a598:	2000      	movs	r0, #0
 800a59a:	bd08      	pop	{r3, pc}

0800a59c <_ZdlPv>:
 800a59c:	f000 b832 	b.w	800a604 <free>

0800a5a0 <__errno>:
 800a5a0:	4b01      	ldr	r3, [pc, #4]	; (800a5a8 <__errno+0x8>)
 800a5a2:	6818      	ldr	r0, [r3, #0]
 800a5a4:	4770      	bx	lr
 800a5a6:	bf00      	nop
 800a5a8:	20000180 	.word	0x20000180

0800a5ac <__libc_init_array>:
 800a5ac:	b570      	push	{r4, r5, r6, lr}
 800a5ae:	4e0d      	ldr	r6, [pc, #52]	; (800a5e4 <__libc_init_array+0x38>)
 800a5b0:	4c0d      	ldr	r4, [pc, #52]	; (800a5e8 <__libc_init_array+0x3c>)
 800a5b2:	1ba4      	subs	r4, r4, r6
 800a5b4:	10a4      	asrs	r4, r4, #2
 800a5b6:	2500      	movs	r5, #0
 800a5b8:	42a5      	cmp	r5, r4
 800a5ba:	d109      	bne.n	800a5d0 <__libc_init_array+0x24>
 800a5bc:	4e0b      	ldr	r6, [pc, #44]	; (800a5ec <__libc_init_array+0x40>)
 800a5be:	4c0c      	ldr	r4, [pc, #48]	; (800a5f0 <__libc_init_array+0x44>)
 800a5c0:	f000 f996 	bl	800a8f0 <_init>
 800a5c4:	1ba4      	subs	r4, r4, r6
 800a5c6:	10a4      	asrs	r4, r4, #2
 800a5c8:	2500      	movs	r5, #0
 800a5ca:	42a5      	cmp	r5, r4
 800a5cc:	d105      	bne.n	800a5da <__libc_init_array+0x2e>
 800a5ce:	bd70      	pop	{r4, r5, r6, pc}
 800a5d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a5d4:	4798      	blx	r3
 800a5d6:	3501      	adds	r5, #1
 800a5d8:	e7ee      	b.n	800a5b8 <__libc_init_array+0xc>
 800a5da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a5de:	4798      	blx	r3
 800a5e0:	3501      	adds	r5, #1
 800a5e2:	e7f2      	b.n	800a5ca <__libc_init_array+0x1e>
 800a5e4:	0800b204 	.word	0x0800b204
 800a5e8:	0800b204 	.word	0x0800b204
 800a5ec:	0800b204 	.word	0x0800b204
 800a5f0:	0800b20c 	.word	0x0800b20c

0800a5f4 <malloc>:
 800a5f4:	4b02      	ldr	r3, [pc, #8]	; (800a600 <malloc+0xc>)
 800a5f6:	4601      	mov	r1, r0
 800a5f8:	6818      	ldr	r0, [r3, #0]
 800a5fa:	f000 b887 	b.w	800a70c <_malloc_r>
 800a5fe:	bf00      	nop
 800a600:	20000180 	.word	0x20000180

0800a604 <free>:
 800a604:	4b02      	ldr	r3, [pc, #8]	; (800a610 <free+0xc>)
 800a606:	4601      	mov	r1, r0
 800a608:	6818      	ldr	r0, [r3, #0]
 800a60a:	f000 b831 	b.w	800a670 <_free_r>
 800a60e:	bf00      	nop
 800a610:	20000180 	.word	0x20000180

0800a614 <memcpy>:
 800a614:	b510      	push	{r4, lr}
 800a616:	1e43      	subs	r3, r0, #1
 800a618:	440a      	add	r2, r1
 800a61a:	4291      	cmp	r1, r2
 800a61c:	d100      	bne.n	800a620 <memcpy+0xc>
 800a61e:	bd10      	pop	{r4, pc}
 800a620:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a624:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a628:	e7f7      	b.n	800a61a <memcpy+0x6>

0800a62a <memmove>:
 800a62a:	4288      	cmp	r0, r1
 800a62c:	b510      	push	{r4, lr}
 800a62e:	eb01 0302 	add.w	r3, r1, r2
 800a632:	d803      	bhi.n	800a63c <memmove+0x12>
 800a634:	1e42      	subs	r2, r0, #1
 800a636:	4299      	cmp	r1, r3
 800a638:	d10c      	bne.n	800a654 <memmove+0x2a>
 800a63a:	bd10      	pop	{r4, pc}
 800a63c:	4298      	cmp	r0, r3
 800a63e:	d2f9      	bcs.n	800a634 <memmove+0xa>
 800a640:	1881      	adds	r1, r0, r2
 800a642:	1ad2      	subs	r2, r2, r3
 800a644:	42d3      	cmn	r3, r2
 800a646:	d100      	bne.n	800a64a <memmove+0x20>
 800a648:	bd10      	pop	{r4, pc}
 800a64a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a64e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a652:	e7f7      	b.n	800a644 <memmove+0x1a>
 800a654:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a658:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a65c:	e7eb      	b.n	800a636 <memmove+0xc>

0800a65e <memset>:
 800a65e:	4402      	add	r2, r0
 800a660:	4603      	mov	r3, r0
 800a662:	4293      	cmp	r3, r2
 800a664:	d100      	bne.n	800a668 <memset+0xa>
 800a666:	4770      	bx	lr
 800a668:	f803 1b01 	strb.w	r1, [r3], #1
 800a66c:	e7f9      	b.n	800a662 <memset+0x4>
	...

0800a670 <_free_r>:
 800a670:	b538      	push	{r3, r4, r5, lr}
 800a672:	4605      	mov	r5, r0
 800a674:	2900      	cmp	r1, #0
 800a676:	d045      	beq.n	800a704 <_free_r+0x94>
 800a678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a67c:	1f0c      	subs	r4, r1, #4
 800a67e:	2b00      	cmp	r3, #0
 800a680:	bfb8      	it	lt
 800a682:	18e4      	addlt	r4, r4, r3
 800a684:	f000 f8b8 	bl	800a7f8 <__malloc_lock>
 800a688:	4a1f      	ldr	r2, [pc, #124]	; (800a708 <_free_r+0x98>)
 800a68a:	6813      	ldr	r3, [r2, #0]
 800a68c:	4610      	mov	r0, r2
 800a68e:	b933      	cbnz	r3, 800a69e <_free_r+0x2e>
 800a690:	6063      	str	r3, [r4, #4]
 800a692:	6014      	str	r4, [r2, #0]
 800a694:	4628      	mov	r0, r5
 800a696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a69a:	f000 b8ae 	b.w	800a7fa <__malloc_unlock>
 800a69e:	42a3      	cmp	r3, r4
 800a6a0:	d90c      	bls.n	800a6bc <_free_r+0x4c>
 800a6a2:	6821      	ldr	r1, [r4, #0]
 800a6a4:	1862      	adds	r2, r4, r1
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	bf04      	itt	eq
 800a6aa:	681a      	ldreq	r2, [r3, #0]
 800a6ac:	685b      	ldreq	r3, [r3, #4]
 800a6ae:	6063      	str	r3, [r4, #4]
 800a6b0:	bf04      	itt	eq
 800a6b2:	1852      	addeq	r2, r2, r1
 800a6b4:	6022      	streq	r2, [r4, #0]
 800a6b6:	6004      	str	r4, [r0, #0]
 800a6b8:	e7ec      	b.n	800a694 <_free_r+0x24>
 800a6ba:	4613      	mov	r3, r2
 800a6bc:	685a      	ldr	r2, [r3, #4]
 800a6be:	b10a      	cbz	r2, 800a6c4 <_free_r+0x54>
 800a6c0:	42a2      	cmp	r2, r4
 800a6c2:	d9fa      	bls.n	800a6ba <_free_r+0x4a>
 800a6c4:	6819      	ldr	r1, [r3, #0]
 800a6c6:	1858      	adds	r0, r3, r1
 800a6c8:	42a0      	cmp	r0, r4
 800a6ca:	d10b      	bne.n	800a6e4 <_free_r+0x74>
 800a6cc:	6820      	ldr	r0, [r4, #0]
 800a6ce:	4401      	add	r1, r0
 800a6d0:	1858      	adds	r0, r3, r1
 800a6d2:	4282      	cmp	r2, r0
 800a6d4:	6019      	str	r1, [r3, #0]
 800a6d6:	d1dd      	bne.n	800a694 <_free_r+0x24>
 800a6d8:	6810      	ldr	r0, [r2, #0]
 800a6da:	6852      	ldr	r2, [r2, #4]
 800a6dc:	605a      	str	r2, [r3, #4]
 800a6de:	4401      	add	r1, r0
 800a6e0:	6019      	str	r1, [r3, #0]
 800a6e2:	e7d7      	b.n	800a694 <_free_r+0x24>
 800a6e4:	d902      	bls.n	800a6ec <_free_r+0x7c>
 800a6e6:	230c      	movs	r3, #12
 800a6e8:	602b      	str	r3, [r5, #0]
 800a6ea:	e7d3      	b.n	800a694 <_free_r+0x24>
 800a6ec:	6820      	ldr	r0, [r4, #0]
 800a6ee:	1821      	adds	r1, r4, r0
 800a6f0:	428a      	cmp	r2, r1
 800a6f2:	bf04      	itt	eq
 800a6f4:	6811      	ldreq	r1, [r2, #0]
 800a6f6:	6852      	ldreq	r2, [r2, #4]
 800a6f8:	6062      	str	r2, [r4, #4]
 800a6fa:	bf04      	itt	eq
 800a6fc:	1809      	addeq	r1, r1, r0
 800a6fe:	6021      	streq	r1, [r4, #0]
 800a700:	605c      	str	r4, [r3, #4]
 800a702:	e7c7      	b.n	800a694 <_free_r+0x24>
 800a704:	bd38      	pop	{r3, r4, r5, pc}
 800a706:	bf00      	nop
 800a708:	20004898 	.word	0x20004898

0800a70c <_malloc_r>:
 800a70c:	b570      	push	{r4, r5, r6, lr}
 800a70e:	1ccd      	adds	r5, r1, #3
 800a710:	f025 0503 	bic.w	r5, r5, #3
 800a714:	3508      	adds	r5, #8
 800a716:	2d0c      	cmp	r5, #12
 800a718:	bf38      	it	cc
 800a71a:	250c      	movcc	r5, #12
 800a71c:	2d00      	cmp	r5, #0
 800a71e:	4606      	mov	r6, r0
 800a720:	db01      	blt.n	800a726 <_malloc_r+0x1a>
 800a722:	42a9      	cmp	r1, r5
 800a724:	d903      	bls.n	800a72e <_malloc_r+0x22>
 800a726:	230c      	movs	r3, #12
 800a728:	6033      	str	r3, [r6, #0]
 800a72a:	2000      	movs	r0, #0
 800a72c:	bd70      	pop	{r4, r5, r6, pc}
 800a72e:	f000 f863 	bl	800a7f8 <__malloc_lock>
 800a732:	4a23      	ldr	r2, [pc, #140]	; (800a7c0 <_malloc_r+0xb4>)
 800a734:	6814      	ldr	r4, [r2, #0]
 800a736:	4621      	mov	r1, r4
 800a738:	b991      	cbnz	r1, 800a760 <_malloc_r+0x54>
 800a73a:	4c22      	ldr	r4, [pc, #136]	; (800a7c4 <_malloc_r+0xb8>)
 800a73c:	6823      	ldr	r3, [r4, #0]
 800a73e:	b91b      	cbnz	r3, 800a748 <_malloc_r+0x3c>
 800a740:	4630      	mov	r0, r6
 800a742:	f000 f849 	bl	800a7d8 <_sbrk_r>
 800a746:	6020      	str	r0, [r4, #0]
 800a748:	4629      	mov	r1, r5
 800a74a:	4630      	mov	r0, r6
 800a74c:	f000 f844 	bl	800a7d8 <_sbrk_r>
 800a750:	1c43      	adds	r3, r0, #1
 800a752:	d126      	bne.n	800a7a2 <_malloc_r+0x96>
 800a754:	230c      	movs	r3, #12
 800a756:	6033      	str	r3, [r6, #0]
 800a758:	4630      	mov	r0, r6
 800a75a:	f000 f84e 	bl	800a7fa <__malloc_unlock>
 800a75e:	e7e4      	b.n	800a72a <_malloc_r+0x1e>
 800a760:	680b      	ldr	r3, [r1, #0]
 800a762:	1b5b      	subs	r3, r3, r5
 800a764:	d41a      	bmi.n	800a79c <_malloc_r+0x90>
 800a766:	2b0b      	cmp	r3, #11
 800a768:	d90f      	bls.n	800a78a <_malloc_r+0x7e>
 800a76a:	600b      	str	r3, [r1, #0]
 800a76c:	50cd      	str	r5, [r1, r3]
 800a76e:	18cc      	adds	r4, r1, r3
 800a770:	4630      	mov	r0, r6
 800a772:	f000 f842 	bl	800a7fa <__malloc_unlock>
 800a776:	f104 000b 	add.w	r0, r4, #11
 800a77a:	1d23      	adds	r3, r4, #4
 800a77c:	f020 0007 	bic.w	r0, r0, #7
 800a780:	1ac3      	subs	r3, r0, r3
 800a782:	d01b      	beq.n	800a7bc <_malloc_r+0xb0>
 800a784:	425a      	negs	r2, r3
 800a786:	50e2      	str	r2, [r4, r3]
 800a788:	bd70      	pop	{r4, r5, r6, pc}
 800a78a:	428c      	cmp	r4, r1
 800a78c:	bf0d      	iteet	eq
 800a78e:	6863      	ldreq	r3, [r4, #4]
 800a790:	684b      	ldrne	r3, [r1, #4]
 800a792:	6063      	strne	r3, [r4, #4]
 800a794:	6013      	streq	r3, [r2, #0]
 800a796:	bf18      	it	ne
 800a798:	460c      	movne	r4, r1
 800a79a:	e7e9      	b.n	800a770 <_malloc_r+0x64>
 800a79c:	460c      	mov	r4, r1
 800a79e:	6849      	ldr	r1, [r1, #4]
 800a7a0:	e7ca      	b.n	800a738 <_malloc_r+0x2c>
 800a7a2:	1cc4      	adds	r4, r0, #3
 800a7a4:	f024 0403 	bic.w	r4, r4, #3
 800a7a8:	42a0      	cmp	r0, r4
 800a7aa:	d005      	beq.n	800a7b8 <_malloc_r+0xac>
 800a7ac:	1a21      	subs	r1, r4, r0
 800a7ae:	4630      	mov	r0, r6
 800a7b0:	f000 f812 	bl	800a7d8 <_sbrk_r>
 800a7b4:	3001      	adds	r0, #1
 800a7b6:	d0cd      	beq.n	800a754 <_malloc_r+0x48>
 800a7b8:	6025      	str	r5, [r4, #0]
 800a7ba:	e7d9      	b.n	800a770 <_malloc_r+0x64>
 800a7bc:	bd70      	pop	{r4, r5, r6, pc}
 800a7be:	bf00      	nop
 800a7c0:	20004898 	.word	0x20004898
 800a7c4:	2000489c 	.word	0x2000489c

0800a7c8 <realloc>:
 800a7c8:	4b02      	ldr	r3, [pc, #8]	; (800a7d4 <realloc+0xc>)
 800a7ca:	460a      	mov	r2, r1
 800a7cc:	4601      	mov	r1, r0
 800a7ce:	6818      	ldr	r0, [r3, #0]
 800a7d0:	f000 b814 	b.w	800a7fc <_realloc_r>
 800a7d4:	20000180 	.word	0x20000180

0800a7d8 <_sbrk_r>:
 800a7d8:	b538      	push	{r3, r4, r5, lr}
 800a7da:	4c06      	ldr	r4, [pc, #24]	; (800a7f4 <_sbrk_r+0x1c>)
 800a7dc:	2300      	movs	r3, #0
 800a7de:	4605      	mov	r5, r0
 800a7e0:	4608      	mov	r0, r1
 800a7e2:	6023      	str	r3, [r4, #0]
 800a7e4:	f7fc ffde 	bl	80077a4 <_sbrk>
 800a7e8:	1c43      	adds	r3, r0, #1
 800a7ea:	d102      	bne.n	800a7f2 <_sbrk_r+0x1a>
 800a7ec:	6823      	ldr	r3, [r4, #0]
 800a7ee:	b103      	cbz	r3, 800a7f2 <_sbrk_r+0x1a>
 800a7f0:	602b      	str	r3, [r5, #0]
 800a7f2:	bd38      	pop	{r3, r4, r5, pc}
 800a7f4:	20005ce8 	.word	0x20005ce8

0800a7f8 <__malloc_lock>:
 800a7f8:	4770      	bx	lr

0800a7fa <__malloc_unlock>:
 800a7fa:	4770      	bx	lr

0800a7fc <_realloc_r>:
 800a7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7fe:	4607      	mov	r7, r0
 800a800:	4614      	mov	r4, r2
 800a802:	460e      	mov	r6, r1
 800a804:	b921      	cbnz	r1, 800a810 <_realloc_r+0x14>
 800a806:	4611      	mov	r1, r2
 800a808:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a80c:	f7ff bf7e 	b.w	800a70c <_malloc_r>
 800a810:	b922      	cbnz	r2, 800a81c <_realloc_r+0x20>
 800a812:	f7ff ff2d 	bl	800a670 <_free_r>
 800a816:	4625      	mov	r5, r4
 800a818:	4628      	mov	r0, r5
 800a81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a81c:	f000 f814 	bl	800a848 <_malloc_usable_size_r>
 800a820:	4284      	cmp	r4, r0
 800a822:	d90f      	bls.n	800a844 <_realloc_r+0x48>
 800a824:	4621      	mov	r1, r4
 800a826:	4638      	mov	r0, r7
 800a828:	f7ff ff70 	bl	800a70c <_malloc_r>
 800a82c:	4605      	mov	r5, r0
 800a82e:	2800      	cmp	r0, #0
 800a830:	d0f2      	beq.n	800a818 <_realloc_r+0x1c>
 800a832:	4631      	mov	r1, r6
 800a834:	4622      	mov	r2, r4
 800a836:	f7ff feed 	bl	800a614 <memcpy>
 800a83a:	4631      	mov	r1, r6
 800a83c:	4638      	mov	r0, r7
 800a83e:	f7ff ff17 	bl	800a670 <_free_r>
 800a842:	e7e9      	b.n	800a818 <_realloc_r+0x1c>
 800a844:	4635      	mov	r5, r6
 800a846:	e7e7      	b.n	800a818 <_realloc_r+0x1c>

0800a848 <_malloc_usable_size_r>:
 800a848:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800a84c:	2800      	cmp	r0, #0
 800a84e:	f1a0 0004 	sub.w	r0, r0, #4
 800a852:	bfbc      	itt	lt
 800a854:	580b      	ldrlt	r3, [r1, r0]
 800a856:	18c0      	addlt	r0, r0, r3
 800a858:	4770      	bx	lr

0800a85a <abort>:
 800a85a:	b508      	push	{r3, lr}
 800a85c:	2006      	movs	r0, #6
 800a85e:	f000 f82b 	bl	800a8b8 <raise>
 800a862:	2001      	movs	r0, #1
 800a864:	f7fc ff98 	bl	8007798 <_exit>

0800a868 <_raise_r>:
 800a868:	291f      	cmp	r1, #31
 800a86a:	b538      	push	{r3, r4, r5, lr}
 800a86c:	4604      	mov	r4, r0
 800a86e:	460d      	mov	r5, r1
 800a870:	d904      	bls.n	800a87c <_raise_r+0x14>
 800a872:	2316      	movs	r3, #22
 800a874:	6003      	str	r3, [r0, #0]
 800a876:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a87a:	bd38      	pop	{r3, r4, r5, pc}
 800a87c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a87e:	b112      	cbz	r2, 800a886 <_raise_r+0x1e>
 800a880:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a884:	b94b      	cbnz	r3, 800a89a <_raise_r+0x32>
 800a886:	4620      	mov	r0, r4
 800a888:	f000 f830 	bl	800a8ec <_getpid_r>
 800a88c:	462a      	mov	r2, r5
 800a88e:	4601      	mov	r1, r0
 800a890:	4620      	mov	r0, r4
 800a892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a896:	f000 b817 	b.w	800a8c8 <_kill_r>
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d00a      	beq.n	800a8b4 <_raise_r+0x4c>
 800a89e:	1c59      	adds	r1, r3, #1
 800a8a0:	d103      	bne.n	800a8aa <_raise_r+0x42>
 800a8a2:	2316      	movs	r3, #22
 800a8a4:	6003      	str	r3, [r0, #0]
 800a8a6:	2001      	movs	r0, #1
 800a8a8:	bd38      	pop	{r3, r4, r5, pc}
 800a8aa:	2400      	movs	r4, #0
 800a8ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a8b0:	4628      	mov	r0, r5
 800a8b2:	4798      	blx	r3
 800a8b4:	2000      	movs	r0, #0
 800a8b6:	bd38      	pop	{r3, r4, r5, pc}

0800a8b8 <raise>:
 800a8b8:	4b02      	ldr	r3, [pc, #8]	; (800a8c4 <raise+0xc>)
 800a8ba:	4601      	mov	r1, r0
 800a8bc:	6818      	ldr	r0, [r3, #0]
 800a8be:	f7ff bfd3 	b.w	800a868 <_raise_r>
 800a8c2:	bf00      	nop
 800a8c4:	20000180 	.word	0x20000180

0800a8c8 <_kill_r>:
 800a8c8:	b538      	push	{r3, r4, r5, lr}
 800a8ca:	4c07      	ldr	r4, [pc, #28]	; (800a8e8 <_kill_r+0x20>)
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	4605      	mov	r5, r0
 800a8d0:	4608      	mov	r0, r1
 800a8d2:	4611      	mov	r1, r2
 800a8d4:	6023      	str	r3, [r4, #0]
 800a8d6:	f7fc ff57 	bl	8007788 <_kill>
 800a8da:	1c43      	adds	r3, r0, #1
 800a8dc:	d102      	bne.n	800a8e4 <_kill_r+0x1c>
 800a8de:	6823      	ldr	r3, [r4, #0]
 800a8e0:	b103      	cbz	r3, 800a8e4 <_kill_r+0x1c>
 800a8e2:	602b      	str	r3, [r5, #0]
 800a8e4:	bd38      	pop	{r3, r4, r5, pc}
 800a8e6:	bf00      	nop
 800a8e8:	20005ce8 	.word	0x20005ce8

0800a8ec <_getpid_r>:
 800a8ec:	f7fc bf4a 	b.w	8007784 <_getpid>

0800a8f0 <_init>:
 800a8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f2:	bf00      	nop
 800a8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8f6:	bc08      	pop	{r3}
 800a8f8:	469e      	mov	lr, r3
 800a8fa:	4770      	bx	lr

0800a8fc <_fini>:
 800a8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8fe:	bf00      	nop
 800a900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a902:	bc08      	pop	{r3}
 800a904:	469e      	mov	lr, r3
 800a906:	4770      	bx	lr
